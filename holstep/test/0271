N Lp_ineqs_proofs.lp_cond_trans
C |- (!L. (!V. (!E. (!g. (!h. (!ds. (((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))))))))))
T c==> clp_cond c, f0 c, f1 f2 c, f3 f4 clp_cond c, csplit_list_list f0 f5 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 f5
D TRUTH
A |- T
T cT
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D Seq.foldr
A |- (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))
T c/\ c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3 c= cfoldr f0 f1 cNIL f1
D Lp_ineqs_proofs.add_diag_list
A |- (!V. (!g. (!E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags))))))
T c= * * part cadd_diag_list c, f0 c, f1 f2 f3 * * * part cfoldr / / * * part cadd_diag c, f1 b1 * f0 b0 f2 f3
D Lp_ineqs_proofs.split_list_list
A |- (!L. (!ds. (((split_list_list L) ds) = (((foldr (\d. (\L. ((split_list_hyp L) d)))) L) ds))))
T c= csplit_list_list f0 f1 cfoldr / / csplit_list_hyp b1 b0 f0 f1
D Lp_ineqs_proofs.lp_cond_trans1
A |- (!L. (!V. (!E. (!g. (!h. (!d. (((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_hyp L) d) , (g , h))) (V , ((add_diag (V , E)) (g d)))))))))))
T c==> clp_cond c, f0 c, f1 f2 c, f3 f4 clp_cond c, csplit_list_hyp f0 f5 c, f1 f2 c, f3 * * part cadd_diag c, f3 f4 * f1 f5
+ ((lp_cond (L , (g , h))) (V , E)) |- (((!x. (((\ds1. (ds = ds1)) x) ==> ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))))) ==> ((?ds1. (ds = ds1)) ==> ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))))) = ((?ds1. (ds = ds1)) ==> ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds)))))
T c==> clp_cond c, f0 c, f1 f2 c, f3 f4 c= c==> ! c==> * / c= f5 b1 b0 clp_cond c, csplit_list_list f0 f5 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 f5 c==> c? / c= f5 b0 clp_cond c, csplit_list_list f0 f5 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 f5 c==> c? / c= f5 b0 clp_cond c, csplit_list_list f0 f5 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 f5
+ |- ((\diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags))) diags)
T * / c= * * part cadd_diag_list c, f0 c, f1 f2 b0 * * * part cfoldr / / * * part cadd_diag c, f1 b2 * f0 b1 f2 b0 f3
+ |- (((!V. (!E. (!g. (!h. (!d. (((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_hyp L) d) , (g , h))) (V , ((add_diag (V , E)) (g d)))))))))) ==> ((\V. (!E. (!g. (!h. (!d. (((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_hyp L) d) , (g , h))) (V , ((add_diag (V , E)) (g d)))))))))) V)) = ((\V. (!E. (!g. (!h. (!d. (((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_hyp L) d) , (g , h))) (V , ((add_diag (V , E)) (g d)))))))))) V))
T c= c==> ! ! ! ! ! c==> clp_cond c, f0 c, b2 b3 c, b0 b1 clp_cond c, csplit_list_hyp f0 b4 c, b2 b3 c, b0 * * part cadd_diag c, b0 b1 * b2 b4 * / ! ! ! ! c==> clp_cond c, f0 c, b2 b3 c, b0 b1 clp_cond c, csplit_list_hyp f0 b4 c, b2 b3 c, b0 * * part cadd_diag c, b0 b1 * b2 b4 f1 * / ! ! ! ! c==> clp_cond c, f0 c, b2 b3 c, b0 b1 clp_cond c, csplit_list_hyp f0 b4 c, b2 b3 c, b0 * * part cadd_diag c, b0 b1 * b2 b4 f1
+ |- (((lp_cond ((((\d. (\L. ((split_list_hyp L) d))) h) ((split_list_list L) t)) , (g , h))) (V , (((\d. (\E'. ((add_diag (V , E')) (g d)))) h) (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) t)))) = ((lp_cond ((((\d. (\L. ((split_list_hyp L) d))) h) (((foldr (\d. (\L. ((split_list_hyp L) d)))) L) t)) , (g , h))) (V , (((\d. (\E'. ((add_diag (V , E')) (g d)))) h) (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) t)))))
T c= clp_cond c, * * / / csplit_list_hyp b1 b0 f0 csplit_list_list f1 f2 c, f3 f4 c, f5 * * / / * * part cadd_diag c, f5 b1 * f3 b0 f0 * * * part cfoldr / / * * part cadd_diag c, f5 b1 * f3 b0 f6 f2 clp_cond c, * * / / csplit_list_hyp b1 b0 f0 cfoldr / / csplit_list_hyp b1 b0 f1 f2 c, f3 f4 c, f5 * * / / * * part cadd_diag c, f5 b1 * f3 b0 f0 * * * part cfoldr / / * * part cadd_diag c, f5 b1 * f3 b0 f6 f2
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))) = ((lp_cond ((((\d. (\L. ((split_list_hyp L) d))) h) ((split_list_list L) t)) , (g , h))) (V , (((\d. (\E'. ((add_diag (V , E')) (g d)))) h) ((add_diag_list (g , (V , E))) t)))))
T c= clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f2 c, f3 f4 c, f5 * * part cadd_diag c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f1 * f3 f2 clp_cond c, * * / / csplit_list_hyp b1 b0 f2 csplit_list_list f0 f1 c, f3 f4 c, f5 * * / / * * part cadd_diag c, f5 b1 * f3 b0 f2 * * part cadd_diag_list c, f3 c, f5 f6 f1
+ |- ((\ds. ((((foldr (\d. (\L. ((split_list_hyp L) d)))) L) ds) = ((split_list_list L) ds))) ds)
T * / c= cfoldr / / csplit_list_hyp b2 b1 f0 b0 csplit_list_list f0 b0 f1
+ (((split_list_list L) ds) = (((foldr (\d. (\L. ((split_list_hyp L) d)))) L) ds)) |- ((((foldr (\d. (\L. ((split_list_hyp L) d)))) L) ds) = ((split_list_list L) ds))
T c==> c= csplit_list_list f0 f1 cfoldr / / csplit_list_hyp b1 b0 f0 f1 c= cfoldr / / csplit_list_hyp b1 b0 f0 f1 csplit_list_list f0 f1
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ ((lp_cond (L , (g , h))) (V , E)), ((\ds1. (ds = ds1)) ds1) |- (((\ds1. (ds = ds1)) ds1) /\ ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))))
T c==> clp_cond c, f0 c, f1 f2 c, f3 f4 c==> * / c= f5 b0 f6 c/\ * / c= f5 b0 f6 clp_cond c, csplit_list_list f0 f5 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 f5
+ |- (((!g. (!h. (!d. (((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_hyp L) d) , (g , h))) (V , ((add_diag (V , E)) (g d)))))))) ==> ((\g. (!h. (!d. (((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_hyp L) d) , (g , h))) (V , ((add_diag (V , E)) (g d)))))))) g)) = ((\g. (!h. (!d. (((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_hyp L) d) , (g , h))) (V , ((add_diag (V , E)) (g d)))))))) g))
T c= c==> ! ! ! c==> clp_cond c, f0 c, b0 b1 c, f1 f2 clp_cond c, csplit_list_hyp f0 b2 c, b0 b1 c, f1 * * part cadd_diag c, f1 f2 * b0 b2 * / ! ! c==> clp_cond c, f0 c, b0 b1 c, f1 f2 clp_cond c, csplit_list_hyp f0 b2 c, b0 b1 c, f1 * * part cadd_diag c, f1 f2 * b0 b2 f3 * / ! ! c==> clp_cond c, f0 c, b0 b1 c, f1 f2 clp_cond c, csplit_list_hyp f0 b2 c, b0 b1 c, f1 * * part cadd_diag c, f1 f2 * b0 b2 f3
+ |- (((lp_cond ((((\d. (\L. ((split_list_hyp L) d))) h) ((split_list_list L) t)) , (g , h))) (V , (((\d. (\E'. ((add_diag (V , E')) (g d)))) h) ((add_diag_list (g , (V , E))) t)))) = ((lp_cond ((((\d. (\L. ((split_list_hyp L) d))) h) ((split_list_list L) t)) , (g , h))) (V , (((\d. (\E'. ((add_diag (V , E')) (g d)))) h) (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) t)))))
T c= clp_cond c, * * / / csplit_list_hyp b1 b0 f0 csplit_list_list f1 f2 c, f3 f4 c, f5 * * / / * * part cadd_diag c, f5 b1 * f3 b0 f0 * * part cadd_diag_list c, f3 c, f5 f6 f2 clp_cond c, * * / / csplit_list_hyp b1 b0 f0 csplit_list_list f1 f2 c, f3 f4 c, f5 * * / / * * part cadd_diag c, f5 b1 * f3 b0 f0 * * * part cfoldr / / * * part cadd_diag c, f5 b1 * f3 b0 f6 f2
+ ((lp_cond (L , (g , h))) (V , E)) |- ((ds = ds1) ==> ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))))
T c==> clp_cond c, f0 c, f1 f2 c, f3 f4 c==> c= f5 f6 clp_cond c, csplit_list_list f0 f5 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 f5
+ |- ((\diags. ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags))) diags)
T * / c= * * * part cfoldr / / * * part cadd_diag c, f0 b2 * f1 b1 f2 b0 * * part cadd_diag_list c, f1 c, f0 f2 b0 f3
- |- ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)
T * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
+ |- ((\V. (!g. (!E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags)))))) V)
T * / ! ! ! c= * * part cadd_diag_list c, b1 c, b0 b2 b3 * * * part cfoldr / / * * part cadd_diag c, b0 b5 * b1 b4 b2 b3 f0
+ |- ((\g. (!E. (!diags. ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags))))) g)
T * / ! ! c= * * * part cfoldr / / * * part cadd_diag c, f0 b4 * b0 b3 b1 b2 * * part cadd_diag_list c, b0 c, f0 b1 b2 f1
+ ((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) |- ((lp_cond ((((\d. (\L. ((split_list_hyp L) d))) h) (((foldr (\d. (\L. ((split_list_hyp L) d)))) L) t)) , (g , h))) (V , (((\d. (\E'. ((add_diag (V , E')) (g d)))) h) (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) t))))
T c==> clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 clp_cond c, * * / / csplit_list_hyp b1 b0 f6 cfoldr / / csplit_list_hyp b1 b0 f0 f1 c, f2 f3 c, f4 * * / / * * part cadd_diag c, f4 b1 * f2 b0 f6 * * * part cfoldr / / * * part cadd_diag c, f4 b1 * f2 b0 f5 f1
+ ((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) |- (((((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) /\ ((((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))) = T) ==> ((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))))) ==> ((((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) ==> (((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))) = T)) ==> ((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))))) = ((((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) ==> (((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))) = T)) ==> ((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h))))))
T c==> clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 c= c==> c/\ clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 c==> c= clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f6 c, f2 f3 c, f4 * * part cadd_diag c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 * f2 f6 cT clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f6 c, f2 f3 c, f4 * * part cadd_diag c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 * f2 f6 c==> c==> clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 c= clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f6 c, f2 f3 c, f4 * * part cadd_diag c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 * f2 f6 cT clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f6 c, f2 f3 c, f4 * * part cadd_diag c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 * f2 f6 c==> c==> clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 c= clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f6 c, f2 f3 c, f4 * * part cadd_diag c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 * f2 f6 cT clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f6 c, f2 f3 c, f4 * * part cadd_diag c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 * f2 f6
+ (ds = ds1) |- (((lp_cond (((split_list_list L) ds1) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))) = ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))))
T c==> c= f0 f1 c= clp_cond c, csplit_list_list f2 f1 c, f3 f4 c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f0 clp_cond c, csplit_list_list f2 f0 c, f3 f4 c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f0
+ |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
+ |- (((lp_cond (L , (g , h))) (V , E)) ==> (((lp_cond (((split_list_hyp L) d) , (g , h))) (V , ((add_diag (V , E)) (g d)))) = T))
T c==> clp_cond c, f0 c, f1 f2 c, f3 f4 c= clp_cond c, csplit_list_hyp f0 f5 c, f1 f2 c, f3 * * part cadd_diag c, f3 f4 * f1 f5 cT
+ |- ((((foldr f) z0) NIL) = z0)
T c= cfoldr f0 f1 cNIL f1
+ |- ((\E. (!diags. ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags)))) E)
T * / ! c= * * * part cfoldr / / * * part cadd_diag c, f0 b3 * f1 b2 b0 b1 * * part cadd_diag_list c, f1 c, f0 b0 b1 f2
+ |- (((!diags. ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags))) ==> ((\diags. ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags))) diags)) = ((\diags. ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags))) diags))
T c= c==> ! c= * * * part cfoldr / / * * part cadd_diag c, f0 b2 * f1 b1 f2 b0 * * part cadd_diag_list c, f1 c, f0 f2 b0 * / c= * * * part cfoldr / / * * part cadd_diag c, f0 b2 * f1 b1 f2 b0 * * part cadd_diag_list c, f1 c, f0 f2 b0 f3 * / c= * * * part cfoldr / / * * part cadd_diag c, f0 b2 * f1 b1 f2 b0 * * part cadd_diag_list c, f1 c, f0 f2 b0 f3
+ |- (((lp_cond ((((foldr (\d. (\L. ((split_list_hyp L) d)))) L) ((CONS h) t)) , (g , h))) (V , ((add_diag_list (g , (V , E))) ((CONS h) t)))) = ((lp_cond (((split_list_list L) ((CONS h) t)) , (g , h))) (V , ((add_diag_list (g , (V , E))) ((CONS h) t)))))
T c= clp_cond c, cfoldr / / csplit_list_hyp b1 b0 f0 cCONS f1 f2 c, f3 f4 c, f5 * * part cadd_diag_list c, f3 c, f5 f6 cCONS f1 f2 clp_cond c, csplit_list_list f0 cCONS f1 f2 c, f3 f4 c, f5 * * part cadd_diag_list c, f3 c, f5 f6 cCONS f1 f2
- |- (!ds1. (((\ds1. (ds = ds1)) ds1) ==> (?ds1. (ds = ds1))))
T c==> * / c= f0 b0 f1 c? / c= f0 b0
+ |- (((lp_cond (L , (g , h))) (V , E)) = ((lp_cond (L , (g , h))) (V , (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) NIL))))
T c= clp_cond c, f0 c, f1 f2 c, f3 f4 clp_cond c, f0 c, f1 f2 c, f3 * * * part cfoldr / / * * part cadd_diag c, f3 b1 * f1 b0 f4 cNIL
- (ds = ds1), ((lp_cond (L , (g , h))) (V , E)) |- ((lp_cond (((split_list_list L) ds1) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds1)))
T c==> c= f0 f1 c==> clp_cond c, f2 c, f3 f4 c, f5 f6 clp_cond c, csplit_list_list f2 f1 c, f3 f4 c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f1
+ |- (((!E. (!diags. ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags)))) ==> ((\E. (!diags. ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags)))) E)) = ((\E. (!diags. ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags)))) E))
T c= c==> ! ! c= * * * part cfoldr / / * * part cadd_diag c, f0 b3 * f1 b2 b0 b1 * * part cadd_diag_list c, f1 c, f0 b0 b1 * / ! c= * * * part cfoldr / / * * part cadd_diag c, f0 b3 * f1 b2 b0 b1 * * part cadd_diag_list c, f1 c, f0 b0 b1 f2 * / ! c= * * * part cfoldr / / * * part cadd_diag c, f0 b3 * f1 b2 b0 b1 * * part cadd_diag_list c, f1 c, f0 b0 b1 f2
+ |- ((\ds1. (ds = ds1)) ds)
T * / c= f0 b0 f0
+ (((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))) = T) |- (T = ((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))))
T c==> c= clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f2 c, f3 f4 c, f5 * * part cadd_diag c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f1 * f3 f2 cT c= cT clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f2 c, f3 f4 c, f5 * * part cadd_diag c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f1 * f3 f2
+ ((lp_cond (L , (g , h))) (V , E)) |- (((((lp_cond (((split_list_list L) NIL) , (g , h))) (V , ((add_diag_list (g , (V , E))) NIL))) /\ (!a0. (!a1. (((lp_cond (((split_list_list L) a1) , (g , h))) (V , ((add_diag_list (g , (V , E))) a1))) ==> ((lp_cond (((split_list_list L) ((CONS a0) a1)) , (g , h))) (V , ((add_diag_list (g , (V , E))) ((CONS a0) a1)))))))) ==> (!ds. ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))))) = (!ds. ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds)))))
T c==> clp_cond c, f0 c, f1 f2 c, f3 f4 c= c==> c/\ clp_cond c, csplit_list_list f0 cNIL c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 cNIL ! ! c==> clp_cond c, csplit_list_list f0 b1 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 b1 clp_cond c, csplit_list_list f0 cCONS b0 b1 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 cCONS b0 b1 ! clp_cond c, csplit_list_list f0 b0 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 b0 ! clp_cond c, csplit_list_list f0 b0 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 b0
+ |- ((((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds)))) = T)
T c= c==> clp_cond c, f0 c, f1 f2 c, f3 f4 clp_cond c, csplit_list_list f0 f5 c, f1 f2 c, f3 * * part cadd_diag_list c, f1 c, f3 f4 f5 cT
+ ((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) |- (((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) /\ ((lp_cond (((split_list_list L) ((CONS h) t)) , (g , h))) (V , ((add_diag_list (g , (V , E))) ((CONS h) t)))))
T c==> clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 c/\ clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 clp_cond c, csplit_list_list f0 cCONS f6 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 cCONS f6 f1
+ |- ((!g. (!h. (!ds. (((lp_cond (L , (g , h))) (V , E)) ==> ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))))))) = T)
T c= ! ! ! c==> clp_cond c, f0 c, b0 b1 c, f1 f2 clp_cond c, csplit_list_list f0 b2 c, b0 b1 c, f1 * * part cadd_diag_list c, b0 c, f1 f2 b2 cT
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ (((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))) = T) |- ((((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))) = T) /\ ((lp_cond (((split_list_hyp ((split_list_list L) t)) h) , (g , h))) (V , ((add_diag (V , ((add_diag_list (g , (V , E))) t))) (g h)))))
T c==> c= clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f2 c, f3 f4 c, f5 * * part cadd_diag c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f1 * f3 f2 cT c/\ c= clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f2 c, f3 f4 c, f5 * * part cadd_diag c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f1 * f3 f2 cT clp_cond c, csplit_list_hyp csplit_list_list f0 f1 f2 c, f3 f4 c, f5 * * part cadd_diag c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f1 * f3 f2
+ ((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) |- ((lp_cond ((((foldr (\d. (\L. ((split_list_hyp L) d)))) L) ((CONS h) t)) , (g , h))) (V , (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) ((CONS h) t))))
T c==> clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 clp_cond c, cfoldr / / csplit_list_hyp b1 b0 f0 cCONS f6 f1 c, f2 f3 c, f4 * * * part cfoldr / / * * part cadd_diag c, f4 b1 * f2 b0 f5 cCONS f6 f1
+ |- ((((foldr (\d. (\L. ((split_list_hyp L) d)))) L) ds) = ((split_list_list L) ds))
T c= cfoldr / / csplit_list_hyp b1 b0 f0 f1 csplit_list_list f0 f1
+ |- ((\L. (!ds. (((split_list_list L) ds) = (((foldr (\d. (\L. ((split_list_hyp L) d)))) L) ds)))) L)
T * / ! c= csplit_list_list b0 b1 cfoldr / / csplit_list_hyp b3 b2 b0 b1 f0
+ (ds = ds1), ((lp_cond (L , (g , h))) (V , E)) |- ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds)))
T c==> c= f0 f1 c==> clp_cond c, f2 c, f3 f4 c, f5 f6 clp_cond c, csplit_list_list f2 f0 c, f3 f4 c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f0
+ |- ((\g. (!E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags))))) g)
T * / ! ! c= * * part cadd_diag_list c, b0 c, f0 b1 b2 * * * part cfoldr / / * * part cadd_diag c, f0 b4 * b0 b3 b1 b2 f1
+ |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)) = ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
+ |- ((((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags) = ((add_diag_list (g , (V , E))) diags))
T c= * * * part cfoldr / / * * part cadd_diag c, f0 b1 * f1 b0 f2 f3 * * part cadd_diag_list c, f1 c, f0 f2 f3
+ |- ((\ds. (((split_list_list L) ds) = (((foldr (\d. (\L. ((split_list_hyp L) d)))) L) ds))) ds)
T * / c= csplit_list_list f0 b0 cfoldr / / csplit_list_hyp b2 b1 f0 b0 f1
+ |- (((!V. (!g. (!E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags)))))) ==> ((\V. (!g. (!E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags)))))) V)) = ((\V. (!g. (!E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags)))))) V))
T c= c==> ! ! ! ! c= * * part cadd_diag_list c, b1 c, b0 b2 b3 * * * part cfoldr / / * * part cadd_diag c, b0 b5 * b1 b4 b2 b3 * / ! ! ! c= * * part cadd_diag_list c, b1 c, b0 b2 b3 * * * part cfoldr / / * * part cadd_diag c, b0 b5 * b1 b4 b2 b3 f0 * / ! ! ! c= * * part cadd_diag_list c, b1 c, b0 b2 b3 * * * part cfoldr / / * * part cadd_diag c, b0 b5 * b1 b4 b2 b3 f0
+ |- ((\E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags)))) E)
T * / ! c= * * part cadd_diag_list c, f0 c, f1 b0 b1 * * * part cfoldr / / * * part cadd_diag c, f1 b3 * f0 b2 b0 b1 f2
+ |- (((!g. (!E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags))))) ==> ((\g. (!E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags))))) g)) = ((\g. (!E. (!diags. (((add_diag_list (g , (V , E))) diags) = (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) diags))))) g))
T c= c==> ! ! ! c= * * part cadd_diag_list c, b0 c, f0 b1 b2 * * * part cfoldr / / * * part cadd_diag c, f0 b4 * b0 b3 b1 b2 * / ! ! c= * * part cadd_diag_list c, b0 c, f0 b1 b2 * * * part cfoldr / / * * part cadd_diag c, f0 b4 * b0 b3 b1 b2 f1 * / ! ! c= * * part cadd_diag_list c, b0 c, f0 b1 b2 * * * part cfoldr / / * * part cadd_diag c, f0 b4 * b0 b3 b1 b2 f1
- |- ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)
T * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
- |- ((ds = ds1) = ((\ds1. (ds = ds1)) ds1))
T c= c= f0 f1 * / c= f0 b0 f1
- |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))) = (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)
T * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
- ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
- |- ((?ds1. (ds = ds1)) ==> (?ds1. (ds = ds1)))
T c==> c? / c= f0 b0 c? / c= f0 b0
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- |- ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)
T * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
- (ds = ds1) |- (ds1 = ds)
T c==> c= f0 f1 c= f1 f0
- ((\ds1. (ds = ds1)) ds1) |- (((ds = ds1) ==> (?ds1. (ds = ds1))) = (?ds1. (ds = ds1)))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c? / c= f0 b0 c? / c= f0 b0
- |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- (((lp_cond (((split_list_hyp (((foldr (\d. (\L. ((split_list_hyp L) d)))) L) t)) h) , (g , h))) (V , ((add_diag (V , (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) t))) (g h)))) = ((lp_cond ((((\d. (\L. ((split_list_hyp L) d))) h) (((foldr (\d. (\L. ((split_list_hyp L) d)))) L) t)) , (g , h))) (V , (((\d. (\E'. ((add_diag (V , E')) (g d)))) h) (((foldr (\d. (\E'. ((add_diag (V , E')) (g d))))) E) t)))))
T c= clp_cond c, csplit_list_hyp cfoldr / / csplit_list_hyp b1 b0 f0 f1 f2 c, f3 f4 c, f5 * * part cadd_diag c, f5 * * * part cfoldr / / * * part cadd_diag c, f5 b1 * f3 b0 f6 f1 * f3 f2 clp_cond c, * * / / csplit_list_hyp b1 b0 f2 cfoldr / / csplit_list_hyp b1 b0 f0 f1 c, f3 f4 c, f5 * * / / * * part cadd_diag c, f5 b1 * f3 b0 f2 * * * part cfoldr / / * * part cadd_diag c, f5 b1 * f3 b0 f6 f1
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- (ds = ds1) |- ((ds = ds1) /\ (?ds1. (ds = ds1)))
T c==> c= f0 f1 c/\ c= f0 f1 c? / c= f0 b0
- ((\ds1. (ds = ds1)) ds1) |- (((\ds1. (ds = ds1)) ds1) /\ (?ds1. (ds = ds1)))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c? / c= f0 b0
- |- (((!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) ==> ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)) = ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0))
T c= c==> ! c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
- |- (((!x. (((\ds1. (ds = ds1)) x) ==> (?ds1. (ds = ds1)))) ==> ((?ds1. (ds = ds1)) ==> (?ds1. (ds = ds1)))) = ((?ds1. (ds = ds1)) ==> (?ds1. (ds = ds1))))
T c= c==> ! c==> * / c= f0 b1 b0 c? / c= f0 b1 c==> c? / c= f0 b0 c? / c= f0 b0 c==> c? / c= f0 b0 c? / c= f0 b0
- ((lp_cond (L , (g , h))) (V , E)) |- (((lp_cond (L , (g , h))) (V , E)) = T)
T c==> clp_cond c, f0 c, f1 f2 c, f3 f4 c= clp_cond c, f0 c, f1 f2 c, f3 f4 cT
- |- ((ds = ds1) ==> (?ds1. (ds = ds1)))
T c==> c= f0 f1 c? / c= f0 b0
- |- (((!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) ==> ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)) = ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s))
T c= c==> ! ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- (((!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) ==> ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)) = ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f))
T c= c==> ! ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
- |- (((!x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) ==> ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)) = ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x))
T c= c==> ! ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c= c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0 cT
- ((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) |- (T = ((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))))
T c==> clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 c= cT clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1
- ((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) |- (((lp_cond (((split_list_list L) t) , (g , h))) (V , ((add_diag_list (g , (V , E))) t))) = T)
T c==> clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 c= clp_cond c, csplit_list_list f0 f1 c, f2 f3 c, f4 * * part cadd_diag_list c, f2 c, f4 f5 f1 cT
- (ds = ds1) |- ((\ds1. (ds = ds1)) ds1)
T c==> c= f0 f1 * / c= f0 b0 f1
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- (((\E'. (f E')) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- ((lp_cond (L , (g , h))) (V , E)) |- (T = ((lp_cond (L , (g , h))) (V , E)))
T c==> clp_cond c, f0 c, f1 f2 c, f3 f4 c= cT clp_cond c, f0 c, f1 f2 c, f3 f4
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- ((((\ds1. (ds = ds1)) ds1) ==> (?ds1. (ds = ds1))) = T)
T c= c==> * / c= f0 b0 f1 c? / c= f0 b0 cT
- (ds = ds1) |- (((lp_cond (((split_list_list L) ds1) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds1))) = ((lp_cond (((split_list_list L) ds) , (g , h))) (V , ((add_diag_list (g , (V , E))) ds))))
T c==> c= f0 f1 c= clp_cond c, csplit_list_list f2 f1 c, f3 f4 c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f1 clp_cond c, csplit_list_list f2 f0 c, f3 f4 c, f5 * * part cadd_diag_list c, f3 c, f5 f6 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
