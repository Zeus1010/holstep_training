N Ssrnat.half_leq
C |- (!m. (!n. ((m <= n) ==> ((half m) <= (half n)))))
T c==> c<= f0 f1 c<= chalf f0 chalf f1
D TRUTH
A |- T
T cT
D LE_ADDR
A |- (!m. (!n. (n <= (m + n))))
T c<= f0 c+ f1 f0
D Ssrnat.addnA
A |- (!n. (!m. (!p. ((n + (m + p)) = ((n + m) + p)))))
T c= c+ f0 c+ f1 f2 c+ c+ f0 f1 f2
D Ssrnat.subnK
A |- (!m. (!n. ((m <= n) ==> (((n - m) + m) = n))))
T c==> c<= f0 f1 c= c+ c- f1 f0 f0 f1
D Ssrnat.half_add
A |- (!m. (!n. ((half (m + n)) = ((((COND ((odd m) /\ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((half m) + (half n))))))
T c= chalf c+ f0 f1 c+ cCOND c/\ codd f0 codd f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ chalf f0 chalf f1
+ |- (((!n. ((half (m + n)) = ((((COND ((odd m) /\ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((half m) + (half n))))) ==> ((\n. ((half (m + n)) = ((((COND ((odd m) /\ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((half m) + (half n))))) n)) = ((\n. ((half (m + n)) = ((((COND ((odd m) /\ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((half m) + (half n))))) n))
T c= c==> ! c= chalf c+ f0 b0 c+ cCOND c/\ codd f0 codd b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ chalf f0 chalf b0 * / c= chalf c+ f0 b0 c+ cCOND c/\ codd f0 codd b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ chalf f0 chalf b0 f1 * / c= chalf c+ f0 b0 c+ cCOND c/\ codd f0 codd b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ chalf f0 chalf b0 f1
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (((half m) <= (((((COND ((odd (n - m)) /\ (odd m))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half (n - m))) + (half m))) = ((half m) <= ((((COND ((odd (n - m)) /\ (odd m))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((half (n - m)) + (half m)))))
T c= c<= chalf f0 c+ c+ cCOND c/\ codd c- f1 f0 codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf c- f1 f0 chalf f0 c<= chalf f0 c+ cCOND c/\ codd c- f1 f0 codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ chalf c- f1 f0 chalf f0
+ |- ((\m. (!n. ((half (m + n)) = ((((COND ((odd m) /\ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((half m) + (half n)))))) m)
T * / ! c= chalf c+ b0 b1 c+ cCOND c/\ codd b0 codd b1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ chalf b0 chalf b1 f0
+ |- (((!p. ((n + (m + p)) = ((n + m) + p))) ==> ((\p. ((n + (m + p)) = ((n + m) + p))) p)) = ((\p. ((n + (m + p)) = ((n + m) + p))) p))
T c= c==> ! c= c+ f0 c+ f1 b0 c+ c+ f0 f1 b0 * / c= c+ f0 c+ f1 b0 c+ c+ f0 f1 b0 f2 * / c= c+ f0 c+ f1 b0 c+ c+ f0 f1 b0 f2
+ |- (((!m. (!p. ((n + (m + p)) = ((n + m) + p)))) ==> ((\m. (!p. ((n + (m + p)) = ((n + m) + p)))) m)) = ((\m. (!p. ((n + (m + p)) = ((n + m) + p)))) m))
T c= c==> ! ! c= c+ f0 c+ b0 b1 c+ c+ f0 b0 b1 * / ! c= c+ f0 c+ b0 b1 c+ c+ f0 b0 b1 f1 * / ! c= c+ f0 c+ b0 b1 c+ c+ f0 b0 b1 f1
+ |- ((n <= (m + n)) = T)
T c= c<= f0 c+ f1 f0 cT
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ (((n - m) + m) = n) |- (((half m) <= (half ((n - m) + m))) = ((half m) <= (half n)))
T c==> c= c+ c- f0 f1 f1 f0 c= c<= chalf f1 chalf c+ c- f0 f1 f1 c<= chalf f1 chalf f0
+ |- ((!n. ((m <= n) ==> ((half m) <= (half n)))) = T)
T c= ! c==> c<= f0 b0 c<= chalf f0 chalf b0 cT
- (n = ((n - m) + m)) |- (((n - m) + m) = n)
T c==> c= f0 c+ c- f0 f1 f1 c= c+ c- f0 f1 f1 f0
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
