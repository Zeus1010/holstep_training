N EXISTS_DOUBLE_ARC
C |- (!g. (!a. (!b. (((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((a IN (path_image g)) /\ ((b IN (path_image g)) /\ (~ (a = b)))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))))
T c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cpath_image f0 c/\ cIN f2 * part cpath_image f0 c~ c= f1 f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f1 c/\ c= cpathfinish b0 f2 c/\ c= cpathstart b1 f2 c/\ c= cpathfinish b1 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D RIGHT_OR_FORALL_THM
A |- (!P. (!Q. ((P \/ (!x. (Q x))) = (!x. (P \/ (Q x))))))
T c= c\/ f0 ! * f1 b0 ! c\/ f0 * f1 b0
D I_THM
A |- (!x. ((I x) = x))
T c= cI f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D LT_REFL
A |- (!n. (~ (n < n)))
T c~ c< f0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D REAL_ADD_LID
A |- (!x. (((real_add (real_of_num (NUMERAL _0))) x) = x))
T c= creal_add creal_of_num cNUMERAL c_0 f0 f0
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_ADD_RID
A |- (!x. (((real_add x) (real_of_num (NUMERAL _0))) = x))
T c= creal_add f0 creal_of_num cNUMERAL c_0 f0
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_LE_LT
A |- (!x. (!y. (((real_le x) y) = (((real_lt x) y) \/ (x = y)))))
T c= creal_le f0 f1 c\/ creal_lt f0 f1 c= f0 f1
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D Real_ext.REAL_PROP_POS_ADD2
A |- (!x. (!y. ((((real_lt (real_of_num (NUMERAL _0))) x) /\ ((real_lt (real_of_num (NUMERAL _0))) y)) ==> ((real_lt (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c==> c/\ creal_lt creal_of_num cNUMERAL c_0 f0 creal_lt creal_of_num cNUMERAL c_0 f1 creal_lt creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D IN_IMAGE
A |- (!y. (!s. (!f. ((y IN ((IMAGE f) s)) = (?x. ((y = (f x)) /\ (x IN s)))))))
T c= cIN f0 * * part cIMAGE f1 f2 c? / c/\ c= f0 * f1 b0 cIN b0 f2
D UNION_COMM
A |- (!s. (!t. ((s UNION t) = (t UNION s))))
T c= * * part cUNION f0 f1 * * part cUNION f1 f0
D INTER_COMM
A |- (!s. (!t. ((s INTER t) = (t INTER s))))
T c= * * part cINTER f0 f1 * * part cINTER f1 f0
D INSERT_AC
A |- (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))
T c/\ c= * * part cINSERT f0 * * part cINSERT f1 f2 * * part cINSERT f1 * * part cINSERT f0 f2 c= * * part cINSERT f0 * * part cINSERT f0 f2 * * part cINSERT f0 f2
D path_image
A |- (!g. ((path_image g) = ((IMAGE g) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))))
T c= * part cpath_image f0 * * part cIMAGE f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL
D EXISTS_DOUBLE_ARC_EXPLICIT
A |- (!g. (!a. (!b. (((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((a IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((b IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop a)) (drop b)) /\ (~ ((g a) = (g b)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g a)) /\ (((pathfinish u) = (g b)) /\ (((pathstart d) = (g b)) /\ (((pathfinish d) = (g a)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (a , b)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (a , b))))) /\ ((((path_image u) INTER (path_image d)) = ((g a) INSERT ((g b) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))))))
T c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN f2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f1 cdrop f2 c~ c= * f0 f1 * f0 f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
- (~ (((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY)))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY)))) /\ (((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))))
T c==> c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY
+ (!s. (!t. ((s UNION t) = (t UNION s)))) |- ((\s. (!t. ((s UNION t) = (t UNION s)))) _576906)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 * / ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 f0
- (~ F), (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ F) /\ F)
T c==> c~ cF c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c/\ carc f3 c/\ carc f4 c/\ c= cpathstart f3 * f0 f1 c/\ c= cpathfinish f3 * f0 f2 c/\ c= cpathstart f4 * f0 f2 c/\ c= cpathfinish f4 * f0 f1 c/\ c= * part cpath_image f3 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image f4 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image f4 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image f4 * part cpath_image f0 c/\ c~ cF cF
+ |- ((\v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> ((!y. (!x. (!s. (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F)))))) v)
T * / ! c==> c~ c==> c? / c? / c/\ carc b2 c/\ carc b3 c/\ c= cpathstart b2 * f0 b0 c/\ c= cpathfinish b2 * f0 b1 c/\ c= cpathstart b3 * f0 b1 c/\ c= cpathfinish b3 * f0 b0 c/\ c= * part cpath_image b2 * * part cIMAGE f0 * part cclosed_interval cCONS c, b0 b1 cNIL c/\ c= * part cpath_image b3 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b0 b1 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b0 * * part cINSERT * f0 b1 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 c? / c? / c/\ carc b2 c/\ carc b3 c/\ c= cpathstart b2 * f0 b1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= cpathstart b3 * f0 b0 c/\ c= cpathfinish b3 * f0 b1 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 c==> ! ! ! c/\ c= * * part cINSERT b3 * * part cINSERT b2 b4 * * part cINSERT b2 * * part cINSERT b3 b4 c= * * part cINSERT b3 * * part cINSERT b3 b4 * * part cINSERT b3 b4 c==> ! ! c= * * part cUNION b2 b3 * * part cUNION b3 b2 c==> ! ! c= * * part cINTER b2 b3 * * part cINTER b3 b2 cF f1
- (_576963 = _576965), (_576964 = _576966) |- ((_576964 = _576966) /\ ((_576963 UNION _576964) = (_576965 UNION _576966)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f2 f3 c= * * part cUNION f0 f2 * * part cUNION f1 f3
+ (~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F)
T c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 cF
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))) = (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((\u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) _576910)
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 * / ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f2 f4 c\/ c~ c= cpathfinish b0 cI f2 f3 c\/ c~ c= cpathstart b1 cI f2 f3 c\/ c~ c= cpathfinish b1 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 f5
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ ((pathfinish u') = ((I g) v))) ==> ((pathfinish u') = ((I g) v)))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c~ c= cpathfinish f0 cI f2 f4 c= cpathfinish f0 cI f2 f4
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ |- ((\g. (!v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)))) g)
T * / ! ! c==> c~ c==> c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * part cpath_image b3 * * part cIMAGE b0 * part cclosed_interval cCONS c, b2 b1 cNIL c/\ c= * part cpath_image b4 * * part cIMAGE b0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b2 b1 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 cF f0
- |- ((~ (_576959 = _576961)) \/ ((~ (_576960 = _576962)) \/ ((_576959 INTER _576960) = (_576961 INTER _576962))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cINTER f0 f2 * * part cINTER f1 f3
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))), ((\u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) u') |- (((\u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) u') /\ F)
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> * / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 f3 c/\ * / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 f3 cF
+ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
+ |- (((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F) = ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c= c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((arc d) /\ ((arc u') /\ (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g))))))))) ==> F) = F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c==> c/\ carc f1 c/\ carc f0 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 cF cF
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (!d. ((~ (arc _576910)) \/ ((~ (arc d)) \/ ((~ ((pathstart _576910) = ((I g) u))) \/ ((~ ((pathfinish _576910) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image _576910) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576910) UNION (path_image d)) = (path_image g)))))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 ! c\/ c~ carc f5 c\/ c~ carc b0 c\/ c~ c= cpathstart f5 cI f2 f4 c\/ c~ c= cpathfinish f5 cI f2 f3 c\/ c~ c= cpathstart b0 cI f2 f3 c\/ c~ c= cpathfinish b0 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image f5 * part cpath_image b0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f5 * part cpath_image b0 * part cpath_image f2
- |- ((~ (_576919 = _576920)) \/ ((BIT1 _576919) = (BIT1 _576920)))
T c\/ c~ c= f0 f1 c= cBIT1 f0 cBIT1 f1
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), ((real_le (drop v)) (drop u)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> creal_le cdrop f4 cdrop f3 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
- |- ((_576931 = _576933) ==> ((~ (_576932 = _576934)) \/ ((_576931 , _576932) = (_576933 , _576934))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= c, f0 f2 c, f1 f3
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ (arc d)) ==> (arc d))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c~ carc f1 carc f1
- ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F) |- (((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F) /\ ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F))
T c==> c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF c/\ c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF
- |- ((_576936 = _576938) ==> ((~ (_576935 = _576937)) \/ (((CONS _576935) _576936) = ((CONS _576937) _576938))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= cCONS f2 f0 cCONS f3 f1
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (!d. (((\d. ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))))))) d) ==> F))
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c==> * / c/\ carc f3 c/\ carc b1 c/\ c= cpathstart f3 * f0 f1 c/\ c= cpathfinish f3 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image f3 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image b1 * part cpath_image f0 b0 cF
+ (~ (a = b)), (a = (g u)), (b = (g v)) |- (~ ((g u) = (g v)))
T c==> c~ c= f0 f1 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c~ c= * f2 f3 * f2 f4
+ |- ((a \/ b) = ((~ b) ==> a))
T c= c\/ f0 f1 c==> c~ f1 f0
+ ((g v) = (g u)) |- ((g u) = (g v))
T c==> c= * f0 f1 * f0 f2 c= * f0 f2 * f0 f1
+ (~ ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (?u. (?d. (((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))))
T c==> c~ c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b2 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b2 * f0 f2 c\/ c~ c= cpathfinish b2 * f0 f1 c\/ c~ c= cpathstart b2 * f0 f1 c\/ c~ c= cpathfinish b2 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b2 * part cpath_image b2 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b2 * part cpath_image b2 * part cpath_image f0
+ (~ (a = b)), (simple_path g), ((pathfinish g) = (pathstart g)) |- (!u. (((a = (g u)) /\ (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= cpathfinish f2 cpathstart f2 ! c==> c/\ c= f0 * f2 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL ! c==> c/\ c= f1 * f2 b1 cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b2 c/\ carc b3 c/\ c= cpathstart b2 f0 c/\ c= cpathfinish b2 f1 c/\ c= cpathstart b3 f1 c/\ c= cpathfinish b3 f0 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f2
+ |- (((!b. (((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((b IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop u)) (drop b)) /\ (~ ((g u) = (g b)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g b)) /\ (((pathstart d) = (g b)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , b)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , b))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g b) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) ==> ((\b. (((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((b IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop u)) (drop b)) /\ (~ ((g u) = (g b)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g b)) /\ (((pathstart d) = (g b)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , b)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , b))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g b) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) v)) = ((\b. (((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((b IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop u)) (drop b)) /\ (~ ((g u) = (g b)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g b)) /\ (((pathstart d) = (g b)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , b)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , b))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g b) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) v))
T c= c==> ! c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f1 cdrop b0 c~ c= * f0 f1 * f0 b0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 b0 c/\ c= cpathstart b2 * f0 b0 c/\ c= cpathfinish b2 * f0 f1 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 b0 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 f1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 * / c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f1 cdrop b0 c~ c= * f0 f1 * f0 b0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 b0 c/\ c= cpathstart b2 * f0 b0 c/\ c= cpathfinish b2 * f0 f1 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 b0 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 f1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 f2 * / c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f1 cdrop b0 c~ c= * f0 f1 * f0 b0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 b0 c/\ c= cpathstart b2 * f0 b0 c/\ c= cpathfinish b2 * f0 f1 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 b0 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 f1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 f2
+ |- ((\u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> ((!y. (!x. (!s. (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F))))) u)
T * / c==> c~ c==> c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 b0 c/\ c= cpathstart b2 * f0 b0 c/\ c= cpathfinish b2 * f0 f1 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 b0 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 f1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 c==> ! ! ! c/\ c= * * part cINSERT b2 * * part cINSERT b1 b3 * * part cINSERT b1 * * part cINSERT b2 b3 c= * * part cINSERT b2 * * part cINSERT b2 b3 * * part cINSERT b2 b3 c==> ! ! c= * * part cUNION b1 b2 * * part cUNION b2 b1 c==> ! ! c= * * part cINTER b1 b2 * * part cINTER b2 b1 cF f2
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), ((real_le (drop v)) (drop u)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- ((((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop v)) (drop u)) /\ (~ ((g v) = (g u)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> creal_le cdrop f4 cdrop f3 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> c==> c/\ csimple_path f2 c/\ c= cpathfinish f2 cpathstart f2 c/\ cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f4 cdrop f3 c~ c= * f2 f4 * f2 f3 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f4 c/\ c= cpathfinish b0 * f2 f3 c/\ c= cpathstart b1 * f2 f3 c/\ c= cpathfinish b1 * f2 f4 c/\ c= * part cpath_image b0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f4 f3 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f4 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
- ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((_576915 INSERT (_576915 INSERT _576916)) = (_576915 INSERT _576916))
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c= * * part cINSERT f0 * * part cINSERT f0 f1 * * part cINSERT f0 f1
- (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))) |- (((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0))) = (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))))
T c==> c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 c= creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (((arc _576854) /\ ((arc _576855) /\ (((pathstart _576854) = ((I g) u)) /\ (((pathfinish _576854) = ((I g) v)) /\ (((pathstart _576855) = ((I g) v)) /\ (((pathfinish _576855) = ((I g) u)) /\ ((((path_image _576854) INTER (path_image _576855)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image _576854) UNION (path_image _576855)) = (path_image g))))))))) ==> F)
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c/\ carc f3 c/\ carc f4 c/\ c= cpathstart f3 cI f0 f1 c/\ c= cpathfinish f3 cI f0 f2 c/\ c= cpathstart f4 cI f0 f2 c/\ c= cpathfinish f4 cI f0 f1 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image f4 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image f4 * part cpath_image f0 cF
+ |- ((~ (((real_le (drop u)) (drop v)) \/ ((real_le (drop v)) (drop u)))) ==> F)
T c==> c~ c\/ creal_le cdrop f0 cdrop f1 creal_le cdrop f1 cdrop f0 cF
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f0 f1 c\/ c~ c= cpathfinish b0 cI f0 f2 c\/ c~ c= cpathstart b1 cI f0 f2 c\/ c~ c= cpathfinish b1 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
- (_576957 = _576958) |- ((_576957 = _576958) /\ ((path_image _576957) = (path_image _576958)))
T c==> c= f0 f1 c/\ c= f0 f1 c= * part cpath_image f0 * part cpath_image f1
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (((real_le (drop v)) (drop u)) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> creal_le cdrop f4 cdrop f3 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ |- (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))
T c= c==> c? / * f0 b0 f1 ! c==> * f0 b0 f1
- |- ((_576927 = _576929) ==> ((~ (_576928 = _576930)) \/ ((_576927 DIFF _576928) = (_576929 DIFF _576930))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= * * part cDIFF f0 f2 * * part cDIFF f1 f3
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- (((!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s)))) ==> ((\x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s)))) _576915)) = ((\x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s)))) _576915))
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c= c==> ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 * / ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 f0 * / ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 f0
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((path_image u') INTER (path_image d)) = ((path_image d) INTER (path_image u'))) = ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') INTER (path_image d)) = ((path_image d) INTER (path_image u')))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINTER * part cpath_image f1 * part cpath_image f0 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINTER * part cpath_image f1 * part cpath_image f0
- (~ ((pathstart d) = ((I g) v))), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ ((pathstart d) = ((I g) v))) /\ ((pathstart d) = ((I g) v)))
T c==> c~ c= cpathstart f0 cI f1 f2 c==> c/\ carc f3 c/\ carc f0 c/\ c= cpathstart f3 * f1 f4 c/\ c= cpathfinish f3 * f1 f2 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f4 c/\ c= * part cpath_image f3 * * part cIMAGE f1 * part cclosed_interval cCONS c, f4 f2 cNIL c/\ c= * part cpath_image f0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f4 f2 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image f0 * * part cINSERT * f1 f4 * * part cINSERT * f1 f2 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image f0 * part cpath_image f1 c/\ c~ c= cpathstart f0 cI f1 f2 c= cpathstart f0 cI f1 f2
- |- ((?d. (P d)) = ((P T) \/ (P F)))
T c= c? / * f0 b0 c\/ * f0 cT * f0 cF
+ |- ((\u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)) u)
T * / c==> c~ c==> c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, b0 f1 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b0 f1 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 cF f2
+ (((real_le (drop u)) (drop v)) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))), (((real_le (drop v)) (drop u)) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> c==> creal_le cdrop f0 cdrop f1 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f0 c/\ c= cpathfinish b0 * f2 f1 c/\ c= cpathstart b1 * f2 f1 c/\ c= cpathfinish b1 * f2 f0 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f0 * * part cINSERT * f2 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c==> creal_le cdrop f1 cdrop f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f0 c/\ c= cpathfinish b0 * f2 f1 c/\ c= cpathstart b1 * f2 f1 c/\ c= cpathfinish b1 * f2 f0 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f0 * * part cINSERT * f2 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f0 c/\ c= cpathfinish b0 * f2 f1 c/\ c= cpathstart b1 * f2 f1 c/\ c= cpathfinish b1 * f2 f0 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f0 * * part cINSERT * f2 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ |- (((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))) = (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c= c\/ c~ carc f0 ! c\/ c~ carc b0 c\/ c~ c= cpathstart f0 cI f1 f2 c\/ c~ c= cpathfinish f0 cI f1 f3 c\/ c~ c= cpathstart b0 cI f1 f3 c\/ c~ c= cpathfinish b0 cI f1 f2 c\/ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT cI f1 f2 * * part cINSERT cI f1 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc f0 c\/ c~ carc b0 c\/ c~ c= cpathstart f0 cI f1 f2 c\/ c~ c= cpathfinish f0 cI f1 f3 c\/ c~ c= cpathstart b0 cI f1 f3 c\/ c~ c= cpathfinish b0 cI f1 f2 c\/ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT cI f1 f2 * * part cINSERT cI f1 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1
- (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ F) ==> F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ cF cF
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), ((b = (g v)) /\ (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> c/\ c= f1 * f2 f4 cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 f1 c/\ c= cpathstart b1 f1 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ |- (((!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)) ==> ((\u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)) u)) = ((\u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)) u))
T c= c==> ! c==> c~ c==> c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, b0 f1 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b0 f1 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 cF * / c==> c~ c==> c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, b0 f1 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b0 f1 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 cF f2 * / c==> c~ c==> c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, b0 f1 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b0 f1 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 cF f2
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g)))))))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
+ (~ (a = b)), (a = (g u)), (b = (g v)) |- (((g v) = (g u)) = F)
T c==> c~ c= f0 f1 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c= c= * f2 f4 * f2 f3 cF
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((pathfinish d) = ((I g) u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- |- ((?u'. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))))) = ((arc u) /\ (?u. (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))
T c= c? / c/\ carc f0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f1 f2 c/\ c= cpathfinish b0 * f1 f3 c/\ c= cpathstart b1 * f1 f3 c/\ c= cpathfinish b1 * f1 f2 c/\ c= * part cpath_image b0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c/\ carc f0 c? / c? / c/\ carc b1 c/\ c= cpathstart b0 * f1 f2 c/\ c= cpathfinish b0 * f1 f3 c/\ c= cpathstart b1 * f1 f3 c/\ c= cpathfinish b1 * f1 f2 c/\ c= * part cpath_image b0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1
- |- (T = ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))
T c= cT creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((?d. (P d)) /\ Q) = (?d. ((P d) /\ Q)))
T c= c/\ c? / * f0 b0 f1 c? / c/\ * f0 b0 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) ==> (((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY
+ (simple_path g), ((pathfinish g) = (pathstart g)), ((a IN (path_image g)) /\ ((b IN (path_image g)) /\ (~ (a = b)))), (a IN (path_image g)) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> csimple_path f0 c==> c= cpathfinish f0 cpathstart f0 c==> c/\ cIN f1 * part cpath_image f0 c/\ cIN f2 * part cpath_image f0 c~ c= f1 f2 c==> cIN f1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f1 c/\ c= cpathfinish b0 f2 c/\ c= cpathstart b1 f2 c/\ c= cpathfinish b1 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
+ |- ((\b. (((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((b IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop u)) (drop b)) /\ (~ ((g u) = (g b)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g b)) /\ (((pathstart d) = (g b)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , b)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , b))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g b) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) v)
T * / c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f1 cdrop b0 c~ c= * f0 f1 * f0 b0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 b0 c/\ c= cpathstart b2 * f0 b0 c/\ c= cpathfinish b2 * f0 f1 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 b0 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 f1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 f2
- |- ((p \/ p) = p)
T c= c\/ f0 f0 f0
- (_576931 = _576933), (_576932 = _576934) |- ((_576932 = _576934) /\ ((_576931 , _576932) = (_576933 , _576934)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f2 f3 c= c, f0 f2 c, f1 f3
- (!s. (!t. ((s INTER t) = (t INTER s)))), (~ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = ((path_image d) INTER (path_image u')))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = ((path_image d) INTER (path_image u')))) /\ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = ((path_image d) INTER (path_image u'))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c~ c= * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY * * part cINTER * part cpath_image f3 * part cpath_image f4 c==> c/\ c/\ carc f4 c/\ carc f3 c/\ c= cpathstart f4 * f0 f1 c/\ c= cpathfinish f4 * f0 f2 c/\ c= cpathstart f3 * f0 f2 c/\ c= cpathfinish f3 * f0 f1 c/\ c= * part cpath_image f4 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image f3 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image f4 * part cpath_image f3 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image f4 * part cpath_image f3 * part cpath_image f0 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f0 f2 c\/ c~ c= cpathfinish b0 * f0 f1 c\/ c~ c= cpathstart b1 * f0 f1 c\/ c~ c= cpathfinish b1 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c/\ c~ c= * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY * * part cINTER * part cpath_image f3 * part cpath_image f4 c= * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY * * part cINTER * part cpath_image f3 * part cpath_image f4
- |- ((~ (_576939 = _576940)) \/ ((closed_interval _576939) = (closed_interval _576940)))
T c\/ c~ c= f0 f1 c= * part cclosed_interval f0 * part cclosed_interval f1
+ ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((\x. (!s. ((x INSERT (_576912 INSERT s)) = (_576912 INSERT (x INSERT s))))) _576913)
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 * / ! c= * * part cINSERT b0 * * part cINSERT f0 b1 * * part cINSERT f0 * * part cINSERT b0 b1 f1
- |- (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- (!x. (!s. ((x INSERT (_576912 INSERT s)) = (_576912 INSERT (x INSERT s)))))
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 ! ! c= * * part cINSERT b0 * * part cINSERT f0 b1 * * part cINSERT f0 * * part cINSERT b0 b1
- |- ((~ (_576945 = _576946)) \/ ((pathstart _576945) = (pathstart _576946)))
T c\/ c~ c= f0 f1 c= cpathstart f0 cpathstart f1
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((pathstart u') = ((I g) u)) /\ (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((pathstart d) = ((I g) v))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= cpathstart f1 cI f2 f4
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ |- (((~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) ==> F) = (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c= c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
+ (!s. (!t. ((s UNION t) = (t UNION s)))) |- ((((path_image u') UNION (path_image d)) = (path_image g)) = ((((path_image u') UNION (path_image d)) = ((path_image d) UNION (path_image u'))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c= c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * * part cUNION * part cpath_image f1 * part cpath_image f0 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (~ ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> c~ c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 cF
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 f1 c/\ c= cpathstart b1 f1 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((~ ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> (~ (!s. (!t. ((s INTER t) = (t INTER s)))))))) = T)
T c= c==> c~ c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c~ ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 cT
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((path_image d) UNION (path_image u')) = (path_image g)) = ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
+ (~ (a = b)), (simple_path g), ((pathfinish g) = (pathstart g)) |- (((a = (g u)) /\ (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= cpathfinish f2 cpathstart f2 c==> c/\ c= f0 * f2 f3 cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL ! c==> c/\ c= f1 * f2 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f1 c/\ c= cpathstart b2 f1 c/\ c= cpathfinish b2 f0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f2
- |- (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) /\ F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 cF
+ (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = ((path_image d) INTER (path_image u'))) /\ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) ==> (((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) = (((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c==> c/\ c= * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY * * part cINTER * part cpath_image f1 * part cpath_image f0 c= * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY
- (_576945 = _576946) |- ((_576945 = _576946) /\ ((pathstart _576945) = (pathstart _576946)))
T c==> c= f0 f1 c/\ c= f0 f1 c= cpathstart f0 cpathstart f1
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), ((real_le (drop u)) (drop v)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (((real_le (drop u)) (drop v)) /\ (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> creal_le cdrop f3 cdrop f4 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f3 cdrop f4 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (!u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f0 f1 c\/ c~ c= cpathfinish b0 cI f0 f2 c\/ c~ c= cpathstart b1 cI f0 f2 c\/ c~ c= cpathfinish b1 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
- (_576917 = _576918) |- ((_576917 = _576918) /\ ((arc _576918) \/ (~ (arc _576917))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ carc f1 c~ carc f0
- (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), (?d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- F
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c? / c/\ c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 cF
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))) = (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- |- (((~ p) ==> p) = p)
T c= c==> c~ f0 f0 f0
- (_576963 = _576965) |- ((_576963 = _576965) /\ ((~ (_576964 = _576966)) \/ ((_576963 UNION _576964) = (_576965 UNION _576966))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cUNION f0 f2 * * part cUNION f1 f3
- |- ((~ (_576957 = _576958)) \/ ((path_image _576957) = (path_image _576958)))
T c\/ c~ c= f0 f1 c= * part cpath_image f0 * part cpath_image f1
+ ((\u. (?d. (((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) u') |- (((?d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) ==> F) = F)
T c==> * / c? / c/\ c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b2 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b2 * f0 f2 c\/ c~ c= cpathfinish b2 * f0 f1 c\/ c~ c= cpathstart b2 * f0 f1 c\/ c~ c= cpathfinish b2 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b2 * part cpath_image b2 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b2 * part cpath_image b2 * part cpath_image f0 f3 c= c==> c? / c/\ c/\ carc f3 c/\ carc b0 c/\ c= cpathstart f3 * f0 f1 c/\ c= cpathfinish f3 * f0 f2 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= * part cpath_image f3 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image b0 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image b0 * part cpath_image f0 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f0 f2 c\/ c~ c= cpathfinish b1 * f0 f1 c\/ c~ c= cpathstart b2 * f0 f1 c\/ c~ c= cpathfinish b2 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 cF cF
+ |- ((\Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))) Q)
T * / c= c==> c? / * f0 b1 b0 ! c==> * f0 b1 b0 f1
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((pathfinish u') = ((I g) u))) ==> ((pathfinish u') = ((I g) u)))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ c= cpathfinish f0 cI f2 f4 c= cpathfinish f0 cI f2 f4
+ |- (((!P. (!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q))))) ==> ((\P. (!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q))))) P)) = ((\P. (!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q))))) P))
T c= c==> ! ! c= c==> c? / * b0 b2 b1 ! c==> * b0 b2 b1 * / ! c= c==> c? / * b0 b2 b1 ! c==> * b0 b2 b1 f0 * / ! c= c==> c? / * b0 b2 b1 ! c==> * b0 b2 b1 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- ((v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = T)
T c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL cT
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((pathfinish u') = ((I g) u))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= cpathfinish f0 cI f2 f4
+ |- ((f x) = ((I f) x))
T c= * f0 f1 cI f0 f1
+ |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ |- ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)
T c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF
+ |- (((!y. (!x. (!s. (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F))) = ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F)))
T c= c==> ! ! ! c/\ c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 c= * * part cINSERT b1 * * part cINSERT b1 b2 * * part cINSERT b1 b2 c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 cF c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 cF
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((pathfinish u') = ((I g) v))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= cpathfinish f0 cI f2 f4
+ |- ((\y. (!s. (!f. ((y IN ((IMAGE f) s)) = (?x. ((y = (f x)) /\ (x IN s))))))) y)
T * / ! ! c= cIN b0 * * part cIMAGE b2 b1 c? / c/\ c= b0 * b2 b3 cIN b3 b1 f0
+ |- ((!g. (!v. (!u. ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) = (!g. (!v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)))))
T c= ! ! ! c==> c? / c/\ carc b3 c? / c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * part cpath_image b3 * * part cIMAGE b0 * part cclosed_interval cCONS c, b2 b1 cNIL c/\ c= * part cpath_image b4 * * part cIMAGE b0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b2 b1 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c? / c/\ carc b3 c? / c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 ! ! ! c==> c~ c==> c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * part cpath_image b3 * * part cIMAGE b0 * part cclosed_interval cCONS c, b2 b1 cNIL c/\ c= * part cpath_image b4 * * part cIMAGE b0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b2 b1 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 cF
+ |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
- |- ((?d. t) = t)
T c= c? / f0 f0
- (~ ((pathfinish u') = ((I g) v))), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ ((pathfinish u') = ((I g) v))) /\ ((pathfinish u') = ((I g) v)))
T c==> c~ c= cpathfinish f0 cI f1 f2 c==> c/\ carc f0 c/\ carc f3 c/\ c= cpathstart f0 * f1 f4 c/\ c= cpathfinish f0 * f1 f2 c/\ c= cpathstart f3 * f1 f2 c/\ c= cpathfinish f3 * f1 f4 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f4 f2 cNIL c/\ c= * part cpath_image f3 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f4 f2 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f3 * * part cINSERT * f1 f4 * * part cINSERT * f1 f2 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f3 * part cpath_image f1 c/\ c~ c= cpathfinish f0 cI f1 f2 c= cpathfinish f0 cI f1 f2
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((pathfinish d) = ((I g) v)) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g))))))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (~ ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- (~ (!s. (!t. ((s INTER t) = (t INTER s)))))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> c~ c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c~ ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0
- (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), (~ F), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ F) /\ F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c~ cF c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c~ cF cF
- (~ (((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ (((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) /\ (((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))))
T c==> c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY
- (!s. (!t. ((s INTER t) = (t INTER s)))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = ((path_image d) INTER (path_image u')))) ==> ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = ((path_image d) INTER (path_image u'))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ c= * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY * * part cINTER * part cpath_image f1 * part cpath_image f0 c= * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY * * part cINTER * part cpath_image f1 * part cpath_image f0
- |- ((_576925 = _576926) ==> ((open_interval _576925) = (open_interval _576926)))
T c==> c= f0 f1 c= * part copen_interval f0 * part copen_interval f1
+ |- (((?x. ((a = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))))) ==> (!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) = (!x. (((a = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))))
T c= c==> c? / c/\ c= f0 * f1 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL ! c==> c/\ c= f2 * f1 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f2 c/\ c= cpathstart b2 f2 c/\ c= cpathfinish b2 f0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 ! c==> c/\ c= f0 * f1 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL ! c==> c/\ c= f2 * f1 b1 cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f2 c/\ c= cpathstart b2 f2 c/\ c= cpathfinish b2 f0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1
- |- ((_576917 = _576918) ==> ((arc _576918) \/ (~ (arc _576917))))
T c==> c= f0 f1 c\/ carc f1 c~ carc f0
- ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((\x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s)))) _576915)
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 * / ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 f0
+ |- ((((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((a IN (path_image g)) /\ ((b IN (path_image g)) /\ (~ (a = b)))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) = T)
T c= c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cpath_image f0 c/\ cIN f2 * part cpath_image f0 c~ c= f1 f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f1 c/\ c= cpathfinish b0 f2 c/\ c= cpathstart b1 f2 c/\ c= cpathfinish b1 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cT
+ (~ (a = b)), (simple_path g), ((pathfinish g) = (pathstart g)), (a IN (path_image g)), (b IN (path_image g)) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= cpathfinish f2 cpathstart f2 c==> cIN f0 * part cpath_image f2 c==> cIN f1 * part cpath_image f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f0 c/\ c= cpathfinish b0 f1 c/\ c= cpathstart b1 f1 c/\ c= cpathfinish b1 f0 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) /\ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c/\ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((pathstart d) = ((I g) u))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= cpathstart f1 cI f2 f4
+ |- ((!v. (!u. ((~ ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> (~ (!s. (!t. ((s INTER t) = (t INTER s)))))))))) = T)
T c= ! ! c==> c~ c==> c? / c/\ carc b2 c? / c/\ carc b3 c/\ c= cpathstart b2 * f0 b0 c/\ c= cpathfinish b2 * f0 b1 c/\ c= cpathstart b3 * f0 b1 c/\ c= cpathfinish b3 * f0 b0 c/\ c= * part cpath_image b2 * * part cIMAGE f0 * part cclosed_interval cCONS c, b0 b1 cNIL c/\ c= * part cpath_image b3 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b0 b1 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b0 * * part cINSERT * f0 b1 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 c? / c/\ carc b2 c? / c/\ carc b3 c/\ c= cpathstart b2 * f0 b1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= cpathstart b3 * f0 b0 c/\ c= cpathfinish b3 * f0 b1 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 c==> c/\ ! ! ! c= * * part cINSERT b3 * * part cINSERT b2 b4 * * part cINSERT b2 * * part cINSERT b3 b4 ! ! c= * * part cINSERT b2 * * part cINSERT b2 b3 * * part cINSERT b2 b3 c==> ! ! c= * * part cUNION b2 b3 * * part cUNION b3 b2 c~ ! ! c= * * part cINTER b2 b3 * * part cINTER b3 b2 cT
+ |- ((!b. (((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((a IN (path_image g)) /\ ((b IN (path_image g)) /\ (~ (a = b)))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) = T)
T c= ! c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cpath_image f0 c/\ cIN b0 * part cpath_image f0 c~ c= f1 b0 c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 f1 c/\ c= cpathfinish b1 b0 c/\ c= cpathstart b2 b0 c/\ c= cpathfinish b2 f1 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 cT
+ (~ (((real_le (drop u)) (drop v)) \/ ((real_le (drop v)) (drop u)))) |- (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0))))
T c==> c~ c\/ creal_le cdrop f0 cdrop f1 creal_le cdrop f1 cdrop f0 c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0
- (_576927 = _576929), (_576928 = _576930) |- ((_576928 = _576930) /\ ((_576927 DIFF _576928) = (_576929 DIFF _576930)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f2 f3 c= * * part cDIFF f0 f2 * * part cDIFF f1 f3
- |- ((_576959 = _576961) ==> ((~ (_576960 = _576962)) \/ ((_576959 INTER _576960) = (_576961 INTER _576962))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= * * part cINTER f0 f2 * * part cINTER f1 f3
+ (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))) |- ((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (a = (g u)) |- ((~ (a = b)) = (~ ((g u) = b)))
T c==> c= f0 * f1 f2 c= c~ c= f0 f3 c~ c= * f1 f2 f3
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!s. (!t. ((s INTER t) = (t INTER s)))) |- (((!t. ((_576908 INTER t) = (t INTER _576908))) ==> ((\t. ((_576908 INTER t) = (t INTER _576908))) _576909)) = ((\t. ((_576908 INTER t) = (t INTER _576908))) _576909))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c= c==> ! c= * * part cINTER f0 b0 * * part cINTER b0 f0 * / c= * * part cINTER f0 b0 * * part cINTER b0 f0 f1 * / c= * * part cINTER f0 b0 * * part cINTER b0 f0 f1
- |- ((~ (_576917 = _576918)) \/ ((arc _576918) \/ (~ (arc _576917))))
T c\/ c~ c= f0 f1 c\/ carc f1 c~ carc f0
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((?u. (?d. (((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) ==> F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c? / c? / c/\ c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b2 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b2 * f0 f2 c\/ c~ c= cpathfinish b2 * f0 f1 c\/ c~ c= cpathstart b2 * f0 f1 c\/ c~ c= cpathfinish b2 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b2 * part cpath_image b2 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b2 * part cpath_image b2 * part cpath_image f0 cF
- |- ((~ (_576931 = _576933)) \/ ((~ (_576932 = _576934)) \/ ((_576931 , _576932) = (_576933 , _576934))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= c, f0 f2 c, f1 f3
- (_576936 = _576938) |- ((_576935 = _576937) ==> (((CONS _576935) _576936) = ((CONS _576937) _576938)))
T c==> c= f0 f1 c==> c= f2 f3 c= cCONS f2 f0 cCONS f3 f1
- (~ ((pathfinish d) = ((I g) u))), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ ((pathfinish d) = ((I g) u))) /\ ((pathfinish d) = ((I g) u)))
T c==> c~ c= cpathfinish f0 cI f1 f2 c==> c/\ carc f3 c/\ carc f0 c/\ c= cpathstart f3 * f1 f2 c/\ c= cpathfinish f3 * f1 f4 c/\ c= cpathstart f0 * f1 f4 c/\ c= cpathfinish f0 * f1 f2 c/\ c= * part cpath_image f3 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f4 cNIL c/\ c= * part cpath_image f0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f4 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image f0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f4 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image f0 * part cpath_image f1 c/\ c~ c= cpathfinish f0 cI f1 f2 c= cpathfinish f0 cI f1 f2
+ |- (((((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop v)) (drop u)) /\ (~ ((g v) = (g u)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) = (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c= c==> c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN f2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f1 cdrop f2 c~ c= * f0 f1 * f0 f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
- |- (T = (((~ (x = y)) \/ ((~ (x = z)) \/ (y = z))) = ((y = z) \/ ((~ (x = y)) \/ (~ (x = z))))))
T c= cT c= c\/ c~ c= f0 f1 c\/ c~ c= f0 f2 c= f1 f2 c\/ c= f1 f2 c\/ c~ c= f0 f1 c~ c= f0 f2
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g)))) = (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (((!u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) ==> ((\u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) _576854)) = ((\u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) _576854))
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c= c==> ! ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f0 f1 c\/ c~ c= cpathfinish b0 cI f0 f2 c\/ c~ c= cpathstart b1 cI f0 f2 c\/ c~ c= cpathfinish b1 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 * / ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f0 f1 c\/ c~ c= cpathfinish b0 cI f0 f2 c\/ c~ c= cpathstart b1 cI f0 f2 c\/ c~ c= cpathfinish b1 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 f3 * / ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f0 f1 c\/ c~ c= cpathfinish b0 cI f0 f2 c\/ c~ c= cpathstart b1 cI f0 f2 c\/ c~ c= cpathfinish b1 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 f3
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((pathfinish d) = ((I g) v))) ==> ((pathfinish d) = ((I g) v)))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ c= cpathfinish f1 cI f2 f3 c= cpathfinish f1 cI f2 f3
+ |- ((!x. ((!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))) /\ (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) = ((!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))))
T c= ! c/\ ! c= * * part cINSERT b0 * * part cINSERT f0 b1 * * part cINSERT f0 * * part cINSERT b0 b1 ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c/\ ! ! c= * * part cINSERT b0 * * part cINSERT f0 b1 * * part cINSERT f0 * * part cINSERT b0 b1 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1
+ |- ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (!u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 ! ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f2 f4 c\/ c~ c= cpathfinish b0 cI f2 f3 c\/ c~ c= cpathstart b1 cI f2 f3 c\/ c~ c= cpathfinish b1 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ (!s. (!t. ((s INTER t) = (t INTER s)))) |- ((\t. ((_576908 INTER t) = (t INTER _576908))) _576909)
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 * / c= * * part cINTER f0 b0 * * part cINTER b0 f0 f1
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((!d. ((~ (arc _576910)) \/ ((~ (arc d)) \/ ((~ ((pathstart _576910) = ((I g) u))) \/ ((~ ((pathfinish _576910) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image _576910) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576910) UNION (path_image d)) = (path_image g))))))))))) ==> ((\d. ((~ (arc _576910)) \/ ((~ (arc d)) \/ ((~ ((pathstart _576910) = ((I g) u))) \/ ((~ ((pathfinish _576910) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image _576910) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576910) UNION (path_image d)) = (path_image g))))))))))) _576911)) = ((\d. ((~ (arc _576910)) \/ ((~ (arc d)) \/ ((~ ((pathstart _576910) = ((I g) u))) \/ ((~ ((pathfinish _576910) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image _576910) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576910) UNION (path_image d)) = (path_image g))))))))))) _576911))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c==> ! c\/ c~ carc f5 c\/ c~ carc b0 c\/ c~ c= cpathstart f5 cI f2 f4 c\/ c~ c= cpathfinish f5 cI f2 f3 c\/ c~ c= cpathstart b0 cI f2 f3 c\/ c~ c= cpathfinish b0 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image f5 * part cpath_image b0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f5 * part cpath_image b0 * part cpath_image f2 * / c\/ c~ carc f5 c\/ c~ carc b0 c\/ c~ c= cpathstart f5 cI f2 f4 c\/ c~ c= cpathfinish f5 cI f2 f3 c\/ c~ c= cpathstart b0 cI f2 f3 c\/ c~ c= cpathfinish b0 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image f5 * part cpath_image b0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f5 * part cpath_image b0 * part cpath_image f2 f6 * / c\/ c~ carc f5 c\/ c~ carc b0 c\/ c~ c= cpathstart f5 cI f2 f4 c\/ c~ c= cpathfinish f5 cI f2 f3 c\/ c~ c= cpathstart b0 cI f2 f3 c\/ c~ c= cpathfinish b0 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image f5 * part cpath_image b0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f5 * part cpath_image b0 * part cpath_image f2 f6
- |- (((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))))
T c= creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0
- (~ ((pathstart u') = ((I g) v))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((pathstart u') = ((I g) v))) /\ ((pathstart u') = ((I g) v)))
T c==> c~ c= cpathstart f0 cI f1 f2 c==> c/\ c/\ carc f0 c/\ carc f3 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f4 c/\ c= cpathstart f3 * f1 f4 c/\ c= cpathfinish f3 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f4 cNIL c/\ c= * part cpath_image f3 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f3 * * part cINSERT * f1 f2 * * part cINSERT * f1 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f3 * part cpath_image f1 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f1 f4 c\/ c~ c= cpathfinish b0 * f1 f2 c\/ c~ c= cpathstart b1 * f1 f2 c\/ c~ c= cpathfinish b1 * f1 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f4 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c/\ c~ c= cpathstart f0 cI f1 f2 c= cpathstart f0 cI f1 f2
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- ((\u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) _576854)
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 * / ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f0 f1 c\/ c~ c= cpathfinish b0 cI f0 f2 c\/ c~ c= cpathstart b1 cI f0 f2 c\/ c~ c= cpathfinish b1 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 f3
+ |- ((!g. (!v. (!u. ((~ ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> (~ (!s. (!t. ((s INTER t) = (t INTER s))))))))))) = (!g. (!v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> ((!y. (!x. (!s. (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F))))))))
T c= ! ! ! c==> c~ c==> c? / c/\ carc b3 c? / c/\ carc b4 c/\ c= cpathstart b3 * b0 b1 c/\ c= cpathfinish b3 * b0 b2 c/\ c= cpathstart b4 * b0 b2 c/\ c= cpathfinish b4 * b0 b1 c/\ c= * part cpath_image b3 * * part cIMAGE b0 * part cclosed_interval cCONS c, b1 b2 cNIL c/\ c= * part cpath_image b4 * * part cIMAGE b0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b1 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b1 * * part cINSERT * b0 b2 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c? / c/\ carc b3 c? / c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c==> c/\ ! ! ! c= * * part cINSERT b4 * * part cINSERT b3 b5 * * part cINSERT b3 * * part cINSERT b4 b5 ! ! c= * * part cINSERT b3 * * part cINSERT b3 b4 * * part cINSERT b3 b4 c==> ! ! c= * * part cUNION b3 b4 * * part cUNION b4 b3 c~ ! ! c= * * part cINTER b3 b4 * * part cINTER b4 b3 ! ! ! c==> c~ c==> c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b1 c/\ c= cpathfinish b3 * b0 b2 c/\ c= cpathstart b4 * b0 b2 c/\ c= cpathfinish b4 * b0 b1 c/\ c= * part cpath_image b3 * * part cIMAGE b0 * part cclosed_interval cCONS c, b1 b2 cNIL c/\ c= * part cpath_image b4 * * part cIMAGE b0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b1 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b1 * * part cINSERT * b0 b2 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c==> ! ! ! c/\ c= * * part cINSERT b4 * * part cINSERT b3 b5 * * part cINSERT b3 * * part cINSERT b4 b5 c= * * part cINSERT b4 * * part cINSERT b4 b5 * * part cINSERT b4 b5 c==> ! ! c= * * part cUNION b3 b4 * * part cUNION b4 b3 c==> ! ! c= * * part cINTER b3 b4 * * part cINTER b4 b3 cF
+ (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = ((path_image d) INTER (path_image u'))) /\ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY * * part cINTER * part cpath_image f1 * part cpath_image f0 c= * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((pathstart d) = ((I g) u))) ==> ((pathstart d) = ((I g) u)))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ c= cpathstart f1 cI f2 f4 c= cpathstart f1 cI f2 f4
+ (!s. (!t. ((s INTER t) = (t INTER s)))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') INTER (path_image d)) = ((path_image d) INTER (path_image u'))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINTER * part cpath_image f1 * part cpath_image f0
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((pathfinish u') = ((I g) u)) /\ (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- (~ (((path_image u') UNION (path_image d)) = (path_image g))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (((path_image u') UNION (path_image d)) = (path_image g))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))
T c==> c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- (~ (arc u')), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ (arc u')) /\ (arc u'))
T c==> c~ carc f0 c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c~ carc f0 carc f0
+ |- (((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) = (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c= c/\ carc f0 c? / c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 c? / c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1
- |- ((!d'. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d') = (g v))) \/ ((~ ((pathfinish d') = (g u))) \/ ((~ (((path_image u) INTER (path_image d')) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d')) = (path_image g)))))))))) = ((~ (arc d)) \/ (!d. ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c= ! c\/ c~ carc f0 c\/ c~ c= cpathstart f1 * f2 f3 c\/ c~ c= cpathfinish f1 * f2 f4 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= * * part cINTER * part cpath_image f1 * part cpath_image b0 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c~ c= * * part cUNION * part cpath_image f1 * part cpath_image b0 * part cpath_image f2 c\/ c~ carc f0 ! c\/ c~ c= cpathstart f1 * f2 f3 c\/ c~ c= cpathfinish f1 * f2 f4 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= * * part cINTER * part cpath_image f1 * part cpath_image b0 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c~ c= * * part cUNION * part cpath_image f1 * part cpath_image b0 * part cpath_image f2
- (!s. (!t. ((s INTER t) = (t INTER s)))) |- ((~ (((path_image u') INTER (path_image d)) = ((path_image d) INTER (path_image u')))) ==> (((path_image u') INTER (path_image d)) = ((path_image d) INTER (path_image u'))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINTER * part cpath_image f1 * part cpath_image f0 c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINTER * part cpath_image f1 * part cpath_image f0
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (((!d. ((~ (arc _576854)) \/ ((~ (arc d)) \/ ((~ ((pathstart _576854) = ((I g) u))) \/ ((~ ((pathfinish _576854) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image _576854) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576854) UNION (path_image d)) = (path_image g))))))))))) ==> ((\d. ((~ (arc _576854)) \/ ((~ (arc d)) \/ ((~ ((pathstart _576854) = ((I g) u))) \/ ((~ ((pathfinish _576854) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image _576854) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576854) UNION (path_image d)) = (path_image g))))))))))) _576855)) = ((\d. ((~ (arc _576854)) \/ ((~ (arc d)) \/ ((~ ((pathstart _576854) = ((I g) u))) \/ ((~ ((pathfinish _576854) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image _576854) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576854) UNION (path_image d)) = (path_image g))))))))))) _576855))
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c= c==> ! c\/ c~ carc f3 c\/ c~ carc b0 c\/ c~ c= cpathstart f3 cI f0 f1 c\/ c~ c= cpathfinish f3 cI f0 f2 c\/ c~ c= cpathstart b0 cI f0 f2 c\/ c~ c= cpathfinish b0 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image f3 * part cpath_image b0 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image f3 * part cpath_image b0 * part cpath_image f0 * / c\/ c~ carc f3 c\/ c~ carc b0 c\/ c~ c= cpathstart f3 cI f0 f1 c\/ c~ c= cpathfinish f3 cI f0 f2 c\/ c~ c= cpathstart b0 cI f0 f2 c\/ c~ c= cpathfinish b0 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image f3 * part cpath_image b0 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image f3 * part cpath_image b0 * part cpath_image f0 f4 * / c\/ c~ carc f3 c\/ c~ carc b0 c\/ c~ c= cpathstart f3 cI f0 f1 c\/ c~ c= cpathfinish f3 cI f0 f2 c\/ c~ c= cpathstart b0 cI f0 f2 c\/ c~ c= cpathfinish b0 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image f3 * part cpath_image b0 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image f3 * part cpath_image b0 * part cpath_image f0 f4
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), ((real_le (drop v)) (drop u)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) = ((((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop v)) (drop u)) /\ (~ ((g v) = (g u)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> creal_le cdrop f4 cdrop f3 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f4 c/\ c= cpathfinish b0 * f2 f3 c/\ c= cpathstart b1 * f2 f3 c/\ c= cpathfinish b1 * f2 f4 c/\ c= * part cpath_image b0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f4 f3 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f4 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c==> c/\ csimple_path f2 c/\ c= cpathfinish f2 cpathstart f2 c/\ cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f4 cdrop f3 c~ c= * f2 f4 * f2 f3 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f4 c/\ c= cpathfinish b0 * f2 f3 c/\ c= cpathstart b1 * f2 f3 c/\ c= cpathfinish b1 * f2 f4 c/\ c= * part cpath_image b0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f4 f3 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f4 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
- |- ((?u'. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) = ((arc u) /\ (?u. (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c= c? / c/\ carc f0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f1 f2 c/\ c= cpathfinish b0 * f1 f3 c/\ c= cpathstart b1 * f1 f3 c/\ c= cpathfinish b1 * f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c/\ carc f0 c? / c? / c/\ carc b1 c/\ c= cpathstart b0 * f1 f2 c/\ c= cpathfinish b0 * f1 f3 c/\ c= cpathstart b1 * f1 f3 c/\ c= cpathfinish b1 * f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((pathfinish d) = ((I g) v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((path_image u') UNION (path_image d)) = (path_image g))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ |- ((!s. (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))) = ((!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))) /\ (!s. ((x INSERT (x INSERT s)) = (x INSERT s)))))
T c= ! c/\ c= * * part cINSERT f0 * * part cINSERT f1 b0 * * part cINSERT f1 * * part cINSERT f0 b0 c= * * part cINSERT f0 * * part cINSERT f0 b0 * * part cINSERT f0 b0 c/\ ! c= * * part cINSERT f0 * * part cINSERT f1 b0 * * part cINSERT f1 * * part cINSERT f0 b0 ! c= * * part cINSERT f0 * * part cINSERT f0 b0 * * part cINSERT f0 b0
+ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F) = F)
T c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c= c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF cF
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
- (_576925 = _576926) |- ((_576925 = _576926) /\ ((open_interval _576925) = (open_interval _576926)))
T c==> c= f0 f1 c/\ c= f0 f1 c= * part copen_interval f0 * part copen_interval f1
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 cF
- (~ ((pathfinish u') = ((I g) u))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((pathfinish u') = ((I g) u))) /\ ((pathfinish u') = ((I g) u)))
T c==> c~ c= cpathfinish f0 cI f1 f2 c==> c/\ c/\ carc f0 c/\ carc f3 c/\ c= cpathstart f0 * f1 f4 c/\ c= cpathfinish f0 * f1 f2 c/\ c= cpathstart f3 * f1 f2 c/\ c= cpathfinish f3 * f1 f4 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f4 f2 cNIL c/\ c= * part cpath_image f3 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f4 f2 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f3 * * part cINSERT * f1 f4 * * part cINSERT * f1 f2 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f3 * part cpath_image f1 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f1 f2 c\/ c~ c= cpathfinish b0 * f1 f4 c\/ c~ c= cpathstart b1 * f1 f4 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f4 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c/\ c~ c= cpathfinish f0 cI f1 f2 c= cpathfinish f0 cI f1 f2
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((!d. ((P d) \/ Q)) = ((!d. (P d)) \/ Q))
T c= ! c\/ * f0 b0 f1 c\/ ! * f0 b0 f1
+ (~ (a = b)), (simple_path g), (a = (g u)), ((pathfinish g) = (pathstart g)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (((b = (g v)) /\ (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= cpathfinish f2 cpathstart f2 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> c/\ c= f1 * f2 f4 cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 f1 c/\ c= cpathstart b1 f1 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
- (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0
+ |- (((!f. ((y IN ((IMAGE f) s)) = (?x. ((y = (f x)) /\ (x IN s))))) ==> ((\f. ((y IN ((IMAGE f) s)) = (?x. ((y = (f x)) /\ (x IN s))))) f)) = ((\f. ((y IN ((IMAGE f) s)) = (?x. ((y = (f x)) /\ (x IN s))))) f))
T c= c==> ! c= cIN f0 * * part cIMAGE b0 f1 c? / c/\ c= f0 * b0 b1 cIN b1 f1 * / c= cIN f0 * * part cIMAGE b0 f1 c? / c/\ c= f0 * b0 b1 cIN b1 f1 f2 * / c= cIN f0 * * part cIMAGE b0 f1 c? / c/\ c= f0 * b0 b1 cIN b1 f1 f2
- (_576947 = _576948) |- ((_576947 = _576948) /\ ((pathfinish _576947) = (pathfinish _576948)))
T c==> c= f0 f1 c/\ c= f0 f1 c= cpathfinish f0 cpathfinish f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!s. (!t. ((s UNION t) = (t UNION s)))), (~ (((path_image d) UNION (path_image u')) = (path_image g))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (((path_image d) UNION (path_image u')) = (path_image g))) /\ (((path_image d) UNION (path_image u')) = (path_image g)))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c/\ c/\ carc f1 c/\ carc f0 c/\ c= cpathstart f1 * f2 f3 c/\ c= cpathfinish f1 * f2 f4 c/\ c= cpathstart f0 * f2 f4 c/\ c= cpathfinish f0 * f2 f3 c/\ c= * part cpath_image f1 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f0 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- |- (((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F) ==> ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F))
T c==> c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- (b = (g v)) |- ((simple_path g) = (simple_path g))
T c==> c= f0 * f1 f2 c= csimple_path f1 csimple_path f1
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((path_image u') UNION (path_image d)) = ((path_image d) UNION (path_image u'))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * * part cUNION * part cpath_image f1 * part cpath_image f0 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((pathfinish d) = ((I g) v)) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g)))))) = (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c/\ c= cpathfinish f1 cI f2 f3 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((pathstart u') = ((I g) u)) /\ (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- (~ ((pathfinish d) = ((I g) v))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((pathfinish d) = ((I g) v))) /\ ((pathfinish d) = ((I g) v)))
T c==> c~ c= cpathfinish f0 cI f1 f2 c==> c/\ c/\ carc f3 c/\ carc f0 c/\ c= cpathstart f3 * f1 f2 c/\ c= cpathfinish f3 * f1 f4 c/\ c= cpathstart f0 * f1 f4 c/\ c= cpathfinish f0 * f1 f2 c/\ c= * part cpath_image f3 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f4 cNIL c/\ c= * part cpath_image f0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f4 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image f0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f4 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image f0 * part cpath_image f1 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f1 f4 c\/ c~ c= cpathfinish b0 * f1 f2 c\/ c~ c= cpathstart b1 * f1 f2 c\/ c~ c= cpathfinish b1 * f1 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f4 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c/\ c~ c= cpathfinish f0 cI f1 f2 c= cpathfinish f0 cI f1 f2
- |- ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0)))
T creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ F) ==> F)
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c/\ carc f3 c/\ carc f4 c/\ c= cpathstart f3 * f0 f1 c/\ c= cpathfinish f3 * f0 f2 c/\ c= cpathstart f4 * f0 f2 c/\ c= cpathfinish f4 * f0 f1 c/\ c= * part cpath_image f3 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image f4 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image f4 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image f4 * part cpath_image f0 c==> c~ cF cF
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), ((real_le (drop v)) (drop u)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (((real_le (drop v)) (drop u)) /\ (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> creal_le cdrop f4 cdrop f3 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f4 cdrop f3 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ (simple_path g) |- ((simple_path g) = T)
T c==> csimple_path f0 c= csimple_path f0 cT
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((pathstart u') = ((I g) v))) ==> ((pathstart u') = ((I g) v)))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ c= cpathstart f0 cI f2 f3 c= cpathstart f0 cI f2 f3
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (!d. ((~ (arc _576854)) \/ ((~ (arc d)) \/ ((~ ((pathstart _576854) = ((I g) u))) \/ ((~ ((pathfinish _576854) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image _576854) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576854) UNION (path_image d)) = (path_image g)))))))))))
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc f3 c\/ c~ carc b0 c\/ c~ c= cpathstart f3 cI f0 f1 c\/ c~ c= cpathfinish f3 cI f0 f2 c\/ c~ c= cpathstart b0 cI f0 f2 c\/ c~ c= cpathfinish b0 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image f3 * part cpath_image b0 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image f3 * part cpath_image b0 * part cpath_image f0
+ |- (((real_add (real_neg (real_of_num m))) (real_of_num m)) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_neg creal_of_num f0 creal_of_num f0 creal_of_num cNUMERAL c_0
- (_576959 = _576961) |- ((_576959 = _576961) /\ ((~ (_576960 = _576962)) \/ ((_576959 INTER _576960) = (_576961 INTER _576962))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cINTER f0 f2 * * part cINTER f1 f3
- |- ((!d'. ((~ (arc d')) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))) = ((!d. (~ (arc d))) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))
T c= ! c\/ c~ carc b0 c\/ c~ c= cpathstart f0 * f1 f2 c\/ c~ c= cpathfinish f0 * f1 f3 c\/ c~ c= cpathstart f4 * f1 f3 c\/ c~ c= cpathfinish f4 * f1 f2 c\/ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f4 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f4 * part cpath_image f1 c\/ ! c~ carc b0 c\/ c~ c= cpathstart f0 * f1 f2 c\/ c~ c= cpathfinish f0 * f1 f3 c\/ c~ c= cpathstart f4 * f1 f3 c\/ c~ c= cpathfinish f4 * f1 f2 c\/ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f4 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f4 * part cpath_image f1
- (_576942 = _576944) |- ((_576942 = _576944) /\ ((~ (_576941 = _576943)) \/ (((IMAGE _576941) _576942) = ((IMAGE _576943) _576944))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cIMAGE f2 f0 * * part cIMAGE f3 f1
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ |- ((!x. (!s. (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s))))) = T)
T c= ! ! c/\ c= * * part cINSERT b0 * * part cINSERT f0 b1 * * part cINSERT f0 * * part cINSERT b0 b1 c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 cT
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((!y. ((!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s)))))) = ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!y. (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s)))))))
T c= ! c/\ ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b1 * * part cINSERT b1 b2 * * part cINSERT b1 b2 c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! ! c= * * part cINSERT b1 * * part cINSERT b1 b2 * * part cINSERT b1 b2
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY)))) ==> (((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY
+ (~ (a = b)), (simple_path g), (a = (g u)), ((pathfinish g) = (pathstart g)), ((b = (g v)) /\ (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= cpathfinish f2 cpathstart f2 c==> c/\ c= f1 * f2 f4 cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 f1 c/\ c= cpathstart b1 f1 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
- (_576921 = _576922) |- ((_576921 = _576922) /\ ((NUMERAL _576921) = (NUMERAL _576922)))
T c==> c= f0 f1 c/\ c= f0 f1 c= cNUMERAL f0 cNUMERAL f1
+ (~ (a = b)), (simple_path g), ((pathfinish g) = (pathstart g)) |- ((((a = (g u)) /\ (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) = T)
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= cpathfinish f2 cpathstart f2 c= c==> c/\ c= f0 * f2 f3 cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL ! c==> c/\ c= f1 * f2 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f1 c/\ c= cpathstart b2 f1 c/\ c= cpathfinish b2 f0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f2 cT
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((pathstart u') = ((I g) v))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= cpathstart f0 cI f2 f3
+ |- (((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) = (?u. ((?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))))
T c= c/\ c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f0 f2 c\/ c~ c= cpathfinish b0 * f0 f1 c\/ c~ c= cpathstart b1 * f0 f1 c\/ c~ c= cpathfinish b1 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c/\ c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b1 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b1 * f0 f2 c\/ c~ c= cpathfinish b1 * f0 f1 c\/ c~ c= cpathstart b1 * f0 f1 c\/ c~ c= cpathfinish b1 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b1 * part cpath_image f0
- (_576919 = _576920) |- ((_576919 = _576920) /\ ((BIT1 _576919) = (BIT1 _576920)))
T c==> c= f0 f1 c/\ c= f0 f1 c= cBIT1 f0 cBIT1 f1
+ ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- (((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) ==> ((\y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) _576912)) = ((\y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) _576912))
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c= c==> ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 * / ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 f0 * / ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 f0
+ |- (((!g. ((path_image g) = ((IMAGE g) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))))) ==> ((\g. ((path_image g) = ((IMAGE g) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))))) g)) = ((\g. ((path_image g) = ((IMAGE g) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))))) g))
T c= c==> ! c= * part cpath_image b0 * * part cIMAGE b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * / c= * part cpath_image b0 * * part cIMAGE b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 * / c= * part cpath_image b0 * * part cIMAGE b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0
+ (~ (a = b)), (simple_path g), (a = (g u)), ((pathfinish g) = (pathstart g)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- ((((b = (g v)) /\ (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) = T)
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= cpathfinish f2 cpathstart f2 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= c==> c/\ c= f1 * f2 f4 cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 f1 c/\ c= cpathstart b1 f1 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 cT
- |- ((?d'. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d') = (g u)) /\ (((pathfinish d') = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d') = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d')) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d')) = (path_image g))))))))))) = ((arc d) /\ (?d. (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c= c? / c/\ carc f0 c/\ c= cpathstart f1 * f2 f3 c/\ c= cpathfinish f1 * f2 f4 c/\ c= cpathstart b0 * f2 f4 c/\ c= cpathfinish b0 * f2 f3 c/\ c= * part cpath_image f1 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image b0 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image b0 * part cpath_image f2 c/\ carc f0 c? / c/\ c= cpathstart f1 * f2 f3 c/\ c= cpathfinish f1 * f2 f4 c/\ c= cpathstart b0 * f2 f4 c/\ c= cpathfinish b0 * f2 f3 c/\ c= * part cpath_image f1 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image b0 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image b0 * part cpath_image f2
- |- ((~ (_576921 = _576922)) \/ ((NUMERAL _576921) = (NUMERAL _576922)))
T c\/ c~ c= f0 f1 c= cNUMERAL f0 cNUMERAL f1
+ |- ((\P. (!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q))))) P)
T * / ! c= c==> c? / * b0 b2 b1 ! c==> * b0 b2 b1 f0
- |- ((_576953 = _576955) ==> ((~ (_576954 = _576956)) \/ ((_576953 INSERT _576954) = (_576955 INSERT _576956))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= * * part cINSERT f0 f2 * * part cINSERT f1 f3
- (_576954 = _576956), (_576953 = _576955) |- ((_576954 = _576956) /\ ((_576953 INSERT _576954) = (_576955 INSERT _576956)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f0 f1 c= * * part cINSERT f2 f0 * * part cINSERT f3 f1
- (b = (g v)) |- (((pathfinish g) = (pathstart g)) = ((pathfinish g) = (pathstart g)))
T c==> c= f0 * f1 f2 c= c= cpathfinish f1 cpathstart f1 c= cpathfinish f1 cpathstart f1
+ (simple_path g), ((pathfinish g) = (pathstart g)), ((a IN (path_image g)) /\ ((b IN (path_image g)) /\ (~ (a = b)))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> csimple_path f0 c==> c= cpathfinish f0 cpathstart f0 c==> c/\ cIN f1 * part cpath_image f0 c/\ cIN f2 * part cpath_image f0 c~ c= f1 f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f1 c/\ c= cpathfinish b0 f2 c/\ c= cpathstart b1 f2 c/\ c= cpathfinish b1 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
+ |- ((x = x) = T)
T c= c= f0 f0 cT
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))) = (((pathstart u') = ((I g) u)) /\ (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (~ (a = b)), (a = (g u)), (b = (g v)) |- (~ ((g v) = (g u)))
T c==> c~ c= f0 f1 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c~ c= * f2 f4 * f2 f3
+ |- ((p \/ (q \/ r)) = (q \/ (p \/ r)))
T c= c\/ f0 c\/ f1 f2 c\/ f1 c\/ f0 f2
- (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0
+ |- ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
- (!s. (!t. ((s INTER t) = (t INTER s)))), (~ (((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) /\ (((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f1 c/\ carc f0 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= * part cpath_image f1 * * part cIMAGE f2 * part cclosed_interval cCONS c, f4 f3 cNIL c/\ c= * part cpath_image f0 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f4 f3 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f3 c\/ c~ c= cpathfinish b0 * f2 f4 c\/ c~ c= cpathstart b1 * f2 f4 c\/ c~ c= cpathfinish b1 * f2 f3 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY
- ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((\s. ((_576915 INSERT (_576915 INSERT s)) = (_576915 INSERT s))) _576916)
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 * / c= * * part cINSERT f0 * * part cINSERT f0 b0 * * part cINSERT f0 b0 f1
- |- ((a ==> b) = ((~ a) \/ b))
T c= c==> f0 f1 c\/ c~ f0 f1
- |- ((~ (_576927 = _576929)) \/ ((~ (_576928 = _576930)) \/ ((_576927 DIFF _576928) = (_576929 DIFF _576930))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cDIFF f0 f2 * * part cDIFF f1 f3
- (!s. (!t. ((s UNION t) = (t UNION s)))), (~ (((path_image u') UNION (path_image d)) = ((path_image d) UNION (path_image u')))) |- ((~ (((path_image u') UNION (path_image d)) = ((path_image d) UNION (path_image u')))) /\ (((path_image u') UNION (path_image d)) = ((path_image d) UNION (path_image u'))))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * * part cUNION * part cpath_image f1 * part cpath_image f0 c/\ c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * * part cUNION * part cpath_image f1 * part cpath_image f0 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * * part cUNION * part cpath_image f1 * part cpath_image f0
- (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))) |- ((real_gt ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0
+ (~ (a = b)), (a = (g u)), (b = (g v)) |- (((~ ((g u) = (g v))) ==> (((g u) = (g v)) = F)) = (((g u) = (g v)) = F))
T c==> c~ c= f0 f1 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c= c==> c~ c= * f2 f3 * f2 f4 c= c= * f2 f3 * f2 f4 cF c= c= * f2 f3 * f2 f4 cF
- (_576949 = _576951), (_576950 = _576952) |- ((_576949 = _576951) /\ (((I _576949) _576950) = ((I _576951) _576952)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f0 f1 c= cI f0 f2 cI f1 f3
- (~ (arc d)), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (arc d)) /\ (arc d))
T c==> c~ carc f0 c==> c/\ c/\ carc f1 c/\ carc f0 c/\ c= cpathstart f1 * f2 f3 c/\ c= cpathfinish f1 * f2 f4 c/\ c= cpathstart f0 * f2 f4 c/\ c= cpathfinish f0 * f2 f3 c/\ c= * part cpath_image f1 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f0 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c~ carc f0 carc f0
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (!u'. (((\u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) u') ==> F))
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c==> * / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= cpathstart b2 * f0 f2 c/\ c= cpathfinish b2 * f0 f1 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 b0 cF
+ (~ (((real_le (drop u)) (drop v)) \/ ((real_le (drop v)) (drop u)))) |- ((~ (((real_le (drop u)) (drop v)) \/ ((real_le (drop v)) (drop u)))) /\ F)
T c==> c~ c\/ creal_le cdrop f0 cdrop f1 creal_le cdrop f1 cdrop f0 c/\ c~ c\/ creal_le cdrop f0 cdrop f1 creal_le cdrop f1 cdrop f0 cF
- |- ((_576921 = _576922) ==> ((NUMERAL _576921) = (NUMERAL _576922)))
T c==> c= f0 f1 c= cNUMERAL f0 cNUMERAL f1
- |- ((!u'. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u') = (g u))) \/ ((~ ((pathfinish u') = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u') UNION (path_image d)) = (path_image g)))))))))))) = ((~ (arc u)) \/ (!u. (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c= ! c\/ c~ carc f0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f1 f2 c\/ c~ c= cpathfinish b0 * f1 f3 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c\/ c~ carc f0 ! ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f1 f2 c\/ c~ c= cpathfinish b0 * f1 f3 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g))))))) = ((arc u') /\ (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g)))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 c/\ carc f0 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY
- |- ((~ (_576963 = _576965)) \/ ((~ (_576964 = _576966)) \/ ((_576963 UNION _576964) = (_576965 UNION _576966))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cUNION f0 f2 * * part cUNION f1 f3
+ |- (((~ a) \/ (~ b)) = (~ (a /\ b)))
T c= c\/ c~ f0 c~ f1 c~ c/\ f0 f1
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((arc u') /\ (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g)))))))) = ((arc d) /\ ((arc u') /\ (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g))))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c/\ carc f0 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 c/\ carc f1 c/\ carc f0 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
+ (b = (g v)) |- ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))) = (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c= f0 * f1 f2 c= c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= cpathstart b1 * f1 f2 c/\ c= cpathfinish b1 * f1 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 f0 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 * f1 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f3 * * part cINSERT f0 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f0 f1 c\/ c~ c= cpathfinish b0 * f0 f2 c\/ c~ c= cpathstart b1 * f0 f2 c\/ c~ c= cpathfinish b1 * f0 f1 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
- (~ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((~ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) /\ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))))
T c==> c~ c= * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY * * part cINSERT cI f0 f2 * * part cINSERT cI f0 f1 part cEMPTY c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c/\ c~ c= * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY * * part cINSERT cI f0 f2 * * part cINSERT cI f0 f1 part cEMPTY c= * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY * * part cINSERT cI f0 f2 * * part cINSERT cI f0 f1 part cEMPTY
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), (~ ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- F
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c~ c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 cF
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), ((\d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) d) |- (((\d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) d) /\ F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> * / c/\ c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 f4 c/\ * / c/\ c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 f4 cF
- |- ((_576950 = _576952) ==> ((~ (_576949 = _576951)) \/ (((I _576949) _576950) = ((I _576951) _576952))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= cI f2 f0 cI f3 f1
- |- ((~ (_576953 = _576955)) \/ ((~ (_576954 = _576956)) \/ ((_576953 INSERT _576954) = (_576955 INSERT _576956))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cINSERT f0 f2 * * part cINSERT f1 f3
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((arc u') /\ ((arc d) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f2 f4 c\/ c~ c= cpathfinish b0 cI f2 f3 c\/ c~ c= cpathstart b1 cI f2 f3 c\/ c~ c= cpathfinish b1 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
- |- ((((real_gt x) (real_of_num (NUMERAL _0))) /\ ((real_gt y) (real_of_num (NUMERAL _0)))) ==> ((real_gt ((real_mul x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt f0 creal_of_num cNUMERAL c_0 creal_gt f1 creal_of_num cNUMERAL c_0 creal_gt creal_mul f0 f1 creal_of_num cNUMERAL c_0
+ |- ((p \/ q) = (q \/ p))
T c= c\/ f0 f1 c\/ f1 f0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F) = F)
T c= c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 cF cF
- |- ((p \/ (p \/ q)) = (p \/ q))
T c= c\/ f0 c\/ f0 f1 c\/ f0 f1
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((pathstart u') = ((I g) u))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= cpathstart f0 cI f2 f3
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF
- (_576963 = _576965) |- ((_576964 = _576966) ==> ((_576963 UNION _576964) = (_576965 UNION _576966)))
T c==> c= f0 f1 c==> c= f2 f3 c= * * part cUNION f0 f2 * * part cUNION f1 f3
+ (simple_path g), ((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((a IN (path_image g)) /\ ((b IN (path_image g)) /\ (~ (a = b)))))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> csimple_path f0 c==> c/\ csimple_path f0 c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cpath_image f0 c/\ cIN f2 * part cpath_image f0 c~ c= f1 f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f1 c/\ c= cpathfinish b0 f2 c/\ c= cpathstart b1 f2 c/\ c= cpathfinish b1 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
+ (~ (a = b)), (simple_path g), (a = (g u)), ((pathfinish g) = (pathstart g)), ((a = (g u)) /\ (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) |- (!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= cpathfinish f2 cpathstart f2 c==> c/\ c= f0 * f2 f3 cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL ! c==> c/\ c= f1 * f2 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f1 c/\ c= cpathstart b2 f1 c/\ c= cpathfinish b2 f0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f2
+ (!s. (!t. ((s INTER t) = (t INTER s)))) |- (!t. ((_576908 INTER t) = (t INTER _576908)))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 ! c= * * part cINTER f0 b0 * * part cINTER b0 f0
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- (((\u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) u') ==> F)
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> * / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 f3 cF
+ |- (((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F) = ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c= c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL
- (b = (g v)) |- ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))))
T c==> c= f0 * f1 f2 c= cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL
- (_576935 = _576937), (_576936 = _576938) |- ((_576935 = _576937) /\ (((CONS _576935) _576936) = ((CONS _576937) _576938)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f0 f1 c= cCONS f0 f2 cCONS f1 f3
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), ((real_le (drop u)) (drop v)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- ((((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop u)) (drop v)) /\ (~ ((g u) = (g v)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> creal_le cdrop f3 cdrop f4 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> c==> c/\ csimple_path f2 c/\ c= cpathfinish f2 cpathstart f2 c/\ cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f3 cdrop f4 c~ c= * f2 f3 * f2 f4 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * part cpath_image b0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ ((\u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) u') |- (?d. ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))))
T c==> * / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 f3 c? / c/\ carc f3 c/\ carc b0 c/\ c= cpathstart f3 * f0 f1 c/\ c= cpathfinish f3 * f0 f2 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= * part cpath_image f3 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image b0 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image b0 * part cpath_image f0
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g)))))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
+ ((\u. (?d. (((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) u') |- (?d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))
T c==> * / c? / c/\ c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b2 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b2 * f0 f2 c\/ c~ c= cpathfinish b2 * f0 f1 c\/ c~ c= cpathstart b2 * f0 f1 c\/ c~ c= cpathfinish b2 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b2 * part cpath_image b2 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b2 * part cpath_image b2 * part cpath_image f0 f3 c? / c/\ c/\ carc f3 c/\ carc b0 c/\ c= cpathstart f3 * f0 f1 c/\ c= cpathfinish f3 * f0 f2 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= * part cpath_image f3 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image b0 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image b0 * part cpath_image f0 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f0 f2 c\/ c~ c= cpathfinish b1 * f0 f1 c\/ c~ c= cpathstart b2 * f0 f1 c\/ c~ c= cpathfinish b2 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0
- (!s. (!t. ((s INTER t) = (t INTER s)))), (~ (((path_image u') INTER (path_image d)) = ((path_image d) INTER (path_image u')))) |- ((~ (((path_image u') INTER (path_image d)) = ((path_image d) INTER (path_image u')))) /\ (((path_image u') INTER (path_image d)) = ((path_image d) INTER (path_image u'))))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINTER * part cpath_image f1 * part cpath_image f0 c/\ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINTER * part cpath_image f1 * part cpath_image f0 c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINTER * part cpath_image f1 * part cpath_image f0
+ ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((\y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) _576912)
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 * / ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 f0
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((arc d) /\ (((pathstart u') = ((I g) u)) /\ (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ carc f1 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ |- (((real_le (drop u)) (drop v)) \/ ((real_le (drop v)) (drop u)))
T c\/ creal_le cdrop f0 cdrop f1 creal_le cdrop f1 cdrop f0
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ |- (((!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))) ==> ((\Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))) Q)) = ((\Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))) Q))
T c= c==> ! c= c==> c? / * f0 b1 b0 ! c==> * f0 b1 b0 * / c= c==> c? / * f0 b1 b0 ! c==> * f0 b1 b0 f1 * / c= c==> c? / * f0 b1 b0 ! c==> * f0 b1 b0 f1
- |- ((_576919 = _576920) ==> ((BIT1 _576919) = (BIT1 _576920)))
T c==> c= f0 f1 c= cBIT1 f0 cBIT1 f1
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
+ |- ((~ (a \/ b)) = ((~ a) /\ (~ b)))
T c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- ((((\u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) u') ==> F) = T)
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c= c==> * / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 f3 cF cT
+ |- (((b IN ((IMAGE g) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) = ((b IN (path_image g)) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c= c==> cIN f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f2 c/\ c= cpathfinish b0 f0 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f2 * * part cINSERT f0 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c==> cIN f0 * part cpath_image f1 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f2 c/\ c= cpathfinish b0 f0 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f2 * * part cINSERT f0 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((!u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) ==> ((\u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) _576910)) = ((\u. (!d. ((~ (arc u)) \/ ((~ (arc d)) \/ ((~ ((pathstart u) = ((I g) u))) \/ ((~ ((pathfinish u) = ((I g) v))) \/ ((~ ((pathstart d) = ((I g) v))) \/ ((~ ((pathfinish d) = ((I g) u))) \/ ((~ (((path_image u) INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) _576910))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= c==> ! ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f2 f4 c\/ c~ c= cpathfinish b0 cI f2 f3 c\/ c~ c= cpathstart b1 cI f2 f3 c\/ c~ c= cpathfinish b1 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 * / ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f2 f4 c\/ c~ c= cpathfinish b0 cI f2 f3 c\/ c~ c= cpathstart b1 cI f2 f3 c\/ c~ c= cpathfinish b1 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 f5 * / ! c\/ c~ carc b0 c\/ c~ carc b1 c\/ c~ c= cpathstart b0 cI f2 f4 c\/ c~ c= cpathfinish b0 cI f2 f3 c\/ c~ c= cpathstart b1 cI f2 f3 c\/ c~ c= cpathfinish b1 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 f5
+ ((real_le (drop v)) (drop u)) |- (((real_le (drop v)) (drop u)) = T)
T c==> creal_le cdrop f0 cdrop f1 c= creal_le cdrop f0 cdrop f1 cT
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), ((real_le (drop u)) (drop v)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) = ((((simple_path g) /\ (((pathfinish g) = (pathstart g)) /\ ((u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((real_le (drop u)) (drop v)) /\ (~ ((g u) = (g v)))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> creal_le cdrop f3 cdrop f4 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * part cpath_image b0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c==> c/\ csimple_path f2 c/\ c= cpathfinish f2 cpathstart f2 c/\ cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ creal_le cdrop f3 cdrop f4 c~ c= * f2 f3 * f2 f4 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * part cpath_image b0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ |- ((\g. (!v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> ((!y. (!x. (!s. (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F))))))) g)
T * / ! ! c==> c~ c==> c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b1 c/\ c= cpathfinish b3 * b0 b2 c/\ c= cpathstart b4 * b0 b2 c/\ c= cpathfinish b4 * b0 b1 c/\ c= * part cpath_image b3 * * part cIMAGE b0 * part cclosed_interval cCONS c, b1 b2 cNIL c/\ c= * part cpath_image b4 * * part cIMAGE b0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b1 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b1 * * part cINSERT * b0 b2 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c==> ! ! ! c/\ c= * * part cINSERT b4 * * part cINSERT b3 b5 * * part cINSERT b3 * * part cINSERT b4 b5 c= * * part cINSERT b4 * * part cINSERT b4 b5 * * part cINSERT b4 b5 c==> ! ! c= * * part cUNION b3 b4 * * part cUNION b4 b3 c==> ! ! c= * * part cINTER b3 b4 * * part cINTER b4 b3 cF f0
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (~ (a = b)), (simple_path g), (a = (g u)), (b = (g v)), ((pathfinish g) = (pathstart g)), ((real_le (drop u)) (drop v)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))), (v IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c==> c= cpathfinish f2 cpathstart f2 c==> creal_le cdrop f3 cdrop f4 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f4 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f2 f3 c/\ c= cpathfinish b0 * f2 f4 c/\ c= cpathstart b1 * f2 f4 c/\ c= cpathfinish b1 * f2 f3 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((pathfinish d) = ((I g) v))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= cpathfinish f1 cI f2 f3
+ (~ (a = b)), (a = (g u)), (b = (g v)) |- (((g u) = (g v)) = F)
T c==> c~ c= f0 f1 c==> c= f0 * f2 f3 c==> c= f1 * f2 f4 c= c= * f2 f3 * f2 f4 cF
+ (~ (a = b)), (simple_path g), (a = (g u)), ((pathfinish g) = (pathstart g)), (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- (!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= f0 * f2 f3 c==> c= cpathfinish f2 cpathstart f2 c==> cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL ! c==> c/\ c= f1 * f2 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f1 c/\ c= cpathstart b2 f1 c/\ c= cpathfinish b2 f0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f2
+ (~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F))
T c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 cF
- |- ((~ (_576950 = _576952)) \/ ((~ (_576949 = _576951)) \/ (((I _576949) _576950) = ((I _576951) _576952))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= cI f2 f0 cI f3 f1
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((arc u') /\ ((arc d) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- (!d. (((\d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) d) ==> F))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 ! c==> * / c/\ c/\ carc f0 c/\ carc b1 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b1 * f1 f3 c/\ c= cpathfinish b1 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b1 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 b0 cF
- (_576936 = _576938) |- ((_576936 = _576938) /\ ((~ (_576935 = _576937)) \/ (((CONS _576935) _576936) = ((CONS _576937) _576938))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= cCONS f2 f0 cCONS f3 f1
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (~ ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((!s. (!t. ((s UNION t) = (t UNION s)))) /\ (~ (!s. (!t. ((s INTER t) = (t INTER s))))))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> c~ c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c/\ ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c~ ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0
+ (!s. (!t. ((s UNION t) = (t UNION s)))) |- ((\t. ((_576906 UNION t) = (t UNION _576906))) _576907)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 * / c= * * part cUNION f0 b0 * * part cUNION b0 f0 f1
- (_576959 = _576961) |- ((_576960 = _576962) ==> ((_576959 INTER _576960) = (_576961 INTER _576962)))
T c==> c= f0 f1 c==> c= f2 f3 c= * * part cINTER f0 f2 * * part cINTER f1 f3
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (arc _576910)) \/ ((~ (arc _576911)) \/ ((~ ((pathstart _576910) = ((I g) u))) \/ ((~ ((pathfinish _576910) = ((I g) v))) \/ ((~ ((pathstart _576911) = ((I g) v))) \/ ((~ ((pathfinish _576911) = ((I g) u))) \/ ((~ (((path_image _576910) INTER (path_image _576911)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576910) UNION (path_image _576911)) = (path_image g))))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c\/ c~ carc f5 c\/ c~ carc f6 c\/ c~ c= cpathstart f5 cI f2 f4 c\/ c~ c= cpathfinish f5 cI f2 f3 c\/ c~ c= cpathstart f6 cI f2 f3 c\/ c~ c= cpathfinish f6 cI f2 f4 c\/ c~ c= * * part cINTER * part cpath_image f5 * part cpath_image f6 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f5 * part cpath_image f6 * part cpath_image f2
- (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0)))) ==> ((real_gt ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v))))) (real_of_num (NUMERAL _0)))) = ((real_gt ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0
+ ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((_576913 INSERT (_576912 INSERT _576914)) = (_576912 INSERT (_576913 INSERT _576914)))
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c= * * part cINSERT f0 * * part cINSERT f1 f2 * * part cINSERT f1 * * part cINSERT f0 f2
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (((arc d) /\ (((pathstart u') = ((I g) u)) /\ (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))) = ((arc u') /\ ((arc d) /\ (((pathstart u') = ((I g) u)) /\ (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= c/\ carc f1 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (~ (a = b)), (simple_path g), ((pathfinish g) = (pathstart g)), ((a = (g u)) /\ (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) |- (((a = (g u)) /\ (u IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ (!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= cpathfinish f2 cpathstart f2 c==> c/\ c= f0 * f2 f3 cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ c/\ c= f0 * f2 f3 cIN f3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL ! c==> c/\ c= f1 * f2 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f1 c/\ c= cpathstart b2 f1 c/\ c= cpathfinish b2 f0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f2
+ (a = (g u)) |- ((!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) = (!x. (((b = (g x)) /\ (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))
T c==> c= f0 * f1 f2 c= ! c==> c/\ c= f3 * f1 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 * f1 f2 c/\ c= cpathfinish b1 f3 c/\ c= cpathstart b2 f3 c/\ c= cpathfinish b2 * f1 f2 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f2 * * part cINSERT f3 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 ! c==> c/\ c= f3 * f1 b0 cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b1 c/\ carc b2 c/\ c= cpathstart b1 f0 c/\ c= cpathfinish b1 f3 c/\ c= cpathstart b2 f3 c/\ c= cpathfinish b2 f0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT f0 * * part cINSERT f3 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- (((\d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) d) ==> F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> * / c/\ c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 f4 cF
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- (arc d)
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 carc f1
- |- ((_576923 = _576924) ==> ((vec _576923) = (vec _576924)))
T c==> c= f0 f1 c= cvec f0 cvec f1
+ (~ (a = b)), (simple_path g), ((pathfinish g) = (pathstart g)) |- ((a IN ((IMAGE g) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> ((b IN ((IMAGE g) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))
T c==> c~ c= f0 f1 c==> csimple_path f2 c==> c= cpathfinish f2 cpathstart f2 c==> cIN f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> cIN f1 * * part cIMAGE f2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f0 c/\ c= cpathfinish b0 f1 c/\ c= cpathstart b1 f1 c/\ c= cpathfinish b1 f0 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2
+ |- (((?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) = (?d. (((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))))
T c= c/\ c? / c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f1 f3 c\/ c~ c= cpathfinish b0 * f1 f2 c\/ c~ c= cpathstart b1 * f1 f2 c\/ c~ c= cpathfinish b1 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c? / c/\ c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (arc u')) ==> (arc u'))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ carc f0 carc f0
- |- ((~ (_576925 = _576926)) \/ ((open_interval _576925) = (open_interval _576926)))
T c\/ c~ c= f0 f1 c= * part copen_interval f0 * part copen_interval f1
- |- (((NUMERAL (BIT1 _0)) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 _0)))
T c= c* cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((arc d) /\ (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ carc f1 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- (~ (arc d)), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ (arc d)) /\ (arc d))
T c==> c~ carc f0 c==> c/\ carc f1 c/\ carc f0 c/\ c= cpathstart f1 * f2 f3 c/\ c= cpathfinish f1 * f2 f4 c/\ c= cpathstart f0 * f2 f4 c/\ c= cpathfinish f0 * f2 f3 c/\ c= * part cpath_image f1 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f0 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 c/\ c~ carc f0 carc f0
+ (simple_path g), (((pathfinish g) = (pathstart g)) /\ ((a IN (path_image g)) /\ ((b IN (path_image g)) /\ (~ (a = b))))) |- (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = a) /\ (((pathfinish u) = b) /\ (((pathstart d) = b) /\ (((pathfinish d) = a) /\ ((((path_image u) INTER (path_image d)) = (a INSERT (b INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))
T c==> csimple_path f0 c==> c/\ c= cpathfinish f0 cpathstart f0 c/\ cIN f1 * part cpath_image f0 c/\ cIN f2 * part cpath_image f0 c~ c= f1 f2 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 f1 c/\ c= cpathfinish b0 f2 c/\ c= cpathstart b1 f2 c/\ c= cpathfinish b1 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0
- |- ((_576942 = _576944) ==> ((~ (_576941 = _576943)) \/ (((IMAGE _576941) _576942) = ((IMAGE _576943) _576944))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= * * part cIMAGE f2 f0 * * part cIMAGE f3 f1
- (_576953 = _576955) |- ((_576954 = _576956) ==> ((_576953 INSERT _576954) = (_576955 INSERT _576956)))
T c==> c= f0 f1 c==> c= f2 f3 c= * * part cINSERT f0 f2 * * part cINSERT f1 f3
+ |- (((!s. (!f. ((y IN ((IMAGE f) s)) = (?x. ((y = (f x)) /\ (x IN s)))))) ==> ((\s. (!f. ((y IN ((IMAGE f) s)) = (?x. ((y = (f x)) /\ (x IN s)))))) s)) = ((\s. (!f. ((y IN ((IMAGE f) s)) = (?x. ((y = (f x)) /\ (x IN s)))))) s))
T c= c==> ! ! c= cIN f0 * * part cIMAGE b1 b0 c? / c/\ c= f0 * b1 b2 cIN b2 b0 * / ! c= cIN f0 * * part cIMAGE b1 b0 c? / c/\ c= f0 * b1 b2 cIN b2 b0 f1 * / ! c= cIN f0 * * part cIMAGE b1 b0 c? / c/\ c= f0 * b1 b2 cIN b2 b0 f1
+ (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ (arc u')) ==> (arc u'))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c~ carc f0 carc f0
- |- ((!d. (P \/ (Q d))) = (P \/ (!d. (Q d))))
T c= ! c\/ f0 * f1 b0 c\/ f0 ! * f1 b0
+ |- (((!v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F))) ==> ((\v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F))) v)) = ((\v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F))) v))
T c= c==> ! ! c==> c~ c==> c? / c? / c/\ carc b2 c/\ carc b3 c/\ c= cpathstart b2 * f0 b1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= cpathstart b3 * f0 b0 c/\ c= cpathfinish b3 * f0 b1 c/\ c= * part cpath_image b2 * * part cIMAGE f0 * part cclosed_interval cCONS c, b1 b0 cNIL c/\ c= * part cpath_image b3 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b1 b0 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 c? / c? / c/\ carc b2 c/\ carc b3 c/\ c= cpathstart b2 * f0 b1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= cpathstart b3 * f0 b0 c/\ c= cpathfinish b3 * f0 b1 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 cF * / ! c==> c~ c==> c? / c? / c/\ carc b2 c/\ carc b3 c/\ c= cpathstart b2 * f0 b1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= cpathstart b3 * f0 b0 c/\ c= cpathfinish b3 * f0 b1 c/\ c= * part cpath_image b2 * * part cIMAGE f0 * part cclosed_interval cCONS c, b1 b0 cNIL c/\ c= * part cpath_image b3 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b1 b0 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 c? / c? / c/\ carc b2 c/\ carc b3 c/\ c= cpathstart b2 * f0 b1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= cpathstart b3 * f0 b0 c/\ c= cpathfinish b3 * f0 b1 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 cF f1 * / ! c==> c~ c==> c? / c? / c/\ carc b2 c/\ carc b3 c/\ c= cpathstart b2 * f0 b1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= cpathstart b3 * f0 b0 c/\ c= cpathfinish b3 * f0 b1 c/\ c= * part cpath_image b2 * * part cIMAGE f0 * part cclosed_interval cCONS c, b1 b0 cNIL c/\ c= * part cpath_image b3 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b1 b0 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 c? / c? / c/\ carc b2 c/\ carc b3 c/\ c= cpathstart b2 * f0 b1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= cpathstart b3 * f0 b0 c/\ c= cpathfinish b3 * f0 b1 c/\ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f0 b1 * * part cINSERT * f0 b0 part cEMPTY c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f0 cF f1
- (~ ((pathstart u') = ((I g) u))), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ ((pathstart u') = ((I g) u))) /\ ((pathstart u') = ((I g) u)))
T c==> c~ c= cpathstart f0 cI f1 f2 c==> c/\ carc f0 c/\ carc f3 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f4 c/\ c= cpathstart f3 * f1 f4 c/\ c= cpathfinish f3 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f4 cNIL c/\ c= * part cpath_image f3 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f3 * * part cINSERT * f1 f2 * * part cINSERT * f1 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f3 * part cpath_image f1 c/\ c~ c= cpathstart f0 cI f1 f2 c= cpathstart f0 cI f1 f2
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((arc _576910) /\ ((arc _576911) /\ (((pathstart _576910) = ((I g) u)) /\ (((pathfinish _576910) = ((I g) v)) /\ (((pathstart _576911) = ((I g) v)) /\ (((pathfinish _576911) = ((I g) u)) /\ ((((path_image _576910) INTER (path_image _576911)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image _576910) UNION (path_image _576911)) = (path_image g))))))))) ==> F)
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c/\ carc f5 c/\ carc f6 c/\ c= cpathstart f5 cI f2 f4 c/\ c= cpathfinish f5 cI f2 f3 c/\ c= cpathstart f6 cI f2 f3 c/\ c= cpathfinish f6 cI f2 f4 c/\ c= * * part cINTER * part cpath_image f5 * part cpath_image f6 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f5 * part cpath_image f6 * part cpath_image f2 cF
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((((path_image d) INTER (path_image u')) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image d) UNION (path_image u')) = (path_image g)))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image f0 * * part cINSERT cI f2 f4 * * part cINSERT cI f2 f3 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- (((!s. ((_576915 INSERT (_576915 INSERT s)) = (_576915 INSERT s))) ==> ((\s. ((_576915 INSERT (_576915 INSERT s)) = (_576915 INSERT s))) _576916)) = ((\s. ((_576915 INSERT (_576915 INSERT s)) = (_576915 INSERT s))) _576916))
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c= c==> ! c= * * part cINSERT f0 * * part cINSERT f0 b0 * * part cINSERT f0 b0 * / c= * * part cINSERT f0 * * part cINSERT f0 b0 * * part cINSERT f0 b0 f1 * / c= * * part cINSERT f0 * * part cINSERT f0 b0 * * part cINSERT f0 b0 f1
- |- ((~ (_576936 = _576938)) \/ ((~ (_576935 = _576937)) \/ (((CONS _576935) _576936) = ((CONS _576937) _576938))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= cCONS f2 f0 cCONS f3 f1
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((((\u. (?d. (((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) u') ==> F) = T)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c= c==> * / c? / c/\ c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b2 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b2 * f0 f2 c\/ c~ c= cpathfinish b2 * f0 f1 c\/ c~ c= cpathstart b2 * f0 f1 c\/ c~ c= cpathfinish b2 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b2 * part cpath_image b2 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b2 * part cpath_image b2 * part cpath_image f0 f3 cF cT
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u)))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4
- (_576927 = _576929) |- ((_576927 = _576929) /\ ((~ (_576928 = _576930)) \/ ((_576927 DIFF _576928) = (_576929 DIFF _576930))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cDIFF f0 f2 * * part cDIFF f1 f3
- |- ((_576947 = _576948) ==> ((pathfinish _576947) = (pathfinish _576948)))
T c==> c= f0 f1 c= cpathfinish f0 cpathfinish f1
+ (~ ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((?u. (?d. (((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))))) ==> F) = F)
T c==> c~ c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c= c==> c? / c? / c/\ c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 ! c\/ c~ carc b2 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b2 * f0 f2 c\/ c~ c= cpathfinish b2 * f0 f1 c\/ c~ c= cpathstart b2 * f0 f1 c\/ c~ c= cpathfinish b2 * f0 f2 c\/ c~ c= * * part cINTER * part cpath_image b2 * part cpath_image b2 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c~ c= * * part cUNION * part cpath_image b2 * part cpath_image b2 * part cpath_image f0 cF cF
+ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))), (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- ((~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) /\ F)
T c==> c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c/\ c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((a = b) ==> (b \/ (~ a)))
T c==> c= f0 f1 c\/ f1 c~ f0
+ (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- (((pathstart u') = ((I g) v)) /\ (((pathfinish u') = ((I g) u)) /\ (((pathstart d) = ((I g) u)) /\ (((pathfinish d) = ((I g) v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = (((I g) v) INSERT (((I g) u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
+ (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- (((!x. (((\d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) x) ==> F)) ==> ((?d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) ==> F)) = ((?d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) ==> F))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c= c==> ! c==> * / c/\ c/\ carc f0 c/\ carc b1 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b1 * f1 f3 c/\ c= cpathfinish b1 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b1 * part cpath_image f1 ! c\/ c~ carc b2 ! c\/ c~ carc b3 c\/ c~ c= cpathstart b2 * f1 f3 c\/ c~ c= cpathfinish b2 * f1 f2 c\/ c~ c= cpathstart b3 * f1 f2 c\/ c~ c= cpathfinish b3 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b2 * part cpath_image b3 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b2 * part cpath_image b3 * part cpath_image f1 b0 cF c==> c? / c/\ c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 cF c==> c? / c/\ c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 cF
+ (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- ((~ (arc _576854)) \/ ((~ (arc _576855)) \/ ((~ ((pathstart _576854) = ((I g) u))) \/ ((~ ((pathfinish _576854) = ((I g) v))) \/ ((~ ((pathstart _576855) = ((I g) v))) \/ ((~ ((pathfinish _576855) = ((I g) u))) \/ ((~ (((path_image _576854) INTER (path_image _576855)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) \/ (~ (((path_image _576854) UNION (path_image _576855)) = (path_image g))))))))))
T c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c\/ c~ carc f3 c\/ c~ carc f4 c\/ c~ c= cpathstart f3 cI f0 f1 c\/ c~ c= cpathfinish f3 cI f0 f2 c\/ c~ c= cpathstart f4 cI f0 f2 c\/ c~ c= cpathfinish f4 cI f0 f1 c\/ c~ c= * * part cINTER * part cpath_image f3 * part cpath_image f4 * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image f3 * part cpath_image f4 * part cpath_image f0
- (!s. (!t. ((s UNION t) = (t UNION s)))) |- ((~ (((path_image u') UNION (path_image d)) = ((path_image d) UNION (path_image u')))) ==> (((path_image u') UNION (path_image d)) = ((path_image d) UNION (path_image u'))))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * * part cUNION * part cpath_image f1 * part cpath_image f0 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * * part cUNION * part cpath_image f1 * part cpath_image f0
+ |- (((!g. (!v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)))) ==> ((\g. (!v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)))) g)) = ((\g. (!v. (!u. ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)))) g))
T c= c==> ! ! ! c==> c~ c==> c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * part cpath_image b3 * * part cIMAGE b0 * part cclosed_interval cCONS c, b2 b1 cNIL c/\ c= * part cpath_image b4 * * part cIMAGE b0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b2 b1 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 cF * / ! ! c==> c~ c==> c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * part cpath_image b3 * * part cIMAGE b0 * part cclosed_interval cCONS c, b2 b1 cNIL c/\ c= * part cpath_image b4 * * part cIMAGE b0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b2 b1 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 cF f0 * / ! ! c==> c~ c==> c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * part cpath_image b3 * * part cIMAGE b0 * part cclosed_interval cCONS c, b2 b1 cNIL c/\ c= * part cpath_image b4 * * part cIMAGE b0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b2 b1 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 c? / c? / c/\ carc b3 c/\ carc b4 c/\ c= cpathstart b3 * b0 b2 c/\ c= cpathfinish b3 * b0 b1 c/\ c= cpathstart b4 * b0 b1 c/\ c= cpathfinish b4 * b0 b2 c/\ c= * * part cINTER * part cpath_image b3 * part cpath_image b4 * * part cINSERT * b0 b2 * * part cINSERT * b0 b1 part cEMPTY c= * * part cUNION * part cpath_image b3 * part cpath_image b4 * part cpath_image b0 cF f0
+ ((\d. ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))))))) d) |- ((((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) ==> F) = F)
T c==> * / c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 f4 c= c==> c/\ carc f0 c/\ carc f4 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart f4 * f1 f3 c/\ c= cpathfinish f4 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image f4 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f4 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f4 * part cpath_image f1 cF cF
- (~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) /\ F)
T c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c/\ c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF
+ (!s. (!t. ((s INTER t) = (t INTER s)))) |- ((\s. (!t. ((s INTER t) = (t INTER s)))) _576908)
T c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 * / ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 f0
+ ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((((pathstart u') = ((I g) u)) /\ (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))) = ((arc d) /\ (((pathstart u') = ((I g) u)) /\ (((pathfinish u') = ((I g) v)) /\ (((pathstart d) = ((I g) v)) /\ (((pathfinish d) = ((I g) u)) /\ ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ carc f1 c/\ c= cpathstart f0 cI f2 f3 c/\ c= cpathfinish f0 cI f2 f4 c/\ c= cpathstart f1 cI f2 f4 c/\ c= cpathfinish f1 cI f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- |- (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0)))))
T c= creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0
- |- ((((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F) ==> ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F)) = ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> F))
T c= c==> c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 cF
- (_576931 = _576933) |- ((_576931 = _576933) /\ ((~ (_576932 = _576934)) \/ ((_576931 , _576932) = (_576933 , _576934))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= c, f0 f2 c, f1 f3
+ |- ((!u. ((?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) = T)
T c= ! c==> c? / c/\ carc b1 c? / c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * part cpath_image b1 * * part cIMAGE f0 * part cclosed_interval cCONS c, b0 f1 cNIL c/\ c= * part cpath_image b2 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, b0 f1 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 c? / c/\ carc b1 c? / c/\ carc b2 c/\ c= cpathstart b1 * f0 b0 c/\ c= cpathfinish b1 * f0 f1 c/\ c= cpathstart b2 * f0 f1 c/\ c= cpathfinish b2 * f0 b0 c/\ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f0 b0 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f0 cT
+ |- ((\s. (!f. ((y IN ((IMAGE f) s)) = (?x. ((y = (f x)) /\ (x IN s)))))) s)
T * / ! c= cIN f0 * * part cIMAGE b1 b0 c? / c/\ c= f0 * b1 b2 cIN b2 b0 f1
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (((path_image u') UNION (path_image d)) = (path_image g))) ==> (((path_image u') UNION (path_image d)) = (path_image g)))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!u'. ((~ (arc u')) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) = ((!u. (~ (arc u))) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))
T c= ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart f0 * f1 f2 c\/ c~ c= cpathfinish f0 * f1 f3 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f0 * part cpath_image b1 * part cpath_image f1 c\/ ! c~ carc b0 ! c\/ c~ carc b0 c\/ c~ c= cpathstart f0 * f1 f2 c\/ c~ c= cpathfinish f0 * f1 f3 c\/ c~ c= cpathstart b0 * f1 f3 c\/ c~ c= cpathfinish b0 * f1 f2 c\/ c~ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ ((pathstart d) = ((I g) v))) ==> ((pathstart d) = ((I g) v)))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c~ c= cpathstart f1 cI f2 f4 c= cpathstart f1 cI f2 f4
- (_576923 = _576924) |- ((_576923 = _576924) /\ ((vec _576923) = (vec _576924)))
T c==> c= f0 f1 c/\ c= f0 f1 c= cvec f0 cvec f1
- |- ((_576963 = _576965) ==> ((~ (_576964 = _576966)) \/ ((_576963 UNION _576964) = (_576965 UNION _576966))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= * * part cUNION f0 f2 * * part cUNION f1 f3
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL))))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL
- (_576959 = _576961), (_576960 = _576962) |- ((_576960 = _576962) /\ ((_576959 INTER _576960) = (_576961 INTER _576962)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f2 f3 c= * * part cINTER f0 f2 * * part cINTER f1 f3
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ (((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) ==> (((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c~ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY
- (~ (arc u')), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (arc u')) /\ (arc u'))
T c==> c~ carc f0 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c/\ c~ carc f0 carc f0
- |- ((?d'. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d') = (g v)) /\ (((pathfinish d') = (g u)) /\ ((((path_image u) INTER (path_image d')) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d')) = (path_image g))))))))) = ((arc d) /\ (?d. (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))
T c= c? / c/\ carc f0 c/\ c= cpathstart f1 * f2 f3 c/\ c= cpathfinish f1 * f2 f4 c/\ c= cpathstart b0 * f2 f4 c/\ c= cpathfinish b0 * f2 f3 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image b0 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image b0 * part cpath_image f2 c/\ carc f0 c? / c/\ c= cpathstart f1 * f2 f3 c/\ c= cpathfinish f1 * f2 f4 c/\ c= cpathstart b0 * f2 f4 c/\ c= cpathfinish b0 * f2 f3 c/\ c= * * part cINTER * part cpath_image f1 * part cpath_image b0 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f1 * part cpath_image b0 * part cpath_image f2
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((((path_image u') UNION (path_image d)) = (path_image g)) = ((((path_image u') INTER (path_image d)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT cI f2 f3 * * part cINSERT cI f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (arc d)) ==> (arc d))
T c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ carc f1 carc f1
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (_576942 = _576944), (_576941 = _576943) |- ((_576941 = _576943) /\ (((IMAGE _576941) _576942) = ((IMAGE _576943) _576944)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f2 f3 c= * * part cIMAGE f2 f0 * * part cIMAGE f3 f1
- |- ((!t. (P t)) = ((P T) /\ (P F)))
T c= ! * f0 b0 c/\ * f0 cT * f0 cF
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((~ ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY)))) ==> ((((I g) v) INSERT (((I g) u) INSERT EMPTY)) = (((I g) u) INSERT (((I g) v) INSERT EMPTY))))
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c==> c~ c= * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY * * part cINSERT cI f0 f2 * * part cINSERT cI f0 f1 part cEMPTY c= * * part cINSERT cI f0 f1 * * part cINSERT cI f0 f2 part cEMPTY * * part cINSERT cI f0 f2 * * part cINSERT cI f0 f1 part cEMPTY
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- (_576950 = _576952) |- ((_576949 = _576951) ==> (((I _576949) _576950) = ((I _576951) _576952)))
T c==> c= f0 f1 c==> c= f2 f3 c= cI f2 f0 cI f3 f1
- (?d. ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))))))), (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- F
T c==> c? / c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f1 f2 c/\ c= cpathfinish b0 * f1 f3 c/\ c= cpathstart b1 * f1 f3 c/\ c= cpathfinish b1 * f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 cF
- (_576953 = _576955) |- ((_576953 = _576955) /\ ((~ (_576954 = _576956)) \/ ((_576953 INSERT _576954) = (_576955 INSERT _576956))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cINSERT f0 f2 * * part cINSERT f1 f3
- (~ ((pathstart d) = ((I g) u))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ ((pathstart d) = ((I g) u))) /\ ((pathstart d) = ((I g) u)))
T c==> c~ c= cpathstart f0 cI f1 f2 c==> c/\ c/\ carc f3 c/\ carc f0 c/\ c= cpathstart f3 * f1 f4 c/\ c= cpathfinish f3 * f1 f2 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f4 c/\ c= * part cpath_image f3 * * part cIMAGE f1 * part cclosed_interval cCONS c, f4 f2 cNIL c/\ c= * part cpath_image f0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f4 f2 c/\ c= * * part cINTER * part cpath_image f3 * part cpath_image f0 * * part cINSERT * f1 f4 * * part cINSERT * f1 f2 part cEMPTY c= * * part cUNION * part cpath_image f3 * part cpath_image f0 * part cpath_image f1 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f1 f2 c\/ c~ c= cpathfinish b0 * f1 f4 c\/ c~ c= cpathstart b1 * f1 f4 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f4 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c/\ c~ c= cpathstart f0 cI f1 f2 c= cpathstart f0 cI f1 f2
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- (_576939 = _576940) |- ((_576939 = _576940) /\ ((closed_interval _576939) = (closed_interval _576940)))
T c==> c= f0 f1 c/\ c= f0 f1 c= * part cclosed_interval f0 * part cclosed_interval f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (_576927 = _576929) |- ((_576928 = _576930) ==> ((_576927 DIFF _576928) = (_576929 DIFF _576930)))
T c==> c= f0 f1 c==> c= f2 f3 c= * * part cDIFF f0 f2 * * part cDIFF f1 f3
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ ((pathstart u') = ((I g) u))) ==> ((pathstart u') = ((I g) u)))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c~ c= cpathstart f0 cI f2 f3 c= cpathstart f0 cI f2 f3
- (_576917 = _576918) |- ((((arc _576917) = (arc _576918)) ==> ((arc _576918) \/ (~ (arc _576917)))) = ((arc _576918) \/ (~ (arc _576917))))
T c==> c= f0 f1 c= c==> c= carc f0 carc f1 c\/ carc f1 c~ carc f0 c\/ carc f1 c~ carc f0
- |- ((_576939 = _576940) ==> ((closed_interval _576939) = (closed_interval _576940)))
T c==> c= f0 f1 c= * part cclosed_interval f0 * part cclosed_interval f1
- (!s. (!t. ((s UNION t) = (t UNION s)))), (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) |- ((~ (((path_image d) UNION (path_image u')) = (path_image g))) ==> (((path_image d) UNION (path_image u')) = (path_image g)))
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> c/\ c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 ! c\/ c~ carc b0 ! c\/ c~ carc b1 c\/ c~ c= cpathstart b0 * f2 f4 c\/ c~ c= cpathfinish b0 * f2 f3 c\/ c~ c= cpathstart b1 * f2 f3 c\/ c~ c= cpathfinish b1 * f2 f4 c\/ c~ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f2 f4 * * part cINSERT * f2 f3 part cEMPTY c~ c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f2 c==> c~ c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2 c= * * part cUNION * part cpath_image f1 * part cpath_image f0 * part cpath_image f2
- |- ((~ (_576923 = _576924)) \/ ((vec _576923) = (vec _576924)))
T c\/ c~ c= f0 f1 c= cvec f0 cvec f1
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v)))))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4
- (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))) |- ((real_gt ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v)))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- ((_576957 = _576958) ==> ((path_image _576957) = (path_image _576958)))
T c==> c= f0 f1 c= * part cpath_image f0 * part cpath_image f1
- ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- (!s. ((_576915 INSERT (_576915 INSERT s)) = (_576915 INSERT s)))
T c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 ! c= * * part cINSERT f0 * * part cINSERT f0 b0 * * part cINSERT f0 b0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> ((!y. (!x. (!s. (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F)))) ==> ((~ ((?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g v)) /\ (((pathfinish u) = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u) = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u) INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> (?u. (?d. ((arc u) /\ ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g))))))))))))) ==> ((!y. (!x. (!s. (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))))) ==> ((!s. (!t. ((s UNION t) = (t UNION s)))) ==> ((!s. (!t. ((s INTER t) = (t INTER s)))) ==> F)))))
T c==> c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> ! ! ! c/\ c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 c= * * part cINSERT b1 * * part cINSERT b1 b2 * * part cINSERT b1 b2 c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 cF c==> c~ c==> c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f1 c/\ c= cpathfinish b0 * f0 f2 c/\ c= cpathstart b1 * f0 f2 c/\ c= cpathfinish b1 * f0 f1 c/\ c= * part cpath_image b0 * * part cIMAGE f0 * part cclosed_interval cCONS c, f1 f2 cNIL c/\ c= * part cpath_image b1 * * part cIMAGE f0 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f1 * * part cINSERT * f0 f2 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c? / c? / c/\ carc b0 c/\ carc b1 c/\ c= cpathstart b0 * f0 f2 c/\ c= cpathfinish b0 * f0 f1 c/\ c= cpathstart b1 * f0 f1 c/\ c= cpathfinish b1 * f0 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f0 f2 * * part cINSERT * f0 f1 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f0 c==> ! ! ! c/\ c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 c= * * part cINSERT b1 * * part cINSERT b1 b2 * * part cINSERT b1 b2 c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 cF
- (!s. (!t. ((s UNION t) = (t UNION s)))), (!s. (!t. ((s INTER t) = (t INTER s)))), (?d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))), ((!y. (!x. (!s. ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))))) /\ (!x. (!s. ((x INSERT (x INSERT s)) = (x INSERT s))))) |- ((?d. (((arc u') /\ ((arc d) /\ (((pathstart u') = (g v)) /\ (((pathfinish u') = (g u)) /\ (((pathstart d) = (g u)) /\ (((pathfinish d) = (g v)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (v , u)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (v , u))))) /\ ((((path_image u') INTER (path_image d)) = ((g v) INSERT ((g u) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) /\ (!u. ((~ (arc u)) \/ (!d. ((~ (arc d)) \/ ((~ ((pathstart u) = (g u))) \/ ((~ ((pathfinish u) = (g v))) \/ ((~ ((pathstart d) = (g v))) \/ ((~ ((pathfinish d) = (g u))) \/ ((~ (((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY)))) \/ (~ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))))) /\ F)
T c==> ! ! c= * * part cUNION b0 b1 * * part cUNION b1 b0 c==> ! ! c= * * part cINTER b0 b1 * * part cINTER b1 b0 c==> c? / c/\ c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 c==> c/\ ! ! ! c= * * part cINSERT b1 * * part cINSERT b0 b2 * * part cINSERT b0 * * part cINSERT b1 b2 ! ! c= * * part cINSERT b0 * * part cINSERT b0 b1 * * part cINSERT b0 b1 c/\ c? / c/\ c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 ! c\/ c~ carc b1 ! c\/ c~ carc b2 c\/ c~ c= cpathstart b1 * f1 f3 c\/ c~ c= cpathfinish b1 * f1 f2 c\/ c~ c= cpathstart b2 * f1 f2 c\/ c~ c= cpathfinish b2 * f1 f3 c\/ c~ c= * * part cINTER * part cpath_image b1 * part cpath_image b2 * * part cINSERT * f1 f3 * * part cINSERT * f1 f2 part cEMPTY c~ c= * * part cUNION * part cpath_image b1 * part cpath_image b2 * part cpath_image f1 cF
- (?d. ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))))))), (~ (?u. ((arc u) /\ (?d. ((arc d) /\ (((pathstart u) = (g u)) /\ (((pathfinish u) = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ ((((path_image u) INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u) UNION (path_image d)) = (path_image g)))))))))))) |- ((?d. ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))))))))))) /\ F)
T c==> c? / c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 c==> c~ c? / c/\ carc b0 c? / c/\ carc b1 c/\ c= cpathstart b0 * f1 f2 c/\ c= cpathfinish b0 * f1 f3 c/\ c= cpathstart b1 * f1 f3 c/\ c= cpathfinish b1 * f1 f2 c/\ c= * * part cINTER * part cpath_image b0 * part cpath_image b1 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image b0 * part cpath_image b1 * part cpath_image f1 c/\ c? / c/\ carc f0 c/\ carc b0 c/\ c= cpathstart f0 * f1 f2 c/\ c= cpathfinish f0 * f1 f3 c/\ c= cpathstart b0 * f1 f3 c/\ c= cpathfinish b0 * f1 f2 c/\ c= * part cpath_image f0 * * part cIMAGE f1 * part cclosed_interval cCONS c, f2 f3 cNIL c/\ c= * part cpath_image b0 * * part cIMAGE f1 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f2 f3 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image b0 * * part cINSERT * f1 f2 * * part cINSERT * f1 f3 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image b0 * part cpath_image f1 cF
- (_576931 = _576933) |- ((_576932 = _576934) ==> ((_576931 , _576932) = (_576933 , _576934)))
T c==> c= f0 f1 c==> c= f2 f3 c= c, f0 f2 c, f1 f3
- |- (((real_mul (real_neg (real_of_num m))) (real_of_num n)) = (real_neg (real_of_num (m * n))))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num f1 creal_neg creal_of_num c* f0 f1
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ ((pathfinish d) = ((I g) u))) ==> ((pathfinish d) = ((I g) u)))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c~ c= cpathfinish f1 cI f2 f3 c= cpathfinish f1 cI f2 f3
- (((real_gt ((real_add (drop u)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop v)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_gt ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v))) (real_of_num (NUMERAL _0)))) ==> ((real_gt ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v)))) (real_of_num (NUMERAL _0)))) = ((real_gt ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (drop u))) (drop v)))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt creal_add cdrop f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_gt creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0 creal_gt creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 cdrop f1 creal_of_num cNUMERAL c_0
- |- ((~ (_576947 = _576948)) \/ ((pathfinish _576947) = (pathfinish _576948)))
T c\/ c~ c= f0 f1 c= cpathfinish f0 cpathfinish f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (_576942 = _576944) |- ((_576941 = _576943) ==> (((IMAGE _576941) _576942) = ((IMAGE _576943) _576944)))
T c==> c= f0 f1 c==> c= f2 f3 c= * * part cIMAGE f2 f0 * * part cIMAGE f3 f1
- |- ((_576945 = _576946) ==> ((pathstart _576945) = (pathstart _576946)))
T c==> c= f0 f1 c= cpathstart f0 cpathstart f1
- |- ((?u. ((P u) /\ Q)) = ((?u. (P u)) /\ Q))
T c= c? / c/\ * f0 b0 f1 c/\ c? / * f0 b0 f1
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((~ (_576942 = _576944)) \/ ((~ (_576941 = _576943)) \/ (((IMAGE _576941) _576942) = ((IMAGE _576943) _576944))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cIMAGE f2 f0 * * part cIMAGE f3 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ (((path_image u') UNION (path_image d)) = (path_image g))), ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ (((path_image u') UNION (path_image d)) = (path_image g))) /\ (((path_image u') UNION (path_image d)) = (path_image g)))
T c==> c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c/\ c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- ((arc u') /\ ((arc d) /\ (((pathstart u') = (g u)) /\ (((pathfinish u') = (g v)) /\ (((pathstart d) = (g v)) /\ (((pathfinish d) = (g u)) /\ (((path_image u') = ((IMAGE g) (closed_interval ((CONS (u , v)) NIL)))) /\ (((path_image d) = ((IMAGE g) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) DIFF (open_interval (u , v))))) /\ ((((path_image u') INTER (path_image d)) = ((g u) INSERT ((g v) INSERT EMPTY))) /\ (((path_image u') UNION (path_image d)) = (path_image g))))))))))) |- ((~ (((path_image u') UNION (path_image d)) = (path_image g))) ==> (((path_image u') UNION (path_image d)) = (path_image g)))
T c==> c/\ carc f0 c/\ carc f1 c/\ c= cpathstart f0 * f2 f3 c/\ c= cpathfinish f0 * f2 f4 c/\ c= cpathstart f1 * f2 f4 c/\ c= cpathfinish f1 * f2 f3 c/\ c= * part cpath_image f0 * * part cIMAGE f2 * part cclosed_interval cCONS c, f3 f4 cNIL c/\ c= * part cpath_image f1 * * part cIMAGE f2 * * part cDIFF * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part copen_interval c, f3 f4 c/\ c= * * part cINTER * part cpath_image f0 * part cpath_image f1 * * part cINSERT * f2 f3 * * part cINSERT * f2 f4 part cEMPTY c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c==> c~ c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2 c= * * part cUNION * part cpath_image f0 * part cpath_image f1 * part cpath_image f2
- (_576950 = _576952) |- ((_576950 = _576952) /\ ((~ (_576949 = _576951)) \/ (((I _576949) _576950) = ((I _576951) _576952))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= cI f2 f0 cI f3 f1
