N Vol1.measure_ccube
C |- (!x. ((measure (ccube x)) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= cmeasure * part cccube f0 creal_of_num cNUMERAL cBIT1 c_0
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D COND_EXPAND
A |- (!b. (!t1. (!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2))))))
T c= cCOND f0 f1 f2 c/\ c\/ c~ f0 f1 c\/ f0 f2
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D EXP_2
A |- (!n. ((n EXP (NUMERAL (BIT0 (BIT1 _0)))) = (n * n)))
T c= cEXP f0 cNUMERAL cBIT0 cBIT1 c_0 c* f0 f0
D LE_REFL
A |- (!n. (n <= n))
T c<= f0 f0
D LE_ADD
A |- (!m. (!n. (m <= (m + n))))
T c<= f0 c+ f0 f1
D ARITH_ZERO
A |- (((NUMERAL (NUMERAL _0)) = (NUMERAL _0)) /\ ((BIT0 _0) = _0))
T c/\ c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0 c= cBIT0 c_0 c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D ARITH_MULT
A |- ((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) /\ (((_0 * _0) = _0) /\ ((!n. ((_0 * (BIT0 n)) = _0)) /\ ((!n. ((_0 * (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))))))
T c/\ ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 c/\ c= c* c_0 c_0 c_0 c/\ ! c= c* c_0 cBIT0 b0 c_0 c/\ ! c= c* c_0 cBIT1 b0 c_0 c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
D ARITH_EXP
A |- ((!m. (!n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n))))) /\ (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))))))
T c/\ ! ! c= cEXP cNUMERAL b0 cNUMERAL b1 cNUMERAL cEXP b0 b1 c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D CART_EQ
A |- (!x. (!y. ((x = y) = (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((x $ i) = (y $ i)))))))
T c= c= f0 f1 ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ f0 b0 c$ f1 b0
D LAMBDA_BETA
A |- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda f1 f0 * f1 f0
D DIMINDEX_3
A |- ((dimindex UNIV) = (NUMERAL (BIT1 (BIT1 _0))))
T c= cdimindex part cUNIV cNUMERAL cBIT1 cBIT1 c_0
D vector_add
A |- (!x. (!y. (((vector_add x) y) = (lambdai. ((real_add (x $ i)) (y $ i))))))
T c= cvector_add f0 f1 clambda / creal_add c$ f0 b0 c$ f1 b0
D vector_sub
A |- (!x. (!y. (((vector_sub x) y) = (lambdai. ((real_sub (x $ i)) (y $ i))))))
T c= cvector_sub f0 f1 clambda / creal_sub c$ f0 b0 c$ f1 b0
D VECTOR_SUB_COMPONENT
A |- (!x. (!y. (!i. ((((vector_sub x) y) $ i) = ((real_sub (x $ i)) (y $ i))))))
T c= c$ cvector_sub f0 f1 f2 creal_sub c$ f0 f2 c$ f1 f2
D content
A |- (!s. ((content s) = (((COND (s = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound s) $ i)) ((interval_lowerbound s) $ i)))))))
T c= ccontent f0 cCOND c= f0 part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound f0 b0 c$ cinterval_lowerbound f0 b0
D MEASURE_INTERVAL
A |- ((!a. (!b. ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL)))))) /\ (!a. (!b. ((measure (open_interval (a , b))) = (content (closed_interval ((CONS (a , b)) NIL)))))))
T c/\ ! ! c= cmeasure * part cclosed_interval cCONS c, b0 b1 cNIL ccontent * part cclosed_interval cCONS c, b0 b1 cNIL ! ! c= cmeasure * part copen_interval c, b0 b1 ccontent * part cclosed_interval cCONS c, b0 b1 cNIL
D Vol1.non_empty_cinterval
A |- (!x. (~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)))
T c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY
D Vol1.product_3
A |- (!f. (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) f) = ((real_mul (f (NUMERAL (BIT1 _0)))) ((real_mul (f (NUMERAL (BIT0 (BIT1 _0))))) (f (NUMERAL (BIT1 (BIT1 _0))))))))
T c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 creal_mul * f0 cNUMERAL cBIT1 c_0 creal_mul * f0 cNUMERAL cBIT0 cBIT1 c_0 * f0 cNUMERAL cBIT1 cBIT1 c_0
D Vol1.interval_upper_lowerbound
A |- (!x. (((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) /\ ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = x)))
T c/\ c= cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 c= cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
D Vol1.ccube_eq_interval
A |- (!x. ((ccube x) = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))))
T c= * part cccube f0 * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL
- ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) |- (EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))
T c==> c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL
- |- ((((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) = ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))
T c= c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
+ |- (((!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) ==> ((\P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) P)) = ((\P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) P))
T c= c==> ! c==> c~ c= c= cCOND b0 f0 f1 creal_of_num cNUMERAL cBIT1 c_0 cCOND b0 c= f0 creal_of_num cNUMERAL cBIT1 c_0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 cF * / c==> c~ c= c= cCOND b0 f0 f1 creal_of_num cNUMERAL cBIT1 c_0 cCOND b0 c= f0 creal_of_num cNUMERAL cBIT1 c_0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 cF f2 * / c==> c~ c= c= cCOND b0 f0 f1 creal_of_num cNUMERAL cBIT1 c_0 cCOND b0 c= f0 creal_of_num cNUMERAL cBIT1 c_0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 cF f2
+ |- ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = x)
T c= cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
- (~ (((real_sub ((real_add (a $ i)) (b $ i))) (a $ i)) = (b $ i))) |- (((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) \/ ((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))))
T c==> c~ c= creal_sub creal_add c$ f0 f1 c$ f2 f1 c$ f0 f1 c$ f2 f1 c\/ creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ |- (((P = T) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T)) = (((P = F) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T)) /\ ((P = T) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T))))
T c= c==> c= f0 cT c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT c/\ c==> c= f0 cF c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT c==> c= f0 cT c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT
- (~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) |- ((EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = F)
T c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cF
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
- (x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) |- ((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) /\ (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))
T c==> cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
- (~ (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (real_of_num (NUMERAL (BIT1 _0))))) |- ((~ (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (real_of_num (NUMERAL (BIT1 _0))))) /\ F)
T c==> c~ c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c/\ c~ c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = (g i)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) g)))
T c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 * f1 b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV f1
- |- ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\x. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))))
T c==> ! c==> cIN b0 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
- |- (T = (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 _0))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT0 (BIT1 _0)))) /\ (((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ ((NUMERAL (BIT1 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))))))
T c= cT c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
+ |- (((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) e')))) = (((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) e'))))
T c= c==> c==> c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 f1 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f1 c==> c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 f1 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f1
- |- (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = T)
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 cT
- |- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
+ |- ((((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) \/ ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) \/ (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c/\ c\/ c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c\/ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
- (x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) |- ((x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) /\ (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))
T c==> cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
- (~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) |- ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) /\ F)
T c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 c/\ c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
+ |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c= c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
+ |- (((!x. (((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) /\ ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = x))) ==> ((\x. (((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) /\ ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = x))) x)) = ((\x. (((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) /\ ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = x))) x))
T c= c==> ! c/\ c= cinterval_upperbound * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 c= cinterval_lowerbound * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 * / c/\ c= cinterval_upperbound * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 c= cinterval_lowerbound * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 f0 * / c/\ c= cinterval_upperbound * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 c= cinterval_lowerbound * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 f0
+ |- ((t \/ T) = T)
T c= c\/ f0 cT cT
- |- ((~ (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (real_of_num (NUMERAL (BIT1 _0))))) ==> F)
T c==> c~ c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((P = T) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T))
T c==> c= f0 cT c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT
- ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) |- (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) /\ ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))
T c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c/\ c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
- ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) |- ((((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))
T c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- (((!x. (!f. (!s. ((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f)))))))) ==> ((\x. (!f. (!s. ((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f)))))))) x)) = ((\x. (!f. (!s. ((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f)))))))) x))
T c= c==> ! ! ! c==> cFINITE b2 c= cproduct * * part cINSERT b0 b2 b1 cCOND cIN b0 b2 cproduct b2 b1 creal_mul * b1 b0 cproduct b2 b1 * / ! ! c==> cFINITE b2 c= cproduct * * part cINSERT b0 b2 b1 cCOND cIN b0 b2 cproduct b2 b1 creal_mul * b1 b0 cproduct b2 b1 f0 * / ! ! c==> cFINITE b2 c= cproduct * * part cINSERT b0 b2 b1 cCOND cIN b0 b2 cproduct b2 b1 creal_mul * b1 b0 cproduct b2 b1 f0
+ |- (((!f. (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) f) = ((real_mul (f (NUMERAL (BIT1 _0)))) ((real_mul (f (NUMERAL (BIT0 (BIT1 _0))))) (f (NUMERAL (BIT1 (BIT1 _0)))))))) ==> ((\f. (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) f) = ((real_mul (f (NUMERAL (BIT1 _0)))) ((real_mul (f (NUMERAL (BIT0 (BIT1 _0))))) (f (NUMERAL (BIT1 (BIT1 _0)))))))) (\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i)))) = ((\f. (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) f) = ((real_mul (f (NUMERAL (BIT1 _0)))) ((real_mul (f (NUMERAL (BIT0 (BIT1 _0))))) (f (NUMERAL (BIT1 (BIT1 _0)))))))) (\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i))))
T c= c==> ! c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 creal_mul * b0 cNUMERAL cBIT1 c_0 creal_mul * b0 cNUMERAL cBIT0 cBIT1 c_0 * b0 cNUMERAL cBIT1 cBIT1 c_0 * / c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 creal_mul * b0 cNUMERAL cBIT1 c_0 creal_mul * b0 cNUMERAL cBIT0 cBIT1 c_0 * b0 cNUMERAL cBIT1 cBIT1 c_0 / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 * / c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 creal_mul * b0 cNUMERAL cBIT1 c_0 creal_mul * b0 cNUMERAL cBIT0 cBIT1 c_0 * b0 cNUMERAL cBIT1 cBIT1 c_0 / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
+ |- ((\b. (!t1. (!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2)))))) b)
T * / ! ! c= cCOND b0 b1 b2 c/\ c\/ c~ b0 b1 c\/ b0 b2 f0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- |- ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))))
T c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
- |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 _0))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT0 (BIT1 _0)))) /\ (((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ ((NUMERAL (BIT1 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))))))))
T c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((a ==> (b ==> c)) ==> ((a ==> b) ==> (a ==> c)))
T c==> c==> f0 c==> f1 f2 c==> c==> f0 f1 c==> f0 f2
- |- (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\x. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)))))
T c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
+ |- ((\g'. (!t'. (!e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY b0 c==> c==> b0 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 creal_of_num cNUMERAL cBIT1 c_0 b2 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 creal_of_num cNUMERAL cBIT1 c_0 cCOND b0 b1 b2 f1
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
+ |- ((\P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) P)
T * / c==> c~ c= c= cCOND b0 f0 f1 creal_of_num cNUMERAL cBIT1 c_0 cCOND b0 c= f0 creal_of_num cNUMERAL cBIT1 c_0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 cF f2
+ |- (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambdai. ((real_sub ((lambdai. ((real_add (a $ i)) (b $ i))) $ i)) (a $ i))) $ i) = (b $ i))) = ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((vector_sub ((vector_add a) b)) a) $ i) = (b $ i))))
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda / creal_sub c$ clambda / creal_add c$ f1 b1 c$ f2 b1 b0 c$ f1 b0 f0 c$ f2 f0 c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ cvector_sub cvector_add f1 f2 f1 f0 c$ f2 f0
- (x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) |- ((x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) = T)
T c==> cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV cT
+ |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 _0))) /\ ((NUMERAL (BIT1 _0)) <= (dimindex UNIV)))
T c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 c<= cNUMERAL cBIT1 c_0 cdimindex part cUNIV
- |- ((\g. ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = (g x)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) g)))) g)
T * / c==> ! c==> cIN b1 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV b0 f1
+ |- ((\x. (~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY))) x)
T * / c~ c= * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f0
+ |- (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))
T c= creal_sub c$ f0 f1 c$ f2 f1 c$ cvector_sub f0 f2 f1
+ |- (((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i)))) ==> ((\i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i)))) i)) = ((\i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i)))) i))
T c= c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ clambda f0 b0 * f0 b0 * / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ clambda f0 b0 * f0 b0 f1 * / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ clambda f0 b0 * f0 b0 f1
- |- ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 _0)))
T c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
- (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- (((NUMERAL (BIT1 _0)) <= i) = T)
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c<= cNUMERAL cBIT1 c_0 f0 cT
- |- (((real_add (real_of_num m)) (real_neg (real_of_num m))) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_of_num f0 creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0
+ |- (((!i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))) ==> ((\i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))) i)) = ((\i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))) i))
T c= c==> ! c= creal_sub c$ f0 b0 c$ f1 b0 c$ cvector_sub f0 f1 b0 * / c= creal_sub c$ f0 b0 c$ f1 b0 c$ cvector_sub f0 f1 b0 f2 * / c= creal_sub c$ f0 b0 c$ f1 b0 c$ cvector_sub f0 f1 b0 f2
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
- |- (((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f))))) = T)
T c= c==> cFINITE f0 c= cproduct * * part cINSERT f1 f0 f2 cCOND cIN f1 f0 cproduct f0 f2 creal_mul * f2 f1 cproduct f0 f2 cT
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
- |- (((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)))) = T)
T c= c==> cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 cT
+ |- (!x. ((measure (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= cmeasure * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL creal_of_num cNUMERAL cBIT1 c_0
- ((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) |- (((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) /\ F)
T c==> creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 cF
+ |- ((\t1. (!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2))))) t1)
T * / ! c= cCOND f0 b0 b1 c/\ c\/ c~ f0 b0 c\/ f0 b1 f1
+ |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
+ |- (((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT0 (BIT1 _0)))) = ((\i. (real_of_num (NUMERAL (BIT1 _0)))) (NUMERAL (BIT0 (BIT1 _0)))))
T c= c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 * / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
+ |- (((!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2)))) ==> ((\t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2)))) t2)) = ((\t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2)))) t2))
T c= c==> ! c= cCOND f0 f1 b0 c/\ c\/ c~ f0 f1 c\/ f0 b0 * / c= cCOND f0 f1 b0 c/\ c\/ c~ f0 f1 c\/ f0 b0 f2 * / c= cCOND f0 f1 b0 c/\ c\/ c~ f0 f1 c\/ f0 b0 f2
- |- (((!f. (!s. ((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f))))))) ==> ((\f. (!s. ((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f))))))) f)) = ((\f. (!s. ((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f))))))) f))
T c= c==> ! ! c==> cFINITE b1 c= cproduct * * part cINSERT f0 b1 b0 cCOND cIN f0 b1 cproduct b1 b0 creal_mul * b0 f0 cproduct b1 b0 * / ! c==> cFINITE b1 c= cproduct * * part cINSERT f0 b1 b0 cCOND cIN f0 b1 cproduct b1 b0 creal_mul * b0 f0 cproduct b1 b0 f1 * / ! c==> cFINITE b1 c= cproduct * * part cINSERT f0 b1 b0 cCOND cIN f0 b1 cproduct b1 b0 creal_mul * b0 f0 cproduct b1 b0 f1
- |- (((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))))) = (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))))
T c= c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
- (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) /\ (((lambda g) $ i) = (g i)))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c/\ c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda f1 f0 * f1 f0
- |- (!x. ((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)))))
T c==> cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
+ |- (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ ((NUMERAL (BIT1 (BIT1 _0))) <= (dimindex UNIV))) ==> (((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 (BIT1 _0)))) = ((\i. (real_of_num (NUMERAL (BIT1 _0)))) (NUMERAL (BIT1 (BIT1 _0)))))) = (((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 (BIT1 _0)))) = ((\i. (real_of_num (NUMERAL (BIT1 _0)))) (NUMERAL (BIT1 (BIT1 _0))))))
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cNUMERAL cBIT1 cBIT1 c_0 cdimindex part cUNIV c= c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 * / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 * / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((!x. ((measure (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = (real_of_num (NUMERAL (BIT1 _0))))) = (!x. ((measure (ccube x)) = (real_of_num (NUMERAL (BIT1 _0))))))
T c= ! c= cmeasure * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL creal_of_num cNUMERAL cBIT1 c_0 ! c= cmeasure * part cccube b0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((~ (EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) ==> ((EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = F)) = ((EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = F))
T c= c==> c~ c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL c= c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cF c= c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cF
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
- |- ((measure (open_interval (a , b))) = (content (closed_interval ((CONS (a , b)) NIL))))
T c= cmeasure * part copen_interval c, f0 f1 ccontent * part cclosed_interval cCONS c, f0 f1 cNIL
+ |- (((!e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))) ==> ((\e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))) e')) = ((\e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 c==> c==> f1 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f2 c==> c==> c~ f1 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 creal_of_num cNUMERAL cBIT1 c_0 b0 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 creal_of_num cNUMERAL cBIT1 c_0 cCOND f1 f2 b0 * / c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 c==> c==> f1 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f2 c==> c==> c~ f1 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 creal_of_num cNUMERAL cBIT1 c_0 b0 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 creal_of_num cNUMERAL cBIT1 c_0 cCOND f1 f2 b0 f3 * / c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 c==> c==> f1 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f2 c==> c==> c~ f1 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 creal_of_num cNUMERAL cBIT1 c_0 b0 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 creal_of_num cNUMERAL cBIT1 c_0 cCOND f1 f2 b0 f3
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
- |- (((real_mul (real_neg (real_of_num x))) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ |- (((!b. (!a. (!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)))) ==> ((\b. (!a. (!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)))) b)) = ((\b. (!a. (!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)))) b))
T c= c==> ! ! ! c==> c~ c= c= cCOND b2 b1 b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND b2 c= b1 creal_of_num cNUMERAL cBIT1 c_0 c= b0 creal_of_num cNUMERAL cBIT1 c_0 cF * / ! ! c==> c~ c= c= cCOND b2 b1 b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND b2 c= b1 creal_of_num cNUMERAL cBIT1 c_0 c= b0 creal_of_num cNUMERAL cBIT1 c_0 cF f0 * / ! ! c==> c~ c= c= cCOND b2 b1 b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND b2 c= b1 creal_of_num cNUMERAL cBIT1 c_0 c= b0 creal_of_num cNUMERAL cBIT1 c_0 cF f0
+ |- (((!t'. (!e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 c==> c==> f1 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 b0 c==> c==> c~ f1 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 creal_of_num cNUMERAL cBIT1 c_0 b1 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f1 b0 b1 * / ! c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 c==> c==> f1 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 b0 c==> c==> c~ f1 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 creal_of_num cNUMERAL cBIT1 c_0 b1 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f1 b0 b1 f2 * / ! c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 c==> c==> f1 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 b0 c==> c==> c~ f1 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 creal_of_num cNUMERAL cBIT1 c_0 b1 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f1 b0 b1 f2
+ (~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) |- ((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) /\ ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c/\ c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\y. (!i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i)))) y)
T * / ! c= creal_sub c$ f0 b1 c$ b0 b1 c$ cvector_sub f0 b0 b1 f1
+ |- (T = (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ ((NUMERAL (BIT1 (BIT1 _0))) <= (dimindex UNIV))))
T c= cT c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cNUMERAL cBIT1 cBIT1 c_0 cdimindex part cUNIV
+ |- (((content (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = (real_of_num (NUMERAL (BIT1 _0)))) = ((measure (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c= ccontent * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL creal_of_num cNUMERAL cBIT1 c_0 c= cmeasure * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!b. (!t1. (!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2)))))) ==> ((\b. (!t1. (!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2)))))) b)) = ((\b. (!t1. (!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2)))))) b))
T c= c==> ! ! ! c= cCOND b0 b1 b2 c/\ c\/ c~ b0 b1 c\/ b0 b2 * / ! ! c= cCOND b0 b1 b2 c/\ c\/ c~ b0 b1 c\/ b0 b2 f0 * / ! ! c= cCOND b0 b1 b2 c/\ c\/ c~ b0 b1 c\/ b0 b2 f0
+ |- ((\i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i)))) i)
T * / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ clambda f0 b0 * f0 b0 f1
- |- (((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\x. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)))))) = (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\x. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))))
T c= c==> ! c==> cIN b0 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
+ |- (((vector_sub ((vector_add a) b)) a) = b)
T c= cvector_sub cvector_add f0 f1 f0 f1
+ |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
+ |- (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))
T c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
- |- (~ (EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))))
T c~ c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL
- |- (((x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)))) = T)
T c= c==> cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 cT
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ (P = F) |- ((P = F) /\ ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T))
T c==> c= f0 cF c/\ c= f0 cF c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT
+ |- (((!x. (!y. (!i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))))) ==> ((\x. (!y. (!i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))))) x)) = ((\x. (!y. (!i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))))) x))
T c= c==> ! ! ! c= creal_sub c$ b0 b2 c$ b1 b2 c$ cvector_sub b0 b1 b2 * / ! ! c= creal_sub c$ b0 b2 c$ b1 b2 c$ cvector_sub b0 b1 b2 f0 * / ! ! c= creal_sub c$ b0 b2 c$ b1 b2 c$ cvector_sub b0 b1 b2 f0
+ |- (((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) \/ ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) \/ (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))))
T c/\ c\/ c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c\/ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) ==> (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)))
T c==> c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\f. (((product EMPTY) f) = (real_of_num (NUMERAL (BIT1 _0))))) f)
T * / c= cproduct part cEMPTY b0 creal_of_num cNUMERAL cBIT1 c_0 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> (((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = F)) = (((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = F))
T c= c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY cF c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY cF
+ |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ ((NUMERAL (BIT1 (BIT1 _0))) <= (dimindex UNIV)))
T c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cNUMERAL cBIT1 cBIT1 c_0 cdimindex part cUNIV
+ |- ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((real_add (real_neg (real_of_num m))) (real_of_num m)) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_neg creal_of_num f0 creal_of_num f0 creal_of_num cNUMERAL c_0
+ |- ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))
T c= cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT0 (BIT1 _0)))) /\ (((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ ((NUMERAL (BIT1 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))))))
T c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((!g'. (!t'. (!e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY b0 c==> c==> b0 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 creal_of_num cNUMERAL cBIT1 c_0 b2 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 creal_of_num cNUMERAL cBIT1 c_0 cCOND b0 b1 b2 * / ! ! c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY b0 c==> c==> b0 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 creal_of_num cNUMERAL cBIT1 c_0 b2 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 creal_of_num cNUMERAL cBIT1 c_0 cCOND b0 b1 b2 f1 * / ! ! c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY b0 c==> c==> b0 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 creal_of_num cNUMERAL cBIT1 c_0 b2 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b3 creal_of_num cNUMERAL cBIT1 c_0 cCOND b0 b1 b2 f1
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ |- ((((real_mul ((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 _0)))) ((real_mul ((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT0 (BIT1 _0))))) ((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 (BIT1 _0)))))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((real_mul (((vector_sub ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) x) $ (NUMERAL (BIT1 _0)))) ((real_mul (((vector_sub ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) x) $ (NUMERAL (BIT0 (BIT1 _0))))) (((vector_sub ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) x) $ (NUMERAL (BIT1 (BIT1 _0)))))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c= creal_mul c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 creal_mul c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul c$ cvector_sub cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 f0 cNUMERAL cBIT1 c_0 creal_mul c$ cvector_sub cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 f0 cNUMERAL cBIT0 cBIT1 c_0 c$ cvector_sub cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 f0 cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
- |- ((~ (((real_sub ((real_add (a $ i)) (b $ i))) (a $ i)) = (b $ i))) ==> F)
T c==> c~ c= creal_sub creal_add c$ f0 f1 c$ f2 f1 c$ f0 f1 c$ f2 f1 cF
+ (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- ((((real_sub ((real_add (a $ i)) (b $ i))) (a $ i)) = (b $ i)) = (((lambdai. ((real_sub ((lambdai. ((real_add (a $ i)) (b $ i))) $ i)) (a $ i))) $ i) = (b $ i)))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c= creal_sub creal_add c$ f1 f0 c$ f2 f0 c$ f1 f0 c$ f2 f0 c= c$ clambda / creal_sub c$ clambda / creal_add c$ f1 b1 c$ f2 b1 b0 c$ f1 b0 f0 c$ f2 f0
- (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) |- ((i <= (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cNUMERAL cBIT1 cBIT1 c_0 c= c<= f0 cNUMERAL cBIT1 cBIT1 c_0 cT
+ |- ((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((x = x) = T)
T c= c= f0 f0 cT
+ |- ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambdai. ((real_sub ((lambdai. ((real_add (a $ i)) (b $ i))) $ i)) (a $ i))) $ i) = (b $ i)))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda / creal_sub c$ clambda / creal_add c$ f1 b1 c$ f2 b1 b0 c$ f1 b0 f0 c$ f2 f0
+ |- ((((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((real_mul ((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 _0)))) ((real_mul ((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT0 (BIT1 _0))))) ((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 (BIT1 _0)))))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 creal_mul c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) e')))
T c==> c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 f1 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f1
- |- (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i))) = T)
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda f1 f0 * f1 f0 cT
- |- (((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\x. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)))))) = (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\x. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))))
T c= c==> ! c==> cIN b0 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
+ |- (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) = (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))) = (real_of_num (NUMERAL (BIT1 _0)))) = ((content (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= ccontent * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL creal_of_num cNUMERAL cBIT1 c_0
+ |- (((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) |- (((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) /\ (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c/\ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))))
T c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
- |- (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))
T c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
- (~ (((real_sub ((real_add (a $ i)) (b $ i))) (a $ i)) = (b $ i))) |- ((~ (((real_sub ((real_add (a $ i)) (b $ i))) (a $ i)) = (b $ i))) /\ F)
T c==> c~ c= creal_sub creal_add c$ f0 f1 c$ f2 f1 c$ f0 f1 c$ f2 f1 c/\ c~ c= creal_sub creal_add c$ f0 f1 c$ f2 f1 c$ f0 f1 c$ f2 f1 cF
+ |- ((\e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))) e')
T * / c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 c==> c==> f1 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f2 c==> c==> c~ f1 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 creal_of_num cNUMERAL cBIT1 c_0 b0 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 creal_of_num cNUMERAL cBIT1 c_0 cCOND f1 f2 b0 f3
+ |- (((P = F) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T)) /\ ((P = T) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T)))
T c/\ c==> c= f0 cF c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT c==> c= f0 cT c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT
- |- ((\b. ((measure (open_interval (a , b))) = (content (closed_interval ((CONS (a , b)) NIL))))) b)
T * / c= cmeasure * part copen_interval c, f0 b0 ccontent * part cclosed_interval cCONS c, f0 b0 cNIL f1
- |- (((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) ==> F)
T c==> creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 cF
+ |- ((\b. (!a. (!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)))) b)
T * / ! ! c==> c~ c= c= cCOND b2 b1 b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND b2 c= b1 creal_of_num cNUMERAL cBIT1 c_0 c= b0 creal_of_num cNUMERAL cBIT1 c_0 cF f0
+ |- (((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c= c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
+ |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT0 (BIT1 _0)))) = T)
T c= c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cT
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((real_mul (((vector_sub ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) x) $ (NUMERAL (BIT1 _0)))) ((real_mul (((vector_sub ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) x) $ (NUMERAL (BIT0 (BIT1 _0))))) (((vector_sub ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) x) $ (NUMERAL (BIT1 (BIT1 _0)))))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= creal_mul c$ cvector_sub cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 f0 cNUMERAL cBIT1 c_0 creal_mul c$ cvector_sub cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 f0 cNUMERAL cBIT0 cBIT1 c_0 c$ cvector_sub cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 f0 cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!f. (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) f) = ((real_mul (f (NUMERAL (BIT1 _0)))) ((real_mul (f (NUMERAL (BIT0 (BIT1 _0))))) (f (NUMERAL (BIT1 (BIT1 _0)))))))) ==> ((\f. (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) f) = ((real_mul (f (NUMERAL (BIT1 _0)))) ((real_mul (f (NUMERAL (BIT0 (BIT1 _0))))) (f (NUMERAL (BIT1 (BIT1 _0)))))))) f)) = ((\f. (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) f) = ((real_mul (f (NUMERAL (BIT1 _0)))) ((real_mul (f (NUMERAL (BIT0 (BIT1 _0))))) (f (NUMERAL (BIT1 (BIT1 _0)))))))) f))
T c= c==> ! c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 creal_mul * b0 cNUMERAL cBIT1 c_0 creal_mul * b0 cNUMERAL cBIT0 cBIT1 c_0 * b0 cNUMERAL cBIT1 cBIT1 c_0 * / c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 creal_mul * b0 cNUMERAL cBIT1 c_0 creal_mul * b0 cNUMERAL cBIT0 cBIT1 c_0 * b0 cNUMERAL cBIT1 cBIT1 c_0 f0 * / c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 creal_mul * b0 cNUMERAL cBIT1 c_0 creal_mul * b0 cNUMERAL cBIT0 cBIT1 c_0 * b0 cNUMERAL cBIT1 cBIT1 c_0 f0
+ |- ((\f. (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) f) = ((real_mul (f (NUMERAL (BIT1 _0)))) ((real_mul (f (NUMERAL (BIT0 (BIT1 _0))))) (f (NUMERAL (BIT1 (BIT1 _0)))))))) (\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i)))
T * / c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 creal_mul * b0 cNUMERAL cBIT1 c_0 creal_mul * b0 cNUMERAL cBIT0 cBIT1 c_0 * b0 cNUMERAL cBIT1 cBIT1 c_0 / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
- |- ((real_neg ((real_sub ((real_sub ((real_add (a $ i)) (b $ i))) (a $ i))) (b $ i))) = (real_of_num (NUMERAL _0)))
T c= creal_neg creal_sub creal_sub creal_add c$ f0 f1 c$ f2 f1 c$ f0 f1 c$ f2 f1 creal_of_num cNUMERAL c_0
- |- ((real_neg ((real_sub ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = (real_of_num (NUMERAL _0)))
T c= creal_neg creal_sub creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((\t'. (!e'. ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 c==> c==> f1 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 b0 c==> c==> c~ f1 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 creal_of_num cNUMERAL cBIT1 c_0 b1 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f1 b0 b1 f2
- (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) /\ (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c/\ c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f1 cvector_add f1 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
+ |- (!g'. (!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5
- |- (((real_gt x) y) = ((real_lt y) x))
T c= creal_gt f0 f1 creal_lt f1 f0
+ |- (((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = F)
T c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY cF
- |- (((!g. ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = (g x)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) g)))) ==> ((\g. ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = (g x)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) g)))) g)) = ((\g. ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = (g x)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) g)))) g))
T c= c==> ! c==> ! c==> cIN b1 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 * / c==> ! c==> cIN b1 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1 * / c==> ! c==> cIN b1 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1
- (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) |- (((NUMERAL (BIT1 _0)) <= i) = T)
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cNUMERAL cBIT1 cBIT1 c_0 c= c<= cNUMERAL cBIT1 c_0 f0 cT
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
+ |- ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL))))
T c= cmeasure * part cclosed_interval cCONS c, f0 f1 cNIL ccontent * part cclosed_interval cCONS c, f0 f1 cNIL
- |- ((!i. (((m <= i) /\ (i <= n)) ==> ((f i) = (g i)))) ==> (((sum (m .. n)) f) = ((sum (m .. n)) g)))
T c==> ! c==> c/\ c<= f0 b0 c<= b0 f1 c= * f2 b0 * f3 b0 c= csum * * part c.. f0 f1 f2 csum * * part c.. f0 f1 f3
- |- (((!x. ((x IN s) ==> ((f x) = (g x)))) ==> (((product s) (\i. (f i))) = ((product s) g))) = T)
T c= c==> ! c==> cIN b0 f0 c= * f1 b0 * f2 b0 c= cproduct f0 / * f1 b0 cproduct f0 f2 cT
+ |- ((\i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))) i)
T * / c= creal_sub c$ f0 b0 c$ f1 b0 c$ cvector_sub f0 f1 b0 f2
- (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) |- ((((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) /\ (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)))
T c==> c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c/\ c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = (g i)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) g)))
T c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 * f1 b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f1
+ |- ((((real_mul (((vector_sub ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) x) $ (NUMERAL (BIT1 _0)))) ((real_mul (((vector_sub ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) x) $ (NUMERAL (BIT0 (BIT1 _0))))) (((vector_sub ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) x) $ (NUMERAL (BIT1 (BIT1 _0)))))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((real_mul (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ (NUMERAL (BIT1 _0)))) ((real_mul (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ (NUMERAL (BIT0 (BIT1 _0))))) (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ (NUMERAL (BIT1 (BIT1 _0)))))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c= creal_mul c$ cvector_sub cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 f0 cNUMERAL cBIT1 c_0 creal_mul c$ cvector_sub cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 f0 cNUMERAL cBIT0 cBIT1 c_0 c$ cvector_sub cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 f0 cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cNUMERAL cBIT1 c_0 creal_mul c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cNUMERAL cBIT0 cBIT1 c_0 c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!y. (!i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i)))) ==> ((\y. (!i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i)))) y)) = ((\y. (!i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i)))) y))
T c= c==> ! ! c= creal_sub c$ f0 b1 c$ b0 b1 c$ cvector_sub f0 b0 b1 * / ! c= creal_sub c$ f0 b1 c$ b0 b1 c$ cvector_sub f0 b0 b1 f1 * / ! c= creal_sub c$ f0 b1 c$ b0 b1 c$ cvector_sub f0 b0 b1 f1
+ |- ((((COND F) t1) t2) = t2)
T c= cCOND cF f0 f1 f1
- |- (((!g. ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = (g x)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) g)))) ==> ((\g. ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = (g x)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) g)))) g)) = ((\g. ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = (g x)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) g)))) g))
T c= c==> ! c==> ! c==> cIN b1 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV b0 * / c==> ! c==> cIN b1 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV b0 f1 * / c==> ! c==> cIN b1 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV b0 f1
+ |- (((NUMERAL (BIT1 _0)) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 _0)))
T c= c* cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
- (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- ((i <= (dimindex UNIV)) = T)
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c<= f0 cdimindex part cUNIV cT
+ |- (((!a. (!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))) ==> ((\a. (!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))) a)) = ((\a. (!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))) a))
T c= c==> ! ! c==> c~ c= c= cCOND b1 b0 f0 creal_of_num cNUMERAL cBIT1 c_0 cCOND b1 c= b0 creal_of_num cNUMERAL cBIT1 c_0 c= f0 creal_of_num cNUMERAL cBIT1 c_0 cF * / ! c==> c~ c= c= cCOND b1 b0 f0 creal_of_num cNUMERAL cBIT1 c_0 cCOND b1 c= b0 creal_of_num cNUMERAL cBIT1 c_0 c= f0 creal_of_num cNUMERAL cBIT1 c_0 cF f1 * / ! c==> c~ c= c= cCOND b1 b0 f0 creal_of_num cNUMERAL cBIT1 c_0 cCOND b1 c= b0 creal_of_num cNUMERAL cBIT1 c_0 c= f0 creal_of_num cNUMERAL cBIT1 c_0 cF f1
+ |- (((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) t') e'))))) = ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) t') e')))))
T c= c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c==> c==> c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f1 c==> c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 f2 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 f2 c==> c==> c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f1 c==> c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 f2 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 f2
- |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT0 (BIT1 _0)))) /\ (((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ ((NUMERAL (BIT1 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))))
T c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (F = (~ T))
T c= cF c~ cT
+ |- ((((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))))) = ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = (g x)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) g)))
T c==> ! c==> cIN b0 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 * f1 b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f1
+ |- ((T \/ t) = T)
T c= c\/ cT f0 cT
- |- ((((~ (((real_sub ((real_add (a $ i)) (b $ i))) (a $ i)) = (b $ i))) ==> F) ==> (((real_sub ((real_add (a $ i)) (b $ i))) (a $ i)) = (b $ i))) = (((real_sub ((real_add (a $ i)) (b $ i))) (a $ i)) = (b $ i)))
T c= c==> c==> c~ c= creal_sub creal_add c$ f0 f1 c$ f2 f1 c$ f0 f1 c$ f2 f1 cF c= creal_sub creal_add c$ f0 f1 c$ f2 f1 c$ f0 f1 c$ f2 f1 c= creal_sub creal_add c$ f0 f1 c$ f2 f1 c$ f0 f1 c$ f2 f1
- |- ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT0 (BIT1 _0))))
T c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ |- ((\x. ((ccube x) = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) x)
T * / c= * part cccube b0 * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i))) = ((real_mul ((\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i)) (NUMERAL (BIT1 _0)))) ((real_mul ((\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i)) (NUMERAL (BIT0 (BIT1 _0))))) ((\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i)) (NUMERAL (BIT1 (BIT1 _0)))))))
T c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_mul * / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cNUMERAL cBIT1 c_0 creal_mul * / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cNUMERAL cBIT0 cBIT1 c_0 * / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cNUMERAL cBIT1 cBIT1 c_0
+ |- ((((b = F) ==> (x = x0)) /\ ((b = T) ==> (x = x1))) ==> (x = (((~ b) \/ x1) /\ (b \/ x0))))
T c==> c/\ c==> c= f0 cF c= f1 f2 c==> c= f0 cT c= f1 f3 c= f1 c/\ c\/ c~ f0 f3 c\/ f0 f2
- ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F), (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) |- (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) /\ ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))
T c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c/\ c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
+ (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i)) |- ((((vector_sub x) y) $ i) = ((real_sub (x $ i)) (y $ i)))
T c==> c= creal_sub c$ f0 f1 c$ f2 f1 c$ cvector_sub f0 f2 f1 c= c$ cvector_sub f0 f2 f1 creal_sub c$ f0 f1 c$ f2 f1
- |- (((!i. (((a <= i) /\ (i <= b)) ==> ((f i) = (g i)))) ==> (((product (a .. b)) (\i. (f i))) = ((product (a .. b)) g))) = T)
T c= c==> ! c==> c/\ c<= f0 b0 c<= b0 f1 c= * f2 b0 * f3 b0 c= cproduct * * part c.. f0 f1 / * f2 b0 cproduct * * part c.. f0 f1 f3 cT
- (x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) |- ((x IN ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) = T)
T c==> cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cIN f0 * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
+ |- ((!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e')))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 b0 c= cCOND f0 f2 f4 cCOND f1 f3 b0 cT
- |- ((NUMERAL (BIT1 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))
T c<= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- ((\s. ((content s) = (((COND (s = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound s) $ i)) ((interval_lowerbound s) $ i))))))) s)
T * / c= ccontent b0 cCOND c= b0 part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound b0 b1 c$ cinterval_lowerbound b0 b1 f0
+ |- (T = (!b. (!a. (!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)))))
T c= cT ! ! ! c==> c~ c= c= cCOND b2 b1 b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND b2 c= b1 creal_of_num cNUMERAL cBIT1 c_0 c= b0 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- (((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))))) = (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))))
T c= c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
+ |- ((\t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2)))) t2)
T * / c= cCOND f0 f1 b0 c/\ c\/ c~ f0 f1 c\/ f0 b0 f2
- |- (((((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) ==> (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))) = (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)))
T c= c==> c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- ((EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = F)
T c= c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cF
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) |- (~ (EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))))
T c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c~ c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL
+ |- ((\a. (!P. ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))) a)
T * / ! c==> c~ c= c= cCOND b1 b0 f0 creal_of_num cNUMERAL cBIT1 c_0 cCOND b1 c= b0 creal_of_num cNUMERAL cBIT1 c_0 c= f0 creal_of_num cNUMERAL cBIT1 c_0 cF f1
- |- ((~ T) = F)
T c= c~ cT cF
+ |- ((\a. (!b. ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL)))))) a)
T * / ! c= cmeasure * part cclosed_interval cCONS c, b0 b1 cNIL ccontent * part cclosed_interval cCONS c, b0 b1 cNIL f0
+ |- (((real_mul (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ (NUMERAL (BIT1 _0)))) ((real_mul (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ (NUMERAL (BIT0 (BIT1 _0))))) (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ (NUMERAL (BIT1 (BIT1 _0)))))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= creal_mul c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cNUMERAL cBIT1 c_0 creal_mul c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cNUMERAL cBIT0 cBIT1 c_0 c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\s. ((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f)))))) s)
T * / c==> cFINITE b0 c= cproduct * * part cINSERT f0 b0 f1 cCOND cIN f0 b0 cproduct b0 f1 creal_mul * f1 f0 cproduct b0 f1 f2
+ |- ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) t') e'))))
T c==> c==> c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f1 c==> c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 f2 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 f2
- (~ (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (real_of_num (NUMERAL (BIT1 _0))))) |- (((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) \/ ((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))))
T c==> c~ c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f)))))
T c==> cFINITE f0 c= cproduct * * part cINSERT f1 f0 f2 cCOND cIN f1 f0 cproduct f0 f2 creal_mul * f2 f1 cproduct f0 f2
+ |- (((measure (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = (real_of_num (NUMERAL (BIT1 _0)))) = T)
T c= c= cmeasure * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL creal_of_num cNUMERAL cBIT1 c_0 cT
- |- ((!x. ((x IN ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) = ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\x. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ x))))))
T c==> ! c==> cIN b0 * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0
+ |- ((F \/ t) = t)
T c= c\/ cF f0 f0
+ (P = T) |- ((P = T) /\ ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T))
T c==> c= f0 cT c/\ c= f0 cT c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT
- |- (((!g. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = (g i)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) g)))) ==> ((\g. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = (g i)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) g)))) g)) = ((\g. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = (g i)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) g)))) g))
T c= c==> ! c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 * / c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1 * / c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1
+ |- (T = (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT0 (BIT1 _0)))) /\ ((NUMERAL (BIT0 (BIT1 _0))) <= (dimindex UNIV))))
T c= cT c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c<= cNUMERAL cBIT0 cBIT1 c_0 cdimindex part cUNIV
- ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F), (((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) |- ((((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F) ==> ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)) /\ ((~ (((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0))))))) ==> F))
T c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c/\ c==> c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF c==> c~ c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- ((\g. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = (g i)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) g)))) g)
T * / c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cNUMERAL cBIT1 cBIT1 c_0 c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1
- |- ((\a. (!b. ((measure (open_interval (a , b))) = (content (closed_interval ((CONS (a , b)) NIL)))))) a)
T * / ! c= cmeasure * part copen_interval c, b0 b1 ccontent * part cclosed_interval cCONS c, b0 b1 cNIL f0
+ |- ((\x. (!y. (!i. (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))))) x)
T * / ! ! c= creal_sub c$ b0 b2 c$ b1 b2 c$ cvector_sub b0 b1 b2 f0
+ |- (((((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 _0))) /\ ((NUMERAL (BIT1 _0)) <= (dimindex UNIV))) ==> (((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 _0))) = ((\i. (real_of_num (NUMERAL (BIT1 _0)))) (NUMERAL (BIT1 _0))))) = (((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 _0))) = ((\i. (real_of_num (NUMERAL (BIT1 _0)))) (NUMERAL (BIT1 _0)))))
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 c<= cNUMERAL cBIT1 c_0 cdimindex part cUNIV c= c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 * / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 c= c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 * / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
+ |- ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = (((~ P) \/ T) /\ (P \/ T)))
T c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 c/\ c\/ c~ f0 cT c\/ f0 cT
- |- (((!g. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = (g i)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) g)))) ==> ((\g. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = (g i)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) g)))) g)) = ((\g. ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) = (g i)))) ==> (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) g)))) g))
T c= c==> ! c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV b0 * / c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV b0 f1 * / c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c<= b1 cdimindex part cUNIV c= creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 * b0 b1 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b1 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV b0 f1
+ |- (((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 _0))) = ((\i. (real_of_num (NUMERAL (BIT1 _0)))) (NUMERAL (BIT1 _0))))
T c= c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 * / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
+ |- ((~ F) = T)
T c= c~ cF cT
- |- (!g. ((!x. ((x IN s) ==> ((f x) = (g x)))) ==> (((product s) (\i. (f i))) = ((product s) g))))
T c==> ! c==> cIN b0 f0 c= * f1 b0 * f2 b0 c= cproduct f0 / * f1 b0 cproduct f0 f2
- (((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) \/ ((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0)))) |- F
T c==> c\/ creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 cF
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!a. (!b. ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL)))))) ==> ((\a. (!b. ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL)))))) a)) = ((\a. (!b. ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL)))))) a))
T c= c==> ! ! c= cmeasure * part cclosed_interval cCONS c, b0 b1 cNIL ccontent * part cclosed_interval cCONS c, b0 b1 cNIL * / ! c= cmeasure * part cclosed_interval cCONS c, b0 b1 cNIL ccontent * part cclosed_interval cCONS c, b0 b1 cNIL f0 * / ! c= cmeasure * part cclosed_interval cCONS c, b0 b1 cNIL ccontent * part cclosed_interval cCONS c, b0 b1 cNIL f0
- (~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) |- (((~ (EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) ==> ((EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = F)) = ((EMPTY = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = F))
T c==> c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= c==> c~ c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL c= c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cF c= c= part cEMPTY * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cF
+ |- ((\b. ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL))))) b)
T * / c= cmeasure * part cclosed_interval cCONS c, f0 b0 cNIL ccontent * part cclosed_interval cCONS c, f0 b0 cNIL f1
- |- ((!i. (((m <= i) /\ (i <= n)) ==> ((f i) = (real_of_num (NUMERAL _0))))) ==> (((sum (m .. n)) f) = (real_of_num (NUMERAL _0))))
T c==> ! c==> c/\ c<= f0 b0 c<= b0 f1 c= * f2 b0 creal_of_num cNUMERAL c_0 c= csum * * part c.. f0 f1 f2 creal_of_num cNUMERAL c_0
- |- ((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))
T c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((((~ (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (real_of_num (NUMERAL (BIT1 _0))))) ==> F) ==> (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c==> c==> c~ c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 cF c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\x. (!f. (!s. ((FINITE s) ==> (((product (x INSERT s)) f) = (((COND (x IN s)) ((product s) f)) ((real_mul (f x)) ((product s) f)))))))) x)
T * / ! ! c==> cFINITE b2 c= cproduct * * part cINSERT b0 b2 b1 cCOND cIN b0 b2 cproduct b2 b1 creal_mul * b1 b0 cproduct b2 b1 f0
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))))
T c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) /\ ((NUMERAL (BIT1 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))
T c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (((!f. (((product EMPTY) f) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((\f. (((product EMPTY) f) = (real_of_num (NUMERAL (BIT1 _0))))) f)) = ((\f. (((product EMPTY) f) = (real_of_num (NUMERAL (BIT1 _0))))) f))
T c= c==> ! c= cproduct part cEMPTY b0 creal_of_num cNUMERAL cBIT1 c_0 * / c= cproduct part cEMPTY b0 creal_of_num cNUMERAL cBIT1 c_0 f0 * / c= cproduct part cEMPTY b0 creal_of_num cNUMERAL cBIT1 c_0 f0
+ |- ((P = F) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T))
T c==> c= f0 cF c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT
+ |- ((((~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) \/ ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) \/ (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))))) = (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))))
T c= c/\ c\/ c~ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c\/ c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((real_mul (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ (NUMERAL (BIT1 _0)))) ((real_mul (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ (NUMERAL (BIT0 (BIT1 _0))))) (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ (NUMERAL (BIT1 (BIT1 _0)))))) = (real_of_num (NUMERAL (BIT1 _0)))) = (((product ((NUMERAL (BIT1 _0)) .. (NUMERAL (BIT1 (BIT1 _0))))) (\i. (((vector_sub (interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) (interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) $ i))) = (real_of_num (NUMERAL (BIT1 _0)))))
T c= c= creal_mul c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cNUMERAL cBIT1 c_0 creal_mul c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cNUMERAL cBIT0 cBIT1 c_0 c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 / c$ cvector_sub cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((vector_sub ((vector_add a) b)) a) $ i) = (b $ i))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ cvector_sub cvector_add f1 f2 f1 f0 c$ f2 f0
+ |- (T = (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 _0))) /\ ((NUMERAL (BIT1 _0)) <= (dimindex UNIV))))
T c= cT c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 c<= cNUMERAL cBIT1 c_0 cdimindex part cUNIV
+ |- ((\x. (((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0)))))) /\ ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = x))) x)
T * / c/\ c= cinterval_upperbound * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 c= cinterval_lowerbound * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 f0
+ |- ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((vector_sub ((vector_add a) b)) a) $ i) = (b $ i)))) = (((vector_sub ((vector_add a) b)) a) = b))
T c= ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ cvector_sub cvector_add f0 f1 f0 b0 c$ f1 b0 c= cvector_sub cvector_add f0 f1 f0 f1
+ |- (((!x. ((ccube x) = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) ==> ((\x. ((ccube x) = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) x)) = ((\x. ((ccube x) = (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)))) x))
T c= c==> ! c= * part cccube b0 * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL * / c= * part cccube b0 * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0 * / c= * part cccube b0 * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL f0
+ |- (((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))))
T cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((T /\ t) = t)
T c= c/\ cT f0 f0
+ |- (((!b. ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL))))) ==> ((\b. ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL))))) b)) = ((\b. ((measure (closed_interval ((CONS (a , b)) NIL))) = (content (closed_interval ((CONS (a , b)) NIL))))) b))
T c= c==> ! c= cmeasure * part cclosed_interval cCONS c, f0 b0 cNIL ccontent * part cclosed_interval cCONS c, f0 b0 cNIL * / c= cmeasure * part cclosed_interval cCONS c, f0 b0 cNIL ccontent * part cclosed_interval cCONS c, f0 b0 cNIL f1 * / c= cmeasure * part cclosed_interval cCONS c, f0 b0 cNIL ccontent * part cclosed_interval cCONS c, f0 b0 cNIL f1
+ (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) /\ (((lambdai. ((real_sub ((lambdai. ((real_add (a $ i)) (b $ i))) $ i)) (a $ i))) $ i) = (b $ i)))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c/\ c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda / creal_sub c$ clambda / creal_add c$ f1 b1 c$ f2 b1 b0 c$ f1 b0 f0 c$ f2 f0
+ |- ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i))))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!s. ((content s) = (((COND (s = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound s) $ i)) ((interval_lowerbound s) $ i))))))) ==> ((\s. ((content s) = (((COND (s = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound s) $ i)) ((interval_lowerbound s) $ i))))))) s)) = ((\s. ((content s) = (((COND (s = EMPTY)) (real_of_num (NUMERAL _0))) ((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound s) $ i)) ((interval_lowerbound s) $ i))))))) s))
T c= c==> ! c= ccontent b0 cCOND c= b0 part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound b0 b1 c$ cinterval_lowerbound b0 b1 * / c= ccontent b0 cCOND c= b0 part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound b0 b1 c$ cinterval_lowerbound b0 b1 f0 * / c= ccontent b0 cCOND c= b0 part cEMPTY creal_of_num cNUMERAL c_0 cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound b0 b1 c$ cinterval_lowerbound b0 b1 f0
+ |- ((((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY) = g') ==> ((g' ==> (((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0)))) = t')) ==> (((~ g') ==> ((((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY)) ((real_of_num (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) (((product ((NUMERAL (BIT1 _0)) .. (dimindex UNIV))) (\i. ((real_sub ((interval_upperbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)) ((interval_lowerbound (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) $ i)))) = (real_of_num (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))
T c==> c= c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f1 c==> c==> f1 c= c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 f2 c==> c==> c~ f1 c= c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 f3 c= cCOND c= * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY c= creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= cproduct * * part c.. cNUMERAL cBIT1 c_0 cdimindex part cUNIV / creal_sub c$ cinterval_upperbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 c$ cinterval_lowerbound * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL b0 creal_of_num cNUMERAL cBIT1 c_0 cCOND f1 f2 f3
+ |- ((content (closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= ccontent * part cclosed_interval cCONS c, f0 cvector_add f0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL creal_of_num cNUMERAL cBIT1 c_0
+ |- (((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 (BIT1 _0)))) = ((\i. (real_of_num (NUMERAL (BIT1 _0)))) (NUMERAL (BIT1 (BIT1 _0)))))
T c= c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 * / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((!x. (~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY))) ==> ((\x. (~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY))) x)) = ((\x. (~ ((closed_interval ((CONS (x , ((vector_add x) (lambdai. (real_of_num (NUMERAL (BIT1 _0))))))) NIL)) = EMPTY))) x))
T c= c==> ! c~ c= * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY * / c~ c= * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f0 * / c~ c= * part cclosed_interval cCONS c, b0 cvector_add b0 clambda / creal_of_num cNUMERAL cBIT1 c_0 cNIL part cEMPTY f0
+ |- (((((P = F) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T)) /\ ((P = T) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = T))) ==> ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = (((~ P) \/ T) /\ (P \/ T)))) = ((((((COND P) a) b) = (real_of_num (NUMERAL (BIT1 _0)))) = (((COND P) (a = (real_of_num (NUMERAL (BIT1 _0))))) (b = (real_of_num (NUMERAL (BIT1 _0)))))) = (((~ P) \/ T) /\ (P \/ T))))
T c= c==> c/\ c==> c= f0 cF c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT c==> c= f0 cT c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 cT c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 c/\ c\/ c~ f0 cT c\/ f0 cT c= c= c= cCOND f0 f1 f2 creal_of_num cNUMERAL cBIT1 c_0 cCOND f0 c= f1 creal_of_num cNUMERAL cBIT1 c_0 c= f2 creal_of_num cNUMERAL cBIT1 c_0 c/\ c\/ c~ f0 cT c\/ f0 cT
+ |- (((!t1. (!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2))))) ==> ((\t1. (!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2))))) t1)) = ((\t1. (!t2. ((((COND b) t1) t2) = (((~ b) \/ t1) /\ (b \/ t2))))) t1))
T c= c==> ! ! c= cCOND f0 b0 b1 c/\ c\/ c~ f0 b0 c\/ f0 b1 * / ! c= cCOND f0 b0 b1 c/\ c\/ c~ f0 b0 c\/ f0 b1 f1 * / ! c= cCOND f0 b0 b1 c/\ c\/ c~ f0 b0 c\/ f0 b1 f1
+ |- (((((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT0 (BIT1 _0)))) /\ ((NUMERAL (BIT0 (BIT1 _0))) <= (dimindex UNIV))) ==> (((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT0 (BIT1 _0)))) = ((\i. (real_of_num (NUMERAL (BIT1 _0)))) (NUMERAL (BIT0 (BIT1 _0)))))) = (((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT0 (BIT1 _0)))) = ((\i. (real_of_num (NUMERAL (BIT1 _0)))) (NUMERAL (BIT0 (BIT1 _0))))))
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c<= cNUMERAL cBIT0 cBIT1 c_0 cdimindex part cUNIV c= c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 * / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c= c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 * / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
+ |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT0 (BIT1 _0)))) /\ ((NUMERAL (BIT0 (BIT1 _0))) <= (dimindex UNIV)))
T c/\ c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c<= cNUMERAL cBIT0 cBIT1 c_0 cdimindex part cUNIV
+ |- (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((vector_sub ((vector_add a) b)) a) $ i) = (b $ i))) = T)
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ cvector_sub cvector_add f1 f2 f1 f0 c$ f2 f0 cT
+ |- ((!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))) = T)
T c= ! ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c==> c==> c~ f1 c= f3 b1 c= cCOND f0 f2 f3 cCOND f1 b0 b1 cT
+ |- (((real_mul ((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 _0)))) ((real_mul ((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT0 (BIT1 _0))))) ((lambdai. (real_of_num (NUMERAL (BIT1 _0)))) $ (NUMERAL (BIT1 (BIT1 _0)))))) = (real_of_num (NUMERAL (BIT1 _0))))
T c= creal_mul c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 creal_mul c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c$ clambda / creal_of_num cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((COND T) t1) t2) = t1)
T c= cCOND cT f0 f1 f0
+ ((((vector_sub x) y) $ i) = ((real_sub (x $ i)) (y $ i))) |- (((real_sub (x $ i)) (y $ i)) = (((vector_sub x) y) $ i))
T c==> c= c$ cvector_sub f0 f1 f2 creal_sub c$ f0 f2 c$ f1 f2 c= creal_sub c$ f0 f2 c$ f1 f2 c$ cvector_sub f0 f1 f2
