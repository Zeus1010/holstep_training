N Planarity.sym_line_fan
C |- (!x. (!y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))))))
T c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
D TRUTH
A |- T
T cT
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D IN
A |- (!P. (!x. ((x IN P) = (P x))))
T c= cIN f0 f1 * f1 f0
D EXTENSION
A |- (!s. (!t. ((s = t) = (!x. ((x IN s) = (x IN t))))))
T c= c= f0 f1 ! c= cIN b0 f0 cIN b0 f1
D SUBSET
A |- (!s. (!t. ((s SUBSET t) = (!x. ((x IN s) ==> (x IN t))))))
T c= cSUBSET f0 f1 ! c==> cIN b0 f0 cIN b0 f1
D NOT_IN_EMPTY
A |- (!x. (~ (x IN EMPTY)))
T c~ cIN f0 part cEMPTY
D IN_INSERT
A |- (!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))))
T c= cIN f0 * * part cINSERT f1 f2 c\/ c= f0 f1 cIN f0 f2
D Planarity.sym_line0_fan
A |- (!x. (!y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY))))))))
T c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- ((!x''. ((~ ((aff (x INSERT (y INSERT EMPTY))) x')) \/ ((aff (x INSERT (z INSERT EMPTY))) x''))) = ((~ ((aff (x INSERT (y INSERT EMPTY))) x')) \/ (!x'. ((aff (x INSERT (z INSERT EMPTY))) x'))))
T c= ! c\/ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY b0 c\/ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 ! caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY b0
- (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), (~ F), ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- ((~ F) /\ F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c~ cF c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c/\ c~ cF cF
- |- (((!B. ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)) ==> ((\B. ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)) B)) = ((\B. ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)) B))
T c= c==> ! c==> c~ ! c= c\/ c= b1 f0 c= b1 b0 c\/ c= b1 b0 c= b1 f0 cF * / c==> c~ ! c= c\/ c= b1 f0 c= b1 b0 c\/ c= b1 b0 c= b1 f0 cF f1 * / c==> c~ ! c= c\/ c= b1 f0 c= b1 b0 c\/ c= b1 b0 c= b1 f0 cF f1
+ |- ((((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))) = T)
T c= c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cT
+ |- ((t \/ F) = t)
T c= c\/ f0 cF f0
- (x = B) |- ((~ (x = A)) = (~ (B = A)))
T c==> c= f0 f1 c= c~ c= f0 f2 c~ c= f1 f2
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- ((~ (B = B)) ==> (B = B))
T c==> c~ c= f0 f0 c= f0 f0
- |- (((((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)) ==> (((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))) = (((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)))
T c= c==> c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF
- (x = B), (((~ (x = A)) /\ (~ (x = B))) /\ ((x = B) \/ (x = A))) |- (~ (B = A))
T c==> c= f0 f1 c==> c/\ c/\ c~ c= f0 f2 c~ c= f0 f1 c\/ c= f0 f1 c= f0 f2 c~ c= f1 f2
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) |- (!x'. ((~ ((aff (x INSERT (y INSERT EMPTY))) x')) \/ ((aff (x INSERT (z INSERT EMPTY))) x')))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 ! c\/ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0
- |- ((((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) = ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F))
T c= c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF
+ |- ((a \/ b) = ((~ b) ==> a))
T c= c\/ f0 f1 c==> c~ f1 f0
- ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) |- ((((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F))
T c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF
- |- ((!A. (!B. (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A)))))) = (!A. (!B. ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))))
T c= ! ! ! c= c\/ c= b2 b0 c= b2 b1 c\/ c= b2 b1 c= b2 b0 ! ! c==> c~ ! c= c\/ c= b2 b0 c= b2 b1 c\/ c= b2 b1 c= b2 b0 cF
- (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))), (((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((~ F) ==> F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 c==> c~ cF cF
- (((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) |- ((((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) /\ (((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)))
T c==> c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c/\ c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF
- (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- ((~ F) ==> F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c==> c~ cF cF
- |- ((!x''. ((~ ((aff (x INSERT (y INSERT EMPTY))) x'')) \/ ((aff (x INSERT (z INSERT EMPTY))) x'))) = ((!x'. (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) \/ ((aff (x INSERT (z INSERT EMPTY))) x')))
T c= ! c\/ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 c\/ ! c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3
- |- ((\z. ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) z)
T * / c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 ! c= caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 cF f2
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((p \/ p) = p)
T c= c\/ f0 f0 f0
+ |- (((((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (y INSERT (x INSERT EMPTY))) SUBSET (aff (z INSERT (x INSERT EMPTY))))) ==> ((aff (z INSERT (x INSERT EMPTY))) = (aff (y INSERT (x INSERT EMPTY))))) = ((((x IN (aff (z INSERT (y INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (z INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY))))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))))
T c= c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY c= * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c==> c==> c/\ cIN f0 * part caff * * part cINSERT f2 * * part cINSERT f1 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f2 * * part cINSERT f1 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- (~ F), (x = B), (((~ (x = A)) /\ (~ (x = B))) /\ ((x = B) \/ (x = A))) |- ((~ F) /\ F)
T c==> c~ cF c==> c= f0 f1 c==> c/\ c/\ c~ c= f0 f2 c~ c= f0 f1 c\/ c= f0 f1 c= f0 f2 c/\ c~ cF cF
- (~ F), (x = B), (((x = A) \/ (x = B)) /\ ((~ (x = B)) /\ (~ (x = A)))) |- ((~ F) /\ F)
T c==> c~ cF c==> c= f0 f1 c==> c/\ c\/ c= f0 f2 c= f0 f1 c/\ c~ c= f0 f1 c~ c= f0 f2 c/\ c~ cF cF
- |- (((!z. ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) ==> ((\z. ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) z)) = ((\z. ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) z))
T c= c==> ! c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 ! c= caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 cF * / c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 ! c= caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 cF f2 * / c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 ! c= caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY b1 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b1 cF f2
- |- (((~ p) ==> p) = p)
T c= c==> c~ f0 f0 f0
+ (x IN (aff (y INSERT (z INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- (((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- (((!A. (!B. ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))) ==> ((\A. (!B. ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))) A)) = ((\A. (!B. ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))) A))
T c= c==> ! ! c==> c~ ! c= c\/ c= b2 b0 c= b2 b1 c\/ c= b2 b1 c= b2 b0 cF * / ! c==> c~ ! c= c\/ c= b2 b0 c= b2 b1 c\/ c= b2 b1 c= b2 b0 cF f0 * / ! c==> c~ ! c= c\/ c= b2 b0 c= b2 b1 c\/ c= b2 b1 c= b2 b0 cF f0
- |- ((!z. t) = t)
T c= ! f0 f0
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) /\ (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 c/\ ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0
- ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- ((~ ((aff (x INSERT (y INSERT EMPTY))) x')) ==> ((aff (x INSERT (y INSERT EMPTY))) x'))
T c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 c==> c~ caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2
- (~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) |- F
T c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF
- |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) |- (((aff (x INSERT (y INSERT EMPTY))) _3016626) ==> ((aff (x INSERT (z INSERT EMPTY))) _3016626))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3
- |- ((!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A)))) = T)
T c= ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cT
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- (((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) /\ F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c/\ c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 cF
+ |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
- ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))) |- (((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))) = T)
T c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c= cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY cT
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) |- (((aff (x INSERT (z INSERT EMPTY))) _3016626) \/ (~ ((aff (x INSERT (y INSERT EMPTY))) _3016626)))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c\/ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3
- (x = A), (((~ (x = A)) /\ (~ (x = B))) /\ ((x = B) \/ (x = A))) |- (~ (A = B))
T c==> c= f0 f1 c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 f2 c\/ c= f0 f2 c= f0 f1 c~ c= f1 f2
- (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), (~ ((aff (x INSERT (z INSERT EMPTY))) x')), ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (z INSERT EMPTY))) x'))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))), (~ (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((~ (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))) /\ F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 c==> c~ c= caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c/\ c~ c= caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 cF
- (~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) |- F
T c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF
+ (x IN (aff (y INSERT (z INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- ((((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY))))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- |- (((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))))) = T)
T c= c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cT
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
+ (x IN (aff (y INSERT (z INSERT EMPTY)))), ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- ((((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (y INSERT (x INSERT EMPTY))) SUBSET (aff (z INSERT (x INSERT EMPTY))))) ==> ((aff (z INSERT (x INSERT EMPTY))) = (aff (y INSERT (x INSERT EMPTY)))))
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY c= * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY
- ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F), (((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) |- ((((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) /\ ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F))
T c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c/\ c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF
+ (x IN (aff (y INSERT (z INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- ((((aff (y INSERT (x INSERT EMPTY))) SUBSET (aff (z INSERT (x INSERT EMPTY)))) ==> ((aff (z INSERT (x INSERT EMPTY))) = (aff (y INSERT (x INSERT EMPTY))))) = ((((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (y INSERT (x INSERT EMPTY))) SUBSET (aff (z INSERT (x INSERT EMPTY))))) ==> ((aff (z INSERT (x INSERT EMPTY))) = (aff (y INSERT (x INSERT EMPTY))))))
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> cSUBSET * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY c= * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY c= * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY
+ |- (((~ (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> F) = (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))
T c= c==> c~ c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 cF c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2
+ (~ (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) \/ ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')))
T c==> c~ c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 c\/ c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c~ caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 c/\ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((!x'. ((P x') \/ Q)) = ((!x'. (P x')) \/ Q))
T c= ! c\/ * f0 b0 f1 c\/ ! * f0 b0 f1
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')) = T)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 c= c= caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 cT
+ (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))), (((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((((aff (x INSERT (y INSERT EMPTY))) x') ==> F) = F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 c= c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 cF cF
+ |- (((!y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY))))))) ==> ((\y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY))))))) y)) = ((\y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY))))))) y))
T c= c==> ! ! c==> c/\ cIN f0 * part caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT b1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY * / ! c==> c/\ cIN f0 * part caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT b1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY f1 * / ! c==> c/\ cIN f0 * part caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT b1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY f1
+ |- ((((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))) = (((aff (y INSERT (x INSERT EMPTY))) SUBSET (aff (z INSERT (x INSERT EMPTY)))) ==> ((aff (z INSERT (x INSERT EMPTY))) = (aff (y INSERT (x INSERT EMPTY))))))
T c= c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY c= * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY
- (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))), (((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((~ ((aff (x INSERT (y INSERT EMPTY))) x')) ==> ((aff (x INSERT (y INSERT EMPTY))) x'))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 c==> c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3
+ |- ((!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))) = T)
T c= ! c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT b0 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cT
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ (x IN (aff (y INSERT (z INSERT EMPTY)))) |- ((x IN (aff (y INSERT (z INSERT EMPTY)))) = T)
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT
- |- ((!x. (!z. ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))))))) = T)
T c= ! ! c==> ! c==> caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY b2 caff * * part cINSERT b0 * * part cINSERT f0 part cEMPTY b2 c==> ! c==> caff * * part cINSERT b0 * * part cINSERT f0 part cEMPTY b2 caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY b2 ! c= caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY b2 caff * * part cINSERT b0 * * part cINSERT f0 part cEMPTY b2 cT
- |- (((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) = (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A)))))
T c= c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0
- |- ((!B. (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) = T)
T c= ! ! c= c\/ c= b1 f0 c= b1 b0 c\/ c= b1 b0 c= b1 f0 cT
+ |- (((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))))) = ((!x'. ((x' IN (aff (x INSERT (z INSERT EMPTY)))) ==> (x' IN (aff (x INSERT (y INSERT EMPTY)))))) ==> ((!x'. ((x' IN (aff (x INSERT (y INSERT EMPTY)))) ==> (x' IN (aff (x INSERT (z INSERT EMPTY)))))) ==> (!x'. ((x' IN (aff (x INSERT (z INSERT EMPTY)))) = (x' IN (aff (x INSERT (y INSERT EMPTY)))))))))
T c= c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c==> ! c==> cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY ! c= cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY
+ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- (((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) = T)
T c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT
- |- ((x = x) = T)
T c= c= f0 f0 cT
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) |- (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- ((aff (x INSERT (z INSERT EMPTY))) x')
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((~ (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 c==> c~ c= caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 cF
- ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F), (((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)) |- (((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) /\ ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))
T c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c/\ c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF
- (((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)) |- ((((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)) /\ (((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)))
T c==> c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c/\ c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF
+ (~ (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))), (((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) ==> F), ((((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> F) |- F
T c==> c~ c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 c==> c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 cF c==> c==> c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c~ caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 cF cF
+ (x IN (aff (y INSERT (z INSERT EMPTY)))), ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- (((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))) /\ ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((!x'. ((x' IN (aff (x INSERT (z INSERT EMPTY)))) ==> (x' IN (aff (x INSERT (y INSERT EMPTY)))))) ==> ((!x'. ((x' IN (aff (x INSERT (y INSERT EMPTY)))) ==> (x' IN (aff (x INSERT (z INSERT EMPTY)))))) ==> (!x'. ((x' IN (aff (x INSERT (z INSERT EMPTY)))) = (x' IN (aff (x INSERT (y INSERT EMPTY))))))))
T c==> ! c==> cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c==> ! c==> cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY ! c= cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY
+ ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))) |- (((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))
T c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY
+ |- ((p \/ q) = (q \/ p))
T c= c\/ f0 f1 c\/ f1 f0
- ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) |- ((((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F)) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))
T c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF
+ (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))), (((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((aff (x INSERT (y INSERT EMPTY))) x')
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3
+ (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))), (((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) /\ F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 c/\ c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 cF
- (x = B), (((x = A) \/ (x = B)) /\ ((~ (x = B)) /\ (~ (x = A)))) |- ((~ F) ==> F)
T c==> c= f0 f1 c==> c/\ c\/ c= f0 f2 c= f0 f1 c/\ c~ c= f0 f1 c~ c= f0 f2 c==> c~ cF cF
- (x = B) |- (F = F)
T c==> c= f0 f1 c= cF cF
+ (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 cF
+ |- ((!y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))))) = T)
T c= ! ! c==> c/\ cIN f0 * part caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT b1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY cT
+ (x IN (aff (y INSERT (z INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- ((((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))) = ((((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY))))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))))
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
- (x = A), (((x = A) \/ (x = B)) /\ ((~ (x = B)) /\ (~ (x = A)))) |- ((~ F) ==> F)
T c==> c= f0 f1 c==> c/\ c\/ c= f0 f1 c= f0 f2 c/\ c~ c= f0 f2 c~ c= f0 f1 c==> c~ cF cF
- ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) |- (((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) /\ ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))
T c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c/\ c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF
- |- (((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F) ==> ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))
T c==> c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF c==> c~ ! c= c\/ c= b0 f0 c= b0 f1 c\/ c= b0 f1 c= b0 f0 cF
- (((x IN (aff (z INSERT (y INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (z INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY))))), (x IN (aff (y INSERT (z INSERT EMPTY)))), ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- ((((x IN (aff (z INSERT (y INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (z INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY))))) /\ ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))
T c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> cIN f0 * part caff * * part cINSERT f2 * * part cINSERT f1 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f2 * * part cINSERT f1 part cEMPTY c/\ c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY
- (((x IN (aff (z INSERT (y INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (z INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY))))), (x IN (aff (y INSERT (z INSERT EMPTY)))), ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))
T c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> cIN f0 * part caff * * part cINSERT f2 * * part cINSERT f1 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f2 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY
+ (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))), (~ (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))), (((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) ==> F) |- F
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c~ c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 c==> c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 cF cF
+ |- (((((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY))))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))) = ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))
T c= c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) |- (((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) /\ ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F))
T c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c/\ c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF
- |- (((((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)) ==> (((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F))) = (((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F) ==> ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) ==> F)))
T c= c==> c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF
- |- ((\A. (!B. ((~ (!x. (((x = A) \/ (x = B)) = ((x = B) \/ (x = A))))) ==> F))) A)
T * / ! c==> c~ ! c= c\/ c= b2 b0 c= b2 b1 c\/ c= b2 b1 c= b2 b0 cF f0
- (x = B), (((~ (x = A)) /\ (~ (x = B))) /\ ((x = B) \/ (x = A))) |- ((~ F) ==> F)
T c==> c= f0 f1 c==> c/\ c/\ c~ c= f0 f2 c~ c= f0 f1 c\/ c= f0 f1 c= f0 f2 c==> c~ cF cF
+ |- ((\z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))))) z)
T * / c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2
+ (x IN (aff (y INSERT (z INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- ((!x'. (P \/ (Q x'))) = (P \/ (!x'. (Q x'))))
T c= ! c\/ f0 * f1 b0 c\/ f0 ! * f1 b0
- (((x IN (aff (z INSERT (y INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (z INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY))))) |- ((((x IN (aff (z INSERT (y INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (z INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY))))) = T)
T c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cT
- (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) ==> ((aff (x INSERT (z INSERT EMPTY))) x'))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c==> c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) |- (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x'))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 c= caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- (~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) |- ((~ ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) ==> ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))) /\ F)
T c==> c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c/\ c~ c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 cF
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) |- (((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) ==> F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 cF
+ (((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x')) = ((aff (x INSERT (y INSERT EMPTY))) x'))
T c==> c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c~ caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 c= c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2
+ ((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) |- (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) /\ ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))
T c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ (((aff (x INSERT (z INSERT EMPTY))) x') /\ (~ ((aff (x INSERT (y INSERT EMPTY))) x'))) |- (((aff (x INSERT (y INSERT EMPTY))) x') ==> F)
T c==> c/\ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c~ caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 c==> caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 cF
+ (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) |- ((!x'. (((aff (x INSERT (z INSERT EMPTY))) x') ==> ((aff (x INSERT (y INSERT EMPTY))) x'))) /\ ((!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))) ==> (!x'. (((aff (x INSERT (z INSERT EMPTY))) x') = ((aff (x INSERT (y INSERT EMPTY))) x')))))
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c/\ ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 ! c= caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0
+ (!x'. (((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x'))), ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- ((((aff (x INSERT (z INSERT EMPTY))) x') ==> F) = F)
T c==> ! c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY b0 c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f3 c= c==> caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY f3 cF cF
+ |- (((((x IN (aff (z INSERT (y INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (z INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY))))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))) = ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))
T c= c==> c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY
+ |- ((x IN EMPTY) = F)
T c= cIN f0 part cEMPTY cF
+ |- (((!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))))) ==> ((\z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))))) z)) = ((\z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))))) z))
T c= c==> ! c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * / c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 * / c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2
+ ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- (((aff (x INSERT (z INSERT EMPTY))) x') ==> F)
T c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 c==> caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 cF
+ ((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))), (x IN (aff (y INSERT (z INSERT EMPTY)))) |- ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))
T c==> c/\ cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))) |- (((aff (y INSERT (x INSERT EMPTY))) SUBSET (aff (z INSERT (x INSERT EMPTY)))) ==> ((aff (z INSERT (x INSERT EMPTY))) = (aff (y INSERT (x INSERT EMPTY)))))
T c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c= * part caff * * part cINSERT f1 * * part cINSERT f0 part cEMPTY * part caff * * part cINSERT f2 * * part cINSERT f0 part cEMPTY
+ (x IN (aff (y INSERT (z INSERT EMPTY)))), ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY))))
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ (x IN (aff (y INSERT (z INSERT EMPTY)))), ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))), ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY))) |- ((((x IN (aff (z INSERT (y INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (z INSERT (y INSERT EMPTY)))) ==> ((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY))))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))
T c==> cIN f0 * part caff * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c/\ cIN f0 * part caff * * part cINSERT f2 * * part cINSERT f1 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT f2 * * part cINSERT f1 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ ((~ ((aff (x INSERT (z INSERT EMPTY))) x')) /\ ((aff (x INSERT (y INSERT EMPTY))) x')) |- ((((aff (x INSERT (y INSERT EMPTY))) x') ==> ((aff (x INSERT (z INSERT EMPTY))) x')) = ((aff (x INSERT (z INSERT EMPTY))) x'))
T c==> c/\ c~ caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 c= c==> caff * * part cINSERT f0 * * part cINSERT f3 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2
+ |- (((!x. (!y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))))))) ==> ((\x. (!y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))))))) x)) = ((\x. (!y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))))))) x))
T c= c==> ! ! ! c==> c/\ cIN b0 * part caff * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cDISJOINT * * part cINSERT b0 part cEMPTY * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cSUBSET * part caff * * part cINSERT b0 * * part cINSERT b2 part cEMPTY * part caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY * / ! ! c==> c/\ cIN b0 * part caff * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cDISJOINT * * part cINSERT b0 part cEMPTY * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cSUBSET * part caff * * part cINSERT b0 * * part cINSERT b2 part cEMPTY * part caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0 * / ! ! c==> c/\ cIN b0 * part caff * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cDISJOINT * * part cINSERT b0 part cEMPTY * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cSUBSET * part caff * * part cINSERT b0 * * part cINSERT b2 part cEMPTY * part caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0
+ |- ((T /\ t) = t)
T c= c/\ cT f0 f0
+ |- ((~ p) = (p ==> F))
T c= c~ f0 c==> f0 cF
+ |- ((\y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY))))))) y)
T * / ! c==> c/\ cIN f0 * part caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cDISJOINT * * part cINSERT f0 part cEMPTY * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cSUBSET * part caff * * part cINSERT f0 * * part cINSERT b1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT b0 part cEMPTY f1
+ |- ((\x. (!y. (!z. (((x IN (aff (y INSERT (z INSERT EMPTY)))) /\ ((DISJOINT (x INSERT EMPTY)) (y INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))))))) x)
T * / ! ! c==> c/\ cIN b0 * part caff * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cDISJOINT * * part cINSERT b0 part cEMPTY * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cSUBSET * part caff * * part cINSERT b0 * * part cINSERT b2 part cEMPTY * part caff * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0
+ |- (((!x'. ((x' IN (aff (x INSERT (z INSERT EMPTY)))) ==> (x' IN (aff (x INSERT (y INSERT EMPTY)))))) ==> ((!x'. ((x' IN (aff (x INSERT (y INSERT EMPTY)))) ==> (x' IN (aff (x INSERT (z INSERT EMPTY)))))) ==> (!x'. ((x' IN (aff (x INSERT (z INSERT EMPTY)))) = (x' IN (aff (x INSERT (y INSERT EMPTY)))))))) = (((aff (x INSERT (z INSERT EMPTY))) SUBSET (aff (x INSERT (y INSERT EMPTY)))) ==> (((aff (x INSERT (y INSERT EMPTY))) SUBSET (aff (x INSERT (z INSERT EMPTY)))) ==> ((aff (x INSERT (z INSERT EMPTY))) = (aff (x INSERT (y INSERT EMPTY)))))))
T c= c==> ! c==> cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c==> ! c==> cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY ! c= cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN b0 * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY c==> cSUBSET * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part caff * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part caff * * part cINSERT f0 * * part cINSERT f2 part cEMPTY
