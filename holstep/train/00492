N Bump.MCELL3_VX
C |- (!V. (!ul. (!X. (((packing V) /\ ((saturated V) /\ ((X = ((mcell3 V) ul)) /\ (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0)))))))) ==> (((VX V) X) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X)))))))))
T c==> c/\ cpacking f0 c/\ csaturated f0 c/\ c= f1 * * part cmcell3 f0 f2 cIN f2 * * part cbarV f0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * part cVX f0 f1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 f1
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D COND_ELIM_THM
A |- ((P (((COND c) x) y)) = ((c ==> (P x)) /\ ((~ c) ==> (P y))))
T c= * f0 cCOND f1 f2 f3 c/\ c==> f1 * f0 f2 c==> c~ f1 * f0 f3
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D ADD_SUB
A |- (!m. (!n. (((m + n) - n) = m)))
T c= c- c+ f0 f1 f1 f0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D SUBSET
A |- (!s. (!t. ((s SUBSET t) = (!x. ((x IN s) ==> (x IN t))))))
T c= cSUBSET f0 f1 ! c==> cIN b0 f0 cIN b0 f1
D EMPTY_SUBSET
A |- (!s. (EMPTY SUBSET s))
T cSUBSET part cEMPTY f0
D Bump.BETA_ORDERED_PAIR_THM
A |- (!g. (!x. (((GABS (\f. (!u. (!v. ((GEQ (f (u , v))) ((g u) v)))))) x) = ((g (FST x)) (SND x)))))
T c= cGABS / ! ! cGEQ * b0 c, b1 b2 * * f0 b1 b2 f1 * * f0 cFST f1 cSND f1
D Pack_defs.VX
A |- (!V. (!X. (((VX V) X) = (((COND (negligible X)) EMPTY) ((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X))))))
T c= * * part cVX f0 f1 * * * part cCOND cnegligible f1 part cEMPTY * * part cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 * part cLET_END * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f0 f1
D Bump.MCELL3_CELL_PARAMETERS_EXIST
A |- (!V. (!ul. (!X. (((packing V) /\ ((saturated V) /\ ((X = ((mcell3 V) ul)) /\ ((ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0))))) /\ (~ (negligible X)))))) ==> ((FST ((cell_params V) X)) = (NUMERAL (BIT1 (BIT1 _0))))))))
T c==> c/\ cpacking f0 c/\ csaturated f0 c/\ c= f1 * * part cmcell3 f0 f2 c/\ cIN f2 * * part cbarV f0 cNUMERAL cBIT1 cBIT1 c_0 c~ cnegligible f1 c= cFST ccell_params f0 f1 cNUMERAL cBIT1 cBIT1 c_0
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
+ |- ((!ul. (!X. (((packing V) /\ ((saturated V) /\ ((X = ((mcell3 V) ul)) /\ (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0)))))))) ==> ((((COND (negligible X)) EMPTY) ((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X)))))))) = T)
T c= ! ! c==> c/\ cpacking f0 c/\ csaturated f0 c/\ c= b1 * * part cmcell3 f0 b0 cIN b0 * * part cbarV f0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * * part cCOND cnegligible b1 part cEMPTY * * part cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 * part cLET_END * * * part cCOND c= b3 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b3 cNUMERAL cBIT1 c_0 b4 ccell_params f0 b1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 b1 cT
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ (~ (negligible X)), (packing V), (saturated V), (X = ((mcell3 V) ul)), (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0))))) |- ((((FST ((cell_params V) ((mcell3 V) ul))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> ((((COND ((FST ((cell_params V) ((mcell3 V) ul))) = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex ((FST ((cell_params V) ((mcell3 V) ul))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul)))))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul))))))) = ((((packing V) /\ ((saturated V) /\ ((X = ((mcell3 V) ul)) /\ ((ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0))))) /\ (~ (negligible X)))))) ==> ((FST ((cell_params V) X)) = (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((COND ((FST ((cell_params V) X)) = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex ((FST ((cell_params V) X)) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) X))))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X)))))))
T c==> c~ cnegligible f0 c==> cpacking f1 c==> csaturated f1 c==> c= f0 * * part cmcell3 f1 f2 c==> cIN f2 * * part cbarV f1 cNUMERAL cBIT1 cBIT1 c_0 c= c==> c= cFST ccell_params f1 * * part cmcell3 f1 f2 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * * part cCOND c= cFST ccell_params f1 * * part cmcell3 f1 f2 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- cFST ccell_params f1 * * part cmcell3 f1 f2 cNUMERAL cBIT1 c_0 cSND ccell_params f1 * * part cmcell3 f1 f2 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f1 * * part cmcell3 f1 f2 c==> c==> c/\ cpacking f1 c/\ csaturated f1 c/\ c= f0 * * part cmcell3 f1 f2 c/\ cIN f2 * * part cbarV f1 cNUMERAL cBIT1 cBIT1 c_0 c~ cnegligible f0 c= cFST ccell_params f1 f0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * * part cCOND c= cFST ccell_params f1 f0 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- cFST ccell_params f1 f0 cNUMERAL cBIT1 c_0 cSND ccell_params f1 f0 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f1 f0
+ |- (T = ((set_of_list ((truncate_simplex ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul))))) SUBSET (set_of_list ((truncate_simplex ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul)))))))
T c= cT cSUBSET * part cset_of_list ctruncate_simplex c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1 * part cset_of_list ctruncate_simplex c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1
- |- (~ ((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL _0)))
T c~ c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL c_0
+ |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ |- ((\g. (!x. (((GABS (\f. (!u. (!v. ((GEQ (f (u , v))) ((g u) v)))))) x) = ((g (FST x)) (SND x))))) g)
T * / ! c= cGABS / ! ! cGEQ * b2 c, b3 b4 * * b0 b3 b4 b1 * * b0 cFST b1 cSND b1 f0
+ |- (((FST ((cell_params V) ((mcell3 V) ul))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> ((((COND ((FST ((cell_params V) ((mcell3 V) ul))) = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex ((FST ((cell_params V) ((mcell3 V) ul))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul)))))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul)))))))
T c==> c= cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * * part cCOND c= cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((~ (negligible X)) ==> (((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X)) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X)))))) = (((negligible X) ==> (EMPTY SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X)))))) /\ ((~ (negligible X)) ==> (((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X)) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))))))
T c= c==> c~ cnegligible f0 cSUBSET * * part cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 * part cLET_END * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f1 f0 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f1 f0 c/\ c==> cnegligible f0 cSUBSET part cEMPTY * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f1 f0 c==> c~ cnegligible f0 cSUBSET * * part cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 * part cLET_END * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f1 f0 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f1 f0
+ |- (((!x. (((GABS (\f. (!u. (!v. ((GEQ (f (u , v))) ((g u) v)))))) x) = ((g (FST x)) (SND x)))) ==> ((\x. (((GABS (\f. (!u. (!v. ((GEQ (f (u , v))) ((g u) v)))))) x) = ((g (FST x)) (SND x)))) x)) = ((\x. (((GABS (\f. (!u. (!v. ((GEQ (f (u , v))) ((g u) v)))))) x) = ((g (FST x)) (SND x)))) x))
T c= c==> ! c= cGABS / ! ! cGEQ * b1 c, b2 b3 * * f0 b2 b3 b0 * * f0 cFST b0 cSND b0 * / c= cGABS / ! ! cGEQ * b1 c, b2 b3 * * f0 b2 b3 b0 * * f0 cFST b0 cSND b0 f1 * / c= cGABS / ! ! cGEQ * b1 c, b2 b3 * * f0 b2 b3 b0 * * f0 cFST b0 cSND b0 f1
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ |- (((GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))) ((cell_params V) X)) = (((COND ((FST ((cell_params V) X)) = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex ((FST ((cell_params V) X)) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) X))))))
T c= * * part cGABS / ! ! cGEQ * b0 c, b1 b2 * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f0 f1 * * * part cCOND c= cFST ccell_params f0 f1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- cFST ccell_params f0 f1 cNUMERAL cBIT1 c_0 cSND ccell_params f0 f1
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
+ ((FST ((cell_params V) ((mcell3 V) ul))) = (NUMERAL (BIT1 (BIT1 _0)))) |- (((set_of_list ((truncate_simplex ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul))))) SUBSET (set_of_list ((truncate_simplex ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul)))))) = ((((COND ((FST ((cell_params V) ((mcell3 V) ul))) = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex ((FST ((cell_params V) ((mcell3 V) ul))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul)))))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul)))))))
T c==> c= cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL cBIT1 cBIT1 c_0 c= cSUBSET * part cset_of_list ctruncate_simplex c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1 * part cset_of_list ctruncate_simplex c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1 cSUBSET * * * part cCOND c= cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1
+ (packing V), (saturated V), (X = ((mcell3 V) ul)), (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0))))) |- (((negligible X) ==> (EMPTY SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X)))))) /\ ((~ (negligible X)) ==> (((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X)) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X)))))))
T c==> cpacking f0 c==> csaturated f0 c==> c= f1 * * part cmcell3 f0 f2 c==> cIN f2 * * part cbarV f0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c==> cnegligible f1 cSUBSET part cEMPTY * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 f1 c==> c~ cnegligible f1 cSUBSET * * part cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 * part cLET_END * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f0 f1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 f1
+ |- (T = (EMPTY SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))))
T c= cT cSUBSET part cEMPTY * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 f1
+ (packing V), (saturated V), (X = ((mcell3 V) ul)), (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0))))) |- ((~ (negligible X)) ==> (((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X)) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))))
T c==> cpacking f0 c==> csaturated f0 c==> c= f1 * * part cmcell3 f0 f2 c==> cIN f2 * * part cbarV f0 cNUMERAL cBIT1 cBIT1 c_0 c==> c~ cnegligible f1 cSUBSET * * part cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 * part cLET_END * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f0 f1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 f1
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ |- (((((NUMERAL (BIT0 (BIT1 _0))) + (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT1 _0))))) = (((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT1 _0)))))
T c= c==> c= c+ cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c= c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
+ |- ((\f. (!x. (((LET f) x) = (f x)))) f)
T * / ! c= cLET b0 b1 * b0 b1 f0
+ |- (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL c_0 cF
+ |- (((!t. ((LET_END t) = t)) ==> ((\t. ((LET_END t) = t)) t)) = ((\t. ((LET_END t) = t)) t))
T c= c==> ! c= cLET_END b0 b0 * / c= cLET_END b0 b0 f0 * / c= cLET_END b0 b0 f0
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
+ |- ((!V. (!ul. (!X. (((packing V) /\ ((saturated V) /\ ((X = ((mcell3 V) ul)) /\ (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0)))))))) ==> ((((COND (negligible X)) EMPTY) ((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))))))) = (!V. (!ul. (!X. (((packing V) /\ ((saturated V) /\ ((X = ((mcell3 V) ul)) /\ (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0)))))))) ==> (((VX V) X) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))))))))
T c= ! ! ! c==> c/\ cpacking b0 c/\ csaturated b0 c/\ c= b2 * * part cmcell3 b0 b1 cIN b1 * * part cbarV b0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * * part cCOND cnegligible b2 part cEMPTY * * part cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 * part cLET_END * * * part cCOND c= b4 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b4 cNUMERAL cBIT1 c_0 b5 ccell_params b0 b2 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params b0 b2 ! ! ! c==> c/\ cpacking b0 c/\ csaturated b0 c/\ c= b2 * * part cmcell3 b0 b1 cIN b1 * * part cbarV b0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * part cVX b0 b2 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params b0 b2
+ ((FST ((cell_params V) ((mcell3 V) ul))) = (NUMERAL (BIT1 (BIT1 _0)))) |- (((FST ((cell_params V) ((mcell3 V) ul))) = (NUMERAL (BIT1 (BIT1 _0)))) /\ ((((COND ((FST ((cell_params V) ((mcell3 V) ul))) = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex ((FST ((cell_params V) ((mcell3 V) ul))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul)))))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul)))))))
T c==> c= cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL cBIT1 cBIT1 c_0 c/\ c= cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * * part cCOND c= cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- cFST ccell_params f0 * * part cmcell3 f0 f1 cNUMERAL cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1
+ |- (((!g. (!x. (((GABS (\f. (!u. (!v. ((GEQ (f (u , v))) ((g u) v)))))) x) = ((g (FST x)) (SND x))))) ==> ((\g. (!x. (((GABS (\f. (!u. (!v. ((GEQ (f (u , v))) ((g u) v)))))) x) = ((g (FST x)) (SND x))))) g)) = ((\g. (!x. (((GABS (\f. (!u. (!v. ((GEQ (f (u , v))) ((g u) v)))))) x) = ((g (FST x)) (SND x))))) g))
T c= c==> ! ! c= cGABS / ! ! cGEQ * b2 c, b3 b4 * * b0 b3 b4 b1 * * b0 cFST b1 cSND b1 * / ! c= cGABS / ! ! cGEQ * b2 c, b3 b4 * * b0 b3 b4 b1 * * b0 cFST b1 cSND b1 f0 * / ! c= cGABS / ! ! cGEQ * b2 c, b3 b4 * * b0 b3 b4 b1 * * b0 cFST b1 cSND b1 f0
+ |- ((((packing V) /\ ((saturated V) /\ ((X = ((mcell3 V) ul)) /\ (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0)))))))) ==> ((((COND (negligible X)) EMPTY) ((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X)))))) = T)
T c= c==> c/\ cpacking f0 c/\ csaturated f0 c/\ c= f1 * * part cmcell3 f0 f2 cIN f2 * * part cbarV f0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * * part cCOND cnegligible f1 part cEMPTY * * part cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 * part cLET_END * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f0 f1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 f1 cT
+ |- ((!X. (((packing V) /\ ((saturated V) /\ ((X = ((mcell3 V) ul)) /\ (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0)))))))) ==> ((((COND (negligible X)) EMPTY) ((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))))) = T)
T c= ! c==> c/\ cpacking f0 c/\ csaturated f0 c/\ c= b0 * * part cmcell3 f0 f1 cIN f1 * * part cbarV f0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET * * * part cCOND cnegligible b0 part cEMPTY * * part cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 * part cLET_END * * * part cCOND c= b2 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b2 cNUMERAL cBIT1 c_0 b3 ccell_params f0 b0 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 b0 cT
+ |- (((((COND ((FST ((cell_params V) X)) = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex ((FST ((cell_params V) X)) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) X))))) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))) = (((GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))) ((cell_params V) X)) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))))
T c= cSUBSET * * * part cCOND c= cFST ccell_params f0 f1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- cFST ccell_params f0 f1 cNUMERAL cBIT1 c_0 cSND ccell_params f0 f1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 f1 cSUBSET * * part cGABS / ! ! cGEQ * b0 c, b1 b2 * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f0 f1 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f0 f1
+ (ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0))))) |- ((ul IN ((barV V) (NUMERAL (BIT1 (BIT1 _0))))) = T)
T c==> cIN f0 * * part cbarV f1 cNUMERAL cBIT1 cBIT1 c_0 c= cIN f0 * * part cbarV f1 cNUMERAL cBIT1 cBIT1 c_0 cT
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
+ |- (((!s. (EMPTY SUBSET s)) ==> ((\s. (EMPTY SUBSET s)) s)) = ((\s. (EMPTY SUBSET s)) s))
T c= c==> ! cSUBSET part cEMPTY b0 * / cSUBSET part cEMPTY b0 f0 * / cSUBSET part cEMPTY b0 f0
+ |- ((\x. (((GABS (\f. (!u. (!v. ((GEQ (f (u , v))) ((g u) v)))))) x) = ((g (FST x)) (SND x)))) x)
T * / c= cGABS / ! ! cGEQ * b1 c, b2 b3 * * f0 b2 b3 b0 * * f0 cFST b0 cSND b0 f1
+ |- ((set_of_list ((truncate_simplex ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul))))) SUBSET (set_of_list ((truncate_simplex ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0)))) (SND ((cell_params V) ((mcell3 V) ul))))))
T cSUBSET * part cset_of_list ctruncate_simplex c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1 * part cset_of_list ctruncate_simplex c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cSND ccell_params f0 * * part cmcell3 f0 f1
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
- (negligible X) |- ((EMPTY SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))) = (EMPTY SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))))
T c==> cnegligible f0 c= cSUBSET part cEMPTY * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f1 f0 cSUBSET part cEMPTY * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f1 f0
- ((NUMERAL _0) = (NUMERAL (BIT1 (BIT1 _0)))) |- ((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL _0))
T c==> c= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL c_0
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
- |- (F = (~ T))
T c= cF c~ cT
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- |- (~ ((NUMERAL _0) = (NUMERAL (BIT1 (BIT1 _0)))))
T c~ c= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((~ T) = F)
T c= c~ cT cF
- ((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL _0)) |- ((NUMERAL _0) = (NUMERAL (BIT1 (BIT1 _0))))
T c==> c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL c_0 c= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (((NUMERAL _0) = (NUMERAL (BIT1 (BIT1 _0)))) = F)
T c= c= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cF
- (~ (negligible X)) |- ((((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X)) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))) = (((LET (GABS (\f. (!k. (!ul. ((GEQ (f (k , ul))) (LET_END (((COND (k = (NUMERAL _0))) EMPTY) (set_of_list ((truncate_simplex (k - (NUMERAL (BIT1 _0)))) ul)))))))))) ((cell_params V) X)) SUBSET (set_of_list ((truncate_simplex (NUMERAL (BIT0 (BIT1 _0)))) (SND ((cell_params V) X))))))
T c==> c~ cnegligible f0 c= cSUBSET * * part cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 * part cLET_END * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f1 f0 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f1 f0 cSUBSET * * part cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 * part cLET_END * * * part cCOND c= b1 cNUMERAL c_0 part cEMPTY * part cset_of_list ctruncate_simplex c- b1 cNUMERAL cBIT1 c_0 b2 ccell_params f1 f0 * part cset_of_list ctruncate_simplex cNUMERAL cBIT0 cBIT1 c_0 cSND ccell_params f1 f0
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- (((~ ((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL _0))) ==> (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL _0)) = F)) = (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL _0)) = F))
T c= c==> c~ c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL c_0 c= c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL c_0 cF c= c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL c_0 cF
- (negligible X) |- ((negligible X) = T)
T c==> cnegligible f0 c= cnegligible f0 cT
- |- (~ (~ T))
T c~ c~ cT
- |- (((~ ((NUMERAL _0) = (NUMERAL (BIT1 (BIT1 _0))))) ==> (((NUMERAL _0) = (NUMERAL (BIT1 (BIT1 _0)))) = F)) = (((NUMERAL _0) = (NUMERAL (BIT1 (BIT1 _0)))) = F))
T c= c==> c~ c= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= c= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cF c= c= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cF
