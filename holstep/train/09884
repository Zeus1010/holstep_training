N List_hypermap.rot_list_pairs
C |- (!s. (!n. (((rot n) (list_pairs s)) = (list_pairs ((rot n) s)))))
T c= crot f0 clist_pairs f1 clist_pairs crot f0 f1
D TRUTH
A |- T
T cT
D Seq.size_rot
A |- (!n0. (!s. ((sizel ((rot n0) s)) = (sizel s))))
T c= csizel crot f0 f1 csizel f1
D Seq.rot_rot
A |- (!m. (!n. (!s. (((rot m) ((rot n) s)) = ((rot n) ((rot m) s))))))
T c= crot f0 crot f1 f2 crot f1 crot f0 f2
D Seq2.rot_zip
A |- (!s1. (!s2. (!n. (((sizel s1) = (sizel s2)) ==> (((rot n) ((zip s1) s2)) = ((zip ((rot n) s1)) ((rot n) s2)))))))
T c==> c= csizel f0 csizel f1 c= crot f2 czip f0 f1 czip crot f2 f0 crot f2 f1
D List_hypermap.list_pairs
A |- (!list. ((list_pairs list) = ((zip list) ((rot (NUMERAL (BIT1 _0))) list))))
T c= clist_pairs f0 czip f0 crot cNUMERAL cBIT1 c_0 f0
+ |- (((!m. (!n. (!s. (((rot m) ((rot n) s)) = ((rot n) ((rot m) s)))))) ==> ((\m. (!n. (!s. (((rot m) ((rot n) s)) = ((rot n) ((rot m) s)))))) m)) = ((\m. (!n. (!s. (((rot m) ((rot n) s)) = ((rot n) ((rot m) s)))))) m))
T c= c==> ! ! ! c= crot b0 crot b1 b2 crot b1 crot b0 b2 * / ! ! c= crot b0 crot b1 b2 crot b1 crot b0 b2 f0 * / ! ! c= crot b0 crot b1 b2 crot b1 crot b0 b2 f0
+ |- ((((rot n) ((zip s) ((rot (NUMERAL (BIT1 _0))) s))) = ((zip ((rot n) s)) ((rot n) ((rot (NUMERAL (BIT1 _0))) s)))) ==> (((rot n) ((zip s) ((rot (NUMERAL (BIT1 _0))) s))) = (list_pairs ((rot n) s))))
T c==> c= crot f0 czip f1 crot cNUMERAL cBIT1 c_0 f1 czip crot f0 f1 crot f0 crot cNUMERAL cBIT1 c_0 f1 c= crot f0 czip f1 crot cNUMERAL cBIT1 c_0 f1 clist_pairs crot f0 f1
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- ((\n0. (!s. ((sizel ((rot n0) s)) = (sizel s)))) n0)
T * / ! c= csizel crot b0 b1 csizel b1 f0
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ |- (((((sizel s) = (sizel ((rot (NUMERAL (BIT1 _0))) s))) /\ ((((rot n) ((zip s) ((rot (NUMERAL (BIT1 _0))) s))) = ((zip ((rot n) s)) ((rot n) ((rot (NUMERAL (BIT1 _0))) s)))) ==> (((rot n) ((zip s) ((rot (NUMERAL (BIT1 _0))) s))) = (list_pairs ((rot n) s))))) ==> ((((sizel s) = (sizel ((rot (NUMERAL (BIT1 _0))) s))) ==> (((rot n) ((zip s) ((rot (NUMERAL (BIT1 _0))) s))) = ((zip ((rot n) s)) ((rot n) ((rot (NUMERAL (BIT1 _0))) s))))) ==> (((rot n) ((zip s) ((rot (NUMERAL (BIT1 _0))) s))) = (list_pairs ((rot n) s))))) = ((((sizel s) = (sizel ((rot (NUMERAL (BIT1 _0))) s))) ==> (((rot n) ((zip s) ((rot (NUMERAL (BIT1 _0))) s))) = ((zip ((rot n) s)) ((rot n) ((rot (NUMERAL (BIT1 _0))) s))))) ==> (((rot n) ((zip s) ((rot (NUMERAL (BIT1 _0))) s))) = (list_pairs ((rot n) s)))))
T c= c==> c/\ c= csizel f0 csizel crot cNUMERAL cBIT1 c_0 f0 c==> c= crot f1 czip f0 crot cNUMERAL cBIT1 c_0 f0 czip crot f1 f0 crot f1 crot cNUMERAL cBIT1 c_0 f0 c= crot f1 czip f0 crot cNUMERAL cBIT1 c_0 f0 clist_pairs crot f1 f0 c==> c==> c= csizel f0 csizel crot cNUMERAL cBIT1 c_0 f0 c= crot f1 czip f0 crot cNUMERAL cBIT1 c_0 f0 czip crot f1 f0 crot f1 crot cNUMERAL cBIT1 c_0 f0 c= crot f1 czip f0 crot cNUMERAL cBIT1 c_0 f0 clist_pairs crot f1 f0 c==> c==> c= csizel f0 csizel crot cNUMERAL cBIT1 c_0 f0 c= crot f1 czip f0 crot cNUMERAL cBIT1 c_0 f0 czip crot f1 f0 crot f1 crot cNUMERAL cBIT1 c_0 f0 c= crot f1 czip f0 crot cNUMERAL cBIT1 c_0 f0 clist_pairs crot f1 f0
+ |- ((\s. ((sizel ((rot n0) s)) = (sizel s))) s)
T * / c= csizel crot f0 b0 csizel b0 f1
+ |- (T = ((sizel s) = (sizel s)))
T c= cT c= csizel f0 csizel f0
+ (((zip list) ((rot (NUMERAL (BIT1 _0))) list)) = (list_pairs list)) |- ((list_pairs list) = ((zip list) ((rot (NUMERAL (BIT1 _0))) list)))
T c==> c= czip f0 crot cNUMERAL cBIT1 c_0 f0 clist_pairs f0 c= clist_pairs f0 czip f0 crot cNUMERAL cBIT1 c_0 f0
+ |- ((\list. ((list_pairs list) = ((zip list) ((rot (NUMERAL (BIT1 _0))) list)))) list)
T * / c= clist_pairs b0 czip b0 crot cNUMERAL cBIT1 c_0 b0 f0
+ |- ((sizel s) = (sizel s))
T c= csizel f0 csizel f0
+ |- ((sizel s) = (sizel ((rot (NUMERAL (BIT1 _0))) s)))
T c= csizel f0 csizel crot cNUMERAL cBIT1 c_0 f0
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- (((list_pairs ((rot n) s)) = (list_pairs ((rot n) s))) = (((zip ((rot n) s)) ((rot (NUMERAL (BIT1 _0))) ((rot n) s))) = (list_pairs ((rot n) s))))
T c= c= clist_pairs crot f0 f1 clist_pairs crot f0 f1 c= czip crot f0 f1 crot cNUMERAL cBIT1 c_0 crot f0 f1 clist_pairs crot f0 f1
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- |- (T = ((list_pairs ((rot n) s)) = (list_pairs ((rot n) s))))
T c= cT c= clist_pairs crot f0 f1 clist_pairs crot f0 f1
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- ((sizel s1) = (sizel s2)) |- (((sizel s1) = (sizel s2)) /\ (((rot n) ((zip s1) s2)) = ((zip ((rot n) s1)) ((rot n) s2))))
T c==> c= csizel f0 csizel f1 c/\ c= csizel f0 csizel f1 c= crot f2 czip f0 f1 czip crot f2 f0 crot f2 f1
