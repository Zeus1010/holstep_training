N List_hypermap_iso.list_of_elements_split
C |- (!L. (!d. ((perm_eq (list_of_elements L)) (list_of_elements ((split_list_hyp L) d)))))
T cperm_eq clist_of_elements f0 clist_of_elements csplit_list_hyp f0 f1
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D MULT_CLAUSES
A |- ((!n. (((NUMERAL _0) * n) = (NUMERAL _0))) /\ ((!m. ((m * (NUMERAL _0)) = (NUMERAL _0))) /\ ((!n. (((NUMERAL (BIT1 _0)) * n) = n)) /\ ((!m. ((m * (NUMERAL (BIT1 _0))) = m)) /\ ((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) /\ (!m. (!n. ((m * (SUC n)) = (m + (m * n))))))))))
T c/\ ! c= c* cNUMERAL c_0 b0 cNUMERAL c_0 c/\ ! c= c* b0 cNUMERAL c_0 cNUMERAL c_0 c/\ ! c= c* cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= c* b0 cNUMERAL cBIT1 c_0 b0 c/\ ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D HD
A |- ((HD ((CONS h) t)) = h)
T c= cHD cCONS f0 f1 f0
D MEM
A |- ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))
T c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 f2 c\/ c= f0 f1 cMEM f0 f2
D REAL_ADD_SYM
A |- (!x. (!y. (((real_add x) y) = ((real_add y) x))))
T c= creal_add f0 f1 creal_add f1 f0
D REAL_ADD_ASSOC
A |- (!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z)))))
T c= creal_add f0 creal_add f1 f2 creal_add creal_add f0 f1 f2
D REAL_ADD_LID
A |- (!x. (((real_add (real_of_num (NUMERAL _0))) x) = x))
T c= creal_add creal_of_num cNUMERAL c_0 f0 f0
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_ADD_RID
A |- (!x. (((real_add x) (real_of_num (NUMERAL _0))) = x))
T c= creal_add f0 creal_of_num cNUMERAL c_0 f0
D REAL_ADD_RINV
A |- (!x. (((real_add x) (real_neg x)) = (real_of_num (NUMERAL _0))))
T c= creal_add f0 creal_neg f0 creal_of_num cNUMERAL c_0
D REAL_MUL_RZERO
A |- (!x. (((real_mul x) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0))))
T c= creal_mul f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D REAL_NEG_ADD
A |- (!x. (!y. ((real_neg ((real_add x) y)) = ((real_add (real_neg x)) (real_neg y)))))
T c= creal_neg creal_add f0 f1 creal_add creal_neg f0 creal_neg f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_LE_LT
A |- (!x. (!y. (((real_le x) y) = (((real_lt x) y) \/ (x = y)))))
T c= creal_le f0 f1 c\/ creal_lt f0 f1 c= f0 f1
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D Real_ext.REAL_PROP_POS_ADD2
A |- (!x. (!y. ((((real_lt (real_of_num (NUMERAL _0))) x) /\ ((real_lt (real_of_num (NUMERAL _0))) y)) ==> ((real_lt (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c==> c/\ creal_lt creal_of_num cNUMERAL c_0 f0 creal_lt creal_of_num cNUMERAL c_0 f1 creal_lt creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D int_le
A |- (!x. (!y. (((int_le x) y) = ((real_le (real_of_int x)) (real_of_int y)))))
T c= cint_le f0 f1 creal_le creal_of_int f0 creal_of_int f1
D int_of_num_th
A |- (!n. ((real_of_int (int_of_num n)) = (real_of_num n)))
T c= creal_of_int cint_of_num f0 creal_of_num f0
D int_add_th
A |- (!x. (!y. ((real_of_int ((int_add x) y)) = ((real_add (real_of_int x)) (real_of_int y)))))
T c= creal_of_int cint_add f0 f1 creal_add creal_of_int f0 creal_of_int f1
D INT_LT_DISCRETE
A |- (!x. (!y. (((int_lt x) y) = ((int_le ((int_add x) (int_of_num (NUMERAL (BIT1 _0))))) y))))
T c= cint_lt f0 f1 cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f1
D INT_NOT_LE
A |- (!x. (!y. ((~ ((int_le x) y)) = ((int_lt y) x))))
T c= c~ cint_le f0 f1 cint_lt f1 f0
D INT_NOT_LT
A |- (!x. (!y. ((~ ((int_lt x) y)) = ((int_le y) x))))
T c= c~ cint_lt f0 f1 cint_le f1 f0
D INT_OF_NUM_LE
A |- (!m. (!n. (((int_le (int_of_num m)) (int_of_num n)) = (m <= n))))
T c= cint_le cint_of_num f0 cint_of_num f1 c<= f0 f1
D INT_OF_NUM_LT
A |- (!m. (!n. (((int_lt (int_of_num m)) (int_of_num n)) = (m < n))))
T c= cint_lt cint_of_num f0 cint_of_num f1 c< f0 f1
D INT_POS
A |- (!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n)))
T cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
D ssreflect_eq_def
A |- (!v. (!P. (((ssreflect_eq v) P) = P)))
T c= cssreflect_eq f0 f1 f1
D bool_elim
A |- (!P. (((P T) /\ (P F)) ==> (!x. (P x))))
T c==> c/\ * f0 cT * f0 cF ! * f0 b0
D list_cases
A |- (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l))))
T c==> c/\ * f0 cNIL ! ! * f0 cCONS b0 b1 ! * f0 b0
D Ssrbool.orb_id2l
A |- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))))
T c==> c==> c~ f0 c= f1 f2 c= c\/ f0 f1 c\/ f0 f2
D Ssrbool.orb_id2r
A |- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))))
T c==> c==> c~ f0 c= f1 f2 c= c\/ f1 f0 c\/ f2 f0
D Ssrnat.ltn0
A |- (!n. ((n < (NUMERAL _0)) = F))
T c= c< f0 cNUMERAL c_0 cF
D Seq.size_nil
A |- ((sizel NIL) = (NUMERAL _0))
T c= csizel cNIL cNUMERAL c_0
D Seq.cats0
A |- (!s. (((cat s) NIL) = s))
T c= ccat f0 cNIL f0
D Seq.rotr
A |- (!n. (!s. (((rotr n) s) = ((rot ((sizel s) - n)) s))))
T c= crotr f0 f1 crot c- csizel f1 f0 f1
D Seq.drop_cat
A |- (!n0. (!s1. (!s2. (((dropl n0) ((cat s1) s2)) = (((COND (n0 < (sizel s1))) ((cat ((dropl n0) s1)) s2)) ((dropl (n0 - (sizel s1))) s2))))))
T c= cdropl f0 ccat f1 f2 cCOND c< f0 csizel f1 ccat cdropl f0 f1 f2 cdropl c- f0 csizel f1 f2
D Seq.cat_take_drop
A |- (!n0. (!s. (((cat ((take n0) s)) ((dropl n0) s)) = s)))
T c= ccat ctake f0 f1 cdropl f0 f1 f1
D Seq.size_take
A |- (!n0. (!s. ((sizel ((take n0) s)) = (((COND (n0 < (sizel s))) n0) (sizel s)))))
T c= csizel ctake f0 f1 cCOND c< f0 csizel f1 f0 csizel f1
D Seq.size_rot
A |- (!n0. (!s. ((sizel ((rot n0) s)) = (sizel s))))
T c= csizel crot f0 f1 csizel f1
D Seq.mem_cat
A |- (!x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))))
T c= cMEM f0 ccat f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
D Seq.mem_undup
A |- (!s. (!x. (((MEM x) (undup s)) = ((MEM x) s))))
T c= cMEM f0 cundup f1 cMEM f0 f1
D Seq.mem_take
A |- (!n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))))
T c==> cMEM f0 ctake f1 f2 cMEM f0 f2
D Seq.mem_drop
A |- (!n0. (!s. (!x. (((MEM x) ((dropl n0) s)) ==> ((MEM x) s)))))
T c==> cMEM f0 cdropl f1 f2 cMEM f0 f2
D Seq.mem_rot
A |- (!n0. (!s. (!x. (((MEM x) ((rot n0) s)) = ((MEM x) s)))))
T c= cMEM f0 crot f1 f2 cMEM f0 f2
D Seq.uniq_perm_eq
A |- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))))
T c==> cuniq f0 c==> cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
D Seq.size_rotr
A |- (!n0. (!s. ((sizel ((rotr n0) s)) = (sizel s))))
T c= csizel crotr f0 f1 csizel f1
D Seq.mem_rotr
A |- (!n0. (!s. (!x. (((MEM x) ((rotr n0) s)) = ((MEM x) s)))))
T c= cMEM f0 crotr f1 f2 cMEM f0 f2
D Seq.flatten0
A |- ((flatten NIL) = NIL)
T c= cflatten cNIL cNIL
D Seq.flatten_cons
A |- (!s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss)))))
T c= cflatten cCONS f0 f1 ccat f0 cflatten f1
D Seq.flatten_cat
A |- (!ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))))
T c= cflatten ccat f0 f1 ccat cflatten f0 cflatten f1
D Seq2.rot_rot_eq_rot
A |- (!s. (!m. (!n. (?k. (((rot m) ((rot n) s)) = ((rot k) s))))))
T c? / c= crot f0 crot f1 f2 crot b0 f2
D List_hypermap.list_of_elements
A |- (!L. ((list_of_elements L) = (undup (flatten L))))
T c= clist_of_elements f0 cundup cflatten f0
D List_hypermap.uniq_list_of_elements
A |- (!L. (uniq (list_of_elements L)))
T cuniq clist_of_elements f0
D List_hypermap_iso.split_list_face
A |- (!f. ((split_list_face f) = (((COND ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS f) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) f)) ((CONS ((CONS (HD f)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) f))) NIL)))))
T c= csplit_list_face f0 cCOND c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 cCONS f0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cCONS cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0 cNIL
D List_hypermap_iso.split_list_hyp_alt
A |- (!L. (!d. (((MEM d) (list_of_darts L)) ==> (((LET (\f. (\n. (LET_END (((split_list_hyp L) d) = ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))) ((find_pair_list L) d)) ((indexl ((find_pair_list L) d)) L)))))
T c==> cMEM f0 clist_of_darts f1 cLET / / cLET_END c= csplit_list_hyp f1 f0 ccat ctake b1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs b0 b0 cdropl c+ b1 cNUMERAL cBIT1 c_0 f1 cfind_pair_list f1 f0 cindexl cfind_pair_list f1 f0 f1
D List_hypermap_iso.d_not_in_dart_split_eq
A |- (!L. (!d. ((~ ((MEM d) (list_of_darts L))) ==> (((split_list_hyp L) d) = L))))
T c==> c~ cMEM f0 clist_of_darts f1 c= csplit_list_hyp f1 f0 f1
D List_hypermap_iso.list_eq_cat_find_pair_list
A |- (!L. (!d. (((MEM d) (list_of_darts L)) ==> (((LET (\f. (\n. (LET_END (L = ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))) ((find_pair_list L) d)) ((indexl ((find_pair_list L) d)) L)))))
T c==> cMEM f0 clist_of_darts f1 cLET / / cLET_END c= f1 ccat ctake b1 f1 ccat cCONS b0 cNIL cdropl c+ b1 cNUMERAL cBIT1 c_0 f1 cfind_pair_list f1 f0 cindexl cfind_pair_list f1 f0 f1
- |- (!f. (((\f. (((find_pair_list L) d) = f)) f) ==> (?f. (((find_pair_list L) d) = f))))
T c==> * / c= cfind_pair_list f0 f1 b0 f2 c? / c= cfind_pair_list f0 f1 b0
+ |- (!n. (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot n) f)) = ((rot k) f))))
T c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot f1 f0 crot b0 f0
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((cat ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 ccat cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
- ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))) |- ((((MEM i) ((rot k) f)) ==> ((MEM i) ((rot k) f))) = ((MEM i) ((rot k) f)))
T c==> cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c= c==> cMEM f0 crot f1 f2 cMEM f0 crot f1 f2 cMEM f0 crot f1 f2
- ((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) |- ((!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) ==> (!l. (P l)))
T c==> c/\ * f0 cNIL ! ! * f0 cCONS b0 b1 c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
- ((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x) |- (((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x) /\ (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)))
T c==> * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1 c/\ * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- ((((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat cCONS cfind_pair_list f2 f1 cNIL cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2
+ (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- ((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 f5 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 f5
- |- ((((find_pair_list L) d) = f) ==> (?f. (((find_pair_list L) d) = f)))
T c==> c= cfind_pair_list f0 f1 f2 c? / c= cfind_pair_list f0 f1 b0
- (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) |- ((((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) /\ (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)))
T c==> c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c/\ c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0
+ |- (!n. (((\n. (((indexl f) L) = n)) n) ==> (((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat ((CONS f) NIL)) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))))))
T c==> * / c= cindexl f0 f1 b0 f2 c= cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1 cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1
- |- ((\q'. ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q'))))) q')
T * / c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> f3 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b0 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> f3 b0 f4
+ |- ((t = F) = (~ t))
T c= c= f0 cF c~ f0
+ |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _10062701) ==> ((~ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) _10062701)) \/ ((int_lt (int_of_num (NUMERAL _0))) _10062701)))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c\/ c~ cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 f0 cint_lt cint_of_num cNUMERAL c_0 f0
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ ((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) |- (~ ((MEM d) (list_of_darts L)))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c~ cMEM f1 clist_of_darts f2
+ |- ((!h. (!t. (((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((MEM (HD ((CONS h) t))) ((CONS h) t))))) = ((((NUMERAL _0) < (sizel NIL)) ==> ((MEM (HD NIL)) NIL)) /\ (!h. (!t. (((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((MEM (HD ((CONS h) t))) ((CONS h) t)))))))
T c= ! ! c==> c< cNUMERAL c_0 csizel cCONS b0 b1 cMEM cHD cCONS b0 b1 cCONS b0 b1 c/\ c==> c< cNUMERAL c_0 csizel cNIL cMEM cHD cNIL cNIL ! ! c==> c< cNUMERAL c_0 csizel cCONS b0 b1 cMEM cHD cCONS b0 b1 cCONS b0 b1
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))), (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) |- ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) /\ ((MEM i) ((rot k) f)))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 c\/ c= f1 cHD crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 c/\ c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 c\/ c= f1 cHD crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 cMEM f1 crot f2 f0
+ |- ((((MEM i) (flatten ((take n) L))) \/ ((MEM i) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))
T c= c\/ cMEM f0 cflatten ctake f1 f2 cMEM f0 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- ((((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((MEM (HD ((CONS h) t))) ((CONS h) t))) = T)
T c= c==> c< cNUMERAL c_0 csizel cCONS f0 f1 cMEM cHD cCONS f0 f1 cCONS f0 f1 cT
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) |- (((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)) = T)
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c= c==> c/\ c/\ cuniq f0 cuniq f1 ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1 cT
- |- (!s. (((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s) ==> (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s))))
T c==> * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 f2 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0
+ |- (((MEM i) (list_of_elements ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))
T c= cMEM f0 clist_of_elements ccat ctake f1 f2 ccat cCONS f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 clist_of_elements ccat ctake f1 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- ((\n0. (!s. (!x. (((MEM x) ((rot n0) s)) = ((MEM x) s))))) k)
T * / ! ! c= cMEM b2 crot b0 b1 cMEM b2 b1 f0
+ |- (((MEM i) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = ((MEM i) (((COND T) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))))
T c= cMEM f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cCOND cT ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2
- ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cT * f0 cF c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
- |- (((!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))) ==> ((\t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))) t)) = ((\t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))) t))
T c= c==> ! c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 b0 c\/ c= f0 f1 cMEM f0 b0 * / c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 b0 c\/ c= f0 f1 cMEM f0 b0 f2 * / c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 b0 c\/ c= f0 f1 cMEM f0 b0 f2
+ |- ((\L. (!d. (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) L)
T * / ! c==> cMEM b1 clist_of_darts b0 c= b0 ccat ctake cindexl cfind_pair_list b0 b1 b0 b0 ccat cCONS cfind_pair_list b0 b1 cNIL cdropl c+ cindexl cfind_pair_list b0 b1 b0 cNUMERAL cBIT1 c_0 b0 f0
+ |- (!f. (((\f. (((find_pair_list L) d) = f)) f) ==> (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))))
T c==> * / c= cfind_pair_list f0 f1 b0 f2 c= cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0
- (((rot k) f) = x) |- (((NUMERAL _0) < (sizel x)) ==> ((MEM (HD x)) x))
T c==> c= crot f0 f1 f2 c==> c< cNUMERAL c_0 csizel f2 cMEM cHD f2 f2
- |- (((!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) ==> ((\s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s1)) = ((\s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s1))
T c= c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 * / ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0 * / ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- F
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 cF
+ |- (P = ((ssreflect_eq f_size) P))
T c= f0 cssreflect_eq f1 f0
+ |- ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)
T * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- |- ((?f. (((find_pair_list L) d) = f)) ==> (?f. (((find_pair_list L) d) = f)))
T c==> c? / c= cfind_pair_list f0 f1 b0 c? / c= cfind_pair_list f0 f1 b0
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) ==> ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)) = ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2))
T c= c==> ! c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- (((MEM d) (list_of_darts L)) /\ ((((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c/\ cMEM f1 clist_of_darts f2 c==> c= csplit_list_hyp f2 f1 ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- |- ((((real_gt x) (real_of_num (NUMERAL _0))) /\ ((real_ge y) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt f0 creal_of_num cNUMERAL c_0 creal_ge f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul f0 f1 creal_of_num cNUMERAL c_0
+ |- ((((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) /\ (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) ==> (!x. (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))) = (!x. (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))))
T c= c==> c/\ c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 ! c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 b0 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 ! c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 b0 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((\s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))) s)
T * / ! c==> cMEM b1 ctake f0 b0 cMEM b1 b0 f1
+ |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
+ |- (((!p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 f4
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))), ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0
- ((\n. (((indexl f) L) = n)) n) |- (((\n. (((indexl f) L) = n)) n) /\ (?n. (((indexl f) L) = n)))
T c==> * / c= cindexl f0 f1 b0 f2 c/\ * / c= cindexl f0 f1 b0 f2 c? / c= cindexl f0 f1 b0
- (((find_pair_list L) d) = f) |- ((((find_pair_list L) d) = f) /\ (?f. (((find_pair_list L) d) = f)))
T c==> c= cfind_pair_list f0 f1 f2 c/\ c= cfind_pair_list f0 f1 f2 c? / c= cfind_pair_list f0 f1 b0
+ |- ((T /\ F) = F)
T c= c/\ cT cF cF
- |- ((?x. (((MEM d) (list_of_darts L)) = x)) ==> (?x. (((MEM d) (list_of_darts L)) = x)))
T c==> c? / c= cMEM f0 clist_of_darts f1 b0 c? / c= cMEM f0 clist_of_darts f1 b0
- |- (T = ((((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> ((NUMERAL _0) < (sizel f))))
T c= cT c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c< cNUMERAL c_0 csizel f0
+ |- (((!n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s))))) ==> ((\n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s))))) n0)) = ((\n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s))))) n0))
T c= c==> ! ! ! c==> cMEM b2 ctake b0 b1 cMEM b2 b1 * / ! ! c==> cMEM b2 ctake b0 b1 cMEM b2 b1 f0 * / ! ! c==> cMEM b2 ctake b0 b1 cMEM b2 b1 f0
+ |- ((m < n) = ((int_lt (int_of_num m)) (int_of_num n)))
T c= c< f0 f1 cint_lt cint_of_num f0 cint_of_num f1
- |- (((!x. (((\x. (((rot k) f) = x)) x) ==> (?x. (((rot k) f) = x)))) ==> ((?x. (((rot k) f) = x)) ==> (?x. (((rot k) f) = x)))) = ((?x. (((rot k) f) = x)) ==> (?x. (((rot k) f) = x))))
T c= c==> ! c==> * / c= crot f0 f1 b1 b0 c? / c= crot f0 f1 b1 c==> c? / c= crot f0 f1 b0 c? / c= crot f0 f1 b0 c==> c? / c= crot f0 f1 b0 c? / c= crot f0 f1 b0
+ |- (!x. (((MEM x) (list_of_elements L)) = ((MEM x) (list_of_elements ((split_list_hyp L) d)))))
T c= cMEM f0 clist_of_elements f1 cMEM f0 clist_of_elements csplit_list_hyp f1 f2
- |- ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL f5 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 f5
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- ((\b. (!a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) b)
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 * / ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b1 b0 c\/ b1 b2 f0
+ |- ((\n0. (!s. ((sizel ((rot n0) s)) = (sizel s)))) n0)
T * / ! c= csizel crot b0 b1 csizel b1 f0
+ |- ((((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (undup ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))) = (((MEM i) (undup ((cat (flatten ((take n) L))) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((MEM i) (undup ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))))
T c= c= cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 cundup ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cMEM f0 cundup ccat cflatten ctake f1 f2 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 cundup ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
- (((MEM d) (list_of_darts L)) = x) |- ((\x. (((MEM d) (list_of_darts L)) = x)) x)
T c==> c= cMEM f0 clist_of_darts f1 f2 * / c= cMEM f0 clist_of_darts f1 b0 f2
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ |- (((!L. (uniq (list_of_elements L))) ==> ((\L. (uniq (list_of_elements L))) L)) = ((\L. (uniq (list_of_elements L))) L))
T c= c==> ! cuniq clist_of_elements b0 * / cuniq clist_of_elements b0 f0 * / cuniq clist_of_elements b0 f0
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1
+ |- (((T /\ (uniq (list_of_elements ((split_list_hyp L) d)))) /\ (!x. (((MEM x) (list_of_elements L)) = ((MEM x) (list_of_elements ((split_list_hyp L) d)))))) = (((uniq (list_of_elements L)) /\ (uniq (list_of_elements ((split_list_hyp L) d)))) /\ (!x. (((MEM x) (list_of_elements L)) = ((MEM x) (list_of_elements ((split_list_hyp L) d)))))))
T c= c/\ c/\ cT cuniq clist_of_elements csplit_list_hyp f0 f1 ! c= cMEM b0 clist_of_elements f0 cMEM b0 clist_of_elements csplit_list_hyp f0 f1 c/\ c/\ cuniq clist_of_elements f0 cuniq clist_of_elements csplit_list_hyp f0 f1 ! c= cMEM b0 clist_of_elements f0 cMEM b0 clist_of_elements csplit_list_hyp f0 f1
- ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) |- (((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c==> c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
+ |- (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x))
T c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) ==> ((MEM i) ((rot k) f)))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cCONS cHD crot f2 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 cMEM f1 crot f2 f0
+ |- (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s))
T c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0
+ |- (((!q'. ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q'))))) ==> ((\q'. ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q'))))) q')) = ((\q'. ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> f3 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b0 c= c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> f3 b0 * / c==> c= cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> f3 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b0 c= c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> f3 b0 f4 * / c==> c= cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> f3 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b0 c= c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> f3 b0 f4
- |- ((!k. ((((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)) ==> (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))))) = ((?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))) ==> (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)))))
T c= ! c==> c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b1 f0 c==> c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- (((!a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))) ==> ((\a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))) a)) = ((\a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))) a))
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= c==> ! ! c==> c==> c~ b0 c= f0 b1 c= c\/ b0 f0 c\/ b0 b1 * / ! c==> c==> c~ b0 c= f0 b1 c= c\/ b0 f0 c\/ b0 b1 f1 * / ! c==> c==> c~ b0 c= f0 b1 c= c\/ b0 f0 c\/ b0 b1 f1
+ |- (((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))) = ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))))
T c= c==> c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ (((indexl f) L) = n) |- ((((MEM i) (list_of_elements ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = (((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat ((CONS f) NIL)) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> c= cindexl f0 f1 f2 c= c= cMEM f3 clist_of_elements ccat ctake f2 f1 ccat cCONS f0 cNIL cdropl c+ f2 cNUMERAL cBIT1 c_0 f1 cMEM f3 clist_of_elements ccat ctake f2 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cdropl c+ f2 cNUMERAL cBIT1 c_0 f1 c= cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1 cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1
+ (((split_list_hyp L) d) = L) |- ((((split_list_hyp L) d) = L) /\ (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> c= csplit_list_hyp f0 f1 f0 c/\ c= csplit_list_hyp f0 f1 f0 c= cMEM f2 clist_of_elements f0 cMEM f2 clist_of_elements csplit_list_hyp f0 f1
+ (~ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))) |- ((~ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))) /\ (((MEM i) (flatten ((CONS f) NIL))) = ((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))))))
T c==> c~ cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c/\ c~ cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3
+ (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))), ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- ((((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))) /\ (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> c= csplit_list_hyp f0 f1 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c==> cssreflect_eq f2 cMEM f1 clist_of_darts f0 c/\ c= csplit_list_hyp f0 f1 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c= cMEM f3 clist_of_elements f0 cMEM f3 clist_of_elements csplit_list_hyp f0 f1
- |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
+ |- (((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))
T c= cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- |- (!x. (((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x) ==> (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x))))
T c==> * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0
+ |- ((\s. ((sizel ((rot n0) s)) = (sizel s))) s)
T * / c= csizel crot f0 b0 csizel b0 f1
- |- (((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))))) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))))) = ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))))))
T c= c==> c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ |- (T = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements L))))
T c= cT c= cMEM f0 clist_of_elements f1 cMEM f0 clist_of_elements f1
+ |- ((t \/ T) = T)
T c= c\/ f0 cT cT
- |- (T = ((~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))))))
T c= cT c==> c~ c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ (~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) /\ (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0
- |- ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> q')))
T c==> c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 f3 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))), ((uniq s1) /\ (uniq s2)) |- ((!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) /\ ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> c/\ cuniq f0 cuniq f1 c/\ ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((?k. (P k)) ==> Q) = (!k. ((P k) ==> Q)))
T c= c==> c? / * f0 b0 f1 ! c==> * f0 b0 f1
+ |- ((\v. (!P. (((ssreflect_eq v) P) = P))) f_size)
T * / ! c= cssreflect_eq b0 b1 b1 f0
+ |- ((((MEM d) (list_of_darts L)) = ((MEM d) (list_of_darts L))) = ((\x. (((MEM d) (list_of_darts L)) = x)) ((MEM d) (list_of_darts L))))
T c= c= cMEM f0 clist_of_darts f1 cMEM f0 clist_of_darts f1 * / c= cMEM f0 clist_of_darts f1 b0 cMEM f0 clist_of_darts f1
+ |- (T = (F ==> ((MEM (HD NIL)) NIL)))
T c= cT c==> cF cMEM cHD cNIL cNIL
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\p'. (!q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4
+ |- ((((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) (flatten ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))
T c= c= cMEM f0 f1 cMEM f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cflatten cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL c= cMEM f0 f1 cMEM f0 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))), ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- ((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (sizel ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 csizel ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0
- |- (!x. (((\x. (((MEM d) (list_of_darts L)) = x)) x) ==> (?x. (((MEM d) (list_of_darts L)) = x))))
T c==> * / c= cMEM f0 clist_of_darts f1 b0 f2 c? / c= cMEM f0 clist_of_darts f1 b0
+ (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))) |- (((((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- ((MEM d) (list_of_darts L))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 cMEM f1 clist_of_darts f2
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
+ |- (((MEM i) (undup ((cat (flatten ((take n) L))) (flatten ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((MEM i) (undup (flatten ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= cMEM f0 cundup ccat cflatten ctake f1 f2 cflatten ccat cCONS f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 cundup cflatten ccat ctake f1 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((!x. (((MEM x) f) = ((MEM x) ((rot k) f)))) ==> ((\x. (((MEM x) f) = ((MEM x) ((rot k) f)))) x)) = ((\x. (((MEM x) f) = ((MEM x) ((rot k) f)))) x))
T c= c==> ! c= cMEM b0 f0 cMEM b0 crot f1 f0 * / c= cMEM b0 f0 cMEM b0 crot f1 f0 f2 * / c= cMEM b0 f0 cMEM b0 crot f1 f0 f2
+ |- ((((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = (((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (undup ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))))
T c= c= cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 cundup ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- (((!ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ==> ((\ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ss1)) = ((\ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ss1))
T c= c==> ! ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 * / ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 f0 * / ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 f0
+ (((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)) = s) |- (s = ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)))
T c==> c= ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 f0 f0 c= f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 f0
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) /\ (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c/\ cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- (((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))) ==> ((MEM i) ((rot k) f)))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c\/ c= f1 cHD crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 cMEM f1 crot f2 f0
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- ((!a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))) = T)
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= ! ! c==> c==> c~ b0 c= f0 b1 c= c\/ b0 f0 c\/ b0 b1 cT
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))), ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))) |- (((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))) /\ ((MEM i) ((rot k) f)))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c\/ c= f1 cHD crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 c/\ c\/ c= f1 cHD crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 cMEM f1 crot f2 f0
+ ((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) |- ((~ ((MEM d) (list_of_darts L))) /\ ((((split_list_hyp L) d) = L) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c/\ c~ cMEM f1 clist_of_darts f2 c==> c= csplit_list_hyp f2 f1 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
+ |- (?k. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)))
T c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 crot b0 f1
- ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) /\ ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))))
T c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c/\ cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2
+ |- ((((MEM i) f) = ((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))))) = (((MEM i) ((cat f) NIL)) = ((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))))))
T c= c= cMEM f0 f1 cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 c= cMEM f0 ccat f1 cNIL cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1
- |- ((((find_pair_list L) d) = f) = ((\f. (((find_pair_list L) d) = f)) f))
T c= c= cfind_pair_list f0 f1 f2 * / c= cfind_pair_list f0 f1 b0 f2
+ |- (((!f. ((split_list_face f) = (((COND ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS f) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) f)) ((CONS ((CONS (HD f)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) f))) NIL))))) ==> ((\f. ((split_list_face f) = (((COND ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS f) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) f)) ((CONS ((CONS (HD f)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) f))) NIL))))) f)) = ((\f. ((split_list_face f) = (((COND ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS f) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) f)) ((CONS ((CONS (HD f)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) f))) NIL))))) f))
T c= c==> ! c= csplit_list_face b0 cCOND c<= csizel b0 cNUMERAL cBIT1 cBIT1 c_0 cCONS b0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cCONS cCONS cHD b0 cdropl cNUMERAL cBIT0 cBIT1 c_0 b0 cNIL * / c= csplit_list_face b0 cCOND c<= csizel b0 cNUMERAL cBIT1 cBIT1 c_0 cCONS b0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cCONS cCONS cHD b0 cdropl cNUMERAL cBIT0 cBIT1 c_0 b0 cNIL f0 * / c= csplit_list_face b0 cCOND c<= csizel b0 cNUMERAL cBIT1 cBIT1 c_0 cCONS b0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cCONS cCONS cHD b0 cdropl cNUMERAL cBIT0 cBIT1 c_0 b0 cNIL f0
- |- ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1
+ |- (((MEM i) (undup (flatten ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((MEM i) (list_of_elements ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))
T c= cMEM f0 cundup cflatten ccat ctake f1 f2 ccat cCONS f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 clist_of_elements ccat ctake f1 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- (T = (((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) \/ T))
T c= cT c\/ cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cT
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) |- ((\s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))) s2)
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 * / c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
+ |- (((NUMERAL _0) < (sizel x)) ==> ((MEM (HD x)) x))
T c==> c< cNUMERAL c_0 csizel f0 cMEM cHD f0 f0
+ |- (((((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((((MEM i) (flatten ((take n) L))) \/ ((MEM i) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= c= c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= c\/ cMEM f0 cflatten ctake f1 f2 cMEM f0 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ (((MEM d) (list_of_darts L)) = x) |- ((((MEM d) (list_of_darts L)) = x) /\ (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> c= cMEM f0 clist_of_darts f1 f2 c/\ c= cMEM f0 clist_of_darts f1 f2 c= cMEM f3 clist_of_elements f1 cMEM f3 clist_of_elements csplit_list_hyp f1 f0
- (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701)))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- (((MEM i) ((rot k) f)) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f1 crot f2 f0 cMEM f1 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cCONS cHD crot f2 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0
- |- ((((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s) = ((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s))
T c= c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 f2 * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 f2
- |- (((!p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 * / ! c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 f4
- |- ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q'))))
T c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> f3 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 f4 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> f3 f4
+ |- (((((uniq (list_of_elements L)) /\ (uniq (list_of_elements ((split_list_hyp L) d)))) /\ (!x. (((MEM x) (list_of_elements L)) = ((MEM x) (list_of_elements ((split_list_hyp L) d)))))) ==> ((perm_eq (list_of_elements L)) (list_of_elements ((split_list_hyp L) d)))) = ((perm_eq (list_of_elements L)) (list_of_elements ((split_list_hyp L) d))))
T c= c==> c/\ c/\ cuniq clist_of_elements f0 cuniq clist_of_elements csplit_list_hyp f0 f1 ! c= cMEM b0 clist_of_elements f0 cMEM b0 clist_of_elements csplit_list_hyp f0 f1 cperm_eq clist_of_elements f0 clist_of_elements csplit_list_hyp f0 f1 cperm_eq clist_of_elements f0 clist_of_elements csplit_list_hyp f0 f1
- |- (T = ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))
T c= cT creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (uniq s1) |- ((!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))
T c==> cuniq f0 c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((MEM i) f) = ((MEM i) f))
T c= cMEM f0 f1 cMEM f0 f1
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ |- (((MEM i) (undup ((cat (flatten ((take n) L))) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((MEM i) (undup ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= cMEM f0 cundup ccat cflatten ctake f1 f2 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 cundup ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- |- (T = (((MEM i) ((rot k) f)) ==> ((MEM i) ((rot k) f))))
T c= cT c==> cMEM f0 crot f1 f2 cMEM f0 crot f1 f2
+ |- (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- |- (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) ==> ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)) = ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1))
T c= c==> ! ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- |- (((!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 * / c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 f5
- |- ((((rot k) f) = x) ==> (?x. (((rot k) f) = x)))
T c==> c= crot f0 f1 f2 c? / c= crot f0 f1 b0
- (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) /\ (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f1 f0 cMEM f1 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cCONS cHD crot f2 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0
+ |- (((MEM x) f) = ((MEM x) ((rot k) f)))
T c= cMEM f0 f1 cMEM f0 crot f2 f1
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) |- (((!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) ==> ((\s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s2)) = ((\s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s2))
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c= c==> ! c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 * / c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1 * / c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
- |- (((!p'. (!q'. ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4
+ (((MEM d) (list_of_darts L)) = x) |- ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> c= cMEM f0 clist_of_darts f1 f2 c= c==> cssreflect_eq f3 c= cMEM f0 clist_of_darts f1 f2 c= cMEM f4 clist_of_elements f1 cMEM f4 clist_of_elements csplit_list_hyp f1 f0 c= cMEM f4 clist_of_elements f1 cMEM f4 clist_of_elements csplit_list_hyp f1 f0
- |- (((!x. (((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) x) ==> (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)))) ==> ((?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) ==> (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)))) = ((?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) ==> (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s))))
T c= c==> ! c==> * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b1 b0 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b1 c==> c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 c==> c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- (((!b. (!a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) ==> ((\b. (!a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) b)) = ((\b. (!a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) b))
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b1 b0 c\/ b1 b2 * / ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b1 b0 c\/ b1 b2 f0 * / ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b1 b0 c\/ b1 b2 f0
+ |- ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL f5 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 f5
+ |- (((!x. (((MEM x) ((rotr n0) s)) = ((MEM x) s))) ==> ((\x. (((MEM x) ((rotr n0) s)) = ((MEM x) s))) x)) = ((\x. (((MEM x) ((rotr n0) s)) = ((MEM x) s))) x))
T c= c==> ! c= cMEM b0 crotr f0 f1 cMEM b0 f1 * / c= cMEM b0 crotr f0 f1 cMEM b0 f1 f2 * / c= cMEM b0 crotr f0 f1 cMEM b0 f1 f2
- |- (((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = ((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L))))) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> q')))) = ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> q'))))
T c= c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 f4 c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 f4
+ |- (((!x. (((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND x) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))) ==> ((\x. (((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND x) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))) x)) = ((\x. (((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND x) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))) x))
T c= c==> ! c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c= cMEM f2 f1 cMEM f2 cflatten cCOND b0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL * / c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c= cMEM f2 f1 cMEM f2 cflatten cCOND b0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4 * / c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c= cMEM f2 f1 cMEM f2 cflatten cCOND b0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4
+ |- ((((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))
T c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 f1 c==> c==> f1 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 f3 c==> c==> c~ f1 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 f4 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cCOND f1 f3 f4
+ |- ((((MEM i) (undup ((cat (flatten ((take n) L))) (flatten ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((MEM i) (undup (flatten ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))) = (((MEM i) (undup (flatten ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((MEM i) (undup (flatten ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))))
T c= c= cMEM f0 cundup ccat cflatten ctake f1 f2 cflatten ccat cCONS f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 cundup cflatten ccat ctake f1 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cMEM f0 cundup cflatten ccat ctake f1 f2 ccat cCONS f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 cundup cflatten ccat ctake f1 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((MEM i) f) = ((MEM i) (flatten (((COND ((sizel ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((MEM i) f) = ((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))))))
T c= c= cMEM f0 f1 cMEM f0 cflatten cCOND c<= csizel crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNUMERAL cBIT1 cBIT1 c_0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL c= cMEM f0 f1 cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1
+ |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num (sizel f))) ==> ((~ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) (int_of_num (sizel f)))) \/ ((int_lt (int_of_num (NUMERAL _0))) (int_of_num (sizel f))))) = ((~ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) (int_of_num (sizel f)))) \/ ((int_lt (int_of_num (NUMERAL _0))) (int_of_num (sizel f)))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num csizel f0 c\/ c~ cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_of_num csizel f0 cint_lt cint_of_num cNUMERAL c_0 cint_of_num csizel f0 c\/ c~ cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_of_num csizel f0 cint_lt cint_of_num cNUMERAL c_0 cint_of_num csizel f0
+ |- (((int_le (int_of_num (NUMERAL _0))) _10062699) ==> (((int_le _10062699) (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) \/ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) _10062699)))
T c==> cint_le cint_of_num cNUMERAL c_0 f0 c\/ cint_le f0 cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 f0
- |- ((\x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))))) x)
T * / ! c/\ c= cMEM b0 cNIL cF c= cMEM b0 cCONS f0 b1 c\/ c= b0 f0 cMEM b0 b1 f1
+ |- (((!n0. (!s. (!x. (((MEM x) ((rot n0) s)) = ((MEM x) s))))) ==> ((\n0. (!s. (!x. (((MEM x) ((rot n0) s)) = ((MEM x) s))))) k)) = ((\n0. (!s. (!x. (((MEM x) ((rot n0) s)) = ((MEM x) s))))) k))
T c= c==> ! ! ! c= cMEM b2 crot b0 b1 cMEM b2 b1 * / ! ! c= cMEM b2 crot b0 b1 cMEM b2 b1 f0 * / ! ! c= cMEM b2 crot b0 b1 cMEM b2 b1 f0
- ((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) |- (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = T)
T c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT
- |- (((!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) ==> (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l))))) = (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))))
T c= c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1
- ((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = T)
T c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 cT
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
+ |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062701)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701)) /\ ((real_le (real_of_int _10062701)) (real_of_num (NUMERAL _0))))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL c_0
+ |- ((\p'. (!q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4
- (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((((\n. (((indexl f) L) = n)) n) ==> (((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat ((CONS f) NIL)) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))))) = T)
T c= c==> * / c= cindexl f0 f1 b0 f2 c= cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1 cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1 cT
- |- (((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
+ |- (((?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) ==> (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))))))) = (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))))))
T c= c==> c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 c= cMEM f2 f1 cMEM f2 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 c= cMEM f2 f1 cMEM f2 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1
+ |- (((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel f))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))) = ((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))))
T c= cMEM f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cMEM f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1
+ |- (((!L. (!d. (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) ==> ((\L. (!d. (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) L)) = ((\L. (!d. (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) L))
T c= c==> ! ! c==> cMEM b1 clist_of_darts b0 c= b0 ccat ctake cindexl cfind_pair_list b0 b1 b0 b0 ccat cCONS cfind_pair_list b0 b1 cNIL cdropl c+ cindexl cfind_pair_list b0 b1 b0 cNUMERAL cBIT1 c_0 b0 * / ! c==> cMEM b1 clist_of_darts b0 c= b0 ccat ctake cindexl cfind_pair_list b0 b1 b0 b0 ccat cCONS cfind_pair_list b0 b1 cNIL cdropl c+ cindexl cfind_pair_list b0 b1 b0 cNUMERAL cBIT1 c_0 b0 f0 * / ! c==> cMEM b1 clist_of_darts b0 c= b0 ccat ctake cindexl cfind_pair_list b0 b1 b0 b0 ccat cCONS cfind_pair_list b0 b1 cNIL cdropl c+ cindexl cfind_pair_list b0 b1 b0 cNUMERAL cBIT1 c_0 b0 f0
+ |- (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)))
T c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0
+ |- (((NUMERAL (BIT1 _0)) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062701)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701)) /\ ((real_le (real_of_int _10062701)) (real_of_num (NUMERAL _0))))))) |- (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0)))))
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))), ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- ((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel f))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0
- |- (((!t'. (!e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 c==> c==> f0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> c~ f0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b1 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCOND f0 b0 b1 * / ! c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 c==> c==> f0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> c~ f0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b1 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCOND f0 b0 b1 f3 * / ! c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 c==> c==> f0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> c~ f0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b1 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCOND f0 b0 b1 f3
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- ((((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s) ==> (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c==> c= crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 f3 c= cMEM f4 f1 cMEM f4 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1
+ (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- ((!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) /\ ((((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))) = (((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c/\ ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= c\/ cMEM f0 cflatten cCONS f1 cNIL cMEM f0 cflatten cdropl c+ f2 cNUMERAL cBIT1 c_0 f3 c\/ cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cMEM f0 cflatten cdropl c+ f2 cNUMERAL cBIT1 c_0 f3
- (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)) |- (T = (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)))
T c==> c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot f2 f0 c= cT c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot f2 f0
+ |- (((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) e')))
T c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 f2 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 f2
- |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> q')))
T c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 f4
- (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((\L. (!d. (((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) L)
T * / ! c==> cMEM b1 clist_of_darts b0 c= csplit_list_hyp b0 b1 ccat ctake cindexl cfind_pair_list b0 b1 b0 b0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl b1 clist_pairs cfind_pair_list b0 b1 cfind_pair_list b0 b1 cdropl c+ cindexl cfind_pair_list b0 b1 b0 cNUMERAL cBIT1 c_0 b0 f0
+ |- (((MEM i) f) = ((MEM i) ((rot ((indexl d) (list_pairs f))) f)))
T c= cMEM f0 f1 cMEM f0 crot cindexl f2 clist_pairs f1 f1
+ |- ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = T)
T c= c= cMEM f0 clist_of_elements f1 cMEM f0 clist_of_elements csplit_list_hyp f1 f2 cT
- |- ((\p'. (!q'. ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4
- |- ((!x. t) = t)
T c= ! f0 f0
+ (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))) |- ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> c= csplit_list_hyp f0 f1 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c= c= cMEM f2 clist_of_elements f0 cMEM f2 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c= cMEM f2 clist_of_elements f0 cMEM f2 clist_of_elements csplit_list_hyp f0 f1
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) |- (((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) = T)
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c= c==> cuniq f0 c==> cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1 cT
+ |- (((!s1. (!s2. (((dropl n0) ((cat s1) s2)) = (((COND (n0 < (sizel s1))) ((cat ((dropl n0) s1)) s2)) ((dropl (n0 - (sizel s1))) s2))))) ==> ((\s1. (!s2. (((dropl n0) ((cat s1) s2)) = (((COND (n0 < (sizel s1))) ((cat ((dropl n0) s1)) s2)) ((dropl (n0 - (sizel s1))) s2))))) s1)) = ((\s1. (!s2. (((dropl n0) ((cat s1) s2)) = (((COND (n0 < (sizel s1))) ((cat ((dropl n0) s1)) s2)) ((dropl (n0 - (sizel s1))) s2))))) s1))
T c= c==> ! ! c= cdropl f0 ccat b0 b1 cCOND c< f0 csizel b0 ccat cdropl f0 b0 b1 cdropl c- f0 csizel b0 b1 * / ! c= cdropl f0 ccat b0 b1 cCOND c< f0 csizel b0 ccat cdropl f0 b0 b1 cdropl c- f0 csizel b0 b1 f1 * / ! c= cdropl f0 ccat b0 b1 cCOND c< f0 csizel b0 ccat cdropl f0 b0 b1 cdropl c- f0 csizel b0 b1 f1
+ |- ((\s2. (((dropl n0) ((cat s1) s2)) = (((COND (n0 < (sizel s1))) ((cat ((dropl n0) s1)) s2)) ((dropl (n0 - (sizel s1))) s2)))) s2)
T * / c= cdropl f0 ccat f1 b0 cCOND c< f0 csizel f1 ccat cdropl f0 f1 b0 cdropl c- f0 csizel f1 b0 f2
+ (s = ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s))) |- (((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)) = s)
T c==> c= f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 f0 c= ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 f0 f0
+ |- ((\P. (P = ((ssreflect_eq f_size) P))) P)
T * / c= b0 cssreflect_eq f0 b0 f1
+ |- ((\s. (((cat s) NIL) = s)) s)
T * / c= ccat b0 cNIL b0 f0
+ |- ((\Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))) Q)
T * / c= c==> c? / * f0 b1 b0 ! c==> * f0 b1 b0 f1
+ |- (((((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c= c==> c==> cMEM f0 clist_of_darts f1 c= csplit_list_hyp f1 f0 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs cfind_pair_list f1 f0 cfind_pair_list f1 f0 cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c= cMEM f2 clist_of_elements f1 cMEM f2 clist_of_elements csplit_list_hyp f1 f0 c= cMEM f2 clist_of_elements f1 cMEM f2 clist_of_elements csplit_list_hyp f1 f0
+ |- ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL f5 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f3 f1 cMEM f3 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 f5
+ |- (((MEM i) (undup ((cat (flatten ((take n) L))) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((MEM i) (undup ((cat (flatten ((take n) L))) (flatten ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= cMEM f0 cundup ccat cflatten ctake f1 f2 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 cundup ccat cflatten ctake f1 f2 cflatten ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- |- ((!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) ==> (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))))
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1
+ |- (((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
+ (s = ((rot k) f)), ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s)))))
T c==> c= f0 crot f1 f2 c==> cssreflect_eq f3 c~ c<= csizel f2 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f4 f2 cMEM f4 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> q')))
T c==> c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f4
+ |- (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))
T c= cMEM f0 f1 cMEM f0 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2
- |- (((real_add (real_of_num m)) (real_neg (real_of_num m))) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_of_num f0 creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0
+ |- ((((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) \/ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = ((MEM i) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c= c\/ cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2
+ |- (((!P. (!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q))))) ==> ((\P. (!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q))))) P)) = ((\P. (!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q))))) P))
T c= c==> ! ! c= c==> c? / * b0 b2 b1 ! c==> * b0 b2 b1 * / ! c= c==> c? / * b0 b2 b1 ! c==> * b0 b2 b1 f0 * / ! c= c==> c? / * b0 b2 b1 ! c==> * b0 b2 b1 f0
+ |- ((\s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))) s2)
T * / c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
+ |- ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))))
T c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
- ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c==> c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF
+ |- ((\n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s))))) n0)
T * / ! ! c==> cMEM b2 ctake b0 b1 cMEM b2 b1 f0
- |- (((!p'. (!q'. ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4
+ |- (((?f. (((find_pair_list L) d) = f)) ==> (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) = (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c= c==> c? / c= cfind_pair_list f0 f1 b0 c= cMEM f2 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 cMEM f2 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c= cMEM f2 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 cMEM f2 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- ((!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) /\ (!a. (!c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c/\ ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 ! ! ! c==> c==> c~ b2 c= b0 b1 c= c\/ b0 b2 c\/ b1 b2
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- (!a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 ! ! c==> c==> c~ b0 c= f0 b1 c= c\/ b0 f0 c\/ b0 b1
+ |- (T = (((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((h = h) \/ ((MEM h) t))))
T c= cT c==> c< cNUMERAL c_0 csizel cCONS f0 f1 c\/ c= f0 f0 cMEM f0 f1
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))), (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) |- ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) /\ (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 c/\ c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 c\/ c= f1 cHD crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0
+ |- ((\n0. (!s. ((sizel ((take n0) s)) = (((COND (n0 < (sizel s))) n0) (sizel s))))) n0)
T * / ! c= csizel ctake b0 b1 cCOND c< b0 csizel b1 b0 csizel b1 f0
+ |- ((((find_pair_list L) d) = ((find_pair_list L) d)) = ((\f. (((find_pair_list L) d) = f)) ((find_pair_list L) d)))
T c= c= cfind_pair_list f0 f1 cfind_pair_list f0 f1 * / c= cfind_pair_list f0 f1 b0 cfind_pair_list f0 f1
- |- ((!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) ==> (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))))
T c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1
+ (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) |- ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND x) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (((MEM i) f) = ((MEM i) (flatten (((COND x) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c==> c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c= c==> cssreflect_eq f2 c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c= cMEM f3 f0 cMEM f3 cflatten cCOND f1 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cNIL c= cMEM f3 f0 cMEM f3 cflatten cCOND f1 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cNIL
- |- ((((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x) ==> (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x))) = T)
T c= c==> * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 cT
+ |- (((MEM i) ((cat f) NIL)) = ((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))))
T c= cMEM f0 ccat f1 cNIL cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cCONS cHD crot f2 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0
- |- (((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))) = ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))))
T c= c==> c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) ==> ((MEM i) ((rot k) f)))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 c\/ c= f1 cHD crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 cMEM f1 crot f2 f0
+ (((rot k) f) = x) |- ((((NUMERAL _0) < (sizel x)) ==> ((MEM (HD x)) ((rot k) f))) = (((NUMERAL _0) < (sizel x)) ==> ((MEM (HD ((rot k) f))) ((rot k) f))))
T c==> c= crot f0 f1 f2 c= c==> c< cNUMERAL c_0 csizel f2 cMEM cHD f2 crot f0 f1 c==> c< cNUMERAL c_0 csizel f2 cMEM cHD crot f0 f1 crot f0 f1
+ |- ((((int_le (int_of_num (sizel f))) (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) \/ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) (int_of_num (sizel f)))) = ((~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))))))
T c= c\/ cint_le cint_of_num csizel f0 cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_of_num csizel f0 c==> c~ c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((!P. (((ssreflect_eq v) P) = P)) ==> ((\P. (((ssreflect_eq v) P) = P)) P)) = ((\P. (((ssreflect_eq v) P) = P)) P))
T c= c==> ! c= cssreflect_eq f0 b0 b0 * / c= cssreflect_eq f0 b0 b0 f1 * / c= cssreflect_eq f0 b0 b0 f1
- ((\f. (((find_pair_list L) d) = f)) f) |- (((((find_pair_list L) d) = f) ==> (?f. (((find_pair_list L) d) = f))) = (?f. (((find_pair_list L) d) = f)))
T c==> * / c= cfind_pair_list f0 f1 b0 f2 c= c==> c= cfind_pair_list f0 f1 f2 c? / c= cfind_pair_list f0 f1 b0 c? / c= cfind_pair_list f0 f1 b0
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))))) = (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c==> c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f1 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f1 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((\t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))) t)
T * / c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 b0 c\/ c= f0 f1 cMEM f0 b0 f2
+ |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062699)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699)) /\ ((real_le (real_of_int _10062699)) (real_of_num (NUMERAL (BIT1 (BIT1 _0))))))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0
+ (i = (HD ((rot k) f))), (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((MEM i) ((rot k) f))
T c==> c= f0 cHD crot f1 f2 c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f2 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cMEM f0 crot f1 f2
+ (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))), (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) |- (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))
T c==> c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2
+ (s = ((rot k) f)), ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s)))))
T c==> c= f0 crot f1 f2 c==> cssreflect_eq f3 c~ c<= csizel f2 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f4 f2 cMEM f4 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCONS cHD crot f1 f2 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0
- |- ((((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)) = ((\k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))) k))
T c= c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot f2 f0 * / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 f2
+ |- (((MEM i) f) = ((MEM i) (flatten (((COND ((sizel ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))
T c= cMEM f0 f1 cMEM f0 cflatten cCOND c<= csizel crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNUMERAL cBIT1 cBIT1 c_0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL
- |- ((\t'. (!e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 c==> c==> f0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> c~ f0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b1 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCOND f0 b0 b1 f3
+ ((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) |- (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))))
T c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c/\ cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ |- ((((((NUMERAL _0) < (sizel NIL)) ==> ((MEM (HD NIL)) NIL)) /\ (!h. (!t. (((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((MEM (HD ((CONS h) t))) ((CONS h) t)))))) ==> (!x. (((NUMERAL _0) < (sizel x)) ==> ((MEM (HD x)) x)))) = (!x. (((NUMERAL _0) < (sizel x)) ==> ((MEM (HD x)) x))))
T c= c==> c/\ c==> c< cNUMERAL c_0 csizel cNIL cMEM cHD cNIL cNIL ! ! c==> c< cNUMERAL c_0 csizel cCONS b0 b1 cMEM cHD cCONS b0 b1 cCONS b0 b1 ! c==> c< cNUMERAL c_0 csizel b0 cMEM cHD b0 b0 ! c==> c< cNUMERAL c_0 csizel b0 cMEM cHD b0 b0
- |- ((\e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))) e')
T * / c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 c==> c==> f0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> c~ f0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCOND f0 f3 b0 f4
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\P. (((ssreflect_eq v) P) = P)) P)
T * / c= cssreflect_eq f0 b0 b0 f1
- |- ((((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s) ==> (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)))
T c==> c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 f2 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0
+ |- ((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))
T * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1
+ |- (((!s. ((sizel ((rotr n0) s)) = (sizel s))) ==> ((\s. ((sizel ((rotr n0) s)) = (sizel s))) s)) = ((\s. ((sizel ((rotr n0) s)) = (sizel s))) s))
T c= c==> ! c= csizel crotr f0 b0 csizel b0 * / c= csizel crotr f0 b0 csizel b0 f1 * / c= csizel crotr f0 b0 csizel b0 f1
+ |- ((((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))))) = (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((cat ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))
T c= c= cMEM f0 f1 cMEM f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 c= cMEM f0 f1 cMEM f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 ccat cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL
- (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) |- (x = ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))
T c==> c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c= f1 c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0
+ |- ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))
T c==> c/\ c/\ cuniq f0 cuniq f1 ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((((MEM i) ((rot k) f)) ==> ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) /\ (((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) ==> ((MEM i) ((rot k) f))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c==> cMEM f1 crot f2 f0 cMEM f1 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cCONS cHD crot f2 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 c==> cMEM f1 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cCONS cHD crot f2 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 cMEM f1 crot f2 f0
- |- ((\s. (((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)) = s)) ((rot k) f))
T * / c= ccat ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cdropl cNUMERAL cBIT1 cBIT1 c_0 b0 b0 crot f0 f1
- |- ((((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) = ((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x))
T c= c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1
+ |- (((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) = ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L)))) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> q')))) = ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> q'))))
T c= c==> c= cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT cssreflect_eq f0 cMEM f1 clist_of_darts f2 c==> c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 f4 c==> c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 f4
+ |- ((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0
+ |- (((!n0. (!s. (((cat ((take n0) s)) ((dropl n0) s)) = s))) ==> ((\n0. (!s. (((cat ((take n0) s)) ((dropl n0) s)) = s))) (NUMERAL (BIT1 (BIT1 _0))))) = ((\n0. (!s. (((cat ((take n0) s)) ((dropl n0) s)) = s))) (NUMERAL (BIT1 (BIT1 _0)))))
T c= c==> ! ! c= ccat ctake b0 b1 cdropl b0 b1 b1 * / ! c= ccat ctake b0 b1 cdropl b0 b1 b1 cNUMERAL cBIT1 cBIT1 c_0 * / ! c= ccat ctake b0 b1 cdropl b0 b1 b1 cNUMERAL cBIT1 cBIT1 c_0
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((\x. (((rot k) f) = x)) x) |- (((rot k) f) = x)
T c==> * / c= crot f0 f1 b0 f2 c= crot f0 f1 f2
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 * / c==> c= cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 f5
+ |- ((((MEM i) f) = ((MEM i) f)) = (((MEM i) f) = ((MEM i) ((rot ((indexl d) (list_pairs f))) f))))
T c= c= cMEM f0 f1 cMEM f0 f1 c= cMEM f0 f1 cMEM f0 crot cindexl f2 clist_pairs f1 f1
+ |- ((\x. (((rot k) f) = x)) ((rot k) f))
T * / c= crot f0 f1 b0 crot f0 f1
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ==> ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c\/ cMEM f1 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cCONS cHD crot f2 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0
+ |- ((\x. (((MEM x) ((dropl n0) s)) ==> ((MEM x) s))) x)
T * / c==> cMEM b0 cdropl f0 f1 cMEM b0 f1 f2
+ ((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) |- ((((~ ((MEM d) (list_of_darts L))) /\ ((((split_list_hyp L) d) = L) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) ==> (((~ ((MEM d) (list_of_darts L))) ==> (((split_list_hyp L) d) = L)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) = (((~ ((MEM d) (list_of_darts L))) ==> (((split_list_hyp L) d) = L)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= c==> c/\ c~ cMEM f1 clist_of_darts f2 c==> c= csplit_list_hyp f2 f1 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> c==> c~ cMEM f1 clist_of_darts f2 c= csplit_list_hyp f2 f1 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> c==> c~ cMEM f1 clist_of_darts f2 c= csplit_list_hyp f2 f1 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
+ |- ((((\x. (((MEM d) (list_of_darts L)) = x)) x) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = T)
T c= c==> * / c= cMEM f0 clist_of_darts f1 b0 f2 c= cMEM f3 clist_of_elements f1 cMEM f3 clist_of_elements csplit_list_hyp f1 f0 cT
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) |- ((\P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) P)
T c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 f0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL f5 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 f5
+ |- (((!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) ==> ((\P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) P)) = ((\P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) P))
T c= c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 f0 * / c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 f0
+ (i = (HD ((rot k) f))) |- (((MEM (HD ((rot k) f))) ((rot k) f)) = ((MEM i) ((rot k) f)))
T c==> c= f0 cHD crot f1 f2 c= cMEM cHD crot f1 f2 crot f1 f2 cMEM f0 crot f1 f2
- ((\x. (((rot k) f) = x)) x) |- (((((rot k) f) = x) ==> (?x. (((rot k) f) = x))) = (?x. (((rot k) f) = x)))
T c==> * / c= crot f0 f1 b0 f2 c= c==> c= crot f0 f1 f2 c? / c= crot f0 f1 b0 c? / c= crot f0 f1 b0
- |- ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> q')))
T c==> c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 f4
- |- ((\s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) s2)
T * / c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
+ |- (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
+ |- ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> q')))
T c==> c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f4
+ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- (((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) \/ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))
T c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2
+ |- (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))
T c= cMEM f0 cCONS f1 f2 c\/ c= f0 f1 cMEM f0 f2
+ ((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s) |- (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)
T c==> * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 f2 c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 f2
- |- ((\q'. ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5
+ |- (((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ |- ((((MEM i) (undup (flatten ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((MEM i) (list_of_elements ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = (((MEM i) (list_of_elements ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= c= cMEM f0 cundup cflatten ccat ctake f1 f2 ccat cCONS f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 clist_of_elements ccat ctake f1 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cMEM f0 clist_of_elements ccat ctake f1 f2 ccat cCONS f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 clist_of_elements ccat ctake f1 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
- (~ ((MEM d) (list_of_darts L))) |- ((~ ((MEM d) (list_of_darts L))) /\ (((split_list_hyp L) d) = L))
T c==> c~ cMEM f0 clist_of_darts f1 c/\ c~ cMEM f0 clist_of_darts f1 c= csplit_list_hyp f1 f0 f1
+ ((\n. (((indexl f) L) = n)) n) |- (((indexl f) L) = n)
T c==> * / c= cindexl f0 f1 b0 f2 c= cindexl f0 f1 f2
- |- ((\s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) s1)
T * / ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0
+ (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 ! ! c==> c==> c~ b0 c= f0 b1 c= c\/ f0 b0 c\/ b1 b0
+ |- (((NUMERAL _0) < (NUMERAL _0)) ==> ((MEM (HD NIL)) NIL))
T c==> c< cNUMERAL c_0 cNUMERAL c_0 cMEM cHD cNIL cNIL
- |- (((!q'. ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 * / c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5 * / c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5
+ |- (F ==> ((MEM (HD NIL)) NIL))
T c==> cF cMEM cHD cNIL cNIL
+ |- (((!n0. (!s. ((sizel ((take n0) s)) = (((COND (n0 < (sizel s))) n0) (sizel s))))) ==> ((\n0. (!s. ((sizel ((take n0) s)) = (((COND (n0 < (sizel s))) n0) (sizel s))))) n0)) = ((\n0. (!s. ((sizel ((take n0) s)) = (((COND (n0 < (sizel s))) n0) (sizel s))))) n0))
T c= c==> ! ! c= csizel ctake b0 b1 cCOND c< b0 csizel b1 b0 csizel b1 * / ! c= csizel ctake b0 b1 cCOND c< b0 csizel b1 b0 csizel b1 f0 * / ! c= csizel ctake b0 b1 cCOND c< b0 csizel b1 b0 csizel b1 f0
- (((find_pair_list L) d) = f) |- ((\f. (((find_pair_list L) d) = f)) f)
T c==> c= cfind_pair_list f0 f1 f2 * / c= cfind_pair_list f0 f1 b0 f2
+ |- (((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat ((CONS f) NIL)) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))))
T c= cMEM f0 clist_of_elements ccat ctake cindexl f1 f2 f2 ccat cCONS f1 cNIL cdropl c+ cindexl f1 f2 cNUMERAL cBIT1 c_0 f2 cMEM f0 clist_of_elements ccat ctake cindexl f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl c+ cindexl f1 f2 cNUMERAL cBIT1 c_0 f2
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))), ((~ b) ==> (a = c)) |- (((~ b) ==> (a = c)) /\ ((a \/ b) = (c \/ b)))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c==> c==> c~ f0 c= f1 f2 c/\ c==> c~ f0 c= f1 f2 c= c\/ f1 f0 c\/ f2 f0
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) |- ((\s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s1)
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 * / ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))), (((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) |- ((!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) /\ ((perm_eq s1) s2))
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> c/\ c/\ cuniq f0 cuniq f1 ! c= cMEM b0 f0 cMEM b0 f1 c/\ ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 cperm_eq f0 f1
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) |- ((\s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) s1)
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 * / ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0
+ (s = ((rot k) f)), ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- ((s = ((rot k) f)) /\ (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s))))))
T c==> c= f0 crot f1 f2 c==> cssreflect_eq f3 c~ c<= csizel f2 cNUMERAL cBIT1 cBIT1 c_0 c/\ c= f0 crot f1 f2 c= cMEM f4 f2 cMEM f4 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0
- |- (((!h. (!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))))) ==> ((\h. (!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))))) h)) = ((\h. (!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))))) h))
T c= c==> ! ! ! c/\ c= cMEM b1 cNIL cF c= cMEM b1 cCONS b0 b2 c\/ c= b1 b0 cMEM b1 b2 * / ! ! c/\ c= cMEM b1 cNIL cF c= cMEM b1 cCONS b0 b2 c\/ c= b1 b0 cMEM b1 b2 f0 * / ! ! c/\ c= cMEM b1 cNIL cF c= cMEM b1 cCONS b0 b2 c\/ c= b1 b0 cMEM b1 b2 f0
+ (i = (HD ((rot k) f))), (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((i = (HD ((rot k) f))) /\ ((MEM i) ((rot k) f)))
T c==> c= f0 cHD crot f1 f2 c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f2 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c= f0 cHD crot f1 f2 cMEM f0 crot f1 f2
+ (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))) |- (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) = (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 c= creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((real_mul (real_neg (real_of_num x))) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
- ((\f. (((find_pair_list L) d) = f)) f) |- (((\f. (((find_pair_list L) d) = f)) f) /\ (?f. (((find_pair_list L) d) = f)))
T c==> * / c= cfind_pair_list f0 f1 b0 f2 c/\ * / c= cfind_pair_list f0 f1 b0 f2 c? / c= cfind_pair_list f0 f1 b0
+ |- (((!n. ((n < (NUMERAL _0)) = F)) ==> ((\n. ((n < (NUMERAL _0)) = F)) n)) = ((\n. ((n < (NUMERAL _0)) = F)) n))
T c= c==> ! c= c< b0 cNUMERAL c_0 cF * / c= c< b0 cNUMERAL c_0 cF f0 * / c= c< b0 cNUMERAL c_0 cF f0
+ |- (((!x. (((MEM x) ((rot n0) s)) = ((MEM x) s))) ==> ((\x. (((MEM x) ((rot n0) s)) = ((MEM x) s))) x)) = ((\x. (((MEM x) ((rot n0) s)) = ((MEM x) s))) x))
T c= c==> ! c= cMEM b0 crot f0 f1 cMEM b0 f1 * / c= cMEM b0 crot f0 f1 cMEM b0 f1 f2 * / c= cMEM b0 crot f0 f1 cMEM b0 f1 f2
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) |- ((!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) /\ (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))))
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c/\ ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1
+ |- (?x. (((MEM d) (list_of_darts L)) = x))
T c? / c= cMEM f0 clist_of_darts f1 b0
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))), (uniq s1) |- ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> cuniq f0 c==> cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
- |- ((((indexl f) L) = n) ==> (?n. (((indexl f) L) = n)))
T c==> c= cindexl f0 f1 f2 c? / c= cindexl f0 f1 b0
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF ! * f0 b0
+ |- ((\s. (s = ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)))) s)
T * / c= b0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cdropl cNUMERAL cBIT1 cBIT1 c_0 b0 f0
- (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) |- ((((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l))) = T)
T c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 c= c==> c/\ * f0 cNIL ! ! * f0 cCONS b0 b1 ! * f0 b0 cT
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((cat ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten NIL)))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 ccat cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cflatten cNIL
- |- (((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((rot k) f))
T c= ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 crot f0 f1
+ ((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) |- (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))))
T c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c/\ cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ |- (((!s. (((cat s) NIL) = s)) ==> ((\s. (((cat s) NIL) = s)) s)) = ((\s. (((cat s) NIL) = s)) s))
T c= c==> ! c= ccat b0 cNIL b0 * / c= ccat b0 cNIL b0 f0 * / c= ccat b0 cNIL b0 f0
+ (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- (((!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))) ==> ((\b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))) b)) = ((\b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))) b))
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= c==> ! ! c==> c==> c~ f0 c= b0 b1 c= c\/ f0 b0 c\/ f0 b1 * / ! c==> c==> c~ f0 c= b0 b1 c= c\/ f0 b0 c\/ f0 b1 f1 * / ! c==> c==> c~ f0 c= b0 b1 c= c\/ f0 b0 c\/ f0 b1 f1
+ |- (((!x. (((\x. (((MEM d) (list_of_darts L)) = x)) x) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) ==> ((?x. (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) = ((?x. (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c= c==> ! c==> * / c= cMEM f0 clist_of_darts f1 b1 b0 c= cMEM f2 clist_of_elements f1 cMEM f2 clist_of_elements csplit_list_hyp f1 f0 c==> c? / c= cMEM f0 clist_of_darts f1 b0 c= cMEM f2 clist_of_elements f1 cMEM f2 clist_of_elements csplit_list_hyp f1 f0 c==> c? / c= cMEM f0 clist_of_darts f1 b0 c= cMEM f2 clist_of_elements f1 cMEM f2 clist_of_elements csplit_list_hyp f1 f0
+ (s = ((rot k) f)) |- ((((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s))))) = (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s))))))
T c==> c= f0 crot f1 f2 c= c= cMEM f3 f2 cMEM f3 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCONS cHD crot f1 f2 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0 c= cMEM f3 f2 cMEM f3 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
+ ((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) |- (((~ ((MEM d) (list_of_darts L))) ==> (((split_list_hyp L) d) = L)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c==> c==> c~ cMEM f1 clist_of_darts f2 c= csplit_list_hyp f2 f1 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- ((\x. (((MEM d) (list_of_darts L)) = x)) x) |- (((\x. (((MEM d) (list_of_darts L)) = x)) x) /\ (?x. (((MEM d) (list_of_darts L)) = x)))
T c==> * / c= cMEM f0 clist_of_darts f1 b0 f2 c/\ * / c= cMEM f0 clist_of_darts f1 b0 f2 c? / c= cMEM f0 clist_of_darts f1 b0
+ |- (((!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))) ==> ((\s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))) s2)) = ((\s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))) s2))
T c= c==> ! c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 * / c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1 * / c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
+ (?k. (s = ((rot k) f))), ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s)))))
T c==> c? / c= f0 crot b0 f1 c==> cssreflect_eq f2 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0
+ |- (((!p'. (!q'. ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> b0 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b1 c= c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> b0 b1 * / ! c==> c= cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> b0 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b1 c= c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> b0 b1 f3 * / ! c==> c= cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> b0 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b1 c= c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> b0 b1 f3
+ |- ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0
+ |- ((((NUMERAL _0) < (sizel NIL)) ==> ((MEM (HD NIL)) NIL)) /\ (!h. (!t. (((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((MEM (HD ((CONS h) t))) ((CONS h) t))))))
T c/\ c==> c< cNUMERAL c_0 csizel cNIL cMEM cHD cNIL cNIL ! ! c==> c< cNUMERAL c_0 csizel cCONS b0 b1 cMEM cHD cCONS b0 b1 cCONS b0 b1
- (((MEM d) (list_of_darts L)) = x) |- (x = ((MEM d) (list_of_darts L)))
T c==> c= cMEM f0 clist_of_darts f1 f2 c= f2 cMEM f0 clist_of_darts f1
+ (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s), ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s)))))
T c==> c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 f2 c==> cssreflect_eq f3 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f4 f1 cMEM f4 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f2 cCONS cHD f2 cdropl cNUMERAL cBIT0 cBIT1 c_0 f2
- |- ((?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))) ==> (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))))
T c==> c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0
+ |- (((MEM i) ((cat f) (flatten NIL))) = ((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))))
T c= cMEM f0 ccat f1 cflatten cNIL cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1
+ (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s) |- (s = ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))
T c==> c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 f2 c= f2 crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- ((?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) ==> (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c==> c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 b0 c= cMEM f3 f1 cMEM f3 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1
+ |- ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) /\ (((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))))
T c/\ c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ |- ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) t') e'))))
T c==> c==> c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2 c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f3 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f1 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f2 f3
+ |- (((?x. (((rot k) f) = x)) ==> (((NUMERAL _0) < (sizel ((rot k) f))) ==> ((MEM (HD ((rot k) f))) ((rot k) f)))) = (((NUMERAL _0) < (sizel ((rot k) f))) ==> ((MEM (HD ((rot k) f))) ((rot k) f))))
T c= c==> c? / c= crot f0 f1 b0 c==> c< cNUMERAL c_0 csizel crot f0 f1 cMEM cHD crot f0 f1 crot f0 f1 c==> c< cNUMERAL c_0 csizel crot f0 f1 cMEM cHD crot f0 f1 crot f0 f1
+ |- (((!s. (s = ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)))) ==> ((\s. (s = ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)))) s)) = ((\s. (s = ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)))) s))
T c= c==> ! c= b0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cdropl cNUMERAL cBIT1 cBIT1 c_0 b0 * / c= b0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cdropl cNUMERAL cBIT1 cBIT1 c_0 b0 f0 * / c= b0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cdropl cNUMERAL cBIT1 cBIT1 c_0 b0 f0
+ |- ((\p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 f4
+ ((\f. (((find_pair_list L) d) = f)) f) |- (((((find_pair_list L) d) = f) ==> (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) = (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> * / c= cfind_pair_list f0 f1 b0 f2 c= c==> c= cfind_pair_list f0 f1 f2 c= cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c= cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0
- |- (((!s. (((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)) = s)) ==> ((\s. (((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)) = s)) ((rot k) f))) = ((\s. (((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) s)) = s)) ((rot k) f)))
T c= c==> ! c= ccat ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cdropl cNUMERAL cBIT1 cBIT1 c_0 b0 b0 * / c= ccat ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cdropl cNUMERAL cBIT1 cBIT1 c_0 b0 b0 crot f0 f1 * / c= ccat ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cdropl cNUMERAL cBIT1 cBIT1 c_0 b0 b0 crot f0 f1
+ (((MEM x) ((rot k) f)) = ((MEM x) f)) |- (((MEM x) f) = ((MEM x) ((rot k) f)))
T c==> c= cMEM f0 crot f1 f2 cMEM f0 f2 c= cMEM f0 f2 cMEM f0 crot f1 f2
+ |- (((((MEM i) (flatten ((take n) L))) \/ ((MEM i) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = (((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten ((CONS f) NIL))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= c= c\/ cMEM f0 cflatten ctake f1 f2 cMEM f0 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten cCONS f3 cNIL cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))
T c= cMEM f0 clist_of_elements ccat ctake cindexl cfind_pair_list f1 f2 f1 f1 ccat cCONS cfind_pair_list f1 f2 cNIL cdropl c+ cindexl cfind_pair_list f1 f2 f1 cNUMERAL cBIT1 c_0 f1 cMEM f0 clist_of_elements ccat ctake cindexl cfind_pair_list f1 f2 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs cfind_pair_list f1 f2 cfind_pair_list f1 f2 cdropl c+ cindexl cfind_pair_list f1 f2 f1 cNUMERAL cBIT1 c_0 f1
+ |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
+ (((find_pair_list L) d) = f) |- ((((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat ((CONS f) NIL)) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L)))))) = (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> c= cfind_pair_list f0 f1 f2 c= c= cMEM f3 clist_of_elements ccat ctake cindexl f2 f0 f0 ccat cCONS f2 cNIL cdropl c+ cindexl f2 f0 cNUMERAL cBIT1 c_0 f0 cMEM f3 clist_of_elements ccat ctake cindexl f2 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f2 f2 cdropl c+ cindexl f2 f0 cNUMERAL cBIT1 c_0 f0 c= cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))), ((uniq s1) /\ (uniq s2)) |- ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> c/\ cuniq f0 cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- (((((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((MEM d) (list_of_darts L)) /\ ((((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c==> c= csplit_list_hyp f2 f1 ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c/\ cMEM f1 clist_of_darts f2 c==> c= csplit_list_hyp f2 f1 ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
+ |- ((((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = ((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))))
T c= c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))))
T c= c==> c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cCONS cHD crot f1 f2 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2
+ ((\n. (((indexl f) L) = n)) n) |- (((((indexl f) L) = n) ==> (((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat ((CONS f) NIL)) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))))) = (((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat ((CONS f) NIL)) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> * / c= cindexl f0 f1 b0 f2 c= c==> c= cindexl f0 f1 f2 c= cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1 cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1 c= cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1 cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1
+ |- ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))))
T c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- (((!a. (!c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) ==> ((\a. (!c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) a)) = ((\a. (!c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) a))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= c==> ! ! ! c==> c==> c~ b2 c= b0 b1 c= c\/ b0 b2 c\/ b1 b2 * / ! ! c==> c==> c~ b2 c= b0 b1 c= c\/ b0 b2 c\/ b1 b2 f0 * / ! ! c==> c==> c~ b2 c= b0 b1 c= c\/ b0 b2 c\/ b1 b2 f0
+ (s = ((rot k) f)) |- ((((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s))))) = (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s))))))
T c==> c= f0 crot f1 f2 c= c= cMEM f3 f2 cMEM f3 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0 c= cMEM f3 f2 cMEM f3 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0
+ (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))) |- ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((int_le (int_of_num (sizel f))) (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) \/ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) (int_of_num (sizel f))))
T c\/ cint_le cint_of_num csizel f0 cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_of_num csizel f0
+ |- ((((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062701)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701)) /\ ((real_le (real_of_int _10062701)) (real_of_num (NUMERAL _0))))) = (~ (((int_le (int_of_num (NUMERAL _0))) _10062701) ==> ((~ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) _10062701)) \/ ((int_lt (int_of_num (NUMERAL _0))) _10062701)))))
T c= c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL c_0 c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c\/ c~ cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 f0 cint_lt cint_of_num cNUMERAL c_0 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> q')))
T c==> c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 f3 c= c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3
+ |- (((!x. (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) ==> ((\x. (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) x)) = ((\x. (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) x))
T c= c==> ! c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 b0 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 * / c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 b0 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4 * / c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 b0 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4
- |- ((real_neg (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL (BIT1 (BIT1 _0))) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 (BIT1 _0))))
T c= c* cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (((((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> ((NUMERAL _0) < (sizel f))) = T)
T c= c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c< cNUMERAL c_0 csizel f0 cT
+ |- ((((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((h = h) \/ ((MEM h) t))) = (((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((MEM h) ((CONS h) t))))
T c= c==> c< cNUMERAL c_0 csizel cCONS f0 f1 c\/ c= f0 f0 cMEM f0 f1 c==> c< cNUMERAL c_0 csizel cCONS f0 f1 cMEM f0 cCONS f0 f1
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- (((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) ==> ((MEM i) ((rot k) f)))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> cMEM f1 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cCONS cHD crot f2 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0 cMEM f1 crot f2 f0
- ((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) |- (((~ ((MEM d) (list_of_darts L))) ==> (((MEM d) (list_of_darts L)) = F)) = (((MEM d) (list_of_darts L)) = F))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= c==> c~ cMEM f1 clist_of_darts f2 c= cMEM f1 clist_of_darts f2 cF c= cMEM f1 clist_of_darts f2 cF
+ ((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x) |- (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)
T c==> * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1 c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1
- |- ((\p'. (!q'. ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q')))))) p')
T * / ! c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> b0 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b1 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> b0 b1 f3
- (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))), ((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) |- (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) /\ (!l. (P l)))
T c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! * f0 cCONS b0 b1 c/\ c/\ * f0 cNIL ! ! * f0 cCONS b0 b1 ! * f0 b0
+ |- (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements L)))
T c= cMEM f0 clist_of_elements f1 cMEM f0 clist_of_elements f1
+ |- ((?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))) = (?k. (((rot ((sizel ((rot ((indexl d) (list_pairs f))) f)) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))))
T c= c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 c? / c= crot c- csizel crot cindexl f1 clist_pairs f0 f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0
+ |- ((?f. (((find_pair_list L) d) = f)) ==> (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> c? / c= cfind_pair_list f0 f1 b0 c= cMEM f2 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 cMEM f2 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0
+ (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 ! c==> c==> c~ f0 c= f1 b0 c= c\/ f1 f0 c\/ b0 f0
- (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) |- ((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x)
T c==> c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1
+ (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) |- ((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x))
T c==> c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 cssreflect_eq f2 c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))), (((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) |- ((perm_eq s1) s2)
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> c/\ c/\ cuniq f0 cuniq f1 ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
- |- (((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) e')))
T c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2
+ |- (((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel f))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))) = ((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel f))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))))
T c= cMEM f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cNUMERAL cBIT1 cBIT1 c_0 csizel f1 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cMEM f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0)))
T creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((!s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss))))) ==> ((\s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss))))) s)) = ((\s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss))))) s))
T c= c==> ! ! c= cflatten cCONS b0 b1 ccat b0 cflatten b1 * / ! c= cflatten cCONS b0 b1 ccat b0 cflatten b1 f0 * / ! c= cflatten cCONS b0 b1 ccat b0 cflatten b1 f0
+ |- ((((real_ge x) (real_of_num (NUMERAL _0))) /\ ((real_ge y) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge f0 creal_of_num cNUMERAL c_0 creal_ge f1 creal_of_num cNUMERAL c_0 creal_ge creal_add f0 f1 creal_of_num cNUMERAL c_0
+ |- ((((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) ==> (((MEM i) f) = ((MEM i) (flatten (((COND ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c==> c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c= cMEM f2 f0 cMEM f2 cflatten cCOND c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cNIL
+ |- ((\s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) s1)
T * / ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0
- |- ((!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) ==> (!b. (!a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))))
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b1 b0 c\/ b1 b2
+ (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- ((\b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))) b)
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 * / ! c==> c==> c~ b0 c= f0 b1 c= c\/ f0 b0 c\/ b1 b0 f1
- |- ((\s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s1)
T * / ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0
+ |- ((((split_list_hyp L) d) = L) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> c= csplit_list_hyp f0 f1 f0 c= cMEM f2 clist_of_elements f0 cMEM f2 clist_of_elements csplit_list_hyp f0 f1
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- (((MEM i) ((rot k) f)) ==> ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> cMEM f1 crot f2 f0 cMEM f1 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cCONS cHD crot f2 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0
+ |- (!x. (((\x. (((MEM d) (list_of_darts L)) = x)) x) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c==> * / c= cMEM f0 clist_of_darts f1 b0 f2 c= cMEM f3 clist_of_elements f1 cMEM f3 clist_of_elements csplit_list_hyp f1 f0
- ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = T)
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 cT
- |- ((\q'. ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5
- (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
+ |- (((!s. (!m. (!n. (?k. (((rot m) ((rot n) s)) = ((rot k) s)))))) ==> ((\s. (!m. (!n. (?k. (((rot m) ((rot n) s)) = ((rot k) s)))))) f)) = ((\s. (!m. (!n. (?k. (((rot m) ((rot n) s)) = ((rot k) s)))))) f))
T c= c==> ! ! ! c? / c= crot b1 crot b2 b0 crot b3 b0 * / ! ! c? / c= crot b1 crot b2 b0 crot b3 b0 f0 * / ! ! c? / c= crot b1 crot b2 b0 crot b3 b0 f0
- (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701)))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701)))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
+ |- (((real_add (real_neg (real_of_num m))) (real_of_num m)) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_neg creal_of_num f0 creal_of_num f0 creal_of_num cNUMERAL c_0
+ |- ((\x. (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) x)
T * / c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 b0 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4
+ (((rot k) f) = x) |- ((((NUMERAL _0) < (sizel x)) ==> ((MEM (HD x)) x)) = (((NUMERAL _0) < (sizel x)) ==> ((MEM (HD x)) ((rot k) f))))
T c==> c= crot f0 f1 f2 c= c==> c< cNUMERAL c_0 csizel f2 cMEM cHD f2 f2 c==> c< cNUMERAL c_0 csizel f2 cMEM cHD f2 crot f0 f1
- ((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) /\ (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))))
T c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c/\ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2
+ (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- (((!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))) ==> ((\c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))) c)) = ((\c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))) c))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= c==> ! c==> c==> c~ f0 c= f1 b0 c= c\/ f1 f0 c\/ b0 f0 * / c==> c==> c~ f0 c= f1 b0 c= c\/ f1 f0 c\/ b0 f0 f2 * / c==> c==> c~ f0 c= f1 b0 c= c\/ f1 f0 c\/ b0 f0 f2
+ |- ((\q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5
+ |- ((m <= n) = ((int_le (int_of_num m)) (int_of_num n)))
T c= c<= f0 f1 cint_le cint_of_num f0 cint_of_num f1
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- (((!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))) ==> ((\b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))) b)) = ((\b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))) b))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= c==> ! c==> c==> c~ b0 c= f0 f1 c= c\/ f0 b0 c\/ f1 b0 * / c==> c==> c~ b0 c= f0 f1 c= c\/ f0 b0 c\/ f1 b0 f2 * / c==> c==> c~ b0 c= f0 f1 c= c\/ f0 b0 c\/ f1 b0 f2
+ (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062699)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699)) /\ ((real_le (real_of_int _10062699)) (real_of_num (NUMERAL (BIT1 (BIT1 _0))))))))) |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062699)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699)) /\ ((real_le (real_of_int _10062699)) (real_of_num (NUMERAL (BIT1 (BIT1 _0))))))))) /\ F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 c/\ c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 cF
+ |- (((!x. (((MEM x) (undup s)) = ((MEM x) s))) ==> ((\x. (((MEM x) (undup s)) = ((MEM x) s))) x)) = ((\x. (((MEM x) (undup s)) = ((MEM x) s))) x))
T c= c==> ! c= cMEM b0 cundup f0 cMEM b0 f0 * / c= cMEM b0 cundup f0 cMEM b0 f0 f1 * / c= cMEM b0 cundup f0 cMEM b0 f0 f1
+ |- (((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) \/ T)
T c\/ cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cT
+ |- ((F ==> ((MEM (HD NIL)) NIL)) = (((NUMERAL _0) < (NUMERAL _0)) ==> ((MEM (HD NIL)) NIL)))
T c= c==> cF cMEM cHD cNIL cNIL c==> c< cNUMERAL c_0 cNUMERAL c_0 cMEM cHD cNIL cNIL
+ |- ((((MEM i) f) = ((MEM i) ((rot ((indexl d) (list_pairs f))) f))) = (((MEM i) f) = ((MEM i) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))))
T c= c= cMEM f0 f1 cMEM f0 crot cindexl f2 clist_pairs f1 f1 c= cMEM f0 f1 cMEM f0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- ((\a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))) a)
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 * / ! c==> c==> c~ b0 c= f0 b1 c= c\/ b0 f0 c\/ b0 b1 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) ==> ((\s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s2)) = ((\s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s2))
T c= c==> ! c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 * / c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1 * / c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
+ |- ((\d. (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))) d)
T * / c==> cMEM b0 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 b0 f0 f0 ccat cCONS cfind_pair_list f0 b0 cNIL cdropl c+ cindexl cfind_pair_list f0 b0 f0 cNUMERAL cBIT1 c_0 f0 f1
- |- ((((MEM d) (list_of_darts L)) = x) ==> (?x. (((MEM d) (list_of_darts L)) = x)))
T c==> c= cMEM f0 clist_of_darts f1 f2 c? / c= cMEM f0 clist_of_darts f1 b0
- |- ((((rot k) f) = x) = ((\x. (((rot k) f) = x)) x))
T c= c= crot f0 f1 f2 * / c= crot f0 f1 b0 f2
+ |- (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- ((~ b) ==> (a = c)) |- ((!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) ==> ((a \/ b) = (c \/ b)))
T c==> c==> c~ f0 c= f1 f2 c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= c\/ f1 f0 c\/ f2 f0
- ((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) /\ ((MEM i) ((rot k) f)))
T c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c/\ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 crot f1 f2
+ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = T)
T c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cT
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((indexl f) L) = ((indexl f) L)) = ((\n. (((indexl f) L) = n)) ((indexl f) L)))
T c= c= cindexl f0 f1 cindexl f0 f1 * / c= cindexl f0 f1 b0 cindexl f0 f1
+ |- (((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel f))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel f))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))) = ((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel f))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel f))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))))
T c= cMEM f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cNUMERAL cBIT1 cBIT1 c_0 csizel f1 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cMEM f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cNUMERAL cBIT1 cBIT1 c_0 csizel f1 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel f1 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f1
+ |- (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ |- ((\n. ((n < (NUMERAL _0)) = F)) n)
T * / c= c< b0 cNUMERAL c_0 cF f0
+ |- (((!n0. (!s. (!x. (((MEM x) ((rotr n0) s)) = ((MEM x) s))))) ==> ((\n0. (!s. (!x. (((MEM x) ((rotr n0) s)) = ((MEM x) s))))) n0)) = ((\n0. (!s. (!x. (((MEM x) ((rotr n0) s)) = ((MEM x) s))))) n0))
T c= c==> ! ! ! c= cMEM b2 crotr b0 b1 cMEM b2 b1 * / ! ! c= cMEM b2 crotr b0 b1 cMEM b2 b1 f0 * / ! ! c= cMEM b2 crotr b0 b1 cMEM b2 b1 f0
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) /\ (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c/\ c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
+ (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- ((\b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))))) b)
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 * / ! c==> c==> c~ f0 c= b0 b1 c= c\/ f0 b0 c\/ f0 b1 f1
- |- ((?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) ==> (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)))
T c==> c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0
+ |- (((!p'. (!q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= f2 ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat cCONS cfind_pair_list f2 f1 cNIL cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2
+ |- (((!s. (!x. (((MEM x) ((rot k) s)) = ((MEM x) s)))) ==> ((\s. (!x. (((MEM x) ((rot k) s)) = ((MEM x) s)))) f)) = ((\s. (!x. (((MEM x) ((rot k) s)) = ((MEM x) s)))) f))
T c= c==> ! ! c= cMEM b1 crot f0 b0 cMEM b1 b0 * / ! c= cMEM b1 crot f0 b0 cMEM b1 b0 f1 * / ! c= cMEM b1 crot f0 b0 cMEM b1 b0 f1
+ |- ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
- ((MEM d) (list_of_darts L)) |- (((MEM d) (list_of_darts L)) /\ (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))
T c==> cMEM f0 clist_of_darts f1 c/\ cMEM f0 clist_of_darts f1 c= csplit_list_hyp f1 f0 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs cfind_pair_list f1 f0 cfind_pair_list f1 f0 cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1
+ |- (((!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) ==> ((\s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) s1)) = ((\s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) s1))
T c= c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 * / ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0 * / ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0
+ (((indexl f) L) = n) |- ((((indexl f) L) = n) /\ (((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat ((CONS f) NIL)) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> c= cindexl f0 f1 f2 c/\ c= cindexl f0 f1 f2 c= cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1 cMEM f3 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f0 f0 cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1
+ ((\x. (((MEM d) (list_of_darts L)) = x)) x) |- (((((MEM d) (list_of_darts L)) = x) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> * / c= cMEM f0 clist_of_darts f1 b0 f2 c= c==> c= cMEM f0 clist_of_darts f1 f2 c= cMEM f3 clist_of_elements f1 cMEM f3 clist_of_elements csplit_list_hyp f1 f0 c= cMEM f3 clist_of_elements f1 cMEM f3 clist_of_elements csplit_list_hyp f1 f0
+ |- (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0 cF
+ |- ((((\x. (((rot k) f) = x)) x) ==> (((NUMERAL _0) < (sizel ((rot k) f))) ==> ((MEM (HD ((rot k) f))) ((rot k) f)))) = T)
T c= c==> * / c= crot f0 f1 b0 f2 c==> c< cNUMERAL c_0 csizel crot f0 f1 cMEM cHD crot f0 f1 crot f0 f1 cT
+ |- ((((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((cat ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))) = (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((cat ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten NIL))))))
T c= c= cMEM f0 f1 cMEM f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 ccat cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL c= cMEM f0 f1 cMEM f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 ccat cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cflatten cNIL
+ |- ((((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062701)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701)) /\ ((real_le (real_of_int _10062701)) (real_of_num (NUMERAL _0))))))) ==> F) ==> (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062701)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701)) /\ ((real_le (real_of_int _10062701)) (real_of_num (NUMERAL _0))))))) = (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062701)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701)) /\ ((real_le (real_of_int _10062701)) (real_of_num (NUMERAL _0)))))))
T c= c==> c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL c_0 cF c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL c_0 c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL c_0
+ |- ((\P. (!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q))))) P)
T * / ! c= c==> c? / * b0 b2 b1 ! c==> * b0 b2 b1 f0
- |- ((\h. ((HD ((CONS h) t)) = h)) h)
T * / c= cHD cCONS b0 f0 b0 f1
+ |- ((\d. (((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))) d)
T * / c==> cMEM b0 clist_of_darts f0 c= csplit_list_hyp f0 b0 ccat ctake cindexl cfind_pair_list f0 b0 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl b0 clist_pairs cfind_pair_list f0 b0 cfind_pair_list f0 b0 cdropl c+ cindexl cfind_pair_list f0 b0 f0 cNUMERAL cBIT1 c_0 f0 f1
+ |- ((\n0. (!s. (!x. (((MEM x) ((rotr n0) s)) = ((MEM x) s))))) n0)
T * / ! ! c= cMEM b2 crotr b0 b1 cMEM b2 b1 f0
+ |- ((\n0. (!s. (!x. (((MEM x) ((dropl n0) s)) ==> ((MEM x) s))))) n0)
T * / ! ! c==> cMEM b2 cdropl b0 b1 cMEM b2 b1 f0
+ ((\x. (((MEM d) (list_of_darts L)) = x)) x) |- (((MEM d) (list_of_darts L)) = x)
T c==> * / c= cMEM f0 clist_of_darts f1 b0 f2 c= cMEM f0 clist_of_darts f1 f2
+ (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10062699)) /\ (((real_le ((real_add (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699)) /\ ((real_le (real_of_int _10062699)) (real_of_num (NUMERAL (BIT1 (BIT1 _0))))))))) |- (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))))
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_add creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (((!n. (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot n) f)) = ((rot k) f)))) ==> ((\n. (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot n) f)) = ((rot k) f)))) ((indexl d) (list_pairs f)))) = ((\n. (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot n) f)) = ((rot k) f)))) ((indexl d) (list_pairs f))))
T c= c==> ! c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot b0 f0 crot b1 f0 * / c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot b0 f0 crot b1 f0 cindexl f1 clist_pairs f0 * / c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot b0 f0 crot b1 f0 cindexl f1 clist_pairs f0
+ |- ((x = x) = T)
T c= c= f0 f0 cT
- (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)) |- ((((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)) /\ (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))))
T c==> c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot f2 f0 c/\ c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot f2 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0
+ ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- ((MEM i) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))
T c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2
+ |- (((!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))) ==> ((\s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))) s)) = ((\s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))) s))
T c= c==> ! ! c==> cMEM b1 ctake f0 b0 cMEM b1 b0 * / ! c==> cMEM b1 ctake f0 b0 cMEM b1 b0 f1 * / ! c==> cMEM b1 ctake f0 b0 cMEM b1 b0 f1
- (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- (!x. (((\x. (((rot k) f) = x)) x) ==> (((NUMERAL _0) < (sizel ((rot k) f))) ==> ((MEM (HD ((rot k) f))) ((rot k) f)))))
T c==> * / c= crot f0 f1 b0 f2 c==> c< cNUMERAL c_0 csizel crot f0 f1 cMEM cHD crot f0 f1 crot f0 f1
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) |- ((((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))) = T)
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c= c==> c/\ cuniq f0 cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1 cT
- |- (((!p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 f4
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- ((((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c==> c==> cMEM f1 clist_of_darts f2 c= csplit_list_hyp f2 f1 ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- |- ((\p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 f4
+ (((rot k) f) = x) |- ((((rot k) f) = x) /\ (((NUMERAL _0) < (sizel ((rot k) f))) ==> ((MEM (HD ((rot k) f))) ((rot k) f))))
T c==> c= crot f0 f1 f2 c/\ c= crot f0 f1 f2 c==> c< cNUMERAL c_0 csizel crot f0 f1 cMEM cHD crot f0 f1 crot f0 f1
+ (((ssreflect_eq f_size) P) = P) |- (P = ((ssreflect_eq f_size) P))
T c==> c= cssreflect_eq f0 f1 f1 c= f1 cssreflect_eq f0 f1
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- (((!c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))) ==> ((\c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))) c)) = ((\c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))) c))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= c==> ! ! c==> c==> c~ b1 c= f0 b0 c= c\/ f0 b1 c\/ b0 b1 * / ! c==> c==> c~ b1 c= f0 b0 c= c\/ f0 b1 c\/ b0 b1 f1 * / ! c==> c==> c~ b1 c= f0 b0 c= c\/ f0 b1 c\/ b0 b1 f1
+ |- (((!s. ((sizel ((rot n0) s)) = (sizel s))) ==> ((\s. ((sizel ((rot n0) s)) = (sizel s))) s)) = ((\s. ((sizel ((rot n0) s)) = (sizel s))) s))
T c= c==> ! c= csizel crot f0 b0 csizel b0 * / c= csizel crot f0 b0 csizel b0 f1 * / c= csizel crot f0 b0 csizel b0 f1
+ |- (((?k. (s = ((rot k) f))) ==> (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s)))))) = (!k. ((s = ((rot k) f)) ==> (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s))))))))
T c= c==> c? / c= f0 crot b0 f1 c= cMEM f2 f1 cMEM f2 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0 ! c==> c= f0 crot b0 f1 c= cMEM f2 f1 cMEM f2 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f0 cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0
+ |- ((!d. ((perm_eq (list_of_elements L)) (list_of_elements ((split_list_hyp L) d)))) = T)
T c= ! cperm_eq clist_of_elements f0 clist_of_elements csplit_list_hyp f0 b0 cT
+ |- (((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((MEM i) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) ==> ((MEM i) ((rot k) f))) = (((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) ==> ((MEM i) ((rot k) f))))
T c= c==> c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cCONS cHD crot f1 f2 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 cMEM f0 crot f1 f2 c==> cMEM f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCONS cHD crot f1 f2 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 cMEM f0 crot f1 f2
+ |- ((\s. (((rotr n) s) = ((rot ((sizel s) - n)) s))) s)
T * / c= crotr f0 b0 crot c- csizel b0 f0 b0 f1
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((s = ((rot k) f)) ==> (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) s)) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s)))))) = T)
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c==> c= f2 crot f3 f1 c= cMEM f4 f1 cMEM f4 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 f2 cCONS cHD f2 cdropl cNUMERAL cBIT0 cBIT1 c_0 f2 cT
+ |- ((\f. (((find_pair_list L) d) = f)) ((find_pair_list L) d))
T * / c= cfind_pair_list f0 f1 b0 cfind_pair_list f0 f1
+ |- ((((NUMERAL _0) < (NUMERAL _0)) ==> ((MEM (HD NIL)) NIL)) = (((NUMERAL _0) < (sizel NIL)) ==> ((MEM (HD NIL)) NIL)))
T c= c==> c< cNUMERAL c_0 cNUMERAL c_0 cMEM cHD cNIL cNIL c==> c< cNUMERAL c_0 csizel cNIL cMEM cHD cNIL cNIL
+ |- (((MEM i) f) = ((MEM i) ((cat ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) (flatten NIL))))
T c= cMEM f0 f1 cMEM f0 ccat crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cflatten cNIL
+ |- ((\x. (((MEM d) (list_of_darts L)) = x)) ((MEM d) (list_of_darts L)))
T * / c= cMEM f0 clist_of_darts f1 b0 cMEM f0 clist_of_darts f1
+ |- ((~ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))) ==> (((MEM i) (flatten ((CONS f) NIL))) = ((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))))))
T c==> c~ cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3
+ |- ((t = T) = t)
T c= c= f0 cT f0
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) |- ((\s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s2)
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 * / c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
+ |- (((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((MEM h) ((CONS h) t)))
T c==> c< cNUMERAL c_0 csizel cCONS f0 f1 cMEM f0 cCONS f0 f1
+ |- (((T /\ T) /\ (!x. (((MEM x) (list_of_elements L)) = ((MEM x) (list_of_elements ((split_list_hyp L) d)))))) = ((T /\ (uniq (list_of_elements ((split_list_hyp L) d)))) /\ (!x. (((MEM x) (list_of_elements L)) = ((MEM x) (list_of_elements ((split_list_hyp L) d)))))))
T c= c/\ c/\ cT cT ! c= cMEM b0 clist_of_elements f0 cMEM b0 clist_of_elements csplit_list_hyp f0 f1 c/\ c/\ cT cuniq clist_of_elements csplit_list_hyp f0 f1 ! c= cMEM b0 clist_of_elements f0 cMEM b0 clist_of_elements csplit_list_hyp f0 f1
+ |- (((int_le (int_of_num (NUMERAL _0))) _10062701) ==> ((~ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) _10062701)) \/ ((int_lt (int_of_num (NUMERAL _0))) _10062701)))
T c==> cint_le cint_of_num cNUMERAL c_0 f0 c\/ c~ cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 f0 cint_lt cint_of_num cNUMERAL c_0 f0
+ |- ((?n. (((indexl f) L) = n)) ==> (((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat ((CONS f) NIL)) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl f) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (((indexl f) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> c? / c= cindexl f0 f1 b0 c= cMEM f2 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1 cMEM f2 clist_of_elements ccat ctake cindexl f0 f1 f1 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cdropl c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((MEM i) (undup (flatten ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((MEM i) (undup (flatten ((cat ((take n) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= cMEM f0 cundup cflatten ccat ctake f1 f2 ccat cCONS f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 cundup cflatten ccat ctake f1 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- (!x. (((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x) ==> (((MEM i) f) = ((MEM i) (flatten (((COND ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))))
T c==> * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1 c= cMEM f2 f0 cMEM f2 cflatten cCOND c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cNIL
+ |- (((!q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 * / c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5 * / c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f3 f1 cMEM f3 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- ((((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s) ==> (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))))))) = T)
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c==> * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 b0 f3 c= cMEM f4 f1 cMEM f4 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cT
- ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) /\ ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c/\ cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
- |- (((!q'. ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q'))))) ==> ((\q'. ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q'))))) q')) = ((\q'. ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> f3 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b0 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> f3 b0 * / c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> f3 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b0 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> f3 b0 f4 * / c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> f3 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b0 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> f3 b0 f4
+ (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- (((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((!x. (((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x) ==> (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)))) ==> ((?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) ==> (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)))) = ((?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) ==> (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x))))
T c= c==> ! c==> * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b1 b0 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b1 c==> c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0
+ |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num (sizel f))) ==> (((int_le (int_of_num (sizel f))) (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) \/ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) (int_of_num (sizel f))))) = (((int_le (int_of_num (sizel f))) (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) \/ ((int_lt (int_of_num (NUMERAL (BIT1 (BIT1 _0))))) (int_of_num (sizel f)))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num csizel f0 c\/ cint_le cint_of_num csizel f0 cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_of_num csizel f0 c\/ cint_le cint_of_num csizel f0 cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_lt cint_of_num cNUMERAL cBIT1 cBIT1 c_0 cint_of_num csizel f0
- |- (((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))))) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> q')))) = ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> q'))))
T c= c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c==> c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f4 c==> c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f4
+ |- ((((MEM i) f) = ((MEM i) (flatten (((COND ((sizel ((rot ((indexl d) (list_pairs f))) f)) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((MEM i) f) = ((MEM i) (flatten (((COND ((sizel ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c= c= cMEM f0 f1 cMEM f0 cflatten cCOND c<= csizel crot cindexl f2 clist_pairs f1 f1 cNUMERAL cBIT1 cBIT1 c_0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL c= cMEM f0 f1 cMEM f0 cflatten cCOND c<= csizel crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNUMERAL cBIT1 cBIT1 c_0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL
+ |- (((!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) ==> ((((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = (((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))) = ((((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = (((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- |- ((\t. (!h. ((HD ((CONS h) t)) = h))) t)
T * / ! c= cHD cCONS b1 b0 b1 f0
+ |- ((((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))) = ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))))
T c= c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f0
+ (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) = (((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- (((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
+ (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- ((\c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))) c)
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 * / c==> c==> c~ f0 c= f1 b0 c= c\/ f0 f1 c\/ f0 b0 f2
- |- ((\p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 b0 c==> c==> b0 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> b0 b1 f4
- ((\x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) x) |- (((((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) ==> (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x))) = (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)))
T c==> * / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 f1 c= c==> c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0
+ |- ((\x. (((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND x) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))) x)
T * / c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c= cMEM f2 f1 cMEM f2 cflatten cCOND b0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) |- (((!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))) ==> ((\s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))) s2)) = ((\s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))) s2))
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c= c==> ! c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 * / c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1 * / c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
+ |- ((uniq (list_of_elements L)) = T)
T c= cuniq clist_of_elements f0 cT
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))), ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f2 f0
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- ((!c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))) = T)
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= ! ! c==> c==> c~ b1 c= f0 b0 c= c\/ f0 b1 c\/ b0 b1 cT
+ (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) |- ((((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) /\ (((MEM i) f) = ((MEM i) (flatten (((COND ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c==> c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c/\ c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c= cMEM f2 f0 cMEM f2 cflatten cCOND c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f0 f0 cNIL
+ |- (((((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = T)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) /\ (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = F)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) ==> (!x. (((ssreflect_eq mem_d) (((MEM d) (list_of_darts L)) = x)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))))
T c==> c/\ c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cT c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 cF c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 ! c==> cssreflect_eq f0 c= cMEM f1 clist_of_darts f2 b0 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- |- (((!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) ==> (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) = (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))))
T c= c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1
+ |- (((!p'. (!q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND F) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF c= cMEM f2 f1 cMEM f2 cflatten cCOND cF cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (T = (((MEM i) f) = ((MEM i) f)))
T c= cT c= cMEM f0 f1 cMEM f0 f1
+ |- (((!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))) ==> ((\ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))) ss2)) = ((\ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))) ss2))
T c= c==> ! c= cflatten ccat f0 b0 ccat cflatten f0 cflatten b0 * / c= cflatten ccat f0 b0 ccat cflatten f0 cflatten b0 f1 * / c= cflatten ccat f0 b0 ccat cflatten f0 cflatten b0 f1
+ |- (((((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = (((MEM i) (flatten ((take n) L))) \/ ((MEM i) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) = ((((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) ((cat (flatten ((take n) L))) ((cat (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= c= c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c\/ cMEM f0 cflatten ctake f1 f2 cMEM f0 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cMEM f0 ccat cflatten ctake f1 f2 ccat cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- ((((find_pair_list L) d) = f) ==> (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> c= cfind_pair_list f0 f1 f2 c= cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))), ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- ((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0
- |- ((((MEM d) (list_of_darts L)) = x) = ((\x. (((MEM d) (list_of_darts L)) = x)) x))
T c= c= cMEM f0 clist_of_darts f1 f2 * / c= cMEM f0 clist_of_darts f1 b0 f2
+ |- (((MEM i) f) = ((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))))
T c= cMEM f0 f1 cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1
- |- (((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) t') e'))))) = ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) t') e')))))
T c= c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c==> c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2 c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f3 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f2 f3 c==> c==> c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2 c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f3 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f2 f3
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\f. ((split_list_face f) = (((COND ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS f) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) f)) ((CONS ((CONS (HD f)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) f))) NIL))))) f)
T * / c= csplit_list_face b0 cCOND c<= csizel b0 cNUMERAL cBIT1 cBIT1 c_0 cCONS b0 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 b0 cCONS cCONS cHD b0 cdropl cNUMERAL cBIT0 cBIT1 c_0 b0 cNIL f0
+ |- ((\e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))) e')
T * / c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 f1 c==> c==> f1 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 f3 c==> c==> c~ f1 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 b0 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cCOND f1 f3 b0 f4
+ |- ((\q'. ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = q')) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f3 f1 cMEM f3 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5
- |- ((((\n. (((indexl f) L) = n)) n) ==> (?n. (((indexl f) L) = n))) = T)
T c= c==> * / c= cindexl f0 f1 b0 f2 c? / c= cindexl f0 f1 b0 cT
+ |- ((~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))))
T c==> c~ c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- ((((MEM i) f) = ((MEM i) ((cat ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) (flatten NIL)))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))))
T c= c= cMEM f0 f1 cMEM f0 ccat crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cflatten cNIL c= cMEM f0 f1 cMEM f0 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL
- |- ((?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) ==> (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)))
T c==> c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0
+ |- (((!d. (((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))) ==> ((\d. (((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))) d)) = ((\d. (((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))) d))
T c= c==> ! c==> cMEM b0 clist_of_darts f0 c= csplit_list_hyp f0 b0 ccat ctake cindexl cfind_pair_list f0 b0 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl b0 clist_pairs cfind_pair_list f0 b0 cfind_pair_list f0 b0 cdropl c+ cindexl cfind_pair_list f0 b0 f0 cNUMERAL cBIT1 c_0 f0 * / c==> cMEM b0 clist_of_darts f0 c= csplit_list_hyp f0 b0 ccat ctake cindexl cfind_pair_list f0 b0 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl b0 clist_pairs cfind_pair_list f0 b0 cfind_pair_list f0 b0 cdropl c+ cindexl cfind_pair_list f0 b0 f0 cNUMERAL cBIT1 c_0 f0 f1 * / c==> cMEM b0 clist_of_darts f0 c= csplit_list_hyp f0 b0 ccat ctake cindexl cfind_pair_list f0 b0 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl b0 clist_pairs cfind_pair_list f0 b0 cfind_pair_list f0 b0 cdropl c+ cindexl cfind_pair_list f0 b0 f0 cNUMERAL cBIT1 c_0 f0 f1
+ |- (((MEM i) f) = ((MEM i) (flatten (((COND ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))
T c= cMEM f0 f1 cMEM f0 cflatten cCOND c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cNIL
- ((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- ((((MEM i) ((rot k) f)) ==> ((MEM i) ((rot k) f))) = ((MEM i) ((rot k) f)))
T c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c= c==> cMEM f0 crot f1 f2 cMEM f0 crot f1 f2 cMEM f0 crot f1 f2
- |- (((~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))))) = T)
T c= c==> c~ c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
+ (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- (((!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))) ==> ((\b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))) b)) = ((\b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))) b))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= c==> ! ! c==> c==> c~ b0 c= f0 b1 c= c\/ f0 b0 c\/ b1 b0 * / ! c==> c==> c~ b0 c= f0 b1 c= c\/ f0 b0 c\/ b1 b0 f1 * / ! c==> c==> c~ b0 c= f0 b1 c= c\/ f0 b0 c\/ b1 b0 f1
+ |- (((NUMERAL _0) < (sizel ((CONS h) t))) ==> ((h = h) \/ ((MEM h) t)))
T c==> c< cNUMERAL c_0 csizel cCONS f0 f1 c\/ c= f0 f0 cMEM f0 f1
- |- (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))))
T c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ |- ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)
T * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- ((((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c==> c= csplit_list_hyp f2 f1 ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
+ |- ((\n. (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot n) f)) = ((rot k) f)))) ((indexl d) (list_pairs f)))
T * / c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot b0 f0 crot b1 f0 cindexl f1 clist_pairs f0
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) |- ((!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) = T)
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c= ! c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 cT
+ |- (!g'. (!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5
- |- ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> q')))
T c==> c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f4
+ |- ((((~ ((MEM d) (list_of_darts L))) ==> (((split_list_hyp L) d) = L)) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c= c==> c==> c~ cMEM f0 clist_of_darts f1 c= csplit_list_hyp f1 f0 f1 c= cMEM f2 clist_of_elements f1 cMEM f2 clist_of_elements csplit_list_hyp f1 f0 c= cMEM f2 clist_of_elements f1 cMEM f2 clist_of_elements csplit_list_hyp f1 f0
+ ((\x. (((rot k) f) = x)) x) |- (((((rot k) f) = x) ==> (((NUMERAL _0) < (sizel ((rot k) f))) ==> ((MEM (HD ((rot k) f))) ((rot k) f)))) = (((NUMERAL _0) < (sizel ((rot k) f))) ==> ((MEM (HD ((rot k) f))) ((rot k) f))))
T c==> * / c= crot f0 f1 b0 f2 c= c==> c= crot f0 f1 f2 c==> c< cNUMERAL c_0 csizel crot f0 f1 cMEM cHD crot f0 f1 crot f0 f1 c==> c< cNUMERAL c_0 csizel crot f0 f1 cMEM cHD crot f0 f1 crot f0 f1
+ |- (((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))) = ((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND T) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))))
T c= cMEM f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f2 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND cT cNUMERAL cBIT1 cBIT1 c_0 csizel f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2
+ (((NUMERAL (BIT1 (BIT1 _0))) < (sizel f)) /\ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))), ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- ((MEM i) (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel f))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel f)))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (((COND ((NUMERAL (BIT1 (BIT1 _0))) < (sizel ((rot k) f)))) (NUMERAL (BIT1 (BIT1 _0)))) (sizel ((rot k) f))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c==> c/\ c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> cMEM f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cMEM f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cNUMERAL cBIT1 cBIT1 c_0 csizel f0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cCOND c< cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 cNUMERAL cBIT1 cBIT1 c_0 csizel crot f2 f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f2 f0
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((((P T) /\ (P F)) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c= c==> c/\ * f0 cT * f0 cF ! * f0 b0 cT
+ |- ((\ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))) ss2)
T * / c= cflatten ccat f0 b0 ccat cflatten f0 cflatten b0 f1
- (((rot k) f) = x) |- (x = ((rot k) f))
T c==> c= crot f0 f1 f2 c= f2 crot f0 f1
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- |- ((\q'. ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 f5
+ ((\f. (((find_pair_list L) d) = f)) f) |- (((\f. (((find_pair_list L) d) = f)) f) /\ (((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = ((MEM i) (list_of_elements ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c==> * / c= cfind_pair_list f0 f1 b0 f2 c/\ * / c= cfind_pair_list f0 f1 b0 f2 c= cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 cMEM f3 clist_of_elements ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f0 f1 cfind_pair_list f0 f1 cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0
+ (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- ((!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) /\ ((((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = (((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c/\ ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- (((!Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))) ==> ((\Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))) Q)) = ((\Q. (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))) Q))
T c= c==> ! c= c==> c? / * f0 b1 b0 ! c==> * f0 b1 b0 * / c= c==> c? / * f0 b1 b0 ! c==> * f0 b1 b0 f1 * / c= c==> c? / * f0 b1 b0 ! c==> * f0 b1 b0 f1
- (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q))) |- ((!x. ((P x) ==> Q)) = ((?x. (P x)) ==> Q))
T c==> c= c==> c? / * f0 b0 f1 ! c==> * f0 b0 f1 c= ! c==> * f0 b0 f1 c==> c? / * f0 b0 f1
+ (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- (((((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))
T c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 c==> c==> f0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> c~ f0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f4 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCOND f0 f3 f4
+ |- (((!L. (!d. (((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) ==> ((\L. (!d. (((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) L)) = ((\L. (!d. (((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) L))
T c= c==> ! ! c==> cMEM b1 clist_of_darts b0 c= csplit_list_hyp b0 b1 ccat ctake cindexl cfind_pair_list b0 b1 b0 b0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl b1 clist_pairs cfind_pair_list b0 b1 cfind_pair_list b0 b1 cdropl c+ cindexl cfind_pair_list b0 b1 b0 cNUMERAL cBIT1 c_0 b0 * / ! c==> cMEM b1 clist_of_darts b0 c= csplit_list_hyp b0 b1 ccat ctake cindexl cfind_pair_list b0 b1 b0 b0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl b1 clist_pairs cfind_pair_list b0 b1 cfind_pair_list b0 b1 cdropl c+ cindexl cfind_pair_list b0 b1 b0 cNUMERAL cBIT1 c_0 b0 f0 * / ! c==> cMEM b1 clist_of_darts b0 c= csplit_list_hyp b0 b1 ccat ctake cindexl cfind_pair_list b0 b1 b0 b0 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl b1 clist_pairs cfind_pair_list b0 b1 cfind_pair_list b0 b1 cdropl c+ cindexl cfind_pair_list b0 b1 b0 cNUMERAL cBIT1 c_0 b0 f0
- |- ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))))
T c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ ((\f. (((find_pair_list L) d) = f)) f) |- (((find_pair_list L) d) = f)
T c==> * / c= cfind_pair_list f0 f1 b0 f2 c= cfind_pair_list f0 f1 f2
+ |- (((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))))) ==> ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))))) = ((((ssreflect_eq f_size) (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)) ==> (((MEM i) f) = ((MEM i) (flatten (((COND T) ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)) ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))))))
T c= c==> c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= c==> cssreflect_eq f0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT c= cMEM f2 f1 cMEM f2 cflatten cCOND cT cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
+ |- (((!x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) ==> ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x)) = ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x))
T c= c==> ! ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
+ |- ((((~ ((MEM i) (flatten ((take n) L)))) ==> ((((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))) = (((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))) ==> ((((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = (((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))))) = ((((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten ((CONS f) NIL))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L))))) = (((MEM i) (flatten ((take n) L))) \/ (((MEM i) (flatten (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) \/ ((MEM i) (flatten ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))
T c= c==> c==> c~ cMEM f0 cflatten ctake f1 f2 c= c\/ cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c\/ cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten cCONS f3 cNIL cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c\/ cMEM f0 cflatten ctake f1 f2 c\/ cMEM f0 cflatten csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f3 f3 cMEM f0 cflatten cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- |- (((!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) ==> ((\s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) s1)) = ((\s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) s1))
T c= c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 * / ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0 * / ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0
+ (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (s = ((rot k) f)), ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD s)) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) s)))))
T c==> c= f0 crot f1 f2 c==> cssreflect_eq f3 c~ c<= csizel f2 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f4 f2 cMEM f4 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCONS cHD f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 f0
- ((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s) |- (((((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s) ==> (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s))) = (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)))
T c==> * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 f2 c= c==> c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 f2 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0
+ ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- (((((MEM d) (list_of_darts L)) /\ ((((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) ==> ((((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) = ((((MEM d) (list_of_darts L)) ==> (((split_list_hyp L) d) = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat (split_list_face ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs ((find_pair_list L) d)))) ((find_pair_list L) d))))) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c==> c/\ cMEM f1 clist_of_darts f2 c==> c= csplit_list_hyp f2 f1 ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> c==> cMEM f1 clist_of_darts f2 c= csplit_list_hyp f2 f1 ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> c==> cMEM f1 clist_of_darts f2 c= csplit_list_hyp f2 f1 ccat ctake cindexl cfind_pair_list f2 f1 f2 f2 ccat csplit_list_face crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs cfind_pair_list f2 f1 cfind_pair_list f2 f1 cdropl c+ cindexl cfind_pair_list f2 f1 f2 cNUMERAL cBIT1 c_0 f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
+ ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))), ((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s) |- (((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s) /\ (((MEM i) f) = ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c==> * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 b0 f3 c/\ * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 b0 f3 c= cMEM f4 f1 cMEM f4 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f2 clist_pairs f1 f1
+ |- ((((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ==> ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (((MEM i) ((rot k) f)) ==> ((MEM i) ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((CONS (HD ((rot k) f))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))))
T c= c==> cMEM f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCONS cHD crot f1 f2 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> cMEM f0 crot f1 f2 cMEM f0 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCONS cHD crot f1 f2 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) |- (((!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) ==> ((\s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) s2)) = ((\s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) s2))
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c= c==> ! c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 * / c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1 * / c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
- (((rot k) f) = ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) |- (((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((rot k) f))
T c==> c= crot f0 f1 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 c= ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 crot f0 f1
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) |- ((\s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) s2)
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 * / c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
- (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s) |- ((((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s) /\ (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)))
T c==> c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 f2 c/\ c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 f2 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0
- |- (!k. ((((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)) ==> (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)))))
T c==> c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot f2 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))), (uniq s1) |- ((uniq s1) /\ ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> cuniq f0 c/\ cuniq f0 c==> cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))), (uniq s1) |- ((!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) /\ ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> cuniq f0 c/\ ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) |- (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0
- (((real_ge (real_of_int _10062701)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062701))) (real_of_num (NUMERAL _0))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10062701)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) ==> (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))))
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1
- |- (((NUMERAL (BIT1 _0)) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 _0)))
T c= c* cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
- |- (((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x))))) = (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- ((!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))) = T)
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= ! c==> c==> c~ b0 c= f0 f1 c= c\/ f0 b0 c\/ f1 b0 cT
- (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))), ((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) |- (!l. (P l))
T c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! * f0 cCONS b0 b1 ! * f0 b0
- (~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- (((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = F)
T c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cF
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- (((((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)) ==> (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)))) = T)
T c= c==> c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot f2 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 cT
- (((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((rot k) f)) |- (((rot k) f) = ((cat ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))
T c==> c= ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 crot f0 f1 c= crot f0 f1 ccat ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1
- |- ((?x. (((rot k) f) = x)) ==> (?x. (((rot k) f) = x)))
T c==> c? / c= crot f0 f1 b0 c? / c= crot f0 f1 b0
- |- (((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))) = ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))))
T c= c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) |- ((!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) = T)
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c= ! c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 cT
- |- ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
- |- ((\g'. (!t'. (!e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 b1 c==> c==> c~ b0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 b2 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND b0 b1 b2 f2
- ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- (((MEM d) (list_of_darts L)) = T)
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f1 clist_of_darts f2 cT
- |- (((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = ((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> q')))) = ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> q'))))
T c= c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c==> c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f4 c==> c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL f4 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f4
- ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = F)
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cF
- ((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) |- (T = (~ ((MEM d) (list_of_darts L))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cT c~ cMEM f1 clist_of_darts f2
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((rot k) f) = x) |- ((((NUMERAL _0) < (sizel x)) ==> ((MEM (HD x)) x)) = (((NUMERAL _0) < (sizel ((rot k) f))) ==> ((MEM (HD ((rot k) f))) ((rot k) f))))
T c==> c= crot f0 f1 f2 c= c==> c< cNUMERAL c_0 csizel f2 cMEM cHD f2 f2 c==> c< cNUMERAL c_0 csizel crot f0 f1 cMEM cHD crot f0 f1 crot f0 f1
- (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) |- ((!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) /\ (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))))
T c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))), (((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) |- ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) /\ ((perm_eq s1) s2))
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> c/\ c/\ cuniq f0 cuniq f1 ! c= cMEM b0 f0 cMEM b0 f1 c/\ c/\ c/\ cuniq f0 cuniq f1 ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
- |- ((\s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) s2)
T * / c==> cuniq f0 c==> cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
- |- ((!n. ((n < (NUMERAL _0)) = F)) = (((sizel NIL) = (NUMERAL _0)) /\ (!n. ((n < (NUMERAL _0)) = F))))
T c= ! c= c< b0 cNUMERAL c_0 cF c/\ c= csizel cNIL cNUMERAL c_0 ! c= c< b0 cNUMERAL c_0 cF
- |- (((!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) ==> ((\s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) s2)) = ((\s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))) s2))
T c= c==> ! c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 * / c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1 * / c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 f1
- |- (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) |- ((!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))) = T)
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c= ! c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0 cT
- |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))
T c= c* cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
- ((\x. (((MEM d) (list_of_darts L)) = x)) x) |- (((((MEM d) (list_of_darts L)) = x) ==> (?x. (((MEM d) (list_of_darts L)) = x))) = (?x. (((MEM d) (list_of_darts L)) = x)))
T c==> * / c= cMEM f0 clist_of_darts f1 b0 f2 c= c==> c= cMEM f0 clist_of_darts f1 f2 c? / c= cMEM f0 clist_of_darts f1 b0 c? / c= cMEM f0 clist_of_darts f1 b0
- |- ((\h. (!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))))) h)
T * / ! ! c/\ c= cMEM b1 cNIL cF c= cMEM b1 cCONS b0 b2 c\/ c= b1 b0 cMEM b1 b2 f0
- |- (((!e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))) ==> ((\e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))) e')) = ((\e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 c==> c==> f0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> c~ f0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCOND f0 f3 b0 * / c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 c==> c==> f0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> c~ f0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCOND f0 f3 b0 f4 * / c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 c==> c==> f0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> c~ f0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cCOND f0 f3 b0 f4
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))), ((~ a) ==> (b = c)) |- (((~ a) ==> (b = c)) /\ ((a \/ b) = (a \/ c)))
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c==> c==> c~ f0 c= f1 f2 c/\ c==> c~ f0 c= f1 f2 c= c\/ f0 f1 c\/ f0 f2
- |- (((?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))) ==> (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)))) = (!k. ((((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)) ==> (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))))))
T c= c==> c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 ! c==> c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b1 f0
- (~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) |- ((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) /\ (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1
- |- (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))))
T c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2
- ((!x. ((P x) ==> Q)) = ((?x. (P x)) ==> Q)) |- (((?x. (P x)) ==> Q) = (!x. ((P x) ==> Q)))
T c==> c= ! c==> * f0 b0 f1 c==> c? / * f0 b0 f1 c= c==> c? / * f0 b0 f1 ! c==> * f0 b0 f1
- |- (((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> q')))) = ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> q'))))
T c= c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c==> c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 f3 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3 c==> c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 f3 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 f3
- ((\x. (((rot k) f) = x)) x) |- (((\x. (((rot k) f) = x)) x) /\ (?x. (((rot k) f) = x)))
T c==> * / c= crot f0 f1 b0 f2 c/\ * / c= crot f0 f1 b0 f2 c? / c= crot f0 f1 b0
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- ((\c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))) c)
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 * / ! c==> c==> c~ b1 c= f0 b0 c= c\/ f0 b1 c\/ b0 b1 f1
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (((P T) /\ (P F)) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ c/\ * f0 cT * f0 cF ! * f0 b0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 f5
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- (((!x. (((\n. (((indexl f) L) = n)) x) ==> (?n. (((indexl f) L) = n)))) ==> ((?n. (((indexl f) L) = n)) ==> (?n. (((indexl f) L) = n)))) = ((?n. (((indexl f) L) = n)) ==> (?n. (((indexl f) L) = n))))
T c= c==> ! c==> * / c= cindexl f0 f1 b1 b0 c? / c= cindexl f0 f1 b1 c==> c? / c= cindexl f0 f1 b0 c? / c= cindexl f0 f1 b0 c==> c? / c= cindexl f0 f1 b0 c? / c= cindexl f0 f1 b0
- (((MEM d) (list_of_darts L)) = x) |- ((((MEM d) (list_of_darts L)) = x) /\ (?x. (((MEM d) (list_of_darts L)) = x)))
T c==> c= cMEM f0 clist_of_darts f1 f2 c/\ c= cMEM f0 clist_of_darts f1 f2 c? / c= cMEM f0 clist_of_darts f1 b0
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 ! c==> c==> c~ b0 c= f0 f1 c= c\/ f0 b0 c\/ f1 b0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) |- (((MEM d) (list_of_darts L)) = F)
T c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f1 clist_of_darts f2 cF
- (((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) |- ((!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) ==> ((perm_eq s1) s2))
T c==> c/\ c/\ cuniq f0 cuniq f1 ! c= cMEM b0 f0 cMEM b0 f1 c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 cperm_eq f0 f1
- |- (((!x. (((\f. (((find_pair_list L) d) = f)) x) ==> (?f. (((find_pair_list L) d) = f)))) ==> ((?f. (((find_pair_list L) d) = f)) ==> (?f. (((find_pair_list L) d) = f)))) = ((?f. (((find_pair_list L) d) = f)) ==> (?f. (((find_pair_list L) d) = f))))
T c= c==> ! c==> * / c= cfind_pair_list f0 f1 b1 b0 c? / c= cfind_pair_list f0 f1 b1 c==> c? / c= cfind_pair_list f0 f1 b0 c? / c= cfind_pair_list f0 f1 b0 c==> c? / c= cfind_pair_list f0 f1 b0 c? / c= cfind_pair_list f0 f1 b0
- (((indexl f) L) = n) |- ((\n. (((indexl f) L) = n)) n)
T c==> c= cindexl f0 f1 f2 * / c= cindexl f0 f1 b0 f2
- (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- ((!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))) = T)
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= ! c==> c==> c~ f0 c= f1 b0 c= c\/ f0 f1 c\/ f0 b0 cT
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) ==> (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))))
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))), ((uniq s1) /\ (uniq s2)) |- (((uniq s1) /\ (uniq s2)) /\ ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> c/\ cuniq f0 cuniq f1 c/\ c/\ cuniq f0 cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
- |- (((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))))) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))))) = ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))))))
T c= c==> c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2
- ((uniq s1) /\ (uniq s2)) |- ((!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))
T c==> c/\ cuniq f0 cuniq f1 c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!q'. ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = q')) ==> ((((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 * / c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5 * / c==> c= cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 f2 c==> c==> f2 c= c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL b0 c= c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f3 f1 cMEM f3 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f4 clist_pairs f1 f1 cNIL c==> f2 b0 f5
- ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) |- (T = ((MEM d) (list_of_darts L)))
T c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cT cMEM f1 clist_of_darts f2
- |- (((!p'. (!q'. ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = p') ==> ((p' ==> ((((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))))) = q')) ==> ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> b0 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b1 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> b0 b1 * / ! c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> b0 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b1 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> b0 b1 f3 * / ! c==> c= cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 b0 c==> c==> b0 c= c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 b1 c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> b0 b1 f3
- (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s) |- ((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s)
T c==> c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 f2 * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 f2
- |- ((((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x) ==> (?x. (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = x)))
T c==> c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 f1 c? / c= c<= csizel f0 cNUMERAL cBIT1 cBIT1 c_0 b0
- |- ((~ F) = T)
T c= c~ cF cT
- |- ((!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) ==> (!a. (!c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 ! ! ! c==> c==> c~ b2 c= b0 b1 c= c\/ b0 b2 c\/ b1 b2
- (((rot k) f) = x) |- ((\x. (((rot k) f) = x)) x)
T c==> c= crot f0 f1 f2 * / c= crot f0 f1 b0 f2
- (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)) |- ((\k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))) k)
T c==> c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot f2 f0 * / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 f2
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) |- (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! c==> c/\ cuniq f0 cuniq b0 c==> ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))
T c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1
- |- (((!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) ==> (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2))))) = (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))))
T c= c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1
- ((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) |- ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))
T c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0
- ((~ a) ==> (b = c)) |- ((!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) ==> ((a \/ b) = (a \/ c)))
T c==> c==> c~ f0 c= f1 f2 c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= c\/ f0 f1 c\/ f0 f2
- ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))) |- ((MEM i) ((rot k) f))
T c==> cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 cMEM f0 crot f1 f2
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) |- ((!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) /\ (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))))
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c/\ ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1
- |- (((!x. (((\x. (((MEM d) (list_of_darts L)) = x)) x) ==> (?x. (((MEM d) (list_of_darts L)) = x)))) ==> ((?x. (((MEM d) (list_of_darts L)) = x)) ==> (?x. (((MEM d) (list_of_darts L)) = x)))) = ((?x. (((MEM d) (list_of_darts L)) = x)) ==> (?x. (((MEM d) (list_of_darts L)) = x))))
T c= c==> ! c==> * / c= cMEM f0 clist_of_darts f1 b1 b0 c? / c= cMEM f0 clist_of_darts f1 b1 c==> c? / c= cMEM f0 clist_of_darts f1 b0 c? / c= cMEM f0 clist_of_darts f1 b0 c==> c? / c= cMEM f0 clist_of_darts f1 b0 c? / c= cMEM f0 clist_of_darts f1 b0
- ((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) |- (((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL)))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) NIL))))))
T c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c/\ cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
- |- ((((\x. (((rot k) f) = x)) x) ==> (?x. (((rot k) f) = x))) = T)
T c= c==> * / c= crot f0 f1 b0 f2 c? / c= crot f0 f1 b0 cT
- ((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) |- ((MEM i) ((rot k) f))
T c==> cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 cMEM f0 crot f1 f2
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- (!n. (((\n. (((indexl f) L) = n)) n) ==> (?n. (((indexl f) L) = n))))
T c==> * / c= cindexl f0 f1 b0 f2 c? / c= cindexl f0 f1 b0
- (((real_ge (real_of_int _10062699)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10062699))) (real_of_num (NUMERAL (BIT1 (BIT1 _0)))))) (real_of_num (NUMERAL _0))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10062699)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- |- ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) t') e'))))
T c==> c==> c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2 c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f3 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f2 f3
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- ((((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c))) = T)
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= c==> c==> c~ f0 c= f1 f2 c= c\/ f0 f1 c\/ f0 f2 cT
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 f5 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 f5
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) |- ((\s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) s1)
T c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 * / ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 f0
- |- (((!h. ((HD ((CONS h) t)) = h)) ==> ((\h. ((HD ((CONS h) t)) = h)) h)) = ((\h. ((HD ((CONS h) t)) = h)) h))
T c= c==> ! c= cHD cCONS b0 f0 b0 * / c= cHD cCONS b0 f0 b0 f1 * / c= cHD cCONS b0 f0 b0 f1
- (!s1. (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))) |- (!s2. ((((uniq s1) /\ (uniq s2)) /\ (!x. (((MEM x) s1) = ((MEM x) s2)))) ==> ((perm_eq s1) s2)))
T c==> ! ! c==> c/\ c/\ cuniq b0 cuniq b1 ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! c==> c/\ c/\ cuniq f0 cuniq b0 ! c= cMEM b1 f0 cMEM b1 b0 cperm_eq f0 b0
- |- ((((\x. (((MEM d) (list_of_darts L)) = x)) x) ==> (?x. (((MEM d) (list_of_darts L)) = x))) = T)
T c= c==> * / c= cMEM f0 clist_of_darts f1 b0 f2 c? / c= cMEM f0 clist_of_darts f1 b0 cT
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((\f. (((find_pair_list L) d) = f)) f) ==> (?f. (((find_pair_list L) d) = f))) = T)
T c= c==> * / c= cfind_pair_list f0 f1 b0 f2 c? / c= cfind_pair_list f0 f1 b0 cT
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
- |- (!x. (((\x. (((rot k) f) = x)) x) ==> (?x. (((rot k) f) = x))))
T c==> * / c= crot f0 f1 b0 f2 c? / c= crot f0 f1 b0
- |- (((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))) = ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))))
T c= c==> c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- |- ((\p'. (!q'. ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = p') ==> ((p' ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = q')) ==> ((((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL b1 c= c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c==> b0 b1 f4
- (s = ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))) |- (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)
T c==> c= f0 crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f2 f2 c= crotr cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f2 f2 f0
- |- (((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) = ((ssreflect_eq mem_d) ((MEM d) (list_of_darts L)))) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> q')))) = ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> q'))))
T c= c==> c= cssreflect_eq f0 cMEM f1 clist_of_darts f2 cssreflect_eq f0 cMEM f1 clist_of_darts f2 c==> c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 f4 c==> c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 f4 c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 f4
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- ((\a. (!c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) a)
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 * / ! ! c==> c==> c~ b2 c= b0 b1 c= c\/ b0 b2 c\/ b1 b2 f0
- |- (((!g'. (!t'. (!e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) = g') ==> ((g' ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = t')) ==> (((~ g') ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 b1 c==> c==> c~ b0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 b2 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND b0 b1 b2 * / ! ! c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 b1 c==> c==> c~ b0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 b2 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND b0 b1 b2 f2 * / ! ! c==> c= c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 b1 c==> c==> c~ b0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 b2 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND b0 b1 b2 f2
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- (!c. (!b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 ! ! c==> c==> c~ b1 c= f0 b0 c= c\/ f0 b1 c\/ b0 b1
- (((MEM d) (list_of_darts L)) = x) |- ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))))
T c==> c= cMEM f0 clist_of_darts f1 f2 c= c= cMEM f3 clist_of_elements f1 cMEM f3 clist_of_elements csplit_list_hyp f1 f0 c= cMEM f3 clist_of_elements f1 cMEM f3 clist_of_elements csplit_list_hyp f1 f0
- |- (((!t. (!h. ((HD ((CONS h) t)) = h))) ==> ((\t. (!h. ((HD ((CONS h) t)) = h))) t)) = ((\t. (!h. ((HD ((CONS h) t)) = h))) t))
T c= c==> ! ! c= cHD cCONS b1 b0 b1 * / ! c= cHD cCONS b1 b0 b1 f0 * / ! c= cHD cCONS b1 b0 b1 f0
- (((indexl f) L) = n) |- ((((indexl f) L) = n) /\ (?n. (((indexl f) L) = n)))
T c==> c= cindexl f0 f1 f2 c/\ c= cindexl f0 f1 f2 c? / c= cindexl f0 f1 b0
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- ((ssreflect_eq f_size) ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0))))) |- (((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c==> cssreflect_eq f0 c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))) = (((MEM i) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) ==> (((MEM i) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) \/ ((i = (HD ((rot k) f))) \/ ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f)))))))
T c= c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c==> cMEM f0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ cMEM f0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f1 f2 c\/ c= f0 cHD crot f1 f2 cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2
- (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) |- ((!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))) /\ (!s1. (!s2. (((uniq s1) /\ (uniq s2)) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))))
T c==> ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 c/\ ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> c/\ cuniq b0 cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1
- |- (((MEM x) NIL) = F)
T c= cMEM f0 cNIL cF
- ((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s) |- (((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s) /\ (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)))
T c==> * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 f2 c/\ * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 f2 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0
- ((\n. (((indexl f) L) = n)) n) |- (((((indexl f) L) = n) ==> (?n. (((indexl f) L) = n))) = (?n. (((indexl f) L) = n)))
T c==> * / c= cindexl f0 f1 b0 f2 c= c==> c= cindexl f0 f1 f2 c? / c= cindexl f0 f1 b0 c? / c= cindexl f0 f1 b0
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- ((\b. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))) b)
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 * / c==> c==> c~ b0 c= f0 f1 c= c\/ f0 b0 c\/ f1 b0 f2
- |- ((((indexl f) L) = n) = ((\n. (((indexl f) L) = n)) n))
T c= c= cindexl f0 f1 f2 * / c= cindexl f0 f1 b0 f2
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) |- ((((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b))) = T)
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= c==> c==> c~ f0 c= f1 f2 c= c\/ f1 f0 c\/ f2 f0 cT
- |- (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) ==> ((((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL))))) = (((MEM i) f) = ((MEM i) (flatten ((CONS ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((CONS ((CONS (HD ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)))) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f))))) NIL)))))))
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL c= cMEM f2 f1 cMEM f2 cflatten cCONS ctake cNUMERAL cBIT1 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cCONS cCONS cHD crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cdropl cNUMERAL cBIT0 cBIT1 c_0 crotr cNUMERAL cBIT1 c_0 crot cindexl f3 clist_pairs f1 f1 cNIL
- |- (((((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0)))) ==> (((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))) ==> (((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) e')))) = (((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = e')) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) e'))))
T c= c==> c==> c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2 c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 f2
- |- (((!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 * / c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 b0 f5
- |- ((((~ ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ==> (((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))) = ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))) ==> ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))))) = ((((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) = (((COND ((NUMERAL (BIT0 (BIT1 _0))) < (NUMERAL (BIT1 (BIT1 _0))))) ((cat ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((take (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f)))) ((dropl ((NUMERAL (BIT0 (BIT1 _0))) - (NUMERAL (BIT1 (BIT1 _0))))) ((dropl (NUMERAL (BIT1 (BIT1 _0)))) ((rot k) f))))))
T c= c==> c==> c~ c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 c= cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cCOND c< cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 ccat cdropl cNUMERAL cBIT0 cBIT1 c_0 ctake cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1 cdropl c- cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cdropl cNUMERAL cBIT1 cBIT1 c_0 crot f0 f1
- |- (((?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))) ==> (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f)))) = (?k. (((rot ((sizel f) - (NUMERAL (BIT1 _0)))) ((rot ((indexl d) (list_pairs f))) f)) = ((rot k) f))))
T c= c==> c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0 c? / c= crot c- csizel f0 cNUMERAL cBIT1 c_0 crot cindexl f1 clist_pairs f0 f0 crot b0 f0
- |- (((!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))))) ==> ((\x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))))) x)) = ((\x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))))) x))
T c= c==> ! ! c/\ c= cMEM b0 cNIL cF c= cMEM b0 cCONS f0 b1 c\/ c= b0 f0 cMEM b0 b1 * / ! c/\ c= cMEM b0 cNIL cF c= cMEM b0 cCONS f0 b1 c\/ c= b0 f0 cMEM b0 b1 f1 * / ! c/\ c= cMEM b0 cNIL cF c= cMEM b0 cCONS f0 b1 c\/ c= b0 f0 cMEM b0 b1 f1
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))), ((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) |- ((!P. (((P NIL) /\ (!h. (!t. (P ((CONS h) t))))) ==> (!l. (P l)))) /\ (!l. (P l)))
T c==> ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! * f0 cCONS b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
- ((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))) |- (((MEM i) ((dropl (NUMERAL (BIT0 (BIT1 _0)))) ((rot k) f))) /\ ((MEM i) ((rot k) f)))
T c==> cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 c/\ cMEM f0 cdropl cNUMERAL cBIT0 cBIT1 c_0 crot f1 f2 cMEM f0 crot f1 f2
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))), ((~ a) ==> (b = c)) |- ((!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) /\ ((a \/ b) = (a \/ c)))
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c==> c==> c~ f0 c= f1 f2 c/\ ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c= c\/ f0 f1 c\/ f0 f2
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((\s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s)) s) ==> (?s. (((rotr (NUMERAL (BIT1 _0))) ((rot ((indexl d) (list_pairs f))) f)) = s))) = T)
T c= c==> * / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 f2 c? / c= crotr cNUMERAL cBIT1 c_0 crot cindexl f0 clist_pairs f1 f1 b0 cT
- (!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) |- ((!a. (!b. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))) /\ (!b. (!a. (!c. (((~ a) ==> (b = c)) ==> ((a \/ b) = (a \/ c)))))))
T c==> ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 c/\ ! ! ! c==> c==> c~ b0 c= b1 b2 c= c\/ b0 b1 c\/ b0 b2 ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b1 b0 c\/ b1 b2
- |- ((((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (((ssreflect_eq mem_d) ((MEM d) (list_of_darts L))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))))
T c= c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1 c==> cssreflect_eq f0 cMEM f1 clist_of_darts f2 c= cMEM f3 clist_of_elements f2 cMEM f3 clist_of_elements csplit_list_hyp f2 f1
- |- (((sizel NIL) = (NUMERAL _0)) /\ (!n. ((n < (NUMERAL _0)) = F)))
T c/\ c= csizel cNIL cNUMERAL c_0 ! c= c< b0 cNUMERAL c_0 cF
- ((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) |- (((ssreflect_eq f_size) (~ ((sizel f) <= (NUMERAL (BIT1 (BIT1 _0)))))) = T)
T c==> cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 c= cssreflect_eq f0 c~ c<= csizel f1 cNUMERAL cBIT1 cBIT1 c_0 cT
- |- (((real_lt (real_of_num m)) (real_of_num n)) = (m < n))
T c= creal_lt creal_of_num f0 creal_of_num f1 c< f0 f1
- |- ((?n. (((indexl f) L) = n)) ==> (?n. (((indexl f) L) = n)))
T c==> c? / c= cindexl f0 f1 b0 c? / c= cindexl f0 f1 b0
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- (((rot k) f) = x) |- ((((rot k) f) = x) /\ (?x. (((rot k) f) = x)))
T c==> c= crot f0 f1 f2 c/\ c= crot f0 f1 f2 c? / c= crot f0 f1 b0
- |- (((!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))) ==> (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))))) = (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2)))))))
T c= c==> ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1 ! ! c==> cuniq b0 c==> cuniq b1 c==> ! c= cMEM b2 b0 cMEM b2 b1 cperm_eq b0 b1
- (!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))), ((~ b) ==> (a = c)) |- ((!a. (!b. (!c. (((~ b) ==> (a = c)) ==> ((a \/ b) = (c \/ b)))))) /\ ((a \/ b) = (c \/ b)))
T c==> ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c==> c==> c~ f0 c= f1 f2 c/\ ! ! ! c==> c==> c~ b1 c= b0 b2 c= c\/ b0 b1 c\/ b2 b1 c= c\/ f1 f0 c\/ f2 f0
- |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) = p') ==> ((p' ==> ((((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_of_darts L)))) ==> (((MEM i) (list_of_elements L)) = ((MEM i) (list_of_elements ((split_list_hyp L) d))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 f3 c==> c==> f3 c= c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 f5 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_of_darts f2 c= cMEM f4 clist_of_elements f2 cMEM f4 clist_of_elements csplit_list_hyp f2 f1 c==> f3 f5
- |- (((MEM i) ((rot k) f)) ==> ((MEM i) ((rot k) f)))
T c==> cMEM f0 crot f1 f2 cMEM f0 crot f1 f2
