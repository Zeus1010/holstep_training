N Hypermap.face_map_face_walkup
C |- (!H. (!x. (!y. ((((face_map ((face_walkup H) x)) x) = x) /\ ((((~ (((edge_map H) x) = x)) /\ (~ (((face_map H) x) = x))) ==> (((face_map ((face_walkup H) x)) ((edge_map H) x)) = ((face_map H) x))) /\ ((((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x))) ==> (((face_map ((face_walkup H) x)) ((inverse (face_map H)) x)) = ((inverse (node_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (face_map H)) x))) /\ (~ (y = ((edge_map H) x))))) ==> (((face_map ((face_walkup H) x)) y) = ((face_map H) y)))))))))
T c/\ c= cface_map cface_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cedge_map f0 f1 f1 c~ c= cface_map f0 f1 f1 c= cface_map cface_walkup f0 f1 cedge_map f0 f1 cface_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cnode_map f0 f1 f1 c~ c= cinverse * part cface_map f0 f1 f1 c= cface_map cface_walkup f0 f1 cinverse * part cface_map f0 f1 cinverse * part cnode_map f0 f1 c==> c/\ c~ c= f2 f1 c/\ c~ c= f2 cinverse * part cface_map f0 f1 c~ c= f2 cedge_map f0 f1 c= cface_map cface_walkup f0 f1 f2 cface_map f0 f2
D TRUTH
A |- T
T cT
D Hypermap.double_shift_lemma
A |- (!H. (((dart H) = (dart (shift (shift H)))) /\ (((edge_map H) = (node_map (shift (shift H)))) /\ (((node_map H) = (face_map (shift (shift H)))) /\ ((face_map H) = (edge_map (shift (shift H))))))))
T c/\ c= * part cdart f0 * part cdart cshift cshift f0 c/\ c= * part cedge_map f0 * part cnode_map cshift cshift f0 c/\ c= * part cnode_map f0 * part cface_map cshift cshift f0 c= * part cface_map f0 * part cedge_map cshift cshift f0
D Hypermap.face_walkup
A |- (!H. (!x. (((face_walkup H) x) = (shift ((edge_walkup (shift (shift H))) x)))))
T c= cface_walkup f0 f1 cshift cedge_walkup cshift cshift f0 f1
D Hypermap.edge_map_walkup
A |- (!H. (!x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))))
T c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= f2 f1 c/\ c~ c= f2 cinverse * part cedge_map f0 f1 c~ c= f2 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f2
D Hypermap.lemma_shift_cycle
A |- (!H. ((shift (shift (shift H))) = H))
T c= cshift cshift cshift f0 f0
+ |- ((\H. (!x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))))) H)
T * / ! ! c/\ c= cedge_map cedge_walkup b0 b1 b1 b1 c/\ c==> c/\ c~ c= cnode_map b0 b1 b1 c~ c= cedge_map b0 b1 b1 c= cedge_map cedge_walkup b0 b1 cnode_map b0 b1 cedge_map b0 b1 c/\ c==> c/\ c~ c= cinverse * part cface_map b0 b1 b1 c~ c= cinverse * part cedge_map b0 b1 b1 c= cedge_map cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 cinverse * part cface_map b0 b1 c==> c/\ c~ c= b2 b1 c/\ c~ c= b2 cinverse * part cedge_map b0 b1 c~ c= b2 cnode_map b0 b1 c= cedge_map cedge_walkup b0 b1 b2 cedge_map b0 b2 f0
+ |- (((shift (shift H)) = (shift (shift H))) = ((\G. ((shift (shift H)) = G)) (shift (shift H))))
T c= c= cshift cshift f0 cshift cshift f0 * / c= cshift cshift f0 b0 cshift cshift f0
+ |- (((shift (shift H)) = G) ==> ((((edge_map ((edge_walkup (shift (shift H))) x)) x) = x) /\ ((((~ (((node_map (shift (shift H))) x) = x)) /\ (~ (((edge_map (shift (shift H))) x) = x))) ==> (((edge_map ((edge_walkup (shift (shift H))) x)) ((node_map (shift (shift H))) x)) = ((edge_map (shift (shift H))) x))) /\ ((((~ (((inverse (face_map (shift (shift H)))) x) = x)) /\ (~ (((inverse (edge_map (shift (shift H)))) x) = x))) ==> (((edge_map ((edge_walkup (shift (shift H))) x)) ((inverse (edge_map (shift (shift H)))) x)) = ((inverse (face_map (shift (shift H)))) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map (shift (shift H)))) x))) /\ (~ (y = ((node_map (shift (shift H))) x))))) ==> (((edge_map ((edge_walkup (shift (shift H))) x)) y) = ((edge_map (shift (shift H))) y)))))))
T c==> c= cshift cshift f0 f1 c/\ c= cedge_map cedge_walkup cshift cshift f0 f2 f2 f2 c/\ c==> c/\ c~ c= cnode_map cshift cshift f0 f2 f2 c~ c= cedge_map cshift cshift f0 f2 f2 c= cedge_map cedge_walkup cshift cshift f0 f2 cnode_map cshift cshift f0 f2 cedge_map cshift cshift f0 f2 c/\ c==> c/\ c~ c= cinverse * part cface_map cshift cshift f0 f2 f2 c~ c= cinverse * part cedge_map cshift cshift f0 f2 f2 c= cedge_map cedge_walkup cshift cshift f0 f2 cinverse * part cedge_map cshift cshift f0 f2 cinverse * part cface_map cshift cshift f0 f2 c==> c/\ c~ c= f3 f2 c/\ c~ c= f3 cinverse * part cedge_map cshift cshift f0 f2 c~ c= f3 cnode_map cshift cshift f0 f2 c= cedge_map cedge_walkup cshift cshift f0 f2 f3 cedge_map cshift cshift f0 f3
+ |- ((face_map H) = (edge_map (shift (shift H))))
T c= * part cface_map f0 * part cedge_map cshift cshift f0
+ |- ((\x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))) x)
T * / ! c/\ c= cedge_map cedge_walkup f0 b0 b0 b0 c/\ c==> c/\ c~ c= cnode_map f0 b0 b0 c~ c= cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cnode_map f0 b0 cedge_map f0 b0 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 b0 b0 c~ c= cinverse * part cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 cinverse * part cface_map f0 b0 c==> c/\ c~ c= b1 b0 c/\ c~ c= b1 cinverse * part cedge_map f0 b0 c~ c= b1 cnode_map f0 b0 c= cedge_map cedge_walkup f0 b0 b1 cedge_map f0 b1 f1
- ((shift (shift H)) = G) |- ((\G. ((shift (shift H)) = G)) G)
T c==> c= cshift cshift f0 f1 * / c= cshift cshift f0 b0 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((!H. (((dart H) = (dart (shift (shift H)))) /\ (((edge_map H) = (node_map (shift (shift H)))) /\ (((node_map H) = (face_map (shift (shift H)))) /\ ((face_map H) = (edge_map (shift (shift H)))))))) ==> ((\H. (((dart H) = (dart (shift (shift H)))) /\ (((edge_map H) = (node_map (shift (shift H)))) /\ (((node_map H) = (face_map (shift (shift H)))) /\ ((face_map H) = (edge_map (shift (shift H)))))))) H)) = ((\H. (((dart H) = (dart (shift (shift H)))) /\ (((edge_map H) = (node_map (shift (shift H)))) /\ (((node_map H) = (face_map (shift (shift H)))) /\ ((face_map H) = (edge_map (shift (shift H)))))))) H))
T c= c==> ! c/\ c= * part cdart b0 * part cdart cshift cshift b0 c/\ c= * part cedge_map b0 * part cnode_map cshift cshift b0 c/\ c= * part cnode_map b0 * part cface_map cshift cshift b0 c= * part cface_map b0 * part cedge_map cshift cshift b0 * / c/\ c= * part cdart b0 * part cdart cshift cshift b0 c/\ c= * part cedge_map b0 * part cnode_map cshift cshift b0 c/\ c= * part cnode_map b0 * part cface_map cshift cshift b0 c= * part cface_map b0 * part cedge_map cshift cshift b0 f0 * / c/\ c= * part cdart b0 * part cdart cshift cshift b0 c/\ c= * part cedge_map b0 * part cnode_map cshift cshift b0 c/\ c= * part cnode_map b0 * part cface_map cshift cshift b0 c= * part cface_map b0 * part cedge_map cshift cshift b0 f0
- |- ((?G. ((shift (shift H)) = G)) ==> (?G. ((shift (shift H)) = G)))
T c==> c? / c= cshift cshift f0 b0 c? / c= cshift cshift f0 b0
+ ((shift (shift H)) = G) |- (((((edge_map ((edge_walkup G) x)) x) = x) /\ ((((~ (((node_map G) x) = x)) /\ (~ (((edge_map G) x) = x))) ==> (((edge_map ((edge_walkup G) x)) ((node_map G) x)) = ((edge_map G) x))) /\ ((((~ (((inverse (face_map G)) x) = x)) /\ (~ (((inverse (edge_map G)) x) = x))) ==> (((edge_map ((edge_walkup G) x)) ((inverse (edge_map G)) x)) = ((inverse (face_map G)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map G)) x))) /\ (~ (y = ((node_map G) x))))) ==> (((edge_map ((edge_walkup G) x)) y) = ((edge_map G) y)))))) = ((((edge_map ((edge_walkup (shift (shift H))) x)) x) = x) /\ ((((~ (((node_map (shift (shift H))) x) = x)) /\ (~ (((edge_map (shift (shift H))) x) = x))) ==> (((edge_map ((edge_walkup (shift (shift H))) x)) ((node_map (shift (shift H))) x)) = ((edge_map (shift (shift H))) x))) /\ ((((~ (((inverse (face_map (shift (shift H)))) x) = x)) /\ (~ (((inverse (edge_map (shift (shift H)))) x) = x))) ==> (((edge_map ((edge_walkup (shift (shift H))) x)) ((inverse (edge_map (shift (shift H)))) x)) = ((inverse (face_map (shift (shift H)))) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map (shift (shift H)))) x))) /\ (~ (y = ((node_map (shift (shift H))) x))))) ==> (((edge_map ((edge_walkup (shift (shift H))) x)) y) = ((edge_map (shift (shift H))) y)))))))
T c==> c= cshift cshift f0 f1 c= c/\ c= cedge_map cedge_walkup f1 f2 f2 f2 c/\ c==> c/\ c~ c= cnode_map f1 f2 f2 c~ c= cedge_map f1 f2 f2 c= cedge_map cedge_walkup f1 f2 cnode_map f1 f2 cedge_map f1 f2 c/\ c==> c/\ c~ c= cinverse * part cface_map f1 f2 f2 c~ c= cinverse * part cedge_map f1 f2 f2 c= cedge_map cedge_walkup f1 f2 cinverse * part cedge_map f1 f2 cinverse * part cface_map f1 f2 c==> c/\ c~ c= f3 f2 c/\ c~ c= f3 cinverse * part cedge_map f1 f2 c~ c= f3 cnode_map f1 f2 c= cedge_map cedge_walkup f1 f2 f3 cedge_map f1 f3 c/\ c= cedge_map cedge_walkup cshift cshift f0 f2 f2 f2 c/\ c==> c/\ c~ c= cnode_map cshift cshift f0 f2 f2 c~ c= cedge_map cshift cshift f0 f2 f2 c= cedge_map cedge_walkup cshift cshift f0 f2 cnode_map cshift cshift f0 f2 cedge_map cshift cshift f0 f2 c/\ c==> c/\ c~ c= cinverse * part cface_map cshift cshift f0 f2 f2 c~ c= cinverse * part cedge_map cshift cshift f0 f2 f2 c= cedge_map cedge_walkup cshift cshift f0 f2 cinverse * part cedge_map cshift cshift f0 f2 cinverse * part cface_map cshift cshift f0 f2 c==> c/\ c~ c= f3 f2 c/\ c~ c= f3 cinverse * part cedge_map cshift cshift f0 f2 c~ c= f3 cnode_map cshift cshift f0 f2 c= cedge_map cedge_walkup cshift cshift f0 f2 f3 cedge_map cshift cshift f0 f3
+ |- ((\y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))) y)
T * / c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= b0 f1 c/\ c~ c= b0 cinverse * part cedge_map f0 f1 c~ c= b0 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 b0 cedge_map f0 b0 f2
+ |- ((\H. ((shift (shift (shift H))) = H)) H)
T * / c= cshift cshift cshift b0 b0 f0
+ |- ((\G. ((shift (shift H)) = G)) (shift (shift H)))
T * / c= cshift cshift f0 b0 cshift cshift f0
+ |- (((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)))
T c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1
+ ((\G. ((shift (shift H)) = G)) G) |- ((shift (shift H)) = G)
T c==> * / c= cshift cshift f0 b0 f1 c= cshift cshift f0 f1
+ |- ((((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))) = T)
T c= c==> c/\ c~ c= f0 f1 c/\ c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c= cedge_map cedge_walkup f2 f1 f0 cedge_map f2 f0 cT
- |- ((dart H) = (dart (shift (shift H))))
T c= * part cdart f0 * part cdart cshift cshift f0
- |- (!G. (((\G. ((shift (shift H)) = G)) G) ==> (?G. ((shift (shift H)) = G))))
T c==> * / c= cshift cshift f0 b0 f1 c? / c= cshift cshift f0 b0
- ((shift (shift H)) = G) |- (((shift (shift H)) = G) /\ (?G. ((shift (shift H)) = G)))
T c==> c= cshift cshift f0 f1 c/\ c= cshift cshift f0 f1 c? / c= cshift cshift f0 b0
- |- ((((\G. ((shift (shift H)) = G)) G) ==> (?G. ((shift (shift H)) = G))) = T)
T c= c==> * / c= cshift cshift f0 b0 f1 c? / c= cshift cshift f0 b0 cT
- |- (((shift (shift H)) = G) = ((\G. ((shift (shift H)) = G)) G))
T c= c= cshift cshift f0 f1 * / c= cshift cshift f0 b0 f1
- ((\G. ((shift (shift H)) = G)) G) |- (((\G. ((shift (shift H)) = G)) G) /\ (?G. ((shift (shift H)) = G)))
T c==> * / c= cshift cshift f0 b0 f1 c/\ * / c= cshift cshift f0 b0 f1 c? / c= cshift cshift f0 b0
- |- (((shift (shift H)) = G) ==> (?G. ((shift (shift H)) = G)))
T c==> c= cshift cshift f0 f1 c? / c= cshift cshift f0 b0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- (((!x. (((\G. ((shift (shift H)) = G)) x) ==> (?G. ((shift (shift H)) = G)))) ==> ((?G. ((shift (shift H)) = G)) ==> (?G. ((shift (shift H)) = G)))) = ((?G. ((shift (shift H)) = G)) ==> (?G. ((shift (shift H)) = G))))
T c= c==> ! c==> * / c= cshift cshift f0 b1 b0 c? / c= cshift cshift f0 b1 c==> c? / c= cshift cshift f0 b0 c? / c= cshift cshift f0 b0 c==> c? / c= cshift cshift f0 b0 c? / c= cshift cshift f0 b0
- ((\G. ((shift (shift H)) = G)) G) |- ((((shift (shift H)) = G) ==> (?G. ((shift (shift H)) = G))) = (?G. ((shift (shift H)) = G)))
T c==> * / c= cshift cshift f0 b0 f1 c= c==> c= cshift cshift f0 f1 c? / c= cshift cshift f0 b0 c? / c= cshift cshift f0 b0
