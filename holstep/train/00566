N CLOSURE_SEGMENT
C |- ((!a. (!b. ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL))))) /\ (!a. (!b. ((closure (open_segment (a , b))) = (((COND (a = b)) EMPTY) (closed_segment ((CONS (a , b)) NIL)))))))
T c/\ ! ! c= * part cclosure * part cclosed_segment cCONS c, b0 b1 cNIL * part cclosed_segment cCONS c, b0 b1 cNIL ! ! c= * part cclosure * part copen_segment c, b0 b1 * * * part cCOND c= b0 b1 part cEMPTY * part cclosed_segment cCONS c, b0 b1 cNIL
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D FUN_EQ_THM
A |- (!f. (!g. ((f = g) = (!x. ((f x) = (g x))))))
T c= c= f0 f1 ! c= * f0 b0 * f1 b0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D COND_ELIM_THM
A |- ((P (((COND c) x) y)) = ((c ==> (P x)) /\ ((~ c) ==> (P y))))
T c= * f0 cCOND f1 f2 f3 c/\ c==> f1 * f0 f2 c==> c~ f1 * f0 f3
D o_THM
A |- (!f. (!g. (!x. (((f o g) x) = (f (g x))))))
T c= co f0 f1 f2 * f0 * f1 f2
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D EXP_2
A |- (!n. ((n EXP (NUMERAL (BIT0 (BIT1 _0)))) = (n * n)))
T c= cEXP f0 cNUMERAL cBIT0 cBIT1 c_0 c* f0 f0
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D LT_REFL
A |- (!n. (~ (n < n)))
T c~ c< f0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_ZERO
A |- (((NUMERAL (NUMERAL _0)) = (NUMERAL _0)) /\ ((BIT0 _0) = _0))
T c/\ c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0 c= cBIT0 c_0 c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D ARITH_MULT
A |- ((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) /\ (((_0 * _0) = _0) /\ ((!n. ((_0 * (BIT0 n)) = _0)) /\ ((!n. ((_0 * (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))))))
T c/\ ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 c/\ c= c* c_0 c_0 c_0 c/\ ! c= c* c_0 cBIT0 b0 c_0 c/\ ! c= c* c_0 cBIT1 b0 c_0 c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
D ARITH_EXP
A |- ((!m. (!n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n))))) /\ (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))))))
T c/\ ! ! c= cEXP cNUMERAL b0 cNUMERAL b1 cNUMERAL cEXP b0 b1 c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_MUL_LID
A |- (!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x))
T c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 f0 f0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D Real_ext.REAL_SV_NEG_0
A |- ((real_neg (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_neg creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D IMAGE_o
A |- (!f. (!g. (!s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s))))))
T c= * * part cIMAGE * * part co f0 f1 f2 * * part cIMAGE f0 * * part cIMAGE f1 f2
D CART_EQ
A |- (!x. (!y. ((x = y) = (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((x $ i) = (y $ i)))))))
T c= c= f0 f1 ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ f0 b0 c$ f1 b0
D LAMBDA_BETA
A |- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda f1 f0 * f1 f0
D vector_add
A |- (!x. (!y. (((vector_add x) y) = (lambdai. ((real_add (x $ i)) (y $ i))))))
T c= cvector_add f0 f1 clambda / creal_add c$ f0 b0 c$ f1 b0
D vector_sub
A |- (!x. (!y. (((vector_sub x) y) = (lambdai. ((real_sub (x $ i)) (y $ i))))))
T c= cvector_sub f0 f1 clambda / creal_sub c$ f0 b0 c$ f1 b0
D vector_mul
A |- (!c. (!x. (((% c) x) = (lambdai. ((real_mul c) (x $ i))))))
T c= c% f0 f1 clambda / creal_mul f0 c$ f1 b0
D VECTOR_SUB_EQ
A |- (!x. (!y. ((((vector_sub x) y) = (vec (NUMERAL _0))) = (x = y))))
T c= c= cvector_sub f0 f1 cvec cNUMERAL c_0 c= f0 f1
D VECTOR_MUL_RCANCEL
A |- (!a. (!b. (!x. ((((% a) x) = ((% b) x)) = ((a = b) \/ (x = (vec (NUMERAL _0))))))))
T c= c= c% f0 f1 c% f2 f1 c\/ c= f0 f2 c= f1 cvec cNUMERAL c_0
D linear
A |- (!f. ((linear f) = ((!x. (!y. ((f ((vector_add x) y)) = ((vector_add (f x)) (f y))))) /\ (!c. (!x. ((f ((% c) x)) = ((% c) (f x))))))))
T c= clinear f0 c/\ ! ! c= * f0 cvector_add b0 b1 cvector_add * f0 b0 * f0 b1 ! ! c= * f0 c% b0 b1 c% b0 * f0 b1
D DROP_EQ
A |- (!x. (!y. (((drop x) = (drop y)) = (x = y))))
T c= c= cdrop f0 cdrop f1 c= f0 f1
D DROP_VEC
A |- (!n. ((drop (vec n)) = (real_of_num n)))
T c= cdrop cvec f0 creal_of_num f0
D DROP_ADD
A |- (!x. (!y. ((drop ((vector_add x) y)) = ((real_add (drop x)) (drop y)))))
T c= cdrop cvector_add f0 f1 creal_add cdrop f0 cdrop f1
D DROP_CMUL
A |- (!x. (!c. ((drop ((% c) x)) = ((real_mul c) (drop x)))))
T c= cdrop c% f0 f1 creal_mul f0 cdrop f1
D SEGMENT_REFL
A |- ((!a. ((closed_segment ((CONS (a , a)) NIL)) = (a INSERT EMPTY))) /\ (!a. ((open_segment (a , a)) = EMPTY)))
T c/\ ! c= * part cclosed_segment cCONS c, b0 b0 cNIL * * part cINSERT b0 part cEMPTY ! c= * part copen_segment c, b0 b0 part cEMPTY
D CLOSURE_EQ
A |- (!s. (((closure s) = s) = (closed s)))
T c= c= * part cclosure f0 f0 cclosed f0
D CLOSURE_EMPTY
A |- ((closure EMPTY) = EMPTY)
T c= * part cclosure part cEMPTY part cEMPTY
D COMPACT_IMP_CLOSED
A |- (!s. ((compact s) ==> (closed s)))
T c==> ccompact f0 cclosed f0
D COMPACT_EMPTY
A |- (compact EMPTY)
T ccompact part cEMPTY
D COMPACT_INSERT
A |- (!a. (!s. ((compact s) ==> (compact (a INSERT s)))))
T c==> ccompact f0 ccompact * * part cINSERT f1 f0
D CLOSURE_TRANSLATION
A |- (!a. (!s. ((closure ((IMAGE (\x. ((vector_add a) x))) s)) = ((IMAGE (\x. ((vector_add a) x))) (closure s)))))
T c= * part cclosure * * part cIMAGE / cvector_add f0 b0 f1 * * part cIMAGE / cvector_add f0 b0 * part cclosure f1
D CLOSURE_OPEN_INTERVAL
A |- (!a. (!b. ((~ ((open_interval (a , b)) = EMPTY)) ==> ((closure (open_interval (a , b))) = (closed_interval ((CONS (a , b)) NIL))))))
T c==> c~ c= * part copen_interval c, f0 f1 part cEMPTY c= * part cclosure * part copen_interval c, f0 f1 * part cclosed_interval cCONS c, f0 f1 cNIL
D INTERVAL_EQ_EMPTY_1
A |- (!a. (!b. ((((closed_interval ((CONS (a , b)) NIL)) = EMPTY) = ((real_lt (drop b)) (drop a))) /\ (((open_interval (a , b)) = EMPTY) = ((real_le (drop b)) (drop a))))))
T c/\ c= c= * part cclosed_interval cCONS c, f0 f1 cNIL part cEMPTY creal_lt cdrop f1 cdrop f0 c= c= * part copen_interval c, f0 f1 part cEMPTY creal_le cdrop f1 cdrop f0
D CLOSURE_INJECTIVE_LINEAR_IMAGE
A |- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))))
T c==> c/\ clinear f0 ! ! c==> c= * f0 b0 * f0 b1 c= b0 b1 c= * part cclosure * * part cIMAGE f0 f1 * * part cIMAGE f0 * part cclosure f1
D COMPACT_CONVEX_HULL
A |- (!s. ((compact s) ==> (compact ((hull convex) s))))
T c==> ccompact f0 ccompact * * part chull part cconvex f0
D SEGMENT_CONVEX_HULL
A |- (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY))))))
T c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
D SEGMENT_IMAGE_INTERVAL
A |- ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))))) /\ (!a. (!b. ((~ (a = b)) ==> ((open_segment (a , b)) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))))))
T c/\ ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b2 b0 c% cdrop b2 b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL ! ! c==> c~ c= b0 b1 c= * part copen_segment c, b0 b1 * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b2 b0 c% cdrop b2 b1 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
+ |- (((a = b) ==> ((closure (open_segment (a , b))) = EMPTY)) /\ ((~ (a = b)) ==> ((closure (open_segment (a , b))) = (closed_segment ((CONS (a , b)) NIL)))))
T c/\ c==> c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 part cEMPTY c==> c~ c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 * part cclosed_segment cCONS c, f0 f1 cNIL
+ (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) |- (((((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))) /\ ((closed_segment ((CONS (a , b)) NIL)) = (closed_segment ((CONS (a , b)) NIL)))) ==> (((hull convex) (a INSERT (b INSERT EMPTY))) = (closed_segment ((CONS (a , b)) NIL)))) = (((hull convex) (a INSERT (b INSERT EMPTY))) = (closed_segment ((CONS (a , b)) NIL))))
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c= c==> c/\ c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c= * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL c= * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL
- (!s. (((closure s) = s) = (closed s))) |- (((!s. ((~ ((closure s) = s)) \/ (closed s))) ==> ((\s. ((~ ((closure s) = s)) \/ (closed s))) _583652)) = ((\s. ((~ ((closure s) = s)) \/ (closed s))) _583652))
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 c= c==> ! c\/ c~ c= * part cclosure b0 b0 cclosed b0 * / c\/ c~ c= * part cclosure b0 b0 cclosed b0 f0 * / c\/ c~ c= * part cclosure b0 b0 cclosed b0 f0
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))), ((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) |- ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 c==> c/\ clinear f0 ! ! c==> c= * f0 b0 * f0 b1 c= b0 b1 c= * part cclosure * * part cIMAGE f0 f1 * * part cIMAGE f0 * part cclosure f1
+ (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) |- ((closed_segment ((CONS (_583648 , _583649)) NIL)) = ((hull convex) (_583648 INSERT (_583649 INSERT EMPTY))))
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (compact EMPTY) |- ((((hull convex) (a INSERT (b INSERT EMPTY))) = (closed_segment ((CONS (a , b)) NIL))) /\ (closed ((hull convex) (a INSERT (b INSERT EMPTY)))))
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ccompact part cEMPTY c/\ c= * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL cclosed * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ (~ (~ ((real_le (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))) |- ((~ (~ ((real_le (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))) /\ F)
T c==> c~ c~ creal_le creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ c~ c~ creal_le creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
+ |- ((t \/ F) = t)
T c= c\/ f0 cF f0
+ (!a. (!s. ((compact s) ==> (compact (a INSERT s))))) |- (((!a. (!s. ((~ (compact s)) \/ (compact (a INSERT s))))) ==> ((\a. (!s. ((~ (compact s)) \/ (compact (a INSERT s))))) _583645)) = ((\a. (!s. ((~ (compact s)) \/ (compact (a INSERT s))))) _583645))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c= c==> ! ! c\/ c~ ccompact b1 ccompact * * part cINSERT b0 b1 * / ! c\/ c~ ccompact b1 ccompact * * part cINSERT b0 b1 f0 * / ! c\/ c~ ccompact b1 ccompact * * part cINSERT b0 b1 f0
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) |- ((((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))) = T)
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 c= c==> c/\ clinear f0 ! ! c==> c= * f0 b0 * f0 b1 c= b0 b1 c= * part cclosure * * part cIMAGE f0 f1 * * part cIMAGE f0 * part cclosure f1 cT
- |- ((~ (_583658 = _583660)) \/ ((~ (_583657 = _583659)) \/ (((hull _583657) _583658) = ((hull _583659) _583660))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= * * part chull f2 f0 * * part chull f3 f1
+ |- (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> (~ (!s. (((closure s) = s) = (closed s)))))))))) = T)
T c= c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c~ ! c= c= * part cclosure b0 b0 cclosed b0 cT
+ |- (((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))) = ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))
T c= c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ (!s. ((compact s) ==> (compact ((hull convex) s)))) |- ((\s. ((~ (compact s)) \/ (compact ((hull convex) s)))) _583647)
T c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 * / c\/ c~ ccompact b0 ccompact * * part chull part cconvex b0 f0
- (!s. (((closure s) = s) = (closed s))), (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ F), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((~ F) /\ F)
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c/\ c~ cF cF
- |- ((((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) = ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))))
T c= c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
+ |- (((~ ((real_le (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0)))) ==> (((real_le (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) = F)) = (((real_le (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) = F))
T c= c==> c~ creal_le creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= creal_le creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF c= creal_le creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
+ (!s. (((closure s) = s) = (closed s))) |- ((\s. (((closure s) = s) \/ (~ (closed s)))) _583651)
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 * / c\/ c= * part cclosure b0 b0 c~ cclosed b0 f0
- |- ((_583667 = _583669) ==> ((~ (_583668 = _583670)) \/ ((_583667 , _583668) = (_583669 , _583670))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= c, f0 f2 c, f1 f3
+ |- ((((~ (((real_add ((real_mul ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) (a $ i))) ((real_mul (drop x)) (b $ i))) = ((real_add (a $ i)) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))) ==> F) ==> (((real_add ((real_mul ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) (a $ i))) ((real_mul (drop x)) (b $ i))) = ((real_add (a $ i)) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))) = (((real_add ((real_mul ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) (a $ i))) ((real_mul (drop x)) (b $ i))) = ((real_add (a $ i)) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i))))))
T c= c==> c==> c~ c= creal_add creal_mul creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 c$ f1 f2 creal_mul cdrop f0 c$ f3 f2 creal_add c$ f1 f2 creal_mul cdrop f0 creal_sub c$ f3 f2 c$ f1 f2 cF c= creal_add creal_mul creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 c$ f1 f2 creal_mul cdrop f0 c$ f3 f2 creal_add c$ f1 f2 creal_mul cdrop f0 creal_sub c$ f3 f2 c$ f1 f2 c= creal_add creal_mul creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 c$ f1 f2 creal_mul cdrop f0 c$ f3 f2 creal_add c$ f1 f2 creal_mul cdrop f0 creal_sub c$ f3 f2 c$ f1 f2
+ (a = b) |- ((a = b) /\ ((closure (open_segment (a , b))) = EMPTY))
T c==> c= f0 f1 c/\ c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 part cEMPTY
+ |- ((T /\ F) = F)
T c= c/\ cT cF cF
- |- ((_583672 = _583674) ==> ((~ (_583671 = _583673)) \/ (((CONS _583671) _583672) = ((CONS _583673) _583674))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= cCONS f2 f0 cCONS f3 f1
+ |- (((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL))) = T)
T c= c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL cT
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))), ((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) |- ((!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) /\ ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 c==> c/\ clinear f0 ! ! c==> c= * f0 b0 * f0 b1 c= b0 b1 c/\ ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 c= * part cclosure * * part cIMAGE f0 f1 * * part cIMAGE f0 * part cclosure f1
- ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) |- ((((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))))
T c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
+ |- ((a \/ b) = ((~ b) ==> a))
T c= c\/ f0 f1 c==> c~ f1 f0
- (!s. (((closure s) = s) = (closed s))) |- ((\s. ((~ ((closure s) = s)) \/ (closed s))) _583652)
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 * / c\/ c~ c= * part cclosure b0 b0 cclosed b0 f0
+ (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> (~ (!s. (((closure s) = s) = (closed s))))))
T c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c~ ! c= c= * part cclosure b0 b0 cclosed b0
+ |- ((~ (_583653 = _583654)) \/ ((closed _583654) \/ (~ (closed _583653))))
T c\/ c~ c= f0 f1 c\/ cclosed f1 c~ cclosed f0
+ (!s. (((closure s) = s) = (closed s))) |- (((!s. (((closure s) = s) \/ (~ (closed s)))) ==> ((\s. (((closure s) = s) \/ (~ (closed s)))) _583651)) = ((\s. (((closure s) = s) \/ (~ (closed s)))) _583651))
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 c= c==> ! c\/ c= * part cclosure b0 b0 c~ cclosed b0 * / c\/ c= * part cclosure b0 b0 c~ cclosed b0 f0 * / c\/ c= * part cclosure b0 b0 c~ cclosed b0 f0
+ |- ((\a. ((open_segment (a , a)) = EMPTY)) a)
T * / c= * part copen_segment c, b0 b0 part cEMPTY f0
+ (~ (((real_add ((real_mul ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) (a $ i))) ((real_mul (drop x)) (b $ i))) = ((real_add (a $ i)) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))) |- (((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) \/ ((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))))
T c==> c~ c= creal_add creal_mul creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 c$ f1 f2 creal_mul cdrop f0 c$ f3 f2 creal_add c$ f1 f2 creal_mul cdrop f0 creal_sub c$ f3 f2 c$ f1 f2 c\/ creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ |- (((!x. ((((% a) x) = ((% b) x)) = ((a = b) \/ (x = (vec (NUMERAL _0)))))) ==> ((\x. ((((% a) x) = ((% b) x)) = ((a = b) \/ (x = (vec (NUMERAL _0)))))) x)) = ((\x. ((((% a) x) = ((% b) x)) = ((a = b) \/ (x = (vec (NUMERAL _0)))))) x))
T c= c==> ! c= c= c% f0 b0 c% f1 b0 c\/ c= f0 f1 c= b0 cvec cNUMERAL c_0 * / c= c= c% f0 b0 c% f1 b0 c\/ c= f0 f1 c= b0 cvec cNUMERAL c_0 f2 * / c= c= c% f0 b0 c% f1 b0 c\/ c= f0 f1 c= b0 cvec cNUMERAL c_0 f2
- |- ((~ ((closed_segment ((CONS (a , b)) NIL)) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((closed_segment ((CONS (a , b)) NIL)) = (closed_segment ((CONS (a , b)) NIL))))
T c==> c~ c= * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c= * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL
+ (!s. ((compact s) ==> (closed s))) |- ((closed _583650) \/ (~ (compact _583650)))
T c==> ! c==> ccompact b0 cclosed b0 c\/ cclosed f0 c~ ccompact f0
+ |- ((\b. ((closed_segment ((CONS (a , b)) NIL)) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))))) b)
T * / c= * part cclosed_segment cCONS c, f0 b0 cNIL * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b1 f0 c% cdrop b1 b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f1
+ (_583653 = _583654) |- ((((closed _583653) = (closed _583654)) ==> ((closed _583654) \/ (~ (closed _583653)))) = ((closed _583654) \/ (~ (closed _583653))))
T c==> c= f0 f1 c= c==> c= cclosed f0 cclosed f1 c\/ cclosed f1 c~ cclosed f0 c\/ cclosed f1 c~ cclosed f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!s'. (((closure s') = s') \/ (~ (closed s)))) = ((!s. ((closure s) = s)) \/ (~ (closed s))))
T c= ! c\/ c= * part cclosure b0 b0 c~ cclosed f0 c\/ ! c= * part cclosure b0 b0 c~ cclosed f0
+ (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (compact EMPTY) |- (((closed (closed_segment ((CONS (a , b)) NIL))) ==> ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) = ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL))))
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ccompact part cEMPTY c= c==> cclosed * part cclosed_segment cCONS c, f0 f1 cNIL c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL
- (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (compact EMPTY) |- ((~ (closed (closed_segment ((CONS (a , b)) NIL)))) ==> (closed (closed_segment ((CONS (a , b)) NIL))))
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ccompact part cEMPTY c==> c~ cclosed * part cclosed_segment cCONS c, f0 f1 cNIL cclosed * part cclosed_segment cCONS c, f0 f1 cNIL
- (~ ((open_interval (a , b)) = EMPTY)) |- ((~ ((open_interval (a , b)) = EMPTY)) /\ ((closed_interval ((CONS (a , b)) NIL)) = (closure (open_interval (a , b)))))
T c==> c~ c= * part copen_interval c, f0 f1 part cEMPTY c/\ c~ c= * part copen_interval c, f0 f1 part cEMPTY c= * part cclosed_interval cCONS c, f0 f1 cNIL * part cclosure * part copen_interval c, f0 f1
+ |- (((!y. ((drop ((vector_add x) y)) = ((real_add (drop x)) (drop y)))) ==> ((\y. ((drop ((vector_add x) y)) = ((real_add (drop x)) (drop y)))) y)) = ((\y. ((drop ((vector_add x) y)) = ((real_add (drop x)) (drop y)))) y))
T c= c==> ! c= cdrop cvector_add f0 b0 creal_add cdrop f0 cdrop b0 * / c= cdrop cvector_add f0 b0 creal_add cdrop f0 cdrop b0 f1 * / c= cdrop cvector_add f0 b0 creal_add cdrop f0 cdrop b0 f1
+ |- (!c. (!x. (((% ((real_mul c) (drop x))) ((vector_sub b) a)) = ((% c) ((% (drop x)) ((vector_sub b) a))))))
T c= c% creal_mul f0 cdrop f1 cvector_sub f2 f3 c% f0 c% cdrop f1 cvector_sub f2 f3
+ (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (compact EMPTY) |- (closed (closed_segment ((CONS (a , b)) NIL)))
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ccompact part cEMPTY cclosed * part cclosed_segment cCONS c, f0 f1 cNIL
+ (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- ((((real_mul ((real_mul c) (drop x))) ((real_sub (b $ i)) (a $ i))) = ((real_mul c) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i))))) = (((lambdai. ((real_mul ((real_mul c) (drop x))) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i) = ((lambdai. ((real_mul c) ((lambdai. ((real_mul (drop x)) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i))) $ i)))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c= creal_mul creal_mul f1 cdrop f2 creal_sub c$ f3 f0 c$ f4 f0 creal_mul f1 creal_mul cdrop f2 creal_sub c$ f3 f0 c$ f4 f0 c= c$ clambda / creal_mul creal_mul f1 cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b0 f0 c$ clambda / creal_mul f1 c$ clambda / creal_mul cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b1 b0 f0
+ (~ (a = b)) |- ((closure ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))))
T c==> c~ c= f0 f1 c= * part cclosure * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (T = (~ ((open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) = EMPTY)))
T c= cT c~ c= * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 part cEMPTY
+ |- (((closure ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))) = ((closure ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))))
T c= c= * part cclosure * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c= * part cclosure * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- (_583667 = _583669), (_583668 = _583670) |- ((_583668 = _583670) /\ ((_583667 , _583668) = (_583669 , _583670)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f2 f3 c= c, f0 f2 c, f1 f3
- |- ((a ==> (b ==> c)) ==> ((a ==> b) ==> (a ==> c)))
T c==> c==> f0 c==> f1 f2 c==> c==> f0 f1 c==> f0 f2
+ |- ((\g. (!s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s))))) g)
T * / ! c= * * part cIMAGE * * part co f0 b0 b1 * * part cIMAGE f0 * * part cIMAGE b0 b1 f1
+ |- (!a. (!b. ((closure (open_segment (a , b))) = (((COND (a = b)) EMPTY) (closed_segment ((CONS (a , b)) NIL))))))
T c= * part cclosure * part copen_segment c, f0 f1 * * * part cCOND c= f0 f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL
- (!s. (((closure s) = s) = (closed s))), (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (compact EMPTY) |- ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL))))
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ccompact part cEMPTY c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL
+ (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- ((((real_mul ((real_add (drop x)) (drop y))) ((real_sub (b $ i)) (a $ i))) = ((real_add ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))) ((real_mul (drop y)) ((real_sub (b $ i)) (a $ i))))) = (((lambdai. ((real_mul ((real_add (drop x)) (drop y))) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i) = ((lambdai. ((real_add ((lambdai. ((real_mul (drop x)) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i)) ((lambdai. ((real_mul (drop y)) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i))) $ i)))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c= creal_mul creal_add cdrop f1 cdrop f2 creal_sub c$ f3 f0 c$ f4 f0 creal_add creal_mul cdrop f1 creal_sub c$ f3 f0 c$ f4 f0 creal_mul cdrop f2 creal_sub c$ f3 f0 c$ f4 f0 c= c$ clambda / creal_mul creal_add cdrop f1 cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b0 f0 c$ clambda / creal_add c$ clambda / creal_mul cdrop f1 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b1 b0 c$ clambda / creal_mul cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b1 b0 f0
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambdai. ((real_mul ((real_mul c) (drop x))) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i) = ((lambdai. ((real_mul c) ((lambdai. ((real_mul (drop x)) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i))) $ i))) = ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((% ((real_mul c) (drop x))) ((vector_sub b) a)) $ i) = (((% c) ((% (drop x)) ((vector_sub b) a))) $ i))))
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda / creal_mul creal_mul f1 cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b0 f0 c$ clambda / creal_mul f1 c$ clambda / creal_mul cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b1 b0 f0 c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ c% creal_mul f1 cdrop f2 cvector_sub f3 f4 f0 c$ c% f1 c% cdrop f2 cvector_sub f3 f4 f0
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ (!a. (!s. ((compact s) ==> (compact (a INSERT s))))) |- (!s. ((~ (compact s)) \/ (compact (_583645 INSERT s))))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 ! c\/ c~ ccompact b0 ccompact * * part cINSERT f0 b0
+ |- (((~ ((open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) = EMPTY)) ==> ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))) = ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) = (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))))
T c= c==> c~ c= * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 part cEMPTY c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c= * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
+ (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) /\ ((!s. ((compact s) ==> (closed s))) ==> (~ (!s. (((closure s) = s) = (closed s))))))
T c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c/\ ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c~ ! c= c= * part cclosure b0 b0 cclosed b0
+ |- (((NUMERAL (BIT1 _0)) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
- (~ ((closed_segment ((CONS (a , b)) NIL)) = (closed_segment ((CONS (a , b)) NIL)))) |- ((~ ((closed_segment ((CONS (a , b)) NIL)) = (closed_segment ((CONS (a , b)) NIL)))) /\ ((closed_segment ((CONS (a , b)) NIL)) = (closed_segment ((CONS (a , b)) NIL))))
T c==> c~ c= * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c/\ c~ c= * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c= * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL
- |- (((~ p) ==> p) = p)
T c= c==> c~ f0 f0 f0
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ |- ((!b. (!a. ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> (~ (!s. (((closure s) = s) = (closed s)))))))))))) = (!b. (!a. ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))))))
T c= ! ! c==> c~ c= * part cclosure * part cclosed_segment cCONS c, b1 b0 cNIL * part cclosed_segment cCONS c, b1 b0 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b2 ccompact * * part cINSERT b2 b2 c==> ! c==> ccompact b2 ccompact * * part chull part cconvex b2 c==> ! ! c= * part cclosed_segment cCONS c, b2 b2 cNIL * * part chull part cconvex * * part cINSERT b2 * * part cINSERT b2 part cEMPTY c==> ! c==> ccompact b2 cclosed b2 c~ ! c= c= * part cclosure b2 b2 cclosed b2 ! ! c==> c~ c= * part cclosure * part cclosed_segment cCONS c, b1 b0 cNIL * part cclosed_segment cCONS c, b1 b0 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b2 ccompact * * part cINSERT b2 b2 c==> ! c==> ccompact b2 ccompact * * part chull part cconvex b2 c==> ! ! c= * part cclosed_segment cCONS c, b2 b2 cNIL * * part chull part cconvex * * part cINSERT b2 * * part cINSERT b2 part cEMPTY c==> ! c==> ccompact b2 cclosed b2 c==> ! c= c= * part cclosure b2 b2 cclosed b2 cF
+ |- (linear (\u. ((% (drop u)) ((vector_sub b) a))))
T clinear / c% cdrop b0 cvector_sub f0 f1
+ |- (~ ((open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) = EMPTY))
T c~ c= * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 part cEMPTY
- (~ (compact EMPTY)), (compact EMPTY) |- ((~ (compact EMPTY)) /\ (compact EMPTY))
T c==> c~ ccompact part cEMPTY c==> ccompact part cEMPTY c/\ c~ ccompact part cEMPTY ccompact part cEMPTY
+ |- (((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i)))) ==> ((\i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i)))) i)) = ((\i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i)))) i))
T c= c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ clambda f0 b0 * f0 b0 * / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ clambda f0 b0 * f0 b0 f1 * / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ clambda f0 b0 * f0 b0 f1
+ |- ((\y. ((((vector_sub x) y) = (vec (NUMERAL _0))) = (x = y))) y)
T * / c= c= cvector_sub f0 b0 cvec cNUMERAL c_0 c= f0 b0 f1
+ |- (((!a. (!s. ((closure ((IMAGE (\x. ((vector_add a) x))) s)) = ((IMAGE (\x. ((vector_add a) x))) (closure s))))) ==> ((\a. (!s. ((closure ((IMAGE (\x. ((vector_add a) x))) s)) = ((IMAGE (\x. ((vector_add a) x))) (closure s))))) a)) = ((\a. (!s. ((closure ((IMAGE (\x. ((vector_add a) x))) s)) = ((IMAGE (\x. ((vector_add a) x))) (closure s))))) a))
T c= c==> ! ! c= * part cclosure * * part cIMAGE / cvector_add b0 b2 b1 * * part cIMAGE / cvector_add b0 b2 * part cclosure b1 * / ! c= * part cclosure * * part cIMAGE / cvector_add b0 b2 b1 * * part cIMAGE / cvector_add b0 b2 * part cclosure b1 f0 * / ! c= * part cclosure * * part cIMAGE / cvector_add b0 b2 b1 * * part cIMAGE / cvector_add b0 b2 * part cclosure b1 f0
+ (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((!s. ((compact s) ==> (closed s))) ==> (~ (!s. (((closure s) = s) = (closed s)))))
T c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c~ ! c= c= * part cclosure b0 b0 cclosed b0
+ |- ((\x. (!y. ((drop ((vector_add x) y)) = ((real_add (drop x)) (drop y))))) x)
T * / ! c= cdrop cvector_add b0 b1 creal_add cdrop b0 cdrop b1 f0
+ |- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((% ((real_mul c) (drop x))) ((vector_sub b) a)) $ i) = (((% c) ((% (drop x)) ((vector_sub b) a))) $ i))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ c% creal_mul f1 cdrop f2 cvector_sub f3 f4 f0 c$ c% f1 c% cdrop f2 cvector_sub f3 f4 f0
- |- ((~ (_583665 = _583666)) \/ ((closure _583665) = (closure _583666)))
T c\/ c~ c= f0 f1 c= * part cclosure f0 * part cclosure f1
+ |- ((\f. (!g. (!s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s)))))) f)
T * / ! ! c= * * part cIMAGE * * part co b0 b1 b2 * * part cIMAGE b0 * * part cIMAGE b1 b2 f0
+ |- (((!f. ((linear f) = ((!x. (!y. ((f ((vector_add x) y)) = ((vector_add (f x)) (f y))))) /\ (!c. (!x. ((f ((% c) x)) = ((% c) (f x)))))))) ==> ((\f. ((linear f) = ((!x. (!y. ((f ((vector_add x) y)) = ((vector_add (f x)) (f y))))) /\ (!c. (!x. ((f ((% c) x)) = ((% c) (f x)))))))) f)) = ((\f. ((linear f) = ((!x. (!y. ((f ((vector_add x) y)) = ((vector_add (f x)) (f y))))) /\ (!c. (!x. ((f ((% c) x)) = ((% c) (f x)))))))) f))
T c= c==> ! c= clinear b0 c/\ ! ! c= * b0 cvector_add b1 b2 cvector_add * b0 b1 * b0 b2 ! ! c= * b0 c% b1 b2 c% b1 * b0 b2 * / c= clinear b0 c/\ ! ! c= * b0 cvector_add b1 b2 cvector_add * b0 b1 * b0 b2 ! ! c= * b0 c% b1 b2 c% b1 * b0 b2 f0 * / c= clinear b0 c/\ ! ! c= * b0 cvector_add b1 b2 cvector_add * b0 b1 * b0 b2 ! ! c= * b0 c% b1 b2 c% b1 * b0 b2 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
- (_583657 = _583659), (_583658 = _583660) |- ((_583657 = _583659) /\ (((hull _583657) _583658) = ((hull _583659) _583660)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f0 f1 c= * * part chull f0 f2 * * part chull f1 f3
+ |- (((!y. (((drop x) = (drop y)) = (x = y))) ==> ((\y. (((drop x) = (drop y)) = (x = y))) y)) = ((\y. (((drop x) = (drop y)) = (x = y))) y))
T c= c==> ! c= c= cdrop f0 cdrop b0 c= f0 b0 * / c= c= cdrop f0 cdrop b0 c= f0 b0 f1 * / c= c= cdrop f0 cdrop b0 c= f0 b0 f1
+ |- ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambdai. ((real_add ((lambdai. ((real_mul ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) (a $ i))) $ i)) ((lambdai. ((real_mul (drop x)) (b $ i))) $ i))) $ i) = ((lambdai. ((real_add (a $ i)) ((lambdai. ((real_mul (drop x)) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i))) $ i)))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda / creal_add c$ clambda / creal_mul creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 c$ f2 b1 b0 c$ clambda / creal_mul cdrop f1 c$ f3 b1 b0 f0 c$ clambda / creal_add c$ f2 b0 c$ clambda / creal_mul cdrop f1 c$ clambda / creal_sub c$ f3 b1 c$ f2 b1 b1 b0 f0
+ (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) |- ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))
T c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
+ ((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) |- (((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) /\ F)
T c==> creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 cF
+ |- (!x. (!y. (((% ((real_add (drop x)) (drop y))) ((vector_sub b) a)) = ((vector_add ((% (drop x)) ((vector_sub b) a))) ((% (drop y)) ((vector_sub b) a))))))
T c= c% creal_add cdrop f0 cdrop f1 cvector_sub f2 f3 cvector_add c% cdrop f0 cvector_sub f2 f3 c% cdrop f1 cvector_sub f2 f3
- (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) |- ((((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) /\ (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))))
T c==> c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c/\ c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
+ |- (((!g. (!x. (((f o g) x) = (f (g x))))) ==> ((\g. (!x. (((f o g) x) = (f (g x))))) g)) = ((\g. (!x. (((f o g) x) = (f (g x))))) g))
T c= c==> ! ! c= co f0 b0 b1 * f0 * b0 b1 * / ! c= co f0 b0 b1 * f0 * b0 b1 f1 * / ! c= co f0 b0 b1 * f0 * b0 b1 f1
+ |- ((\x. (!y. ((((vector_sub x) y) = (vec (NUMERAL _0))) = (x = y)))) x)
T * / ! c= c= cvector_sub b0 b1 cvec cNUMERAL c_0 c= b0 b1 f0
+ |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
+ (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) |- (!b. ((closed_segment ((CONS (_583648 , b)) NIL)) = ((hull convex) (_583648 INSERT (b INSERT EMPTY)))))
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY ! c= * part cclosed_segment cCONS c, f0 b0 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT b0 part cEMPTY
+ |- ((!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((% ((real_add (drop x)) (drop y))) ((vector_sub b) a)) $ i) = (((vector_add ((% (drop x)) ((vector_sub b) a))) ((% (drop y)) ((vector_sub b) a))) $ i)))) = (((% ((real_add (drop x)) (drop y))) ((vector_sub b) a)) = ((vector_add ((% (drop x)) ((vector_sub b) a))) ((% (drop y)) ((vector_sub b) a)))))
T c= ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ c% creal_add cdrop f0 cdrop f1 cvector_sub f2 f3 b0 c$ cvector_add c% cdrop f0 cvector_sub f2 f3 c% cdrop f1 cvector_sub f2 f3 b0 c= c% creal_add cdrop f0 cdrop f1 cvector_sub f2 f3 cvector_add c% cdrop f0 cvector_sub f2 f3 c% cdrop f1 cvector_sub f2 f3
- (~ (a = b)) |- ((~ (a = b)) /\ ((open_segment (a , b)) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))))
T c==> c~ c= f0 f1 c/\ c~ c= f0 f1 c= * part copen_segment c, f0 f1 * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!g. (!s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s))))) ==> ((\g. (!s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s))))) g)) = ((\g. (!s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s))))) g))
T c= c==> ! ! c= * * part cIMAGE * * part co f0 b0 b1 * * part cIMAGE f0 * * part cIMAGE b0 b1 * / ! c= * * part cIMAGE * * part co f0 b0 b1 * * part cIMAGE f0 * * part cIMAGE b0 b1 f1 * / ! c= * * part cIMAGE * * part co f0 b0 b1 * * part cIMAGE f0 * * part cIMAGE b0 b1 f1
- (_583675 = _583676) |- ((_583675 = _583676) /\ ((closed_segment _583675) = (closed_segment _583676)))
T c==> c= f0 f1 c/\ c= f0 f1 c= * part cclosed_segment f0 * part cclosed_segment f1
+ |- (((!f. (!g. (!x. (((f o g) x) = (f (g x)))))) ==> ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) f)) = ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) f))
T c= c==> ! ! ! c= co b0 b1 b2 * b0 * b1 b2 * / ! ! c= co b0 b1 b2 * b0 * b1 b2 f0 * / ! ! c= co b0 b1 b2 * b0 * b1 b2 f0
+ (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) |- ((\a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) _583648)
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY * / ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0
+ |- ((~ (((real_add ((real_mul ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) (a $ i))) ((real_mul (drop x)) (b $ i))) = ((real_add (a $ i)) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))) ==> F)
T c==> c~ c= creal_add creal_mul creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 c$ f1 f2 creal_mul cdrop f0 c$ f3 f2 creal_add c$ f1 f2 creal_mul cdrop f0 creal_sub c$ f3 f2 c$ f1 f2 cF
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) /\ ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> (~ (!s. (((closure s) = s) = (closed s))))))))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c/\ ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c~ ! c= c= * part cclosure b0 b0 cclosed b0
+ |- (((real_add ((real_mul ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) (a $ i))) ((real_mul (drop x)) (b $ i))) = ((real_add (a $ i)) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))
T c= creal_add creal_mul creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 c$ f1 f2 creal_mul cdrop f0 c$ f3 f2 creal_add c$ f1 f2 creal_mul cdrop f0 creal_sub c$ f3 f2 c$ f1 f2
- |- ((~ (_583667 = _583669)) \/ ((~ (_583668 = _583670)) \/ ((_583667 , _583668) = (_583669 , _583670))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= c, f0 f2 c, f1 f3
- (_583672 = _583674) |- ((_583671 = _583673) ==> (((CONS _583671) _583672) = ((CONS _583673) _583674)))
T c==> c= f0 f1 c==> c= f2 f3 c= cCONS f2 f0 cCONS f3 f1
- |- (T = (((~ (x = y)) \/ ((~ (x = z)) \/ (y = z))) = ((y = z) \/ ((~ (x = y)) \/ (~ (x = z))))))
T c= cT c= c\/ c~ c= f0 f1 c\/ c~ c= f0 f2 c= f1 f2 c\/ c= f1 f2 c\/ c~ c= f0 f1 c~ c= f0 f2
+ |- ((~ (((real_mul ((real_add (drop x)) (drop y))) ((real_sub (b $ i)) (a $ i))) = ((real_add ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))) ((real_mul (drop y)) ((real_sub (b $ i)) (a $ i)))))) ==> F)
T c==> c~ c= creal_mul creal_add cdrop f0 cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 creal_add creal_mul cdrop f0 creal_sub c$ f2 f3 c$ f4 f3 creal_mul cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 cF
+ (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (compact EMPTY) |- (closed ((hull convex) (a INSERT (b INSERT EMPTY))))
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ccompact part cEMPTY cclosed * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((\b. ((~ ((open_interval (a , b)) = EMPTY)) ==> ((closure (open_interval (a , b))) = (closed_interval ((CONS (a , b)) NIL))))) b)
T * / c==> c~ c= * part copen_interval c, f0 b0 part cEMPTY c= * part cclosure * part copen_interval c, f0 b0 * part cclosed_interval cCONS c, f0 b0 cNIL f1
- (_583658 = _583660) |- ((_583657 = _583659) ==> (((hull _583657) _583658) = ((hull _583659) _583660)))
T c==> c= f0 f1 c==> c= f2 f3 c= * * part chull f2 f0 * * part chull f3 f1
- (!s. (((closure s) = s) = (closed s))) |- (!s. ((~ ((closure s) = s)) \/ (closed s)))
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 ! c\/ c~ c= * part cclosure b0 b0 cclosed b0
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
- (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ (closed (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((~ (closed (closed_segment ((CONS (a , b)) NIL)))) /\ (closed (closed_segment ((CONS (a , b)) NIL))))
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ cclosed * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c/\ c~ cclosed * part cclosed_segment cCONS c, f0 f1 cNIL cclosed * part cclosed_segment cCONS c, f0 f1 cNIL
+ |- ((~ (~ ((real_le (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))) ==> F)
T c==> c~ c~ creal_le creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
+ |- (((real_mul (real_neg (real_of_num m))) (real_neg (real_of_num n))) = (real_of_num (m * n)))
T c= creal_mul creal_neg creal_of_num f0 creal_neg creal_of_num f1 creal_of_num c* f0 f1
+ (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((!s. ((compact s) ==> (closed s))) /\ (~ (!s. (((closure s) = s) = (closed s)))))
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c/\ ! c==> ccompact b0 cclosed b0 c~ ! c= c= * part cclosure b0 b0 cclosed b0
+ (((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) |- ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) /\ (((lambdai. ((real_mul ((real_add (drop x)) (drop y))) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i) = ((lambdai. ((real_add ((lambdai. ((real_mul (drop x)) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i)) ((lambdai. ((real_mul (drop y)) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i))) $ i)))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c/\ c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda / creal_mul creal_add cdrop f1 cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b0 f0 c$ clambda / creal_add c$ clambda / creal_mul cdrop f1 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b1 b0 c$ clambda / creal_mul cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b1 b0 f0
- (a = b) |- ((a = b) = T)
T c==> c= f0 f1 c= c= f0 f1 cT
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) |- (((!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))) ==> ((\s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))) s)) = ((\s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))) s))
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 c= c==> ! c==> c/\ clinear f0 ! ! c==> c= * f0 b1 * f0 b2 c= b1 b2 c= * part cclosure * * part cIMAGE f0 b0 * * part cIMAGE f0 * part cclosure b0 * / c==> c/\ clinear f0 ! ! c==> c= * f0 b1 * f0 b2 c= b1 b2 c= * part cclosure * * part cIMAGE f0 b0 * * part cIMAGE f0 * part cclosure b0 f1 * / c==> c/\ clinear f0 ! ! c==> c= * f0 b1 * f0 b2 c= b1 b2 c= * part cclosure * * part cIMAGE f0 b0 * * part cIMAGE f0 * part cclosure b0 f1
+ (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) |- ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))
T c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
- |- (((real_mul (real_neg (real_of_num x))) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ (~ (((real_mul ((real_mul c) (drop x))) ((real_sub (b $ i)) (a $ i))) = ((real_mul c) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))) |- (((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) \/ ((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))))
T c==> c~ c= creal_mul creal_mul f0 cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 creal_mul f0 creal_mul cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 c\/ creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ (!a. (!s. ((compact s) ==> (compact (a INSERT s))))) |- ((\a. (!s. ((~ (compact s)) \/ (compact (a INSERT s))))) _583645)
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 * / ! c\/ c~ ccompact b1 ccompact * * part cINSERT b0 b1 f0
+ |- ((\s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s)))) s)
T * / c= * * part cIMAGE * * part co f0 f1 b0 * * part cIMAGE f0 * * part cIMAGE f1 b0 f2
+ |- ((\f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) f)
T * / ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 f0
+ |- (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambdai. ((real_mul ((real_add (drop x)) (drop y))) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i) = ((lambdai. ((real_add ((lambdai. ((real_mul (drop x)) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i)) ((lambdai. ((real_mul (drop y)) ((lambdai. ((real_sub (b $ i)) (a $ i))) $ i))) $ i))) $ i))) = ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((% ((real_add (drop x)) (drop y))) ((vector_sub b) a)) $ i) = (((vector_add ((% (drop x)) ((vector_sub b) a))) ((% (drop y)) ((vector_sub b) a))) $ i))))
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda / creal_mul creal_add cdrop f1 cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b0 f0 c$ clambda / creal_add c$ clambda / creal_mul cdrop f1 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b1 b0 c$ clambda / creal_mul cdrop f2 c$ clambda / creal_sub c$ f3 b1 c$ f4 b1 b1 b0 f0 c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ c% creal_add cdrop f1 cdrop f2 cvector_sub f3 f4 f0 c$ cvector_add c% cdrop f1 cvector_sub f3 f4 c% cdrop f2 cvector_sub f3 f4 f0
+ (!a. (!s. ((compact s) ==> (compact (a INSERT s))))) |- (((!s. ((~ (compact s)) \/ (compact (_583645 INSERT s)))) ==> ((\s. ((~ (compact s)) \/ (compact (_583645 INSERT s)))) _583646)) = ((\s. ((~ (compact s)) \/ (compact (_583645 INSERT s)))) _583646))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c= c==> ! c\/ c~ ccompact b0 ccompact * * part cINSERT f0 b0 * / c\/ c~ ccompact b0 ccompact * * part cINSERT f0 b0 f1 * / c\/ c~ ccompact b0 ccompact * * part cINSERT f0 b0 f1
+ |- ((\i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i)))) i)
T * / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ clambda f0 b0 * f0 b0 f1
+ (~ (a = b)) |- (((~ (b = a)) ==> ((b = a) = F)) = ((b = a) = F))
T c==> c~ c= f0 f1 c= c==> c~ c= f1 f0 c= c= f1 f0 cF c= c= f1 f0 cF
- |- ((_583658 = _583660) ==> ((~ (_583657 = _583659)) \/ (((hull _583657) _583658) = ((hull _583659) _583660))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= * * part chull f2 f0 * * part chull f3 f1
+ |- (((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))) = ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))
T c= c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
+ |- (((!s. (((closure s) = s) = (closed s))) ==> F) = F)
T c= c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF cF
+ |- (((!b. (!x. ((((% a) x) = ((% b) x)) = ((a = b) \/ (x = (vec (NUMERAL _0))))))) ==> ((\b. (!x. ((((% a) x) = ((% b) x)) = ((a = b) \/ (x = (vec (NUMERAL _0))))))) b)) = ((\b. (!x. ((((% a) x) = ((% b) x)) = ((a = b) \/ (x = (vec (NUMERAL _0))))))) b))
T c= c==> ! ! c= c= c% f0 b1 c% b0 b1 c\/ c= f0 b0 c= b1 cvec cNUMERAL c_0 * / ! c= c= c% f0 b1 c% b0 b1 c\/ c= f0 b0 c= b1 cvec cNUMERAL c_0 f1 * / ! c= c= c% f0 b1 c% b0 b1 c\/ c= f0 b0 c= b1 cvec cNUMERAL c_0 f1
+ (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) |- (((closed_segment ((CONS (a , b)) NIL)) = (closed_segment ((CONS (a , b)) NIL))) = (((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))) /\ ((closed_segment ((CONS (a , b)) NIL)) = (closed_segment ((CONS (a , b)) NIL)))))
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c= c= * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c/\ c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL
- (~ (a = b)) |- ((a = b) = F)
T c==> c~ c= f0 f1 c= c= f0 f1 cF
+ |- (((!g. ((f = g) = (!x. ((f x) = (g x))))) ==> ((\g. ((f = g) = (!x. ((f x) = (g x))))) g)) = ((\g. ((f = g) = (!x. ((f x) = (g x))))) g))
T c= c==> ! c= c= f0 b0 ! c= * f0 b1 * b0 b1 * / c= c= f0 b0 ! c= * f0 b1 * b0 b1 f1 * / c= c= f0 b0 ! c= * f0 b1 * b0 b1 f1
+ (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) |- ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))
T c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
- (_583665 = _583666) |- ((_583665 = _583666) /\ ((closure _583665) = (closure _583666)))
T c==> c= f0 f1 c/\ c= f0 f1 c= * part cclosure f0 * part cclosure f1
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((!s. ((P s) \/ Q)) = ((!s. (P s)) \/ Q))
T c= ! c\/ * f0 b0 f1 c\/ ! * f0 b0 f1
+ |- (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((% ((real_add (drop x)) (drop y))) ((vector_sub b) a)) $ i) = (((vector_add ((% (drop x)) ((vector_sub b) a))) ((% (drop y)) ((vector_sub b) a))) $ i))) = T)
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ c% creal_add cdrop f1 cdrop f2 cvector_sub f3 f4 f0 c$ cvector_add c% cdrop f1 cvector_sub f3 f4 c% cdrop f2 cvector_sub f3 f4 f0 cT
+ (!s. ((compact s) ==> (compact ((hull convex) s)))) |- ((compact _583647) ==> (compact ((hull convex) _583647)))
T c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ccompact f0 ccompact * * part chull part cconvex f0
+ (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (compact EMPTY) |- (((compact (b INSERT EMPTY)) ==> (compact (_583645 INSERT (b INSERT EMPTY)))) = (compact (_583645 INSERT (b INSERT EMPTY))))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ccompact part cEMPTY c= c==> ccompact * * part cINSERT f0 part cEMPTY ccompact * * part cINSERT f1 * * part cINSERT f0 part cEMPTY ccompact * * part cINSERT f1 * * part cINSERT f0 part cEMPTY
+ (~ (a = b)) |- ((closure ((IMAGE ((\x. ((vector_add a) x)) o (\u. ((% (drop u)) ((vector_sub b) a))))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE ((\x. ((vector_add a) x)) o (\u. ((% (drop u)) ((vector_sub b) a))))) (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))))
T c==> c~ c= f0 f1 c= * part cclosure * * part cIMAGE * * part co / cvector_add f0 b0 / c% cdrop b0 cvector_sub f1 f0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE * * part co / cvector_add f0 b0 / c% cdrop b0 cvector_sub f1 f0 * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
+ |- (((!f. (!g. (!s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s)))))) ==> ((\f. (!g. (!s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s)))))) f)) = ((\f. (!g. (!s. (((IMAGE (f o g)) s) = ((IMAGE f) ((IMAGE g) s)))))) f))
T c= c==> ! ! ! c= * * part cIMAGE * * part co b0 b1 b2 * * part cIMAGE b0 * * part cIMAGE b1 b2 * / ! ! c= * * part cIMAGE * * part co b0 b1 b2 * * part cIMAGE b0 * * part cIMAGE b1 b2 f0 * / ! ! c= * * part cIMAGE * * part co b0 b1 b2 * * part cIMAGE b0 * * part cIMAGE b1 b2 f0
+ (!a. (!s. ((compact s) ==> (compact (a INSERT s))))) |- ((\s. ((~ (compact s)) \/ (compact (_583645 INSERT s)))) _583646)
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 * / c\/ c~ ccompact b0 ccompact * * part cINSERT f0 b0 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((open_interval (a , b)) = EMPTY) = ((real_le (drop b)) (drop a)))
T c= c= * part copen_interval c, f0 f1 part cEMPTY creal_le cdrop f1 cdrop f0
- |- ((!s'. (((closure s) = s) \/ (~ (closed s')))) = (((closure s) = s) \/ (!s. (~ (closed s)))))
T c= ! c\/ c= * part cclosure f0 f0 c~ cclosed b0 c\/ c= * part cclosure f0 f0 ! c~ cclosed b0
+ |- ((!a. ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> (~ (!s. (((closure s) = s) = (closed s))))))))))) = T)
T c= ! c==> c~ c= * part cclosure * part cclosed_segment cCONS c, b0 f0 cNIL * part cclosed_segment cCONS c, b0 f0 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b1 b1 c==> ! c==> ccompact b1 ccompact * * part chull part cconvex b1 c==> ! ! c= * part cclosed_segment cCONS c, b1 b1 cNIL * * part chull part cconvex * * part cINSERT b1 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b1 cclosed b1 c~ ! c= c= * part cclosure b1 b1 cclosed b1 cT
- (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (~ (closed ((hull convex) (a INSERT (b INSERT EMPTY))))), (compact EMPTY) |- ((~ (closed ((hull convex) (a INSERT (b INSERT EMPTY))))) /\ (closed ((hull convex) (a INSERT (b INSERT EMPTY)))))
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> c~ cclosed * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> ccompact part cEMPTY c/\ c~ cclosed * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cclosed * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((\b. ((~ (a = b)) ==> ((open_segment (a , b)) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))))) b)
T * / c==> c~ c= f0 b0 c= * part copen_segment c, f0 b0 * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b1 f0 c% cdrop b1 b0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!a. ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) ==> ((\a. ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) a)) = ((\a. ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) a))
T c= c==> ! c==> c~ c= * part cclosure * part cclosed_segment cCONS c, b0 f0 cNIL * part cclosed_segment cCONS c, b0 f0 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b1 b1 c==> ! c==> ccompact b1 ccompact * * part chull part cconvex b1 c==> ! ! c= * part cclosed_segment cCONS c, b1 b1 cNIL * * part chull part cconvex * * part cINSERT b1 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b1 cclosed b1 c==> ! c= c= * part cclosure b1 b1 cclosed b1 cF * / c==> c~ c= * part cclosure * part cclosed_segment cCONS c, b0 f0 cNIL * part cclosed_segment cCONS c, b0 f0 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b1 b1 c==> ! c==> ccompact b1 ccompact * * part chull part cconvex b1 c==> ! ! c= * part cclosed_segment cCONS c, b1 b1 cNIL * * part chull part cconvex * * part cINSERT b1 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b1 cclosed b1 c==> ! c= c= * part cclosure b1 b1 cclosed b1 cF f1 * / c==> c~ c= * part cclosure * part cclosed_segment cCONS c, b0 f0 cNIL * part cclosed_segment cCONS c, b0 f0 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b1 b1 c==> ! c==> ccompact b1 ccompact * * part chull part cconvex b1 c==> ! ! c= * part cclosed_segment cCONS c, b1 b1 cNIL * * part chull part cconvex * * part cINSERT b1 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b1 cclosed b1 c==> ! c= c= * part cclosure b1 b1 cclosed b1 cF f1
- |- ((!s'. ((~ ((closure s') = s')) \/ (closed s))) = ((!s. (~ ((closure s) = s))) \/ (closed s)))
T c= ! c\/ c~ c= * part cclosure b0 b0 cclosed f0 c\/ ! c~ c= * part cclosure b0 b0 cclosed f0
+ |- ((real_neg ((real_sub ((real_mul ((real_add (drop x)) (drop y))) ((real_sub (b $ i)) (a $ i)))) ((real_add ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))) ((real_mul (drop y)) ((real_sub (b $ i)) (a $ i)))))) = (real_of_num (NUMERAL _0)))
T c= creal_neg creal_sub creal_mul creal_add cdrop f0 cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 creal_add creal_mul cdrop f0 creal_sub c$ f2 f3 c$ f4 f3 creal_mul cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 creal_of_num cNUMERAL c_0
- |- ((closed_segment ((CONS (a , a)) NIL)) = (a INSERT EMPTY))
T c= * part cclosed_segment cCONS c, f0 f0 cNIL * * part cINSERT f0 part cEMPTY
+ |- (((real_add (real_neg (real_of_num m))) (real_of_num m)) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_neg creal_of_num f0 creal_of_num f0 creal_of_num cNUMERAL c_0
+ (~ (a = b)) |- ((((linear (\u. ((% (drop u)) ((vector_sub b) a)))) /\ (!x. (!y. ((((\u. ((% (drop u)) ((vector_sub b) a))) x) = ((\u. ((% (drop u)) ((vector_sub b) a))) y)) ==> (x = y))))) ==> ((closure ((IMAGE (\u. ((% (drop u)) ((vector_sub b) a)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE (\u. ((% (drop u)) ((vector_sub b) a)))) (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))))) = ((closure ((IMAGE (\u. ((% (drop u)) ((vector_sub b) a)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE (\u. ((% (drop u)) ((vector_sub b) a)))) (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))))
T c==> c~ c= f0 f1 c= c==> c/\ clinear / c% cdrop b0 cvector_sub f1 f0 ! ! c==> c= * / c% cdrop b2 cvector_sub f1 f0 b0 * / c% cdrop b2 cvector_sub f1 f0 b1 c= b0 b1 c= * part cclosure * * part cIMAGE / c% cdrop b0 cvector_sub f1 f0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE / c% cdrop b0 cvector_sub f1 f0 * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c= * part cclosure * * part cIMAGE / c% cdrop b0 cvector_sub f1 f0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE / c% cdrop b0 cvector_sub f1 f0 * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ |- ((\s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))) s)
T * / c==> c/\ clinear f0 ! ! c==> c= * f0 b1 * f0 b2 c= b1 b2 c= * part cclosure * * part cIMAGE f0 b0 * * part cIMAGE f0 * part cclosure b0 f1
+ (~ (((real_add ((real_mul ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) (a $ i))) ((real_mul (drop x)) (b $ i))) = ((real_add (a $ i)) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))) |- ((~ (((real_add ((real_mul ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) (a $ i))) ((real_mul (drop x)) (b $ i))) = ((real_add (a $ i)) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))) /\ F)
T c==> c~ c= creal_add creal_mul creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 c$ f1 f2 creal_mul cdrop f0 c$ f3 f2 creal_add c$ f1 f2 creal_mul cdrop f0 creal_sub c$ f3 f2 c$ f1 f2 c/\ c~ c= creal_add creal_mul creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 c$ f1 f2 creal_mul cdrop f0 c$ f3 f2 creal_add c$ f1 f2 creal_mul cdrop f0 creal_sub c$ f3 f2 c$ f1 f2 cF
- |- ((!s'. ((~ (compact s)) \/ (compact (a INSERT s')))) = ((~ (compact s)) \/ (!s. (compact (a INSERT s)))))
T c= ! c\/ c~ ccompact f0 ccompact * * part cINSERT f1 b0 c\/ c~ ccompact f0 ! ccompact * * part cINSERT f1 b0
+ (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) |- ((\b. ((closed_segment ((CONS (_583648 , b)) NIL)) = ((hull convex) (_583648 INSERT (b INSERT EMPTY))))) _583649)
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY * / c= * part cclosed_segment cCONS c, f0 b0 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT b0 part cEMPTY f1
+ |- ((!c. (!x. (((% ((real_mul c) (drop x))) ((vector_sub b) a)) = ((% c) ((% (drop x)) ((vector_sub b) a)))))) = ((!x. (!y. (((% ((real_add (drop x)) (drop y))) ((vector_sub b) a)) = ((vector_add ((% (drop x)) ((vector_sub b) a))) ((% (drop y)) ((vector_sub b) a)))))) /\ (!c. (!x. (((% ((real_mul c) (drop x))) ((vector_sub b) a)) = ((% c) ((% (drop x)) ((vector_sub b) a))))))))
T c= ! ! c= c% creal_mul b0 cdrop b1 cvector_sub f0 f1 c% b0 c% cdrop b1 cvector_sub f0 f1 c/\ ! ! c= c% creal_add cdrop b0 cdrop b1 cvector_sub f0 f1 cvector_add c% cdrop b0 cvector_sub f0 f1 c% cdrop b1 cvector_sub f0 f1 ! ! c= c% creal_mul b0 cdrop b1 cvector_sub f0 f1 c% b0 c% cdrop b1 cvector_sub f0 f1
+ |- ((!b. ((closure (open_segment (a , b))) = (((COND (a = b)) EMPTY) (closed_segment ((CONS (a , b)) NIL))))) = T)
T c= ! c= * part cclosure * part copen_segment c, f0 b0 * * * part cCOND c= f0 b0 part cEMPTY * part cclosed_segment cCONS c, f0 b0 cNIL cT
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) |- (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 ! c==> c/\ clinear f0 ! ! c==> c= * f0 b1 * f0 b2 c= b1 b2 c= * part cclosure * * part cIMAGE f0 b0 * * part cIMAGE f0 * part cclosure b0
+ (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) |- ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))
T c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
+ |- (((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) a)) ((% (drop x)) b)) $ i) = (((vector_add a) ((% (drop x)) ((vector_sub b) a))) $ i))) = T)
T c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f1 f2 c% cdrop f1 f3 f0 c$ cvector_add f2 c% cdrop f1 cvector_sub f3 f2 f0 cT
+ |- ((a = b) ==> ((closure (open_segment (a , b))) = EMPTY))
T c==> c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 part cEMPTY
- |- ((_583661 = _583663) ==> ((~ (_583662 = _583664)) \/ ((_583661 INSERT _583662) = (_583663 INSERT _583664))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= * * part cINSERT f0 f2 * * part cINSERT f1 f3
- (~ (a = b)) |- (((closure (open_segment (a , b))) = (closed_segment ((CONS (a , b)) NIL))) = ((closure (open_segment (a , b))) = (closed_segment ((CONS (a , b)) NIL))))
T c==> c~ c= f0 f1 c= c= * part cclosure * part copen_segment c, f0 f1 * part cclosed_segment cCONS c, f0 f1 cNIL c= * part cclosure * part copen_segment c, f0 f1 * part cclosed_segment cCONS c, f0 f1 cNIL
- (_583662 = _583664), (_583661 = _583663) |- ((_583662 = _583664) /\ ((_583661 INSERT _583662) = (_583663 INSERT _583664)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f0 f1 c= * * part cINSERT f2 f0 * * part cINSERT f3 f1
+ |- ((\x. (!y. (((drop x) = (drop y)) = (x = y)))) x)
T * / ! c= c= cdrop b0 cdrop b1 c= b0 b1 f0
- |- (T = (((~ (compact _583647)) \/ (compact ((hull convex) _583647))) = ((compact ((hull convex) _583647)) \/ (~ (compact _583647)))))
T c= cT c= c\/ c~ ccompact f0 ccompact * * part chull part cconvex f0 c\/ ccompact * * part chull part cconvex f0 c~ ccompact f0
- |- ((x = x) = T)
T c= c= f0 f0 cT
+ |- (((!f. (!g. ((f = g) = (!x. ((f x) = (g x)))))) ==> ((\f. (!g. ((f = g) = (!x. ((f x) = (g x)))))) f)) = ((\f. (!g. ((f = g) = (!x. ((f x) = (g x)))))) f))
T c= c==> ! ! c= c= b0 b1 ! c= * b0 b2 * b1 b2 * / ! c= c= b0 b1 ! c= * b0 b2 * b1 b2 f0 * / ! c= c= b0 b1 ! c= * b0 b2 * b1 b2 f0
+ |- (((~ (a = b)) ==> ((closure (open_segment (a , b))) = (closed_segment ((CONS (a , b)) NIL)))) = (((a = b) ==> ((closure (open_segment (a , b))) = EMPTY)) /\ ((~ (a = b)) ==> ((closure (open_segment (a , b))) = (closed_segment ((CONS (a , b)) NIL))))))
T c= c==> c~ c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 * part cclosed_segment cCONS c, f0 f1 cNIL c/\ c==> c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 part cEMPTY c==> c~ c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 * part cclosed_segment cCONS c, f0 f1 cNIL
+ ((\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b))) = ((\x. ((vector_add a) x)) o (\u. ((% (drop u)) ((vector_sub b) a))))) |- (((closure ((IMAGE ((\x. ((vector_add a) x)) o (\u. ((% (drop u)) ((vector_sub b) a))))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE ((\x. ((vector_add a) x)) o (\u. ((% (drop u)) ((vector_sub b) a))))) (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))) = ((closure ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))))
T c==> c= / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * * part co / cvector_add f0 b0 / c% cdrop b0 cvector_sub f1 f0 c= c= * part cclosure * * part cIMAGE * * part co / cvector_add f0 b0 / c% cdrop b0 cvector_sub f1 f0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE * * part co / cvector_add f0 b0 / c% cdrop b0 cvector_sub f1 f0 * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c= * part cclosure * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
+ |- ((p \/ (q \/ r)) = (q \/ (p \/ r)))
T c= c\/ f0 c\/ f1 f2 c\/ f1 c\/ f0 f2
+ |- (((!n. ((drop (vec n)) = (real_of_num n))) ==> ((\n. ((drop (vec n)) = (real_of_num n))) n)) = ((\n. ((drop (vec n)) = (real_of_num n))) n))
T c= c==> ! c= cdrop cvec b0 creal_of_num b0 * / c= cdrop cvec b0 creal_of_num b0 f0 * / c= cdrop cvec b0 creal_of_num b0 f0
+ |- (!x. (((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop x))) a)) ((% (drop x)) b)) = ((vector_add a) ((% (drop x)) ((vector_sub b) a)))))
T c= cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop f0 f1 c% cdrop f0 f2 cvector_add f1 c% cdrop f0 cvector_sub f2 f1
+ (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((!s. (((closure s) = s) = (closed s))) ==> F)
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
+ |- (((!x. (!y. (((drop x) = (drop y)) = (x = y)))) ==> ((\x. (!y. (((drop x) = (drop y)) = (x = y)))) x)) = ((\x. (!y. (((drop x) = (drop y)) = (x = y)))) x))
T c= c==> ! ! c= c= cdrop b0 cdrop b1 c= b0 b1 * / ! c= c= cdrop b0 cdrop b1 c= b0 b1 f0 * / ! c= c= cdrop b0 cdrop b1 c= b0 b1 f0
+ (!s. (((closure s) = s) = (closed s))), (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (compact EMPTY) |- ((((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL))) ==> F) = F)
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ccompact part cEMPTY c= c==> c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL cF cF
+ (b = a) |- (a = b)
T c==> c= f0 f1 c= f1 f0
+ |- ((a ==> b) = ((~ a) \/ b))
T c= c==> f0 f1 c\/ c~ f0 f1
+ |- ((((a = b) ==> ((closure (open_segment (a , b))) = EMPTY)) /\ ((~ (a = b)) ==> ((closure (open_segment (a , b))) = (closed_segment ((CONS (a , b)) NIL))))) = ((closure (open_segment (a , b))) = (((COND (a = b)) EMPTY) (closed_segment ((CONS (a , b)) NIL)))))
T c= c/\ c==> c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 part cEMPTY c==> c~ c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 * part cclosed_segment cCONS c, f0 f1 cNIL c= * part cclosure * part copen_segment c, f0 f1 * * * part cCOND c= f0 f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL
+ (~ (~ ((real_le (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))) |- ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))
T c==> c~ c~ creal_le creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((~ (_583675 = _583676)) \/ ((closed_segment _583675) = (closed_segment _583676)))
T c\/ c~ c= f0 f1 c= * part cclosed_segment f0 * part cclosed_segment f1
- ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))), (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) |- (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) /\ ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))))
T c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c/\ c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
+ |- (((!x. (!c. ((drop ((% c) x)) = ((real_mul c) (drop x))))) ==> ((\x. (!c. ((drop ((% c) x)) = ((real_mul c) (drop x))))) x)) = ((\x. (!c. ((drop ((% c) x)) = ((real_mul c) (drop x))))) x))
T c= c==> ! ! c= cdrop c% b1 b0 creal_mul b1 cdrop b0 * / ! c= cdrop c% b1 b0 creal_mul b1 cdrop b0 f0 * / ! c= cdrop c% b1 b0 creal_mul b1 cdrop b0 f0
- (~ (a = b)) |- (T = (~ (a = b)))
T c==> c~ c= f0 f1 c= cT c~ c= f0 f1
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) |- ((\s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))) s)
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 * / c==> c/\ clinear f0 ! ! c==> c= * f0 b1 * f0 b2 c= b1 b2 c= * part cclosure * * part cIMAGE f0 b0 * * part cIMAGE f0 * part cclosure b0 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) |- (((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))) /\ ((closed_segment ((CONS (a , b)) NIL)) = (closed_segment ((CONS (a , b)) NIL))))
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c/\ c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL
+ ((\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b))) = ((\x. ((vector_add a) x)) o (\u. ((% (drop u)) ((vector_sub b) a))))) |- (((closure ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE (\u. ((vector_add ((% ((real_sub (real_of_num (NUMERAL (BIT1 _0)))) (drop u))) a)) ((% (drop u)) b)))) (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))) = ((closure ((IMAGE ((\x. ((vector_add a) x)) o (\u. ((% (drop u)) ((vector_sub b) a))))) (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) = ((IMAGE ((\x. ((vector_add a) x)) o (\u. ((% (drop u)) ((vector_sub b) a))))) (closure (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))))
T c==> c= / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * * part co / cvector_add f0 b0 / c% cdrop b0 cvector_sub f1 f0 c= c= * part cclosure * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE / cvector_add c% creal_sub creal_of_num cNUMERAL cBIT1 c_0 cdrop b0 f0 c% cdrop b0 f1 * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c= * part cclosure * * part cIMAGE * * part co / cvector_add f0 b0 / c% cdrop b0 cvector_sub f1 f0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 * * part cIMAGE * * part co / cvector_add f0 b0 / c% cdrop b0 cvector_sub f1 f0 * part cclosure * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
+ |- ((\g. ((f = g) = (!x. ((f x) = (g x))))) g)
T * / c= c= f0 b0 ! c= * f0 b1 * b0 b1 f1
+ |- (((!x. (!y. (((% ((real_add (drop x)) (drop y))) ((vector_sub b) a)) = ((vector_add ((% (drop x)) ((vector_sub b) a))) ((% (drop y)) ((vector_sub b) a)))))) /\ (!c. (!x. (((% ((real_mul c) (drop x))) ((vector_sub b) a)) = ((% c) ((% (drop x)) ((vector_sub b) a))))))) = (linear (\u. ((% (drop u)) ((vector_sub b) a)))))
T c= c/\ ! ! c= c% creal_add cdrop b0 cdrop b1 cvector_sub f0 f1 cvector_add c% cdrop b0 cvector_sub f0 f1 c% cdrop b1 cvector_sub f0 f1 ! ! c= c% creal_mul b0 cdrop b1 cvector_sub f0 f1 c% b0 c% cdrop b1 cvector_sub f0 f1 clinear / c% cdrop b0 cvector_sub f0 f1
+ |- (((real_mul ((real_add (drop x)) (drop y))) ((real_sub (b $ i)) (a $ i))) = ((real_add ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))) ((real_mul (drop y)) ((real_sub (b $ i)) (a $ i)))))
T c= creal_mul creal_add cdrop f0 cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 creal_add creal_mul cdrop f0 creal_sub c$ f2 f3 c$ f4 f3 creal_mul cdrop f1 creal_sub c$ f2 f3 c$ f4 f3
+ |- (((!a. (!b. ((~ ((open_interval (a , b)) = EMPTY)) ==> ((closure (open_interval (a , b))) = (closed_interval ((CONS (a , b)) NIL)))))) ==> ((\a. (!b. ((~ ((open_interval (a , b)) = EMPTY)) ==> ((closure (open_interval (a , b))) = (closed_interval ((CONS (a , b)) NIL)))))) a)) = ((\a. (!b. ((~ ((open_interval (a , b)) = EMPTY)) ==> ((closure (open_interval (a , b))) = (closed_interval ((CONS (a , b)) NIL)))))) a))
T c= c==> ! ! c==> c~ c= * part copen_interval c, b0 b1 part cEMPTY c= * part cclosure * part copen_interval c, b0 b1 * part cclosed_interval cCONS c, b0 b1 cNIL * / ! c==> c~ c= * part copen_interval c, b0 b1 part cEMPTY c= * part cclosure * part copen_interval c, b0 b1 * part cclosed_interval cCONS c, b0 b1 cNIL f0 * / ! c==> c~ c= * part copen_interval c, b0 b1 part cEMPTY c= * part cclosure * part copen_interval c, b0 b1 * part cclosed_interval cCONS c, b0 b1 cNIL f0
+ |- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((((% ((real_add (drop x)) (drop y))) ((vector_sub b) a)) $ i) = (((vector_add ((% (drop x)) ((vector_sub b) a))) ((% (drop y)) ((vector_sub b) a))) $ i))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ c% creal_add cdrop f1 cdrop f2 cvector_sub f3 f4 f0 c$ cvector_add c% cdrop f1 cvector_sub f3 f4 c% cdrop f2 cvector_sub f3 f4 f0
- ((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) |- ((!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))
T c==> c/\ clinear f0 ! ! c==> c= * f0 b0 * f0 b1 c= b0 b1 c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 c= * part cclosure * * part cIMAGE f0 f1 * * part cIMAGE f0 * part cclosure f1
+ |- (((closure (open_segment (a , b))) = (((COND (a = b)) EMPTY) (closed_segment ((CONS (a , b)) NIL)))) = (((a = b) ==> ((closure (open_segment (a , b))) = EMPTY)) /\ ((~ (a = b)) ==> ((closure (open_segment (a , b))) = (closed_segment ((CONS (a , b)) NIL))))))
T c= c= * part cclosure * part copen_segment c, f0 f1 * * * part cCOND c= f0 f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL c/\ c==> c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 part cEMPTY c==> c~ c= f0 f1 c= * part cclosure * part copen_segment c, f0 f1 * part cclosed_segment cCONS c, f0 f1 cNIL
+ (~ (((real_mul ((real_mul c) (drop x))) ((real_sub (b $ i)) (a $ i))) = ((real_mul c) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))) |- ((~ (((real_mul ((real_mul c) (drop x))) ((real_sub (b $ i)) (a $ i))) = ((real_mul c) ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))))) /\ F)
T c==> c~ c= creal_mul creal_mul f0 cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 creal_mul f0 creal_mul cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 c/\ c~ c= creal_mul creal_mul f0 cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 creal_mul f0 creal_mul cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 cF
+ |- ((open_segment (a , a)) = EMPTY)
T c= * part copen_segment c, f0 f0 part cEMPTY
- |- ((~ (_583661 = _583663)) \/ ((~ (_583662 = _583664)) \/ ((_583661 INSERT _583662) = (_583663 INSERT _583664))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cINSERT f0 f2 * * part cINSERT f1 f3
+ |- ((!x. (!y. (((% ((real_add (drop x)) (drop y))) ((vector_sub b) a)) = ((vector_add ((% (drop x)) ((vector_sub b) a))) ((% (drop y)) ((vector_sub b) a)))))) /\ (!c. (!x. (((% ((real_mul c) (drop x))) ((vector_sub b) a)) = ((% c) ((% (drop x)) ((vector_sub b) a)))))))
T c/\ ! ! c= c% creal_add cdrop b0 cdrop b1 cvector_sub f0 f1 cvector_add c% cdrop b0 cvector_sub f0 f1 c% cdrop b1 cvector_sub f0 f1 ! ! c= c% creal_mul b0 cdrop b1 cvector_sub f0 f1 c% b0 c% cdrop b1 cvector_sub f0 f1
+ |- ((\n. ((drop (vec n)) = (real_of_num n))) n)
T * / c= cdrop cvec b0 creal_of_num b0 f0
+ |- (((real_gt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL _0))) ==> F)
T c==> creal_gt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0 cF
- (!s. (((closure s) = s) = (closed s))), (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) /\ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL))))
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c/\ c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL
+ |- ((p \/ q) = (q \/ p))
T c= c\/ f0 f1 c\/ f1 f0
+ |- (((!x. (((f o g) x) = (f (g x)))) ==> ((\x. (((f o g) x) = (f (g x)))) x)) = ((\x. (((f o g) x) = (f (g x)))) x))
T c= c==> ! c= co f0 f1 b0 * f0 * f1 b0 * / c= co f0 f1 b0 * f0 * f1 b0 f2 * / c= co f0 f1 b0 * f0 * f1 b0 f2
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((p \/ (p \/ q)) = (p \/ q))
T c= c\/ f0 c\/ f0 f1 c\/ f0 f1
- |- (((!a. ((closed_segment ((CONS (a , a)) NIL)) = (a INSERT EMPTY))) ==> ((\a. ((closed_segment ((CONS (a , a)) NIL)) = (a INSERT EMPTY))) a)) = ((\a. ((closed_segment ((CONS (a , a)) NIL)) = (a INSERT EMPTY))) a))
T c= c==> ! c= * part cclosed_segment cCONS c, b0 b0 cNIL * * part cINSERT b0 part cEMPTY * / c= * part cclosed_segment cCONS c, b0 b0 cNIL * * part cINSERT b0 part cEMPTY f0 * / c= * part cclosed_segment cCONS c, b0 b0 cNIL * * part cINSERT b0 part cEMPTY f0
- |- ((!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) ==> (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))))
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1
+ (~ (((real_mul ((real_add (drop x)) (drop y))) ((real_sub (b $ i)) (a $ i))) = ((real_add ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))) ((real_mul (drop y)) ((real_sub (b $ i)) (a $ i)))))) |- ((~ (((real_mul ((real_add (drop x)) (drop y))) ((real_sub (b $ i)) (a $ i))) = ((real_add ((real_mul (drop x)) ((real_sub (b $ i)) (a $ i)))) ((real_mul (drop y)) ((real_sub (b $ i)) (a $ i)))))) /\ F)
T c==> c~ c= creal_mul creal_add cdrop f0 cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 creal_add creal_mul cdrop f0 creal_sub c$ f2 f3 c$ f4 f3 creal_mul cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 c/\ c~ c= creal_mul creal_add cdrop f0 cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 creal_add creal_mul cdrop f0 creal_sub c$ f2 f3 c$ f4 f3 creal_mul cdrop f1 creal_sub c$ f2 f3 c$ f4 f3 cF
+ (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) |- ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) /\ F)
T c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c/\ c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL cF
+ (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> (~ (!s. (((closure s) = s) = (closed s)))))))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c~ ! c= c= * part cclosure b0 b0 cclosed b0
- (_583671 = _583673), (_583672 = _583674) |- ((_583671 = _583673) /\ (((CONS _583671) _583672) = ((CONS _583673) _583674)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f0 f1 c= cCONS f0 f2 cCONS f1 f3
- ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))), (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) |- ((((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) /\ ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))))
T c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c/\ c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
- (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (compact EMPTY) |- ((~ (compact (b INSERT EMPTY))) ==> (compact (b INSERT EMPTY)))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ccompact part cEMPTY c==> c~ ccompact * * part cINSERT f0 part cEMPTY ccompact * * part cINSERT f0 part cEMPTY
- |- ((!i. (((m <= i) /\ (i <= n)) ==> ((f i) = (g i)))) ==> (((sum (m .. n)) f) = ((sum (m .. n)) g)))
T c==> ! c==> c/\ c<= f0 b0 c<= b0 f1 c= * f2 b0 * f3 b0 c= csum * * part c.. f0 f1 f2 csum * * part c.. f0 f1 f3
- |- ((_583665 = _583666) ==> ((closure _583665) = (closure _583666)))
T c==> c= f0 f1 c= * part cclosure f0 * part cclosure f1
- |- (T = (((~ (compact _583650)) \/ (closed _583650)) = ((closed _583650) \/ (~ (compact _583650)))))
T c= cT c= c\/ c~ ccompact f0 cclosed f0 c\/ cclosed f0 c~ ccompact f0
- (!s. (((closure s) = s) = (closed s))), (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))), (compact EMPTY) |- ((~ F) ==> F)
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> c~ cF cF
- (_583672 = _583674) |- ((_583672 = _583674) /\ ((~ (_583671 = _583673)) \/ (((CONS _583671) _583672) = ((CONS _583673) _583674))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= cCONS f2 f0 cCONS f3 f1
- |- ((_583655 = _583656) ==> ((compact _583656) \/ (~ (compact _583655))))
T c==> c= f0 f1 c\/ ccompact f1 c~ ccompact f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (_583661 = _583663) |- ((_583662 = _583664) ==> ((_583661 INSERT _583662) = (_583663 INSERT _583664)))
T c==> c= f0 f1 c==> c= f2 f3 c= * * part cINSERT f0 f2 * * part cINSERT f1 f3
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) |- ((!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))) = T)
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 c= ! c==> c/\ clinear f0 ! ! c==> c= * f0 b1 * f0 b2 c= b1 b2 c= * part cclosure * * part cIMAGE f0 b0 * * part cIMAGE f0 * part cclosure b0 cT
- |- ((!s. (P \/ (Q s))) = (P \/ (!s. (Q s))))
T c= ! c\/ f0 * f1 b0 c\/ f0 ! * f1 b0
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- |- ((~ (_583672 = _583674)) \/ ((~ (_583671 = _583673)) \/ (((CONS _583671) _583672) = ((CONS _583673) _583674))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= cCONS f2 f0 cCONS f3 f1
- |- (((closed_interval ((CONS (a , b)) NIL)) = EMPTY) = ((real_lt (drop b)) (drop a)))
T c= c= * part cclosed_interval cCONS c, f0 f1 cNIL part cEMPTY creal_lt cdrop f1 cdrop f0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (compact EMPTY) |- ((~ (compact ((hull convex) (a INSERT (b INSERT EMPTY))))) ==> (compact ((hull convex) (a INSERT (b INSERT EMPTY)))))
T c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ccompact part cEMPTY c==> c~ ccompact * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY ccompact * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))))
T c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
- (a = b) |- (((closure (open_segment (a , b))) = EMPTY) = ((closure (open_segment (a , b))) = EMPTY))
T c==> c= f0 f1 c= c= * part cclosure * part copen_segment c, f0 f1 part cEMPTY c= * part cclosure * part copen_segment c, f0 f1 part cEMPTY
- (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) |- ((~ (((hull convex) (a INSERT (b INSERT EMPTY))) = (closed_segment ((CONS (a , b)) NIL)))) ==> (((hull convex) (a INSERT (b INSERT EMPTY))) = (closed_segment ((CONS (a , b)) NIL))))
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL c= * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL
- (_583655 = _583656) |- ((((compact _583655) = (compact _583656)) ==> ((compact _583656) \/ (~ (compact _583655)))) = ((compact _583656) \/ (~ (compact _583655))))
T c==> c= f0 f1 c= c==> c= ccompact f0 ccompact f1 c\/ ccompact f1 c~ ccompact f0 c\/ ccompact f1 c~ ccompact f0
- |- ((((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) ==> (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))))
T c==> c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
- (_583667 = _583669) |- ((_583667 = _583669) /\ ((~ (_583668 = _583670)) \/ ((_583667 , _583668) = (_583669 , _583670))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= c, f0 f2 c, f1 f3
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!s'. ((~ (compact s')) \/ (compact (a INSERT s)))) = ((!s. (~ (compact s))) \/ (compact (a INSERT s))))
T c= ! c\/ c~ ccompact b0 ccompact * * part cINSERT f0 f1 c\/ ! c~ ccompact b0 ccompact * * part cINSERT f0 f1
- (compact EMPTY) |- ((~ (compact EMPTY)) ==> (compact EMPTY))
T c==> ccompact part cEMPTY c==> c~ ccompact part cEMPTY ccompact part cEMPTY
- (!s. (((closure s) = s) = (closed s))) |- ((~ ((closure _583652) = _583652)) \/ (closed _583652))
T c==> ! c= c= * part cclosure b0 b0 cclosed b0 c\/ c~ c= * part cclosure f0 f0 cclosed f0
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))), ((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) |- (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) /\ ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 c==> c/\ clinear f0 ! ! c==> c= * f0 b0 * f0 b1 c= b0 b1 c/\ c/\ clinear f0 ! ! c==> c= * f0 b0 * f0 b1 c= b0 b1 c= * part cclosure * * part cIMAGE f0 f1 * * part cIMAGE f0 * part cclosure f1
- (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (~ (compact ((hull convex) (a INSERT (b INSERT EMPTY))))), (compact EMPTY) |- ((~ (compact ((hull convex) (a INSERT (b INSERT EMPTY))))) /\ (compact ((hull convex) (a INSERT (b INSERT EMPTY)))))
T c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> c~ ccompact * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> ccompact part cEMPTY c/\ c~ ccompact * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY ccompact * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) |- (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) /\ ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))))
T c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c/\ c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
- (!s. ((compact s) ==> (closed s))), (!s. ((compact s) ==> (compact ((hull convex) s)))), (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (compact EMPTY) |- ((~ (closed ((hull convex) (a INSERT (b INSERT EMPTY))))) ==> (closed ((hull convex) (a INSERT (b INSERT EMPTY)))))
T c==> ! c==> ccompact b0 cclosed b0 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ccompact part cEMPTY c==> c~ cclosed * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cclosed * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- ((!s'. ((~ (compact s')) \/ (closed s))) = ((!s. (~ (compact s))) \/ (closed s)))
T c= ! c\/ c~ ccompact b0 cclosed f0 c\/ ! c~ ccompact b0 cclosed f0
- (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) |- ((~ ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY))))) ==> ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- ((\a. ((closed_segment ((CONS (a , a)) NIL)) = (a INSERT EMPTY))) a)
T * / c= * part cclosed_segment cCONS c, b0 b0 cNIL * * part cINSERT b0 part cEMPTY f0
- (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (~ (compact (b INSERT EMPTY))), (compact EMPTY) |- ((~ (compact (b INSERT EMPTY))) /\ (compact (b INSERT EMPTY)))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> c~ ccompact * * part cINSERT f0 part cEMPTY c==> ccompact part cEMPTY c/\ c~ ccompact * * part cINSERT f0 part cEMPTY ccompact * * part cINSERT f0 part cEMPTY
- |- ((!i. (((m <= i) /\ (i <= n)) ==> ((f i) = (real_of_num (NUMERAL _0))))) ==> (((sum (m .. n)) f) = (real_of_num (NUMERAL _0))))
T c==> ! c==> c/\ c<= f0 b0 c<= b0 f1 c= * f2 b0 creal_of_num cNUMERAL c_0 c= csum * * part c.. f0 f1 f2 creal_of_num cNUMERAL c_0
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))) ==> (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))))) = (((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F))))))) ==> ((~ ((closure (closed_segment ((CONS (a , b)) NIL))) = (closed_segment ((CONS (a , b)) NIL)))) ==> ((compact EMPTY) ==> ((!a. (!s. ((compact s) ==> (compact (a INSERT s))))) ==> ((!s. ((compact s) ==> (compact ((hull convex) s)))) ==> ((!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) ==> ((!s. ((compact s) ==> (closed s))) ==> ((!s. (((closure s) = s) = (closed s))) ==> F)))))))))
T c= c==> c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF c==> c~ c= * part cclosure * part cclosed_segment cCONS c, f0 f1 cNIL * part cclosed_segment cCONS c, f0 f1 cNIL c==> ccompact part cEMPTY c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ! c==> ccompact b0 ccompact * * part chull part cconvex b0 c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> ! c==> ccompact b0 cclosed b0 c==> ! c= c= * part cclosure b0 b0 cclosed b0 cF
- |- ((!s. (P s)) = ((P T) /\ (P F)))
T c= ! * f0 b0 c/\ * f0 cT * f0 cF
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- (_583658 = _583660) |- ((_583658 = _583660) /\ ((~ (_583657 = _583659)) \/ (((hull _583657) _583658) = ((hull _583659) _583660))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= * * part chull f2 f0 * * part chull f3 f1
- (_583661 = _583663) |- ((_583661 = _583663) /\ ((~ (_583662 = _583664)) \/ ((_583661 INSERT _583662) = (_583663 INSERT _583664))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cINSERT f0 f2 * * part cINSERT f1 f3
- (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ (((hull convex) (a INSERT (b INSERT EMPTY))) = (closed_segment ((CONS (a , b)) NIL)))) |- ((~ (((hull convex) (a INSERT (b INSERT EMPTY))) = (closed_segment ((CONS (a , b)) NIL)))) /\ (((hull convex) (a INSERT (b INSERT EMPTY))) = (closed_segment ((CONS (a , b)) NIL))))
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL c/\ c~ c= * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL c= * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY * part cclosed_segment cCONS c, f0 f1 cNIL
- (_583655 = _583656) |- ((_583655 = _583656) /\ ((compact _583656) \/ (~ (compact _583655))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ ccompact f1 c~ ccompact f0
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))), (~ ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY))))) |- ((~ ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY))))) /\ ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))
T c==> ! ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c==> c~ c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c/\ c~ c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- (((!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) ==> (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s))))))) = (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))))
T c= c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1
- |- (T = (((~ (compact _583646)) \/ (compact (_583645 INSERT _583646))) = ((compact (_583645 INSERT _583646)) \/ (~ (compact _583646)))))
T c= cT c= c\/ c~ ccompact f0 ccompact * * part cINSERT f1 f0 c\/ ccompact * * part cINSERT f1 f0 c~ ccompact f0
- (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (~ (compact (a INSERT (b INSERT EMPTY)))), (compact EMPTY) |- ((~ (compact (a INSERT (b INSERT EMPTY)))) /\ (compact (a INSERT (b INSERT EMPTY))))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> c~ ccompact * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> ccompact part cEMPTY c/\ c~ ccompact * * part cINSERT f0 * * part cINSERT f1 part cEMPTY ccompact * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- ((!s'. ((~ (compact s')) \/ (compact ((hull convex) s)))) = ((!s. (~ (compact s))) \/ (compact ((hull convex) s))))
T c= ! c\/ c~ ccompact b0 ccompact * * part chull part cconvex f0 c\/ ! c~ ccompact b0 ccompact * * part chull part cconvex f0
- |- (((\i. (f i)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((!s'. ((~ (compact s)) \/ (compact ((hull convex) s')))) = ((~ (compact s)) \/ (!s. (compact ((hull convex) s)))))
T c= ! c\/ c~ ccompact f0 ccompact * * part chull part cconvex b0 c\/ c~ ccompact f0 ! ccompact * * part chull part cconvex b0
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- (a = b) |- (T = ((closure (open_segment (a , b))) = EMPTY))
T c==> c= f0 f1 c= cT c= * part cclosure * part copen_segment c, f0 f1 part cEMPTY
- |- (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) |- ((!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) /\ (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))))
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 c/\ ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1
- (_583667 = _583669) |- ((_583668 = _583670) ==> ((_583667 , _583668) = (_583669 , _583670)))
T c==> c= f0 f1 c==> c= f2 f3 c= c, f0 f2 c, f1 f3
- (!a. (!s. ((compact s) ==> (compact (a INSERT s))))), (compact EMPTY) |- ((~ (compact (a INSERT (b INSERT EMPTY)))) ==> (compact (a INSERT (b INSERT EMPTY))))
T c==> ! ! c==> ccompact b1 ccompact * * part cINSERT b0 b1 c==> ccompact part cEMPTY c==> c~ ccompact * * part cINSERT f0 * * part cINSERT f1 part cEMPTY ccompact * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((~ (_583655 = _583656)) \/ ((compact _583656) \/ (~ (compact _583655))))
T c\/ c~ c= f0 f1 c\/ ccompact f1 c~ ccompact f0
- |- (T = (((~ (_583653 = _583654)) \/ ((closed _583654) \/ (~ (closed _583653)))) = ((closed _583654) \/ ((~ (_583653 = _583654)) \/ (~ (closed _583653))))))
T c= cT c= c\/ c~ c= f0 f1 c\/ cclosed f1 c~ cclosed f0 c\/ cclosed f1 c\/ c~ c= f0 f1 c~ cclosed f0
- |- ((_583675 = _583676) ==> ((closed_segment _583675) = (closed_segment _583676)))
T c==> c= f0 f1 c= * part cclosed_segment f0 * part cclosed_segment f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) |- ((\f. (!s. (((linear f) /\ (!x. (!y. (((f x) = (f y)) ==> (x = y))))) ==> ((closure ((IMAGE f) s)) = ((IMAGE f) (closure s)))))) f)
T c==> ! ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 * / ! c==> c/\ clinear b0 ! ! c==> c= * b0 b2 * b0 b3 c= b2 b3 c= * part cclosure * * part cIMAGE b0 b1 * * part cIMAGE b0 * part cclosure b1 f0
