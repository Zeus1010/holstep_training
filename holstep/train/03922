N HOMOTOPIC_LOOPS
C |- (!s. (!p. (!q. ((((homotopic_loops s) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((pathfinish (h o (pastecart t))) = (pathstart (h o (pastecart t)))))))))))))))
T c= chomotopic_loops f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cpathfinish * * part co b0 * part cpastecart b1 cpathstart * * part co b0 * part cpastecart b1
D TRUTH
A |- T
T cT
D o_DEF
A |- (!f. (!g. ((f o g) = (\x. (f (g x))))))
T c= * * part co f0 f1 / * f0 * f1 b0
D ENDS_IN_UNIT_INTERVAL
A |- (((vec (NUMERAL _0)) IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((vec (NUMERAL (BIT1 _0))) IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((~ ((vec (NUMERAL _0)) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) /\ (~ ((vec (NUMERAL (BIT1 _0))) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))))))
T c/\ cIN cvec cNUMERAL c_0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN cvec cNUMERAL cBIT1 c_0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ c~ cIN cvec cNUMERAL c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c~ cIN cvec cNUMERAL cBIT1 c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
D pathstart
A |- (!g. ((pathstart g) = (g (vec (NUMERAL _0)))))
T c= cpathstart f0 * f0 cvec cNUMERAL c_0
D pathfinish
A |- (!g. ((pathfinish g) = (g (vec (NUMERAL (BIT1 _0))))))
T c= cpathfinish f0 * f0 cvec cNUMERAL cBIT1 c_0
D HOMOTOPIC_WITH
A |- ((!h. (!k. ((!x. ((x IN X) ==> ((h x) = (k x)))) ==> ((P h) = (P k))))) ==> (((((homotopic_with P) (X , Y)) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS X)) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS X)) SUBSET Y) /\ ((!x. ((x IN X) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN X) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> (P (\x. (h ((pastecart t) x)))))))))))))
T c==> ! ! c==> ! c==> cIN b2 f0 c= * b0 b2 * b1 b2 c= * f1 b0 * f1 b1 c= chomotopic_with f1 c, f0 f2 f3 f4 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f2 c/\ ! c==> cIN b1 f0 c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f3 b1 c/\ ! c==> cIN b1 f0 c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f4 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * f1 / * b0 cpastecart b1 b2
D homotopic_loops
A |- (!s. (!p. (!q. ((((homotopic_loops s) p) q) = ((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q)))))
T c= chomotopic_loops f0 f1 f2 chomotopic_with / c= cpathfinish b0 cpathstart b0 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 f2
+ |- (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k))) = ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> T))
T c= c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c= * / c= cpathfinish b0 cpathstart b0 f0 * / c= cpathfinish b0 cpathstart b0 f1 c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 cT
+ |- (((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((pathfinish (h o (pastecart t))) = (pathstart (h o (pastecart t))))))))))))
T c= chomotopic_with / c= cpathfinish b0 cpathstart b0 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cpathfinish * * part co b0 * part cpastecart b1 cpathstart * * part co b0 * part cpastecart b1
+ |- (((vec (NUMERAL (BIT1 _0))) IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((~ ((vec (NUMERAL _0)) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) /\ (~ ((vec (NUMERAL (BIT1 _0))) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))))
T c/\ cIN cvec cNUMERAL cBIT1 c_0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ c~ cIN cvec cNUMERAL c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c~ cIN cvec cNUMERAL cBIT1 c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
- |- ((~ ((vec (NUMERAL _0)) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) /\ (~ ((vec (NUMERAL (BIT1 _0))) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))))
T c/\ c~ cIN cvec cNUMERAL c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c~ cIN cvec cNUMERAL cBIT1 c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
+ |- (((!p'. (!q'. (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) = p') ==> ((p' ==> ((((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k)) = q')) ==> (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) = p') ==> ((p' ==> ((((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k)) = q')) ==> (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) = p') ==> ((p' ==> ((((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k)) = q')) ==> (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b2 * f1 b2 b0 c==> c==> b0 c= c= * / c= cpathfinish b2 cpathstart b2 f0 * / c= cpathfinish b2 cpathstart b2 f1 b1 c= c==> ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b2 * f1 b2 c= * / c= cpathfinish b2 cpathstart b2 f0 * / c= cpathfinish b2 cpathstart b2 f1 c==> b0 b1 * / ! c==> c= ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b2 * f1 b2 b0 c==> c==> b0 c= c= * / c= cpathfinish b2 cpathstart b2 f0 * / c= cpathfinish b2 cpathstart b2 f1 b1 c= c==> ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b2 * f1 b2 c= * / c= cpathfinish b2 cpathstart b2 f0 * / c= cpathfinish b2 cpathstart b2 f1 c==> b0 b1 f2 * / ! c==> c= ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b2 * f1 b2 b0 c==> c==> b0 c= c= * / c= cpathfinish b2 cpathstart b2 f0 * / c= cpathfinish b2 cpathstart b2 f1 b1 c= c==> ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b2 * f1 b2 c= * / c= cpathfinish b2 cpathstart b2 f0 * / c= cpathfinish b2 cpathstart b2 f1 c==> b0 b1 f2
+ |- ((((!h. (!k. ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k))))) ==> (((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((\r. ((pathfinish r) = (pathstart r))) (\x. (h ((pastecart t) x))))))))))))) ==> (((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((pathfinish (h o (pastecart t))) = (pathstart (h o (pastecart t))))))))))))) = (((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((pathfinish (h o (pastecart t))) = (pathstart (h o (pastecart t)))))))))))))
T c= c==> c==> ! ! c==> ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 b2 * b1 b2 c= * / c= cpathfinish b2 cpathstart b2 b0 * / c= cpathfinish b2 cpathstart b2 b1 c= chomotopic_with / c= cpathfinish b0 cpathstart b0 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * / c= cpathfinish b2 cpathstart b2 / * b0 cpastecart b1 b2 c= chomotopic_with / c= cpathfinish b0 cpathstart b0 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cpathfinish * * part co b0 * part cpastecart b1 cpathstart * * part co b0 * part cpastecart b1 c= chomotopic_with / c= cpathfinish b0 cpathstart b0 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cpathfinish * * part co b0 * part cpastecart b1 cpathstart * * part co b0 * part cpastecart b1
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
+ |- (T = ((vec (NUMERAL _0)) IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))))
T c= cT cIN cvec cNUMERAL c_0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL
+ |- (!h. (!k. ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k)))))
T c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c= * / c= cpathfinish b0 cpathstart b0 f0 * / c= cpathfinish b0 cpathstart b0 f1
+ (((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((\r. ((pathfinish r) = (pathstart r))) (\x. (h ((pastecart t) x)))))))))))) |- ((((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((\r. ((pathfinish r) = (pathstart r))) (\x. (h ((pastecart t) x)))))))))))) /\ (((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((pathfinish (h o (pastecart t))) = (pathstart (h o (pastecart t)))))))))))))
T c==> c= chomotopic_with / c= cpathfinish b0 cpathstart b0 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * / c= cpathfinish b2 cpathstart b2 / * b0 cpastecart b1 b2 c/\ c= chomotopic_with / c= cpathfinish b0 cpathstart b0 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * / c= cpathfinish b2 cpathstart b2 / * b0 cpastecart b1 b2 c= chomotopic_with / c= cpathfinish b0 cpathstart b0 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cpathfinish * * part co b0 * part cpastecart b1 cpathstart * * part co b0 * part cpastecart b1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- |- (~ ((vec (NUMERAL (BIT1 _0))) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))
T c~ cIN cvec cNUMERAL cBIT1 c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
- |- (~ ((vec (NUMERAL _0)) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))))
T c~ cIN cvec cNUMERAL c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0
- |- (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> q')))
T c==> c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= c= * f1 f0 * f2 f0 f3 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f3
+ |- (T = (!h. (!k. ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k))))))
T c= cT ! ! c==> ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 b2 * b1 b2 c= * / c= cpathfinish b2 cpathstart b2 b0 * / c= cpathfinish b2 cpathstart b2 b1
+ (!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) |- ((\x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) x)
T c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 * / c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 f2
- (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = T)
T c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL cT
- |- ((?h. t) = t)
T c= c? / f0 f0
- (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ (((h x) = (k x)) = ((h x) = (k x))))
T c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= c= * f1 f0 * f2 f0 c= * f1 f0 * f2 f0
- |- ((\p'. (!q'. (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = p') ==> ((p' ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = (p' ==> q')))))) p')
T * / ! c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c==> c==> b0 c= c= * f1 f0 * f2 f0 b1 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> b0 b1 f3
+ |- ((!q. ((((homotopic_loops s) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((pathfinish (h o (pastecart t))) = (pathstart (h o (pastecart t))))))))))))) = T)
T c= ! c= chomotopic_loops f0 f1 b0 c? / c/\ ccontinuous_on b1 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b1 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b1 cpastecart cvec cNUMERAL c_0 b2 * f1 b2 c/\ ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b1 cpastecart cvec cNUMERAL cBIT1 c_0 b2 * b0 b2 ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cpathfinish * * part co b1 * part cpastecart b2 cpathstart * * part co b1 * part cpastecart b2 cT
- |- (((!q'. (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = p') ==> ((p' ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = (p' ==> q'))))) ==> ((\q'. (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = p') ==> ((p' ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = (p' ==> q'))))) q')) = ((\q'. (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = p') ==> ((p' ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f1 c==> c==> f1 c= c= * f2 f0 * f3 f0 b0 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f2 f0 * f3 f0 c==> f1 b0 * / c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f1 c==> c==> f1 c= c= * f2 f0 * f3 f0 b0 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f2 f0 * f3 f0 c==> f1 b0 f4 * / c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f1 c==> c==> f1 c= c= * f2 f0 * f3 f0 b0 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f2 f0 * f3 f0 c==> f1 b0 f4
- |- (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = p') ==> ((p' ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = (p' ==> q'))))
T c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f1 c==> c==> f1 c= c= * f2 f0 * f3 f0 f4 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f2 f0 * f3 f0 c==> f1 f4
- |- ((((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> q')))) = (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> q'))))
T c= c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c==> c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= c= * f1 f0 * f2 f0 f3 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f3 c==> c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= c= * f1 f0 * f2 f0 f3 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f3
+ (!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) |- ((h (vec (NUMERAL _0))) = (k (vec (NUMERAL _0))))
T c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c= * f0 cvec cNUMERAL c_0 * f1 cvec cNUMERAL c_0
- |- (((vec (NUMERAL (BIT1 _0))) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))) = F)
T c= cIN cvec cNUMERAL cBIT1 c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cF
+ |- ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)
T * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
+ |- ((\p'. (!q'. (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) = p') ==> ((p' ==> ((((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k)) = q')) ==> (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k))) = (p' ==> q')))))) p')
T * / ! c==> c= ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b2 * f1 b2 b0 c==> c==> b0 c= c= * / c= cpathfinish b2 cpathstart b2 f0 * / c= cpathfinish b2 cpathstart b2 f1 b1 c= c==> ! c==> cIN b2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b2 * f1 b2 c= * / c= cpathfinish b2 cpathstart b2 f0 * / c= cpathfinish b2 cpathstart b2 f1 c==> b0 b1 f2
- |- (((!p'. (!q'. (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = p') ==> ((p' ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = p') ==> ((p' ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = p') ==> ((p' ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c==> c==> b0 c= c= * f1 f0 * f2 f0 b1 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> b0 b1 * / ! c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c==> c==> b0 c= c= * f1 f0 * f2 f0 b1 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> b0 b1 f3 * / ! c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL b0 c==> c==> b0 c= c= * f1 f0 * f2 f0 b1 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> b0 b1 f3
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
+ |- (((!q. ((((homotopic_loops s) p) q) = ((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q))) ==> ((\q. ((((homotopic_loops s) p) q) = ((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q))) q)) = ((\q. ((((homotopic_loops s) p) q) = ((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q))) q))
T c= c==> ! c= chomotopic_loops f0 f1 b0 chomotopic_with / c= cpathfinish b1 cpathstart b1 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 b0 * / c= chomotopic_loops f0 f1 b0 chomotopic_with / c= cpathfinish b1 cpathstart b1 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 b0 f2 * / c= chomotopic_loops f0 f1 b0 chomotopic_with / c= cpathfinish b1 cpathstart b1 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 b0 f2
+ |- ((((vec (NUMERAL (BIT1 _0))) IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h (vec (NUMERAL (BIT1 _0)))) = (k (vec (NUMERAL (BIT1 _0)))))) = ((h (vec (NUMERAL (BIT1 _0)))) = (k (vec (NUMERAL (BIT1 _0))))))
T c= c==> cIN cvec cNUMERAL cBIT1 c_0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 cvec cNUMERAL cBIT1 c_0 * f1 cvec cNUMERAL cBIT1 c_0 c= * f0 cvec cNUMERAL cBIT1 c_0 * f1 cvec cNUMERAL cBIT1 c_0
- (!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))), (x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) |- ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) /\ ((h x) = (k x)))
T c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c==> cIN f2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cIN f2 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 f2 * f1 f2
- |- (((~ ((vec (NUMERAL (BIT1 _0))) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) ==> (((vec (NUMERAL (BIT1 _0))) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))) = F)) = (((vec (NUMERAL (BIT1 _0))) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))) = F))
T c= c==> c~ cIN cvec cNUMERAL cBIT1 c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c= cIN cvec cNUMERAL cBIT1 c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cF c= cIN cvec cNUMERAL cBIT1 c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cF
+ (!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) |- ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) /\ ((((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k)) = T))
T c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c/\ ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c= c= * / c= cpathfinish b0 cpathstart b0 f0 * / c= cpathfinish b0 cpathstart b0 f1 cT
+ |- ((((((homotopic_with (\r. ((pathfinish r) = (pathstart r)))) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) , s)) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((pathfinish (h o (pastecart t))) = (pathstart (h o (pastecart t)))))))))))) = ((((homotopic_loops s) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((pathfinish (h o (pastecart t))) = (pathstart (h o (pastecart t)))))))))))))
T c= c= chomotopic_with / c= cpathfinish b0 cpathstart b0 c, * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cpathfinish * * part co b0 * part cpastecart b1 cpathstart * * part co b0 * part cpastecart b1 c= chomotopic_loops f0 f1 f2 c? / c/\ ccontinuous_on b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b0 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL c_0 b1 * f1 b1 c/\ ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b0 cpastecart cvec cNUMERAL cBIT1 c_0 b1 * f2 b1 ! c==> cIN b1 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cpathfinish * * part co b0 * part cpastecart b1 cpathstart * * part co b0 * part cpastecart b1
+ |- ((((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) = (!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))))) ==> (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> ((((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k)) = q')) ==> (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k))) = ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> q')))) = (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> ((((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k)) = q')) ==> (((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> (((\r. ((pathfinish r) = (pathstart r))) h) = ((\r. ((pathfinish r) = (pathstart r))) k))) = ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))) ==> q'))))
T c= c==> c= ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c==> c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c= c= * / c= cpathfinish b0 cpathstart b0 f0 * / c= cpathfinish b0 cpathstart b0 f1 f2 c= c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c= * / c= cpathfinish b0 cpathstart b0 f0 * / c= cpathfinish b0 cpathstart b0 f1 c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 f2 c==> c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c= c= * / c= cpathfinish b0 cpathstart b0 f0 * / c= cpathfinish b0 cpathstart b0 f1 f2 c= c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 c= * / c= cpathfinish b0 cpathstart b0 f0 * / c= cpathfinish b0 cpathstart b0 f1 c==> ! c==> cIN b0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f0 b0 * f1 b0 f2
+ |- ((x = x) = T)
T c= c= f0 f0 cT
+ |- ((!p. (!q. ((((homotopic_loops s) p) q) = (?h. (((continuous_on h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) /\ ((((IMAGE h) ((closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)) PCROSS (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL)))) SUBSET s) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL _0))) x)) = (p x)))) /\ ((!x. ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h ((pastecart (vec (NUMERAL (BIT1 _0)))) x)) = (q x)))) /\ (!t. ((t IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((pathfinish (h o (pastecart t))) = (pathstart (h o (pastecart t)))))))))))))) = T)
T c= ! ! c= chomotopic_loops f0 b0 b1 c? / c/\ ccontinuous_on b2 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c/\ cSUBSET * * part cIMAGE b2 * * part cPCROSS * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f0 c/\ ! c==> cIN b3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b2 cpastecart cvec cNUMERAL c_0 b3 * b0 b3 c/\ ! c==> cIN b3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * b2 cpastecart cvec cNUMERAL cBIT1 c_0 b3 * b1 b3 ! c==> cIN b3 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= cpathfinish * * part co b2 * part cpastecart b3 cpathstart * * part co b2 * part cpastecart b3 cT
- |- (((~ ((vec (NUMERAL _0)) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))))) ==> (((vec (NUMERAL _0)) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))) = F)) = (((vec (NUMERAL _0)) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))) = F))
T c= c==> c~ cIN cvec cNUMERAL c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 c= cIN cvec cNUMERAL c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cF c= cIN cvec cNUMERAL c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cF
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((\q'. (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) = p') ==> ((p' ==> (((h x) = (k x)) = q')) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = (p' ==> q'))))) q')
T * / c==> c= cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL f1 c==> c==> f1 c= c= * f2 f0 * f3 f0 b0 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f2 f0 * f3 f0 c==> f1 b0 f4
- |- ((((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> (((h x) = (k x)) = ((h x) = (k x)))) ==> (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))))) = (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x)))))
T c= c==> c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= c= * f1 f0 * f2 f0 c= * f1 f0 * f2 f0 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0
- |- (((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))) = ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> ((h x) = (k x))))
T c= c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0 c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= * f1 f0 * f2 f0
- |- (((vec (NUMERAL _0)) IN (open_interval ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0)))))) = F)
T c= cIN cvec cNUMERAL c_0 * part copen_interval c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cF
- |- (((\r. (f r)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((x IN (closed_interval ((CONS ((vec (NUMERAL _0)) , (vec (NUMERAL (BIT1 _0))))) NIL))) ==> (((h x) = (k x)) = ((h x) = (k x))))
T c==> cIN f0 * part cclosed_interval cCONS c, cvec cNUMERAL c_0 cvec cNUMERAL cBIT1 c_0 cNIL c= c= * f1 f0 * f2 f0 c= * f1 f0 * f2 f0
