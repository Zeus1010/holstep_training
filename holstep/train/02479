N Hojodcm.ytrans_mem_rtrans_v0
C |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
D TRUTH
A |- T
T cT
D I_DEF
A |- (I = (\x. x))
T c= part cI / b0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D Tame_list.POWER_TO_ITER
A |- (!n. (((POWER f) n) = ((ITER n) f)))
T c= * * part cPOWER f0 f1 * * part cITER f1 f0
D Tame_defs2.normal_list
A |- (!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))))))
T c= cnormal_list f0 f1 c/\ cuniq cflatten f1 c/\ call / c~ c= b0 cNIL f1 c/\ call * part cf_last f0 f1 c/\ call * part cloop_list f0 f1 ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1
D Tame_defs2.rtrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= crtrans f0 f1 f2 f3 f4 cSND cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.ytrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x)))))))
T c= cytrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.marked_list
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))))))
T c= cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3
D Tame_list.uniq_flatten_uniq
A |- (!L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s))))
T c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1
D Pwssrat.MEM_POWER_NEXT_EL
A |- (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r)))
T c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 f2 f0 f1
D Pwssrat.l_y_rep_power
A |- ((((f_list L) x) = ((next_el r) x)) ==> ((((l'y L) r) x) = (((ITER (SUC (((l'm L) r) x))) (next_el r)) x)))
T c==> c= cf_list f0 f1 cnext_el f2 f1 c= cl'y f0 f2 f1 cITER cSUC cl'm f0 f2 f1 * part cnext_el f2 f1
D Hojodcm.f_eq_next_el_x_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x)))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 c= cf_list f0 f3 cnext_el crotate_to f2 f3 f3
- |- ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)
T * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
- |- (((!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) ==> ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i)) = ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i))
T c= c==> ! c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))) ==> ((MEM (((l'y L) r) x)) r))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f3 f1 f2 c= cf_list f0 f2 cnext_el crotate_to f1 f2 f2 cMEM cl'y f0 f1 f2 f1
+ (((f_list L) x) = ((next_el ((rotate_to r) x)) x)), ((MEM x) r), ((MEM r) N), ((normal_list L) N) |- ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) /\ (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r))))
T c==> c= cf_list f0 f1 cnext_el crotate_to f2 f1 f1 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c/\ c= cf_list f0 f1 cnext_el crotate_to f2 f1 f1 c==> c= cl'y f0 f2 f1 cPOWER * part cnext_el f2 cSUC cl'm f0 f2 f1 f1 c/\ cMEM f1 f2 cuniq f2
+ |- (((!L. (!r. (!x. ((((f_list L) x) = ((next_el r) x)) ==> ((((l'y L) r) x) = (((ITER (SUC (((l'm L) r) x))) (next_el r)) x)))))) ==> ((\L. (!r. (!x. ((((f_list L) x) = ((next_el r) x)) ==> ((((l'y L) r) x) = (((ITER (SUC (((l'm L) r) x))) (next_el r)) x)))))) L)) = ((\L. (!r. (!x. ((((f_list L) x) = ((next_el r) x)) ==> ((((l'y L) r) x) = (((ITER (SUC (((l'm L) r) x))) (next_el r)) x)))))) L))
T c= c==> ! ! ! c==> c= cf_list b0 b2 cnext_el b1 b2 c= cl'y b0 b1 b2 cITER cSUC cl'm b0 b1 b2 * part cnext_el b1 b2 * / ! ! c==> c= cf_list b0 b2 cnext_el b1 b2 c= cl'y b0 b1 b2 cITER cSUC cl'm b0 b1 b2 * part cnext_el b1 b2 f0 * / ! ! c==> c= cf_list b0 b2 cnext_el b1 b2 c= cl'y b0 b1 b2 cITER cSUC cl'm b0 b1 b2 * part cnext_el b1 b2 f0
+ (~ ((final_list L) r)) |- ((((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)) = (((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))
T c==> c~ cfinal_list f0 f1 c= c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f2 c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 cMEM cytrans f0 f2 f1 f3 cNUMERAL c_0 f1 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f2 c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c/\ c==> cfinal_list f0 f1 cflag_list f0 f2 c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 cMEM cytrans f0 f2 f1 f3 cNUMERAL c_0 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))))))) |- ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))))))) L)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 cmarked_list b0 b1 b2 b3 c= cf_list b0 b3 cnext_el crotate_to b2 b3 b3 * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 cmarked_list b0 b1 b2 b3 c= cf_list b0 b3 cnext_el crotate_to b2 b3 b3 f0
+ (good_list L), (good_list_nodes L), ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ c= cnext_el f1 f2 cf_list f0 f2 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 cs_flag_list f0 f3 f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 cMEM cytrans f0 f3 f1 f2 cNUMERAL c_0 f1
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L))
T c= c==> ! ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0
+ ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) = T)
T c==> cmarked_list f0 f1 f2 f3 c= cmarked_list f0 f1 f2 f3 cT
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))))))) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))))) r)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 cmarked_list b0 b1 b2 b3 c= cf_list b0 b3 cnext_el crotate_to b2 b3 b3 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 b0 b1 c= cf_list f0 b1 cnext_el crotate_to b0 b1 b1 f2
- (is_restricted (hypermap_of_list L)) |- ((is_restricted (hypermap_of_list L)) = T)
T c==> cis_restricted chypermap_of_list f0 c= cis_restricted chypermap_of_list f0 cT
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))))))) |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x)))))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x)))))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x)))))) N))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 cmarked_list b0 b1 b2 b3 c= cf_list b0 b3 cnext_el crotate_to b2 b3 b3 c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 b0 b1 b2 c= cf_list f0 b2 cnext_el crotate_to b1 b2 b2 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 b0 b1 b2 c= cf_list f0 b2 cnext_el crotate_to b1 b2 b2 f1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 b0 b1 b2 c= cf_list f0 b2 cnext_el crotate_to b1 b2 b2 f1
- (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))), (((MEM x) r) /\ (uniq r)) |- ((((MEM x) r) /\ (uniq r)) /\ ((MEM (((POWER (next_el r)) k) x)) r))
T c==> ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 c==> c/\ cMEM f0 f1 cuniq f1 c/\ c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 f2 f0 f1
+ (((next_el r) x) = ((f_list L) x)), (((f_list L) x) = ((next_el ((rotate_to r) x)) x)), ((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) /\ ((MEM (((l'y L) r) x)) r))
T c==> c= cnext_el f0 f1 cf_list f2 f1 c==> c= cf_list f2 f1 cnext_el crotate_to f0 f1 f1 c==> c= cl'y f2 f0 f1 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f1 f0 c==> cMEM f0 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f0 f1 c/\ c= cl'y f2 f0 f1 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 cMEM cl'y f2 f0 f1 f0
+ |- (((!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
+ |- (((!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) ==> ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)) = ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L))
T c= c==> ! ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
+ (uniq (flatten N)), ((MEM r) N) |- ((((uniq (flatten N)) /\ ((MEM r) N)) ==> (uniq r)) ==> (uniq r))
T c==> cuniq cflatten f0 c==> cMEM f1 f0 c==> c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1 cuniq f1
+ (uniq (flatten N)) |- ((uniq (flatten N)) = T)
T c==> cuniq cflatten f0 c= cuniq cflatten f0 cT
+ |- ((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) = T)
T c= ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 cT
+ (good_list L), ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r)))) |- ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)
T c==> cgood_list f0 c==> c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
+ |- ((\s. (((uniq (flatten N)) /\ ((MEM s) N)) ==> (uniq s))) r)
T * / c==> c/\ cuniq cflatten f0 cMEM b0 f0 cuniq b0 f1
+ ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((MEM x) r), ((MEM r) N), ((normal_list L) N) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ (((((s_flag_list L) N) r) x) ==> ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) ==> (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r))))))
T c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c==> cMEM f2 f3 c==> cMEM f3 f1 c==> cnormal_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c==> cs_flag_list f0 f1 f3 f2 c==> c= cf_list f0 f2 cnext_el crotate_to f3 f2 f2 c==> c= cl'y f0 f3 f2 cPOWER * part cnext_el f3 cSUC cl'm f0 f3 f2 f2 c/\ cMEM f2 f3 cuniq f3
+ |- ((\L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s)))) N)
T * / ! c==> c/\ cuniq cflatten b0 cMEM b1 b0 cuniq b1 f0
+ (good_list L), (good_list_nodes L), ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r)))) |- ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
+ (good_list L), (good_list_nodes L), (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))))))), ((((marked_list L) N) r) x) |- ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 cs_flag_list f0 f1 f2 f3 c==> cmarked_list f0 f1 f2 f3 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (good_list L), (good_list_nodes L), (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 cMEM cytrans f0 f2 f1 f3 cNUMERAL c_0 f1
+ ((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)), ((MEM x) r), ((MEM r) N), ((normal_list L) N) |- (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) /\ (((MEM x) r) /\ (uniq r)))
T c==> c= cl'y f0 f1 f2 cPOWER * part cnext_el f1 cSUC cl'm f0 f1 f2 f2 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c/\ c= cl'y f0 f1 f2 cPOWER * part cnext_el f1 cSUC cl'm f0 f1 f2 f2 c/\ cMEM f2 f1 cuniq f1
- |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
+ (good_list L), ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) |- ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)
T c==> cgood_list f0 c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
- |- (((!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) ==> ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)) = ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f))
T c= c==> ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ |- (((!r. (!x. ((((f_list L) x) = ((next_el r) x)) ==> ((((l'y L) r) x) = (((ITER (SUC (((l'm L) r) x))) (next_el r)) x))))) ==> ((\r. (!x. ((((f_list L) x) = ((next_el r) x)) ==> ((((l'y L) r) x) = (((ITER (SUC (((l'm L) r) x))) (next_el r)) x))))) r)) = ((\r. (!x. ((((f_list L) x) = ((next_el r) x)) ==> ((((l'y L) r) x) = (((ITER (SUC (((l'm L) r) x))) (next_el r)) x))))) r))
T c= c==> ! ! c==> c= cf_list f0 b1 cnext_el b0 b1 c= cl'y f0 b0 b1 cITER cSUC cl'm f0 b0 b1 * part cnext_el b0 b1 * / ! c==> c= cf_list f0 b1 cnext_el b0 b1 c= cl'y f0 b0 b1 cITER cSUC cl'm f0 b0 b1 * part cnext_el b0 b1 f1 * / ! c==> c= cf_list f0 b1 cnext_el b0 b1 c= cl'y f0 b0 b1 cITER cSUC cl'm f0 b0 b1 * part cnext_el b0 b1 f1
- ((MEM x) r), ((MEM r) N), ((normal_list L) N) |- (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) ==> (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r)))))))))
T c==> cMEM f0 f1 c==> cMEM f1 f2 c==> cnormal_list f3 f2 c/\ cMEM f0 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f3 f2 c==> c= cnext_el f1 f0 cf_list f3 f0 c==> cLET / cLET_END cfinal_list f3 b0 cfind_list f2 ce_list f0 c==> cs_flag_list f3 f2 f1 f0 c==> c= cf_list f3 f0 cnext_el crotate_to f1 f0 f0 c==> c= cl'y f3 f1 f0 cPOWER * part cnext_el f1 cSUC cl'm f3 f1 f0 f0 c/\ cMEM f0 f1 cuniq f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))) = T)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c= c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0 cT
+ ((MEM x) r), ((MEM r) N), ((normal_list L) N) |- ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) ==> (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r))))
T c==> cMEM f0 f1 c==> cMEM f1 f2 c==> cnormal_list f3 f2 c==> c= cf_list f3 f0 cnext_el crotate_to f1 f0 f0 c==> c= cl'y f3 f1 f0 cPOWER * part cnext_el f1 cSUC cl'm f3 f1 f0 f0 c/\ cMEM f0 f1 cuniq f1
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ (((next_el r) x) = ((f_list L) x)), (((f_list L) x) = ((next_el ((rotate_to r) x)) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r)))
T c==> c= cnext_el f0 f1 cf_list f2 f1 c==> c= cf_list f2 f1 cnext_el crotate_to f0 f1 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f1 f0 c==> cMEM f0 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f0 f1 c==> c= cl'y f2 f0 f1 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 c/\ cMEM f1 f0 cuniq f0
- |- ((!d. t) = t)
T c= ! f0 f0
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 cMEM cytrans f0 f3 f1 f2 cNUMERAL c_0 f1
+ |- ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ |- ((\r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) r)
T * / ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 f2
+ |- (((!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) ==> ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)) = ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N))
T c= c==> ! ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
+ |- ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)
T * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
+ ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((((s_flag_list L) N) r) x) /\ ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) ==> (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r)))))
T c==> cMEM f0 f1 c==> cMEM f1 f2 c==> cnormal_list f3 f2 c==> cs_flag_list f3 f2 f1 f0 c/\ cs_flag_list f3 f2 f1 f0 c==> c= cf_list f3 f0 cnext_el crotate_to f1 f0 f0 c==> c= cl'y f3 f1 f0 cPOWER * part cnext_el f1 cSUC cl'm f3 f1 f0 f0 c/\ cMEM f0 f1 cuniq f1
- |- ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L)
T * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
+ (good_list L), (good_list_nodes L), (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))))), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cMEM f1 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 cs_flag_list f0 f3 f2 f1 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 cMEM cytrans f0 f3 f2 f1 cNUMERAL c_0 f2
+ ((MEM x) r), ((MEM r) N), ((normal_list L) N) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) ==> (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r))))))
T c==> cMEM f0 f1 c==> cMEM f1 f2 c==> cnormal_list f3 f2 c==> cLET / cLET_END cfinal_list f3 b0 cfind_list f2 ce_list f0 c==> cs_flag_list f3 f2 f1 f0 c==> c= cf_list f3 f0 cnext_el crotate_to f1 f0 f0 c==> c= cl'y f3 f1 f0 cPOWER * part cnext_el f1 cSUC cl'm f3 f1 f0 f0 c/\ cMEM f0 f1 cuniq f1
+ |- (((!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) ==> ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i)) = ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i))
T c= c==> ! c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4
- (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) |- ((!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) /\ (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))))
T c==> ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 c/\ ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1
+ (((next_el r) x) = ((f_list L) x)), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) ==> (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r))))))
T c==> c= cnext_el f0 f1 cf_list f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f1 f0 c==> cMEM f0 f3 c==> cnormal_list f2 f3 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f2 f3 f0 f1 c==> c= cf_list f2 f1 cnext_el crotate_to f0 f1 f1 c==> c= cl'y f2 f0 f1 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 c/\ cMEM f1 f0 cuniq f0
+ (((next_el r) x) = ((f_list L) x)), (((f_list L) x) = ((next_el ((rotate_to r) x)) x)), ((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) r)) = ((MEM (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) r))
T c==> c= cnext_el f0 f1 cf_list f2 f1 c==> c= cf_list f2 f1 cnext_el crotate_to f0 f1 f1 c==> c= cl'y f2 f0 f1 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f1 f0 c==> cMEM f0 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f0 f1 c= c==> c/\ cMEM f1 f0 cuniq f0 cMEM cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 f0 cMEM cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 f0
+ |- ((\r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))))) r)
T * / ! ! c= cytrans f0 f1 b0 b1 b2 cl'y f0 crtrans f0 f1 b0 b1 b2 b1 f2
+ (((next_el r) x) = ((f_list L) x)), (((f_list L) x) = ((next_el ((rotate_to r) x)) x)), ((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((MEM (((l'y L) r) x)) r)
T c==> c= cnext_el f0 f1 cf_list f2 f1 c==> c= cf_list f2 f1 cnext_el crotate_to f0 f1 f1 c==> c= cl'y f2 f0 f1 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f1 f0 c==> cMEM f0 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f0 f1 cMEM cl'y f2 f0 f1 f0
- ((all (loop_list L)) N) |- (((all (loop_list L)) N) = T)
T c==> call * part cloop_list f0 f1 c= call * part cloop_list f0 f1 cT
- |- (((!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) ==> ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x)) = ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x))
T c= c==> ! ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
- ((all (\s. (~ (s = NIL)))) N) |- (((all (\s. (~ (s = NIL)))) N) = T)
T c==> call / c~ c= b0 cNIL f0 c= call / c~ c= b0 cNIL f0 cT
+ |- ((\k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) k)
T * / c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 f2
+ |- (((!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) ==> ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)) = ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x))
T c= c==> ! c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
- ((normal_list L) N) |- (((normal_list L) N) = T)
T c==> cnormal_list f0 f1 c= cnormal_list f0 f1 cT
+ |- ((!x. ((((f_list L) x) = ((next_el r) x)) ==> ((((l'y L) r) x) = (((ITER (SUC (((l'm L) r) x))) (next_el r)) x)))) = T)
T c= ! c==> c= cf_list f0 b0 cnext_el f1 b0 c= cl'y f0 f1 b0 cITER cSUC cl'm f0 f1 b0 * part cnext_el f1 b0 cT
- ((MEM r) N), ((normal_list L) N) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) ==> (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r)))))))))
T c==> cMEM f0 f1 c==> cnormal_list f2 f1 c==> cMEM f3 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f1 c==> c= cnext_el f0 f3 cf_list f2 f3 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f2 f1 f0 f3 c==> c= cf_list f2 f3 cnext_el crotate_to f0 f3 f3 c==> c= cl'y f2 f0 f3 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f3 f3 c/\ cMEM f3 f0 cuniq f0
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ |- ((\n. (((ITER n) f) = ((POWER f) n))) n)
T * / c= * * part cITER b0 f0 * * part cPOWER f0 b0 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))))))) |- (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 cmarked_list b0 b1 b2 b3 c= cf_list b0 b3 cnext_el crotate_to b2 b3 b3 ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 b0 b1 b2 c= cf_list f0 b2 cnext_el crotate_to b1 b2 b2
- |- ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)
T * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- |- ((\j. ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))) j)
T * / c= cPOWER * * part ctransform_list f0 f1 b0 c, f2 f3 c, cntrans f0 f2 f3 f1 b0 crtrans f0 f2 f3 f1 b0 f4
+ (((next_el r) x) = ((f_list L) x)), (((f_list L) x) = ((next_el ((rotate_to r) x)) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((((f_list L) x) = ((next_el r) x)) ==> ((((l'y L) r) x) = (((ITER (SUC (((l'm L) r) x))) (next_el r)) x))) ==> ((MEM (((l'y L) r) x)) r))
T c==> c= cnext_el f0 f1 cf_list f2 f1 c==> c= cf_list f2 f1 cnext_el crotate_to f0 f1 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f1 f0 c==> cMEM f0 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f0 f1 c==> c==> c= cf_list f2 f1 cnext_el f0 f1 c= cl'y f2 f0 f1 cITER cSUC cl'm f2 f0 f1 * part cnext_el f0 f1 cMEM cl'y f2 f0 f1 f0
+ (((next_el r) x) = ((f_list L) x)), (((f_list L) x) = ((next_el ((rotate_to r) x)) x)), ((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((MEM (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) r)
T c==> c= cnext_el f0 f1 cf_list f2 f1 c==> c= cf_list f2 f1 cnext_el crotate_to f0 f1 f1 c==> c= cl'y f2 f0 f1 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f1 f0 c==> cMEM f0 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f0 f1 cMEM cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 f0
+ (good_list L), (good_list_nodes L), (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 cMEM cytrans f0 f2 f1 f3 cNUMERAL c_0 f1
+ |- (((!f. (((POWER f) (NUMERAL _0)) = I)) ==> ((\f. (((POWER f) (NUMERAL _0)) = I)) f)) = ((\f. (((POWER f) (NUMERAL _0)) = I)) f))
T c= c==> ! c= * * part cPOWER b0 cNUMERAL c_0 part cI * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0 * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0
+ (((next_el r) x) = ((f_list L) x)), (((f_list L) x) = ((next_el ((rotate_to r) x)) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> ((MEM (((l'y L) r) x)) r))
T c==> c= cnext_el f0 f1 cf_list f2 f1 c==> c= cf_list f2 f1 cnext_el crotate_to f0 f1 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f1 f0 c==> cMEM f0 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f0 f1 c==> c= cl'y f2 f0 f1 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f1 f1 cMEM cl'y f2 f0 f1 f0
+ |- ((\i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) i)
T * / c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
+ |- ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)
T * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
+ ((MEM x) r), ((MEM r) N), ((normal_list L) N) |- (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r)))
T c==> cMEM f0 f1 c==> cMEM f1 f2 c==> cnormal_list f3 f2 c==> c= cl'y f3 f1 f0 cPOWER * part cnext_el f1 cSUC cl'm f3 f1 f0 f0 c/\ cMEM f0 f1 cuniq f1
- |- (((!L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) ==> ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L)) = ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L))
T c= c==> ! ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0 * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
- (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
- (((MEM x) r) /\ (uniq r)) |- ((!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) ==> ((MEM (((POWER (next_el r)) k) x)) r))
T c==> c/\ cMEM f0 f1 cuniq f1 c==> ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 cMEM cPOWER * part cnext_el f1 f2 f0 f1
- |- ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
- (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) |- (((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r)) = T)
T c==> ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 c= c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 f2 f0 f1 cT
- (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x)))) = (\x. (((((marked_list L) N) r) x) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 b0 c= cf_list f0 b0 cnext_el crotate_to f2 b0 b0 / c==> cmarked_list f0 f1 f2 b0 c= cf_list f0 b0 cnext_el crotate_to f2 b0 b0
- |- (((!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) ==> (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r)))) = (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))))
T c= c==> ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1
- (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))), (((MEM x) r) /\ (uniq r)) |- ((!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) /\ ((MEM (((POWER (next_el r)) k) x)) r))
T c==> ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 c==> c/\ cMEM f0 f1 cuniq f1 c/\ ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 cMEM cPOWER * part cnext_el f1 f2 f0 f1
- |- (((POWER f) (SUC n)) = (((POWER f) n) o f))
T c= * * part cPOWER f0 cSUC f1 * * part co * * part cPOWER f0 f1 f0
- |- (((!n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) ==> ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n)) = ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n))
T c= c==> ! c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1
- (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) |- ((\k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) k)
T c==> ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 * / c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 f2
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((\d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) d)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 * / c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 f2
- |- (((!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= cntrans f0 f1 b0 b1 b2 cFST cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= cntrans f0 f1 b0 b1 b2 cFST cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= cntrans f0 f1 b0 b1 b2 cFST cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
- ((((s_flag_list L) N) r) x) |- (((((s_flag_list L) N) r) x) = T)
T c==> cs_flag_list f0 f1 f2 f3 c= cs_flag_list f0 f1 f2 f3 cT
- ((MEM r) N), ((normal_list L) N) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) ==> (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r))))))))))
T c==> cMEM f0 f1 c==> cnormal_list f2 f1 c/\ cMEM f0 f1 c==> cMEM f3 f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f1 c==> c= cnext_el f0 f3 cf_list f2 f3 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f2 f1 f0 f3 c==> c= cf_list f2 f3 cnext_el crotate_to f0 f3 f3 c==> c= cl'y f2 f0 f3 cPOWER * part cnext_el f0 cSUC cl'm f2 f0 f3 f3 c/\ cMEM f3 f0 cuniq f0
- |- ((\N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))))) N)
T * / ! ! ! c= cntrans f0 b0 b1 b2 b3 cFST cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
- |- ((\r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))) r)
T * / ! ! c= cntrans f0 f1 b0 b1 b2 cFST cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))), (((MEM x) r) /\ (uniq r)) |- ((MEM (((POWER (next_el r)) k) x)) r)
T c==> ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 f2 f0 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) /\ ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c/\ c~ cfinal_list f0 f1 cMEM cytrans f0 f2 f1 f3 cNUMERAL c_0 f1
- |- ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))
T c= cntrans f0 f1 f2 f3 f4 cFST cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
- |- ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i)
T * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
- |- (((!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))))) ==> ((\N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))))) N)) = ((\N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))))) N))
T c= c==> ! ! ! ! c= cntrans f0 b0 b1 b2 b3 cFST cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 * / ! ! ! c= cntrans f0 b0 b1 b2 b3 cFST cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1 * / ! ! ! c= cntrans f0 b0 b1 b2 b3 cFST cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
- |- ((\g. ((f o g) = (\x. (f (g x))))) g)
T * / c= * * part co f0 b0 / * f0 * b0 b1 f1
- ((normal_list L) N) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> ((((f_list L) x) = ((next_el ((rotate_to r) x)) x)) ==> (((((l'y L) r) x) = (((POWER (next_el r)) (SUC (((l'm L) r) x))) x)) ==> (((MEM x) r) /\ (uniq r))))))))))
T c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cf_list f0 f3 cnext_el crotate_to f2 f3 f3 c==> c= cl'y f0 f2 f3 cPOWER * part cnext_el f2 cSUC cl'm f0 f2 f3 f3 c/\ cMEM f3 f2 cuniq f2
- ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) = T)
T c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c= cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 cT
- |- (((!g. ((f o g) = (\x. (f (g x))))) ==> ((\g. ((f o g) = (\x. (f (g x))))) g)) = ((\g. ((f o g) = (\x. (f (g x))))) g))
T c= c==> ! c= * * part co f0 b0 / * f0 * b0 b1 * / c= * * part co f0 b0 / * f0 * b0 b1 f1 * / c= * * part co f0 b0 / * f0 * b0 b1 f1
- ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) = T)
T c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c= cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 cT
- |- (((\x. (f x)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- ((all (f_last L)) N) |- (((all (f_last L)) N) = T)
T c==> call * part cf_last f0 f1 c= call * part cf_last f0 f1 cT
- |- ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))
T c= cPOWER * * part ctransform_list f0 f1 f2 c, f3 f4 c, cntrans f0 f3 f4 f1 f2 crtrans f0 f3 f4 f1 f2
- |- (((!j. ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))) ==> ((\j. ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))) j)) = ((\j. ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j)))) j))
T c= c==> ! c= cPOWER * * part ctransform_list f0 f1 b0 c, f2 f3 c, cntrans f0 f2 f3 f1 b0 crtrans f0 f2 f3 f1 b0 * / c= cPOWER * * part ctransform_list f0 f1 b0 c, f2 f3 c, cntrans f0 f2 f3 f1 b0 crtrans f0 f2 f3 f1 b0 f4 * / c= cPOWER * * part ctransform_list f0 f1 b0 c, f2 f3 c, cntrans f0 f2 f3 f1 b0 crtrans f0 f2 f3 f1 b0 f4
- |- ((!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))) ==> (!k. ((((MEM x) r) /\ (uniq r)) ==> ((MEM (((POWER (next_el r)) k) x)) r))))
T c==> ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1 ! c==> c/\ cMEM f0 f1 cuniq f1 cMEM cPOWER * part cnext_el f1 b0 f0 f1
- |- ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n)
T * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (((f_list L) x) = ((next_el ((rotate_to r) x)) x))) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 cmarked_list b0 b1 b2 b3 c= cf_list b0 b3 cnext_el crotate_to b2 b3 b3 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 c= cf_list f0 f3 cnext_el crotate_to f2 f3 f3 cT
- |- ((f o g) = (\x. (f (g x))))
T c= * * part co f0 f1 / * f0 * f1 b0
