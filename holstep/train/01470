N Ssrnat.odd_double_half
C |- (!n. (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n))
T c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0
D TRUTH
A |- T
T cT
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D Ssrnat.add0n
A |- (!n. (((NUMERAL _0) + n) = n))
T c= c+ cNUMERAL c_0 f0 f0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D bool_elim
A |- (!P. (((P T) /\ (P F)) ==> (!x. (P x))))
T c==> c/\ * f0 cT * f0 cF ! * f0 b0
D Ssrnat.add1n
A |- (!n. (((NUMERAL (BIT1 _0)) + n) = (SUC n)))
T c= c+ cNUMERAL cBIT1 c_0 f0 cSUC f0
D Ssrnat.addn0
A |- (!n. ((n + (NUMERAL _0)) = n))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.odd0
A |- ((odd (NUMERAL _0)) = F)
T c= codd cNUMERAL c_0 cF
D Ssrnat.oddS
A |- (!n. ((odd (SUC n)) = (~ (odd n))))
T c= codd cSUC f0 c~ codd f0
D Ssrnat.doubleS
A |- (!n. ((double (SUC n)) = (SUC (SUC (double n)))))
T c= cdouble cSUC f0 cSUC cSUC cdouble f0
D Ssrnat.double0
A |- ((double (NUMERAL _0)) = (NUMERAL _0))
T c= cdouble cNUMERAL c_0 cNUMERAL c_0
D Ssrnat.double_add
A |- (!m. (!n. ((double (m + n)) = ((double m) + (double n)))))
T c= cdouble c+ f0 f1 c+ cdouble f0 cdouble f1
D Ssrnat.half0
A |- ((half (NUMERAL _0)) = (NUMERAL _0))
T c= chalf cNUMERAL c_0 cNUMERAL c_0
D Ssrnat.halfS
A |- (!n. ((half (SUC n)) = (uphalf n)))
T c= chalf cSUC f0 cuphalf f0
D Ssrnat.uphalf_half
A |- (!n. ((uphalf n) = ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n))))
T c= cuphalf f0 c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0
- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) |- ((((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))) = T)
T c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 c= c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0 cT
+ |- (F ==> ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT1 _0))))
T c==> cF c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
+ |- (((?x. ((odd n) = x)) ==> (((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))) = (((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c= c==> c? / c= codd f0 b0 c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
- ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cT * f0 cF c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
+ |- ((\g'. (!t'. (!e'. (((~ F) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c~ cF b0 c==> c==> b0 c= cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= cNUMERAL c_0 b2 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND b0 b1 b2 f0
+ |- (((~ T) ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND T) (NUMERAL (BIT1 _0))) e')))
T c==> c==> c~ cT c= cNUMERAL c_0 f0 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cT cNUMERAL cBIT1 c_0 f0
+ |- (((((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) ==> (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half (SUC n)))) = (SUC n))) = T)
T c= c==> c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf cSUC f0 cSUC f0 cT
+ |- (((!e'. (((~ F) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))) ==> ((\e'. (((~ F) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))) e')) = ((\e'. (((~ F) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c~ cF f0 c==> c==> f0 c= cNUMERAL cBIT1 c_0 f1 c==> c==> c~ f0 c= cNUMERAL c_0 b0 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND f0 f1 b0 * / c==> c= c~ cF f0 c==> c==> f0 c= cNUMERAL cBIT1 c_0 f1 c==> c==> c~ f0 c= cNUMERAL c_0 b0 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND f0 f1 b0 f2 * / c==> c= c~ cF f0 c==> c==> f0 c= cNUMERAL cBIT1 c_0 f1 c==> c==> c~ f0 c= cNUMERAL c_0 b0 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND f0 f1 b0 f2
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (((?n1. (n = n1)) ==> ((uphalf n) = ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n)))) = ((uphalf n) = ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n))))
T c= c==> c? / c= f0 b0 c= cuphalf f0 c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0 c= cuphalf f0 c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0
+ (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) |- (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (uphalf n))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))
T c==> c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble cuphalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ |- (((((COND (~ x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))
T c= c+ cCOND c~ f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f1 cSUC c+ cCOND f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f1
+ |- (((!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) ==> ((\P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) P)) = ((\P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) P))
T c= c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 * / c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 f0 * / c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 f0
+ |- (((!g'. (!t'. (!e'. (((~ F) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((~ F) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((~ F) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c~ cF b0 c==> c==> b0 c= cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= cNUMERAL c_0 b2 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= c~ cF b0 c==> c==> b0 c= cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= cNUMERAL c_0 b2 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND b0 b1 b2 f0 * / ! ! c==> c= c~ cF b0 c==> c==> b0 c= cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= cNUMERAL c_0 b2 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND b0 b1 b2 f0
+ |- ((((NUMERAL (BIT1 _0)) + (double (half n))) = (SUC ((NUMERAL _0) + (double (half n))))) = (((NUMERAL (BIT1 _0)) + ((NUMERAL _0) + (double (half n)))) = (SUC ((NUMERAL _0) + (double (half n))))))
T c= c= c+ cNUMERAL cBIT1 c_0 cdouble chalf f0 cSUC c+ cNUMERAL c_0 cdouble chalf f0 c= c+ cNUMERAL cBIT1 c_0 c+ cNUMERAL c_0 cdouble chalf f0 cSUC c+ cNUMERAL c_0 cdouble chalf f0
+ |- (((odd n) = (odd n)) = ((\x. ((odd n) = x)) (odd n)))
T c= c= codd f0 codd f0 * / c= codd f0 b0 codd f0
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ T |- (T /\ ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT1 _0))))
T c==> cT c/\ cT c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
+ |- ((((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (uphalf n))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))) = (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half (SUC n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c= c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble cuphalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf cSUC f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) |- (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))
T c==> c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ |- ((\x. (((((COND (~ x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))) x)
T * / c= c+ cCOND c~ b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f1
- |- ((?x. ((odd n) = x)) ==> (?x. ((odd n) = x)))
T c==> c? / c= codd f0 b0 c? / c= codd f0 b0
+ ((\x. ((odd n) = x)) x) |- ((odd n) = x)
T c==> * / c= codd f0 b0 f1 c= codd f0 f1
+ (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) |- (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half (SUC n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))
T c==> c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf cSUC f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ ((\x. ((odd n) = x)) x) |- (((\x. ((odd n) = x)) x) /\ (((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c==> * / c= codd f0 b0 f1 c/\ * / c= codd f0 b0 f1 c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ |- ((((((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (NUMERAL _0))) = (NUMERAL _0)) = (((((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half (NUMERAL _0)))) = (NUMERAL _0)))
T c= c= c+ cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble cNUMERAL c_0 cNUMERAL c_0 c= c+ cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf cNUMERAL c_0 cNUMERAL c_0
+ |- (((!n. ((odd (SUC n)) = (~ (odd n)))) ==> ((\n. ((odd (SUC n)) = (~ (odd n)))) n)) = ((\n. ((odd (SUC n)) = (~ (odd n)))) n))
T c= c==> ! c= codd cSUC b0 c~ codd b0 * / c= codd cSUC b0 c~ codd b0 f0 * / c= codd cSUC b0 c~ codd b0 f0
+ |- (((!n. (((NUMERAL _0) + n) = n)) ==> ((\n. (((NUMERAL _0) + n) = n)) n)) = ((\n. (((NUMERAL _0) + n) = n)) n))
T c= c==> ! c= c+ cNUMERAL c_0 b0 b0 * / c= c+ cNUMERAL c_0 b0 b0 f0 * / c= c+ cNUMERAL c_0 b0 b0 f0
+ |- ((((NUMERAL (BIT1 _0)) + (double (half n))) = (SUC (double (half n)))) = (((NUMERAL (BIT1 _0)) + (double (half n))) = (SUC ((NUMERAL _0) + (double (half n))))))
T c= c= c+ cNUMERAL cBIT1 c_0 cdouble chalf f0 cSUC cdouble chalf f0 c= c+ cNUMERAL cBIT1 c_0 cdouble chalf f0 cSUC c+ cNUMERAL c_0 cdouble chalf f0
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
+ |- ((((~ T) = F) ==> ((F ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ F) ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND F) t') e'))))) = ((F ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ F) ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND F) t') e')))))
T c= c==> c= c~ cT cF c==> c==> cF c= cNUMERAL cBIT1 c_0 f0 c==> c==> c~ cF c= cNUMERAL c_0 f1 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cF f0 f1 c==> c==> cF c= cNUMERAL cBIT1 c_0 f0 c==> c==> c~ cF c= cNUMERAL c_0 f1 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cF f0 f1
+ |- ((F ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ F) ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND F) t') e'))))
T c==> c==> cF c= cNUMERAL cBIT1 c_0 f0 c==> c==> c~ cF c= cNUMERAL c_0 f1 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cF f0 f1
+ |- ((((~ T) ==> ((NUMERAL _0) = (NUMERAL _0))) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND T) (NUMERAL (BIT1 _0))) (NUMERAL _0)))) = ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND T) (NUMERAL (BIT1 _0))) (NUMERAL _0))))
T c= c==> c==> c~ cT c= cNUMERAL c_0 cNUMERAL c_0 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cT cNUMERAL cBIT1 c_0 cNUMERAL c_0
- (n = n1) |- ((((((COND (odd n1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) = (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n))
T c==> c= f0 f1 c= c= c+ cCOND codd f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0
+ |- ((((~ F) ==> ((NUMERAL _0) = (NUMERAL _0))) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0)))) = ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0))))
T c= c==> c==> c~ cF c= cNUMERAL c_0 cNUMERAL c_0 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0
+ |- ((~ F) ==> ((NUMERAL _0) = (NUMERAL _0)))
T c==> c~ cF c= cNUMERAL c_0 cNUMERAL c_0
+ |- ((((((((COND (odd (NUMERAL _0))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half (NUMERAL _0)))) = (NUMERAL _0)) /\ (!n. ((((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) ==> (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half (SUC n)))) = (SUC n))))) ==> (!n. (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n))) = (!n. (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n)))
T c= c==> c/\ c= c+ cCOND codd cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf cNUMERAL c_0 cNUMERAL c_0 ! c==> c= c+ cCOND codd b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf b0 b0 c= c+ cCOND codd cSUC b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf cSUC b0 cSUC b0 ! c= c+ cCOND codd b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf b0 b0 ! c= c+ cCOND codd b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf b0 b0
+ |- (((F ==> ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT1 _0)))) ==> (((~ F) ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND F) (NUMERAL (BIT1 _0))) e')))) = (((~ F) ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND F) (NUMERAL (BIT1 _0))) e'))))
T c= c==> c==> cF c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 c==> c==> c~ cF c= cNUMERAL c_0 f0 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cF cNUMERAL cBIT1 c_0 f0 c==> c==> c~ cF c= cNUMERAL c_0 f0 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cF cNUMERAL cBIT1 c_0 f0
- |- (!n1. (((\n1. (n = n1)) n1) ==> (?n1. (n = n1))))
T c==> * / c= f0 b0 f1 c? / c= f0 b0
- ((odd n) = x) |- ((((((COND (~ x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))) = (((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c==> c= codd f0 f1 c= c= c+ cCOND c~ f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
- |- (T = ((SUC (SUC (double (half n)))) = (SUC (SUC (double (half n))))))
T c= cT c= cSUC cSUC cdouble chalf f0 cSUC cSUC cdouble chalf f0
+ |- (((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))
T c= c+ cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) |- (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))
T c==> c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
- |- ((\n1. (n = n1)) n)
T * / c= f0 b0 f0
+ |- ((?x. ((odd n) = x)) ==> (((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c==> c? / c= codd f0 b0 c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ |- ((((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))) = (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c= c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
- ((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) |- ((!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) ==> (!n. (P n)))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 ! * f0 b0
- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))), ((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) |- (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) /\ (!n. (P n)))
T c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 c/\ c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
- ((\x. ((odd n) = x)) x) |- (((\x. ((odd n) = x)) x) /\ (?x. ((odd n) = x)))
T c==> * / c= codd f0 b0 f1 c/\ * / c= codd f0 b0 f1 c? / c= codd f0 b0
+ |- ((((\x. ((odd n) = x)) x) ==> (((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))) = T)
T c= c==> * / c= codd f0 b0 f1 c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cT
+ |- ((n = n1) ==> ((uphalf n) = ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n))))
T c==> c= f0 f1 c= cuphalf f0 c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0
+ (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) |- ((((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) /\ (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half (SUC n)))) = (SUC n)))
T c==> c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c/\ c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf cSUC f0 cSUC f0
- |- (((SUC (SUC (double (half n)))) = (SUC (SUC (double (half n))))) = ((SUC (SUC ((NUMERAL _0) + (double (half n))))) = (SUC (SUC (double (half n))))))
T c= c= cSUC cSUC cdouble chalf f0 cSUC cSUC cdouble chalf f0 c= cSUC cSUC c+ cNUMERAL c_0 cdouble chalf f0 cSUC cSUC cdouble chalf f0
+ |- (((~ F) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))
T c==> c= c~ cF f0 c==> c==> f0 c= cNUMERAL cBIT1 c_0 f1 c==> c==> c~ f0 c= cNUMERAL c_0 f2 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND f0 f1 f2
+ |- ((\t'. (!e'. (((~ T) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c~ cT f0 c==> c==> f0 c= cNUMERAL cBIT1 c_0 b0 c==> c==> c~ f0 c= cNUMERAL c_0 b1 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND f0 b0 b1 f1
+ (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) |- ((((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) /\ (((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c==> c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c/\ c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0 c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ |- (((!n. ((double (SUC n)) = (SUC (SUC (double n))))) ==> ((\n. ((double (SUC n)) = (SUC (SUC (double n))))) n)) = ((\n. ((double (SUC n)) = (SUC (SUC (double n))))) n))
T c= c==> ! c= cdouble cSUC b0 cSUC cSUC cdouble b0 * / c= cdouble cSUC b0 cSUC cSUC cdouble b0 f0 * / c= cdouble cSUC b0 cSUC cSUC cdouble b0 f0
+ |- ((\n. (((NUMERAL _0) + n) = n)) n)
T * / c= c+ cNUMERAL c_0 b0 b0 f0
- |- (!x. (((\x. ((odd n) = x)) x) ==> (?x. ((odd n) = x))))
T c==> * / c= codd f0 b0 f1 c? / c= codd f0 b0
+ |- (((~ F) ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND F) (NUMERAL (BIT1 _0))) e')))
T c==> c==> c~ cF c= cNUMERAL c_0 f0 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cF cNUMERAL cBIT1 c_0 f0
+ (n = n1) |- ((uphalf n1) = ((((COND (odd n1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n)))
T c==> c= f0 f1 c= cuphalf f1 c+ cCOND codd f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0
- T |- (T = T)
T c==> cT c= cT cT
+ |- ((((((COND (odd (NUMERAL _0))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half (NUMERAL _0)))) = (NUMERAL _0)) /\ (!n. ((((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n) ==> (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half (SUC n)))) = (SUC n)))))
T c/\ c= c+ cCOND codd cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf cNUMERAL c_0 cNUMERAL c_0 ! c==> c= c+ cCOND codd b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf b0 b0 c= c+ cCOND codd cSUC b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf cSUC b0 cSUC b0
- (n = n1) |- ((uphalf n1) = ((((COND (odd n1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n1)))
T c==> c= f0 f1 c= cuphalf f1 c+ cCOND codd f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f1
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF ! * f0 b0
+ |- (((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND T) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND T) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))
T c= c+ cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ |- ((((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))) = (((((COND (odd (SUC n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c= c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 c= c+ cCOND codd cSUC f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ |- ((SUC ((SUC (double (NUMERAL _0))) + (double (half n)))) = (SUC (SUC (double (half n)))))
T c= cSUC c+ cSUC cdouble cNUMERAL c_0 cdouble chalf f0 cSUC cSUC cdouble chalf f0
- |- ((n = n1) = ((\n1. (n = n1)) n1))
T c= c= f0 f1 * / c= f0 b0 f1
+ |- ((\n. ((double (m + n)) = ((double m) + (double n)))) n)
T * / c= cdouble c+ f0 b0 c+ cdouble f0 cdouble b0 f1
+ |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) |- ((\P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) P)
T c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 * / c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 f0
+ |- (((odd n) = x) ==> (((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c==> c= codd f0 f1 c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
- (n = ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))) |- (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n)
T c==> c= f0 c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0
- ((odd n) = x) |- (x = (odd n))
T c==> c= codd f0 f1 c= f1 codd f0
+ (n = n1) |- ((n = n1) /\ ((uphalf n) = ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n))))
T c==> c= f0 f1 c/\ c= f0 f1 c= cuphalf f0 c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0
+ |- (((double (NUMERAL (BIT1 _0))) + (double (half n))) = (SUC (SUC (double (half n)))))
T c= c+ cdouble cNUMERAL cBIT1 c_0 cdouble chalf f0 cSUC cSUC cdouble chalf f0
+ |- ((\n. ((odd (SUC n)) = (~ (odd n)))) n)
T * / c= codd cSUC b0 c~ codd b0 f0
+ |- ((((NUMERAL _0) + ((double (NUMERAL (BIT1 _0))) + (double (half n)))) = (SUC ((NUMERAL (BIT1 _0)) + (double (half n))))) = (((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND T) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND T) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c= c= c+ cNUMERAL c_0 c+ cdouble cNUMERAL cBIT1 c_0 cdouble chalf f0 cSUC c+ cNUMERAL cBIT1 c_0 cdouble chalf f0 c= c+ cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ |- ((((~ F) = T) ==> ((T ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ T) ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND T) t') e'))))) = ((T ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ T) ==> ((NUMERAL _0) = e')) ==> ((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND T) t') e')))))
T c= c==> c= c~ cF cT c==> c==> cT c= cNUMERAL cBIT1 c_0 f0 c==> c==> c~ cT c= cNUMERAL c_0 f1 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cT f0 f1 c==> c==> cT c= cNUMERAL cBIT1 c_0 f0 c==> c==> c~ cT c= cNUMERAL c_0 f1 c= cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cT f0 f1
- |- (((NUMERAL _0) = (NUMERAL _0)) = (((NUMERAL _0) + (NUMERAL _0)) = (NUMERAL _0)))
T c= c= cNUMERAL c_0 cNUMERAL c_0 c= c+ cNUMERAL c_0 cNUMERAL c_0 cNUMERAL c_0
+ |- ((\n. (((NUMERAL (BIT1 _0)) + n) = (SUC n))) n)
T * / c= c+ cNUMERAL cBIT1 c_0 b0 cSUC b0 f0
+ |- (((!n. (((SUC m) + n) = (SUC (m + n)))) ==> ((\n. (((SUC m) + n) = (SUC (m + n)))) n)) = ((\n. (((SUC m) + n) = (SUC (m + n)))) n))
T c= c==> ! c= c+ cSUC f0 b0 cSUC c+ f0 b0 * / c= c+ cSUC f0 b0 cSUC c+ f0 b0 f1 * / c= c+ cSUC f0 b0 cSUC c+ f0 b0 f1
- (~ F) |- ((F = F) = T)
T c==> c~ cF c= c= cF cF cT
+ (n = n1) |- ((uphalf n1) = ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n)))
T c==> c= f0 f1 c= cuphalf f1 c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0
+ |- ((((((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND T) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND T) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))) /\ (((((COND (~ F)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))) ==> (!x. (((((COND (~ x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))) = (!x. (((((COND (~ x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))))
T c= c==> c/\ c= c+ cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 c= c+ cCOND c~ cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 ! c= c+ cCOND c~ b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 ! c= c+ cCOND c~ b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
+ |- (((double (NUMERAL (BIT1 _0))) + (double (half n))) = (SUC ((NUMERAL (BIT1 _0)) + (double (half n)))))
T c= c+ cdouble cNUMERAL cBIT1 c_0 cdouble chalf f0 cSUC c+ cNUMERAL cBIT1 c_0 cdouble chalf f0
+ |- ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
+ |- ((\n. ((n + (NUMERAL _0)) = n)) n)
T * / c= c+ b0 cNUMERAL c_0 b0 f0
+ |- (((SUC (SUC ((double (NUMERAL _0)) + (double (half n))))) = (SUC (SUC (double (half n))))) = ((SUC ((SUC (double (NUMERAL _0))) + (double (half n)))) = (SUC (SUC (double (half n))))))
T c= c= cSUC cSUC c+ cdouble cNUMERAL c_0 cdouble chalf f0 cSUC cSUC cdouble chalf f0 c= cSUC c+ cSUC cdouble cNUMERAL c_0 cdouble chalf f0 cSUC cSUC cdouble chalf f0
- |- ((?n1. (n = n1)) ==> (?n1. (n = n1)))
T c==> c? / c= f0 b0 c? / c= f0 b0
+ |- (((!n. ((n + (NUMERAL _0)) = n)) ==> ((\n. ((n + (NUMERAL _0)) = n)) n)) = ((\n. ((n + (NUMERAL _0)) = n)) n))
T c= c==> ! c= c+ b0 cNUMERAL c_0 b0 * / c= c+ b0 cNUMERAL c_0 b0 f0 * / c= c+ b0 cNUMERAL c_0 b0 f0
- |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- ((odd n) = x) |- ((\x. ((odd n) = x)) x)
T c==> c= codd f0 f1 * / c= codd f0 b0 f1
+ |- (((!t'. (!e'. (((~ T) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((~ T) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((~ T) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c~ cT f0 c==> c==> f0 c= cNUMERAL cBIT1 c_0 b0 c==> c==> c~ f0 c= cNUMERAL c_0 b1 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND f0 b0 b1 * / ! c==> c= c~ cT f0 c==> c==> f0 c= cNUMERAL cBIT1 c_0 b0 c==> c==> c~ f0 c= cNUMERAL c_0 b1 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND f0 b0 b1 f1 * / ! c==> c= c~ cT f0 c==> c==> f0 c= cNUMERAL cBIT1 c_0 b0 c==> c==> c~ f0 c= cNUMERAL c_0 b1 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND f0 b0 b1 f1
- (n = n1) |- (n1 = n)
T c==> c= f0 f1 c= f1 f0
+ |- ((((double (NUMERAL (BIT1 _0))) + (double (half n))) = (SUC (SUC (double (half n))))) = (((double (NUMERAL (BIT1 _0))) + (double (half n))) = (SUC ((NUMERAL (BIT1 _0)) + (double (half n))))))
T c= c= c+ cdouble cNUMERAL cBIT1 c_0 cdouble chalf f0 cSUC cSUC cdouble chalf f0 c= c+ cdouble cNUMERAL cBIT1 c_0 cdouble chalf f0 cSUC c+ cNUMERAL cBIT1 c_0 cdouble chalf f0
+ |- (((!g'. (!t'. (!e'. (((~ T) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((~ T) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((~ T) = g') ==> ((g' ==> ((NUMERAL (BIT1 _0)) = t')) ==> (((~ g') ==> ((NUMERAL _0) = e')) ==> ((((COND (~ T)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c~ cT b0 c==> c==> b0 c= cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= cNUMERAL c_0 b2 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= c~ cT b0 c==> c==> b0 c= cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= cNUMERAL c_0 b2 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND b0 b1 b2 f0 * / ! ! c==> c= c~ cT b0 c==> c==> b0 c= cNUMERAL cBIT1 c_0 b1 c==> c==> c~ b0 c= cNUMERAL c_0 b2 c= cCOND c~ cT cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND b0 b1 b2 f0
+ |- ((((((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (NUMERAL _0)) = (NUMERAL _0)) = (((((COND F) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (NUMERAL _0))) = (NUMERAL _0)))
T c= c= c+ cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cNUMERAL c_0 cNUMERAL c_0 c= c+ cCOND cF cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble cNUMERAL c_0 cNUMERAL c_0
+ ((odd n) = x) |- (((odd n) = x) /\ (((((COND (~ (odd n))) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))))))
T c==> c= codd f0 f1 c/\ c= codd f0 f1 c= c+ cCOND c~ codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
- F |- (F = T)
T c==> cF c= cF cT
+ |- ((~ T) ==> ((NUMERAL _0) = (NUMERAL _0)))
T c==> c~ cT c= cNUMERAL c_0 cNUMERAL c_0
- ((\n1. (n = n1)) n1) |- (((n = n1) ==> (?n1. (n = n1))) = (?n1. (n = n1)))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c? / c= f0 b0 c? / c= f0 b0
- |- (((!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) ==> (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))) = (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))))
T c= c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1
- |- ((((\x. ((odd n) = x)) x) ==> (?x. ((odd n) = x))) = T)
T c= c==> * / c= codd f0 b0 f1 c? / c= codd f0 b0 cT
- |- ((n = n) = ((\n1. (n = n1)) n))
T c= c= f0 f0 * / c= f0 b0 f0
- |- (((SUC (double (half n))) = (SUC (double (half n)))) = (((NUMERAL (BIT1 _0)) + (double (half n))) = (SUC (double (half n)))))
T c= c= cSUC cdouble chalf f0 cSUC cdouble chalf f0 c= c+ cNUMERAL cBIT1 c_0 cdouble chalf f0 cSUC cdouble chalf f0
- ((odd n) = x) |- (((((COND (~ x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((double (((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0))) + (double (half n)))) = (SUC ((((COND x) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n)))))
T c==> c= codd f0 f1 c= c+ cCOND c~ f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c+ cdouble cCOND f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 cSUC c+ cCOND f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0
- (n = n1) |- ((((((COND (odd n1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n1))) = n1) = (((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n))
T c==> c= f0 f1 c= c= c+ cCOND codd f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f1 f1 c= c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((((P T) /\ (P F)) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c= c==> c/\ * f0 cT * f0 cF ! * f0 b0 cT
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- (n = n1) |- ((((((COND (odd n1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n1))) = n1) = (((((COND (odd n1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n1))) = n))
T c==> c= f0 f1 c= c= c+ cCOND codd f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f1 f1 c= c+ cCOND codd f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f1 f0
- (n = n1) |- ((n = n1) /\ (?n1. (n = n1)))
T c==> c= f0 f1 c/\ c= f0 f1 c? / c= f0 b0
- (n = n1) |- ((((((COND (odd n1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n1))) = n) = (((((COND (odd n1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (double (half n))) = n))
T c==> c= f0 f1 c= c= c+ cCOND codd f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f1 f0 c= c+ cCOND codd f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cdouble chalf f0 f0
- ((\n1. (n = n1)) n1) |- (((\n1. (n = n1)) n1) /\ (?n1. (n = n1)))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c? / c= f0 b0
- |- ((!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) ==> (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))))
T c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1
- |- (((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x))))) = (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- (((uphalf n) = ((((COND (odd n)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + (half n))) = T)
T c= c= cuphalf f0 c+ cCOND codd f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 chalf f0 cT
- |- (((!x. (((\n1. (n = n1)) x) ==> (?n1. (n = n1)))) ==> ((?n1. (n = n1)) ==> (?n1. (n = n1)))) = ((?n1. (n = n1)) ==> (?n1. (n = n1))))
T c= c==> ! c==> * / c= f0 b1 b0 c? / c= f0 b1 c==> c? / c= f0 b0 c? / c= f0 b0 c==> c? / c= f0 b0 c? / c= f0 b0
- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))), ((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) |- (!n. (P n))
T c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
- ((\x. ((odd n) = x)) x) |- ((((odd n) = x) ==> (?x. ((odd n) = x))) = (?x. ((odd n) = x)))
T c==> * / c= codd f0 b0 f1 c= c==> c= codd f0 f1 c? / c= codd f0 b0 c? / c= codd f0 b0
- |- ((n = n1) ==> (?n1. (n = n1)))
T c==> c= f0 f1 c? / c= f0 b0
- |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- (((!x. (((\x. ((odd n) = x)) x) ==> (?x. ((odd n) = x)))) ==> ((?x. ((odd n) = x)) ==> (?x. ((odd n) = x)))) = ((?x. ((odd n) = x)) ==> (?x. ((odd n) = x))))
T c= c==> ! c==> * / c= codd f0 b1 b0 c? / c= codd f0 b1 c==> c? / c= codd f0 b0 c? / c= codd f0 b0 c==> c? / c= codd f0 b0 c? / c= codd f0 b0
- (~ F) |- (F = F)
T c==> c~ cF c= cF cF
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (((P T) /\ (P F)) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ c/\ * f0 cT * f0 cF ! * f0 b0
- |- (((odd n) = x) ==> (?x. ((odd n) = x)))
T c==> c= codd f0 f1 c? / c= codd f0 b0
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- (n = n1) |- ((\n1. (n = n1)) n1)
T c==> c= f0 f1 * / c= f0 b0 f1
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- (~ T) |- (T = F)
T c==> c~ cT c= cT cF
- T |- ((T = T) = T)
T c==> cT c= c= cT cT cT
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
- |- (T = ((SUC (double (half n))) = (SUC (double (half n)))))
T c= cT c= cSUC cdouble chalf f0 cSUC cdouble chalf f0
- |- (?n1. (n = n1))
T c? / c= f0 b0
- |- (T = ((NUMERAL _0) = (NUMERAL _0)))
T c= cT c= cNUMERAL c_0 cNUMERAL c_0
- |- (((odd n) = x) = ((\x. ((odd n) = x)) x))
T c= c= codd f0 f1 * / c= codd f0 b0 f1
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) |- ((!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) /\ (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))))
T c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 c/\ ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1
- |- ((((\n1. (n = n1)) n1) ==> (?n1. (n = n1))) = T)
T c= c==> * / c= f0 b0 f1 c? / c= f0 b0 cT
- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))), ((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) |- ((!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n)))) /\ (!n. (P n)))
T c==> ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 c/\ ! c==> c/\ * b0 cNUMERAL c_0 ! c==> * b0 b1 * b0 cSUC b1 ! * b0 b1 ! * f0 b0
- ((odd n) = x) |- (((odd n) = x) /\ (?x. ((odd n) = x)))
T c==> c= codd f0 f1 c/\ c= codd f0 f1 c? / c= codd f0 b0
