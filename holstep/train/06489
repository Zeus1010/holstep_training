N Dangeyj.HD_BETWN2
C |- (!r. (!r1. (!r2. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((betwn r) r1) r2) = NIL)))))) ==> ((HD (((betwn r) r1) r2)) = ((next_el r) r1))))))
T c==> c/\ cMEM f0 f1 c/\ cMEM f2 f1 c/\ c~ c= f0 f2 c/\ cuniq f1 c~ c= cbetwn f1 f0 f2 cNIL c= cHD cbetwn f1 f0 f2 cnext_el f1 f0
D TRUTH
A |- T
T cT
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D APPEND
A |- ((!l. (((APPEND NIL) l) = l)) /\ (!h. (!t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))))))
T c/\ ! c= cAPPEND cNIL b0 b0 ! ! ! c= cAPPEND cCONS b0 b1 b2 cCONS b0 cAPPEND b1 b2
D MEM
A |- ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))
T c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 f2 c\/ c= f0 f1 cMEM f0 f2
D HD_APPEND
A |- (!l. (!m. ((HD ((APPEND l) m)) = (((COND (l = NIL)) (HD m)) (HD l)))))
T c= cHD cAPPEND f0 f1 cCOND c= f0 cNIL cHD f1 cHD f0
D IN_SET_OF_LIST
A |- (!x. (!l. ((x IN (set_of_list l)) = ((MEM x) l))))
T c= cIN f0 * part cset_of_list f1 cMEM f0 f1
D Nkezbfc_local.lemma
A |- (!A. (A \/ (~ A)))
T c\/ f0 c~ f0
D Nkezbfc_local.lemma1
A |- (!A. ((~ A) \/ A))
T c\/ c~ f0 f0
D Tame_defs.split_at
A |- (!c. (!xs. (((split_at c) xs) = (((split_at_rec c) NIL) xs))))
T c= csplit_at f0 f1 csplit_at_rec f0 cNIL f1
D Tame_defs.betwn
A |- (!ram2. (!ram1. (!vs. ((((betwn vs) ram1) ram2) = ((LET (GABS (\f. (!pre1. (!post1. ((GEQ (f (pre1 , post1))) (LET_END (((COND (ram2 IN (set_of_list post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at ram2) post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND post1) pre2)))))))) ((split_at ram2) pre1)))))))))) ((split_at ram1) vs))))))
T c= cbetwn f0 f1 f2 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cCOND cIN f2 * part cset_of_list b2 cLET * part cGABS / ! ! cGEQ * b3 c, b3 b4 cLET_END b3 csplit_at f2 b2 cLET * part cGABS / ! ! cGEQ * b3 c, b3 b4 cLET_END cAPPEND b2 b3 csplit_at f2 b1 csplit_at f1 f0
D Seq2.next_el
A |- (!x. (!s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))))
T c= cnext_el f0 f1 cCOND c= cindexl f1 f0 c- csizel f0 cNUMERAL cBIT1 c_0 cheadl f1 f0 cnth f1 f0 c+ cindexl f1 f0 cNUMERAL cBIT1 c_0
D Tame_list.split_at_fst_antirefl
A |- (!f. (!u. (!b. (((MEM u) (FST (((split_at_rec u) b) f))) ==> ((MEM u) b)))))
T c==> cMEM f0 cFST csplit_at_rec f0 f1 f2 cMEM f0 f1
D Tame_list.split_at_snd_antirefl
A |- (!f. (!u. (!b. ((uniq f) ==> (~ ((MEM u) (SND (((split_at_rec u) b) f))))))))
T c==> cuniq f0 c~ cMEM f1 cSND csplit_at_rec f1 f2 f0
D Dangeyj.fst_snd_fun
A |- (((GABS (\f. (!a. (!b. ((GEQ (f (a , b))) ((f a) b)))))) c) = ((f (FST c)) (SND c)))
T c= cGABS / ! ! cGEQ * b0 c, b1 b2 * * f0 b1 b2 f1 * * f0 cFST f1 cSND f1
D Dangeyj.INDEXL_EQ_SND_EMPTY
A |- (!r. ((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))))
T c==> c/\ cMEM f0 f1 cuniq f1 c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cSND csplit_at f0 f1 cNIL
D Dangeyj.mem_imp_not_nil
A |- (!s. (!x. (((MEM x) s) ==> (~ (s = NIL)))))
T c==> cMEM f0 f1 c~ c= f1 cNIL
D Dangeyj.HD_NTH_FST_SND_SPLIT
A |- (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c/\ cMEM f0 f1 c/\ cMEM f2 f1 c/\ cuniq f1 c/\ c~ c= f0 f2 c/\ cMEM f2 cSND csplit_at f0 f1 c~ c= cFST csplit_at f2 cSND csplit_at f0 f1 cNIL c= cHD cFST csplit_at f2 cSND csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
D Dangeyj.HD_SND_NTH_SPLIT_AT
A |- (!r. ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((HD (SND ((split_at r1) r))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c= cHD cSND csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
D Dangeyj.HD_FST_FST_SPLIT
A |- (!r. ((~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = ((headl r1) r))))
T c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cHD cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (SND ((split_at r1) r)))) |- ((~ ((MEM r1) (SND ((split_at r1) r)))) /\ ((~ ((MEM r1) (FST ((split_at r1) r)))) ==> ((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((SND ((split_at r1) r)) = NIL) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) ==> ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = ((headl r1) r)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cSND csplit_at f1 f2 c/\ c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c= cSND csplit_at f1 f2 cNIL c==> c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r) |- (((SND ((split_at r1) r)) = NIL) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> cuniq f2 c==> cMEM f1 f2 c==> c= cSND csplit_at f1 f2 cNIL c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- (((!u. (!b. ((uniq r) ==> (~ ((MEM u) (SND (((split_at_rec u) b) r))))))) ==> ((\u. (!b. ((uniq r) ==> (~ ((MEM u) (SND (((split_at_rec u) b) r))))))) r1)) = ((\u. (!b. ((uniq r) ==> (~ ((MEM u) (SND (((split_at_rec u) b) r))))))) r1))
T c= c==> ! ! c==> cuniq f0 c~ cMEM b0 cSND csplit_at_rec b0 b1 f0 * / ! c==> cuniq f0 c~ cMEM b0 cSND csplit_at_rec b0 b1 f0 f1 * / ! c==> cuniq f0 c~ cMEM b0 cSND csplit_at_rec b0 b1 f0 f1
+ |- ((t = F) = (~ t))
T c= c= f0 cF c~ f0
- ((~ (!A. ((~ A) \/ A))) ==> F) |- (((~ (!A. ((~ A) \/ A))) ==> F) /\ ((~ (!A. ((~ A) \/ A))) ==> F))
T c==> c==> c~ ! c\/ c~ b0 b0 cF c/\ c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF
+ |- ((\r. ((~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = ((headl r1) r)))) r)
T * / c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 b0 cNIL c= cHD cFST csplit_at f0 cFST csplit_at f1 b0 cheadl f1 b0 f2
+ |- (((((MEM r2) (SND ((split_at r1) r))) ==> (~ ((SND ((split_at r1) r)) = NIL))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c= c==> c==> cMEM f0 cSND csplit_at f1 f2 c~ c= cSND csplit_at f1 f2 cNIL c= cHD cFST csplit_at f0 cSND csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f0 cSND csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
- ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL) |- (NIL = (FST ((split_at r2) (SND ((split_at r1) r)))))
T c==> c= cFST csplit_at f0 cSND csplit_at f1 f2 cNIL c= cNIL cFST csplit_at f0 cSND csplit_at f1 f2
- |- (((!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) ==> ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)) = ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x))
T c= c==> ! ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- |- ((t \/ F) = t)
T c= c\/ f0 cF f0
+ |- (((!l. ((x IN (set_of_list l)) = ((MEM x) l))) ==> ((\l. ((x IN (set_of_list l)) = ((MEM x) l))) l)) = ((\l. ((x IN (set_of_list l)) = ((MEM x) l))) l))
T c= c==> ! c= cIN f0 * part cset_of_list b0 cMEM f0 b0 * / c= cIN f0 * part cset_of_list b0 cMEM f0 b0 f1 * / c= cIN f0 * part cset_of_list b0 cMEM f0 b0 f1
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
- (~ ((SND ((split_at r1) r)) = NIL)) |- (((~ (NIL = (SND ((split_at r1) r)))) ==> ((NIL = (SND ((split_at r1) r))) = F)) = ((NIL = (SND ((split_at r1) r))) = F))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c= c==> c~ c= cNIL cSND csplit_at f0 f1 c= c= cNIL cSND csplit_at f0 f1 cF c= c= cNIL cSND csplit_at f0 f1 cF
- |- ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e')))))
T c==> c= cMEM f0 cSND csplit_at f1 f2 f3 c==> c==> f3 c= cFST csplit_at f0 cSND csplit_at f1 f2 f4 c==> c==> c~ f3 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 f5 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND f3 f4 f5
+ (~ (r1 = r2)), ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL))), ((MEM r1) r), ((MEM r2) r) |- ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= f0 f1 c==> c/\ cuniq f2 c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cMEM f0 f2 c==> cMEM f1 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- (~ (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL)) |- ((((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL) = F)
T c==> c~ c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c= c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL cF
+ ((((split_at_rec c) NIL) xs) = ((split_at c) xs)) |- (((split_at c) xs) = (((split_at_rec c) NIL) xs))
T c==> c= csplit_at_rec f0 cNIL f1 csplit_at f0 f1 c= csplit_at f0 f1 csplit_at_rec f0 cNIL f1
+ (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r) |- (((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c~ c= cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f1 c==> c~ cMEM f0 cSND csplit_at f0 f1 c==> c~ cMEM f2 cSND csplit_at f0 f1 c==> cuniq f1 c==> cMEM f0 f1 c==> c==> c/\ cMEM f0 f1 cuniq f1 c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cSND csplit_at f0 f1 cNIL c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ |- (((!e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e')))))) ==> ((\e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e')))))) e')) = ((\e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c= cSND csplit_at f0 f1 cNIL f2 c==> c==> f2 c= cHD cFST csplit_at f3 cFST csplit_at f0 f1 f4 c==> c==> c~ f2 c= cHD cSND csplit_at f0 f1 b0 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f3 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND f2 f4 b0 * / c==> c= c= cSND csplit_at f0 f1 cNIL f2 c==> c==> f2 c= cHD cFST csplit_at f3 cFST csplit_at f0 f1 f4 c==> c==> c~ f2 c= cHD cSND csplit_at f0 f1 b0 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f3 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND f2 f4 b0 f5 * / c==> c= c= cSND csplit_at f0 f1 cNIL f2 c==> c==> f2 c= cHD cFST csplit_at f3 cFST csplit_at f0 f1 f4 c==> c==> c~ f2 c= cHD cSND csplit_at f0 f1 b0 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f3 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND f2 f4 b0 f5
+ |- (((!t'. (!e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= cSND csplit_at f0 f1 cNIL f2 c==> c==> f2 c= cHD cFST csplit_at f3 cFST csplit_at f0 f1 b0 c==> c==> c~ f2 c= cHD cSND csplit_at f0 f1 b1 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f3 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND f2 b0 b1 * / ! c==> c= c= cSND csplit_at f0 f1 cNIL f2 c==> c==> f2 c= cHD cFST csplit_at f3 cFST csplit_at f0 f1 b0 c==> c==> c~ f2 c= cHD cSND csplit_at f0 f1 b1 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f3 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND f2 b0 b1 f4 * / ! c==> c= c= cSND csplit_at f0 f1 cNIL f2 c==> c==> f2 c= cHD cFST csplit_at f3 cFST csplit_at f0 f1 b0 c==> c==> c~ f2 c= cHD cSND csplit_at f0 f1 b1 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f3 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND f2 b0 b1 f4
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r) |- (((~ ((SND ((split_at r1) r)) = NIL)) \/ ((SND ((split_at r1) r)) = NIL)) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> cuniq f2 c==> cMEM f1 f2 c==> c\/ c~ c= cSND csplit_at f1 f2 cNIL c= cSND csplit_at f1 f2 cNIL c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ (~ (r1 = r2)), (uniq r), ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL))), ((MEM r1) r), ((MEM r2) r) |- ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= f0 f1 c==> cuniq f2 c==> c/\ cuniq f2 c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cMEM f0 f2 c==> cMEM f1 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ (~ ((SND ((split_at r1) r)) = NIL)) |- (((~ F) ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND F) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) e')))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c==> c~ cF c= cHD cSND csplit_at f0 f1 f2 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f3 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND cF cHD cFST csplit_at f3 cFST csplit_at f0 f1 f2
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r) |- (((uniq r) ==> (~ ((MEM r1) (SND (((split_at_rec r1) NIL) r))))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> c==> cuniq f2 c~ cMEM f0 cSND csplit_at_rec f0 cNIL f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ (((MEM r1) r) /\ (((MEM r2) r) /\ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)))))) |- ((((MEM r1) r) /\ (((MEM r2) r) /\ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)))))) /\ ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c/\ cMEM f0 f1 c/\ cMEM f2 f1 c/\ c~ c= f0 f2 c/\ cuniq f1 c~ c= cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c/\ c/\ cMEM f0 f1 c/\ cMEM f2 f1 c/\ c~ c= f0 f2 c/\ cuniq f1 c~ c= cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c= cHD cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))) |- ((~ ((MEM r1) (FST ((split_at r1) r)))) /\ ((~ ((MEM r2) (SND ((split_at r1) r)))) ==> ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c/\ c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c~ c= cSND csplit_at f1 f2 cNIL c==> c~ c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- ((\c. (!xs. ((((split_at_rec c) NIL) xs) = ((split_at c) xs)))) c)
T * / ! c= csplit_at_rec b0 cNIL b1 csplit_at b0 b1 f0
- |- (((!r1. (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))) ==> ((\r1. (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))) r1)) = ((\r1. (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))) r1))
T c= c==> ! ! c==> c/\ cMEM b0 b1 c/\ cMEM f0 b1 c/\ cuniq b1 c/\ c~ c= b0 f0 c/\ cMEM f0 cSND csplit_at b0 b1 c~ c= cFST csplit_at f0 cSND csplit_at b0 b1 cNIL c= cHD cFST csplit_at f0 cSND csplit_at b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 * / ! c==> c/\ cMEM b0 b1 c/\ cMEM f0 b1 c/\ cuniq b1 c/\ c~ c= b0 f0 c/\ cMEM f0 cSND csplit_at b0 b1 c~ c= cFST csplit_at f0 cSND csplit_at b0 b1 cNIL c= cHD cFST csplit_at f0 cSND csplit_at b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 f1 * / ! c==> c/\ cMEM b0 b1 c/\ cMEM f0 b1 c/\ cuniq b1 c/\ c~ c= b0 f0 c/\ cMEM f0 cSND csplit_at b0 b1 c~ c= cFST csplit_at f0 cSND csplit_at b0 b1 cNIL c= cHD cFST csplit_at f0 cSND csplit_at b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 f1
- |- ((\r2. (!r1. (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))) r2)
T * / ! ! c==> c/\ cMEM b1 b2 c/\ cMEM b0 b2 c/\ cuniq b2 c/\ c~ c= b1 b0 c/\ cMEM b0 cSND csplit_at b1 b2 c~ c= cFST csplit_at b0 cSND csplit_at b1 b2 cNIL c= cHD cFST csplit_at b0 cSND csplit_at b1 b2 cnth b1 b2 c+ cindexl b1 b2 cNUMERAL cBIT1 c_0 f0
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (uniq r), ((~ ((SND ((split_at r1) r)) = NIL)) \/ ((SND ((split_at r1) r)) = NIL)), ((MEM r1) r) |- (((~ ((SND ((split_at r1) r)) = NIL)) \/ ((SND ((split_at r1) r)) = NIL)) /\ ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> cuniq f2 c==> c\/ c~ c= cSND csplit_at f1 f2 cNIL c= cSND csplit_at f1 f2 cNIL c==> cMEM f1 f2 c/\ c\/ c~ c= cSND csplit_at f1 f2 cNIL c= cSND csplit_at f1 f2 cNIL c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- ((\vs. ((((betwn vs) ram1) ram2) = ((LET (GABS (\f. (!pre1. (!post1. ((GEQ (f (pre1 , post1))) (LET_END (((COND (ram2 IN (set_of_list post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at ram2) post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND post1) pre2)))))))) ((split_at ram2) pre1)))))))))) ((split_at ram1) vs)))) vs)
T * / c= cbetwn b0 f0 f1 cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cCOND cIN f1 * part cset_of_list b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END b4 csplit_at f1 b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END cAPPEND b3 b4 csplit_at f1 b2 csplit_at f0 b0 f2
+ |- (((MEM r2) (SND ((split_at r1) r))) \/ (~ ((MEM r2) (SND ((split_at r1) r)))))
T c\/ cMEM f0 cSND csplit_at f1 f2 c~ cMEM f0 cSND csplit_at f1 f2
- |- ((t \/ T) = T)
T c= c\/ f0 cT cT
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))), ((SND ((split_at r1) r)) = NIL) |- ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) /\ ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c==> c= cSND csplit_at f1 f2 cNIL c/\ c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))) |- ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c~ c= cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f1 c==> c~ cMEM f0 cSND csplit_at f0 f1 c==> c~ cMEM f2 cSND csplit_at f0 f1 c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))) |- ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c~ c= cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f1 c==> c~ cMEM f0 cSND csplit_at f0 f1 c==> c~ cMEM f2 cSND csplit_at f0 f1 c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
- |- (((!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) ==> ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)) = ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1))
T c= c==> ! ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)))), ((MEM r1) r), ((MEM r2) r) |- ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c/\ c~ c= f0 f1 c/\ cuniq f2 c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cMEM f0 f2 c==> cMEM f1 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ |- ((\s. (!x. (((MEM x) s) ==> (~ (s = NIL))))) (SND ((split_at r1) r)))
T * / ! c==> cMEM b1 b0 c~ c= b0 cNIL cSND csplit_at f0 f1
- |- (T = ((~ (!A. (A \/ (~ A)))) ==> F))
T c= cT c==> c~ ! c\/ b0 c~ b0 cF
+ |- (((MEM r2) (SND ((split_at r1) r))) ==> (~ ((SND ((split_at r1) r)) = NIL)))
T c==> cMEM f0 cSND csplit_at f1 f2 c~ c= cSND csplit_at f1 f2 cNIL
- |- (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
+ (~ (r1 = r2)), (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- (T = (((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cFST csplit_at f1 cSND csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c= cT c==> c==> c/\ cMEM f0 f2 c/\ cMEM f1 f2 c/\ cuniq f2 c/\ c~ c= f0 f1 c/\ cMEM f1 cSND csplit_at f0 f2 c~ c= cFST csplit_at f1 cSND csplit_at f0 f2 cNIL c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ ((MEM r2) (SND ((split_at r1) r))) |- (((~ ((SND ((split_at r1) r)) = NIL)) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = ((((MEM r2) (SND ((split_at r1) r))) ==> (~ ((SND ((split_at r1) r)) = NIL))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))
T c==> cMEM f0 cSND csplit_at f1 f2 c= c==> c~ c= cSND csplit_at f1 f2 cNIL c= cHD cFST csplit_at f0 cSND csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0 c==> c==> cMEM f0 cSND csplit_at f1 f2 c~ c= cSND csplit_at f1 f2 cNIL c= cHD cFST csplit_at f0 cSND csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((!r1. (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))) = T)
T c= ! ! c==> c/\ cMEM b0 b1 c/\ cMEM f0 b1 c/\ cuniq b1 c/\ c~ c= b0 f0 c/\ cMEM f0 cSND csplit_at b0 b1 c~ c= cFST csplit_at f0 cSND csplit_at b0 b1 cNIL c= cHD cFST csplit_at f0 cSND csplit_at b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 cT
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r) |- ((~ ((MEM r1) (SND ((split_at r1) r)))) ==> ((~ ((MEM r1) (FST ((split_at r1) r)))) ==> (((MEM r2) (SND ((split_at r1) r))) ==> ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> cMEM f1 cSND csplit_at f0 f2 c==> c~ c= cSND csplit_at f0 f2 cNIL c==> c~ c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ (~ ((SND ((split_at r1) r)) = NIL)) |- ((((~ F) ==> ((HD (SND ((split_at r1) r))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND F) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND F) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c= c==> c==> c~ cF c= cHD cSND csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f2 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND cF cHD cFST csplit_at f2 cFST csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f2 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND cF cHD cFST csplit_at f2 cFST csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r) |- ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), ((SND ((split_at r1) r)) = NIL) |- ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) ==> ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c= cSND csplit_at f1 f2 cNIL c==> c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- ((((uniq r) ==> (~ ((MEM r1) (SND (((split_at_rec r1) NIL) r))))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c= c==> c==> cuniq f0 c~ cMEM f1 cSND csplit_at_rec f1 cNIL f0 c= cHD cCOND cMEM f2 cSND csplit_at f1 f0 cFST csplit_at f2 cSND csplit_at f1 f0 cAPPEND cSND csplit_at f1 f0 cFST csplit_at f2 cFST csplit_at f1 f0 cCOND c= cindexl f1 f0 c- csizel f0 cNUMERAL cBIT1 c_0 cheadl f1 f0 cnth f1 f0 c+ cindexl f1 f0 cNUMERAL cBIT1 c_0 c= cHD cCOND cMEM f2 cSND csplit_at f1 f0 cFST csplit_at f2 cSND csplit_at f1 f0 cAPPEND cSND csplit_at f1 f0 cFST csplit_at f2 cFST csplit_at f1 f0 cCOND c= cindexl f1 f0 c- csizel f0 cNUMERAL cBIT1 c_0 cheadl f1 f0 cnth f1 f0 c+ cindexl f1 f0 cNUMERAL cBIT1 c_0
- (NIL = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) |- (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL)
T c==> c= cNIL cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL
- |- ((!A'. (A' \/ (~ A))) = ((!A. A) \/ (~ A)))
T c= ! c\/ b0 c~ f0 c\/ ! b0 c~ f0
- ((MEM r2) (SND ((split_at r1) r))) |- (((MEM r2) (SND ((split_at r1) r))) /\ ((FST ((split_at r2) (SND ((split_at r1) r)))) = (FST ((split_at r2) (SND ((split_at r1) r))))))
T c==> cMEM f0 cSND csplit_at f1 f2 c/\ cMEM f0 cSND csplit_at f1 f2 c= cFST csplit_at f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ |- ((uniq r) ==> (~ ((MEM r1) (SND (((split_at_rec r1) NIL) r)))))
T c==> cuniq f0 c~ cMEM f1 cSND csplit_at_rec f1 cNIL f0
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r2) (SND ((split_at r1) r)))), ((SND ((split_at r1) r)) = NIL) |- ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = ((headl r1) r))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c= cSND csplit_at f1 f2 cNIL c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r) |- ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> cuniq f2 c==> cMEM f1 f2 c= cHD cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- (((!m. ((HD ((APPEND l) m)) = (((COND (l = NIL)) (HD m)) (HD l)))) ==> ((\m. ((HD ((APPEND l) m)) = (((COND (l = NIL)) (HD m)) (HD l)))) m)) = ((\m. ((HD ((APPEND l) m)) = (((COND (l = NIL)) (HD m)) (HD l)))) m))
T c= c==> ! c= cHD cAPPEND f0 b0 cCOND c= f0 cNIL cHD b0 cHD f0 * / c= cHD cAPPEND f0 b0 cCOND c= f0 cNIL cHD b0 cHD f0 f1 * / c= cHD cAPPEND f0 b0 cCOND c= f0 cNIL cHD b0 cHD f0 f1
- |- ((((MEM r2) (SND ((split_at r1) r))) ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND ((MEM r2) (SND ((split_at r1) r)))) t') e'))))
T c==> c==> cMEM f0 cSND csplit_at f1 f2 c= cFST csplit_at f0 cSND csplit_at f1 f2 f3 c==> c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 f4 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND cMEM f0 cSND csplit_at f1 f2 f3 f4
- ((~ (!A. ((~ A) \/ A))) ==> F) |- ((((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)) ==> ((~ (!A. ((~ A) \/ A))) ==> F))
T c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF
+ (~ (r1 = r2)), (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- ((~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)) /\ ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= f0 f1 c==> c~ c= cFST csplit_at f1 cSND csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c/\ c~ c= cFST csplit_at f1 cSND csplit_at f0 f2 cNIL c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ |- (((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) e')))
T c==> c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f2 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 f2
+ |- (((!t'. (!e'. (((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((headl r1) r) = t')) ==> (((~ g') ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((headl r1) r) = t')) ==> (((~ g') ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((headl r1) r) = t')) ==> (((~ g') ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cheadl f0 f1 b0 c==> c==> c~ f2 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 b1 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND f2 b0 b1 * / ! c==> c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cheadl f0 f1 b0 c==> c==> c~ f2 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 b1 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND f2 b0 b1 f3 * / ! c==> c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cheadl f0 f1 b0 c==> c==> c~ f2 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 b1 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND f2 b0 b1 f3
+ (~ ((MEM r2) (SND ((split_at r1) r)))) |- (((~ (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL)) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) = ((~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ cMEM f0 cSND csplit_at f1 f2 c= c==> c~ c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0 c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- |- (((!r. ((~ ((MEM ram1) r)) ==> (((split_at ram1) r) = (r , NIL)))) ==> ((\r. ((~ ((MEM ram1) r)) ==> (((split_at ram1) r) = (r , NIL)))) r)) = ((\r. ((~ ((MEM ram1) r)) ==> (((split_at ram1) r) = (r , NIL)))) r))
T c= c==> ! c==> c~ cMEM f0 b0 c= csplit_at f0 b0 c, b0 cNIL * / c==> c~ cMEM f0 b0 c= csplit_at f0 b0 c, b0 cNIL f1 * / c==> c~ cMEM f0 b0 c= csplit_at f0 b0 c, b0 cNIL f1
- |- ((!r2. t) = t)
T c= ! f0 f0
+ |- ((\f. (!x. (((LET f) x) = (f x)))) f)
T * / ! c= cLET b0 b1 * b0 b1 f0
+ |- (((!r. ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((HD (SND ((split_at r1) r))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) ==> ((\r. ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((HD (SND ((split_at r1) r))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) r)) = ((\r. ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((HD (SND ((split_at r1) r))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) r))
T c= c==> ! c==> c~ c= cSND csplit_at f0 b0 cNIL c= cHD cSND csplit_at f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 * / c==> c~ c= cSND csplit_at f0 b0 cNIL c= cHD cSND csplit_at f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 f1 * / c==> c~ c= cSND csplit_at f0 b0 cNIL c= cHD cSND csplit_at f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 f1
+ |- ((((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c= c==> c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ (((split_at c) xs) = (((split_at_rec c) NIL) xs)) |- ((((split_at_rec c) NIL) xs) = ((split_at c) xs))
T c==> c= csplit_at f0 f1 csplit_at_rec f0 cNIL f1 c= csplit_at_rec f0 cNIL f1 csplit_at f0 f1
+ |- ((((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> (((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) ==> (((headl r1) r) = t')) ==> (((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) t') e'))))) = (((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) ==> (((headl r1) r) = t')) ==> (((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) t') e')))))
T c= c==> c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c==> c==> c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cheadl f0 f1 f2 c==> c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f3 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 f2 f3 c==> c==> c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cheadl f0 f1 f2 c==> c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f3 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 f2 f3
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (uniq r), (((SND ((split_at r1) r)) = NIL) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))), ((~ ((SND ((split_at r1) r)) = NIL)) \/ ((SND ((split_at r1) r)) = NIL)), ((MEM r1) r) |- ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> cuniq f2 c==> c==> c= cSND csplit_at f1 f2 cNIL c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0 c==> c\/ c~ c= cSND csplit_at f1 f2 cNIL c= cSND csplit_at f1 f2 cNIL c==> cMEM f1 f2 c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- (((!t. ((LET_END t) = t)) ==> ((\t. ((LET_END t) = t)) t)) = ((\t. ((LET_END t) = t)) t))
T c= c==> ! c= cLET_END b0 b0 * / c= cLET_END b0 b0 f0 * / c= cLET_END b0 b0 f0
- |- ((!A. ((~ A) \/ A)) = (((~ T) \/ T) /\ ((~ F) \/ F)))
T c= ! c\/ c~ b0 b0 c/\ c\/ c~ cT cT c\/ c~ cF cF
+ |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ |- ((\x. (!s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0)))))))) x)
T * / ! c= cnext_el b1 b0 cCOND c= cindexl b0 b1 c- csizel b1 cNUMERAL cBIT1 c_0 cheadl b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 f0
+ ((MEM r2) (SND ((split_at r1) r))) |- (((MEM r2) (SND ((split_at r1) r))) = T)
T c==> cMEM f0 cSND csplit_at f1 f2 c= cMEM f0 cSND csplit_at f1 f2 cT
+ (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r2) (SND ((split_at r1) r)))) |- ((~ ((SND ((split_at r1) r)) = NIL)) /\ ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c~ c= cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c==> c~ cMEM f2 cSND csplit_at f0 f1 c/\ c~ c= cSND csplit_at f0 f1 cNIL c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ (~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))), (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))) |- ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))
T c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c~ c= cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f1 c==> c~ cMEM f0 cSND csplit_at f0 f1 c==> c~ cMEM f2 cSND csplit_at f0 f1 c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ |- (((((MEM r1) r) /\ (((MEM r2) r) /\ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)))))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = T)
T c= c==> c/\ cMEM f0 f1 c/\ cMEM f2 f1 c/\ c~ c= f0 f2 c/\ cuniq f1 c~ c= cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c= cHD cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cT
+ |- ((~ ((SND ((split_at r1) r)) = NIL)) \/ ((SND ((split_at r1) r)) = NIL))
T c\/ c~ c= cSND csplit_at f0 f1 cNIL c= cSND csplit_at f0 f1 cNIL
- |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
- (~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) |- ((NIL = (FST ((split_at r2) (FST ((split_at r1) r))))) = F)
T c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= c= cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cF
- |- ((\g'. (!t'. (!e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cMEM f0 cSND csplit_at f1 f2 b0 c==> c==> b0 c= cFST csplit_at f0 cSND csplit_at f1 f2 b1 c==> c==> c~ b0 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b2 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND b0 b1 b2 f3
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))), ((SND ((split_at r1) r)) = NIL) |- ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c==> c= cSND csplit_at f1 f2 cNIL c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- (((F ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = (HD (FST ((split_at r2) (FST ((split_at r1) r))))))) ==> (((~ F) ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND F) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) e')))) = (((~ F) ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND F) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) e'))))
T c= c==> c==> cF c= cHD cFST csplit_at f0 cFST csplit_at f1 f2 cHD cFST csplit_at f0 cFST csplit_at f1 f2 c==> c==> c~ cF c= cHD cSND csplit_at f1 f2 f3 c= cCOND c= cSND csplit_at f1 f2 cNIL cHD cFST csplit_at f0 cFST csplit_at f1 f2 cHD cSND csplit_at f1 f2 cCOND cF cHD cFST csplit_at f0 cFST csplit_at f1 f2 f3 c==> c==> c~ cF c= cHD cSND csplit_at f1 f2 f3 c= cCOND c= cSND csplit_at f1 f2 cNIL cHD cFST csplit_at f0 cFST csplit_at f1 f2 cHD cSND csplit_at f1 f2 cCOND cF cHD cFST csplit_at f0 cFST csplit_at f1 f2 f3
- |- (((((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)) ==> (((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F))) = (((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)))
T c= c==> c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF
- (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)) |- (((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL) = F)
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL cF
+ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)) |- (((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL) = F)
T c==> c~ c= cFST csplit_at f0 cSND csplit_at f1 f2 cNIL c= c= cFST csplit_at f0 cSND csplit_at f1 f2 cNIL cF
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r) |- ((((MEM r1) (FST (((split_at_rec r1) NIL) r))) ==> ((MEM r1) NIL)) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> c==> cMEM f0 cFST csplit_at_rec f0 cNIL f2 cMEM f0 cNIL c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
- |- ((((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)) ==> (((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)))
T c==> c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF
- |- ((\l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))) l)
T * / c= cAPPEND cCONS f0 f1 b0 cCONS f0 cAPPEND f1 b0 f2
+ |- ((((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c= c==> c==> c/\ cMEM f0 f1 cuniq f1 c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cSND csplit_at f0 f1 cNIL c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
- (~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) |- ((((sizel r) - (NUMERAL (BIT1 _0))) = ((indexl r1) r)) = F)
T c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= c= c- csizel f1 cNUMERAL cBIT1 c_0 cindexl f0 f1 cF
+ |- (((!x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) ==> ((\x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) x)) = ((\x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) x))
T c= c==> ! ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 * / ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 f0 * / ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 f0
+ |- (((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((headl r1) r) = t')) ==> (((~ g') ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))
T c==> c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cheadl f0 f1 f3 c==> c==> c~ f2 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f4 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND f2 f3 f4
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r) |- ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ (~ (r1 = r2)), ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)))), ((MEM r1) r), ((MEM r2) r) |- ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= f0 f1 c==> c/\ c~ c= f0 f1 c/\ cuniq f2 c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cMEM f0 f2 c==> cMEM f1 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ |- ((\s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))) s)
T * / c= cnext_el b0 f0 cCOND c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 cheadl f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 f1
- |- (((!h. (!t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))))) ==> ((\h. (!t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))))) h)) = ((\h. (!t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))))) h))
T c= c==> ! ! ! c= cAPPEND cCONS b0 b1 b2 cCONS b0 cAPPEND b1 b2 * / ! ! c= cAPPEND cCONS b0 b1 b2 cCONS b0 cAPPEND b1 b2 f0 * / ! ! c= cAPPEND cCONS b0 b1 b2 cCONS b0 cAPPEND b1 b2 f0
+ |- ((\b. (((MEM r1) (FST (((split_at_rec r1) b) r))) ==> ((MEM r1) b))) NIL)
T * / c==> cMEM f0 cFST csplit_at_rec f0 b0 f1 cMEM f0 b0 cNIL
- ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL) |- (NIL = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))))
T c==> c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cNIL cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2
+ (~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) |- ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) /\ ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c/\ c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ (~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) |- (((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= c= cHD cFST csplit_at f2 cSND csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f2 cSND csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
- (~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) |- (~ (NIL = (FST ((split_at r2) (FST ((split_at r1) r))))))
T c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c~ c= cNIL cFST csplit_at f0 cFST csplit_at f1 f2
+ |- ((\l. (((APPEND NIL) l) = l)) l)
T * / c= cAPPEND cNIL b0 b0 f0
- |- ((!A. (A \/ (~ A))) = ((T \/ (~ T)) /\ (F \/ (~ F))))
T c= ! c\/ b0 c~ b0 c/\ c\/ cT c~ cT c\/ cF c~ cF
- |- (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))
T c= cMEM f0 cCONS f1 f2 c\/ c= f0 f1 cMEM f0 f2
- ((~ (!A. ((~ A) \/ A))) ==> F), (((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)) |- (((~ (!A. ((~ A) \/ A))) ==> F) /\ ((~ (!A. ((~ A) \/ A))) ==> F))
T c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c/\ c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (uniq r), ((SND ((split_at r1) r)) = NIL), ((MEM r1) r) |- (((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))) ==> ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> cuniq f2 c==> c= cSND csplit_at f1 f2 cNIL c==> cMEM f1 f2 c==> c==> c/\ cMEM f1 f2 cuniq f2 c= c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cSND csplit_at f1 f2 cNIL c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r) |- ((~ ((MEM r2) (SND ((split_at r1) r)))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> cuniq f2 c==> cMEM f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cHD cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
+ (~ (r1 = r2)), (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))
T c==> c~ c= f0 f1 c==> c~ c= cFST csplit_at f1 cSND csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
- ((SND ((split_at r1) r)) = NIL) |- (NIL = (SND ((split_at r1) r)))
T c==> c= cSND csplit_at f0 f1 cNIL c= cNIL cSND csplit_at f0 f1
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), ((SND ((split_at r1) r)) = NIL) |- ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) ==> ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = ((headl r1) r)))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c= cSND csplit_at f1 f2 cNIL c==> c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2
+ ((SND ((split_at r1) r)) = NIL) |- (((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) = ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c= cSND csplit_at f0 f1 cNIL c= c= cHD cAPPEND cNIL cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ |- (((GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND (SND ((split_at r1) r))) pre2))))))) ((split_at r2) (FST ((split_at r1) r)))) = (LET_END ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))))
T c= cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cAPPEND cSND csplit_at f0 f1 b1 csplit_at f2 cFST csplit_at f0 f1 cLET_END cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (uniq r), ((SND ((split_at r1) r)) = NIL), ((MEM r1) r) |- (((SND ((split_at r1) r)) = NIL) /\ ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> cuniq f2 c==> c= cSND csplit_at f1 f2 cNIL c==> cMEM f1 f2 c/\ c= cSND csplit_at f1 f2 cNIL c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c==> c~ c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ |- ((\x. (((MEM x) (SND ((split_at r1) r))) ==> (~ ((SND ((split_at r1) r)) = NIL)))) r2)
T * / c==> cMEM b0 cSND csplit_at f0 f1 c~ c= cSND csplit_at f0 f1 cNIL f2
- |- (((!e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e')))))) ==> ((\e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e')))))) e')) = ((\e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cMEM f0 cSND csplit_at f1 f2 f3 c==> c==> f3 c= cFST csplit_at f0 cSND csplit_at f1 f2 f4 c==> c==> c~ f3 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b0 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND f3 f4 b0 * / c==> c= cMEM f0 cSND csplit_at f1 f2 f3 c==> c==> f3 c= cFST csplit_at f0 cSND csplit_at f1 f2 f4 c==> c==> c~ f3 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b0 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND f3 f4 b0 f5 * / c==> c= cMEM f0 cSND csplit_at f1 f2 f3 c==> c==> f3 c= cFST csplit_at f0 cSND csplit_at f1 f2 f4 c==> c==> c~ f3 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b0 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND f3 f4 b0 f5
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)) |- ((~ ((MEM r1) (FST ((split_at r1) r)))) ==> ((~ ((MEM r2) (SND ((split_at r1) r)))) ==> ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c~ c= cSND csplit_at f1 f2 cNIL c==> c~ c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (uniq r), ((SND ((split_at r1) r)) = NIL), ((MEM r1) r) |- ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> cuniq f2 c==> c= cSND csplit_at f1 f2 cNIL c==> cMEM f1 f2 c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r) |- ((~ ((MEM r1) (SND ((split_at r1) r)))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
- |- ((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))))
T c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2
- (~ (r1 = r2)) |- (((~ (r2 = r1)) ==> ((r2 = r1) = F)) = ((r2 = r1) = F))
T c==> c~ c= f0 f1 c= c==> c~ c= f1 f0 c= c= f1 f0 cF c= c= f1 f0 cF
+ (~ ((MEM r2) (SND ((split_at r1) r)))) |- (((MEM r2) (SND ((split_at r1) r))) = F)
T c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cMEM f0 cSND csplit_at f1 f2 cF
+ |- ((\e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e')))))) e')
T * / c==> c= c= cSND csplit_at f0 f1 cNIL f2 c==> c==> f2 c= cHD cFST csplit_at f3 cFST csplit_at f0 f1 f4 c==> c==> c~ f2 c= cHD cSND csplit_at f0 f1 b0 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f3 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND f2 f4 b0 f5
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r) |- ((((MEM r2) (SND ((split_at r1) r))) \/ (~ ((MEM r2) (SND ((split_at r1) r))))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> c\/ cMEM f1 cSND csplit_at f0 f2 c~ cMEM f1 cSND csplit_at f0 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
- (~ (!A. (A \/ (~ A)))) |- F
T c==> c~ ! c\/ b0 c~ b0 cF
- (~ (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL)) |- (~ (NIL = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))))
T c==> c~ c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c~ c= cNIL cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1
+ (~ (r1 = r2)) |- ((r1 = r2) = F)
T c==> c~ c= f0 f1 c= c= f0 f1 cF
+ |- ((\x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) x)
T * / ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 f0
+ |- (((!f. (!u. (!b. (((MEM u) (FST (((split_at_rec u) b) f))) ==> ((MEM u) b))))) ==> ((\f. (!u. (!b. (((MEM u) (FST (((split_at_rec u) b) f))) ==> ((MEM u) b))))) r)) = ((\f. (!u. (!b. (((MEM u) (FST (((split_at_rec u) b) f))) ==> ((MEM u) b))))) r))
T c= c==> ! ! ! c==> cMEM b1 cFST csplit_at_rec b1 b2 b0 cMEM b1 b2 * / ! ! c==> cMEM b1 cFST csplit_at_rec b1 b2 b0 cMEM b1 b2 f0 * / ! ! c==> cMEM b1 cFST csplit_at_rec b1 b2 b0 cMEM b1 b2 f0
+ |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
+ (~ (r1 = r2)), (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- ((~ ((SND ((split_at r1) r)) = NIL)) /\ ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cSND csplit_at f0 f2 cNIL c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c/\ c~ c= cSND csplit_at f0 f2 cNIL c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ |- (((!A. (A \/ (~ A))) ==> ((\A. (A \/ (~ A))) ((MEM r2) (SND ((split_at r1) r))))) = ((\A. (A \/ (~ A))) ((MEM r2) (SND ((split_at r1) r)))))
T c= c==> ! c\/ b0 c~ b0 * / c\/ b0 c~ b0 cMEM f0 cSND csplit_at f1 f2 * / c\/ b0 c~ b0 cMEM f0 cSND csplit_at f1 f2
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((!A. ((P A) \/ Q)) = ((!A. (P A)) \/ Q))
T c= ! c\/ * f0 b0 f1 c\/ ! * f0 b0 f1
- |- (((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F))
T c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF
- |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) = ((~ (!A. (A \/ (~ A)))) ==> F))
T c= c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
+ (~ (r1 = r2)), (~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))), (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))
T c==> c~ c= f0 f1 c==> c~ c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c==> c~ c= cSND csplit_at f0 f2 cNIL c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ |- (((!vs. ((((betwn vs) ram1) ram2) = ((LET (GABS (\f. (!pre1. (!post1. ((GEQ (f (pre1 , post1))) (LET_END (((COND (ram2 IN (set_of_list post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at ram2) post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND post1) pre2)))))))) ((split_at ram2) pre1)))))))))) ((split_at ram1) vs)))) ==> ((\vs. ((((betwn vs) ram1) ram2) = ((LET (GABS (\f. (!pre1. (!post1. ((GEQ (f (pre1 , post1))) (LET_END (((COND (ram2 IN (set_of_list post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at ram2) post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND post1) pre2)))))))) ((split_at ram2) pre1)))))))))) ((split_at ram1) vs)))) vs)) = ((\vs. ((((betwn vs) ram1) ram2) = ((LET (GABS (\f. (!pre1. (!post1. ((GEQ (f (pre1 , post1))) (LET_END (((COND (ram2 IN (set_of_list post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at ram2) post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND post1) pre2)))))))) ((split_at ram2) pre1)))))))))) ((split_at ram1) vs)))) vs))
T c= c==> ! c= cbetwn b0 f0 f1 cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cCOND cIN f1 * part cset_of_list b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END b4 csplit_at f1 b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END cAPPEND b3 b4 csplit_at f1 b2 csplit_at f0 b0 * / c= cbetwn b0 f0 f1 cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cCOND cIN f1 * part cset_of_list b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END b4 csplit_at f1 b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END cAPPEND b3 b4 csplit_at f1 b2 csplit_at f0 b0 f2 * / c= cbetwn b0 f0 f1 cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cCOND cIN f1 * part cset_of_list b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END b4 csplit_at f1 b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END cAPPEND b3 b4 csplit_at f1 b2 csplit_at f0 b0 f2
- |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) ==> (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)))
T c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
+ |- (((!f. (!u. (!b. ((uniq f) ==> (~ ((MEM u) (SND (((split_at_rec u) b) f)))))))) ==> ((\f. (!u. (!b. ((uniq f) ==> (~ ((MEM u) (SND (((split_at_rec u) b) f)))))))) r)) = ((\f. (!u. (!b. ((uniq f) ==> (~ ((MEM u) (SND (((split_at_rec u) b) f)))))))) r))
T c= c==> ! ! ! c==> cuniq b0 c~ cMEM b1 cSND csplit_at_rec b1 b2 b0 * / ! ! c==> cuniq b0 c~ cMEM b1 cSND csplit_at_rec b1 b2 b0 f0 * / ! ! c==> cuniq b0 c~ cMEM b1 cSND csplit_at_rec b1 b2 b0 f0
+ |- (((!u. (!b. (((MEM u) (FST (((split_at_rec u) b) r))) ==> ((MEM u) b)))) ==> ((\u. (!b. (((MEM u) (FST (((split_at_rec u) b) r))) ==> ((MEM u) b)))) r1)) = ((\u. (!b. (((MEM u) (FST (((split_at_rec u) b) r))) ==> ((MEM u) b)))) r1))
T c= c==> ! ! c==> cMEM b0 cFST csplit_at_rec b0 b1 f0 cMEM b0 b1 * / ! c==> cMEM b0 cFST csplit_at_rec b0 b1 f0 cMEM b0 b1 f1 * / ! c==> cMEM b0 cFST csplit_at_rec b0 b1 f0 cMEM b0 b1 f1
- ((~ (!A. (A \/ (~ A)))) ==> F), (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) |- (((~ (!A. (A \/ (~ A)))) ==> F) /\ ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c/\ c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))) |- ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c~ c= cSND csplit_at f1 f2 cNIL c==> c~ c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ (~ ((SND ((split_at r1) r)) = NIL)), (uniq r), ((MEM r1) r) |- (((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = (((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c==> cuniq f1 c==> cMEM f0 f1 c= c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f2 cSND csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c==> c==> c/\ cMEM f0 f1 cuniq f1 c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cSND csplit_at f0 f1 cNIL c= cHD cFST csplit_at f2 cSND csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
- |- (((!t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l))))) ==> ((\t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l))))) t)) = ((\t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l))))) t))
T c= c==> ! ! c= cAPPEND cCONS f0 b0 b1 cCONS f0 cAPPEND b0 b1 * / ! c= cAPPEND cCONS f0 b0 b1 cCONS f0 cAPPEND b0 b1 f1 * / ! c= cAPPEND cCONS f0 b0 b1 cCONS f0 cAPPEND b0 b1 f1
+ (~ ((MEM r2) (SND ((split_at r1) r)))), ((SND ((split_at r1) r)) = NIL) |- (((~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = ((headl r1) r))) = ((~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)) ==> ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = ((headl r1) r))))
T c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c= cSND csplit_at f1 f2 cNIL c= c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cHD cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2 c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2
+ ((MEM r2) (SND ((split_at r1) r))) |- (((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) = ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> cMEM f0 cSND csplit_at f1 f2 c= c= cHD cFST csplit_at f0 cSND csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0 c= cHD cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ (~ (r1 = r2)), (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- (((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= f0 f1 c==> c~ c= cFST csplit_at f1 cSND csplit_at f0 f2 cNIL c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c==> c==> c/\ cMEM f0 f2 c/\ cMEM f1 f2 c/\ cuniq f2 c/\ c~ c= f0 f1 c/\ cMEM f1 cSND csplit_at f0 f2 c~ c= cFST csplit_at f1 cSND csplit_at f0 f2 cNIL c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ |- ((\b. ((uniq r) ==> (~ ((MEM r1) (SND (((split_at_rec r1) b) r)))))) NIL)
T * / c==> cuniq f0 c~ cMEM f1 cSND csplit_at_rec f1 b0 f0 cNIL
- |- ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)
T * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ |- ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e')))))
T c==> c= c= cSND csplit_at f0 f1 cNIL f2 c==> c==> f2 c= cHD cFST csplit_at f3 cFST csplit_at f0 f1 f4 c==> c==> c~ f2 c= cHD cSND csplit_at f0 f1 f5 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f3 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND f2 f4 f5
+ |- (((!f. (!x. (((LET f) x) = (f x)))) ==> ((\f. (!x. (((LET f) x) = (f x)))) f)) = ((\f. (!x. (((LET f) x) = (f x)))) f))
T c= c==> ! ! c= cLET b0 b1 * b0 b1 * / ! c= cLET b0 b1 * b0 b1 f0 * / ! c= cLET b0 b1 * b0 b1 f0
- (NIL = (FST ((split_at r2) (SND ((split_at r1) r))))) |- ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)
T c==> c= cNIL cFST csplit_at f0 cSND csplit_at f1 f2 c= cFST csplit_at f0 cSND csplit_at f1 f2 cNIL
- (((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)) |- ((((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)) /\ (((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)))
T c==> c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c/\ c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF
+ |- ((((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) ==> (((headl r1) r) = ((headl r1) r))) ==> (((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) e')))) = (((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) e'))))
T c= c==> c==> c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cheadl f0 f1 cheadl f0 f1 c==> c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f2 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 f2 c==> c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 f2 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 f2
- ((MEM r1) r) |- (F = (~ ((MEM r1) r)))
T c==> cMEM f0 f1 c= cF c~ cMEM f0 f1
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ (~ ((SND ((split_at r1) r)) = NIL)), (~ (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL)) |- ((~ (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL)) /\ ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c~ c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c/\ c~ c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ |- (((GABS (\f. (!pre1. (!post1. ((GEQ (f (pre1 , post1))) (LET_END (((COND (r2 IN (set_of_list post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at r2) post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND post1) pre2)))))))) ((split_at r2) pre1))))))))) ((split_at r1) r)) = (LET_END (((COND (r2 IN (set_of_list (SND ((split_at r1) r))))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at r2) (SND ((split_at r1) r))))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND (SND ((split_at r1) r))) pre2)))))))) ((split_at r2) (FST ((split_at r1) r)))))))
T c= cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cCOND cIN f0 * part cset_of_list b2 cLET * part cGABS / ! ! cGEQ * b3 c, b3 b4 cLET_END b3 csplit_at f0 b2 cLET * part cGABS / ! ! cGEQ * b3 c, b3 b4 cLET_END cAPPEND b2 b3 csplit_at f0 b1 csplit_at f1 f2 cLET_END cCOND cIN f0 * part cset_of_list cSND csplit_at f1 f2 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END b1 csplit_at f0 cSND csplit_at f1 f2 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cAPPEND cSND csplit_at f1 f2 b1 csplit_at f0 cFST csplit_at f1 f2
+ |- (((!s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))) ==> ((\s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))) s)) = ((\s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))) s))
T c= c==> ! c= cnext_el b0 f0 cCOND c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 cheadl f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 * / c= cnext_el b0 f0 cCOND c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 cheadl f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 f1 * / c= cnext_el b0 f0 cCOND c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 cheadl f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 f1
+ (~ ((SND ((split_at r1) r)) = NIL)) |- ((~ (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL)) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c~ c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
- |- ((((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))))) = ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))))
T c= c==> c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
- (~ F) |- ((F = F) = T)
T c==> c~ cF c= c= cF cF cT
+ (((MEM r2) r) /\ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL))))), ((MEM r1) r) |- ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c/\ cMEM f0 f1 c/\ c~ c= f2 f0 c/\ cuniq f1 c~ c= cCOND cMEM f0 cSND csplit_at f2 f1 cFST csplit_at f0 cSND csplit_at f2 f1 cAPPEND cSND csplit_at f2 f1 cFST csplit_at f0 cFST csplit_at f2 f1 cNIL c==> cMEM f2 f1 c= cHD cCOND cMEM f0 cSND csplit_at f2 f1 cFST csplit_at f0 cSND csplit_at f2 f1 cAPPEND cSND csplit_at f2 f1 cFST csplit_at f0 cFST csplit_at f2 f1 cCOND c= cindexl f2 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f2 f1 cnth f2 f1 c+ cindexl f2 f1 cNUMERAL cBIT1 c_0
- (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL) |- (NIL = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))
T c==> c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c= cNIL cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1
- |- ((\r1. (!r. ((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))))) r1)
T * / ! c==> c/\ cMEM b0 b1 cuniq b1 c= c= cindexl b0 b1 c- csizel b1 cNUMERAL cBIT1 c_0 c= cSND csplit_at b0 b1 cNIL f0
+ (~ (r1 = r2)), (~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))), (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) /\ ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c==> c~ c= cSND csplit_at f0 f2 cNIL c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c/\ c~ c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
- |- (((MEM r2) (SND ((split_at r1) r))) ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = (FST ((split_at r2) (SND ((split_at r1) r))))))
T c==> cMEM f0 cSND csplit_at f1 f2 c= cFST csplit_at f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2
+ |- ((((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) = ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c= c==> c==> c/\ cMEM f0 f1 c/\ cMEM f2 f1 c/\ cuniq f1 c/\ c~ c= f0 f2 c/\ cMEM f2 cSND csplit_at f0 f1 c~ c= cFST csplit_at f2 cSND csplit_at f0 f1 cNIL c= cHD cFST csplit_at f2 cSND csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f2 cSND csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f2 cSND csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- ((((MEM r2) (SND ((split_at r1) r))) ==> (~ ((SND ((split_at r1) r)) = NIL))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c==> c==> cMEM f1 cSND csplit_at f0 f2 c~ c= cSND csplit_at f0 f2 cNIL c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
- (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)) |- (((~ (NIL = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))))) ==> ((NIL = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = F)) = ((NIL = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = F))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= c==> c~ c= cNIL cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 c= c= cNIL cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cF c= c= cNIL cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cF
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r) |- (((MEM r2) (SND ((split_at r1) r))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
- (~ ((MEM r2) (SND ((split_at r1) r)))) |- ((~ ((MEM r2) (SND ((split_at r1) r)))) /\ (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))))
T c==> c~ cMEM f0 cSND csplit_at f1 f2 c/\ c~ cMEM f0 cSND csplit_at f1 f2 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))), (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))), ((SND ((split_at r1) r)) = NIL) |- ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = ((headl r1) r))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c==> c= cSND csplit_at f1 f2 cNIL c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2
+ |- ((x = x) = T)
T c= c= f0 f0 cT
+ ((MEM r2) (SND ((split_at r1) r))) |- (((~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))) = ((~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> cMEM f0 cSND csplit_at f1 f2 c= c==> c~ c= cFST csplit_at f0 cSND csplit_at f1 f2 cNIL c= cHD cFST csplit_at f0 cSND csplit_at f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0 c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cHD cFST csplit_at f0 cSND csplit_at f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ |- ((\r. ((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL)))) r)
T * / c==> c/\ cMEM f0 b0 cuniq b0 c= c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 c= cSND csplit_at f0 b0 cNIL f1
- (r2 = r1) |- (r1 = r2)
T c==> c= f0 f1 c= f1 f0
+ (~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))), (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (~ ((MEM r2) (SND ((split_at r1) r)))) |- ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) /\ ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c~ c= cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f1 c==> c~ cMEM f0 cSND csplit_at f0 f1 c==> c~ cMEM f2 cSND csplit_at f0 f1 c/\ c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ |- ((\g'. (!t'. (!e'. (((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((headl r1) r) = t')) ==> (((~ g') ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cheadl f0 f1 b1 c==> c==> c~ b0 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 b2 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND b0 b1 b2 f2
- (NIL = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) |- ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)
T c==> c= cNIL cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL
- |- ((\t'. (!e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cMEM f0 cSND csplit_at f1 f2 f3 c==> c==> f3 c= cFST csplit_at f0 cSND csplit_at f1 f2 b0 c==> c==> c~ f3 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b1 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND f3 b0 b1 f4
+ |- ((\e'. (((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((headl r1) r) = t')) ==> (((~ g') ==> ((((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))) = e')) ==> ((((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))) = (((COND g') t') e')))))) e')
T * / c==> c= c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cheadl f0 f1 f3 c==> c==> c~ f2 c= cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 b0 c= cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 cCOND f2 f3 b0 f4
- (~ (!A. (A \/ (~ A)))) |- ((~ (!A. (A \/ (~ A)))) /\ F)
T c==> c~ ! c\/ b0 c~ b0 c/\ c~ ! c\/ b0 c~ b0 cF
- F |- (F = T)
T c==> cF c= cF cT
+ |- ((t = T) = t)
T c= c= f0 cT f0
+ |- (((!l. (((APPEND NIL) l) = l)) ==> ((\l. (((APPEND NIL) l) = l)) l)) = ((\l. (((APPEND NIL) l) = l)) l))
T c= c==> ! c= cAPPEND cNIL b0 b0 * / c= cAPPEND cNIL b0 b0 f0 * / c= cAPPEND cNIL b0 b0 f0
+ |- ((!r. (!r1. (!r2. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)))))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))))) = (!r. (!r1. (!r2. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((betwn r) r1) r2) = NIL)))))) ==> ((HD (((betwn r) r1) r2)) = ((next_el r) r1)))))))
T c= ! ! ! c==> c/\ cMEM b1 b0 c/\ cMEM b2 b0 c/\ c~ c= b1 b2 c/\ cuniq b0 c~ c= cCOND cMEM b2 cSND csplit_at b1 b0 cFST csplit_at b2 cSND csplit_at b1 b0 cAPPEND cSND csplit_at b1 b0 cFST csplit_at b2 cFST csplit_at b1 b0 cNIL c= cHD cCOND cMEM b2 cSND csplit_at b1 b0 cFST csplit_at b2 cSND csplit_at b1 b0 cAPPEND cSND csplit_at b1 b0 cFST csplit_at b2 cFST csplit_at b1 b0 cCOND c= cindexl b1 b0 c- csizel b0 cNUMERAL cBIT1 c_0 cheadl b1 b0 cnth b1 b0 c+ cindexl b1 b0 cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ cMEM b1 b0 c/\ cMEM b2 b0 c/\ c~ c= b1 b2 c/\ cuniq b0 c~ c= cbetwn b0 b1 b2 cNIL c= cHD cbetwn b0 b1 b2 cnext_el b0 b1
+ |- ((\f. (!u. (!b. (((MEM u) (FST (((split_at_rec u) b) f))) ==> ((MEM u) b))))) r)
T * / ! ! c==> cMEM b1 cFST csplit_at_rec b1 b2 b0 cMEM b1 b2 f0
- (~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) |- (((~ (NIL = (FST ((split_at r2) (FST ((split_at r1) r)))))) ==> ((NIL = (FST ((split_at r2) (FST ((split_at r1) r))))) = F)) = ((NIL = (FST ((split_at r2) (FST ((split_at r1) r))))) = F))
T c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= c==> c~ c= cNIL cFST csplit_at f0 cFST csplit_at f1 f2 c= c= cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cF c= c= cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cF
- (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) /\ (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)))
T c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c/\ c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (SND ((split_at r1) r)))) |- ((~ ((MEM r1) (SND ((split_at r1) r)))) /\ ((~ ((MEM r1) (FST ((split_at r1) r)))) ==> ((~ ((MEM r2) (SND ((split_at r1) r)))) ==> ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cSND csplit_at f1 f2 c/\ c~ cMEM f1 cSND csplit_at f1 f2 c==> c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c~ c= cSND csplit_at f1 f2 cNIL c==> c~ c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cnth f1 f2 c+ cindexl f1 f2 cNUMERAL cBIT1 c_0
+ |- ((!r1. (!r2. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)))))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))) = T)
T c= ! ! c==> c/\ cMEM b0 f0 c/\ cMEM b1 f0 c/\ c~ c= b0 b1 c/\ cuniq f0 c~ c= cCOND cMEM b1 cSND csplit_at b0 f0 cFST csplit_at b1 cSND csplit_at b0 f0 cAPPEND cSND csplit_at b0 f0 cFST csplit_at b1 cFST csplit_at b0 f0 cNIL c= cHD cCOND cMEM b1 cSND csplit_at b0 f0 cFST csplit_at b1 cSND csplit_at b0 f0 cAPPEND cSND csplit_at b0 f0 cFST csplit_at b1 cFST csplit_at b0 f0 cCOND c= cindexl b0 f0 c- csizel f0 cNUMERAL cBIT1 c_0 cheadl b0 f0 cnth b0 f0 c+ cindexl b0 f0 cNUMERAL cBIT1 c_0 cT
+ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))) |- ((~ ((MEM r1) (FST ((split_at r1) r)))) /\ ((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((SND ((split_at r1) r)) = NIL) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) ==> ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = ((headl r1) r))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c==> c~ cMEM f1 cFST csplit_at f1 f2 c/\ c~ cMEM f1 cFST csplit_at f1 f2 c==> c~ cMEM f0 cSND csplit_at f1 f2 c==> c= cSND csplit_at f1 f2 cNIL c==> c= cindexl f1 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cAPPEND cNIL cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2
+ |- ((\m. ((HD ((APPEND l) m)) = (((COND (l = NIL)) (HD m)) (HD l)))) m)
T * / c= cHD cAPPEND f0 b0 cCOND c= f0 cNIL cHD b0 cHD f0 f1
+ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) |- (((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = ((headl r1) r)) = ((HD ((APPEND NIL) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= c= cHD cAPPEND cNIL cFST csplit_at f2 cFST csplit_at f0 f1 cheadl f0 f1 c= cHD cAPPEND cNIL cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
- |- (((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) e')))
T c==> c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 f3 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 f3
+ (~ (r1 = r2)), (~ ((SND ((split_at r1) r)) = NIL)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r), ((MEM r2) (SND ((split_at r1) r))) |- (((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cSND csplit_at f0 f2 cNIL c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c==> cMEM f1 cSND csplit_at f0 f2 c==> c==> c/\ cMEM f0 f2 cuniq f2 c= c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cSND csplit_at f0 f2 cNIL c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (FST ((split_at r1) r)))), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r) |- ((~ ((MEM r1) (FST ((split_at r1) r)))) /\ ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c/\ c~ cMEM f0 cFST csplit_at f0 f2 c= cHD cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cCOND c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 cheadl f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
+ |- (((~ ((MEM r1) (FST ((split_at r1) r)))) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = ((((MEM r1) (FST (((split_at_rec r1) NIL) r))) ==> ((MEM r1) NIL)) ==> ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))
T c= c==> c~ cMEM f0 cFST csplit_at f0 f1 c= cHD cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0 c==> c==> cMEM f0 cFST csplit_at_rec f0 cNIL f1 cMEM f0 cNIL c= cHD cCOND cMEM f2 cSND csplit_at f0 f1 cFST csplit_at f2 cSND csplit_at f0 f1 cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cCOND c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
+ (~ (r1 = r2)), (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)), (~ ((MEM r1) (SND ((split_at r1) r)))), (uniq r), ((MEM r1) r), ((MEM r2) r) |- ((~ ((MEM r1) (SND ((split_at r1) r)))) /\ ((~ ((MEM r1) (FST ((split_at r1) r)))) ==> (((MEM r2) (SND ((split_at r1) r))) ==> ((~ ((SND ((split_at r1) r)) = NIL)) ==> ((~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))))
T c==> c~ c= f0 f1 c==> c~ c= cCOND cMEM f1 cSND csplit_at f0 f2 cFST csplit_at f1 cSND csplit_at f0 f2 cAPPEND cSND csplit_at f0 f2 cFST csplit_at f1 cFST csplit_at f0 f2 cNIL c==> c~ cMEM f0 cSND csplit_at f0 f2 c==> cuniq f2 c==> cMEM f0 f2 c==> cMEM f1 f2 c/\ c~ cMEM f0 cSND csplit_at f0 f2 c==> c~ cMEM f0 cFST csplit_at f0 f2 c==> cMEM f1 cSND csplit_at f0 f2 c==> c~ c= cSND csplit_at f0 f2 cNIL c==> c~ c= cindexl f0 f2 c- csizel f2 cNUMERAL cBIT1 c_0 c= cHD cFST csplit_at f1 cSND csplit_at f0 f2 cnth f0 f2 c+ cindexl f0 f2 cNUMERAL cBIT1 c_0
- |- (((!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) ==> ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2)) = ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2))
T c= c==> ! c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
- |- ((!A'. ((~ A) \/ A')) = ((~ A) \/ (!A. A)))
T c= ! c\/ c~ f0 b0 c\/ c~ f0 ! b0
+ |- (((!xs. ((((split_at_rec c) NIL) xs) = ((split_at c) xs))) ==> ((\xs. ((((split_at_rec c) NIL) xs) = ((split_at c) xs))) xs)) = ((\xs. ((((split_at_rec c) NIL) xs) = ((split_at c) xs))) xs))
T c= c==> ! c= csplit_at_rec f0 cNIL b0 csplit_at f0 b0 * / c= csplit_at_rec f0 cNIL b0 csplit_at f0 b0 f1 * / c= csplit_at_rec f0 cNIL b0 csplit_at f0 b0 f1
- (~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) |- (T = (~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)))
T c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cT c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL
+ |- ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) ==> (((headl r1) r) = ((headl r1) r)))
T c==> c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= cheadl f0 f1 cheadl f0 f1
+ (((MEM r2) r) /\ ((~ (r1 = r2)) /\ ((uniq r) /\ (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL))))), ((MEM r1) r), ((MEM r2) r) |- ((HD (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = (((COND (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) ((headl r1) r)) (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c/\ cMEM f0 f1 c/\ c~ c= f2 f0 c/\ cuniq f1 c~ c= cCOND cMEM f0 cSND csplit_at f2 f1 cFST csplit_at f0 cSND csplit_at f2 f1 cAPPEND cSND csplit_at f2 f1 cFST csplit_at f0 cFST csplit_at f2 f1 cNIL c==> cMEM f2 f1 c==> cMEM f0 f1 c= cHD cCOND cMEM f0 cSND csplit_at f2 f1 cFST csplit_at f0 cSND csplit_at f2 f1 cAPPEND cSND csplit_at f2 f1 cFST csplit_at f0 cFST csplit_at f2 f1 cCOND c= cindexl f2 f1 c- csizel f1 cNUMERAL cBIT1 c_0 cheadl f2 f1 cnth f2 f1 c+ cindexl f2 f1 cNUMERAL cBIT1 c_0
- (~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) |- ((~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) /\ ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = ((headl r1) r)))
T c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c/\ c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cHD cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2
+ (~ ((SND ((split_at r1) r)) = NIL)) |- ((F ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ F) ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND F) t') e'))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c==> c==> cF c= cHD cFST csplit_at f2 cFST csplit_at f0 f1 f3 c==> c==> c~ cF c= cHD cSND csplit_at f0 f1 f4 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f2 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND cF f3 f4
- |- (((!r2. (!r1. (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))) ==> ((\r2. (!r1. (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))) r2)) = ((\r2. (!r1. (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))))) r2))
T c= c==> ! ! ! c==> c/\ cMEM b1 b2 c/\ cMEM b0 b2 c/\ cuniq b2 c/\ c~ c= b1 b0 c/\ cMEM b0 cSND csplit_at b1 b2 c~ c= cFST csplit_at b0 cSND csplit_at b1 b2 cNIL c= cHD cFST csplit_at b0 cSND csplit_at b1 b2 cnth b1 b2 c+ cindexl b1 b2 cNUMERAL cBIT1 c_0 * / ! ! c==> c/\ cMEM b1 b2 c/\ cMEM b0 b2 c/\ cuniq b2 c/\ c~ c= b1 b0 c/\ cMEM b0 cSND csplit_at b1 b2 c~ c= cFST csplit_at b0 cSND csplit_at b1 b2 cNIL c= cHD cFST csplit_at b0 cSND csplit_at b1 b2 cnth b1 b2 c+ cindexl b1 b2 cNUMERAL cBIT1 c_0 f0 * / ! ! c==> c/\ cMEM b1 b2 c/\ cMEM b0 b2 c/\ cuniq b2 c/\ c~ c= b1 b0 c/\ cMEM b0 cSND csplit_at b1 b2 c~ c= cFST csplit_at b0 cSND csplit_at b1 b2 cNIL c= cHD cFST csplit_at b0 cSND csplit_at b1 b2 cnth b1 b2 c+ cindexl b1 b2 cNUMERAL cBIT1 c_0 f0
- |- (((~ (!A. ((~ A) \/ A))) ==> F) = (!A. ((~ A) \/ A)))
T c= c==> c~ ! c\/ c~ b0 b0 cF ! c\/ c~ b0 b0
- (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)) |- (((~ (NIL = (FST ((split_at r2) (SND ((split_at r1) r)))))) ==> ((NIL = (FST ((split_at r2) (SND ((split_at r1) r))))) = F)) = ((NIL = (FST ((split_at r2) (SND ((split_at r1) r))))) = F))
T c==> c~ c= cFST csplit_at f0 cSND csplit_at f1 f2 cNIL c= c==> c~ c= cNIL cFST csplit_at f0 cSND csplit_at f1 f2 c= c= cNIL cFST csplit_at f0 cSND csplit_at f1 f2 cF c= c= cNIL cFST csplit_at f0 cSND csplit_at f1 f2 cF
+ |- (((!g'. (!t'. (!e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((SND ((split_at r1) r)) = NIL) = g') ==> ((g' ==> ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = t')) ==> (((~ g') ==> ((HD (SND ((split_at r1) r))) = e')) ==> ((((COND ((SND ((split_at r1) r)) = NIL)) (HD (FST ((split_at r2) (FST ((split_at r1) r)))))) (HD (SND ((split_at r1) r)))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= cSND csplit_at f0 f1 cNIL b0 c==> c==> b0 c= cHD cFST csplit_at f2 cFST csplit_at f0 f1 b1 c==> c==> c~ b0 c= cHD cSND csplit_at f0 f1 b2 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f2 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND b0 b1 b2 * / ! ! c==> c= c= cSND csplit_at f0 f1 cNIL b0 c==> c==> b0 c= cHD cFST csplit_at f2 cFST csplit_at f0 f1 b1 c==> c==> c~ b0 c= cHD cSND csplit_at f0 f1 b2 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f2 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND b0 b1 b2 f3 * / ! ! c==> c= c= cSND csplit_at f0 f1 cNIL b0 c==> c==> b0 c= cHD cFST csplit_at f2 cFST csplit_at f0 f1 b1 c==> c==> c~ b0 c= cHD cSND csplit_at f0 f1 b2 c= cCOND c= cSND csplit_at f0 f1 cNIL cHD cFST csplit_at f2 cFST csplit_at f0 f1 cHD cSND csplit_at f0 f1 cCOND b0 b1 b2 f3
+ |- ((\ram1. (!vs. ((((betwn vs) ram1) ram2) = ((LET (GABS (\f. (!pre1. (!post1. ((GEQ (f (pre1 , post1))) (LET_END (((COND (ram2 IN (set_of_list post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at ram2) post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND post1) pre2)))))))) ((split_at ram2) pre1)))))))))) ((split_at ram1) vs))))) ram1)
T * / ! c= cbetwn b1 b0 f0 cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cCOND cIN f0 * part cset_of_list b4 cLET * part cGABS / ! ! cGEQ * b5 c, b5 b6 cLET_END b5 csplit_at f0 b4 cLET * part cGABS / ! ! cGEQ * b5 c, b5 b6 cLET_END cAPPEND b4 b5 csplit_at f0 b3 csplit_at b0 b1 f1
+ |- (((!x. (((MEM x) (SND ((split_at r1) r))) ==> (~ ((SND ((split_at r1) r)) = NIL)))) ==> ((\x. (((MEM x) (SND ((split_at r1) r))) ==> (~ ((SND ((split_at r1) r)) = NIL)))) r2)) = ((\x. (((MEM x) (SND ((split_at r1) r))) ==> (~ ((SND ((split_at r1) r)) = NIL)))) r2))
T c= c==> ! c==> cMEM b0 cSND csplit_at f0 f1 c~ c= cSND csplit_at f0 f1 cNIL * / c==> cMEM b0 cSND csplit_at f0 f1 c~ c= cSND csplit_at f0 f1 cNIL f2 * / c==> cMEM b0 cSND csplit_at f0 f1 c~ c= cSND csplit_at f0 f1 cNIL f2
- (~ ((SND ((split_at r1) r)) = NIL)) |- (~ (NIL = (SND ((split_at r1) r))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c~ c= cNIL cSND csplit_at f0 f1
- (~ ((SND ((split_at r1) r)) = NIL)) |- ((~ ((SND ((split_at r1) r)) = NIL)) /\ ((HD (SND ((split_at r1) r))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c/\ c~ c= cSND csplit_at f0 f1 cNIL c= cHD cSND csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
- (~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) |- (~ (((sizel r) - (NUMERAL (BIT1 _0))) = ((indexl r1) r)))
T c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c~ c= c- csizel f1 cNUMERAL cBIT1 c_0 cindexl f0 f1
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
- ((~ (!A. ((~ A) \/ A))) ==> F), (((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)) |- ((((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)) /\ ((~ (!A. ((~ A) \/ A))) ==> F))
T c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c/\ c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF
- (~ ((MEM r1) (SND ((split_at r1) r)))) |- (((MEM r1) (SND ((split_at r1) r))) = F)
T c==> c~ cMEM f0 cSND csplit_at f0 f1 c= cMEM f0 cSND csplit_at f0 f1 cF
- |- ((\h. (!t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))))) h)
T * / ! ! c= cAPPEND cCONS b0 b1 b2 cCONS b0 cAPPEND b1 b2 f0
- |- ((!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))) = T)
T c= ! c==> c/\ cMEM f0 b0 c/\ cMEM f1 b0 c/\ cuniq b0 c/\ c~ c= f0 f1 c/\ cMEM f1 cSND csplit_at f0 b0 c~ c= cFST csplit_at f1 cSND csplit_at f0 b0 cNIL c= cHD cFST csplit_at f1 cSND csplit_at f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 cT
- (((sizel r) - (NUMERAL (BIT1 _0))) = ((indexl r1) r)) |- (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))
T c==> c= c- csizel f0 cNUMERAL cBIT1 c_0 cindexl f1 f0 c= cindexl f1 f0 c- csizel f0 cNUMERAL cBIT1 c_0
- |- (((!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))) ==> ((\l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))) l)) = ((\l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))) l))
T c= c==> ! c= cAPPEND cCONS f0 f1 b0 cCONS f0 cAPPEND f1 b0 * / c= cAPPEND cCONS f0 f1 b0 cCONS f0 cAPPEND f1 b0 f2 * / c= cAPPEND cCONS f0 f1 b0 cCONS f0 cAPPEND f1 b0 f2
- |- ((((~ (!A. ((~ A) \/ A))) ==> F) ==> ((~ (!A. ((~ A) \/ A))) ==> F)) = ((~ (!A. ((~ A) \/ A))) ==> F))
T c= c==> c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF c==> c~ ! c\/ c~ b0 b0 cF
- (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) |- (((sizel r) - (NUMERAL (BIT1 _0))) = ((indexl r1) r))
T c==> c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= c- csizel f1 cNUMERAL cBIT1 c_0 cindexl f0 f1
- ((~ (!A. (A \/ (~ A)))) ==> F), (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) /\ ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c/\ c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- |- (((((MEM r2) (SND ((split_at r1) r))) ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = (FST ((split_at r2) (SND ((split_at r1) r)))))) ==> (((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) e')))) = (((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) e'))))
T c= c==> c==> cMEM f0 cSND csplit_at f1 f2 c= cFST csplit_at f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 c==> c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 f3 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 f3 c==> c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 f3 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 f3
- |- ((T \/ t) = T)
T c= c\/ cT f0 cT
- (~ (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL)) |- (((~ (NIL = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) ==> ((NIL = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = F)) = ((NIL = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = F))
T c==> c~ c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c= c==> c~ c= cNIL cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 c= c= cNIL cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cF c= c= cNIL cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cF
- |- ((!A. (P \/ (Q A))) = (P \/ (!A. (Q A))))
T c= ! c\/ f0 * f1 b0 c\/ f0 ! * f1 b0
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- |- ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)
T * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- (((((MEM r2) (SND ((split_at r1) r))) = ((MEM r2) (SND ((split_at r1) r)))) ==> ((((MEM r2) (SND ((split_at r1) r))) ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND ((MEM r2) (SND ((split_at r1) r)))) t') e'))))) = ((((MEM r2) (SND ((split_at r1) r))) ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ ((MEM r2) (SND ((split_at r1) r)))) ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND ((MEM r2) (SND ((split_at r1) r)))) t') e')))))
T c= c==> c= cMEM f0 cSND csplit_at f1 f2 cMEM f0 cSND csplit_at f1 f2 c==> c==> cMEM f0 cSND csplit_at f1 f2 c= cFST csplit_at f0 cSND csplit_at f1 f2 f3 c==> c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 f4 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND cMEM f0 cSND csplit_at f1 f2 f3 f4 c==> c==> cMEM f0 cSND csplit_at f1 f2 c= cFST csplit_at f0 cSND csplit_at f1 f2 f3 c==> c==> c~ cMEM f0 cSND csplit_at f1 f2 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 f4 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND cMEM f0 cSND csplit_at f1 f2 f3 f4
- |- (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))
T c= cAPPEND cCONS f0 f1 f2 cCONS f0 cAPPEND f1 f2
- |- (((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) ==> (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F))) = (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)))
T c= c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- (~ (r1 = r2)) |- (~ (r2 = r1))
T c==> c~ c= f0 f1 c~ c= f1 f0
- ((~ (!A. (A \/ (~ A)))) ==> F) |- (((~ (!A. (A \/ (~ A)))) ==> F) /\ ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c/\ c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- |- ((\r1. (!r. ((((MEM r1) r) /\ (((MEM r2) r) /\ ((uniq r) /\ ((~ (r1 = r2)) /\ (((MEM r2) (SND ((split_at r1) r))) /\ (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL))))))) ==> ((HD (FST ((split_at r2) (SND ((split_at r1) r))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0)))))))) r1)
T * / ! c==> c/\ cMEM b0 b1 c/\ cMEM f0 b1 c/\ cuniq b1 c/\ c~ c= b0 f0 c/\ cMEM f0 cSND csplit_at b0 b1 c~ c= cFST csplit_at f0 cSND csplit_at b0 b1 cNIL c= cHD cFST csplit_at f0 cSND csplit_at b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 f1
- |- ((~ T) = F)
T c= c~ cT cF
- (~ F) |- (F = F)
T c==> c~ cF c= cF cF
- (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)) |- (~ (NIL = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))))
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c~ c= cNIL cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2
- |- ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2)
T * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
- |- ((\t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l))))) t)
T * / ! c= cAPPEND cCONS f0 b0 b1 cCONS f0 cAPPEND b0 b1 f1
- (~ (r1 = r2)) |- ((r2 = r1) = F)
T c==> c~ c= f0 f1 c= c= f1 f0 cF
- |- ((F \/ t) = t)
T c= c\/ cF f0 f0
- (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)) |- ((NIL = (FST ((split_at r2) (SND ((split_at r1) r))))) = F)
T c==> c~ c= cFST csplit_at f0 cSND csplit_at f1 f2 cNIL c= c= cNIL cFST csplit_at f0 cSND csplit_at f1 f2 cF
- |- ((\r. ((~ ((MEM ram1) r)) ==> (((split_at ram1) r) = (r , NIL)))) r)
T * / c==> c~ cMEM f0 b0 c= csplit_at f0 b0 c, b0 cNIL f1
- ((MEM r2) (SND ((split_at r1) r))) |- (F = (~ ((MEM r2) (SND ((split_at r1) r)))))
T c==> cMEM f0 cSND csplit_at f1 f2 c= cF c~ cMEM f0 cSND csplit_at f1 f2
- (~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) |- (((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL) = F)
T c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL cF
- (~ ((SND ((split_at r1) r)) = NIL)) |- (T = ((HD ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((nth r1) r) (((indexl r1) r) + (NUMERAL (BIT1 _0))))))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c= cT c= cHD cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cnth f0 f1 c+ cindexl f0 f1 cNUMERAL cBIT1 c_0
- |- ((\e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e')))))) e')
T * / c==> c= cMEM f0 cSND csplit_at f1 f2 f3 c==> c==> f3 c= cFST csplit_at f0 cSND csplit_at f1 f2 f4 c==> c==> c~ f3 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b0 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND f3 f4 b0 f5
- |- ((!A. (P A)) = ((P T) /\ (P F)))
T c= ! * f0 b0 c/\ * f0 cT * f0 cF
- (~ (((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0))))) |- (((~ (((sizel r) - (NUMERAL (BIT1 _0))) = ((indexl r1) r))) ==> ((((sizel r) - (NUMERAL (BIT1 _0))) = ((indexl r1) r)) = F)) = ((((sizel r) - (NUMERAL (BIT1 _0))) = ((indexl r1) r)) = F))
T c==> c~ c= cindexl f0 f1 c- csizel f1 cNUMERAL cBIT1 c_0 c= c==> c~ c= c- csizel f1 cNUMERAL cBIT1 c_0 cindexl f0 f1 c= c= c- csizel f1 cNUMERAL cBIT1 c_0 cindexl f0 f1 cF c= c= c- csizel f1 cNUMERAL cBIT1 c_0 cindexl f0 f1 cF
- (~ (!A. ((~ A) \/ A))) |- F
T c==> c~ ! c\/ c~ b0 b0 cF
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))
T c= cMEM f0 cAPPEND f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- (((!g'. (!t'. (!e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cMEM f0 cSND csplit_at f1 f2 b0 c==> c==> b0 c= cFST csplit_at f0 cSND csplit_at f1 f2 b1 c==> c==> c~ b0 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b2 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND b0 b1 b2 * / ! ! c==> c= cMEM f0 cSND csplit_at f1 f2 b0 c==> c==> b0 c= cFST csplit_at f0 cSND csplit_at f1 f2 b1 c==> c==> c~ b0 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b2 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND b0 b1 b2 f3 * / ! ! c==> c= cMEM f0 cSND csplit_at f1 f2 b0 c==> c==> b0 c= cFST csplit_at f0 cSND csplit_at f1 f2 b1 c==> c==> c~ b0 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b2 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND b0 b1 b2 f3
- ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL) |- (NIL = (FST ((split_at r2) (FST ((split_at r1) r)))))
T c==> c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cNIL cFST csplit_at f0 cFST csplit_at f1 f2
- (~ ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = NIL)) |- ((NIL = (((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))))) = F)
T c==> c~ c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= c= cNIL cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cF
- |- (((!t'. (!e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((MEM r2) (SND ((split_at r1) r))) = g') ==> ((g' ==> ((FST ((split_at r2) (SND ((split_at r1) r)))) = t')) ==> (((~ g') ==> (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = e')) ==> ((((COND ((MEM r2) (SND ((split_at r1) r)))) (FST ((split_at r2) (SND ((split_at r1) r))))) ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cMEM f0 cSND csplit_at f1 f2 f3 c==> c==> f3 c= cFST csplit_at f0 cSND csplit_at f1 f2 b0 c==> c==> c~ f3 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b1 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND f3 b0 b1 * / ! c==> c= cMEM f0 cSND csplit_at f1 f2 f3 c==> c==> f3 c= cFST csplit_at f0 cSND csplit_at f1 f2 b0 c==> c==> c~ f3 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b1 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND f3 b0 b1 f4 * / ! c==> c= cMEM f0 cSND csplit_at f1 f2 f3 c==> c==> f3 c= cFST csplit_at f0 cSND csplit_at f1 f2 b0 c==> c==> c~ f3 c= cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 b1 c= cCOND cMEM f0 cSND csplit_at f1 f2 cFST csplit_at f0 cSND csplit_at f1 f2 cAPPEND cSND csplit_at f1 f2 cFST csplit_at f0 cFST csplit_at f1 f2 cCOND f3 b0 b1 f4
- (~ ((MEM r1) (FST ((split_at r1) r)))) |- (((MEM r1) (FST ((split_at r1) r))) = F)
T c==> c~ cMEM f0 cFST csplit_at f0 f1 c= cMEM f0 cFST csplit_at f0 f1 cF
- (~ (((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r))))) = NIL)) |- ((NIL = ((APPEND (SND ((split_at r1) r))) (FST ((split_at r2) (FST ((split_at r1) r)))))) = F)
T c==> c~ c= cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cNIL c= c= cNIL cAPPEND cSND csplit_at f0 f1 cFST csplit_at f2 cFST csplit_at f0 f1 cF
- |- ((!r. ((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL)))) = T)
T c= ! c==> c/\ cMEM f0 b0 cuniq b0 c= c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 c= cSND csplit_at f0 b0 cNIL cT
- (~ ((SND ((split_at r1) r)) = NIL)) |- (T = (~ ((SND ((split_at r1) r)) = NIL)))
T c==> c~ c= cSND csplit_at f0 f1 cNIL c= cT c~ c= cSND csplit_at f0 f1 cNIL
- |- (T = ((~ (!A. ((~ A) \/ A))) ==> F))
T c= cT c==> c~ ! c\/ c~ b0 b0 cF
- (~ (!A. ((~ A) \/ A))) |- ((~ (!A. ((~ A) \/ A))) /\ F)
T c==> c~ ! c\/ c~ b0 b0 c/\ c~ ! c\/ c~ b0 b0 cF
- (~ ((MEM ram1) r)) |- (((split_at ram1) r) = (r , NIL))
T c==> c~ cMEM f0 f1 c= csplit_at f0 f1 c, f1 cNIL
- (~ ((MEM ram1) r)) |- ((~ ((MEM ram1) r)) /\ (((split_at ram1) r) = (r , NIL)))
T c==> c~ cMEM f0 f1 c/\ c~ cMEM f0 f1 c= csplit_at f0 f1 c, f1 cNIL
- |- (((~ (!A. (A \/ (~ A)))) ==> F) = (!A. (A \/ (~ A))))
T c= c==> c~ ! c\/ b0 c~ b0 cF ! c\/ b0 c~ b0
- (~ ((SND ((split_at r1) r)) = NIL)) |- ((NIL = (SND ((split_at r1) r))) = F)
T c==> c~ c= cSND csplit_at f0 f1 cNIL c= c= cNIL cSND csplit_at f0 f1 cF
- ((~ (!A. (A \/ (~ A)))) ==> F) |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) ==> ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- (~ ((FST ((split_at r2) (SND ((split_at r1) r)))) = NIL)) |- (~ (NIL = (FST ((split_at r2) (SND ((split_at r1) r))))))
T c==> c~ c= cFST csplit_at f0 cSND csplit_at f1 f2 cNIL c~ c= cNIL cFST csplit_at f0 cSND csplit_at f1 f2
- (~ ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)) |- (T = ((HD (FST ((split_at r2) (FST ((split_at r1) r))))) = ((headl r1) r)))
T c==> c~ c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL c= cT c= cHD cFST csplit_at f0 cFST csplit_at f1 f2 cheadl f1 f2
- (NIL = (SND ((split_at r1) r))) |- ((SND ((split_at r1) r)) = NIL)
T c==> c= cNIL cSND csplit_at f0 f1 c= cSND csplit_at f0 f1 cNIL
- (NIL = (FST ((split_at r2) (FST ((split_at r1) r))))) |- ((FST ((split_at r2) (FST ((split_at r1) r)))) = NIL)
T c==> c= cNIL cFST csplit_at f0 cFST csplit_at f1 f2 c= cFST csplit_at f0 cFST csplit_at f1 f2 cNIL
- |- (((!r1. (!r. ((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))))) ==> ((\r1. (!r. ((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))))) r1)) = ((\r1. (!r. ((((MEM r1) r) /\ (uniq r)) ==> ((((indexl r1) r) = ((sizel r) - (NUMERAL (BIT1 _0)))) = ((SND ((split_at r1) r)) = NIL))))) r1))
T c= c==> ! ! c==> c/\ cMEM b0 b1 cuniq b1 c= c= cindexl b0 b1 c- csizel b1 cNUMERAL cBIT1 c_0 c= cSND csplit_at b0 b1 cNIL * / ! c==> c/\ cMEM b0 b1 cuniq b1 c= c= cindexl b0 b1 c- csizel b1 cNUMERAL cBIT1 c_0 c= cSND csplit_at b0 b1 cNIL f0 * / ! c==> c/\ cMEM b0 b1 cuniq b1 c= c= cindexl b0 b1 c- csizel b1 cNUMERAL cBIT1 c_0 c= cSND csplit_at b0 b1 cNIL f0
