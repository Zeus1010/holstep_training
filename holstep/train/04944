N Collect_geom.FAFKVLR
C |- (?t1. (?t2. (?t3. (!v1. (!v2. (!v3. (!v. (((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> ((v = ((vector_add ((% ((((t1 v1) v2) v3) v)) v1)) ((vector_add ((% ((((t2 v1) v2) v3) v)) v2)) ((% ((((t3 v1) v2) v3) v)) v3)))) /\ ((((real_add ((((t1 v1) v2) v3) v)) ((real_add ((((t2 v1) v2) v3) v)) ((((t3 v1) v2) v3) v))) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = ((((t1 v1) v2) v3) v)) /\ ((tb = ((((t2 v1) v2) v3) v)) /\ (tc = ((((t3 v1) v2) v3) v))))))))))))))))))
T c? / c? / c? / ! ! ! ! c==> c/\ cIN b6 * * part chull part caffine * * part cINSERT b3 * * part cINSERT b4 * * part cINSERT b5 part cEMPTY c~ ccollinear * * part cINSERT b3 * * part cINSERT b4 * * part cINSERT b5 part cEMPTY c/\ c= b6 cvector_add c% * * * * b0 b3 b4 b5 b6 b3 cvector_add c% * * * * b1 b3 b4 b5 b6 b4 c% * * * * b2 b3 b4 b5 b6 b5 c/\ c= creal_add * * * * b0 b3 b4 b5 b6 creal_add * * * * b1 b3 b4 b5 b6 * * * * b2 b3 b4 b5 b6 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= b6 cvector_add c% b7 b3 cvector_add c% b8 b4 c% b9 b5 c= creal_add b7 creal_add b8 b9 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b7 * * * * b0 b3 b4 b5 b6 c/\ c= b8 * * * * b1 b3 b4 b5 b6 c= b9 * * * * b2 b3 b4 b5 b6
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D EXP_2
A |- (!n. ((n EXP (NUMERAL (BIT0 (BIT1 _0)))) = (n * n)))
T c= cEXP f0 cNUMERAL cBIT0 cBIT1 c_0 c* f0 f0
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D LT_REFL
A |- (!n. (~ (n < n)))
T c~ c< f0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D ARITH_ZERO
A |- (((NUMERAL (NUMERAL _0)) = (NUMERAL _0)) /\ ((BIT0 _0) = _0))
T c/\ c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0 c= cBIT0 c_0 c_0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D ARITH_MULT
A |- ((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) /\ (((_0 * _0) = _0) /\ ((!n. ((_0 * (BIT0 n)) = _0)) /\ ((!n. ((_0 * (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))))))
T c/\ ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 c/\ c= c* c_0 c_0 c_0 c/\ ! c= c* c_0 cBIT0 b0 c_0 c/\ ! c= c* c_0 cBIT1 b0 c_0 c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
D ARITH_EXP
A |- ((!m. (!n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n))))) /\ (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))))))
T c/\ ! ! c= cEXP cNUMERAL b0 cNUMERAL b1 cNUMERAL cEXP b0 b1 c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
D REAL_ADD_LID
A |- (!x. (((real_add (real_of_num (NUMERAL _0))) x) = x))
T c= creal_add creal_of_num cNUMERAL c_0 f0 f0
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_MUL_LID
A |- (!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x))
T c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 f0 f0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_ADD_RID
A |- (!x. (((real_add x) (real_of_num (NUMERAL _0))) = x))
T c= creal_add f0 creal_of_num cNUMERAL c_0 f0
D REAL_ADD_RINV
A |- (!x. (((real_add x) (real_neg x)) = (real_of_num (NUMERAL _0))))
T c= creal_add f0 creal_neg f0 creal_of_num cNUMERAL c_0
D REAL_MUL_RZERO
A |- (!x. (((real_mul x) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0))))
T c= creal_mul f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_LE_LT
A |- (!x. (!y. (((real_le x) y) = (((real_lt x) y) \/ (x = y)))))
T c= creal_le f0 f1 c\/ creal_lt f0 f1 c= f0 f1
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D Real_ext.REAL_PROP_POS_ADD2
A |- (!x. (!y. ((((real_lt (real_of_num (NUMERAL _0))) x) /\ ((real_lt (real_of_num (NUMERAL _0))) y)) ==> ((real_lt (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c==> c/\ creal_lt creal_of_num cNUMERAL c_0 f0 creal_lt creal_of_num cNUMERAL c_0 f1 creal_lt creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D REAL_NEG_MINUS1
A |- (!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x)))
T c= creal_neg f0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 f0
D EXTENSION
A |- (!s. (!t. ((s = t) = (!x. ((x IN s) = (x IN t))))))
T c= c= f0 f1 ! c= cIN b0 f0 cIN b0 f1
D Hypermap_iso.inE
A |- ((!p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) /\ ((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x)))))))
T c/\ ! ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 c/\ ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
D FINITE_RULES
A |- ((FINITE EMPTY) /\ (!x. (!s. ((FINITE s) ==> (FINITE (x INSERT s))))))
T c/\ cFINITE part cEMPTY ! ! c==> cFINITE b1 cFINITE * * part cINSERT b0 b1
D NOT_IN_EMPTY
A |- (!x. (~ (x IN EMPTY)))
T c~ cIN f0 part cEMPTY
D IN_INSERT
A |- (!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))))
T c= cIN f0 * * part cINSERT f1 f2 c\/ c= f0 f1 cIN f0 f2
D IN_DELETE
A |- (!s. (!x. (!y. ((x IN (s DELETE y)) = ((x IN s) /\ (~ (x = y)))))))
T c= cIN f0 * * part cDELETE f1 f2 c/\ cIN f0 f1 c~ c= f0 f2
D INSERT_AC
A |- (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))
T c/\ c= * * part cINSERT f0 * * part cINSERT f1 f2 * * part cINSERT f1 * * part cINSERT f0 f2 c= * * part cINSERT f0 * * part cINSERT f0 f2 * * part cINSERT f0 f2
D FINITE_INSERT
A |- (!s. (!x. ((FINITE (x INSERT s)) = (FINITE s))))
T c= cFINITE * * part cINSERT f0 f1 cFINITE f1
D FINITE_SING
A |- (!a. (FINITE (a INSERT EMPTY)))
T cFINITE * * part cINSERT f0 part cEMPTY
D SUM_CLAUSES
A |- ((!f. (((sum EMPTY) f) = (real_of_num (NUMERAL _0)))) /\ (!x. (!f. (!s. ((FINITE s) ==> (((sum (x INSERT s)) f) = (((COND (x IN s)) ((sum s) f)) ((real_add (f x)) ((sum s) f)))))))))
T c/\ ! c= csum part cEMPTY b0 creal_of_num cNUMERAL c_0 ! ! ! c==> cFINITE b2 c= csum * * part cINSERT b0 b2 b1 cCOND cIN b0 b2 csum b2 b1 creal_add * b1 b0 csum b2 b1
D SUM_SING
A |- (!f. (!x. (((sum (x INSERT EMPTY)) f) = (f x))))
T c= csum * * part cINSERT f0 part cEMPTY f1 * f1 f0
D CART_EQ
A |- (!x. (!y. ((x = y) = (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> ((x $ i) = (y $ i)))))))
T c= c= f0 f1 ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c<= b0 cdimindex part cUNIV c= c$ f0 b0 c$ f1 b0
D LAMBDA_BETA
A |- (!i. ((((NUMERAL (BIT1 _0)) <= i) /\ (i <= (dimindex UNIV))) ==> (((lambda g) $ i) = (g i))))
T c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= c$ clambda f1 f0 * f1 f0
D vector_add
A |- (!x. (!y. (((vector_add x) y) = (lambdai. ((real_add (x $ i)) (y $ i))))))
T c= cvector_add f0 f1 clambda / creal_add c$ f0 b0 c$ f1 b0
D vector_mul
A |- (!c. (!x. (((% c) x) = (lambdai. ((real_mul c) (x $ i))))))
T c= c% f0 f1 clambda / creal_mul f0 c$ f1 b0
D vec
A |- (!n. ((vec n) = (lambdai. (real_of_num n))))
T c= cvec f0 clambda / creal_of_num f0
D VECTOR_ADD_RID
A |- (!x. (((vector_add x) (vec (NUMERAL _0))) = x))
T c= cvector_add f0 cvec cNUMERAL c_0 f0
D VSUM_CLAUSES
A |- ((!f. (((vsum EMPTY) f) = (vec (NUMERAL _0)))) /\ (!x. (!f. (!s. ((FINITE s) ==> (((vsum (x INSERT s)) f) = (((COND (x IN s)) ((vsum s) f)) ((vector_add (f x)) ((vsum s) f)))))))))
T c/\ ! c= cvsum part cEMPTY b0 cvec cNUMERAL c_0 ! ! ! c==> cFINITE b2 c= cvsum * * part cINSERT b0 b2 b1 cCOND cIN b0 b2 cvsum b2 b1 cvector_add * b1 b0 cvsum b2 b1
D VSUM_SING
A |- (!f. (!x. (((vsum (x INSERT EMPTY)) f) = (f x))))
T c= cvsum * * part cINSERT f0 part cEMPTY f1 * f1 f0
D COLLINEAR_2
A |- (!x. (!y. (collinear (x INSERT (y INSERT EMPTY)))))
T ccollinear * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
D affine_dependent
A |- (!s. ((affine_dependent s) = (?x. ((x IN s) /\ (x IN ((hull affine) (s DELETE x)))))))
T c= caffine_dependent f0 c? / c/\ cIN b0 f0 cIN b0 * * part chull part caffine * * part cDELETE f0 b0
D AFFINE_DEPENDENT_EXPLICIT_FINITE
A |- (!s. ((FINITE s) ==> ((affine_dependent s) = (?u. ((((sum s) u) = (real_of_num (NUMERAL _0))) /\ ((?v. ((v IN s) /\ (~ ((u v) = (real_of_num (NUMERAL _0)))))) /\ (((vsum s) (\v. ((% (u v)) v))) = (vec (NUMERAL _0)))))))))
T c==> cFINITE f0 c= caffine_dependent f0 c? / c/\ c= csum f0 b0 creal_of_num cNUMERAL c_0 c/\ c? / c/\ cIN b1 f0 c~ c= * b0 b1 creal_of_num cNUMERAL c_0 c= cvsum f0 / c% * b0 b1 b1 cvec cNUMERAL c_0
D Collect_geom.AFFINE_HULL_FINITE
A |- (!s. ((FINITE s) ==> (((hull affine) s) = (GSPEC (\GEN%PVAR%5275. (?y. (((SETSPEC GEN%PVAR%5275) (?u. ((((sum s) u) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (((vsum s) (\v. ((% (u v)) v))) = y)))) y)))))))
T c==> cFINITE f0 c= * * part chull part caffine f0 * part cGSPEC / c? / cSETSPEC b0 c? / c/\ c= csum f0 b2 creal_of_num cNUMERAL cBIT1 c_0 c= cvsum f0 / c% * b2 b3 b3 b1 b1
D Collect_geom.IN_AFFINE_HULL_IMP_COLLINEAR
A |- (!a. (!b. (!c. ((a IN ((hull affine) (b INSERT (c INSERT EMPTY)))) ==> (collinear (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 part cEMPTY ccollinear * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
D Collect_geom.equivalent_lemma
A |- ((?t1. (?t2. (?t3. (!v1. (!v2. (!v3. (!v. (((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> ((v = ((vector_add ((% ((((t1 v1) v2) v3) v)) v1)) ((vector_add ((% ((((t2 v1) v2) v3) v)) v2)) ((% ((((t3 v1) v2) v3) v)) v3)))) /\ ((((real_add ((((t1 v1) v2) v3) v)) ((real_add ((((t2 v1) v2) v3) v)) ((((t3 v1) v2) v3) v))) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = ((((t1 v1) v2) v3) v)) /\ ((tb = ((((t2 v1) v2) v3) v)) /\ (tc = ((((t3 v1) v2) v3) v)))))))))))))))))) = (!v1. (!v2. (!v3. (!v. (((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))))))))))))))))
T c= c? / c? / c? / ! ! ! ! c==> c/\ cIN b6 * * part chull part caffine * * part cINSERT b3 * * part cINSERT b4 * * part cINSERT b5 part cEMPTY c~ ccollinear * * part cINSERT b3 * * part cINSERT b4 * * part cINSERT b5 part cEMPTY c/\ c= b6 cvector_add c% * * * * b0 b3 b4 b5 b6 b3 cvector_add c% * * * * b1 b3 b4 b5 b6 b4 c% * * * * b2 b3 b4 b5 b6 b5 c/\ c= creal_add * * * * b0 b3 b4 b5 b6 creal_add * * * * b1 b3 b4 b5 b6 * * * * b2 b3 b4 b5 b6 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= b6 cvector_add c% b7 b3 cvector_add c% b8 b4 c% b9 b5 c= creal_add b7 creal_add b8 b9 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b7 * * * * b0 b3 b4 b5 b6 c/\ c= b8 * * * * b1 b3 b4 b5 b6 c= b9 * * * * b2 b3 b4 b5 b6 ! ! ! ! c==> c/\ cIN b3 * * part chull part caffine * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c~ ccollinear * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c? / c? / c? / c/\ c= b3 cvector_add c% b4 b0 cvector_add c% b5 b1 c% b6 b2 c/\ c= creal_add b4 creal_add b5 b6 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= b3 cvector_add c% b7 b0 cvector_add c% b8 b1 c% b9 b2 c= creal_add b7 creal_add b8 b9 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b7 b4 c/\ c= b8 b5 c= b9 b6
+ |- (((!v1. (!v2. (!v3. (!v. (((~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))))))))))))))) ==> ((\v1. (!v2. (!v3. (!v. (((~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))))))))))))))) v1)) = ((\v1. (!v2. (!v3. (!v. (((~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))))))))))))))) v1))
T c= c==> ! ! ! ! c==> c/\ c~ ccollinear * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cIN b3 * * part chull part caffine * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c? / c? / c? / c/\ c= b3 cvector_add c% b4 b0 cvector_add c% b5 b1 c% b6 b2 c/\ c= creal_add b4 creal_add b5 b6 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= b3 cvector_add c% b7 b0 cvector_add c% b8 b1 c% b9 b2 c= creal_add b7 creal_add b8 b9 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b7 b4 c/\ c= b8 b5 c= b9 b6 * / ! ! ! c==> c/\ c~ ccollinear * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cIN b3 * * part chull part caffine * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c? / c? / c? / c/\ c= b3 cvector_add c% b4 b0 cvector_add c% b5 b1 c% b6 b2 c/\ c= creal_add b4 creal_add b5 b6 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= b3 cvector_add c% b7 b0 cvector_add c% b8 b1 c% b9 b2 c= creal_add b7 creal_add b8 b9 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b7 b4 c/\ c= b8 b5 c= b9 b6 f0 * / ! ! ! c==> c/\ c~ ccollinear * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY cIN b3 * * part chull part caffine * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c? / c? / c? / c/\ c= b3 cvector_add c% b4 b0 cvector_add c% b5 b1 c% b6 b2 c/\ c= creal_add b4 creal_add b5 b6 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= b3 cvector_add c% b7 b0 cvector_add c% b8 b1 c% b9 b2 c= creal_add b7 creal_add b8 b9 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b7 b4 c/\ c= b8 b5 c= b9 b6 f0
+ ((~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) |- (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))))))))))
T c==> c/\ c~ ccollinear * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cIN f3 * * part chull part caffine * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c? / c? / c? / c/\ c= f3 cvector_add c% b0 f0 cvector_add c% b1 f1 c% b2 f2 c/\ c= creal_add b0 creal_add b1 b2 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f3 cvector_add c% b3 f0 cvector_add c% b4 f1 c% b5 f2 c= creal_add b3 creal_add b4 b5 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b3 b0 c/\ c= b4 b1 c= b5 b2
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- ((\p'. (!q'. ((((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) = p') ==> ((p' ==> ((?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3)))))))))))) = q')) ==> ((((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))))))))))) = (p' ==> q')))))) p')
T * / ! c==> c= c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= c? / c? / c? / c/\ c= f0 cvector_add c% b2 f1 cvector_add c% b3 f2 c% b4 f3 c/\ c= creal_add b2 creal_add b3 b4 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f0 cvector_add c% b5 f1 cvector_add c% b6 f2 c% b7 f3 c= creal_add b5 creal_add b6 b7 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b5 b2 c/\ c= b6 b3 c= b7 b4 b1 c= c==> c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c? / c? / c? / c/\ c= f0 cvector_add c% b2 f1 cvector_add c% b3 f2 c% b4 f3 c/\ c= creal_add b2 creal_add b3 b4 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f0 cvector_add c% b5 f1 cvector_add c% b6 f2 c% b7 f3 c= creal_add b5 creal_add b6 b7 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b5 b2 c/\ c= b6 b3 c= b7 b4 c==> b0 b1 f4
+ ((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) |- (((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) /\ ((?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3)))))))))))) = T))
T c==> c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c/\ c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= c? / c? / c? / c/\ c= f0 cvector_add c% b0 f1 cvector_add c% b1 f2 c% b2 f3 c/\ c= creal_add b0 creal_add b1 b2 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f0 cvector_add c% b3 f1 cvector_add c% b4 f2 c% b5 f3 c= creal_add b3 creal_add b4 b5 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b3 b0 c/\ c= b4 b1 c= b5 b2 cT
+ ((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) |- ((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) = T)
T c==> c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cT
- |- ((?t3. t) = t)
T c= c? / f0 f0
+ |- (((((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> ((?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3)))))))))))) = T)) ==> ((((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))))))))))) = (((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> T))) = ((((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))))))))))) = (((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> T)))
T c= c==> c==> c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= c? / c? / c? / c/\ c= f0 cvector_add c% b0 f1 cvector_add c% b1 f2 c% b2 f3 c/\ c= creal_add b0 creal_add b1 b2 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f0 cvector_add c% b3 f1 cvector_add c% b4 f2 c% b5 f3 c= creal_add b3 creal_add b4 b5 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b3 b0 c/\ c= b4 b1 c= b5 b2 cT c= c==> c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c? / c? / c? / c/\ c= f0 cvector_add c% b0 f1 cvector_add c% b1 f2 c% b2 f3 c/\ c= creal_add b0 creal_add b1 b2 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f0 cvector_add c% b3 f1 cvector_add c% b4 f2 c% b5 f3 c= creal_add b3 creal_add b4 b5 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b3 b0 c/\ c= b4 b1 c= b5 b2 c==> c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cT c= c==> c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c? / c? / c? / c/\ c= f0 cvector_add c% b0 f1 cvector_add c% b1 f2 c% b2 f3 c/\ c= creal_add b0 creal_add b1 b2 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f0 cvector_add c% b3 f1 cvector_add c% b4 f2 c% b5 f3 c= creal_add b3 creal_add b4 b5 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b3 b0 c/\ c= b4 b1 c= b5 b2 c==> c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cT
- |- ((!tc'. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc') v3)))) /\ (((real_add ta) ((real_add tb) tc')) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))) = ((?tc. ((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0)))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3)))))
T c= ! c==> c/\ c= f0 cvector_add c% f1 f2 cvector_add c% f3 f4 c% b0 f5 c= creal_add f1 creal_add f3 b0 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= f1 f6 c/\ c= f3 f7 c= f8 f9 c==> c? / c/\ c= f0 cvector_add c% f1 f2 cvector_add c% f3 f4 c% b0 f5 c= creal_add f1 creal_add f3 b0 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= f1 f6 c/\ c= f3 f7 c= f8 f9
+ ((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) |- ((((~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> ((?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3)))))))))))) = T)) = ((?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3)))))))))))) = T))
T c==> c/\ cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= c==> c/\ c~ ccollinear * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cIN f0 * * part chull part caffine * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= c? / c? / c? / c/\ c= f0 cvector_add c% b0 f1 cvector_add c% b1 f2 c% b2 f3 c/\ c= creal_add b0 creal_add b1 b2 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f0 cvector_add c% b3 f1 cvector_add c% b4 f2 c% b5 f3 c= creal_add b3 creal_add b4 b5 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b3 b0 c/\ c= b4 b1 c= b5 b2 cT c= c? / c? / c? / c/\ c= f0 cvector_add c% b0 f1 cvector_add c% b1 f2 c% b2 f3 c/\ c= creal_add b0 creal_add b1 b2 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f0 cvector_add c% b3 f1 cvector_add c% b4 f2 c% b5 f3 c= creal_add b3 creal_add b4 b5 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b3 b0 c/\ c= b4 b1 c= b5 b2 cT
- |- (T = ((?t1. (?t2. (?t3. (!v1. (!v2. (!v3. (!v. (((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> ((v = ((vector_add ((% ((((t1 v1) v2) v3) v)) v1)) ((vector_add ((% ((((t2 v1) v2) v3) v)) v2)) ((% ((((t3 v1) v2) v3) v)) v3)))) /\ ((((real_add ((((t1 v1) v2) v3) v)) ((real_add ((((t2 v1) v2) v3) v)) ((((t3 v1) v2) v3) v))) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = ((((t1 v1) v2) v3) v)) /\ ((tb = ((((t2 v1) v2) v3) v)) /\ (tc = ((((t3 v1) v2) v3) v)))))))))))))))))) = (!v1. (!v2. (!v3. (!v. (((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3)))))))))))))))))))
T c= cT c= c? / c? / c? / ! ! ! ! c==> c/\ cIN b6 * * part chull part caffine * * part cINSERT b3 * * part cINSERT b4 * * part cINSERT b5 part cEMPTY c~ ccollinear * * part cINSERT b3 * * part cINSERT b4 * * part cINSERT b5 part cEMPTY c/\ c= b6 cvector_add c% * * * * b0 b3 b4 b5 b6 b3 cvector_add c% * * * * b1 b3 b4 b5 b6 b4 c% * * * * b2 b3 b4 b5 b6 b5 c/\ c= creal_add * * * * b0 b3 b4 b5 b6 creal_add * * * * b1 b3 b4 b5 b6 * * * * b2 b3 b4 b5 b6 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= b6 cvector_add c% b7 b3 cvector_add c% b8 b4 c% b9 b5 c= creal_add b7 creal_add b8 b9 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b7 * * * * b0 b3 b4 b5 b6 c/\ c= b8 * * * * b1 b3 b4 b5 b6 c= b9 * * * * b2 b3 b4 b5 b6 ! ! ! ! c==> c/\ cIN b3 * * part chull part caffine * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c~ ccollinear * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c? / c? / c? / c/\ c= b3 cvector_add c% b4 b0 cvector_add c% b5 b1 c% b6 b2 c/\ c= creal_add b4 creal_add b5 b6 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= b3 cvector_add c% b7 b0 cvector_add c% b8 b1 c% b9 b2 c= creal_add b7 creal_add b8 b9 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b7 b4 c/\ c= b8 b5 c= b9 b6
- |- ((!v'. (((v' IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY)))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3)))))))))))))) = ((?v. ((v IN ((hull affine) (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))) /\ (~ (collinear (v1 INSERT (v2 INSERT (v3 INSERT EMPTY))))))) ==> (?t1. (?t2. (?t3. ((v = ((vector_add ((% t1) v1)) ((vector_add ((% t2) v2)) ((% t3) v3)))) /\ ((((real_add t1) ((real_add t2) t3)) = (real_of_num (NUMERAL (BIT1 _0)))) /\ (!ta. (!tb. (!tc. (((v = ((vector_add ((% ta) v1)) ((vector_add ((% tb) v2)) ((% tc) v3)))) /\ (((real_add ta) ((real_add tb) tc)) = (real_of_num (NUMERAL (BIT1 _0))))) ==> ((ta = t1) /\ ((tb = t2) /\ (tc = t3))))))))))))))
T c= ! c==> c/\ cIN b0 * * part chull part caffine * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c~ ccollinear * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c? / c? / c? / c/\ c= f3 cvector_add c% b1 f0 cvector_add c% b2 f1 c% b3 f2 c/\ c= creal_add b1 creal_add b2 b3 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f3 cvector_add c% b4 f0 cvector_add c% b5 f1 c% b6 f2 c= creal_add b4 creal_add b5 b6 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b4 b1 c/\ c= b5 b2 c= b6 b3 c==> c? / c/\ cIN b0 * * part chull part caffine * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c~ ccollinear * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c? / c? / c? / c/\ c= f3 cvector_add c% b0 f0 cvector_add c% b1 f1 c% b2 f2 c/\ c= creal_add b0 creal_add b1 b2 creal_of_num cNUMERAL cBIT1 c_0 ! ! ! c==> c/\ c= f3 cvector_add c% b3 f0 cvector_add c% b4 f1 c% b5 f2 c= creal_add b3 creal_add b4 b5 creal_of_num cNUMERAL cBIT1 c_0 c/\ c= b3 b0 c/\ c= b4 b1 c= b5 b2
- |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((!tc. ((P tc) ==> Q)) = ((?tc. (P tc)) ==> Q))
T c= ! c==> * f0 b0 f1 c==> c? / * f0 b0 f1
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
