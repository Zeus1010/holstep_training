N SIMPLEX_SEGMENT_CASES
C |- (!a. (!b. ((simplex (((COND (a = b)) (int_of_num (NUMERAL _0))) (int_of_num (NUMERAL (BIT1 _0))))) (closed_segment ((CONS (a , b)) NIL)))))
T csimplex cCOND c= f0 f1 cint_of_num cNUMERAL c_0 cint_of_num cNUMERAL cBIT1 c_0 * part cclosed_segment cCONS c, f0 f1 cNIL
D TRUTH
A |- T
T cT
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D COND_ELIM_THM
A |- ((P (((COND c) x) y)) = ((c ==> (P x)) /\ ((~ c) ==> (P y))))
T c= * f0 cCOND f1 f2 f3 c/\ c==> f1 * f0 f2 c==> c~ f1 * f0 f3
D INT_OF_NUM_SUC
A |- (!n. (((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))) = (int_of_num (SUC n))))
T c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cSUC f0
D IN_SING
A |- (!x. (!y. ((x IN (y INSERT EMPTY)) = (x = y))))
T c= cIN f0 * * part cINSERT f1 part cEMPTY c= f0 f1
D FINITE_SING
A |- (!a. (FINITE (a INSERT EMPTY)))
T cFINITE * * part cINSERT f0 part cEMPTY
D Oxl_2012.CARD_INSERT
A |- (!x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))))
T c==> cFINITE f0 c= cCARD * * part cINSERT f1 f0 cCOND cIN f1 f0 cCARD f0 cSUC cCARD f0
D CARD_SING
A |- (!a. ((CARD (a INSERT EMPTY)) = (NUMERAL (BIT1 _0))))
T c= cCARD * * part cINSERT f0 part cEMPTY cNUMERAL cBIT1 c_0
D SEGMENT_REFL
A |- ((!a. ((closed_segment ((CONS (a , a)) NIL)) = (a INSERT EMPTY))) /\ (!a. ((open_segment (a , a)) = EMPTY)))
T c/\ ! c= * part cclosed_segment cCONS c, b0 b0 cNIL * * part cINSERT b0 part cEMPTY ! c= * part copen_segment c, b0 b0 part cEMPTY
D AFFINE_INDEPENDENT_2
A |- (!a. (!b. (~ (affine_dependent (a INSERT (b INSERT EMPTY))))))
T c~ caffine_dependent * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
D SEGMENT_CONVEX_HULL
A |- (!a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY))))))
T c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
D simplex
A |- (!n. (!s. (((simplex n) s) = (?c. ((~ (affine_dependent c)) /\ (((int_of_num (CARD c)) = ((int_add n) (int_of_num (NUMERAL (BIT1 _0))))) /\ (s = ((hull convex) c))))))))
T c= csimplex f0 f1 c? / c/\ c~ caffine_dependent b0 c/\ c= cint_of_num cCARD b0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 c= f1 * * part chull part cconvex b0
D SIMPLEX_SING
A |- (!n. (!a. (((simplex n) (a INSERT EMPTY)) = (n = (int_of_num (NUMERAL _0))))))
T c= csimplex f0 * * part cINSERT f1 part cEMPTY c= f0 cint_of_num cNUMERAL c_0
+ (~ (a = b)) |- ((\c. ((~ (affine_dependent c)) /\ (((int_of_num (CARD c)) = ((int_add (int_of_num (NUMERAL (BIT1 _0)))) (int_of_num (NUMERAL (BIT1 _0))))) /\ ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) c))))) (a INSERT (b INSERT EMPTY)))
T c==> c~ c= f0 f1 * / c/\ c~ caffine_dependent b0 c/\ c= cint_of_num cCARD b0 cint_add cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cNUMERAL cBIT1 c_0 c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex b0 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((\a. (!b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))) a)
T * / ! c= * part cclosed_segment cCONS c, b0 b1 cNIL * * part chull part cconvex * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ |- (((!x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) ==> ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x)) = ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x))
T c= c==> ! ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0 * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0
+ (~ (a = b)) |- ((~ (a = b)) /\ ((simplex (int_of_num (NUMERAL (BIT1 _0)))) (closed_segment ((CONS (a , b)) NIL))))
T c==> c~ c= f0 f1 c/\ c~ c= f0 f1 csimplex cint_of_num cNUMERAL cBIT1 c_0 * part cclosed_segment cCONS c, f0 f1 cNIL
+ |- (((!a. ((CARD (a INSERT EMPTY)) = (NUMERAL (BIT1 _0)))) ==> ((\a. ((CARD (a INSERT EMPTY)) = (NUMERAL (BIT1 _0)))) a)) = ((\a. ((CARD (a INSERT EMPTY)) = (NUMERAL (BIT1 _0)))) a))
T c= c==> ! c= cCARD * * part cINSERT b0 part cEMPTY cNUMERAL cBIT1 c_0 * / c= cCARD * * part cINSERT b0 part cEMPTY cNUMERAL cBIT1 c_0 f0 * / c= cCARD * * part cINSERT b0 part cEMPTY cNUMERAL cBIT1 c_0 f0
+ |- ((\b. ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY))))) b)
T * / c= * part cclosed_segment cCONS c, f0 b0 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT b0 part cEMPTY f1
+ |- (((!y. ((x IN (y INSERT EMPTY)) = (x = y))) ==> ((\y. ((x IN (y INSERT EMPTY)) = (x = y))) y)) = ((\y. ((x IN (y INSERT EMPTY)) = (x = y))) y))
T c= c==> ! c= cIN f0 * * part cINSERT b0 part cEMPTY c= f0 b0 * / c= cIN f0 * * part cINSERT b0 part cEMPTY c= f0 b0 f1 * / c= cIN f0 * * part cINSERT b0 part cEMPTY c= f0 b0 f1
- (~ (a = b)) |- (((simplex (int_of_num (NUMERAL (BIT1 _0)))) (closed_segment ((CONS (a , b)) NIL))) = ((simplex (int_of_num (NUMERAL (BIT1 _0)))) (closed_segment ((CONS (a , b)) NIL))))
T c==> c~ c= f0 f1 c= csimplex cint_of_num cNUMERAL cBIT1 c_0 * part cclosed_segment cCONS c, f0 f1 cNIL csimplex cint_of_num cNUMERAL cBIT1 c_0 * part cclosed_segment cCONS c, f0 f1 cNIL
- |- ((\a. ((open_segment (a , a)) = EMPTY)) a)
T * / c= * part copen_segment c, b0 b0 part cEMPTY f0
+ |- ((\e'. (((a IN (b INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (b INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT EMPTY))) = e')) ==> ((((COND (a IN (b INSERT EMPTY))) (CARD (b INSERT EMPTY))) (SUC (CARD (b INSERT EMPTY)))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4
+ |- ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x)
T * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0
+ |- (F ==> ((CARD (b INSERT EMPTY)) = (NUMERAL (BIT1 _0))))
T c==> cF c= cCARD * * part cINSERT f0 part cEMPTY cNUMERAL cBIT1 c_0
+ |- (((int_of_num (CARD (a INSERT (b INSERT EMPTY)))) = ((int_add (int_of_num (NUMERAL (BIT1 _0)))) (int_of_num (NUMERAL (BIT1 _0))))) = ((~ (affine_dependent (a INSERT (b INSERT EMPTY)))) /\ (((int_of_num (CARD (a INSERT (b INSERT EMPTY)))) = ((int_add (int_of_num (NUMERAL (BIT1 _0)))) (int_of_num (NUMERAL (BIT1 _0))))) /\ ((closed_segment ((CONS (a , b)) NIL)) = ((hull convex) (a INSERT (b INSERT EMPTY)))))))
T c= c= cint_of_num cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cint_add cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cNUMERAL cBIT1 c_0 c/\ c~ caffine_dependent * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c/\ c= cint_of_num cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cint_add cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cNUMERAL cBIT1 c_0 c= * part cclosed_segment cCONS c, f0 f1 cNIL * * part chull part cconvex * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((\a. (((simplex n) (a INSERT EMPTY)) = (n = (int_of_num (NUMERAL _0))))) a)
T * / c= csimplex f0 * * part cINSERT b0 part cEMPTY c= f0 cint_of_num cNUMERAL c_0 f1
+ |- ((!b. ((simplex (((COND (a = b)) (int_of_num (NUMERAL _0))) (int_of_num (NUMERAL (BIT1 _0))))) (closed_segment ((CONS (a , b)) NIL)))) = T)
T c= ! csimplex cCOND c= f0 b0 cint_of_num cNUMERAL c_0 cint_of_num cNUMERAL cBIT1 c_0 * part cclosed_segment cCONS c, f0 b0 cNIL cT
+ |- (((a IN (b INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (b INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT EMPTY))) = e')) ==> ((((COND (a IN (b INSERT EMPTY))) (CARD (b INSERT EMPTY))) (SUC (CARD (b INSERT EMPTY)))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 f4
+ |- (((!e'. (((a IN (b INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (b INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT EMPTY))) = e')) ==> ((((COND (a IN (b INSERT EMPTY))) (CARD (b INSERT EMPTY))) (SUC (CARD (b INSERT EMPTY)))) = (((COND g') t') e')))))) ==> ((\e'. (((a IN (b INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (b INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT EMPTY))) = e')) ==> ((((COND (a IN (b INSERT EMPTY))) (CARD (b INSERT EMPTY))) (SUC (CARD (b INSERT EMPTY)))) = (((COND g') t') e')))))) e')) = ((\e'. (((a IN (b INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (b INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT EMPTY))) = e')) ==> ((((COND (a IN (b INSERT EMPTY))) (CARD (b INSERT EMPTY))) (SUC (CARD (b INSERT EMPTY)))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4
+ |- (((!n. ((int_of_num (SUC n)) = ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))))) ==> ((\n. ((int_of_num (SUC n)) = ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))))) n)) = ((\n. ((int_of_num (SUC n)) = ((int_add (int_of_num n)) (int_of_num (NUMERAL (BIT1 _0)))))) n))
T c= c==> ! c= cint_of_num cSUC b0 cint_add cint_of_num b0 cint_of_num cNUMERAL cBIT1 c_0 * / c= cint_of_num cSUC b0 cint_add cint_of_num b0 cint_of_num cNUMERAL cBIT1 c_0 f0 * / c= cint_of_num cSUC b0 cint_add cint_of_num b0 cint_of_num cNUMERAL cBIT1 c_0 f0
- |- ((?c. t) = t)
T c= c? / f0 f0
- (a = b) |- ((a = b) = T)
T c==> c= f0 f1 c= c= f0 f1 cT
- (~ (a = b)) |- (((~ (b = a)) ==> ((b = a) = F)) = ((b = a) = F))
T c==> c~ c= f0 f1 c= c==> c~ c= f1 f0 c= c= f1 f0 cF c= c= f1 f0 cF
- (a = b) |- (((simplex (int_of_num (NUMERAL _0))) (closed_segment ((CONS (a , b)) NIL))) = ((simplex (int_of_num (NUMERAL _0))) (closed_segment ((CONS (a , b)) NIL))))
T c==> c= f0 f1 c= csimplex cint_of_num cNUMERAL c_0 * part cclosed_segment cCONS c, f0 f1 cNIL csimplex cint_of_num cNUMERAL c_0 * part cclosed_segment cCONS c, f0 f1 cNIL
- (~ F) |- ((F = F) = T)
T c==> c~ cF c= c= cF cF cT
- (b = a) |- (a = b)
T c==> c= f0 f1 c= f1 f0
- F |- (F = T)
T c==> cF c= cF cT
- |- ((open_segment (a , a)) = EMPTY)
T c= * part copen_segment c, f0 f0 part cEMPTY
- |- (T = ((int_of_num (SUC (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num (NUMERAL (BIT1 _0)))) (int_of_num (NUMERAL (BIT1 _0))))))
T c= cT c= cint_of_num cSUC cNUMERAL cBIT1 c_0 cint_add cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cNUMERAL cBIT1 c_0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- (~ (a = b)) |- (~ (b = a))
T c==> c~ c= f0 f1 c~ c= f1 f0
- (FINITE s) |- ((FINITE s) /\ ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))
T c==> cFINITE f0 c/\ cFINITE f0 c= cCARD * * part cINSERT f1 f0 cCOND cIN f1 f0 cCARD f0 cSUC cCARD f0
- (~ F) |- (F = F)
T c==> c~ cF c= cF cF
- (~ (a = b)) |- ((b = a) = F)
T c==> c~ c= f0 f1 c= c= f1 f0 cF
- |- (((!a. ((open_segment (a , a)) = EMPTY)) ==> ((\a. ((open_segment (a , a)) = EMPTY)) a)) = ((\a. ((open_segment (a , a)) = EMPTY)) a))
T c= c==> ! c= * part copen_segment c, b0 b0 part cEMPTY * / c= * part copen_segment c, b0 b0 part cEMPTY f0 * / c= * part copen_segment c, b0 b0 part cEMPTY f0
