N Reduction2.splitFace_countVertices
C |- (!g. (!u. (!v. (!f. (!ws. ((countVertices (SND (SND (((((splitFace g) u) v) f) ws)))) = ((countVertices g) + (sizel ws))))))))
T c= ccountVertices cSND cSND csplitFace f0 f1 f2 f3 f4 c+ ccountVertices f0 csizel f4
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D SELECT_AX
A |- (!P. (!x. ((P x) ==> (P (@ P)))))
T c==> * f0 f1 * f0 c@ f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D GABS_DEF
A |- (!P. ((GABS P) = (@ P)))
T c= cGABS f0 c@ f0
D GEQ_DEF
A |- (!a. (!b. (((GEQ a) b) = (a = b))))
T c= cGEQ f0 f1 c= f0 f1
D PAIR_EQ
A |- (!x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))))
T c= c= c, f0 f1 c, f2 f3 c/\ c= f0 f2 c= f1 f3
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D PAIR
A |- (!x. (((FST x) , (SND x)) = x))
T c= c, cFST f0 cSND f0 f0
D pair_RECURSION
A |- (!PAIR'. (?fn. (!a0. (!a1. ((fn (a0 , a1)) = ((PAIR' a0) a1))))))
T c? / ! ! c= * b0 c, b1 b2 * * f0 b1 b2
D Tame_defs2.splitFace
A |- (!newVs. (!oldF. (!ram1. (!ram2. (!g. ((((((splitFace g) ram1) ram2) oldF) newVs) = ((LET (\fs. (LET_END ((LET (\n. (LET_END ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace oldF) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH newVs))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) ram1)) ((#!# h) ram2)) (LENGTH newVs))))))))) ((APPEND Fs) ((REPLICATE (LENGTH newVs)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS ram2) NIL)) oldF) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS ram1) NIL)) oldF) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) oldF) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) oldF) ((CONS f1) NIL)) Fs))))))))) ((((split_face oldF) ram1) ram2) newVs))))) (((betwn (FST oldF)) ram2) ram1))))) (((betwn (FST oldF)) ram1) ram2))))) (heights g))))) (faceListAt g))))) (countVertices g))))) (faces g))))))))
T c= csplitFace f0 f1 f2 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b6 c, b7 b8 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b7 c, b8 cGraph cAPPEND creplace f3 cCONS b8 cNIL b0 cCONS b7 cNIL c+ b1 cLENGTH f4 b9 cAPPEND b3 cheightsNewVertices c#!# b3 f1 c#!# b3 f2 cLENGTH f4 cAPPEND b9 cREPLICATE cLENGTH f4 cCONS b7 cCONS b8 cNIL creplacefacesAt cCONS f2 cNIL f3 cCONS b7 cCONS b8 cNIL b9 creplacefacesAt cCONS f1 cNIL f3 cCONS b8 cCONS b7 cNIL b9 creplacefacesAt b5 f3 cCONS b8 cNIL b9 creplacefacesAt b4 f3 cCONS b7 cNIL b2 csplit_face f3 f1 f2 f4 cbetwn cFST f3 f2 f1 cbetwn cFST f3 f1 f2 cheights f0 cfaceListAt f0 ccountVertices f0 cfaces f0
D Tame_list.APPEND_cat
A |- (APPEND = cat)
T c= part cAPPEND part ccat
D Tame_list.countVertices
A |- ((countVertices ((((Graph fs) n) f) h)) = n)
T c= ccountVertices cGraph f0 f1 f2 f3 f1
D Tame_list.lower_case
A |- ((MAP = map) /\ ((LENGTH = sizel) /\ ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))))
T c/\ c= part cMAP part cmap c/\ c= part cLENGTH part csizel c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ ((\n. (n = (countVertices g))) n) |- (n = (countVertices g))
T c==> * / c= b0 ccountVertices f0 f1 c= f1 ccountVertices f0
- |- ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))
T c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- ((((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs) = Fs') = (((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs) = Fs'))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= creplacefacesAt f6 f2 cCONS f3 cNIL f7 f8 c= creplacefacesAt f6 f2 cCONS f3 cNIL f7 f8
+ (fs = (faces g)) |- ((fs = (faces g)) /\ (?fs. (fs = (faces g))))
T c==> c= f0 cfaces f1 c/\ c= f0 cfaces f1 c? / c= b0 cfaces f1
- (vs2 = (((betwn (FST f)) v) u)) |- (((faces g) = fs) = ((faces g) = fs))
T c==> c= f0 cbetwn cFST f1 f2 f3 c= c= cfaces f4 f5 c= cfaces f4 f5
- (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- (((((betwn (FST f)) u) v) = vs1) = ((((betwn (FST f)) u) v) = vs1))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= cbetwn cFST f2 f5 f6 f7 c= cbetwn cFST f2 f5 f6 f7
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- (((heights g) = h) = ((heights g) = h))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= cheights f6 f7 c= cheights f6 f7
+ |- ((h = (heights g)) = ((\h. (h = (heights g))) h))
T c= c= f0 cheights f1 * / c= b0 cheights f1 f0
+ |- (((?fs. (fs = (faces g))) ==> ((countVertices (SND (SND ((LET (\fs. (LET_END ((LET (\n. (LET_END ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) (countVertices g))))) (faces g))))) = ((countVertices g) + (sizel ws)))) = ((countVertices (SND (SND ((LET (\fs. (LET_END ((LET (\n. (LET_END ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) (countVertices g))))) (faces g))))) = ((countVertices g) + (sizel ws))))
T c= c==> c? / c= b0 cfaces f0 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b6 c, b7 b8 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b7 c, b8 cGraph cAPPEND creplace f1 cCONS b8 cNIL b0 cCONS b7 cNIL c+ b1 cLENGTH f2 b9 cAPPEND b3 cheightsNewVertices c#!# b3 f3 c#!# b3 f4 cLENGTH f2 cAPPEND b9 cREPLICATE cLENGTH f2 cCONS b7 cCONS b8 cNIL creplacefacesAt cCONS f4 cNIL f1 cCONS b7 cCONS b8 cNIL b9 creplacefacesAt cCONS f3 cNIL f1 cCONS b8 cCONS b7 cNIL b9 creplacefacesAt b5 f1 cCONS b8 cNIL b9 creplacefacesAt b4 f1 cCONS b7 cNIL b2 csplit_face f1 f3 f4 f2 cbetwn cFST f1 f4 f3 cbetwn cFST f1 f3 f4 cheights f0 cfaceListAt f0 ccountVertices f0 cfaces f0 c+ ccountVertices f0 csizel f2 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b6 c, b7 b8 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b7 c, b8 cGraph cAPPEND creplace f1 cCONS b8 cNIL b0 cCONS b7 cNIL c+ b1 cLENGTH f2 b9 cAPPEND b3 cheightsNewVertices c#!# b3 f3 c#!# b3 f4 cLENGTH f2 cAPPEND b9 cREPLICATE cLENGTH f2 cCONS b7 cCONS b8 cNIL creplacefacesAt cCONS f4 cNIL f1 cCONS b7 cCONS b8 cNIL b9 creplacefacesAt cCONS f3 cNIL f1 cCONS b8 cCONS b7 cNIL b9 creplacefacesAt b5 f1 cCONS b8 cNIL b9 creplacefacesAt b4 f1 cCONS b7 cNIL b2 csplit_face f1 f3 f4 f2 cbetwn cFST f1 f4 f3 cbetwn cFST f1 f3 f4 cheights f0 cfaceListAt f0 ccountVertices f0 cfaces f0 c+ ccountVertices f0 csizel f2
+ |- ((a /\ T) = a)
T c= c/\ f0 cT f0
+ (Fs = (faceListAt g)) |- ((Fs = (faceListAt g)) /\ ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) = (n + (sizel ws))))
T c==> c= f0 cfaceListAt f1 c/\ c= f0 cfaceListAt f1 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b5 c, b6 cGraph cAPPEND creplace f2 cCONS b6 cNIL f3 cCONS b5 cNIL c+ f4 cLENGTH f5 b7 cAPPEND b1 cheightsNewVertices c#!# b1 f6 c#!# b1 f7 cLENGTH f5 cAPPEND b7 cREPLICATE cLENGTH f5 cCONS b5 cCONS b6 cNIL creplacefacesAt cCONS f7 cNIL f2 cCONS b5 cCONS b6 cNIL b7 creplacefacesAt cCONS f6 cNIL f2 cCONS b6 cCONS b5 cNIL b7 creplacefacesAt b3 f2 cCONS b6 cNIL b7 creplacefacesAt b2 f2 cCONS b5 cNIL b0 csplit_face f2 f6 f7 f5 cbetwn cFST f2 f7 f6 cbetwn cFST f2 f6 f7 cheights f1 cfaceListAt f1 c+ f4 csizel f5
+ |- (!vs1. (((\vs1. (vs1 = (((betwn (FST f)) u) v))) vs1) ==> ((countVertices (SND (SND ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) = (n + (sizel ws)))))
T c==> * / c= b0 cbetwn cFST f0 f1 f2 f3 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b3 c, b4 cGraph cAPPEND creplace f0 cCONS b4 cNIL f4 cCONS b3 cNIL c+ f5 cLENGTH f6 b6 cAPPEND f7 cheightsNewVertices c#!# f7 f1 c#!# f7 f2 cLENGTH f6 cAPPEND b6 cREPLICATE cLENGTH f6 cCONS b3 cCONS b4 cNIL creplacefacesAt cCONS f2 cNIL f0 cCONS b3 cCONS b4 cNIL b6 creplacefacesAt cCONS f1 cNIL f0 cCONS b4 cCONS b3 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL f8 csplit_face f0 f1 f2 f6 cbetwn cFST f0 f2 f1 cbetwn cFST f0 f1 f2 c+ f5 csizel f6
+ |- (?Fs''''. (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')))
T c? / c= b0 creplacefacesAt cCONS f0 cNIL f1 cCONS f2 cCONS f3 cNIL f4
+ |- ((Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) = (n + (sizel ws))))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= ccountVertices cSND cSND cLET / cLET_END c, f3 c, f4 cGraph cAPPEND creplace f5 cCONS f4 cNIL f6 cCONS f3 cNIL c+ f7 cLENGTH f2 b0 cAPPEND f8 cheightsNewVertices c#!# f8 f9 c#!# f8 f10 cLENGTH f2 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c+ f7 csizel f2
+ ((\Fs. (Fs = (faceListAt g))) Fs) |- (((\Fs. (Fs = (faceListAt g))) Fs) /\ ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) = (n + (sizel ws))))
T c==> * / c= b0 cfaceListAt f0 f1 c/\ * / c= b0 cfaceListAt f0 f1 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b5 c, b6 cGraph cAPPEND creplace f2 cCONS b6 cNIL f3 cCONS b5 cNIL c+ f4 cLENGTH f5 b7 cAPPEND b1 cheightsNewVertices c#!# b1 f6 c#!# b1 f7 cLENGTH f5 cAPPEND b7 cREPLICATE cLENGTH f5 cCONS b5 cCONS b6 cNIL creplacefacesAt cCONS f7 cNIL f2 cCONS b5 cCONS b6 cNIL b7 creplacefacesAt cCONS f6 cNIL f2 cCONS b6 cCONS b5 cNIL b7 creplacefacesAt b3 f2 cCONS b6 cNIL b7 creplacefacesAt b2 f2 cCONS b5 cNIL b0 csplit_face f2 f6 f7 f5 cbetwn cFST f2 f7 f6 cbetwn cFST f2 f6 f7 cheights f0 cfaceListAt f0 c+ f4 csizel f5
+ |- ((vs2 = (((betwn (FST f)) v) u)) ==> (?vs2. (vs2 = (((betwn (FST f)) v) u))))
T c==> c= f0 cbetwn cFST f1 f2 f3 c? / c= b0 cbetwn cFST f1 f2 f3
- |- ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))
T c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ |- ((n = (countVertices g)) ==> (?n. (n = (countVertices g))))
T c==> c= f0 ccountVertices f1 c? / c= b0 ccountVertices f1
+ |- (((?vs2. (vs2 = (((betwn (FST f)) v) u))) ==> ((countVertices (SND (SND ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) = (n + (sizel ws)))) = ((countVertices (SND (SND ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) = (n + (sizel ws))))
T c= c==> c? / c= b0 cbetwn cFST f0 f1 f2 c= ccountVertices cSND cSND cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b2 c, b3 cGraph cAPPEND creplace f0 cCONS b3 cNIL f3 cCONS b2 cNIL c+ f4 cLENGTH f5 b5 cAPPEND f6 cheightsNewVertices c#!# f6 f2 c#!# f6 f1 cLENGTH f5 cAPPEND b5 cREPLICATE cLENGTH f5 cCONS b2 cCONS b3 cNIL creplacefacesAt cCONS f1 cNIL f0 cCONS b2 cCONS b3 cNIL b5 creplacefacesAt cCONS f2 cNIL f0 cCONS b3 cCONS b2 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL b4 creplacefacesAt f7 f0 cCONS b2 cNIL f8 csplit_face f0 f2 f1 f5 cbetwn cFST f0 f1 f2 c+ f4 csizel f5 c= ccountVertices cSND cSND cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b2 c, b3 cGraph cAPPEND creplace f0 cCONS b3 cNIL f3 cCONS b2 cNIL c+ f4 cLENGTH f5 b5 cAPPEND f6 cheightsNewVertices c#!# f6 f2 c#!# f6 f1 cLENGTH f5 cAPPEND b5 cREPLICATE cLENGTH f5 cCONS b2 cCONS b3 cNIL creplacefacesAt cCONS f1 cNIL f0 cCONS b2 cCONS b3 cNIL b5 creplacefacesAt cCONS f2 cNIL f0 cCONS b3 cCONS b2 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL b4 creplacefacesAt f7 f0 cCONS b2 cNIL f8 csplit_face f0 f2 f1 f5 cbetwn cFST f0 f1 f2 c+ f4 csizel f5
+ ((f1 = (FST ((((split_face f) u) v) ws))) /\ (f2 = (SND ((((split_face f) u) v) ws)))) |- ((f1 , f2) = ((((split_face f) u) v) ws))
T c==> c/\ c= f0 cFST csplit_face f1 f2 f3 f4 c= f5 cSND csplit_face f1 f2 f3 f4 c= c, f0 f5 csplit_face f1 f2 f3 f4
+ ((f1 , f2) = ((((split_face f) u) v) ws)) |- (((countVertices (SND (SND ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) (f1 , f2))))) = (n + (sizel ws))) = ((countVertices (SND (SND ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) = (n + (sizel ws))))
T c==> c= c, f0 f1 csplit_face f2 f3 f4 f5 c= c= ccountVertices cSND cSND cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b1 c, b2 cGraph cAPPEND creplace f2 cCONS b2 cNIL f6 cCONS b1 cNIL c+ f7 cLENGTH f5 b4 cAPPEND f8 cheightsNewVertices c#!# f8 f3 c#!# f8 f4 cLENGTH f5 cAPPEND b4 cREPLICATE cLENGTH f5 cCONS b1 cCONS b2 cNIL creplacefacesAt cCONS f4 cNIL f2 cCONS b1 cCONS b2 cNIL b4 creplacefacesAt cCONS f3 cNIL f2 cCONS b2 cCONS b1 cNIL b4 creplacefacesAt f9 f2 cCONS b2 cNIL b3 creplacefacesAt f10 f2 cCONS b1 cNIL f11 c, f0 f1 c+ f7 csizel f5 c= ccountVertices cSND cSND cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b1 c, b2 cGraph cAPPEND creplace f2 cCONS b2 cNIL f6 cCONS b1 cNIL c+ f7 cLENGTH f5 b4 cAPPEND f8 cheightsNewVertices c#!# f8 f3 c#!# f8 f4 cLENGTH f5 cAPPEND b4 cREPLICATE cLENGTH f5 cCONS b1 cCONS b2 cNIL creplacefacesAt cCONS f4 cNIL f2 cCONS b1 cCONS b2 cNIL b4 creplacefacesAt cCONS f3 cNIL f2 cCONS b2 cCONS b1 cNIL b4 creplacefacesAt f9 f2 cCONS b2 cNIL b3 creplacefacesAt f10 f2 cCONS b1 cNIL f11 csplit_face f2 f3 f4 f5 c+ f7 csizel f5
+ |- (((!x. (((\Fs. (Fs = (faceListAt g))) x) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) = (n + (sizel ws))))) ==> ((?Fs. (Fs = (faceListAt g))) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) = (n + (sizel ws))))) = ((?Fs. (Fs = (faceListAt g))) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) = (n + (sizel ws)))))
T c= c==> ! c==> * / c= b1 cfaceListAt f0 b0 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b6 c, b7 cGraph cAPPEND creplace f1 cCONS b7 cNIL f2 cCONS b6 cNIL c+ f3 cLENGTH f4 b8 cAPPEND b2 cheightsNewVertices c#!# b2 f5 c#!# b2 f6 cLENGTH f4 cAPPEND b8 cREPLICATE cLENGTH f4 cCONS b6 cCONS b7 cNIL creplacefacesAt cCONS f6 cNIL f1 cCONS b6 cCONS b7 cNIL b8 creplacefacesAt cCONS f5 cNIL f1 cCONS b7 cCONS b6 cNIL b8 creplacefacesAt b4 f1 cCONS b7 cNIL b8 creplacefacesAt b3 f1 cCONS b6 cNIL b1 csplit_face f1 f5 f6 f4 cbetwn cFST f1 f6 f5 cbetwn cFST f1 f5 f6 cheights f0 cfaceListAt f0 c+ f3 csizel f4 c==> c? / c= b0 cfaceListAt f0 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b5 c, b6 cGraph cAPPEND creplace f1 cCONS b6 cNIL f2 cCONS b5 cNIL c+ f3 cLENGTH f4 b7 cAPPEND b1 cheightsNewVertices c#!# b1 f5 c#!# b1 f6 cLENGTH f4 cAPPEND b7 cREPLICATE cLENGTH f4 cCONS b5 cCONS b6 cNIL creplacefacesAt cCONS f6 cNIL f1 cCONS b5 cCONS b6 cNIL b7 creplacefacesAt cCONS f5 cNIL f1 cCONS b6 cCONS b5 cNIL b7 creplacefacesAt b3 f1 cCONS b6 cNIL b7 creplacefacesAt b2 f1 cCONS b5 cNIL b0 csplit_face f1 f5 f6 f4 cbetwn cFST f1 f6 f5 cbetwn cFST f1 f5 f6 cheights f0 cfaceListAt f0 c+ f3 csizel f4 c==> c? / c= b0 cfaceListAt f0 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b5 c, b6 cGraph cAPPEND creplace f1 cCONS b6 cNIL f2 cCONS b5 cNIL c+ f3 cLENGTH f4 b7 cAPPEND b1 cheightsNewVertices c#!# b1 f5 c#!# b1 f6 cLENGTH f4 cAPPEND b7 cREPLICATE cLENGTH f4 cCONS b5 cCONS b6 cNIL creplacefacesAt cCONS f6 cNIL f1 cCONS b5 cCONS b6 cNIL b7 creplacefacesAt cCONS f5 cNIL f1 cCONS b6 cCONS b5 cNIL b7 creplacefacesAt b3 f1 cCONS b6 cNIL b7 creplacefacesAt b2 f1 cCONS b5 cNIL b0 csplit_face f1 f5 f6 f4 cbetwn cFST f1 f6 f5 cbetwn cFST f1 f5 f6 cheights f0 cfaceListAt f0 c+ f3 csizel f4
+ |- ((fs = (faces g)) ==> (?fs. (fs = (faces g))))
T c==> c= f0 cfaces f1 c? / c= b0 cfaces f1
- |- ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))
T c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ |- ((T ==> (?Fs'''''. (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))))) = (?Fs'''''. (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))
T c= c==> cT c? / c= b0 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL c? / c= b0 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL
+ (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- (((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))) = Fs''''')
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL f0
+ |- (((!x. (((\vs1. (vs1 = (((betwn (FST f)) u) v))) x) ==> ((countVertices (SND (SND ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) = (n + (sizel ws))))) ==> ((?vs1. (vs1 = (((betwn (FST f)) u) v))) ==> ((countVertices (SND (SND ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) = (n + (sizel ws))))) = ((?vs1. (vs1 = (((betwn (FST f)) u) v))) ==> ((countVertices (SND (SND ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) = (n + (sizel ws)))))
T c= c==> ! c==> * / c= b1 cbetwn cFST f0 f1 f2 b0 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b4 c, b5 cGraph cAPPEND creplace f0 cCONS b5 cNIL f3 cCONS b4 cNIL c+ f4 cLENGTH f5 b7 cAPPEND f6 cheightsNewVertices c#!# f6 f1 c#!# f6 f2 cLENGTH f5 cAPPEND b7 cREPLICATE cLENGTH f5 cCONS b4 cCONS b5 cNIL creplacefacesAt cCONS f2 cNIL f0 cCONS b4 cCONS b5 cNIL b7 creplacefacesAt cCONS f1 cNIL f0 cCONS b5 cCONS b4 cNIL b7 creplacefacesAt b2 f0 cCONS b5 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL f7 csplit_face f0 f1 f2 f5 cbetwn cFST f0 f2 f1 cbetwn cFST f0 f1 f2 c+ f4 csizel f5 c==> c? / c= b0 cbetwn cFST f0 f1 f2 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b3 c, b4 cGraph cAPPEND creplace f0 cCONS b4 cNIL f3 cCONS b3 cNIL c+ f4 cLENGTH f5 b6 cAPPEND f6 cheightsNewVertices c#!# f6 f1 c#!# f6 f2 cLENGTH f5 cAPPEND b6 cREPLICATE cLENGTH f5 cCONS b3 cCONS b4 cNIL creplacefacesAt cCONS f2 cNIL f0 cCONS b3 cCONS b4 cNIL b6 creplacefacesAt cCONS f1 cNIL f0 cCONS b4 cCONS b3 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL f7 csplit_face f0 f1 f2 f5 cbetwn cFST f0 f2 f1 cbetwn cFST f0 f1 f2 c+ f4 csizel f5 c==> c? / c= b0 cbetwn cFST f0 f1 f2 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b3 c, b4 cGraph cAPPEND creplace f0 cCONS b4 cNIL f3 cCONS b3 cNIL c+ f4 cLENGTH f5 b6 cAPPEND f6 cheightsNewVertices c#!# f6 f1 c#!# f6 f2 cLENGTH f5 cAPPEND b6 cREPLICATE cLENGTH f5 cCONS b3 cCONS b4 cNIL creplacefacesAt cCONS f2 cNIL f0 cCONS b3 cCONS b4 cNIL b6 creplacefacesAt cCONS f1 cNIL f0 cCONS b4 cCONS b3 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL f7 csplit_face f0 f1 f2 f5 cbetwn cFST f0 f2 f1 cbetwn cFST f0 f1 f2 c+ f4 csizel f5
+ |- (((f1 = (FST ((((split_face f) u) v) ws))) /\ (f2 = (SND ((((split_face f) u) v) ws)))) ==> (?f1. (?f2. ((f1 , f2) = ((((split_face f) u) v) ws)))))
T c==> c/\ c= f0 cFST csplit_face f1 f2 f3 f4 c= f5 cSND csplit_face f1 f2 f3 f4 c? / c? / c= c, b0 b1 csplit_face f1 f2 f3 f4
+ |- ((\ram1. (!ram2. (!g. ((((((splitFace g) ram1) ram2) oldF) newVs) = ((LET (\fs. (LET_END ((LET (\n. (LET_END ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace oldF) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH newVs))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) ram1)) ((#!# h) ram2)) (LENGTH newVs))))))))) ((APPEND Fs) ((REPLICATE (LENGTH newVs)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS ram2) NIL)) oldF) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS ram1) NIL)) oldF) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) oldF) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) oldF) ((CONS f1) NIL)) Fs))))))))) ((((split_face oldF) ram1) ram2) newVs))))) (((betwn (FST oldF)) ram2) ram1))))) (((betwn (FST oldF)) ram1) ram2))))) (heights g))))) (faceListAt g))))) (countVertices g))))) (faces g)))))) ram1)
T * / ! ! c= csplitFace b2 b0 b1 f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b9 c, b10 b11 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b10 c, b11 cGraph cAPPEND creplace f0 cCONS b11 cNIL b3 cCONS b10 cNIL c+ b4 cLENGTH f1 b12 cAPPEND b6 cheightsNewVertices c#!# b6 b0 c#!# b6 b1 cLENGTH f1 cAPPEND b12 cREPLICATE cLENGTH f1 cCONS b10 cCONS b11 cNIL creplacefacesAt cCONS b1 cNIL f0 cCONS b10 cCONS b11 cNIL b12 creplacefacesAt cCONS b0 cNIL f0 cCONS b11 cCONS b10 cNIL b12 creplacefacesAt b8 f0 cCONS b11 cNIL b12 creplacefacesAt b7 f0 cCONS b10 cNIL b5 csplit_face f0 b0 b1 f1 cbetwn cFST f0 b1 b0 cbetwn cFST f0 b0 b1 cheights b2 cfaceListAt b2 ccountVertices b2 cfaces b2 f2
- (vs2 = (((betwn (FST f)) v) u)) |- (((((betwn (FST f)) u) v) = vs1) = ((((betwn (FST f)) u) v) = vs1))
T c==> c= f0 cbetwn cFST f1 f2 f3 c= c= cbetwn cFST f1 f3 f2 f4 c= cbetwn cFST f1 f3 f2 f4
+ ((\vs1. (vs1 = (((betwn (FST f)) u) v))) vs1) |- (((\vs1. (vs1 = (((betwn (FST f)) u) v))) vs1) /\ ((countVertices (SND (SND ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) = (n + (sizel ws))))
T c==> * / c= b0 cbetwn cFST f0 f1 f2 f3 c/\ * / c= b0 cbetwn cFST f0 f1 f2 f3 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b3 c, b4 cGraph cAPPEND creplace f0 cCONS b4 cNIL f4 cCONS b3 cNIL c+ f5 cLENGTH f6 b6 cAPPEND f7 cheightsNewVertices c#!# f7 f1 c#!# f7 f2 cLENGTH f6 cAPPEND b6 cREPLICATE cLENGTH f6 cCONS b3 cCONS b4 cNIL creplacefacesAt cCONS f2 cNIL f0 cCONS b3 cCONS b4 cNIL b6 creplacefacesAt cCONS f1 cNIL f0 cCONS b4 cCONS b3 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL f8 csplit_face f0 f1 f2 f6 cbetwn cFST f0 f2 f1 cbetwn cFST f0 f1 f2 c+ f5 csizel f6
+ (Fs''' = ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs'')) |- (((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs''))))) = (n + (sizel ws))) = ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) Fs''')))) = (n + (sizel ws))))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END c, f4 c, f3 cGraph cAPPEND creplace f2 cCONS f3 cNIL f6 cCONS f4 cNIL c+ f7 cLENGTH f8 b1 cAPPEND f9 cheightsNewVertices c#!# f9 f1 c#!# f9 f10 cLENGTH f8 cAPPEND b1 cREPLICATE cLENGTH f8 cCONS f4 cCONS f3 cNIL creplacefacesAt cCONS f10 cNIL f2 cCONS f4 cCONS f3 cNIL b0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c+ f7 csizel f8 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END c, f4 c, f3 cGraph cAPPEND creplace f2 cCONS f3 cNIL f6 cCONS f4 cNIL c+ f7 cLENGTH f8 b1 cAPPEND f9 cheightsNewVertices c#!# f9 f1 c#!# f9 f10 cLENGTH f8 cAPPEND b1 cREPLICATE cLENGTH f8 cCONS f4 cCONS f3 cNIL creplacefacesAt cCONS f10 cNIL f2 cCONS f4 cCONS f3 cNIL b0 f0 c+ f7 csizel f8
+ |- ((((\Fs'''. (Fs''' = ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs''))) Fs''') ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs''))))) = (n + (sizel ws)))) = T)
T c= c==> * / c= b0 creplacefacesAt cCONS f0 cNIL f1 cCONS f2 cCONS f3 cNIL f4 f5 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END c, f3 c, f2 cGraph cAPPEND creplace f1 cCONS f2 cNIL f6 cCONS f3 cNIL c+ f7 cLENGTH f8 b1 cAPPEND f9 cheightsNewVertices c#!# f9 f0 c#!# f9 f10 cLENGTH f8 cAPPEND b1 cREPLICATE cLENGTH f8 cCONS f3 cCONS f2 cNIL creplacefacesAt cCONS f10 cNIL f1 cCONS f3 cCONS f2 cNIL b0 creplacefacesAt cCONS f0 cNIL f1 cCONS f2 cCONS f3 cNIL f4 c+ f7 csizel f8 cT
+ |- ((Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) = ((\Fs'''''. (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))) Fs'''''))
T c= c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL * / c= b0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL f0
+ |- (((!x. (((\Fs'''''. (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))) x) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) = (n + (sizel ws))))) ==> ((?Fs'''''. (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) = (n + (sizel ws))))) = ((?Fs'''''. (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) = (n + (sizel ws)))))
T c= c==> ! c==> * / c= b1 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL b0 c= ccountVertices cSND cSND cLET / cLET_END c, f2 c, f3 cGraph cAPPEND creplace f4 cCONS f3 cNIL f5 cCONS f2 cNIL c+ f6 cLENGTH f1 b1 cAPPEND f7 cheightsNewVertices c#!# f7 f8 c#!# f7 f9 cLENGTH f1 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL c+ f6 csizel f1 c==> c? / c= b0 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL c= ccountVertices cSND cSND cLET / cLET_END c, f2 c, f3 cGraph cAPPEND creplace f4 cCONS f3 cNIL f5 cCONS f2 cNIL c+ f6 cLENGTH f1 b0 cAPPEND f7 cheightsNewVertices c#!# f7 f8 c#!# f7 f9 cLENGTH f1 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL c+ f6 csizel f1 c==> c? / c= b0 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL c= ccountVertices cSND cSND cLET / cLET_END c, f2 c, f3 cGraph cAPPEND creplace f4 cCONS f3 cNIL f5 cCONS f2 cNIL c+ f6 cLENGTH f1 b0 cAPPEND f7 cheightsNewVertices c#!# f7 f8 c#!# f7 f9 cLENGTH f1 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL c+ f6 csizel f1
+ |- ((h = (heights g)) ==> ((countVertices (SND (SND ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) = (n + (sizel ws))))
T c==> c= f0 cheights f1 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b4 c, b5 cGraph cAPPEND creplace f2 cCONS b5 cNIL f3 cCONS b4 cNIL c+ f4 cLENGTH f5 b7 cAPPEND b0 cheightsNewVertices c#!# b0 f6 c#!# b0 f7 cLENGTH f5 cAPPEND b7 cREPLICATE cLENGTH f5 cCONS b4 cCONS b5 cNIL creplacefacesAt cCONS f7 cNIL f2 cCONS b4 cCONS b5 cNIL b7 creplacefacesAt cCONS f6 cNIL f2 cCONS b5 cCONS b4 cNIL b7 creplacefacesAt b2 f2 cCONS b5 cNIL b6 creplacefacesAt b1 f2 cCONS b4 cNIL f8 csplit_face f2 f6 f7 f5 cbetwn cFST f2 f7 f6 cbetwn cFST f2 f6 f7 cheights f1 c+ f4 csizel f5
+ (Fs = (faceListAt g)) |- (((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) Fs)))) = (n + (sizel ws))) = ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) = (n + (sizel ws))))
T c==> c= f0 cfaceListAt f1 c= c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b5 c, b6 cGraph cAPPEND creplace f2 cCONS b6 cNIL f3 cCONS b5 cNIL c+ f4 cLENGTH f5 b7 cAPPEND b1 cheightsNewVertices c#!# b1 f6 c#!# b1 f7 cLENGTH f5 cAPPEND b7 cREPLICATE cLENGTH f5 cCONS b5 cCONS b6 cNIL creplacefacesAt cCONS f7 cNIL f2 cCONS b5 cCONS b6 cNIL b7 creplacefacesAt cCONS f6 cNIL f2 cCONS b6 cCONS b5 cNIL b7 creplacefacesAt b3 f2 cCONS b6 cNIL b7 creplacefacesAt b2 f2 cCONS b5 cNIL b0 csplit_face f2 f6 f7 f5 cbetwn cFST f2 f7 f6 cbetwn cFST f2 f6 f7 cheights f1 f0 c+ f4 csizel f5 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b5 c, b6 cGraph cAPPEND creplace f2 cCONS b6 cNIL f3 cCONS b5 cNIL c+ f4 cLENGTH f5 b7 cAPPEND b1 cheightsNewVertices c#!# b1 f6 c#!# b1 f7 cLENGTH f5 cAPPEND b7 cREPLICATE cLENGTH f5 cCONS b5 cCONS b6 cNIL creplacefacesAt cCONS f7 cNIL f2 cCONS b5 cCONS b6 cNIL b7 creplacefacesAt cCONS f6 cNIL f2 cCONS b6 cCONS b5 cNIL b7 creplacefacesAt b3 f2 cCONS b6 cNIL b7 creplacefacesAt b2 f2 cCONS b5 cNIL b0 csplit_face f2 f6 f7 f5 cbetwn cFST f2 f7 f6 cbetwn cFST f2 f6 f7 cheights f1 cfaceListAt f1 c+ f4 csizel f5
+ |- ((?vs2. (vs2 = (((betwn (FST f)) v) u))) ==> ((countVertices (SND (SND ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) = (n + (sizel ws))))
T c==> c? / c= b0 cbetwn cFST f0 f1 f2 c= ccountVertices cSND cSND cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b2 c, b3 cGraph cAPPEND creplace f0 cCONS b3 cNIL f3 cCONS b2 cNIL c+ f4 cLENGTH f5 b5 cAPPEND f6 cheightsNewVertices c#!# f6 f2 c#!# f6 f1 cLENGTH f5 cAPPEND b5 cREPLICATE cLENGTH f5 cCONS b2 cCONS b3 cNIL creplacefacesAt cCONS f1 cNIL f0 cCONS b2 cCONS b3 cNIL b5 creplacefacesAt cCONS f2 cNIL f0 cCONS b3 cCONS b2 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL b4 creplacefacesAt f7 f0 cCONS b2 cNIL f8 csplit_face f0 f2 f1 f5 cbetwn cFST f0 f1 f2 c+ f4 csizel f5
+ |- (!vs2. (((\vs2. (vs2 = (((betwn (FST f)) v) u))) vs2) ==> ((countVertices (SND (SND ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) = (n + (sizel ws)))))
T c==> * / c= b0 cbetwn cFST f0 f1 f2 f3 c= ccountVertices cSND cSND cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b2 c, b3 cGraph cAPPEND creplace f0 cCONS b3 cNIL f4 cCONS b2 cNIL c+ f5 cLENGTH f6 b5 cAPPEND f7 cheightsNewVertices c#!# f7 f2 c#!# f7 f1 cLENGTH f6 cAPPEND b5 cREPLICATE cLENGTH f6 cCONS b2 cCONS b3 cNIL creplacefacesAt cCONS f1 cNIL f0 cCONS b2 cCONS b3 cNIL b5 creplacefacesAt cCONS f2 cNIL f0 cCONS b3 cCONS b2 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL b4 creplacefacesAt f8 f0 cCONS b2 cNIL f9 csplit_face f0 f2 f1 f6 cbetwn cFST f0 f1 f2 c+ f5 csizel f6
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- (((faceListAt g) = Fs) = ((faceListAt g) = Fs))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= cfaceListAt f5 f6 c= cfaceListAt f5 f6
- |- (MAP = map)
T c= part cMAP part cmap
+ |- ((countVertices (SND (SND ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) = (n + (sizel ws)))
T c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b3 c, b4 cGraph cAPPEND creplace f0 cCONS b4 cNIL f1 cCONS b3 cNIL c+ f2 cLENGTH f3 b6 cAPPEND f4 cheightsNewVertices c#!# f4 f5 c#!# f4 f6 cLENGTH f3 cAPPEND b6 cREPLICATE cLENGTH f3 cCONS b3 cCONS b4 cNIL creplacefacesAt cCONS f6 cNIL f0 cCONS b3 cCONS b4 cNIL b6 creplacefacesAt cCONS f5 cNIL f0 cCONS b4 cCONS b3 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL f7 csplit_face f0 f5 f6 f3 cbetwn cFST f0 f6 f5 cbetwn cFST f0 f5 f6 c+ f2 csizel f3
+ |- (LENGTH = sizel)
T c= part cLENGTH part csizel
+ |- (?vs2. (vs2 = (((betwn (FST f)) v) u)))
T c? / c= b0 cbetwn cFST f0 f1 f2
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- ((((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs'') = Fs''') = (((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs'') = Fs'''))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= creplacefacesAt cCONS f6 cNIL f2 cCONS f4 cCONS f3 cNIL f7 f5 c= creplacefacesAt cCONS f6 cNIL f2 cCONS f4 cCONS f3 cNIL f7 f5
+ ((\fs. (fs = (faces g))) fs) |- (((\fs. (fs = (faces g))) fs) /\ ((countVertices (SND (SND ((LET (\fs. (LET_END ((LET (\n. (LET_END ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) (countVertices g))))) (faces g))))) = ((countVertices g) + (sizel ws))))
T c==> * / c= b0 cfaces f0 f1 c/\ * / c= b0 cfaces f0 f1 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b6 c, b7 b8 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b7 c, b8 cGraph cAPPEND creplace f2 cCONS b8 cNIL b0 cCONS b7 cNIL c+ b1 cLENGTH f3 b9 cAPPEND b3 cheightsNewVertices c#!# b3 f4 c#!# b3 f5 cLENGTH f3 cAPPEND b9 cREPLICATE cLENGTH f3 cCONS b7 cCONS b8 cNIL creplacefacesAt cCONS f5 cNIL f2 cCONS b7 cCONS b8 cNIL b9 creplacefacesAt cCONS f4 cNIL f2 cCONS b8 cCONS b7 cNIL b9 creplacefacesAt b5 f2 cCONS b8 cNIL b9 creplacefacesAt b4 f2 cCONS b7 cNIL b2 csplit_face f2 f4 f5 f3 cbetwn cFST f2 f5 f4 cbetwn cFST f2 f4 f5 cheights f0 cfaceListAt f0 ccountVertices f0 cfaces f0 c+ ccountVertices f0 csizel f3
+ ((\vs1. (vs1 = (((betwn (FST f)) u) v))) vs1) |- (vs1 = (((betwn (FST f)) u) v))
T c==> * / c= b0 cbetwn cFST f0 f1 f2 f3 c= f3 cbetwn cFST f0 f1 f2
+ ((\Fs''. (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs'))) Fs'') |- (((\Fs''. (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs'))) Fs'') /\ ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs'))))) = (n + (sizel ws))))
T c==> * / c= b0 creplacefacesAt f0 f1 cCONS f2 cNIL f3 f4 c/\ * / c= b0 creplacefacesAt f0 f1 cCONS f2 cNIL f3 f4 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, f5 c, f2 cGraph cAPPEND creplace f1 cCONS f2 cNIL f6 cCONS f5 cNIL c+ f7 cLENGTH f8 b1 cAPPEND f9 cheightsNewVertices c#!# f9 f10 c#!# f9 f11 cLENGTH f8 cAPPEND b1 cREPLICATE cLENGTH f8 cCONS f5 cCONS f2 cNIL creplacefacesAt cCONS f11 cNIL f1 cCONS f5 cCONS f2 cNIL b1 creplacefacesAt cCONS f10 cNIL f1 cCONS f2 cCONS f5 cNIL b0 creplacefacesAt f0 f1 cCONS f2 cNIL f3 c+ f7 csizel f8
+ |- ((countVertices (SND (SND ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) vs1)))) = (n + (sizel ws)))
T c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b3 c, b4 cGraph cAPPEND creplace f0 cCONS b4 cNIL f1 cCONS b3 cNIL c+ f2 cLENGTH f3 b6 cAPPEND f4 cheightsNewVertices c#!# f4 f5 c#!# f4 f6 cLENGTH f3 cAPPEND b6 cREPLICATE cLENGTH f3 cCONS b3 cCONS b4 cNIL creplacefacesAt cCONS f6 cNIL f0 cCONS b3 cCONS b4 cNIL b6 creplacefacesAt cCONS f5 cNIL f0 cCONS b4 cCONS b3 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL f7 csplit_face f0 f5 f6 f3 cbetwn cFST f0 f6 f5 f8 c+ f2 csizel f3
+ |- (((!x. (((\f1. (?f2. ((f1 , f2) = ((((split_face f) u) v) ws)))) x) ==> ((countVertices (SND (SND ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) = (n + (sizel ws))))) ==> ((?f1. (?f2. ((f1 , f2) = ((((split_face f) u) v) ws)))) ==> ((countVertices (SND (SND ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) = (n + (sizel ws))))) = ((?f1. (?f2. ((f1 , f2) = ((((split_face f) u) v) ws)))) ==> ((countVertices (SND (SND ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) = (n + (sizel ws)))))
T c= c==> ! c==> * / c? / c= c, b1 b2 csplit_face f0 f1 f2 f3 b0 c= ccountVertices cSND cSND cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b2 c, b3 cGraph cAPPEND creplace f0 cCONS b3 cNIL f4 cCONS b2 cNIL c+ f5 cLENGTH f3 b5 cAPPEND f6 cheightsNewVertices c#!# f6 f1 c#!# f6 f2 cLENGTH f3 cAPPEND b5 cREPLICATE cLENGTH f3 cCONS b2 cCONS b3 cNIL creplacefacesAt cCONS f2 cNIL f0 cCONS b2 cCONS b3 cNIL b5 creplacefacesAt cCONS f1 cNIL f0 cCONS b3 cCONS b2 cNIL b5 creplacefacesAt f7 f0 cCONS b3 cNIL b4 creplacefacesAt f8 f0 cCONS b2 cNIL f9 csplit_face f0 f1 f2 f3 c+ f5 csizel f3 c==> c? / c? / c= c, b0 b1 csplit_face f0 f1 f2 f3 c= ccountVertices cSND cSND cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b1 c, b2 cGraph cAPPEND creplace f0 cCONS b2 cNIL f4 cCONS b1 cNIL c+ f5 cLENGTH f3 b4 cAPPEND f6 cheightsNewVertices c#!# f6 f1 c#!# f6 f2 cLENGTH f3 cAPPEND b4 cREPLICATE cLENGTH f3 cCONS b1 cCONS b2 cNIL creplacefacesAt cCONS f2 cNIL f0 cCONS b1 cCONS b2 cNIL b4 creplacefacesAt cCONS f1 cNIL f0 cCONS b2 cCONS b1 cNIL b4 creplacefacesAt f7 f0 cCONS b2 cNIL b3 creplacefacesAt f8 f0 cCONS b1 cNIL f9 csplit_face f0 f1 f2 f3 c+ f5 csizel f3 c==> c? / c? / c= c, b0 b1 csplit_face f0 f1 f2 f3 c= ccountVertices cSND cSND cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b1 c, b2 cGraph cAPPEND creplace f0 cCONS b2 cNIL f4 cCONS b1 cNIL c+ f5 cLENGTH f3 b4 cAPPEND f6 cheightsNewVertices c#!# f6 f1 c#!# f6 f2 cLENGTH f3 cAPPEND b4 cREPLICATE cLENGTH f3 cCONS b1 cCONS b2 cNIL creplacefacesAt cCONS f2 cNIL f0 cCONS b1 cCONS b2 cNIL b4 creplacefacesAt cCONS f1 cNIL f0 cCONS b2 cCONS b1 cNIL b4 creplacefacesAt f7 f0 cCONS b2 cNIL b3 creplacefacesAt f8 f0 cCONS b1 cNIL f9 csplit_face f0 f1 f2 f3 c+ f5 csizel f3
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- (((heights g) = h) = ((heights g) = h))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= cheights f5 f6 c= cheights f5 f6
+ |- ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) Fs)))) = (n + (sizel ws)))
T c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b5 c, b6 cGraph cAPPEND creplace f0 cCONS b6 cNIL f1 cCONS b5 cNIL c+ f2 cLENGTH f3 b7 cAPPEND b1 cheightsNewVertices c#!# b1 f4 c#!# b1 f5 cLENGTH f3 cAPPEND b7 cREPLICATE cLENGTH f3 cCONS b5 cCONS b6 cNIL creplacefacesAt cCONS f5 cNIL f0 cCONS b5 cCONS b6 cNIL b7 creplacefacesAt cCONS f4 cNIL f0 cCONS b6 cCONS b5 cNIL b7 creplacefacesAt b3 f0 cCONS b6 cNIL b7 creplacefacesAt b2 f0 cCONS b5 cNIL b0 csplit_face f0 f4 f5 f3 cbetwn cFST f0 f5 f4 cbetwn cFST f0 f4 f5 cheights f6 f7 c+ f2 csizel f3
- |- ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)
T * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- |- ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))
T c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0
+ |- ((\_10513253. (!f1. (!f2. ((_10513253 (f1 , f2)) = (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))) (\_10513251. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251) , (((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251) , ((((Graph ((APPEND (((replace f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) NIL)) fs)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) NIL)) Fs)))))
T * / ! ! c= * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b1 c, b2 cGraph cAPPEND creplace f0 cCONS b2 cNIL f1 cCONS b1 cNIL c+ f2 cLENGTH f3 b4 cAPPEND f4 cheightsNewVertices c#!# f4 f5 c#!# f4 f6 cLENGTH f3 cAPPEND b4 cREPLICATE cLENGTH f3 cCONS b1 cCONS b2 cNIL creplacefacesAt cCONS f6 cNIL f0 cCONS b1 cCONS b2 cNIL b4 creplacefacesAt cCONS f5 cNIL f0 cCONS b2 cCONS b1 cNIL b4 creplacefacesAt f7 f0 cCONS b2 cNIL b3 creplacefacesAt f8 f0 cCONS b1 cNIL f9 / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, c@ / ! ! c= * b2 c, b3 b4 b3 b0 c, c@ / ! ! c= * b2 c, b3 b4 b4 b0 cGraph cAPPEND creplace f0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cNIL f1 cCONS c@ / ! ! c= * b2 c, b3 b4 b3 b0 cNIL c+ f2 cLENGTH f3 b2 cAPPEND f4 cheightsNewVertices c#!# f4 f5 c#!# f4 f6 cLENGTH f3 cAPPEND b2 cREPLICATE cLENGTH f3 cCONS c@ / ! ! c= * b2 c, b3 b4 b3 b0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cNIL creplacefacesAt cCONS f6 cNIL f0 cCONS c@ / ! ! c= * b2 c, b3 b4 b3 b0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cNIL b2 creplacefacesAt cCONS f5 cNIL f0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cCONS c@ / ! ! c= * b2 c, b3 b4 b3 b0 cNIL b2 creplacefacesAt f7 f0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cNIL b1 creplacefacesAt f8 f0 cCONS c@ / ! ! c= * b1 c, b2 b3 b2 b0 cNIL f9
+ |- ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs'))))) = (n + (sizel ws)))
T c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, f0 c, f1 cGraph cAPPEND creplace f2 cCONS f1 cNIL f3 cCONS f0 cNIL c+ f4 cLENGTH f5 b1 cAPPEND f6 cheightsNewVertices c#!# f6 f7 c#!# f6 f8 cLENGTH f5 cAPPEND b1 cREPLICATE cLENGTH f5 cCONS f0 cCONS f1 cNIL creplacefacesAt cCONS f8 cNIL f2 cCONS f0 cCONS f1 cNIL b1 creplacefacesAt cCONS f7 cNIL f2 cCONS f1 cCONS f0 cNIL b0 creplacefacesAt f9 f2 cCONS f1 cNIL f10 c+ f4 csizel f5
+ ((\Fs. (Fs = (faceListAt g))) Fs) |- (Fs = (faceListAt g))
T c==> * / c= b0 cfaceListAt f0 f1 c= f1 cfaceListAt f0
+ |- ((((\_10513251. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251) , (((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251) , ((((Graph ((APPEND (((replace f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) NIL)) fs)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10513251)) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10513251)) NIL)) Fs)))) (f1 , f2)) = (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs)))) = T)
T c= c= * / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, c@ / ! ! c= * b2 c, b3 b4 b3 b0 c, c@ / ! ! c= * b2 c, b3 b4 b4 b0 cGraph cAPPEND creplace f0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cNIL f1 cCONS c@ / ! ! c= * b2 c, b3 b4 b3 b0 cNIL c+ f2 cLENGTH f3 b2 cAPPEND f4 cheightsNewVertices c#!# f4 f5 c#!# f4 f6 cLENGTH f3 cAPPEND b2 cREPLICATE cLENGTH f3 cCONS c@ / ! ! c= * b2 c, b3 b4 b3 b0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cNIL creplacefacesAt cCONS f6 cNIL f0 cCONS c@ / ! ! c= * b2 c, b3 b4 b3 b0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cNIL b2 creplacefacesAt cCONS f5 cNIL f0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cCONS c@ / ! ! c= * b2 c, b3 b4 b3 b0 cNIL b2 creplacefacesAt f7 f0 cCONS c@ / ! ! c= * b2 c, b3 b4 b4 b0 cNIL b1 creplacefacesAt f8 f0 cCONS c@ / ! ! c= * b1 c, b2 b3 b2 b0 cNIL f9 c, f10 f11 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, f10 c, f11 cGraph cAPPEND creplace f0 cCONS f11 cNIL f1 cCONS f10 cNIL c+ f2 cLENGTH f3 b1 cAPPEND f4 cheightsNewVertices c#!# f4 f5 c#!# f4 f6 cLENGTH f3 cAPPEND b1 cREPLICATE cLENGTH f3 cCONS f10 cCONS f11 cNIL creplacefacesAt cCONS f6 cNIL f0 cCONS f10 cCONS f11 cNIL b1 creplacefacesAt cCONS f5 cNIL f0 cCONS f11 cCONS f10 cNIL b1 creplacefacesAt f7 f0 cCONS f11 cNIL b0 creplacefacesAt f8 f0 cCONS f10 cNIL f9 cT
+ ((\Fs'''''. (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))) Fs''''') |- (((Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) = (n + (sizel ws)))) = ((countVertices (SND (SND ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) = (n + (sizel ws))))
T c==> * / c= b0 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL f4 c= c==> c= f4 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL c= ccountVertices cSND cSND cLET / cLET_END c, f2 c, f3 cGraph cAPPEND creplace f5 cCONS f3 cNIL f6 cCONS f2 cNIL c+ f7 cLENGTH f1 b0 cAPPEND f8 cheightsNewVertices c#!# f8 f9 c#!# f8 f10 cLENGTH f1 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL c+ f7 csizel f1 c= ccountVertices cSND cSND cLET / cLET_END c, f2 c, f3 cGraph cAPPEND creplace f5 cCONS f3 cNIL f6 cCONS f2 cNIL c+ f7 cLENGTH f1 b0 cAPPEND f8 cheightsNewVertices c#!# f8 f9 c#!# f8 f10 cLENGTH f1 cAPPEND f0 cREPLICATE cLENGTH f1 cCONS f2 cCONS f3 cNIL c+ f7 csizel f1
+ ((f1 , f2) = ((((split_face f) u) v) ws)) |- (((countVertices (SND (SND ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) = (n + (sizel ws))) = ((countVertices (SND (SND ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) (f1 , f2))))) = (n + (sizel ws))))
T c==> c= c, f0 f1 csplit_face f2 f3 f4 f5 c= c= ccountVertices cSND cSND cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b1 c, b2 cGraph cAPPEND creplace f2 cCONS b2 cNIL f6 cCONS b1 cNIL c+ f7 cLENGTH f5 b4 cAPPEND f8 cheightsNewVertices c#!# f8 f3 c#!# f8 f4 cLENGTH f5 cAPPEND b4 cREPLICATE cLENGTH f5 cCONS b1 cCONS b2 cNIL creplacefacesAt cCONS f4 cNIL f2 cCONS b1 cCONS b2 cNIL b4 creplacefacesAt cCONS f3 cNIL f2 cCONS b2 cCONS b1 cNIL b4 creplacefacesAt f9 f2 cCONS b2 cNIL b3 creplacefacesAt f10 f2 cCONS b1 cNIL f11 csplit_face f2 f3 f4 f5 c+ f7 csizel f5 c= ccountVertices cSND cSND cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b1 c, b2 cGraph cAPPEND creplace f2 cCONS b2 cNIL f6 cCONS b1 cNIL c+ f7 cLENGTH f5 b4 cAPPEND f8 cheightsNewVertices c#!# f8 f3 c#!# f8 f4 cLENGTH f5 cAPPEND b4 cREPLICATE cLENGTH f5 cCONS b1 cCONS b2 cNIL creplacefacesAt cCONS f4 cNIL f2 cCONS b1 cCONS b2 cNIL b4 creplacefacesAt cCONS f3 cNIL f2 cCONS b2 cCONS b1 cNIL b4 creplacefacesAt f9 f2 cCONS b2 cNIL b3 creplacefacesAt f10 f2 cCONS b1 cNIL f11 c, f0 f1 c+ f7 csizel f5
+ |- ((?f2. ((f1 , f2) = ((((split_face f) u) v) ws))) = ((\f1. (?f2. ((f1 , f2) = ((((split_face f) u) v) ws)))) f1))
T c= c? / c= c, f0 b0 csplit_face f1 f2 f3 f4 * / c? / c= c, b0 b1 csplit_face f1 f2 f3 f4 f0
+ (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- ((\Fs''. (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs'))) Fs'')
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 * / c= b0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 f0
+ ((\h. (h = (heights g))) h) |- (((\h. (h = (heights g))) h) /\ ((countVertices (SND (SND ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) = (n + (sizel ws))))
T c==> * / c= b0 cheights f0 f1 c/\ * / c= b0 cheights f0 f1 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b4 c, b5 cGraph cAPPEND creplace f2 cCONS b5 cNIL f3 cCONS b4 cNIL c+ f4 cLENGTH f5 b7 cAPPEND b0 cheightsNewVertices c#!# b0 f6 c#!# b0 f7 cLENGTH f5 cAPPEND b7 cREPLICATE cLENGTH f5 cCONS b4 cCONS b5 cNIL creplacefacesAt cCONS f7 cNIL f2 cCONS b4 cCONS b5 cNIL b7 creplacefacesAt cCONS f6 cNIL f2 cCONS b5 cCONS b4 cNIL b7 creplacefacesAt b2 f2 cCONS b5 cNIL b6 creplacefacesAt b1 f2 cCONS b4 cNIL f8 csplit_face f2 f6 f7 f5 cbetwn cFST f2 f7 f6 cbetwn cFST f2 f6 f7 cheights f0 c+ f4 csizel f5
+ |- ((T ==> (?n. (n = (countVertices g)))) = (?n. (n = (countVertices g))))
T c= c==> cT c? / c= b0 ccountVertices f0 c? / c= b0 ccountVertices f0
+ ((\h. (h = (heights g))) h) |- (h = (heights g))
T c==> * / c= b0 cheights f0 f1 c= f1 cheights f0
+ |- ((countVertices (SND (SND ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) = (n + (sizel ws)))
T c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b4 c, b5 cGraph cAPPEND creplace f0 cCONS b5 cNIL f1 cCONS b4 cNIL c+ f2 cLENGTH f3 b7 cAPPEND b0 cheightsNewVertices c#!# b0 f4 c#!# b0 f5 cLENGTH f3 cAPPEND b7 cREPLICATE cLENGTH f3 cCONS b4 cCONS b5 cNIL creplacefacesAt cCONS f5 cNIL f0 cCONS b4 cCONS b5 cNIL b7 creplacefacesAt cCONS f4 cNIL f0 cCONS b5 cCONS b4 cNIL b7 creplacefacesAt b2 f0 cCONS b5 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL f6 csplit_face f0 f4 f5 f3 cbetwn cFST f0 f5 f4 cbetwn cFST f0 f4 f5 cheights f7 c+ f2 csizel f3
+ (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- (((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs'))))) = (n + (sizel ws))) = ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) Fs'')))) = (n + (sizel ws))))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, f5 c, f3 cGraph cAPPEND creplace f2 cCONS f3 cNIL f6 cCONS f5 cNIL c+ f7 cLENGTH f8 b1 cAPPEND f9 cheightsNewVertices c#!# f9 f10 c#!# f9 f11 cLENGTH f8 cAPPEND b1 cREPLICATE cLENGTH f8 cCONS f5 cCONS f3 cNIL creplacefacesAt cCONS f11 cNIL f2 cCONS f5 cCONS f3 cNIL b1 creplacefacesAt cCONS f10 cNIL f2 cCONS f3 cCONS f5 cNIL b0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c+ f7 csizel f8 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, f5 c, f3 cGraph cAPPEND creplace f2 cCONS f3 cNIL f6 cCONS f5 cNIL c+ f7 cLENGTH f8 b1 cAPPEND f9 cheightsNewVertices c#!# f9 f10 c#!# f9 f11 cLENGTH f8 cAPPEND b1 cREPLICATE cLENGTH f8 cCONS f5 cCONS f3 cNIL creplacefacesAt cCONS f11 cNIL f2 cCONS f5 cCONS f3 cNIL b1 creplacefacesAt cCONS f10 cNIL f2 cCONS f3 cCONS f5 cNIL b0 f0 c+ f7 csizel f8
- |- ((!f2. t) = t)
T c= ! f0 f0
+ |- (((!x. (((\Fs''''. (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs'''))) x) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs'''))))) = (n + (sizel ws))))) ==> ((?Fs''''. (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs'''))) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs'''))))) = (n + (sizel ws))))) = ((?Fs''''. (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs'''))) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs'''))))) = (n + (sizel ws)))))
T c= c==> ! c==> * / c= b1 creplacefacesAt cCONS f0 cNIL f1 cCONS f2 cCONS f3 cNIL f4 b0 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END c, f2 c, f3 cGraph cAPPEND creplace f1 cCONS f3 cNIL f5 cCONS f2 cNIL c+ f6 cLENGTH f7 b2 cAPPEND f8 cheightsNewVertices c#!# f8 f9 c#!# f8 f0 cLENGTH f7 cAPPEND b1 cREPLICATE cLENGTH f7 cCONS f2 cCONS f3 cNIL creplacefacesAt cCONS f0 cNIL f1 cCONS f2 cCONS f3 cNIL f4 c+ f6 csizel f7 c==> c? / c= b0 creplacefacesAt cCONS f0 cNIL f1 cCONS f2 cCONS f3 cNIL f4 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END c, f2 c, f3 cGraph cAPPEND creplace f1 cCONS f3 cNIL f5 cCONS f2 cNIL c+ f6 cLENGTH f7 b1 cAPPEND f8 cheightsNewVertices c#!# f8 f9 c#!# f8 f0 cLENGTH f7 cAPPEND b0 cREPLICATE cLENGTH f7 cCONS f2 cCONS f3 cNIL creplacefacesAt cCONS f0 cNIL f1 cCONS f2 cCONS f3 cNIL f4 c+ f6 csizel f7 c==> c? / c= b0 creplacefacesAt cCONS f0 cNIL f1 cCONS f2 cCONS f3 cNIL f4 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END c, f2 c, f3 cGraph cAPPEND creplace f1 cCONS f3 cNIL f5 cCONS f2 cNIL c+ f6 cLENGTH f7 b1 cAPPEND f8 cheightsNewVertices c#!# f8 f9 c#!# f8 f0 cLENGTH f7 cAPPEND b0 cREPLICATE cLENGTH f7 cCONS f2 cCONS f3 cNIL creplacefacesAt cCONS f0 cNIL f1 cCONS f2 cCONS f3 cNIL f4 c+ f6 csizel f7
+ (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- (((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs') = Fs'')
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= creplacefacesAt f1 f2 cCONS f3 cNIL f4 f0
+ (h = (heights g)) |- ((heights g) = h)
T c==> c= f0 cheights f1 c= cheights f1 f0
+ |- ((n = (countVertices g)) ==> ((countVertices (SND (SND ((LET (\n. (LET_END ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) (countVertices g))))) = ((countVertices g) + (sizel ws))))
T c==> c= f0 ccountVertices f1 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b6 c, b7 cGraph cAPPEND creplace f2 cCONS b7 cNIL f3 cCONS b6 cNIL c+ b0 cLENGTH f4 b8 cAPPEND b2 cheightsNewVertices c#!# b2 f5 c#!# b2 f6 cLENGTH f4 cAPPEND b8 cREPLICATE cLENGTH f4 cCONS b6 cCONS b7 cNIL creplacefacesAt cCONS f6 cNIL f2 cCONS b6 cCONS b7 cNIL b8 creplacefacesAt cCONS f5 cNIL f2 cCONS b7 cCONS b6 cNIL b8 creplacefacesAt b4 f2 cCONS b7 cNIL b8 creplacefacesAt b3 f2 cCONS b6 cNIL b1 csplit_face f2 f5 f6 f4 cbetwn cFST f2 f6 f5 cbetwn cFST f2 f5 f6 cheights f1 cfaceListAt f1 ccountVertices f1 c+ ccountVertices f1 csizel f4
+ |- ((?Fs. (Fs = (faceListAt g))) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) = (n + (sizel ws))))
T c==> c? / c= b0 cfaceListAt f0 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b5 c, b6 cGraph cAPPEND creplace f1 cCONS b6 cNIL f2 cCONS b5 cNIL c+ f3 cLENGTH f4 b7 cAPPEND b1 cheightsNewVertices c#!# b1 f5 c#!# b1 f6 cLENGTH f4 cAPPEND b7 cREPLICATE cLENGTH f4 cCONS b5 cCONS b6 cNIL creplacefacesAt cCONS f6 cNIL f1 cCONS b5 cCONS b6 cNIL b7 creplacefacesAt cCONS f5 cNIL f1 cCONS b6 cCONS b5 cNIL b7 creplacefacesAt b3 f1 cCONS b6 cNIL b7 creplacefacesAt b2 f1 cCONS b5 cNIL b0 csplit_face f1 f5 f6 f4 cbetwn cFST f1 f6 f5 cbetwn cFST f1 f5 f6 cheights f0 cfaceListAt f0 c+ f3 csizel f4
+ |- ((T ==> (?f1. (?f2. ((f1 , f2) = ((((split_face f) u) v) ws))))) = (?f1. (?f2. ((f1 , f2) = ((((split_face f) u) v) ws)))))
T c= c==> cT c? / c? / c= c, b0 b1 csplit_face f0 f1 f2 f3 c? / c? / c= c, b0 b1 csplit_face f0 f1 f2 f3
+ |- (((countVertices (SND (SND ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) = (n + (sizel ws))) = ((countVertices (SND (SND ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) h)))) = (n + (sizel ws))))
T c= c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b3 c, b4 cGraph cAPPEND creplace f0 cCONS b4 cNIL f1 cCONS b3 cNIL c+ f2 cLENGTH f3 b6 cAPPEND f4 cheightsNewVertices c#!# f4 f5 c#!# f4 f6 cLENGTH f3 cAPPEND b6 cREPLICATE cLENGTH f3 cCONS b3 cCONS b4 cNIL creplacefacesAt cCONS f6 cNIL f0 cCONS b3 cCONS b4 cNIL b6 creplacefacesAt cCONS f5 cNIL f0 cCONS b4 cCONS b3 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL b5 creplacefacesAt b0 f0 cCONS b3 cNIL f7 csplit_face f0 f5 f6 f3 cbetwn cFST f0 f6 f5 cbetwn cFST f0 f5 f6 c+ f2 csizel f3 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b4 c, b5 cGraph cAPPEND creplace f0 cCONS b5 cNIL f1 cCONS b4 cNIL c+ f2 cLENGTH f3 b7 cAPPEND b0 cheightsNewVertices c#!# b0 f5 c#!# b0 f6 cLENGTH f3 cAPPEND b7 cREPLICATE cLENGTH f3 cCONS b4 cCONS b5 cNIL creplacefacesAt cCONS f6 cNIL f0 cCONS b4 cCONS b5 cNIL b7 creplacefacesAt cCONS f5 cNIL f0 cCONS b5 cCONS b4 cNIL b7 creplacefacesAt b2 f0 cCONS b5 cNIL b6 creplacefacesAt b1 f0 cCONS b4 cNIL f7 csplit_face f0 f5 f6 f3 cbetwn cFST f0 f6 f5 cbetwn cFST f0 f5 f6 f4 c+ f2 csizel f3
- ((f1 , f2) = ((((split_face f) u) v) ws)) |- (((((betwn (FST f)) u) v) = vs1) = ((((betwn (FST f)) u) v) = vs1))
T c==> c= c, f0 f1 csplit_face f2 f3 f4 f5 c= c= cbetwn cFST f2 f3 f4 f6 c= cbetwn cFST f2 f3 f4 f6
+ (Fs = (faceListAt g)) |- ((faceListAt g) = Fs)
T c==> c= f0 cfaceListAt f1 c= cfaceListAt f1 f0
+ |- ((a = b) = ((GEQ a) b))
T c= c= f0 f1 cGEQ f0 f1
+ |- ((Fs = (faceListAt g)) ==> ((countVertices (SND (SND ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) = (n + (sizel ws))))
T c==> c= f0 cfaceListAt f1 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b5 c, b6 cGraph cAPPEND creplace f2 cCONS b6 cNIL f3 cCONS b5 cNIL c+ f4 cLENGTH f5 b7 cAPPEND b1 cheightsNewVertices c#!# b1 f6 c#!# b1 f7 cLENGTH f5 cAPPEND b7 cREPLICATE cLENGTH f5 cCONS b5 cCONS b6 cNIL creplacefacesAt cCONS f7 cNIL f2 cCONS b5 cCONS b6 cNIL b7 creplacefacesAt cCONS f6 cNIL f2 cCONS b6 cCONS b5 cNIL b7 creplacefacesAt b3 f2 cCONS b6 cNIL b7 creplacefacesAt b2 f2 cCONS b5 cNIL b0 csplit_face f2 f6 f7 f5 cbetwn cFST f2 f7 f6 cbetwn cFST f2 f6 f7 cheights f1 cfaceListAt f1 c+ f4 csizel f5
+ |- ((((\n. (n = (countVertices g))) n) ==> ((countVertices (SND (SND ((LET (\n. (LET_END ((LET (\Fs. (LET_END ((LET (\h. (LET_END ((LET (\vs1. (LET_END ((LET (\vs2. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) (((betwn (FST f)) v) u))))) (((betwn (FST f)) u) v))))) (heights g))))) (faceListAt g))))) (countVertices g))))) = ((countVertices g) + (sizel ws)))) = T)
T c= c==> * / c= b0 ccountVertices f0 f1 c= ccountVertices cSND cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b6 c, b7 cGraph cAPPEND creplace f2 cCONS b7 cNIL f3 cCONS b6 cNIL c+ b0 cLENGTH f4 b8 cAPPEND b2 cheightsNewVertices c#!# b2 f5 c#!# b2 f6 cLENGTH f4 cAPPEND b8 cREPLICATE cLENGTH f4 cCONS b6 cCONS b7 cNIL creplacefacesAt cCONS f6 cNIL f2 cCONS b6 cCONS b7 cNIL b8 creplacefacesAt cCONS f5 cNIL f2 cCONS b7 cCONS b6 cNIL b8 creplacefacesAt b4 f2 cCONS b7 cNIL b8 creplacefacesAt b3 f2 cCONS b6 cNIL b1 csplit_face f2 f5 f6 f4 cbetwn cFST f2 f6 f5 cbetwn cFST f2 f5 f6 cheights f0 cfaceListAt f0 ccountVertices f0 c+ ccountVertices f0 csizel f4 cT
- (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- (((heights g) = h) = ((heights g) = h))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= cheights f5 f6 c= cheights f5 f6
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- (((countVertices g) = n) = ((countVertices g) = n))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= ccountVertices f6 f7 c= ccountVertices f6 f7
- (vs2 = (((betwn (FST f)) v) u)) |- (((faceListAt g) = Fs) = ((faceListAt g) = Fs))
T c==> c= f0 cbetwn cFST f1 f2 f3 c= c= cfaceListAt f4 f5 c= cfaceListAt f4 f5
- (?f2. ((f1 , f2) = ((((split_face f) u) v) ws))) |- ((?f2. ((f1 , f2) = ((((split_face f) u) v) ws))) /\ ((countVertices (SND (SND ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END ((LET (\Fs. (LET_END (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs) ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) ((APPEND Fs) ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL)))))))) ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs))))) ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs))))) ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs))))) ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs))))))))) ((((split_face f) u) v) ws))))) = (n + (sizel ws))))
T c==> c? / c= c, f0 b0 csplit_face f1 f2 f3 f4 c/\ c? / c= c, f0 b0 csplit_face f1 f2 f3 f4 c= ccountVertices cSND cSND cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, b1 c, b2 cGraph cAPPEND creplace f1 cCONS b2 cNIL f5 cCONS b1 cNIL c+ f6 cLENGTH f4 b4 cAPPEND f7 cheightsNewVertices c#!# f7 f2 c#!# f7 f3 cLENGTH f4 cAPPEND b4 cREPLICATE cLENGTH f4 cCONS b1 cCONS b2 cNIL creplacefacesAt cCONS f3 cNIL f1 cCONS b1 cCONS b2 cNIL b4 creplacefacesAt cCONS f2 cNIL f1 cCONS b2 cCONS b1 cNIL b4 creplacefacesAt f8 f1 cCONS b2 cNIL b3 creplacefacesAt f9 f1 cCONS b1 cNIL f10 csplit_face f1 f2 f3 f4 c+ f6 csizel f4
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- (((((betwn (FST f)) v) u) = vs2) = ((((betwn (FST f)) v) u) = vs2))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= cbetwn cFST f5 f6 f7 f8 c= cbetwn cFST f5 f6 f7 f8
- (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- ((((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs) = Fs') = (((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs) = Fs'))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= creplacefacesAt f5 f2 cCONS f6 cNIL f7 f4 c= creplacefacesAt f5 f2 cCONS f6 cNIL f7 f4
- ((f1 , f2) = ((((split_face f) u) v) ws)) |- (((((betwn (FST f)) v) u) = vs2) = ((((betwn (FST f)) v) u) = vs2))
T c==> c= c, f0 f1 csplit_face f2 f3 f4 f5 c= c= cbetwn cFST f2 f4 f3 f6 c= cbetwn cFST f2 f4 f3 f6
- (Fs' = ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs)) |- (((faceListAt g) = Fs) = ((faceListAt g) = Fs))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= cfaceListAt f5 f4 c= cfaceListAt f5 f4
- (Fs''' = ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs'')) |- ((((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs') = Fs'') = (((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs') = Fs''))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= creplacefacesAt f6 f2 cCONS f3 cNIL f7 f5 c= creplacefacesAt f6 f2 cCONS f3 cNIL f7 f5
- (Fs''' = ((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs'')) |- ((((((split_face f) u) v) ws) = (f1 , f2)) = (((((split_face f) u) v) ws) = (f1 , f2)))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= csplit_face f2 f1 f6 f7 c, f4 f3 c= csplit_face f2 f1 f6 f7 c, f4 f3
- (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- ((((((split_face f) u) v) ws) = (f1 , f2)) = (((((split_face f) u) v) ws) = (f1 , f2)))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= csplit_face f2 f5 f6 f7 c, f8 f3 c= csplit_face f2 f5 f6 f7 c, f8 f3
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- (((((betwn (FST f)) u) v) = vs1) = ((((betwn (FST f)) u) v) = vs1))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= cbetwn cFST f2 f6 f1 f7 c= cbetwn cFST f2 f6 f1 f7
- (h = (heights g)) |- (((faceListAt g) = Fs) = ((faceListAt g) = Fs))
T c==> c= f0 cheights f1 c= c= cfaceListAt f1 f2 c= cfaceListAt f1 f2
- (Fs' = ((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs)) |- ((((((split_face f) u) v) ws) = (f1 , f2)) = (((((split_face f) u) v) ws) = (f1 , f2)))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= csplit_face f2 f5 f6 f7 c, f3 f8 c= csplit_face f2 f5 f6 f7 c, f3 f8
- (Fs = (faceListAt g)) |- (((faces g) = fs) = ((faces g) = fs))
T c==> c= f0 cfaceListAt f1 c= c= cfaces f1 f2 c= cfaces f1 f2
- (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- (((countVertices g) = n) = ((countVertices g) = n))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= ccountVertices f5 f6 c= ccountVertices f5 f6
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- ((((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''') = Fs'''') = (((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''') = Fs''''))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= creplacefacesAt cCONS f5 cNIL f6 cCONS f3 cCONS f4 cNIL f7 f1 c= creplacefacesAt cCONS f5 cNIL f6 cCONS f3 cCONS f4 cNIL f7 f1
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- ((((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs) = Fs') = (((((replacefacesAt vs1) f) ((CONS f1) NIL)) Fs) = Fs'))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= creplacefacesAt f5 f6 cCONS f3 cNIL f7 f8 c= creplacefacesAt f5 f6 cCONS f3 cNIL f7 f8
- (Fs = (faceListAt g)) |- (((countVertices g) = n) = ((countVertices g) = n))
T c==> c= f0 cfaceListAt f1 c= c= ccountVertices f1 f2 c= ccountVertices f1 f2
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- (((faces g) = fs) = ((faces g) = fs))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= cfaces f6 f7 c= cfaces f6 f7
- |- (((!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) ==> ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)) = ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0))
T c= c==> ! c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- ((f1 , f2) = ((((split_face f) u) v) ws)) |- (((countVertices g) = n) = ((countVertices g) = n))
T c==> c= c, f0 f1 csplit_face f2 f3 f4 f5 c= c= ccountVertices f6 f7 c= ccountVertices f6 f7
- (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- (((faceListAt g) = Fs) = ((faceListAt g) = Fs))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= cfaceListAt f5 f6 c= cfaceListAt f5 f6
- ((f1 , f2) = ((((split_face f) u) v) ws)) |- (((faceListAt g) = Fs) = ((faceListAt g) = Fs))
T c==> c= c, f0 f1 csplit_face f2 f3 f4 f5 c= c= cfaceListAt f6 f7 c= cfaceListAt f6 f7
- |- (((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) ==> ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)) = ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s))
T c= c==> ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- ((((((split_face f) u) v) ws) = (f1 , f2)) = (((((split_face f) u) v) ws) = (f1 , f2)))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= csplit_face f5 f6 f7 f2 c, f3 f4 c= csplit_face f5 f6 f7 f2 c, f3 f4
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- ((((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs') = Fs'') = (((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs') = Fs''))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= creplacefacesAt f5 f6 cCONS f4 cNIL f7 f8 c= creplacefacesAt f5 f6 cCONS f4 cNIL f7 f8
- ((f1 , f2) = ((((split_face f) u) v) ws)) |- (((heights g) = h) = ((heights g) = h))
T c==> c= c, f0 f1 csplit_face f2 f3 f4 f5 c= c= cheights f6 f7 c= cheights f6 f7
- (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- (((((betwn (FST f)) v) u) = vs2) = ((((betwn (FST f)) v) u) = vs2))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= cbetwn cFST f2 f5 f6 f1 c= cbetwn cFST f2 f5 f6 f1
- |- (((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))) = T)
T c= c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0 cT
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- (((faces g) = fs) = ((faces g) = fs))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= cfaces f5 f6 c= cfaces f5 f6
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- (((faceListAt g) = Fs) = ((faceListAt g) = Fs))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= cfaceListAt f6 f7 c= cfaceListAt f6 f7
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- ((((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs'') = Fs''') = (((((replacefacesAt ((CONS u) NIL)) f) ((CONS f2) ((CONS f1) NIL))) Fs'') = Fs'''))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= creplacefacesAt cCONS f5 cNIL f6 cCONS f4 cCONS f3 cNIL f7 f8 c= creplacefacesAt cCONS f5 cNIL f6 cCONS f4 cCONS f3 cNIL f7 f8
- (h = (heights g)) |- (((faces g) = fs) = ((faces g) = fs))
T c==> c= f0 cheights f1 c= c= cfaces f1 f2 c= cfaces f1 f2
- (Fs''''' = ((APPEND Fs'''') ((REPLICATE (LENGTH ws)) ((CONS f1) ((CONS f2) NIL))))) |- (((countVertices g) = n) = ((countVertices g) = n))
T c==> c= f0 cAPPEND f1 cREPLICATE cLENGTH f2 cCONS f3 cCONS f4 cNIL c= c= ccountVertices f5 f6 c= ccountVertices f5 f6
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- ((((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs') = Fs'') = (((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs') = Fs''))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= creplacefacesAt f6 f2 cCONS f4 cNIL f7 f8 c= creplacefacesAt f6 f2 cCONS f4 cNIL f7 f8
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- ((((((split_face f) u) v) ws) = (f1 , f2)) = (((((split_face f) u) v) ws) = (f1 , f2)))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= csplit_face f2 f6 f1 f7 c, f3 f4 c= csplit_face f2 f6 f1 f7 c, f3 f4
- (n = (countVertices g)) |- (((faces g) = fs) = ((faces g) = fs))
T c==> c= f0 ccountVertices f1 c= c= cfaces f1 f2 c= cfaces f1 f2
- (vs2 = (((betwn (FST f)) v) u)) |- (((heights g) = h) = ((heights g) = h))
T c==> c= f0 cbetwn cFST f1 f2 f3 c= c= cheights f4 f5 c= cheights f4 f5
- |- ((APPEND = cat) /\ (ALL = all))
T c/\ c= part cAPPEND part ccat c= part cALL part call
- |- (FILTER = filter)
T c= part cFILTER part cfilter
- (Fs'''' = ((((replacefacesAt ((CONS v) NIL)) f) ((CONS f1) ((CONS f2) NIL))) Fs''')) |- (((((betwn (FST f)) v) u) = vs2) = ((((betwn (FST f)) v) u) = vs2))
T c==> c= f0 creplacefacesAt cCONS f1 cNIL f2 cCONS f3 cCONS f4 cNIL f5 c= c= cbetwn cFST f2 f1 f6 f7 c= cbetwn cFST f2 f1 f6 f7
- ((f1 , f2) = ((((split_face f) u) v) ws)) |- (((faces g) = fs) = ((faces g) = fs))
T c==> c= c, f0 f1 csplit_face f2 f3 f4 f5 c= c= cfaces f6 f7 c= cfaces f6 f7
- (Fs'' = ((((replacefacesAt vs2) f) ((CONS f2) NIL)) Fs')) |- (((faces g) = fs) = ((faces g) = fs))
T c==> c= f0 creplacefacesAt f1 f2 cCONS f3 cNIL f4 c= c= cfaces f5 f6 c= cfaces f5 f6
- (h = (heights g)) |- (((countVertices g) = n) = ((countVertices g) = n))
T c==> c= f0 cheights f1 c= c= ccountVertices f1 f2 c= ccountVertices f1 f2
- |- (T = ((countVertices (SND (SND (f1 , (f2 , ((((Graph ((APPEND (((replace f) ((CONS f2) NIL)) fs)) ((CONS f1) NIL))) (n + (LENGTH ws))) Fs''''') ((APPEND h) (((heightsNewVertices ((#!# h) u)) ((#!# h) v)) (LENGTH ws))))))))) = (n + (sizel ws))))
T c= cT c= ccountVertices cSND cSND c, f0 c, f1 cGraph cAPPEND creplace f2 cCONS f1 cNIL f3 cCONS f0 cNIL c+ f4 cLENGTH f5 f6 cAPPEND f7 cheightsNewVertices c#!# f7 f8 c#!# f7 f9 cLENGTH f5 c+ f4 csizel f5
- (vs2 = (((betwn (FST f)) v) u)) |- (((countVertices g) = n) = ((countVertices g) = n))
T c==> c= f0 cbetwn cFST f1 f2 f3 c= c= ccountVertices f4 f5 c= ccountVertices f4 f5
- |- ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)
T * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
