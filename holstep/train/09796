N Wmlnymd.admissible1_list_admissible1
C |- (!g. (!w. (((admissible1_list w) (fgraph g)) ==> ((admissible1 (w o FST)) g))))
T c==> cadmissible1_list f0 cfgraph f1 cadmissible1 * * part co f0 part cFST f1
D o_THM
A |- (!f. (!g. (!x. (((f o g) x) = (f (g x))))))
T c= co f0 f1 f2 * f0 * f1 f2
D IN_SET_OF_LIST
A |- (!x. (!l. ((x IN (set_of_list l)) = ((MEM x) l))))
T c= cIN f0 * part cset_of_list f1 cMEM f0 f1
D Tame_defs.faces
A |- (faces = FST)
T c= part cfaces part cFST
D Tame_defs.FACES
A |- (!g. ((Faces g) = (set_of_list (faces g))))
T c= * part cFaces f0 * part cset_of_list cfaces f0
D Tame_defs.fgraph
A |- (!g. ((fgraph g) = ((MAP FST) (faces g))))
T c= cfgraph f0 cMAP part cFST cfaces f0
D Tame_list.MEMf_MAP
A |- (!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u))))))
T c==> cMEM f0 f1 cMEM * f2 f0 cMAP f2 f1
D Import_tame_classification.admissible1
A |- (!g. (!w. (((admissible1 w) g) = (!f. ((f IN (Faces g)) ==> ((squanderFace (LENGTH (FST f))) <= (w f)))))))
T c= cadmissible1 f0 f1 ! c==> cIN b0 * part cFaces f1 c<= csquanderFace cLENGTH cFST b0 * f0 b0
D Wmlnymd.admissible1_list
A |- (!L. (!w. (((admissible1_list w) L) = (!f. (((MEM f) L) ==> ((squanderFace (LENGTH f)) <= (w f)))))))
T c= cadmissible1_list f0 f1 ! c==> cMEM b0 f1 c<= csquanderFace cLENGTH b0 * f0 b0
+ |- (((!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) ==> (!x. (!f. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u))))))) = (!x. (!f. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))))
T c= c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 ! ! ! c==> cMEM b0 b2 cMEM * b1 b0 cMAP b1 b2 ! ! ! c==> cMEM b0 b2 cMEM * b1 b0 cMAP b1 b2
+ |- (((!l. ((x IN (set_of_list l)) = ((MEM x) l))) ==> ((\l. ((x IN (set_of_list l)) = ((MEM x) l))) l)) = ((\l. ((x IN (set_of_list l)) = ((MEM x) l))) l))
T c= c==> ! c= cIN f0 * part cset_of_list b0 cMEM f0 b0 * / c= cIN f0 * part cset_of_list b0 cMEM f0 b0 f1 * / c= cIN f0 * part cset_of_list b0 cMEM f0 b0 f1
- ((MEM x) u) |- ((!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) ==> ((MEM (f x)) ((MAP f) u)))
T c==> cMEM f0 f1 c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 cMEM * f2 f0 cMAP f2 f1
+ |- ((\w. (((admissible1_list w) L) = (!f. (((MEM f) L) ==> ((squanderFace (LENGTH f)) <= (w f)))))) w)
T * / c= cadmissible1_list b0 f0 ! c==> cMEM b1 f0 c<= csquanderFace cLENGTH b1 * b0 b1 f1
+ (!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) |- (!f. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))
T c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 ! ! c==> cMEM f0 b1 cMEM * b0 f0 cMAP b0 b1
- (!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) |- ((\u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))) u)
T c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 * / c==> cMEM f0 b0 cMEM * f1 f0 cMAP f1 b0 f2
- ((MEM (FST f)) ((MAP FST) (FST g))) |- ((((MEM (FST f)) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f))))
T c==> cMEM cFST f0 cMAP part cFST cFST f1 c==> c==> cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0
+ |- ((\u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))) u)
T * / c==> cMEM f0 b0 cMEM * f1 f0 cMAP f1 b0 f2
+ |- ((!g. (!w. ((!f. (((MEM f) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH f)) <= (w f)))) ==> (!f. (((MEM f) (FST g)) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))))))) = (!g. (!w. (((admissible1_list w) (fgraph g)) ==> ((admissible1 (w o FST)) g)))))
T c= ! ! c==> ! c==> cMEM b2 cMAP part cFST cFST b0 c<= csquanderFace cLENGTH b2 * b1 b2 ! c==> cMEM b2 cFST b0 c<= csquanderFace cLENGTH cFST b2 * b1 cFST b2 ! ! c==> cadmissible1_list b1 cfgraph b0 cadmissible1 * * part co b1 part cFST b0
+ |- (((!x. (!f. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) ==> ((\x. (!f. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) x)) = ((\x. (!f. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) x))
T c= c==> ! ! ! c==> cMEM b0 b2 cMEM * b1 b0 cMAP b1 b2 * / ! ! c==> cMEM b0 b2 cMEM * b1 b0 cMAP b1 b2 f0 * / ! ! c==> cMEM b0 b2 cMEM * b1 b0 cMAP b1 b2 f0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (!f. (((MEM f) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH f)) <= (w f)))) |- ((\f. (((MEM f) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH f)) <= (w f)))) (FST f))
T c==> ! c==> cMEM b0 cMAP part cFST cFST f0 c<= csquanderFace cLENGTH b0 * f1 b0 * / c==> cMEM b0 cMAP part cFST cFST f0 c<= csquanderFace cLENGTH b0 * f1 b0 cFST f2
- ((MEM f) (FST g)) |- (((MEM f) (FST g)) = T)
T c==> cMEM f0 cFST f1 c= cMEM f0 cFST f1 cT
- |- ((!f. t) = t)
T c= ! f0 f0
+ (!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) |- ((\f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) f)
T c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 * / ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 f0
- (((MEM (FST f)) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))) |- ((((MEM (FST f)) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))) /\ (((MEM (FST f)) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))))
T c==> c==> cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0 c/\ c==> cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0 c==> cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0
+ ((MEM f) (FST g)) |- ((MEM (FST f)) ((MAP FST) (FST g)))
T c==> cMEM f0 cFST f1 cMEM cFST f0 cMAP part cFST cFST f1
+ |- (((!g. (!x. (((f o g) x) = (f (g x))))) ==> ((\g. (!x. (((f o g) x) = (f (g x))))) g)) = ((\g. (!x. (((f o g) x) = (f (g x))))) g))
T c= c==> ! ! c= co f0 b0 b1 * f0 * b0 b1 * / ! c= co f0 b0 b1 * f0 * b0 b1 f1 * / ! c= co f0 b0 b1 * f0 * b0 b1 f1
- (!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))), ((MEM x) u) |- ((!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) /\ ((MEM (f x)) ((MAP f) u)))
T c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 c==> cMEM f0 f1 c/\ ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 cMEM * f2 f0 cMAP f2 f1
+ (!f. (((MEM f) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH f)) <= (w f)))) |- (((MEM f) (FST g)) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f))))
T c==> ! c==> cMEM b0 cMAP part cFST cFST f0 c<= csquanderFace cLENGTH b0 * f1 b0 c==> cMEM f2 cFST f0 c<= csquanderFace cLENGTH cFST f2 * f1 cFST f2
+ |- (((!x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) ==> ((\x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) x)) = ((\x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) x))
T c= c==> ! ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 * / ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 f0 * / ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 f0
+ |- (((!f. (!g. (!x. (((f o g) x) = (f (g x)))))) ==> ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) f)) = ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) f))
T c= c==> ! ! ! c= co b0 b1 b2 * b0 * b1 b2 * / ! ! c= co b0 b1 b2 * b0 * b1 b2 f0 * / ! ! c= co b0 b1 b2 * b0 * b1 b2 f0
- (!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) |- ((((MEM x) u) ==> ((MEM (f x)) ((MAP f) u))) = T)
T c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 c= c==> cMEM f0 f1 cMEM * f2 f0 cMAP f2 f1 cT
- (!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))) |- (((!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))) ==> ((\u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))) u)) = ((\u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))) u))
T c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 c= c==> ! c==> cMEM f0 b0 cMEM * f1 f0 cMAP f1 b0 * / c==> cMEM f0 b0 cMEM * f1 f0 cMAP f1 b0 f2 * / c==> cMEM f0 b0 cMEM * f1 f0 cMAP f1 b0 f2
+ |- ((\w. (((admissible1 w) g) = (!f. ((f IN (Faces g)) ==> ((squanderFace (LENGTH (FST f))) <= (w f)))))) w)
T * / c= cadmissible1 b0 f0 ! c==> cIN b1 * part cFaces f0 c<= csquanderFace cLENGTH cFST b1 * b0 b1 f1
+ |- (((!w. (((admissible1_list w) L) = (!f. (((MEM f) L) ==> ((squanderFace (LENGTH f)) <= (w f)))))) ==> ((\w. (((admissible1_list w) L) = (!f. (((MEM f) L) ==> ((squanderFace (LENGTH f)) <= (w f)))))) w)) = ((\w. (((admissible1_list w) L) = (!f. (((MEM f) L) ==> ((squanderFace (LENGTH f)) <= (w f)))))) w))
T c= c==> ! c= cadmissible1_list b0 f0 ! c==> cMEM b1 f0 c<= csquanderFace cLENGTH b1 * b0 b1 * / c= cadmissible1_list b0 f0 ! c==> cMEM b1 f0 c<= csquanderFace cLENGTH b1 * b0 b1 f1 * / c= cadmissible1_list b0 f0 ! c==> cMEM b1 f0 c<= csquanderFace cLENGTH b1 * b0 b1 f1
- (!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))), ((MEM x) u) |- ((MEM (f x)) ((MAP f) u))
T c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 c==> cMEM f0 f1 cMEM * f2 f0 cMAP f2 f1
- (((MEM (FST f)) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))), ((MEM (FST f)) ((MAP FST) (FST g))) |- (((MEM (FST f)) ((MAP FST) (FST g))) /\ ((squanderFace (LENGTH (FST f))) <= (w (FST f))))
T c==> c==> cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0 c==> cMEM cFST f0 cMAP part cFST cFST f1 c/\ cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0
- (!f. (!x. (!u. (((MEM x) u) ==> ((MEM (f x)) ((MAP f) u)))))), ((MEM x) u) |- (((MEM x) u) /\ ((MEM (f x)) ((MAP f) u)))
T c==> ! ! ! c==> cMEM b1 b2 cMEM * b0 b1 cMAP b0 b2 c==> cMEM f0 f1 c/\ cMEM f0 f1 cMEM * f2 f0 cMAP f2 f1
- |- ((((MEM (FST f)) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))) ==> (((MEM (FST f)) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))))
T c==> c==> cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0 c==> cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0
- (((MEM (FST f)) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))), ((MEM (FST f)) ((MAP FST) (FST g))) |- ((((MEM (FST f)) ((MAP FST) (FST g))) ==> ((squanderFace (LENGTH (FST f))) <= (w (FST f)))) /\ ((squanderFace (LENGTH (FST f))) <= (w (FST f))))
T c==> c==> cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0 c==> cMEM cFST f0 cMAP part cFST cFST f1 c/\ c==> cMEM cFST f0 cMAP part cFST cFST f1 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0 c<= csquanderFace cLENGTH cFST f0 * f2 cFST f0
- ((MEM f) (FST g)) |- (T = ((MEM f) (FST g)))
T c==> cMEM f0 cFST f1 c= cT cMEM f0 cFST f1
