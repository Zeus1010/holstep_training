N Auqtzyz.lemma_inverse_res_power
C |- (!n. ((((POWER (inverse ((res (face_map H)) ((face H) x)))) n) x) = (((POWER (inverse (face_map H))) n) x)))
T c= cPOWER * part cinverse * * part cres * part cface_map f0 * * part cface f0 f1 f2 f1 cPOWER * part cinverse * part cface_map f0 f2 f1
D TRUTH
A |- T
T cT
D o_DEF
A |- (!f. (!g. ((f o g) = (\x. (f (g x))))))
T c= * * part co f0 f1 / * f0 * f1 b0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D Hypermap.COM_POWER
A |- (!n. (!f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))))
T c= * * part cPOWER f0 cSUC f1 * * part co f0 * * part cPOWER f0 f1
D Hypermap.face_refl
A |- (!H. (!x. (x IN ((face H) x))))
T cIN f0 * * part cface f1 f0
D Hypermap.lemma_inverse_res
A |- (!H. (!x. (!y. ((y IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) y) = ((inverse (face_map H)) y))))))
T c==> cIN f0 * * part cface f1 f2 c= cinverse * * part cres * part cface_map f1 * * part cface f1 f2 f0 cinverse * part cface_map f1 f0
D Hypermap.lemma_power_inverse_in_face
A |- (!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))))))
T c==> cIN f0 * * part cface f1 f2 cIN cPOWER * part cinverse * part cface_map f1 f3 f0 * * part cface f1 f2
- |- ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)
T * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ ((((POWER (inverse ((res (face_map H)) ((face H) x)))) n) x) = (((POWER (inverse (face_map H))) n) x)) |- ((((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x))) = ((((POWER (inverse ((res (face_map H)) ((face H) x)))) (SUC n)) x) = (((POWER (inverse (face_map H))) (SUC n)) x)))
T c==> c= cPOWER * part cinverse * * part cres * part cface_map f0 * * part cface f0 f1 f2 f1 cPOWER * part cinverse * part cface_map f0 f2 f1 c= c= cinverse * * part cres * part cface_map f0 * * part cface f0 f1 cPOWER * part cinverse * part cface_map f0 f2 f1 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f2 f1 c= cPOWER * part cinverse * * part cres * part cface_map f0 * * part cface f0 f1 cSUC f2 f1 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1
+ |- (T = ((((POWER (inverse ((res (face_map H)) ((face H) x)))) (NUMERAL _0)) x) = (((POWER (inverse (face_map H))) (NUMERAL _0)) x)))
T c= cT c= cPOWER * part cinverse * * part cres * part cface_map f0 * * part cface f0 f1 cNUMERAL c_0 f1 cPOWER * part cinverse * part cface_map f0 cNUMERAL c_0 f1
+ |- ((\f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))) f)
T * / c= * * part cPOWER b0 cSUC f0 * * part co b0 * * part cPOWER b0 f0 f1
+ |- (((!H. (!x. (x IN ((face H) x)))) ==> ((\H. (!x. (x IN ((face H) x)))) H)) = ((\H. (!x. (x IN ((face H) x)))) H))
T c= c==> ! ! cIN b1 * * part cface b0 b1 * / ! cIN b1 * * part cface b0 b1 f0 * / ! cIN b1 * * part cface b0 b1 f0
+ (!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))))) |- ((\n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))) n)
T c==> ! ! ! ! c==> cIN b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map b0 b3 b2 * * part cface b0 b1 * / c==> cIN f0 * * part cface f1 f2 cIN cPOWER * part cinverse * part cface_map f1 b0 f0 * * part cface f1 f2 f3
+ |- (((!H. (!x. (!y. ((y IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) y) = ((inverse (face_map H)) y)))))) ==> ((\H. (!x. (!y. ((y IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) y) = ((inverse (face_map H)) y)))))) H)) = ((\H. (!x. (!y. ((y IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) y) = ((inverse (face_map H)) y)))))) H))
T c= c==> ! ! ! c==> cIN b2 * * part cface b0 b1 c= cinverse * * part cres * part cface_map b0 * * part cface b0 b1 b2 cinverse * part cface_map b0 b2 * / ! ! c==> cIN b2 * * part cface b0 b1 c= cinverse * * part cres * part cface_map b0 * * part cface b0 b1 b2 cinverse * part cface_map b0 b2 f0 * / ! ! c==> cIN b2 * * part cface b0 b1 c= cinverse * * part cres * part cface_map b0 * * part cface b0 b1 b2 cinverse * part cface_map b0 b2 f0
- |- ((((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))) ==> (((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))))
T c==> c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2 c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2
+ (!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))))) |- (!x. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))
T c==> ! ! ! ! c==> cIN b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map b0 b3 b2 * * part cface b0 b1 ! c==> cIN f0 * * part cface f1 b0 cIN cPOWER * part cinverse * part cface_map f1 f2 f0 * * part cface f1 b0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- (y IN ((face H) x)) |- ((!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))))) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))
T c==> cIN f0 * * part cface f1 f2 c==> ! ! ! ! c==> cIN b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map b0 b3 b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map f1 f3 f0 * * part cface f1 f2
+ |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- |- (((!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) ==> ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)) = ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f))
T c= c==> ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ |- ((\y. (!H. (!x. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))))) y)
T * / ! ! c==> cIN b0 * * part cface b1 b2 cIN cPOWER * part cinverse * part cface_map b1 f0 b0 * * part cface b1 b2 f1
+ |- (((!x. (x IN ((face H) x))) ==> ((\x. (x IN ((face H) x))) x)) = ((\x. (x IN ((face H) x))) x))
T c= c==> ! cIN b0 * * part cface f0 b0 * / cIN b0 * * part cface f0 b0 f1 * / cIN b0 * * part cface f0 b0 f1
+ (!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))))) |- (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))))
T c==> ! ! ! ! c==> cIN b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map b0 b3 b2 * * part cface b0 b1 ! ! c==> cIN b0 * * part cface f0 f1 cIN cPOWER * part cinverse * part cface_map f0 b1 b0 * * part cface f0 f1
- ((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) |- ((((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x))))
T c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c==> c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2
+ (!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))))) |- (((!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))))) ==> ((\x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))))) x)) = ((\x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))))) x))
T c==> ! ! ! ! c==> cIN b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map b0 b3 b2 * * part cface b0 b1 c= c==> ! ! ! c==> cIN b1 * * part cface f0 b0 cIN cPOWER * part cinverse * part cface_map f0 b2 b1 * * part cface f0 b0 * / ! ! c==> cIN b1 * * part cface f0 b0 cIN cPOWER * part cinverse * part cface_map f0 b2 b1 * * part cface f0 b0 f1 * / ! ! c==> cIN b1 * * part cface f0 b0 cIN cPOWER * part cinverse * part cface_map f0 b2 b1 * * part cface f0 b0 f1
+ |- (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))
T c= cinverse * * part cres * part cface_map f0 * * part cface f0 f1 cPOWER * part cinverse * part cface_map f0 f2 f1 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f2 f1
+ (!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))))) |- ((!x. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))) = T)
T c==> ! ! ! ! c==> cIN b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map b0 b3 b2 * * part cface b0 b1 c= ! c==> cIN f0 * * part cface f1 b0 cIN cPOWER * part cinverse * part cface_map f1 f2 f0 * * part cface f1 b0 cT
+ |- ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)
T * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
+ |- ((\H. (!x. (x IN ((face H) x)))) H)
T * / ! cIN b1 * * part cface b0 b1 f0
- (((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))) |- ((((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))) /\ (((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))))
T c==> c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2 c/\ c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2 c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2
- (((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))), ((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) |- ((((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))) /\ (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x))))
T c==> c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2 c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c/\ c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2
- |- (((POWER f) (SUC n)) = (((POWER f) n) o f))
T c= * * part cPOWER f0 cSUC f1 * * part co * * part cPOWER f0 f1 f0
- |- (((!n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) ==> ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n)) = ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n))
T c= c==> ! c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1
- (!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))))), (y IN ((face H) x)) |- ((y IN ((face H) x)) /\ ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))
T c==> ! ! ! ! c==> cIN b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map b0 b3 b2 * * part cface b0 b1 c==> cIN f0 * * part cface f1 f2 c/\ cIN f0 * * part cface f1 f2 cIN cPOWER * part cinverse * part cface_map f1 f3 f0 * * part cface f1 f2
- (!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))))), (y IN ((face H) x)) |- ((!H. (!x. (!y. (!n. ((y IN ((face H) x)) ==> ((((POWER (inverse (face_map H))) n) y) IN ((face H) x))))))) /\ ((((POWER (inverse (face_map H))) n) y) IN ((face H) x)))
T c==> ! ! ! ! c==> cIN b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map b0 b3 b2 * * part cface b0 b1 c==> cIN f0 * * part cface f1 f2 c/\ ! ! ! ! c==> cIN b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map b0 b3 b2 * * part cface b0 b1 cIN cPOWER * part cinverse * part cface_map f1 f3 f0 * * part cface f1 f2
- (((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))), ((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) |- (((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) /\ (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x))))
T c==> c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2 c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c/\ cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2
- |- (((\x. (f x)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n)
T * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1
- (((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))) |- ((((((POWER (inverse (face_map H))) n) x) IN ((face H) x)) ==> (((inverse ((res (face_map H)) ((face H) x))) (((POWER (inverse (face_map H))) n) x)) = ((inverse (face_map H)) (((POWER (inverse (face_map H))) n) x)))) = T)
T c==> c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2 c= c==> cIN cPOWER * part cinverse * part cface_map f0 f1 f2 * * part cface f0 f2 c= cinverse * * part cres * part cface_map f0 * * part cface f0 f2 cPOWER * part cinverse * part cface_map f0 f1 f2 cinverse * part cface_map f0 cPOWER * part cinverse * part cface_map f0 f1 f2 cT
