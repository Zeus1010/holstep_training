N Collect_geom2.lemma_span4
C |- (!a. (!b. (!c. (!d. (((~ (a = b)) /\ ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))))))
T c==> c/\ c~ c= f0 f1 c/\ c~ c= f0 f2 c/\ c~ c= f0 f3 c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
D TRUTH
A |- T
T cT
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_GT
A |- ((!m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) /\ ((~ (_0 > _0)) /\ ((!n. (~ (_0 > (BIT0 n)))) /\ ((!n. (~ (_0 > (BIT1 n)))) /\ ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m)))))))))))))
T c/\ ! ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 c/\ c~ c> c_0 c_0 c/\ ! c~ c> c_0 cBIT0 b0 c/\ ! c~ c> c_0 cBIT1 b0 c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
D NOT_IN_EMPTY
A |- (!x. (~ (x IN EMPTY)))
T c~ cIN f0 part cEMPTY
D IN_INSERT
A |- (!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))))
T c= cIN f0 * * part cINSERT f1 f2 c\/ c= f0 f1 cIN f0 f2
D EXISTS_IN_INSERT
A |- (!P. (!a. (!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x))))))))
T c= c? / c/\ cIN b0 * * part cINSERT f0 f1 * f2 b0 c\/ * f2 f0 c? / c/\ cIN b0 f1 * f2 b0
D INSERT_AC
A |- (((x INSERT (y INSERT s)) = (y INSERT (x INSERT s))) /\ ((x INSERT (x INSERT s)) = (x INSERT s)))
T c/\ c= * * part cINSERT f0 * * part cINSERT f1 f2 * * part cINSERT f1 * * part cINSERT f0 f2 c= * * part cINSERT f0 * * part cINSERT f0 f2 * * part cINSERT f0 f2
D EMPTY_DELETE
A |- (!x. ((EMPTY DELETE x) = EMPTY))
T c= * * part cDELETE part cEMPTY f0 part cEMPTY
D DELETE_INSERT
A |- (!x. (!y. (!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y)))))))
T c= * * part cDELETE * * part cINSERT f0 f1 f2 * * * part cCOND c= f0 f2 * * part cDELETE f1 f2 * * part cINSERT f0 * * part cDELETE f1 f2
D FINITE_EMPTY
A |- (FINITE EMPTY)
T cFINITE part cEMPTY
D FINITE_INSERT
A |- (!s. (!x. ((FINITE (x INSERT s)) = (FINITE s))))
T c= cFINITE * * part cINSERT f0 f1 cFINITE f1
D Oxl_2012.CARD_INSERT
A |- (!x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))))
T c==> cFINITE f0 c= cCARD * * part cINSERT f1 f0 cCOND cIN f1 f0 cCARD f0 cSUC cCARD f0
D Oxl_2012.CARD_EMPTY
A |- ((CARD EMPTY) = (NUMERAL _0))
T c= cCARD part cEMPTY cNUMERAL c_0
D DIMINDEX_3
A |- ((dimindex UNIV) = (NUMERAL (BIT1 (BIT1 _0))))
T c= cdimindex part cUNIV cNUMERAL cBIT1 cBIT1 c_0
D dependent
A |- (!s. ((dependent s) = (?a. ((a IN s) /\ (a IN (span (s DELETE a)))))))
T c= cdependent f0 c? / c/\ cIN b0 f0 cIN b0 * part cspan * * part cDELETE f0 b0
D DEPENDENT_BIGGERSET
A |- (!s. (((FINITE s) ==> ((CARD s) > (dimindex UNIV))) ==> (dependent s)))
T c==> c==> cFINITE f0 c> cCARD f0 cdimindex part cUNIV cdependent f0
- |- ((\m. (!n. (((BIT0 m) <= (BIT0 n)) = (m <= n)))) m)
T * / ! c= c<= cBIT0 b0 cBIT0 b1 c<= b0 b1 f0
- |- (((!n. (((BIT0 n) + _0) = (BIT0 n))) ==> ((\n. (((BIT0 n) + _0) = (BIT0 n))) n)) = ((\n. (((BIT0 n) + _0) = (BIT0 n))) n))
T c= c==> ! c= c+ cBIT0 b0 c_0 cBIT0 b0 * / c= c+ cBIT0 b0 c_0 cBIT0 b0 f0 * / c= c+ cBIT0 b0 c_0 cBIT0 b0 f0
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), (~ (b = d)), (~ (c = d)) |- ((((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (a INSERT (c INSERT (d INSERT EMPTY))))) \/ ((c IN (span (a INSERT (b INSERT (d INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (((a IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a))) \/ ((b IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE b))) \/ ((c IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE c))) \/ (d IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE d)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c~ c= f1 f3 c==> c~ c= f2 f3 c= c==> c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f0 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c\/ cIN f0 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f0 c\/ cIN f1 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f1 c\/ cIN f2 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f2 cIN f3 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((b IN (c INSERT (d INSERT EMPTY))) ==> ((CARD (c INSERT (d INSERT EMPTY))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))))
T c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY
+ |- ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))))
T c= c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY
+ (~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) |- ((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) /\ ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))))
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c/\ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))
T c= cEXP cBIT0 f0 cBIT0 f1 c* cEXP cBIT0 f0 f1 cEXP cBIT0 f0 f1
- |- (((!m. (!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m)))) ==> ((\m. (!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m)))) m)) = ((\m. (!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m)))) m))
T c= c==> ! ! c= c>= cNUMERAL b1 cNUMERAL b0 c>= b1 b0 * / ! c= c>= cNUMERAL b1 cNUMERAL b0 c>= b1 b0 f0 * / ! c= c>= cNUMERAL b1 cNUMERAL b0 c>= b1 b0 f0
- |- ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))))))
T c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
- |- (((!n. (((BIT1 n) * _0) = _0)) ==> ((\n. (((BIT1 n) * _0) = _0)) n)) = ((\n. (((BIT1 n) * _0) = _0)) n))
T c= c==> ! c= c* cBIT1 b0 c_0 c_0 * / c= c* cBIT1 b0 c_0 c_0 f0 * / c= c* cBIT1 b0 c_0 c_0 f0
- |- (((BIT0 m) = (BIT1 n)) = F)
T c= c= cBIT0 f0 cBIT1 f1 cF
- |- (((!n. (((BIT0 n) * _0) = _0)) ==> ((\n. (((BIT0 n) * _0) = _0)) n)) = ((\n. (((BIT0 n) * _0) = _0)) n))
T c= c==> ! c= c* cBIT0 b0 c_0 c_0 * / c= c* cBIT0 b0 c_0 c_0 f0 * / c= c* cBIT0 b0 c_0 c_0 f0
+ |- (((!n. ((BIT1 n) > _0)) ==> ((\n. ((BIT1 n) > _0)) n)) = ((\n. ((BIT1 n) > _0)) n))
T c= c==> ! c> cBIT1 b0 c_0 * / c> cBIT1 b0 c_0 f0 * / c> cBIT1 b0 c_0 f0
- |- (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n)))
T c= c+ cBIT0 f0 cBIT1 f1 cBIT1 c+ f0 f1
+ |- ((t \/ F) = t)
T c= c\/ f0 cF f0
+ |- ((SUC _0) = (BIT1 _0))
T c= cSUC c_0 cBIT1 c_0
- |- (((!m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) ==> ((\m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) m)) = ((\m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) m))
T c= c==> ! ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 * / ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 f0 * / ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 f0
- |- ((_0 <= (BIT0 n)) = T)
T c= c<= c_0 cBIT0 f0 cT
- |- (((BIT1 m) = (BIT0 n)) = F)
T c= c= cBIT1 f0 cBIT0 f1 cF
+ |- ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m)))))))
T c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
+ |- (((!x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) ==> ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x)) = ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x))
T c= c==> ! ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0 * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0
- |- (((PRE _0) = _0) /\ ((!n. ((PRE (BIT0 n)) = (((COND (n = _0)) _0) (BIT1 (PRE n))))) /\ (!n. ((PRE (BIT1 n)) = (BIT0 n)))))
T c/\ c= cPRE c_0 c_0 c/\ ! c= cPRE cBIT0 b0 cCOND c= b0 c_0 c_0 cBIT1 cPRE b0 ! c= cPRE cBIT1 b0 cBIT0 b0
- |- (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n))))
T c= c* cBIT0 f0 cBIT0 f1 cBIT0 cBIT0 c* f0 f1
- |- ((b IN (c INSERT (d INSERT EMPTY))) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- (a IN (b INSERT (c INSERT (d INSERT EMPTY)))) |- ((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) /\ ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c/\ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((!n. (((BIT1 n) = _0) = F)) /\ ((!n. ((_0 = (BIT0 n)) = (_0 = n))) /\ ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n))))))))))
T c/\ ! c= c= cBIT1 b0 c_0 cF c/\ ! c= c= c_0 cBIT0 b0 c= c_0 b0 c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- (((BIT1 m) < (BIT0 n)) = (m < n))
T c= c< cBIT1 f0 cBIT0 f1 c< f0 f1
- |- ((\m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) m)
T * / ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 f0
+ |- (FINITE (b INSERT (c INSERT (d INSERT EMPTY))))
T cFINITE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), (~ (b = d)), (~ (c = d)) |- ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c~ c= f1 f3 c==> c~ c= f2 f3 c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- (((!m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) ==> ((\m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) m)) = ((\m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) m))
T c= c==> ! ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 * / ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 f0 * / ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 f0
+ |- ((~ (c IN (d INSERT EMPTY))) ==> ((SUC (CARD (d INSERT EMPTY))) = (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))
T c= cEXP c_0 cBIT0 f0 c* cEXP c_0 f0 cEXP c_0 f0
- |- (((!t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 f4 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 f4
- |- (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n)))
T c= cEXP cNUMERAL f0 cNUMERAL f1 cNUMERAL cEXP f0 f1
+ |- (((!n. ((SUC (BIT0 n)) = (BIT1 n))) ==> ((\n. ((SUC (BIT0 n)) = (BIT1 n))) n)) = ((\n. ((SUC (BIT0 n)) = (BIT1 n))) n))
T c= c==> ! c= cSUC cBIT0 b0 cBIT1 b0 * / c= cSUC cBIT0 b0 cBIT1 b0 f0 * / c= cSUC cBIT0 b0 cBIT1 b0 f0
- |- ((!n. ((EVEN (BIT0 n)) = T)) /\ (!n. ((EVEN (BIT1 n)) = F)))
T c/\ ! c= cEVEN cBIT0 b0 cT ! c= cEVEN cBIT1 b0 cF
- |- (((!n. ((ODD (BIT0 n)) = F)) ==> ((\n. ((ODD (BIT0 n)) = F)) n)) = ((\n. ((ODD (BIT0 n)) = F)) n))
T c= c==> ! c= cODD cBIT0 b0 cF * / c= cODD cBIT0 b0 cF f0 * / c= cODD cBIT0 b0 cF f0
- |- ((\m. (((BIT1 m) EXP _0) = (BIT1 _0))) m)
T * / c= cEXP cBIT1 b0 c_0 cBIT1 c_0 f0
- |- (((!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))) ==> ((\n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))) n)) = ((\n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))) n))
T c= c==> ! c= cEXP cBIT1 f0 cBIT0 b0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 * / c= cEXP cBIT1 f0 cBIT0 b0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 f1 * / c= cEXP cBIT1 f0 cBIT0 b0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 f1
+ |- ((\t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 f2
- |- (((!n. ((_0 * (BIT0 n)) = _0)) ==> ((\n. ((_0 * (BIT0 n)) = _0)) n)) = ((\n. ((_0 * (BIT0 n)) = _0)) n))
T c= c==> ! c= c* c_0 cBIT0 b0 c_0 * / c= c* c_0 cBIT0 b0 c_0 f0 * / c= c* c_0 cBIT0 b0 c_0 f0
- |- (((!n. ((EVEN (BIT1 n)) = F)) ==> ((\n. ((EVEN (BIT1 n)) = F)) n)) = ((\n. ((EVEN (BIT1 n)) = F)) n))
T c= c==> ! c= cEVEN cBIT1 b0 cF * / c= cEVEN cBIT1 b0 cF f0 * / c= cEVEN cBIT1 b0 cF f0
- |- (((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) ==> ((\m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) m)) = ((\m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) m))
T c= c==> ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 * / ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 f0 * / ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 f0
- |- (((!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))) ==> ((\m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))) m)) = ((\m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))) m))
T c= c==> ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 * / ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 f0 * / ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 f0
- |- ((\n. (((BIT0 m) < (BIT0 n)) = (m < n))) n)
T * / c= c< cBIT0 f0 cBIT0 b0 c< f0 b0 f1
+ |- ((!b. (!c. (!d. (((~ (a = b)) /\ ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))))) = T)
T c= ! ! ! c==> c/\ c~ c= f0 b0 c/\ c~ c= f0 b1 c/\ c~ c= f0 b2 c/\ c~ c= b0 b1 c/\ c~ c= b0 b2 c~ c= b1 b2 c\/ cIN f0 * part cspan * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY c\/ cIN b0 * part cspan * * part cINSERT b1 * * part cINSERT b2 * * part cINSERT f0 part cEMPTY c\/ cIN b1 * part cspan * * part cINSERT b2 * * part cINSERT f0 * * part cINSERT b0 part cEMPTY cIN b2 * part cspan * * part cINSERT f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cT
- |- ((\n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n)))) n)
T * / c= c* cNUMERAL f0 cNUMERAL b0 cNUMERAL c* f0 b0 f1
- |- (((!g'. (!t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f2
- |- ((\n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) n)
T * / c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 f0
- |- ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))
T c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
+ |- ((\e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4
- |- ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))
T c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((!n. ((_0 >= (BIT0 n)) = (_0 >= n))) /\ ((!n. (~ (_0 >= (BIT1 n)))) /\ ((!n. ((BIT0 n) >= _0)) /\ ((!n. ((BIT1 n) >= _0)) /\ ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m)))))))))))
T c/\ ! c= c>= c_0 cBIT0 b0 c>= c_0 b0 c/\ ! c~ c>= c_0 cBIT1 b0 c/\ ! c>= cBIT0 b0 c_0 c/\ ! c>= cBIT1 b0 c_0 c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
- |- ((_0 < _0) = F)
T c= c< c_0 c_0 cF
- |- (((!n. (((BIT1 n) < _0) = F)) ==> ((\n. (((BIT1 n) < _0) = F)) n)) = ((\n. (((BIT1 n) < _0) = F)) n))
T c= c==> ! c= c< cBIT1 b0 c_0 cF * / c= c< cBIT1 b0 c_0 cF f0 * / c= c< cBIT1 b0 c_0 cF f0
- |- ((_0 + (BIT0 n)) = (BIT0 n))
T c= c+ c_0 cBIT0 f0 cBIT0 f0
+ |- (((!g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND b0 b1 b2 f4 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND b0 b1 b2 f4
- |- ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))))))
T c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))
T c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
- |- ((\n. ((BIT0 n) >= _0)) n)
T * / c>= cBIT0 b0 c_0 f0
- |- (((BIT1 n) - _0) = (BIT1 n))
T c= c- cBIT1 f0 c_0 cBIT1 f0
- |- (((!n. ((_0 - (BIT0 n)) = _0)) ==> ((\n. ((_0 - (BIT0 n)) = _0)) n)) = ((\n. ((_0 - (BIT0 n)) = _0)) n))
T c= c==> ! c= c- c_0 cBIT0 b0 c_0 * / c= c- c_0 cBIT0 b0 c_0 f0 * / c= c- c_0 cBIT0 b0 c_0 f0
+ |- ((\p'. (!q'. ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q')))))) p')
T * / ! c==> c= c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV b0 c==> c==> b0 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> b0 b1 f4
- (~ (d IN EMPTY)) |- ((d IN EMPTY) = F)
T c==> c~ cIN f0 part cEMPTY c= cIN f0 part cEMPTY cF
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), (~ (b = d)), (~ (c = d)) |- ((((FINITE (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV))) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c~ c= f1 f3 c==> c~ c= f2 f3 c==> c==> c==> cFINITE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- (((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) ==> ((\n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) n)) = ((\n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) n))
T c= c==> ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 * / c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 f0 * / c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 f0
+ (~ (a = b)), ((~ (a = b)) /\ ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))))) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c/\ c~ c= f0 f1 c/\ c~ c= f0 f2 c/\ c~ c= f0 f3 c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((\m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) m)
T * / ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
- |- ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))))))))))
T c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
+ |- ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x)
T * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0
- |- (((!n. (((BIT1 n) <= _0) = F)) ==> ((\n. (((BIT1 n) <= _0) = F)) n)) = ((\n. (((BIT1 n) <= _0) = F)) n))
T c= c==> ! c= c<= cBIT1 b0 c_0 cF * / c= c<= cBIT1 b0 c_0 cF f0 * / c= c<= cBIT1 b0 c_0 cF f0
- |- ((\n. (((BIT1 n) >= (BIT1 m)) = (n >= m))) n)
T * / c= c>= cBIT1 b0 cBIT1 f0 c>= b0 f0 f1
+ |- ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))))
T c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m)))))))
T c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
- |- ((\n. (~ (_0 >= (BIT1 n)))) n)
T * / c~ c>= c_0 cBIT1 b0 f0
- |- (((!n. ((_0 + (BIT0 n)) = (BIT0 n))) ==> ((\n. ((_0 + (BIT0 n)) = (BIT0 n))) n)) = ((\n. ((_0 + (BIT0 n)) = (BIT0 n))) n))
T c= c==> ! c= c+ c_0 cBIT0 b0 cBIT0 b0 * / c= c+ c_0 cBIT0 b0 cBIT0 b0 f0 * / c= c+ c_0 cBIT0 b0 cBIT0 b0 f0
- |- (((!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0))) ==> ((\n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0))) n)) = ((\n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0))) n))
T c= c==> ! c= c- cBIT1 f0 cBIT0 b0 cCOND c<= b0 f0 cBIT1 c- f0 b0 c_0 * / c= c- cBIT1 f0 cBIT0 b0 cCOND c<= b0 f0 cBIT1 c- f0 b0 c_0 f1 * / c= c- cBIT1 f0 cBIT0 b0 cCOND c<= b0 f0 cBIT1 c- f0 b0 c_0 f1
- |- ((((c IN (d INSERT EMPTY)) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) ==> (((~ (c IN (d INSERT EMPTY))) ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e')))) = (((~ (c IN (d INSERT EMPTY))) ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e'))))
T c= c==> c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2
+ |- (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c= c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((!d. (((~ (a = b)) /\ ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))) = T)
T c= ! c==> c/\ c~ c= f0 f1 c/\ c~ c= f0 f2 c/\ c~ c= f0 b0 c/\ c~ c= f1 f2 c/\ c~ c= f1 b0 c~ c= f2 b0 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT b0 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT b0 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT b0 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN b0 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT
- |- (((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) ==> ((\m. (!n. (((BIT1 m) = (BIT0 n)) = F))) m)) = ((\m. (!n. (((BIT1 m) = (BIT0 n)) = F))) m))
T c= c==> ! ! c= c= cBIT1 b0 cBIT0 b1 cF * / ! c= c= cBIT1 b0 cBIT0 b1 cF f0 * / ! c= c= cBIT1 b0 cBIT0 b1 cF f0
- |- ((\n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0))) n)
T * / c= c- cBIT1 f0 cBIT0 b0 cCOND c<= b0 f0 cBIT1 c- f0 b0 c_0 f1
+ |- ((SUC (BIT1 n)) = (BIT0 (SUC n)))
T c= cSUC cBIT1 f0 cBIT0 cSUC f0
+ ((~ (a = b)) /\ ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))))) |- (((~ (a = b)) /\ ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))))) /\ ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))
T c==> c/\ c~ c= f0 f1 c/\ c~ c= f0 f2 c/\ c~ c= f0 f3 c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c/\ c/\ c~ c= f0 f1 c/\ c~ c= f0 f2 c/\ c~ c= f0 f3 c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- (((BIT1 m) < (BIT1 n)) = (m < n))
T c= c< cBIT1 f0 cBIT1 f1 c< f0 f1
- |- (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f5 c==> c==> c~ f4 c= cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f6 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f4 f5 f6
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((\m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) m)
T * / ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 f0
+ |- (((!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e')))))) ==> ((\e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e')))))) e')) = ((\e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 f5 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 f5
- |- (((!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))) ==> ((\m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))) m)) = ((\m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))) m))
T c= c==> ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 * / ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0 * / ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
+ |- (((FINITE (b INSERT (c INSERT (d INSERT EMPTY)))) ==> ((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))))) = ((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))))))
T c= c==> cFINITE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f3 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f3 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- (((!g'. (!t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f1 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f1
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- |- ((NUMERAL (NUMERAL _0)) = (NUMERAL _0))
T c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0
+ |- (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (a INSERT (c INSERT (d INSERT EMPTY))))) \/ ((c IN (span (a INSERT (b INSERT (d INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))
T c==> c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f0 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- (d IN EMPTY) |- ((d IN EMPTY) /\ ((NUMERAL _0) = (NUMERAL _0)))
T c==> cIN f0 part cEMPTY c/\ cIN f0 part cEMPTY c= cNUMERAL c_0 cNUMERAL c_0
- |- (((!n. ((PRE (BIT1 n)) = (BIT0 n))) ==> ((\n. ((PRE (BIT1 n)) = (BIT0 n))) n)) = ((\n. ((PRE (BIT1 n)) = (BIT0 n))) n))
T c= c==> ! c= cPRE cBIT1 b0 cBIT0 b0 * / c= cPRE cBIT1 b0 cBIT0 b0 f0 * / c= cPRE cBIT1 b0 cBIT0 b0 f0
- |- (((!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n)))) ==> ((\n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n)))) n)) = ((\n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n)))) n))
T c= c==> ! c= c+ cNUMERAL f0 cNUMERAL b0 cNUMERAL c+ f0 b0 * / c= c+ cNUMERAL f0 cNUMERAL b0 cNUMERAL c+ f0 b0 f1 * / c= c+ cNUMERAL f0 cNUMERAL b0 cNUMERAL c+ f0 b0 f1
- |- (((BIT1 m) <= (BIT1 n)) = (m <= n))
T c= c<= cBIT1 f0 cBIT1 f1 c<= f0 f1
+ |- (((!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e')))))) ==> ((\e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e')))))) e')) = ((\e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c==> c==> c~ f4 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND f4 f5 b0 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c==> c==> c~ f4 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND f4 f5 b0 f6 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c==> c==> c~ f4 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND f4 f5 b0 f6
- |- (((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) ==> ((\m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) m)) = ((\m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) m))
T c= c==> ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 * / ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 f0 * / ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 f0
+ |- (((FINITE EMPTY) ==> ((CARD (d INSERT EMPTY)) = (((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))))) = ((CARD (d INSERT EMPTY)) = (((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY)))))
T c= c==> cFINITE part cEMPTY c= cCARD * * part cINSERT f0 part cEMPTY cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY c= cCARD * * part cINSERT f0 part cEMPTY cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY
- |- (((EVEN _0) = T) /\ ((!n. ((EVEN (BIT0 n)) = T)) /\ (!n. ((EVEN (BIT1 n)) = F))))
T c/\ c= cEVEN c_0 cT c/\ ! c= cEVEN cBIT0 b0 cT ! c= cEVEN cBIT1 b0 cF
- (~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) |- ((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) /\ ((SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) = (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))))
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c/\ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) ==> ((\m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) m)) = ((\m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) m))
T c= c==> ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 * / ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0 * / ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
- |- ((\n. (((BIT0 m) <= (BIT0 n)) = (m <= n))) n)
T * / c= c<= cBIT0 f0 cBIT0 b0 c<= f0 b0 f1
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), (~ (b = d)), (~ (c = d)) |- ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c~ c= f1 f3 c==> c~ c= f2 f3 c==> cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((\s. ((dependent s) = (?a. ((a IN s) /\ (a IN (span (s DELETE a))))))) s)
T * / c= cdependent b0 c? / c/\ cIN b1 b0 cIN b1 * part cspan * * part cDELETE b0 b1 f0
+ |- ((x INSERT (y INSERT s)) = (y INSERT (x INSERT s)))
T c= * * part cINSERT f0 * * part cINSERT f1 f2 * * part cINSERT f1 * * part cINSERT f0 f2
+ |- ((FINITE EMPTY) = T)
T c= cFINITE part cEMPTY cT
+ |- (((NUMERAL n) > (NUMERAL m)) = (n > m))
T c= c> cNUMERAL f0 cNUMERAL f1 c> f0 f1
+ |- (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 f4
- |- ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))
T c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
- |- (((BIT0 m) < (BIT0 n)) = (m < n))
T c= c< cBIT0 f0 cBIT0 f1 c< f0 f1
+ (c IN (d INSERT EMPTY)) |- ((c IN (d INSERT EMPTY)) /\ ((CARD (d INSERT EMPTY)) = (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> cIN f0 * * part cINSERT f1 part cEMPTY c/\ cIN f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((PRE (NUMERAL n)) = (NUMERAL (PRE n)))
T c= cPRE cNUMERAL f0 cNUMERAL cPRE f0
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), ((~ (b = d)) /\ (~ (c = d))) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- (((!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e')))))) ==> ((\e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e')))))) e')) = ((\e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4
- |- (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))
T c= c+ cBIT1 f0 cBIT1 f1 cBIT0 cSUC c+ f0 f1
- |- (((!n. ((_0 EXP (BIT1 n)) = _0)) ==> ((\n. ((_0 EXP (BIT1 n)) = _0)) n)) = ((\n. ((_0 EXP (BIT1 n)) = _0)) n))
T c= c==> ! c= cEXP c_0 cBIT1 b0 c_0 * / c= cEXP c_0 cBIT1 b0 c_0 f0 * / c= cEXP c_0 cBIT1 b0 c_0 f0
- |- ((_0 >= (BIT0 n)) = (_0 >= n))
T c= c>= c_0 cBIT0 f0 c>= c_0 f0
+ |- (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = ((((FINITE (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV))) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c==> cFINITE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> q')))
T c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV f4
+ |- (T = (FINITE EMPTY))
T c= cT cFINITE part cEMPTY
- |- (((_0 = _0) = T) /\ ((!n. (((BIT0 n) = _0) = (n = _0))) /\ ((!n. (((BIT1 n) = _0) = F)) /\ ((!n. ((_0 = (BIT0 n)) = (_0 = n))) /\ ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n))))))))))))
T c/\ c= c= c_0 c_0 cT c/\ ! c= c= cBIT0 b0 c_0 c= b0 c_0 c/\ ! c= c= cBIT1 b0 c_0 cF c/\ ! c= c= c_0 cBIT0 b0 c= c_0 b0 c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- (((BIT0 n) - _0) = (BIT0 n))
T c= c- cBIT0 f0 c_0 cBIT0 f0
- |- (((!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) ==> ((\n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) n)) = ((\n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) n))
T c= c==> ! c= cEXP cBIT0 f0 cBIT1 b0 c* cBIT0 f0 c* cEXP cBIT0 f0 b0 cEXP cBIT0 f0 b0 * / c= cEXP cBIT0 f0 cBIT1 b0 c* cBIT0 f0 c* cEXP cBIT0 f0 b0 cEXP cBIT0 f0 b0 f1 * / c= cEXP cBIT0 f0 cBIT1 b0 c* cBIT0 f0 c* cEXP cBIT0 f0 b0 cEXP cBIT0 f0 b0 f1
- |- ((\m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) m)
T * / ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 f0
- |- (((BIT1 n) <= _0) = F)
T c= c<= cBIT1 f0 c_0 cF
+ |- (FINITE (c INSERT (d INSERT EMPTY)))
T cFINITE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))))
T c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- ((\n. (((NUMERAL m) = (NUMERAL n)) = (m = n))) n)
T * / c= c= cNUMERAL f0 cNUMERAL b0 c= f0 b0 f1
- |- ((c IN (d INSERT EMPTY)) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))))) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))))) = ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))))))
T c= c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY
- |- ((\n. (((NUMERAL m) <= (NUMERAL n)) = (m <= n))) n)
T * / c= c<= cNUMERAL f0 cNUMERAL b0 c<= f0 b0 f1
- |- (((!g'. (!t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f3 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f3
- |- ((\n. ((EVEN (BIT0 n)) = T)) n)
T * / c= cEVEN cBIT0 b0 cT f0
- |- ((_0 + _0) = _0)
T c= c+ c_0 c_0 c_0
- |- (((!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n)))) ==> ((\n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n)))) n)) = ((\n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n)))) n))
T c= c==> ! c= c+ cBIT0 f0 cBIT1 b0 cBIT1 c+ f0 b0 * / c= c+ cBIT0 f0 cBIT1 b0 cBIT1 c+ f0 b0 f1 * / c= c+ cBIT0 f0 cBIT1 b0 cBIT1 c+ f0 b0 f1
- |- ((!n. (~ (_0 >= (BIT1 n)))) /\ ((!n. ((BIT0 n) >= _0)) /\ ((!n. ((BIT1 n) >= _0)) /\ ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m))))))))))
T c/\ ! c~ c>= c_0 cBIT1 b0 c/\ ! c>= cBIT0 b0 c_0 c/\ ! c>= cBIT1 b0 c_0 c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
- |- ((_0 * (BIT0 n)) = _0)
T c= c* c_0 cBIT0 f0 c_0
+ |- (((!n. (((BIT0 n) > (BIT1 m)) = (n > m))) ==> ((\n. (((BIT0 n) > (BIT1 m)) = (n > m))) n)) = ((\n. (((BIT0 n) > (BIT1 m)) = (n > m))) n))
T c= c==> ! c= c> cBIT0 b0 cBIT1 f0 c> b0 f0 * / c= c> cBIT0 b0 cBIT1 f0 c> b0 f0 f1 * / c= c> cBIT0 b0 cBIT1 f0 c> b0 f0 f1
- |- (((BIT0 n) >= (BIT0 m)) = (n >= m))
T c= c>= cBIT0 f0 cBIT0 f1 c>= f0 f1
- |- (((BIT0 m) <= (BIT1 n)) = (m <= n))
T c= c<= cBIT0 f0 cBIT1 f1 c<= f0 f1
- |- (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = t')) ==> (((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) t') e'))))
T c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f5 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 f5
- |- ((\m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) m)
T * / ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 f0
- |- (((!n. ((_0 * (BIT1 n)) = _0)) ==> ((\n. ((_0 * (BIT1 n)) = _0)) n)) = ((\n. ((_0 * (BIT1 n)) = _0)) n))
T c= c==> ! c= c* c_0 cBIT1 b0 c_0 * / c= c* c_0 cBIT1 b0 c_0 f0 * / c= c* c_0 cBIT1 b0 c_0 f0
+ |- ((\m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) m)
T * / ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 f0
- |- ((EVEN (BIT1 n)) = F)
T c= cEVEN cBIT1 f0 cF
- |- ((\m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) m)
T * / ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 f0
- |- ((PRE _0) = _0)
T c= cPRE c_0 c_0
+ |- ((?a'. t) = t)
T c= c? / f0 f0
- |- (((!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) ==> ((\e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) e')) = ((\e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 f3 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 f3
- |- ((\n. (((BIT0 m) < (BIT1 n)) = (m <= n))) n)
T * / c= c< cBIT0 f0 cBIT1 b0 c<= f0 b0 f1
+ |- ((\p'. (!q'. ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q')))))) p')
T * / ! c==> c= c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV b0 c==> c==> b0 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c= c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> b0 b1 f4
+ |- ((((a IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a))) \/ ((b IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE b))) \/ ((c IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE c))) \/ (d IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE d)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c= c==> c\/ cIN f0 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f0 c\/ cIN f1 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f1 c\/ cIN f2 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f2 cIN f3 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((\n. ((BIT1 n) > _0)) n)
T * / c> cBIT1 b0 c_0 f0
- |- (((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) ==> ((\m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) m)) = ((\m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) m))
T c= c==> ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 * / ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 f0 * / ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 f0
- |- (((!n. ((BIT1 n) >= _0)) ==> ((\n. ((BIT1 n) >= _0)) n)) = ((\n. ((BIT1 n) >= _0)) n))
T c= c==> ! c>= cBIT1 b0 c_0 * / c>= cBIT1 b0 c_0 f0 * / c>= cBIT1 b0 c_0 f0
- |- (((!n. (((BIT1 n) > (BIT0 m)) = (n >= m))) ==> ((\n. (((BIT1 n) > (BIT0 m)) = (n >= m))) n)) = ((\n. (((BIT1 n) > (BIT0 m)) = (n >= m))) n))
T c= c==> ! c= c> cBIT1 b0 cBIT0 f0 c>= b0 f0 * / c= c> cBIT1 b0 cBIT0 f0 c>= b0 f0 f1 * / c= c> cBIT1 b0 cBIT0 f0 c>= b0 f0 f1
- |- (((~ (d IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (d IN EMPTY)) (NUMERAL _0)) e')))
T c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
+ |- (((!t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 f4 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 f4
- |- ((_0 > (BIT0 n)) = F)
T c= c> c_0 cBIT0 f0 cF
- |- (((!n. (((BIT1 n) - _0) = (BIT1 n))) ==> ((\n. (((BIT1 n) - _0) = (BIT1 n))) n)) = ((\n. (((BIT1 n) - _0) = (BIT1 n))) n))
T c= c==> ! c= c- cBIT1 b0 c_0 cBIT1 b0 * / c= c- cBIT1 b0 c_0 cBIT1 b0 f0 * / c= c- cBIT1 b0 c_0 cBIT1 b0 f0
- |- (((!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n)))))) ==> ((\n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n)))))) n)) = ((\n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n)))))) n))
T c= c==> ! c= c* cBIT1 f0 cBIT0 b0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 * / c= c* cBIT1 f0 cBIT0 b0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1 * / c= c* cBIT1 f0 cBIT0 b0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1
- |- ((\e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 b0 f4
- |- ((EVEN _0) = T)
T c= cEVEN c_0 cT
- |- (((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) e')))
T c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4
- |- (((!m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) ==> ((\m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) m)) = ((\m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) m))
T c= c==> ! ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 * / ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 f0 * / ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 f0
- |- ((((b IN (c INSERT (d INSERT EMPTY))) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) ==> (((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))) = (((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e'))))
T c= c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
- |- ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))))))
T c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), (~ (b = d)), (~ (c = d)) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c~ c= f1 f3 c==> c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> q')))
T c==> c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4
- |- ((\n. (((BIT1 n) > (BIT1 m)) = (n > m))) n)
T * / c= c> cBIT1 b0 cBIT1 f0 c> b0 f0 f1
- |- (((!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))) ==> ((\m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))) m)) = ((\m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))) m))
T c= c==> ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1 * / ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1 f0 * / ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1 f0
- |- (((b IN (c INSERT (d INSERT EMPTY))) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) t') e'))))
T c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 f4
- |- ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f4
- |- (((!n. (((BIT0 n) > _0) = (n > _0))) ==> ((\n. (((BIT0 n) > _0) = (n > _0))) n)) = ((\n. (((BIT0 n) > _0) = (n > _0))) n))
T c= c==> ! c= c> cBIT0 b0 c_0 c> b0 c_0 * / c= c> cBIT0 b0 c_0 c> b0 c_0 f0 * / c= c> cBIT0 b0 c_0 c> b0 c_0 f0
- |- ((_0 = (BIT1 n)) = F)
T c= c= c_0 cBIT1 f0 cF
- |- (((!n. (~ (_0 > (BIT0 n)))) ==> ((\n. (~ (_0 > (BIT0 n)))) n)) = ((\n. (~ (_0 > (BIT0 n)))) n))
T c= c==> ! c~ c> c_0 cBIT0 b0 * / c~ c> c_0 cBIT0 b0 f0 * / c~ c> c_0 cBIT0 b0 f0
+ |- ((\x. ((EMPTY DELETE x) = EMPTY)) x)
T * / c= * * part cDELETE part cEMPTY b0 part cEMPTY f0
+ |- ((SUC (BIT0 n)) = (BIT1 n))
T c= cSUC cBIT0 f0 cBIT1 f0
+ |- ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND b0 b1 b2 f4
- |- ((\n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m))) n)
T * / c= c>= cNUMERAL b0 cNUMERAL f0 c>= b0 f0 f1
- |- ((\n. ((_0 = (BIT1 n)) = F)) n)
T * / c= c= c_0 cBIT1 b0 cF f0
- |- ((\n. (((BIT1 n) - _0) = (BIT1 n))) n)
T * / c= c- cBIT1 b0 c_0 cBIT1 b0 f0
- |- (((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) ==> ((\m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) m)) = ((\m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) m))
T c= c==> ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 * / ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0 * / ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
- |- ((!n. (((BIT1 n) <= _0) = F)) /\ ((!n. ((_0 <= (BIT0 n)) = T)) /\ ((!n. ((_0 <= (BIT1 n)) = T)) /\ ((!m. (!n. (((BIT0 m) <= (BIT0 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT0 m) <= (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n))))))))))
T c/\ ! c= c<= cBIT1 b0 c_0 cF c/\ ! c= c<= c_0 cBIT0 b0 cT c/\ ! c= c<= c_0 cBIT1 b0 cT c/\ ! ! c= c<= cBIT0 b0 cBIT0 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1
- |- ((\n. ((BIT1 n) >= _0)) n)
T * / c>= cBIT1 b0 c_0 f0
+ |- (((!t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 f2 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 f2
- |- ((\m. (!n. (((BIT1 m) = (BIT0 n)) = F))) m)
T * / ! c= c= cBIT1 b0 cBIT0 b1 cF f0
- |- (((BIT0 n) > (BIT0 m)) = (n > m))
T c= c> cBIT0 f0 cBIT0 f1 c> f0 f1
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- |- ((!m. (!n. (((BIT0 m) <= (BIT0 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT0 m) <= (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))))))
T c/\ ! ! c= c<= cBIT0 b0 cBIT0 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1
- |- ((\n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) n)
T * / c= cEXP cBIT0 f0 cBIT1 b0 c* cBIT0 f0 c* cEXP cBIT0 f0 b0 cEXP cBIT0 f0 b0 f1
+ |- ((((d IN EMPTY) ==> ((CARD EMPTY) = (NUMERAL _0))) ==> (((~ (d IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (d IN EMPTY)) (NUMERAL _0)) e')))) = (((~ (d IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (d IN EMPTY)) (NUMERAL _0)) e'))))
T c= c==> c==> cIN f0 part cEMPTY c= cCARD part cEMPTY cNUMERAL c_0 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
- |- (((!m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) /\ (((_0 < _0) = F) /\ ((!n. (((BIT0 n) < _0) = F)) /\ ((!n. (((BIT1 n) < _0) = F)) /\ ((!n. ((_0 < (BIT0 n)) = (_0 < n))) /\ ((!n. ((_0 < (BIT1 n)) = T)) /\ ((!m. (!n. (((BIT0 m) < (BIT0 n)) = (m < n)))) /\ ((!m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) < (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) < (BIT1 n)) = (m < n))))))))))))) /\ (((!m. (!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m)))) /\ ((_0 >= _0) /\ ((!n. ((_0 >= (BIT0 n)) = (_0 >= n))) /\ ((!n. (~ (_0 >= (BIT1 n)))) /\ ((!n. ((BIT0 n) >= _0)) /\ ((!n. ((BIT1 n) >= _0)) /\ ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m))))))))))))) /\ (((!m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) /\ ((~ (_0 > _0)) /\ ((!n. (~ (_0 > (BIT0 n)))) /\ ((!n. (~ (_0 > (BIT1 n)))) /\ ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m))))))))))))) /\ ((!m. (!n. (((NUMERAL m) - (NUMERAL n)) = (NUMERAL (m - n))))) /\ (((_0 - _0) = _0) /\ ((!n. ((_0 - (BIT0 n)) = _0)) /\ ((!n. ((_0 - (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) - _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) - _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) /\ ((!m. (!n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n)))))) /\ ((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) /\ (!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))))))))))))))))
T c/\ c/\ ! ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 c/\ c= c< c_0 c_0 cF c/\ ! c= c< cBIT0 b0 c_0 cF c/\ ! c= c< cBIT1 b0 c_0 cF c/\ ! c= c< c_0 cBIT0 b0 c< c_0 b0 c/\ ! c= c< c_0 cBIT1 b0 cT c/\ ! ! c= c< cBIT0 b0 cBIT0 b1 c< b0 b1 c/\ ! ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c< cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c< cBIT1 b0 cBIT1 b1 c< b0 b1 c/\ c/\ ! ! c= c>= cNUMERAL b1 cNUMERAL b0 c>= b1 b0 c/\ c>= c_0 c_0 c/\ ! c= c>= c_0 cBIT0 b0 c>= c_0 b0 c/\ ! c~ c>= c_0 cBIT1 b0 c/\ ! c>= cBIT0 b0 c_0 c/\ ! c>= cBIT1 b0 c_0 c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0 c/\ c/\ ! ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 c/\ c~ c> c_0 c_0 c/\ ! c~ c> c_0 cBIT0 b0 c/\ ! c~ c> c_0 cBIT1 b0 c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0 c/\ ! ! c= c- cNUMERAL b0 cNUMERAL b1 cNUMERAL c- b0 b1 c/\ c= c- c_0 c_0 c_0 c/\ ! c= c- c_0 cBIT0 b0 c_0 c/\ ! c= c- c_0 cBIT1 b0 c_0 c/\ ! c= c- cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c- cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT0 b0 cBIT1 b1 cPRE cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1
- |- ((\n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n)))) n)
T * / c= cEXP cNUMERAL f0 cNUMERAL b0 cNUMERAL cEXP f0 b0 f1
+ |- ((\s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))) s)
T * / c==> cFINITE b0 c= cCARD * * part cINSERT f0 b0 cCOND cIN f0 b0 cCARD b0 cSUC cCARD b0 f1
+ |- ((\t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 f4
+ |- ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- (((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) ==> ((\m. (!n. (((BIT0 m) = (BIT1 n)) = F))) m)) = ((\m. (!n. (((BIT0 m) = (BIT1 n)) = F))) m))
T c= c==> ! ! c= c= cBIT0 b0 cBIT1 b1 cF * / ! c= c= cBIT0 b0 cBIT1 b1 cF f0 * / ! c= c= cBIT0 b0 cBIT1 b1 cF f0
- |- (((ODD _0) = F) /\ ((!n. ((ODD (BIT0 n)) = F)) /\ (!n. ((ODD (BIT1 n)) = T))))
T c/\ c= cODD c_0 cF c/\ ! c= cODD cBIT0 b0 cF ! c= cODD cBIT1 b0 cT
- |- (((!n. (((BIT1 n) > (BIT1 m)) = (n > m))) ==> ((\n. (((BIT1 n) > (BIT1 m)) = (n > m))) n)) = ((\n. (((BIT1 n) > (BIT1 m)) = (n > m))) n))
T c= c==> ! c= c> cBIT1 b0 cBIT1 f0 c> b0 f0 * / c= c> cBIT1 b0 cBIT1 f0 c> b0 f0 f1 * / c= c> cBIT1 b0 cBIT1 f0 c> b0 f0 f1
+ |- (((FINITE (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV))) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))))
T c==> c==> cFINITE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY
+ |- ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))
T c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((~ (_0 > _0)) /\ ((!n. (~ (_0 > (BIT0 n)))) /\ ((!n. (~ (_0 > (BIT1 n)))) /\ ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m))))))))))))
T c/\ c~ c> c_0 c_0 c/\ ! c~ c> c_0 cBIT0 b0 c/\ ! c~ c> c_0 cBIT1 b0 c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
- |- (((~ (_0 >= (BIT1 n))) ==> ((_0 >= (BIT1 n)) = F)) = ((_0 >= (BIT1 n)) = F))
T c= c==> c~ c>= c_0 cBIT1 f0 c= c>= c_0 cBIT1 f0 cF c= c>= c_0 cBIT1 f0 cF
+ |- ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))
T c= cSUC cNUMERAL f0 cNUMERAL cSUC f0
- |- (((BIT0 n) >= _0) = T)
T c= c>= cBIT0 f0 c_0 cT
+ |- (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f5 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 f5
- |- ((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) /\ (!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))))
T c/\ ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1
+ |- ((\e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 f5
- |- (((!n. (((BIT1 n) = _0) = F)) ==> ((\n. (((BIT1 n) = _0) = F)) n)) = ((\n. (((BIT1 n) = _0) = F)) n))
T c= c==> ! c= c= cBIT1 b0 c_0 cF * / c= c= cBIT1 b0 c_0 cF f0 * / c= c= cBIT1 b0 c_0 cF f0
- |- ((\m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) m)
T * / ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 f0
- |- (((!m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) /\ ((~ (_0 > _0)) /\ ((!n. (~ (_0 > (BIT0 n)))) /\ ((!n. (~ (_0 > (BIT1 n)))) /\ ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m))))))))))))) /\ ((!m. (!n. (((NUMERAL m) - (NUMERAL n)) = (NUMERAL (m - n))))) /\ (((_0 - _0) = _0) /\ ((!n. ((_0 - (BIT0 n)) = _0)) /\ ((!n. ((_0 - (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) - _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) - _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) /\ ((!m. (!n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n)))))) /\ ((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) /\ (!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))))))))))))))
T c/\ c/\ ! ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 c/\ c~ c> c_0 c_0 c/\ ! c~ c> c_0 cBIT0 b0 c/\ ! c~ c> c_0 cBIT1 b0 c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0 c/\ ! ! c= c- cNUMERAL b0 cNUMERAL b1 cNUMERAL c- b0 b1 c/\ c= c- c_0 c_0 c_0 c/\ ! c= c- c_0 cBIT0 b0 c_0 c/\ ! c= c- c_0 cBIT1 b0 c_0 c/\ ! c= c- cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c- cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT0 b0 cBIT1 b1 cPRE cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1
+ |- (((!x. (~ (x IN EMPTY))) ==> ((\x. (~ (x IN EMPTY))) x)) = ((\x. (~ (x IN EMPTY))) x))
T c= c==> ! c~ cIN b0 part cEMPTY * / c~ cIN b0 part cEMPTY f0 * / c~ cIN b0 part cEMPTY f0
+ |- ((((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) ==> (((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) e')))) = (((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) e'))))
T c= c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4
+ (~ (a = b)), ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d)))))) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c/\ c~ c= f0 f2 c/\ c~ c= f0 f3 c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- (((!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m))) ==> ((\n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m))) n)) = ((\n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m))) n))
T c= c==> ! c= c>= cNUMERAL b0 cNUMERAL f0 c>= b0 f0 * / c= c>= cNUMERAL b0 cNUMERAL f0 c>= b0 f0 f1 * / c= c>= cNUMERAL b0 cNUMERAL f0 c>= b0 f0 f1
- |- (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))))))))))))
T c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
+ |- ((((b IN (c INSERT (d INSERT EMPTY))) ==> ((CARD (c INSERT (d INSERT EMPTY))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) ==> (((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))) = (((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e'))))
T c= c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
+ |- (T = (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (a INSERT (c INSERT (d INSERT EMPTY))))) \/ ((c IN (span (a INSERT (b INSERT (d INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c= cT c==> c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f0 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- (((!n. (((BIT0 n) = _0) = (n = _0))) ==> ((\n. (((BIT0 n) = _0) = (n = _0))) n)) = ((\n. (((BIT0 n) = _0) = (n = _0))) n))
T c= c==> ! c= c= cBIT0 b0 c_0 c= b0 c_0 * / c= c= cBIT0 b0 c_0 c= b0 c_0 f0 * / c= c= cBIT0 b0 c_0 c= b0 c_0 f0
+ |- (((BIT0 n) > (BIT1 m)) = (n > m))
T c= c> cBIT0 f0 cBIT1 f1 c> f0 f1
+ |- ((\n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))) n)
T * / c= cSUC cBIT1 b0 cBIT0 cSUC b0 f0
- |- (((!t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 f3 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 f3
- |- (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))))))))))))
T c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
- |- ((\n. (((BIT1 n) >= (BIT0 m)) = (n >= m))) n)
T * / c= c>= cBIT1 b0 cBIT0 f0 c>= b0 f0 f1
- |- (((!n. (((BIT1 n) >= (BIT1 m)) = (n >= m))) ==> ((\n. (((BIT1 n) >= (BIT1 m)) = (n >= m))) n)) = ((\n. (((BIT1 n) >= (BIT1 m)) = (n >= m))) n))
T c= c==> ! c= c>= cBIT1 b0 cBIT1 f0 c>= b0 f0 * / c= c>= cBIT1 b0 cBIT1 f0 c>= b0 f0 f1 * / c= c>= cBIT1 b0 cBIT1 f0 c>= b0 f0 f1
- |- (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n)))
T c= c+ cBIT0 f0 cBIT0 f1 cBIT0 c+ f0 f1
- |- (((!n. ((_0 + (BIT1 n)) = (BIT1 n))) ==> ((\n. ((_0 + (BIT1 n)) = (BIT1 n))) n)) = ((\n. ((_0 + (BIT1 n)) = (BIT1 n))) n))
T c= c==> ! c= c+ c_0 cBIT1 b0 cBIT1 b0 * / c= c+ c_0 cBIT1 b0 cBIT1 b0 f0 * / c= c+ c_0 cBIT1 b0 cBIT1 b0 f0
- |- ((\n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) n)
T * / c= c* cBIT1 f0 cBIT1 b0 c+ cBIT1 f0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1
- |- ((!n. ((BIT0 n) >= _0)) /\ ((!n. ((BIT1 n) >= _0)) /\ ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m)))))))))
T c/\ ! c>= cBIT0 b0 c_0 c/\ ! c>= cBIT1 b0 c_0 c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
- |- ((\n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n)))) n)
T * / c= c+ cNUMERAL f0 cNUMERAL b0 cNUMERAL c+ f0 b0 f1
- |- ((x INSERT (x INSERT s)) = (x INSERT s))
T c= * * part cINSERT f0 * * part cINSERT f0 f1 * * part cINSERT f0 f1
- |- (((!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) ==> ((\n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) n)) = ((\n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) n))
T c= c==> ! c= c* cBIT1 f0 cBIT1 b0 c+ cBIT1 f0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 * / c= c* cBIT1 f0 cBIT1 b0 c+ cBIT1 f0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1 * / c= c* cBIT1 f0 cBIT1 b0 c+ cBIT1 f0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1
+ |- (((!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y))))) ==> ((\s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y))))) s)) = ((\s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y))))) s))
T c= c==> ! c= * * part cDELETE * * part cINSERT f0 b0 f1 * * * part cCOND c= f0 f1 * * part cDELETE b0 f1 * * part cINSERT f0 * * part cDELETE b0 f1 * / c= * * part cDELETE * * part cINSERT f0 b0 f1 * * * part cCOND c= f0 f1 * * part cDELETE b0 f1 * * part cINSERT f0 * * part cDELETE b0 f1 f2 * / c= * * part cDELETE * * part cINSERT f0 b0 f1 * * * part cCOND c= f0 f1 * * part cDELETE b0 f1 * * part cINSERT f0 * * part cDELETE b0 f1 f2
+ |- ((((~ (c IN (d INSERT EMPTY))) ==> ((SUC (CARD (d INSERT EMPTY))) = (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c= c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ (~ (c = d)) |- (((~ (d = c)) ==> ((d = c) = F)) = ((d = c) = F))
T c==> c~ c= f0 f1 c= c==> c~ c= f1 f0 c= c= f1 f0 cF c= c= f1 f0 cF
+ |- ((\p'. (!q'. (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q')))))) p')
T * / ! c==> c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f4
+ |- ((\s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x)))))) s)
T * / c= c? / c/\ cIN b1 * * part cINSERT f0 b0 * f1 b1 c\/ * f1 f0 c? / c/\ cIN b1 b0 * f1 b1 f2
+ |- (((!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))) ==> ((\n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))) n)) = ((\n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))) n))
T c= c==> ! c= cSUC cBIT1 b0 cBIT0 cSUC b0 * / c= cSUC cBIT1 b0 cBIT0 cSUC b0 f0 * / c= cSUC cBIT1 b0 cBIT0 cSUC b0 f0
- |- ((!n. (((BIT0 n) - _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) - _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) /\ ((!m. (!n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n)))))) /\ ((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) /\ (!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))))))))
T c/\ ! c= c- cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c- cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT0 b0 cBIT1 b1 cPRE cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1
- |- ((!n. ((_0 = (BIT0 n)) = (_0 = n))) /\ ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))))))))
T c/\ ! c= c= c_0 cBIT0 b0 c= c_0 b0 c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
+ (~ (c = d)) |- ((c = d) = F)
T c==> c~ c= f0 f1 c= c= f0 f1 cF
+ |- (((!q'. (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q'))))) ==> ((\q'. (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q'))))) q')) = ((\q'. (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f4 b0 * / c==> c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f4 b0 f5 * / c==> c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f4 b0 f5
- |- (((!n. (((BIT0 m) < (BIT0 n)) = (m < n))) ==> ((\n. (((BIT0 m) < (BIT0 n)) = (m < n))) n)) = ((\n. (((BIT0 m) < (BIT0 n)) = (m < n))) n))
T c= c==> ! c= c< cBIT0 f0 cBIT0 b0 c< f0 b0 * / c= c< cBIT0 f0 cBIT0 b0 c< f0 b0 f1 * / c= c< cBIT0 f0 cBIT0 b0 c< f0 b0 f1
+ |- ((\g'. (!t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 f3
- |- ((\n. (((BIT0 n) = _0) = (n = _0))) n)
T * / c= c= cBIT0 b0 c_0 c= b0 c_0 f0
+ |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
+ |- ((\m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) m)
T * / ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 f0
- |- (((NUMERAL n) >= (NUMERAL m)) = (n >= m))
T c= c>= cNUMERAL f0 cNUMERAL f1 c>= f0 f1
- |- (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n)))
T c= c- cBIT0 f0 cBIT0 f1 cBIT0 c- f0 f1
- |- (((!n. (((BIT1 m) = (BIT0 n)) = F)) ==> ((\n. (((BIT1 m) = (BIT0 n)) = F)) n)) = ((\n. (((BIT1 m) = (BIT0 n)) = F)) n))
T c= c==> ! c= c= cBIT1 f0 cBIT0 b0 cF * / c= c= cBIT1 f0 cBIT0 b0 cF f1 * / c= c= cBIT1 f0 cBIT0 b0 cF f1
- |- ((\n. ((_0 EXP (BIT1 n)) = _0)) n)
T * / c= cEXP c_0 cBIT1 b0 c_0 f0
- |- (((!n. (((BIT0 n) >= (BIT0 m)) = (n >= m))) ==> ((\n. (((BIT0 n) >= (BIT0 m)) = (n >= m))) n)) = ((\n. (((BIT0 n) >= (BIT0 m)) = (n >= m))) n))
T c= c==> ! c= c>= cBIT0 b0 cBIT0 f0 c>= b0 f0 * / c= c>= cBIT0 b0 cBIT0 f0 c>= b0 f0 f1 * / c= c>= cBIT0 b0 cBIT0 f0 c>= b0 f0 f1
- |- ((_0 EXP (BIT1 n)) = _0)
T c= cEXP c_0 cBIT1 f0 c_0
- |- ((!n. (((BIT0 n) = _0) = (n = _0))) /\ ((!n. (((BIT1 n) = _0) = F)) /\ ((!n. ((_0 = (BIT0 n)) = (_0 = n))) /\ ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))))))))))
T c/\ ! c= c= cBIT0 b0 c_0 c= b0 c_0 c/\ ! c= c= cBIT1 b0 c_0 cF c/\ ! c= c= c_0 cBIT0 b0 c= c_0 b0 c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
+ |- (T = (FINITE (b INSERT (c INSERT (d INSERT EMPTY)))))
T c= cT cFINITE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m))))))
T c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
- |- ((\n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n)))))) n)
T * / c= c* cBIT1 f0 cBIT0 b0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1
- |- (((!t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 f2 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 f2
- |- ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))
T c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
+ |- (((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))
T c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
- (b IN (c INSERT (d INSERT EMPTY))) |- ((b IN (c INSERT (d INSERT EMPTY))) = T)
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT
- |- (((!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))) ==> ((\m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))) m)) = ((\m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))) m))
T c= c==> ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1 * / ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1 f0 * / ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1 f0
- |- ((\n. (((NUMERAL m) - (NUMERAL n)) = (NUMERAL (m - n)))) n)
T * / c= c- cNUMERAL f0 cNUMERAL b0 cNUMERAL c- f0 b0 f1
- |- ((\n. ((PRE (NUMERAL n)) = (NUMERAL (PRE n)))) n)
T * / c= cPRE cNUMERAL b0 cNUMERAL cPRE b0 f0
- |- (((!n. ((_0 <= (BIT0 n)) = T)) ==> ((\n. ((_0 <= (BIT0 n)) = T)) n)) = ((\n. ((_0 <= (BIT0 n)) = T)) n))
T c= c==> ! c= c<= c_0 cBIT0 b0 cT * / c= c<= c_0 cBIT0 b0 cT f0 * / c= c<= c_0 cBIT0 b0 cT f0
- |- (((!n. ((_0 < (BIT0 n)) = (_0 < n))) ==> ((\n. ((_0 < (BIT0 n)) = (_0 < n))) n)) = ((\n. ((_0 < (BIT0 n)) = (_0 < n))) n))
T c= c==> ! c= c< c_0 cBIT0 b0 c< c_0 b0 * / c= c< c_0 cBIT0 b0 c< c_0 b0 f0 * / c= c< c_0 cBIT0 b0 c< c_0 b0 f0
- |- ((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- (~ (b IN (c INSERT (d INSERT EMPTY)))) |- ((~ (b IN (c INSERT (d INSERT EMPTY)))) /\ ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((BIT1 n) = _0) = F)
T c= c= cBIT1 f0 c_0 cF
- |- ((\e'. (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 f3
- |- (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n))))
T c= c- cBIT0 f0 cBIT1 f1 cPRE cBIT0 c- f0 f1
- |- ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))))))))
T c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
- |- ((\m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))) m)
T * / ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1 f0
- |- (((d IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))
T c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 f3
+ (~ (a = b)), (~ (a = c)), ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c/\ c~ c= f0 f3 c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((_0 < (BIT0 n)) = (_0 < n))
T c= c< c_0 cBIT0 f0 c< c_0 f0
- |- ((\m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) m)
T * / ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
+ |- ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((b IN (c INSERT (d INSERT EMPTY))) ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) t') e'))))
T c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 f4
- |- (((!n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n))))) ==> ((\n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n))))) n)) = ((\n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n))))) n))
T c= c==> ! c= c- cBIT0 f0 cBIT1 b0 cPRE cBIT0 c- f0 b0 * / c= c- cBIT0 f0 cBIT1 b0 cPRE cBIT0 c- f0 b0 f1 * / c= c- cBIT0 f0 cBIT1 b0 cPRE cBIT0 c- f0 b0 f1
- (d IN EMPTY) |- ((d IN EMPTY) = T)
T c==> cIN f0 part cEMPTY c= cIN f0 part cEMPTY cT
+ |- ((\P. (!a. (!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x)))))))) P)
T * / ! ! c= c? / c/\ cIN b3 * * part cINSERT b1 b2 * b0 b3 c\/ * b0 b1 c? / c/\ cIN b3 b2 * b0 b3 f0
- |- ((\m. (!n. (((BIT0 m) < (BIT0 n)) = (m < n)))) m)
T * / ! c= c< cBIT0 b0 cBIT0 b1 c< b0 b1 f0
- |- (((BIT0 n) + _0) = (BIT0 n))
T c= c+ cBIT0 f0 c_0 cBIT0 f0
- |- ((\n. (((NUMERAL m) < (NUMERAL n)) = (m < n))) n)
T * / c= c< cNUMERAL f0 cNUMERAL b0 c< f0 b0 f1
+ |- (((BIT1 n) > _0) = T)
T c= c> cBIT1 f0 c_0 cT
- |- ((\n. ((_0 <= (BIT1 n)) = T)) n)
T * / c= c<= c_0 cBIT1 b0 cT f0
- |- ((((d IN EMPTY) ==> ((NUMERAL _0) = (NUMERAL _0))) ==> (((~ (d IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (d IN EMPTY)) (NUMERAL _0)) e')))) = (((~ (d IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (d IN EMPTY)) (NUMERAL _0)) e'))))
T c= c==> c==> cIN f0 part cEMPTY c= cNUMERAL c_0 cNUMERAL c_0 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
+ |- ((\e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 b0 f3
- |- (((!m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))) ==> ((\m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))) m)) = ((\m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))) m))
T c= c==> ! ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1 * / ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1 f0 * / ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1 f0
+ |- (((~ (x IN EMPTY)) ==> ((x IN EMPTY) = F)) = ((x IN EMPTY) = F))
T c= c==> c~ cIN f0 part cEMPTY c= cIN f0 part cEMPTY cF c= cIN f0 part cEMPTY cF
+ |- (((!x. (!y. (!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y))))))) ==> ((\x. (!y. (!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y))))))) x)) = ((\x. (!y. (!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y))))))) x))
T c= c==> ! ! ! c= * * part cDELETE * * part cINSERT b0 b2 b1 * * * part cCOND c= b0 b1 * * part cDELETE b2 b1 * * part cINSERT b0 * * part cDELETE b2 b1 * / ! ! c= * * part cDELETE * * part cINSERT b0 b2 b1 * * * part cCOND c= b0 b1 * * part cDELETE b2 b1 * * part cINSERT b0 * * part cDELETE b2 b1 f0 * / ! ! c= * * part cDELETE * * part cINSERT b0 b2 b1 * * * part cCOND c= b0 b1 * * part cDELETE b2 b1 * * part cINSERT b0 * * part cDELETE b2 b1 f0
- |- ((\n. (((BIT1 n) < _0) = F)) n)
T * / c= c< cBIT1 b0 c_0 cF f0
- |- (((!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))) ==> ((\e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))) e')) = ((\e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 f4 b0 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 f4 b0 f5 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 f4 b0 f5
+ |- (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n))))))
T c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
- |- ((\e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f5 c==> c==> c~ f4 c= cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f4 f5 b0 f6
- |- ((\n. ((_0 >= (BIT0 n)) = (_0 >= n))) n)
T * / c= c>= c_0 cBIT0 b0 c>= c_0 b0 f0
- |- (((~ (c IN (d INSERT EMPTY))) ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e')))
T c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2
+ |- ((\x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))))) x)
T * / ! ! c= cIN b0 * * part cINSERT b1 b2 c\/ c= b0 b1 cIN b0 b2 f0
- |- ((\n. (((BIT1 n) * _0) = _0)) n)
T * / c= c* cBIT1 b0 c_0 c_0 f0
- |- ((_0 - _0) = _0)
T c= c- c_0 c_0 c_0
+ |- (((!s. ((dependent s) = (?a. ((a IN s) /\ (a IN (span (s DELETE a))))))) ==> ((\s. ((dependent s) = (?a. ((a IN s) /\ (a IN (span (s DELETE a))))))) s)) = ((\s. ((dependent s) = (?a. ((a IN s) /\ (a IN (span (s DELETE a))))))) s))
T c= c==> ! c= cdependent b0 c? / c/\ cIN b1 b0 cIN b1 * part cspan * * part cDELETE b0 b1 * / c= cdependent b0 c? / c/\ cIN b1 b0 cIN b1 * part cspan * * part cDELETE b0 b1 f0 * / c= cdependent b0 c? / c/\ cIN b1 b0 cIN b1 * part cspan * * part cDELETE b0 b1 f0
- |- (((!n. ((_0 = (BIT1 n)) = F)) ==> ((\n. ((_0 = (BIT1 n)) = F)) n)) = ((\n. ((_0 = (BIT1 n)) = F)) n))
T c= c==> ! c= c= c_0 cBIT1 b0 cF * / c= c= c_0 cBIT1 b0 cF f0 * / c= c= c_0 cBIT1 b0 cF f0
- |- (((!n. (((BIT1 m) = (BIT1 n)) = (m = n))) ==> ((\n. (((BIT1 m) = (BIT1 n)) = (m = n))) n)) = ((\n. (((BIT1 m) = (BIT1 n)) = (m = n))) n))
T c= c==> ! c= c= cBIT1 f0 cBIT1 b0 c= f0 b0 * / c= c= cBIT1 f0 cBIT1 b0 c= f0 b0 f1 * / c= c= cBIT1 f0 cBIT1 b0 c= f0 b0 f1
+ |- ((?a'. ((a' IN (c INSERT (d INSERT EMPTY))) /\ (a' IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a'))))) = ((c IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE c))) \/ (?a'. ((a' IN (d INSERT EMPTY)) /\ (a' IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a')))))))
T c= c? / c/\ cIN b0 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN b0 * part cspan * * part cDELETE * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0 c\/ cIN f0 * part cspan * * part cDELETE * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f0 c? / c/\ cIN b0 * * part cINSERT f1 part cEMPTY cIN b0 * part cspan * * part cDELETE * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY b0
- |- ((\m. (((BIT0 m) EXP _0) = (BIT1 _0))) m)
T * / c= cEXP cBIT0 b0 c_0 cBIT1 c_0 f0
+ |- ((\n. (((BIT0 n) > (BIT1 m)) = (n > m))) n)
T * / c= c> cBIT0 b0 cBIT1 f0 c> b0 f0 f1
+ |- (((!P. (!a. (!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x)))))))) ==> ((\P. (!a. (!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x)))))))) P)) = ((\P. (!a. (!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x)))))))) P))
T c= c==> ! ! ! c= c? / c/\ cIN b3 * * part cINSERT b1 b2 * b0 b3 c\/ * b0 b1 c? / c/\ cIN b3 b2 * b0 b3 * / ! ! c= c? / c/\ cIN b3 * * part cINSERT b1 b2 * b0 b3 c\/ * b0 b1 c? / c/\ cIN b3 b2 * b0 b3 f0 * / ! ! c= c? / c/\ cIN b3 * * part cINSERT b1 b2 * b0 b3 c\/ * b0 b1 c? / c/\ cIN b3 b2 * b0 b3 f0
+ |- (((~ (d IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (d IN EMPTY)) (NUMERAL _0)) e')))
T c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
+ |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
- |- (((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) ==> ((\m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) m)) = ((\m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) m))
T c= c==> ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 * / ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 f0 * / ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 f0
- |- ((\n. ((_0 < (BIT0 n)) = (_0 < n))) n)
T * / c= c< c_0 cBIT0 b0 c< c_0 b0 f0
- |- (((!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) ==> ((\n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) n)) = ((\n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) n))
T c= c==> ! c= cEXP cBIT1 f0 cBIT1 b0 c* cBIT1 f0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 * / c= cEXP cBIT1 f0 cBIT1 b0 c* cBIT1 f0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 f1 * / c= cEXP cBIT1 f0 cBIT1 b0 c* cBIT1 f0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 f1
+ (~ (d IN EMPTY)) |- ((~ (d IN EMPTY)) /\ ((SUC (CARD EMPTY)) = (SUC (NUMERAL _0))))
T c==> c~ cIN f0 part cEMPTY c/\ c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY cSUC cNUMERAL c_0
- |- ((_0 EXP _0) = (BIT1 _0))
T c= cEXP c_0 c_0 cBIT1 c_0
- |- ((\m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) m)
T * / ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 f0
- |- (((!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))) ==> ((\n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))) n)) = ((\n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))) n))
T c= c==> ! c= c- cBIT1 f0 cBIT1 b0 cBIT0 c- f0 b0 * / c= c- cBIT1 f0 cBIT1 b0 cBIT0 c- f0 b0 f1 * / c= c- cBIT1 f0 cBIT1 b0 cBIT0 c- f0 b0 f1
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), (~ (b = d)), (~ (c = d)) |- (((a IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a))) \/ ((b IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE b))) \/ ((c IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE c))) \/ (d IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE d)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c~ c= f1 f3 c==> c~ c= f2 f3 c==> c\/ cIN f0 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f0 c\/ cIN f1 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f1 c\/ cIN f2 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f2 cIN f3 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((\t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f4 c= cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f4 b0 b1 f5
- |- (((!m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) ==> ((\m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) m)) = ((\m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) m))
T c= c==> ! ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 * / ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 f0 * / ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 f0
- |- ((\n. ((_0 + (BIT0 n)) = (BIT0 n))) n)
T * / c= c+ c_0 cBIT0 b0 cBIT0 b0 f0
- |- ((\m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))) m)
T * / ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1 f0
+ |- (((!g'. (!t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 f2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 f2
- |- (((!n. (~ (_0 >= (BIT1 n)))) ==> ((\n. (~ (_0 >= (BIT1 n)))) n)) = ((\n. (~ (_0 >= (BIT1 n)))) n))
T c= c==> ! c~ c>= c_0 cBIT1 b0 * / c~ c>= c_0 cBIT1 b0 f0 * / c~ c>= c_0 cBIT1 b0 f0
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d)))) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((\m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) m)
T * / ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 f0
- (a IN (b INSERT (c INSERT (d INSERT EMPTY)))) |- ((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = T)
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cT
- |- (((_0 <= _0) = T) /\ ((!n. (((BIT0 n) <= _0) = (n <= _0))) /\ ((!n. (((BIT1 n) <= _0) = F)) /\ ((!n. ((_0 <= (BIT0 n)) = T)) /\ ((!n. ((_0 <= (BIT1 n)) = T)) /\ ((!m. (!n. (((BIT0 m) <= (BIT0 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT0 m) <= (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n))))))))))))
T c/\ c= c<= c_0 c_0 cT c/\ ! c= c<= cBIT0 b0 c_0 c<= b0 c_0 c/\ ! c= c<= cBIT1 b0 c_0 cF c/\ ! c= c<= c_0 cBIT0 b0 cT c/\ ! c= c<= c_0 cBIT1 b0 cT c/\ ! ! c= c<= cBIT0 b0 cBIT0 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1
- |- ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n))))))))
T c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- ((~ (d IN EMPTY)) ==> ((SUC (NUMERAL _0)) = (SUC (NUMERAL _0))))
T c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((\n. ((ODD (BIT0 n)) = F)) n)
T * / c= cODD cBIT0 b0 cF f0
- |- ((_0 - (BIT1 n)) = _0)
T c= c- c_0 cBIT1 f0 c_0
- |- (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n)))))
T c= c* cBIT0 f0 cBIT1 f1 c+ cBIT0 f0 cBIT0 cBIT0 c* f0 f1
- (~ (c IN (d INSERT EMPTY))) |- ((~ (c IN (d INSERT EMPTY))) /\ ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((!n. ((_0 < (BIT0 n)) = (_0 < n))) /\ ((!n. ((_0 < (BIT1 n)) = T)) /\ ((!m. (!n. (((BIT0 m) < (BIT0 n)) = (m < n)))) /\ ((!m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) < (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) < (BIT1 n)) = (m < n)))))))))
T c/\ ! c= c< c_0 cBIT0 b0 c< c_0 b0 c/\ ! c= c< c_0 cBIT1 b0 cT c/\ ! ! c= c< cBIT0 b0 cBIT0 b1 c< b0 b1 c/\ ! ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c< cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c< cBIT1 b0 cBIT1 b1 c< b0 b1
- |- ((\m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) m)
T * / ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 f0
- |- (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 f4
- |- (((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) ==> ((\m. (((BIT0 m) EXP _0) = (BIT1 _0))) m)) = ((\m. (((BIT0 m) EXP _0) = (BIT1 _0))) m))
T c= c==> ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 * / c= cEXP cBIT0 b0 c_0 cBIT1 c_0 f0 * / c= cEXP cBIT0 b0 c_0 cBIT1 c_0 f0
- |- ((!n. ((ODD (BIT0 n)) = F)) /\ (!n. ((ODD (BIT1 n)) = T)))
T c/\ ! c= cODD cBIT0 b0 cF ! c= cODD cBIT1 b0 cT
+ |- (((!p'. (!q'. (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 * / ! c==> c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f4 * / ! c==> c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f4
- |- (((!n. ((EVEN (NUMERAL n)) = (EVEN n))) ==> ((\n. ((EVEN (NUMERAL n)) = (EVEN n))) n)) = ((\n. ((EVEN (NUMERAL n)) = (EVEN n))) n))
T c= c==> ! c= cEVEN cNUMERAL b0 cEVEN b0 * / c= cEVEN cNUMERAL b0 cEVEN b0 f0 * / c= cEVEN cNUMERAL b0 cEVEN b0 f0
+ |- ((\y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))) y)
T * / ! c= cIN f0 * * part cINSERT b0 b1 c\/ c= f0 b0 cIN f0 b1 f1
- |- ((\n. ((ODD (BIT1 n)) = T)) n)
T * / c= cODD cBIT1 b0 cT f0
+ (d = c) |- (c = d)
T c==> c= f0 f1 c= f1 f0
+ |- ((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))))
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((\q'. ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q'))))) q')
T * / c==> c= c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV f4 c==> c==> f4 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c= c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> f4 b0 f5
+ |- (((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) e')))
T c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4
+ |- ((\a. (!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x))))))) a)
T * / ! c= c? / c/\ cIN b2 * * part cINSERT b0 b1 * f0 b2 c\/ * f0 b0 c? / c/\ cIN b2 b1 * f0 b2 f1
+ |- ((((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))
T c= c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d)))) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((\q'. ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q'))))) q')
T * / c==> c= c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV f4 c==> c==> f4 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> f4 b0 f5
+ |- (((!g'. (!t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((b IN (c INSERT (d INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 f3 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 f3
+ |- ((!n. (~ (_0 > (BIT0 n)))) /\ ((!n. (~ (_0 > (BIT1 n)))) /\ ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m)))))))))))
T c/\ ! c~ c> c_0 cBIT0 b0 c/\ ! c~ c> c_0 cBIT1 b0 c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
+ |- (((!p'. (!q'. ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV b0 c==> c==> b0 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> b0 b1 * / ! c==> c= c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV b0 c==> c==> b0 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> b0 b1 f4 * / ! c==> c= c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV b0 c==> c==> b0 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> b0 b1 f4
+ |- (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q'))))
T c==> c= c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f5 c= c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f4 f5
+ |- (!g'. (!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5
+ (a IN (b INSERT (c INSERT (d INSERT EMPTY)))) |- ((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) /\ ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c/\ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))) ==> ((\s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))) s)) = ((\s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))) s))
T c= c==> ! c= cIN f0 * * part cINSERT f1 b0 c\/ c= f0 f1 cIN f0 b0 * / c= cIN f0 * * part cINSERT f1 b0 c\/ c= f0 f1 cIN f0 b0 f2 * / c= cIN f0 * * part cINSERT f1 b0 c\/ c= f0 f1 cIN f0 b0 f2
+ |- ((((~ (a = b)) /\ ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = T)
T c= c==> c/\ c~ c= f0 f1 c/\ c~ c= f0 f2 c/\ c~ c= f0 f3 c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT
+ |- (((!y. (!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y)))))) ==> ((\y. (!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y)))))) y)) = ((\y. (!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y)))))) y))
T c= c==> ! ! c= * * part cDELETE * * part cINSERT f0 b1 b0 * * * part cCOND c= f0 b0 * * part cDELETE b1 b0 * * part cINSERT f0 * * part cDELETE b1 b0 * / ! c= * * part cDELETE * * part cINSERT f0 b1 b0 * * * part cCOND c= f0 b0 * * part cDELETE b1 b0 * * part cINSERT f0 * * part cDELETE b1 b0 f1 * / ! c= * * part cDELETE * * part cINSERT f0 b1 b0 * * * part cCOND c= f0 b0 * * part cDELETE b1 b0 * * part cINSERT f0 * * part cDELETE b1 b0 f1
+ |- ((\y. (!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y)))))) y)
T * / ! c= * * part cDELETE * * part cINSERT f0 b1 b0 * * * part cCOND c= f0 b0 * * part cDELETE b1 b0 * * part cINSERT f0 * * part cDELETE b1 b0 f1
+ (~ (c IN (d INSERT EMPTY))) |- ((~ (c IN (d INSERT EMPTY))) /\ ((SUC (CARD (d INSERT EMPTY))) = (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c==> c==> c~ f4 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f6 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND f4 f5 f6
+ |- (((((FINITE (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV))) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))
T c= c==> c==> c==> cFINITE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), (~ (b = d)), (~ (c = d)) |- (((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c~ c= f1 f3 c==> c~ c= f2 f3 c= c==> cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((\x. (~ (x IN EMPTY))) x)
T * / c~ cIN b0 part cEMPTY f0
+ |- (((!t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 f3 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 f3
+ (b IN (c INSERT (d INSERT EMPTY))) |- ((b IN (c INSERT (d INSERT EMPTY))) /\ ((CARD (c INSERT (d INSERT EMPTY))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((\g'. (!t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cCARD part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD part cEMPTY b2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND b0 b1 b2 f1
+ |- ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m))))))))
T c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
+ |- (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) t') e'))))
T c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 f5
+ |- ((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c/\ c~ c= f0 f3 c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- (((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) ==> ((\m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) m)) = ((\m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) m))
T c= c==> ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 * / ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 f0 * / ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 f0
+ |- (((FINITE (c INSERT (d INSERT EMPTY))) ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))))) = ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY)))))))
T c= c==> cFINITE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCOND cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCOND cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((((COND F) t1) t2) = t2)
T c= cCOND cF f0 f1 f1
+ |- (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))
T c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY f3 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 f3
+ |- ((c IN (d INSERT EMPTY)) ==> ((CARD (d INSERT EMPTY)) = (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((\t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 f3
+ |- (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) |- (((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) /\ ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))))
T c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV c/\ c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY
+ |- (((!q'. ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q'))))) ==> ((\q'. ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q'))))) q')) = ((\q'. ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV f4 c==> c==> f4 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> f4 b0 * / c==> c= c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV f4 c==> c==> f4 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> f4 b0 f5 * / c==> c= c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV f4 c==> c==> f4 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> f4 b0 f5
+ |- (((!s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) ==> ((\s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) s)) = ((\s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) s))
T c= c==> ! ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 * / ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 f0 * / ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 f0
+ |- ((!c. (!d. (((~ (a = b)) /\ ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d))))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))) = T)
T c= ! ! c==> c/\ c~ c= f0 f1 c/\ c~ c= f0 b0 c/\ c~ c= f0 b1 c/\ c~ c= f1 b0 c/\ c~ c= f1 b1 c~ c= b0 b1 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT f0 part cEMPTY c\/ cIN b0 * part cspan * * part cINSERT b1 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN b1 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cT
+ |- (T = (FINITE (c INSERT (d INSERT EMPTY))))
T c= cT cFINITE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> q')))
T c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c= c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV f4
+ |- (((FINITE (d INSERT EMPTY)) ==> ((CARD (c INSERT (d INSERT EMPTY))) = (((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))))) = ((CARD (c INSERT (d INSERT EMPTY))) = (((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY))))))
T c= c==> cFINITE * * part cINSERT f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f0 part cEMPTY cCOND cIN f1 * * part cINSERT f0 part cEMPTY cCARD * * part cINSERT f0 part cEMPTY cSUC cCARD * * part cINSERT f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f0 part cEMPTY cCOND cIN f1 * * part cINSERT f0 part cEMPTY cCARD * * part cINSERT f0 part cEMPTY cSUC cCARD * * part cINSERT f0 part cEMPTY
+ |- ((((~ (d IN EMPTY)) ==> ((SUC (CARD EMPTY)) = (SUC (NUMERAL _0)))) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c= c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY cSUC cNUMERAL c_0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((\s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))) s)
T * / c= cIN f0 * * part cINSERT f1 b0 c\/ c= f0 f1 cIN f0 b0 f2
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), (~ (b = d)), (~ (c = d)) |- ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c~ c= f1 f3 c==> c~ c= f2 f3 c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((F /\ t) = F)
T c= c/\ cF f0 cF
+ |- ((\q'. (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q'))))) q')
T * / c==> c= c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f4 b0 f5
+ |- ((!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e')))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 b0 c= cCOND f0 f2 f4 cCOND f1 f3 b0 cT
+ |- ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))
T c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
+ |- ((?a'. ((a' IN (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) /\ (a' IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a'))))) = ((a IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a))) \/ (?a'. ((a' IN (b INSERT (c INSERT (d INSERT EMPTY)))) /\ (a' IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a')))))))
T c= c? / c/\ cIN b0 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cIN b0 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c\/ cIN f0 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f0 c? / c/\ cIN b0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cIN b0 * part cspan * * part cDELETE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0
+ |- ((\x. (!y. (!s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y))))))) x)
T * / ! ! c= * * part cDELETE * * part cINSERT b0 b2 b1 * * * part cCOND c= b0 b1 * * part cDELETE b2 b1 * * part cINSERT b0 * * part cDELETE b2 b1 f0
+ |- ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q'))))
T c==> c= c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV f4 c==> c==> f4 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c= c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> f4 f5
+ |- ((\q'. (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q'))))) q')
T * / c==> c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f4 b0 f5
+ (((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) |- ((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) /\ (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c/\ c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ (~ (c = d)) |- (~ (d = c))
T c==> c~ c= f0 f1 c~ c= f1 f0
+ |- (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q'))))
T c==> c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f5 c= c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f4 f5
+ |- ((\s. (((FINITE s) ==> ((CARD s) > (dimindex UNIV))) ==> (dependent s))) (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))
T * / c==> c==> cFINITE b0 c> cCARD b0 cdimindex part cUNIV cdependent b0 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY
+ |- (((!x. ((EMPTY DELETE x) = EMPTY)) ==> ((\x. ((EMPTY DELETE x) = EMPTY)) x)) = ((\x. ((EMPTY DELETE x) = EMPTY)) x))
T c= c==> ! c= * * part cDELETE part cEMPTY b0 part cEMPTY * / c= * * part cDELETE part cEMPTY b0 part cEMPTY f0 * / c= * * part cDELETE part cEMPTY b0 part cEMPTY f0
+ |- (T = (FINITE (d INSERT EMPTY)))
T c= cT cFINITE * * part cINSERT f0 part cEMPTY
+ |- (((c IN (d INSERT EMPTY)) ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ (c IN (d INSERT EMPTY))) ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND (c IN (d INSERT EMPTY))) t') e'))))
T c==> c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY f2 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY f2 f3
+ |- (((!m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) ==> ((\m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) m)) = ((\m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) m))
T c= c==> ! ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 * / ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 f0 * / ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 f0
+ |- ((?a'. ((a' IN (d INSERT EMPTY)) /\ (a' IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a'))))) = ((d IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE d))) \/ (?a'. ((a' IN EMPTY) /\ (a' IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a')))))))
T c= c? / c/\ cIN b0 * * part cINSERT f0 part cEMPTY cIN b0 * part cspan * * part cDELETE * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY b0 c\/ cIN f0 * part cspan * * part cDELETE * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY f0 c? / c/\ cIN b0 part cEMPTY cIN b0 * part cspan * * part cDELETE * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY b0
+ |- ((d IN EMPTY) ==> ((CARD EMPTY) = (NUMERAL _0)))
T c==> cIN f0 part cEMPTY c= cCARD part cEMPTY cNUMERAL c_0
+ |- (((!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))) ==> ((\e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))) e')) = ((\e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 b0 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 b0 f3 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 b0 f3
+ |- (((!g'. (!t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((d IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cCARD part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD part cEMPTY b2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cCARD part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD part cEMPTY b2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND b0 b1 b2 f1 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cCARD part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD part cEMPTY b2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND b0 b1 b2 f1
+ (~ (c = d)) |- ((d = c) = F)
T c==> c~ c= f0 f1 c= c= f1 f0 cF
+ |- ((F \/ t) = t)
T c= c\/ cF f0 f0
+ |- ((?a'. ((a' IN (b INSERT (c INSERT (d INSERT EMPTY)))) /\ (a' IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a'))))) = ((b IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE b))) \/ (?a'. ((a' IN (c INSERT (d INSERT EMPTY))) /\ (a' IN (span ((a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))) DELETE a')))))))
T c= c? / c/\ cIN b0 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cIN b0 * part cspan * * part cDELETE * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c\/ cIN f0 * part cspan * * part cDELETE * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f0 c? / c/\ cIN b0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cIN b0 * part cspan * * part cDELETE * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0
+ |- ((\n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) n)
T * / c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 f0
+ |- ((x IN EMPTY) = F)
T c= cIN f0 part cEMPTY cF
+ |- (((!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))) ==> ((\s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))) s)) = ((\s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))) s))
T c= c==> ! c==> cFINITE b0 c= cCARD * * part cINSERT f0 b0 cCOND cIN f0 b0 cCARD b0 cSUC cCARD b0 * / c==> cFINITE b0 c= cCARD * * part cINSERT f0 b0 cCOND cIN f0 b0 cCARD b0 cSUC cCARD b0 f1 * / c==> cFINITE b0 c= cCARD * * part cINSERT f0 b0 cCOND cIN f0 b0 cCARD b0 cSUC cCARD b0 f1
+ |- ((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))))
T c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY
+ |- ((BIT1 n) > _0)
T c> cBIT1 f0 c_0
+ |- ((!n. (~ (_0 > (BIT1 n)))) /\ ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m))))))))))
T c/\ ! c~ c> c_0 cBIT1 b0 c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
+ |- ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m)))))
T c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
+ |- ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) = p') ==> ((p' ==> ((dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) = q')) ==> ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (p' ==> q'))))
T c==> c= c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV f4 c==> c==> f4 c= cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> f4 f5
+ |- (((~ (c IN (d INSERT EMPTY))) ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e')))
T c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2
+ |- ((\x. ((FINITE (x INSERT s)) = (FINITE s))) x)
T * / c= cFINITE * * part cINSERT b0 f0 cFINITE f0 f1
+ (~ (b IN (c INSERT (d INSERT EMPTY)))) |- ((~ (b IN (c INSERT (d INSERT EMPTY)))) /\ ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((!n. (((NUMERAL n) > (NUMERAL m)) = (n > m))) ==> ((\n. (((NUMERAL n) > (NUMERAL m)) = (n > m))) n)) = ((\n. (((NUMERAL n) > (NUMERAL m)) = (n > m))) n))
T c= c==> ! c= c> cNUMERAL b0 cNUMERAL f0 c> b0 f0 * / c= c> cNUMERAL b0 cNUMERAL f0 c> b0 f0 f1 * / c= c> cNUMERAL b0 cNUMERAL f0 c> b0 f0 f1
+ |- ((CARD (d INSERT EMPTY)) = (((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))))
T c= cCARD * * part cINSERT f0 part cEMPTY cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY
+ (~ (a = b)), (~ (a = c)), (~ (a = d)), (~ (b = c)), (~ (b = d)), ((~ (b = d)) /\ (~ (c = d))) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c~ c= f0 f3 c==> c~ c= f1 f2 c==> c~ c= f1 f3 c==> c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- (FINITE (d INSERT EMPTY))
T cFINITE * * part cINSERT f0 part cEMPTY
+ |- ((((d IN EMPTY) = (d IN EMPTY)) ==> (((d IN EMPTY) ==> ((CARD EMPTY) = t')) ==> (((~ (d IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (d IN EMPTY)) t') e'))))) = (((d IN EMPTY) ==> ((CARD EMPTY) = t')) ==> (((~ (d IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (d IN EMPTY)) t') e')))))
T c= c==> c= cIN f0 part cEMPTY cIN f0 part cEMPTY c==> c==> cIN f0 part cEMPTY c= cCARD part cEMPTY f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY f1 f2 c==> c==> cIN f0 part cEMPTY c= cCARD part cEMPTY f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY f1 f2
+ |- ((\g'. (!t'. (!e'. (((c IN (d INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 f2
+ (d IN EMPTY) |- ((d IN EMPTY) /\ ((CARD EMPTY) = (NUMERAL _0)))
T c==> cIN f0 part cEMPTY c/\ cIN f0 part cEMPTY c= cCARD part cEMPTY cNUMERAL c_0
+ |- ((\e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c==> c==> c~ f4 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND f4 f5 b0 f6
+ |- ((\p'. (!q'. (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = p') ==> ((p' ==> (((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY)))))))) = q')) ==> (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = (p' ==> q')))))) p')
T * / ! c==> c= c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> b0 c= c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f4
+ |- (((!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))) ==> ((\y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))) y)) = ((\y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))) y))
T c= c==> ! ! c= cIN f0 * * part cINSERT b0 b1 c\/ c= f0 b0 cIN f0 b1 * / ! c= cIN f0 * * part cINSERT b0 b1 c\/ c= f0 b0 cIN f0 b1 f1 * / ! c= cIN f0 * * part cINSERT b0 b1 c\/ c= f0 b0 cIN f0 b1 f1
+ |- ((\n. (((NUMERAL n) > (NUMERAL m)) = (n > m))) n)
T * / c= c> cNUMERAL b0 cNUMERAL f0 c> b0 f0 f1
+ |- ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))))
T c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (!p'. (!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c= c==> f0 f2 c==> f1 f3
+ |- (((!a. (!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x))))))) ==> ((\a. (!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x))))))) a)) = ((\a. (!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x))))))) a))
T c= c==> ! ! c= c? / c/\ cIN b2 * * part cINSERT b0 b1 * f0 b2 c\/ * f0 b0 c? / c/\ cIN b2 b1 * f0 b2 * / ! c= c? / c/\ cIN b2 * * part cINSERT b0 b1 * f0 b2 c\/ * f0 b0 c? / c/\ cIN b2 b1 * f0 b2 f1 * / ! c= c? / c/\ cIN b2 * * part cINSERT b0 b1 * f0 b2 c\/ * f0 b0 c? / c/\ cIN b2 b1 * f0 b2 f1
+ |- (((!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))))) ==> ((\x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))))) x)) = ((\x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))))) x))
T c= c==> ! ! ! c= cIN b0 * * part cINSERT b1 b2 c\/ c= b0 b1 cIN b0 b2 * / ! ! c= cIN b0 * * part cINSERT b1 b2 c\/ c= b0 b1 cIN b0 b2 f0 * / ! ! c= cIN b0 * * part cINSERT b1 b2 c\/ c= b0 b1 cIN b0 b2 f0
+ |- (((!s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x)))))) ==> ((\s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x)))))) s)) = ((\s. ((?x. ((x IN (a INSERT s)) /\ (P x))) = ((P a) \/ (?x. ((x IN s) /\ (P x)))))) s))
T c= c==> ! c= c? / c/\ cIN b1 * * part cINSERT f0 b0 * f1 b1 c\/ * f1 f0 c? / c/\ cIN b1 b0 * f1 b1 * / c= c? / c/\ cIN b1 * * part cINSERT f0 b0 * f1 b1 c\/ * f1 f0 c? / c/\ cIN b1 b0 * f1 b1 f2 * / c= c? / c/\ cIN b1 * * part cINSERT f0 b0 * f1 b1 c\/ * f1 f0 c? / c/\ cIN b1 b0 * f1 b1 f2
+ |- (((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q')))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c= c==> f0 f2 c==> f1 f3 cT
+ |- ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m))))))
T c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
+ |- ((((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) t') e'))))) = (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) t') e')))))
T c= c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 f5 c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f5 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 f5
+ |- ((\t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> c~ f4 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND f4 b0 b1 f5
+ |- ((~ (d IN EMPTY)) ==> ((SUC (CARD EMPTY)) = (SUC (NUMERAL _0))))
T c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY cSUC cNUMERAL c_0
+ |- ((\s. (((x INSERT s) DELETE y) = (((COND (x = y)) (s DELETE y)) (x INSERT (s DELETE y))))) s)
T * / c= * * part cDELETE * * part cINSERT f0 b0 f1 * * * part cCOND c= f0 f1 * * part cDELETE b0 f1 * * part cINSERT f0 * * part cDELETE b0 f1 f2
+ |- ((((c IN (d INSERT EMPTY)) = (c IN (d INSERT EMPTY))) ==> (((c IN (d INSERT EMPTY)) ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ (c IN (d INSERT EMPTY))) ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND (c IN (d INSERT EMPTY))) t') e'))))) = (((c IN (d INSERT EMPTY)) ==> ((CARD (d INSERT EMPTY)) = t')) ==> (((~ (c IN (d INSERT EMPTY))) ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND (c IN (d INSERT EMPTY))) t') e')))))
T c= c==> c= cIN f0 * * part cINSERT f1 part cEMPTY cIN f0 * * part cINSERT f1 part cEMPTY c==> c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY f2 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY f2 f3 c==> c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY f2 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY f2 f3
+ |- ((\s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) s)
T * / ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 f0
+ |- (((!t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((a IN (b INSERT (c INSERT (d INSERT EMPTY)))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT (d INSERT EMPTY)))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> c~ f4 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND f4 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> c~ f4 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND f4 b0 b1 f5 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> f4 c= cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b0 c==> c==> c~ f4 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND f4 b0 b1 f5
+ |- ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))))
T c= c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY
+ |- ((\n. ((SUC (BIT0 n)) = (BIT1 n))) n)
T * / c= cSUC cBIT0 b0 cBIT1 b0 f0
+ (~ (a = b)), (~ (a = c)), ((~ (a = c)) /\ ((~ (a = d)) /\ ((~ (b = c)) /\ ((~ (b = d)) /\ (~ (c = d)))))) |- ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))
T c==> c~ c= f0 f1 c==> c~ c= f0 f2 c==> c/\ c~ c= f0 f2 c/\ c~ c= f0 f3 c/\ c~ c= f1 f2 c/\ c~ c= f1 f3 c~ c= f2 f3 c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- (((!x. ((FINITE (x INSERT s)) = (FINITE s))) ==> ((\x. ((FINITE (x INSERT s)) = (FINITE s))) x)) = ((\x. ((FINITE (x INSERT s)) = (FINITE s))) x))
T c= c==> ! c= cFINITE * * part cINSERT b0 f0 cFINITE f0 * / c= cFINITE * * part cINSERT b0 f0 cFINITE f0 f1 * / c= cFINITE * * part cINSERT b0 f0 cFINITE f0 f1
+ |- ((((b IN (c INSERT (d INSERT EMPTY))) = (b IN (c INSERT (d INSERT EMPTY)))) ==> (((b IN (c INSERT (d INSERT EMPTY))) ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) t') e'))))) = (((b IN (c INSERT (d INSERT EMPTY))) ==> ((CARD (c INSERT (d INSERT EMPTY))) = t')) ==> (((~ (b IN (c INSERT (d INSERT EMPTY)))) ==> ((SUC (CARD (c INSERT (d INSERT EMPTY)))) = e')) ==> ((((COND (b IN (c INSERT (d INSERT EMPTY)))) (CARD (c INSERT (d INSERT EMPTY)))) (SUC (CARD (c INSERT (d INSERT EMPTY))))) = (((COND (b IN (c INSERT (d INSERT EMPTY)))) t') e')))))
T c= c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 f4 c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 f4
+ |- ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m)))))))))
T c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
+ |- ((CARD (c INSERT (d INSERT EMPTY))) = (((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))))
T c= cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY
+ |- (((!s. (((FINITE s) ==> ((CARD s) > (dimindex UNIV))) ==> (dependent s))) ==> ((\s. (((FINITE s) ==> ((CARD s) > (dimindex UNIV))) ==> (dependent s))) (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) = ((\s. (((FINITE s) ==> ((CARD s) > (dimindex UNIV))) ==> (dependent s))) (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))))
T c= c==> ! c==> c==> cFINITE b0 c> cCARD b0 cdimindex part cUNIV cdependent b0 * / c==> c==> cFINITE b0 c> cCARD b0 cdimindex part cUNIV cdependent b0 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY * / c==> c==> cFINITE b0 c> cCARD b0 cdimindex part cUNIV cdependent b0 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY
+ |- ((((c IN (d INSERT EMPTY)) ==> ((CARD (d INSERT EMPTY)) = (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) ==> (((~ (c IN (d INSERT EMPTY))) ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e')))) = (((~ (c IN (d INSERT EMPTY))) ==> ((SUC (CARD (d INSERT EMPTY))) = e')) ==> ((((COND (c IN (d INSERT EMPTY))) (CARD (d INSERT EMPTY))) (SUC (CARD (d INSERT EMPTY)))) = (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e'))))
T c= c==> c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2
+ |- (((d IN EMPTY) ==> ((CARD EMPTY) = t')) ==> (((~ (d IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (d IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (d IN EMPTY)) t') e'))))
T c==> c==> cIN f0 part cEMPTY c= cCARD part cEMPTY f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY f1 f2
+ |- ((!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))) = T)
T c= ! ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c==> c==> c~ f1 c= f3 b1 c= cCOND f0 f2 f3 cCOND f1 b0 b1 cT
+ |- ((((~ (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) ==> ((SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) = (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))) ==> ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))))) = ((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (CARD (b INSERT (c INSERT (d INSERT EMPTY))))) (SUC (CARD (b INSERT (c INSERT (d INSERT EMPTY)))))) = (((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))))
T c= c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((((((COND (a IN (b INSERT (c INSERT (d INSERT EMPTY))))) (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) (SUC (((COND (b IN (c INSERT (d INSERT EMPTY)))) (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (c IN (d INSERT EMPTY))) (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (d IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))) = ((((CARD (a INSERT (b INSERT (c INSERT (d INSERT EMPTY))))) > (dimindex UNIV)) ==> (dependent (a INSERT (b INSERT (c INSERT (d INSERT EMPTY)))))) ==> ((a IN (span (b INSERT (c INSERT (d INSERT EMPTY))))) \/ ((b IN (span (c INSERT (d INSERT (a INSERT EMPTY))))) \/ ((c IN (span (d INSERT (a INSERT (b INSERT EMPTY))))) \/ (d IN (span (a INSERT (b INSERT (c INSERT EMPTY))))))))))
T c= c==> c==> c> cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 * * part cINSERT f3 part cEMPTY cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f3 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c> cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cdimindex part cUNIV cdependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f0 * part cspan * * part cINSERT f1 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY c\/ cIN f1 * part cspan * * part cINSERT f2 * * part cINSERT f3 * * part cINSERT f0 part cEMPTY c\/ cIN f2 * part cspan * * part cINSERT f3 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cIN f3 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
