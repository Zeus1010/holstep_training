N Hypermap.lemma_second_inverse_on_loop
C |- (!L. (!m. ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))))
T c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
D TRUTH
A |- T
T cT
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D Hypermap.lemma_power_inverse
A |- (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))))
T c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 f2 * part cinverse * * part cPOWER f0 f2 c= * part cinverse * * part cPOWER * part cinverse f0 f2 * * part cPOWER f0 f2
D Hypermap.lemma_permute_loop
A |- (!L. (((permutes (loop_map L)) (dart_of_loop L)) /\ ((permutes (inv_loop_map L)) (dart_of_loop L))))
T c/\ cpermutes * part cloop_map f0 * part cdart_of_loop f0 cpermutes * part cinv_loop_map f0 * part cdart_of_loop f0
D Hypermap.lemma_inverse_on_loop
A |- (!L. (((loop_map L) = (inverse (inv_loop_map L))) /\ ((inv_loop_map L) = (inverse (loop_map L)))))
T c/\ c= * part cloop_map f0 * part cinverse * part cinv_loop_map f0 c= * part cinv_loop_map f0 * part cinverse * part cloop_map f0
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- ((\n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))) n)
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 * / c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0 f2
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ (~ ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- F
T c==> c~ c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 cF
- ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) |- (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) /\ ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))
T c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c/\ c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- (((!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))) ==> ((\n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))) n)) = ((\n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))) n))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c= c==> ! c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0 * / c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0 f2 * / c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0 f2
+ |- ((a \/ b) = ((~ b) ==> a))
T c= c\/ f0 f1 c==> c~ f1 f0
+ |- (((permutes (loop_map L)) (dart_of_loop L)) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))
T c==> cpermutes * part cloop_map f0 * part cdart_of_loop f0 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
+ ((inv_loop_map L) = (inverse (loop_map L))) |- ((inverse (loop_map L)) = (inv_loop_map L))
T c==> c= * part cinv_loop_map f0 * part cinverse * part cloop_map f0 c= * part cinverse * part cloop_map f0 * part cinv_loop_map f0
+ ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))) ==> F)
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c==> c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
- |- ((!m. (!L. (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))))) = (!m. (!L. ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))))
T c= ! ! c==> c/\ c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 c= * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 * * part cPOWER * part cloop_map b1 b0 c/\ c= * * part cPOWER * part cloop_map b1 b0 * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 ! ! c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 c= * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 * * part cPOWER * part cloop_map b1 b0 c/\ c= * * part cPOWER * part cloop_map b1 b0 * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 cF
+ |- (((~ ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))) ==> F) = ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))
T c= c==> c~ c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
+ |- ((\L. (((inverse (inv_loop_map L)) = (loop_map L)) /\ ((inverse (loop_map L)) = (inv_loop_map L)))) L)
T * / c/\ c= * part cinverse * part cinv_loop_map b0 * part cloop_map b0 c= * part cinverse * part cloop_map b0 * part cinv_loop_map b0 f0
- |- (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))
T c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))), ((permutes p) s) |- ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 f2 * part cinverse * * part cPOWER f0 f2 c= * part cinverse * * part cPOWER * part cinverse f0 f2 * * part cPOWER f0 f2
- (~ F), (~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ F) /\ F)
T c==> c~ cF c==> c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c~ cF cF
+ |- (((!L. (((inverse (inv_loop_map L)) = (loop_map L)) /\ ((inverse (loop_map L)) = (inv_loop_map L)))) ==> ((\L. (((inverse (inv_loop_map L)) = (loop_map L)) /\ ((inverse (loop_map L)) = (inv_loop_map L)))) L)) = ((\L. (((inverse (inv_loop_map L)) = (loop_map L)) /\ ((inverse (loop_map L)) = (inv_loop_map L)))) L))
T c= c==> ! c/\ c= * part cinverse * part cinv_loop_map b0 * part cloop_map b0 c= * part cinverse * part cloop_map b0 * part cinv_loop_map b0 * / c/\ c= * part cinverse * part cinv_loop_map b0 * part cloop_map b0 c= * part cinverse * part cloop_map b0 * part cinv_loop_map b0 f0 * / c/\ c= * part cinverse * part cinv_loop_map b0 * part cloop_map b0 c= * part cinverse * part cloop_map b0 * part cinv_loop_map b0 f0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((p \/ p) = p)
T c= c\/ f0 f0 f0
+ (~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- F
T c==> c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 cF
- (~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ F) ==> F)
T c==> c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c==> c~ cF cF
+ (~ ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))) |- ((~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))) \/ (~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))
T c==> c~ c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c\/ c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ (~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))) /\ F)
T c==> c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
- |- ((\m. (!L. ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))) m)
T * / ! c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 c= * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 * * part cPOWER * part cloop_map b1 b0 c/\ c= * * part cPOWER * part cloop_map b1 b0 * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 cF f0
- |- (((~ p) ==> p) = p)
T c= c==> c~ f0 f0 f0
- |- ((!L. t) = t)
T c= ! f0 f0
+ |- ((\p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))) p)
T * / c==> cpermutes b0 f0 ! c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1 f1
+ (~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))) /\ F)
T c==> c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 cF
- |- ((((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) ==> (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)))
T c==> c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
- (~ F), (~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ F) /\ F)
T c==> c~ cF c==> c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c~ cF cF
- |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
- |- (((!m. (!L. ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))) ==> ((\m. (!L. ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))) m)) = ((\m. (!L. ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))) m))
T c= c==> ! ! c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 c= * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 * * part cPOWER * part cloop_map b1 b0 c/\ c= * * part cPOWER * part cloop_map b1 b0 * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 cF * / ! c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 c= * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 * * part cPOWER * part cloop_map b1 b0 c/\ c= * * part cPOWER * part cloop_map b1 b0 * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 cF f0 * / ! c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 c= * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 * * part cPOWER * part cloop_map b1 b0 c/\ c= * * part cPOWER * part cloop_map b1 b0 * part cinverse * * part cPOWER * part cinv_loop_map b1 b0 c= * * part cPOWER * part cinv_loop_map b1 b0 * part cinverse * * part cPOWER * part cloop_map b1 b0 cF f0
- |- ((_2495494 = _2495495) ==> ((inverse _2495494) = (inverse _2495495)))
T c==> c= f0 f1 c= * part cinverse f0 * part cinverse f1
- |- (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) = (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))))
T c= c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
+ |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
+ |- (((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))) = T)
T c= c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cT
- |- ((((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) = ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))
T c= c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
- |- (T = (((~ (x = y)) \/ ((~ (x = z)) \/ (y = z))) = ((y = z) \/ ((~ (x = y)) \/ (~ (x = z))))))
T c= cT c= c\/ c~ c= f0 f1 c\/ c~ c= f0 f2 c= f1 f2 c\/ c= f1 f2 c\/ c~ c= f0 f1 c~ c= f0 f2
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))), ((permutes p) s) |- (((permutes p) s) /\ (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c==> cpermutes f0 f1 c/\ cpermutes f0 f1 ! c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0
+ |- ((!m. ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))) = T)
T c= ! c/\ c= * * part cPOWER * part cloop_map f0 b0 * part cinverse * * part cPOWER * part cinv_loop_map f0 b0 c= * * part cPOWER * part cinv_loop_map f0 b0 * part cinverse * * part cPOWER * part cloop_map f0 b0 cT
+ (~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- F
T c==> c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 cF
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))), ((permutes p) s) |- (((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))) = T)
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c==> cpermutes f0 f1 c= c/\ c= * * part cPOWER * part cinverse f0 f2 * part cinverse * * part cPOWER f0 f2 c= * part cinverse * * part cPOWER * part cinverse f0 f2 * * part cPOWER f0 f2 cT
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- ((\p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))) p)
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 * / ! c==> cpermutes b0 f0 c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1 f1
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- (!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 ! c==> cpermutes b0 f0 ! c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1
+ |- (((((POWER (inverse (loop_map L))) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inverse (loop_map L))) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))
T c==> c/\ c= * * part cPOWER * part cinverse * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinverse * part cloop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
+ ((permutes (loop_map L)) (dart_of_loop L)) |- (((permutes (loop_map L)) (dart_of_loop L)) /\ ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))
T c==> cpermutes * part cloop_map f0 * part cdart_of_loop f0 c/\ cpermutes * part cloop_map f0 * part cdart_of_loop f0 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
- ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))) ==> (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c==> c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
+ |- (((!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) ==> (!s. (!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))))) = (!s. (!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))))
T c= c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 ! ! c==> cpermutes b1 b0 ! c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 ! ! c==> cpermutes b1 b0 ! c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ |- (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))
T c==> cpermutes f0 f1 ! c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0
+ |- (((inverse (inv_loop_map L)) = (loop_map L)) /\ ((inverse (loop_map L)) = (inv_loop_map L)))
T c/\ c= * part cinverse * part cinv_loop_map f0 * part cloop_map f0 c= * part cinverse * part cloop_map f0 * part cinv_loop_map f0
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ |- ((((permutes (loop_map L)) (dart_of_loop L)) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))) = ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))
T c= c==> cpermutes * part cloop_map f0 * part cdart_of_loop f0 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
+ (~ ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))) /\ F)
T c==> c~ c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c~ c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
- |- ((_2495486 = _2495487) ==> ((inv_loop_map _2495486) = (inv_loop_map _2495487)))
T c==> c= f0 f1 c= * part cinv_loop_map f0 * part cinv_loop_map f1
+ ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- (((inverse ((POWER (inv_loop_map L)) m)) = (inverse ((POWER (inv_loop_map L)) m))) = (((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m)) /\ ((inverse ((POWER (inv_loop_map L)) m)) = (inverse ((POWER (inv_loop_map L)) m)))))
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c/\ c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1
+ ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- ((!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) /\ (!s. (!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c/\ ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 ! ! c==> cpermutes b1 b0 ! c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2
- (~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) |- ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) /\ F)
T c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c/\ c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- ((((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))) = T)
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c= c==> cpermutes f0 f1 ! c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0 cT
- (_2495490 = _2495492), (_2495491 = _2495493) |- ((_2495491 = _2495493) /\ (((POWER _2495490) _2495491) = ((POWER _2495492) _2495493)))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f2 f3 c= * * part cPOWER f0 f2 * * part cPOWER f1 f3
- |- ((_2495488 = _2495489) ==> ((loop_map _2495488) = (loop_map _2495489)))
T c==> c= f0 f1 c= * part cloop_map f0 * part cloop_map f1
- |- ((x = x) = T)
T c= c= f0 f0 cT
+ |- ((p \/ (q \/ r)) = (q \/ (p \/ r)))
T c= c\/ f0 c\/ f1 f2 c\/ f1 c\/ f0 f2
+ |- (((!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))) ==> ((\p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))) p)) = ((\p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))) p))
T c= c==> ! c==> cpermutes b0 f0 ! c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1 * / c==> cpermutes b0 f0 ! c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1 f1 * / c==> cpermutes b0 f0 ! c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1 f1
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- (((!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))) ==> ((\p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))) p)) = ((\p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))) p))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c= c==> ! ! c==> cpermutes b0 f0 c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1 * / ! c==> cpermutes b0 f0 c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1 f1 * / ! c==> cpermutes b0 f0 c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1 f1
- |- ((a ==> b) = ((~ a) \/ b))
T c= c==> f0 f1 c\/ c~ f0 f1
- |- ((~ (_2495490 = _2495492)) \/ ((~ (_2495491 = _2495493)) \/ (((POWER _2495490) _2495491) = ((POWER _2495492) _2495493))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cPOWER f0 f2 * * part cPOWER f1 f3
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 ! c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0
+ ((loop_map L) = (inverse (inv_loop_map L))) |- ((inverse (inv_loop_map L)) = (loop_map L))
T c==> c= * part cloop_map f0 * part cinverse * part cinv_loop_map f0 c= * part cinverse * part cinv_loop_map f0 * part cloop_map f0
- |- ((_2495490 = _2495492) ==> ((~ (_2495491 = _2495493)) \/ (((POWER _2495490) _2495491) = ((POWER _2495492) _2495493))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c= * * part cPOWER f0 f2 * * part cPOWER f1 f3
+ |- ((p \/ q) = (q \/ p))
T c= c\/ f0 f1 c\/ f1 f0
- ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) |- ((((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))
T c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
- |- ((p \/ (p \/ q)) = (p \/ q))
T c= c\/ f0 c\/ f0 f1 c\/ f0 f1
+ |- ((\s. (!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) s)
T * / ! c==> cpermutes b1 b0 ! c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 f0
- |- ((~ (_2495488 = _2495489)) \/ ((loop_map _2495488) = (loop_map _2495489)))
T c\/ c~ c= f0 f1 c= * part cloop_map f0 * part cloop_map f1
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
+ |- ((~ (a \/ b)) = ((~ a) /\ (~ b)))
T c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
+ |- (((!L. (((permutes (loop_map L)) (dart_of_loop L)) /\ ((permutes (inv_loop_map L)) (dart_of_loop L)))) ==> ((\L. (((permutes (loop_map L)) (dart_of_loop L)) /\ ((permutes (inv_loop_map L)) (dart_of_loop L)))) L)) = ((\L. (((permutes (loop_map L)) (dart_of_loop L)) /\ ((permutes (inv_loop_map L)) (dart_of_loop L)))) L))
T c= c==> ! c/\ cpermutes * part cloop_map b0 * part cdart_of_loop b0 cpermutes * part cinv_loop_map b0 * part cdart_of_loop b0 * / c/\ cpermutes * part cloop_map b0 * part cdart_of_loop b0 cpermutes * part cinv_loop_map b0 * part cdart_of_loop b0 f0 * / c/\ cpermutes * part cloop_map b0 * part cdart_of_loop b0 cpermutes * part cinv_loop_map b0 * part cdart_of_loop b0 f0
+ ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) /\ ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
- (~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) |- F
T c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- ((!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))) = T)
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c= ! c==> cpermutes b0 f0 ! c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1 cT
+ (~ ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))), ((~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))) ==> F), ((~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))) ==> F) |- F
T c==> c~ c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c==> c==> c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 cF c==> c==> c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF cF
- ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m)))
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c==> c~ c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1
- |- ((\L. ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) L)
T * / c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 c= * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 * * part cPOWER * part cloop_map b0 f0 c/\ c= * * part cPOWER * part cloop_map b0 f0 * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 cF f1
+ ((inverse (inv_loop_map L)) = (loop_map L)) |- ((loop_map L) = (inverse (inv_loop_map L)))
T c==> c= * part cinverse * part cinv_loop_map f0 * part cloop_map f0 c= * part cloop_map f0 * part cinverse * part cinv_loop_map f0
- (_2495490 = _2495492) |- ((_2495490 = _2495492) /\ ((~ (_2495491 = _2495493)) \/ (((POWER _2495490) _2495491) = ((POWER _2495492) _2495493))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c= * * part cPOWER f0 f2 * * part cPOWER f1 f3
- (_2495494 = _2495495) |- ((_2495494 = _2495495) /\ ((inverse _2495494) = (inverse _2495495)))
T c==> c= f0 f1 c/\ c= f0 f1 c= * part cinverse f0 * part cinverse f1
- (_2495488 = _2495489) |- ((_2495488 = _2495489) /\ ((loop_map _2495488) = (loop_map _2495489)))
T c==> c= f0 f1 c/\ c= f0 f1 c= * part cloop_map f0 * part cloop_map f1
+ ((permutes (loop_map L)) (dart_of_loop L)) |- ((((POWER (inverse (loop_map L))) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inverse (loop_map L))) m)) = ((POWER (loop_map L)) m)))
T c==> cpermutes * part cloop_map f0 * part cdart_of_loop f0 c/\ c= * * part cPOWER * part cinverse * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinverse * part cloop_map f0 f1 * * part cPOWER * part cloop_map f0 f1
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ ((permutes (loop_map L)) (dart_of_loop L)) |- ((\n. ((((POWER (inverse (loop_map L))) n) = (inverse ((POWER (loop_map L)) n))) /\ ((inverse ((POWER (inverse (loop_map L))) n)) = ((POWER (loop_map L)) n)))) m)
T c==> cpermutes * part cloop_map f0 * part cdart_of_loop f0 * / c/\ c= * * part cPOWER * part cinverse * part cloop_map f0 b0 * part cinverse * * part cPOWER * part cloop_map f0 b0 c= * part cinverse * * part cPOWER * part cinverse * part cloop_map f0 b0 * * part cPOWER * part cloop_map f0 b0 f1
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
+ (~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))) |- ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) ==> F)
T c==> c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c==> c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 cF
+ |- ((permutes (loop_map L)) (dart_of_loop L))
T cpermutes * part cloop_map f0 * part cdart_of_loop f0
- (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) |- ((((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) /\ (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)))
T c==> c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c/\ c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
+ ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- (((((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m)) /\ ((inverse ((POWER (inv_loop_map L)) m)) = (inverse ((POWER (inv_loop_map L)) m)))) ==> (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))) = (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))))
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= c==> c/\ c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1
- (~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))) /\ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))))
T c==> c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1
+ (~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))) |- ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) ==> F)
T c==> c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c==> c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
- |- ((!L. (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) = T)
T c= ! c==> c/\ c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 c= * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 * * part cPOWER * part cloop_map b0 f0 c/\ c= * * part cPOWER * part cloop_map b0 f0 * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 cT
+ |- ((\L. (((permutes (loop_map L)) (dart_of_loop L)) /\ ((permutes (inv_loop_map L)) (dart_of_loop L)))) L)
T * / c/\ cpermutes * part cloop_map b0 * part cdart_of_loop b0 cpermutes * part cinv_loop_map b0 * part cdart_of_loop b0 f0
- (~ ((inverse ((POWER (inv_loop_map L)) m)) = (inverse ((POWER (inv_loop_map L)) m)))) |- ((~ ((inverse ((POWER (inv_loop_map L)) m)) = (inverse ((POWER (inv_loop_map L)) m)))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = (inverse ((POWER (inv_loop_map L)) m))))
T c==> c~ c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c/\ c~ c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1
+ |- (((!s. (!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) ==> ((\s. (!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) s)) = ((\s. (!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) s))
T c= c==> ! ! c==> cpermutes b1 b0 ! c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 * / ! c==> cpermutes b1 b0 ! c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 f0 * / ! c==> cpermutes b1 b0 ! c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 f0
- (~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ F) ==> F)
T c==> c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c==> c~ cF cF
+ |- ((!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) ==> (!s. (!p. (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 ! ! c==> cpermutes b1 b0 ! c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2
- (~ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m)))
T c==> c~ c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c~ c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1
+ ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) ==> F) = F)
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= c==> c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF cF
+ |- ((inverse (loop_map L)) = (inv_loop_map L))
T c= * part cinverse * part cloop_map f0 * part cinv_loop_map f0
- (_2495490 = _2495492) |- ((_2495491 = _2495493) ==> (((POWER _2495490) _2495491) = ((POWER _2495492) _2495493)))
T c==> c= f0 f1 c==> c= f2 f3 c= * * part cPOWER f0 f2 * * part cPOWER f1 f3
+ ((permutes (loop_map L)) (dart_of_loop L)) |- (!n. ((((POWER (inverse (loop_map L))) n) = (inverse ((POWER (loop_map L)) n))) /\ ((inverse ((POWER (inverse (loop_map L))) n)) = ((POWER (loop_map L)) n))))
T c==> cpermutes * part cloop_map f0 * part cdart_of_loop f0 ! c/\ c= * * part cPOWER * part cinverse * part cloop_map f0 b0 * part cinverse * * part cPOWER * part cloop_map f0 b0 c= * part cinverse * * part cPOWER * part cinverse * part cloop_map f0 b0 * * part cPOWER * part cloop_map f0 b0
- |- ((!L. (P L)) = ((P T) /\ (P F)))
T c= ! * f0 b0 c/\ * f0 cT * f0 cF
+ ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- (((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) ==> F) = F)
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= c==> c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 cF cF
- |- ((~ (_2495486 = _2495487)) \/ ((inv_loop_map _2495486) = (inv_loop_map _2495487)))
T c\/ c~ c= f0 f1 c= * part cinv_loop_map f0 * part cinv_loop_map f1
- |- ((inverse (inv_loop_map L)) = (loop_map L))
T c= * part cinverse * part cinv_loop_map f0 * part cloop_map f0
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m)))) ==> (((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))))
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c==> c~ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1
- |- (((!L. ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) ==> ((\L. ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) L)) = ((\L. ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) L))
T c= c==> ! c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 c= * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 * * part cPOWER * part cloop_map b0 f0 c/\ c= * * part cPOWER * part cloop_map b0 f0 * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 cF * / c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 c= * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 * * part cPOWER * part cloop_map b0 f0 c/\ c= * * part cPOWER * part cloop_map b0 f0 * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 cF f1 * / c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 c= * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 * * part cPOWER * part cloop_map b0 f0 c/\ c= * * part cPOWER * part cloop_map b0 f0 * part cinverse * * part cPOWER * part cinv_loop_map b0 f0 c= * * part cPOWER * part cinv_loop_map b0 f0 * part cinverse * * part cPOWER * part cloop_map b0 f0 cF f1
- |- ((~ (_2495494 = _2495495)) \/ ((inverse _2495494) = (inverse _2495495)))
T c\/ c~ c= f0 f1 c= * part cinverse f0 * part cinverse f1
+ ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- (((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m)) /\ ((inverse ((POWER (inv_loop_map L)) m)) = (inverse ((POWER (inv_loop_map L)) m))))
T c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- ((\s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) s)
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 * / ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 f0
- (~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))), ((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) |- ((~ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))
T c==> c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c~ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1
- ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F), (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) |- ((((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) /\ ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))
T c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c/\ c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 ! ! c==> cpermutes b0 f0 c/\ c= * * part cPOWER * part cinverse b0 b1 * part cinverse * * part cPOWER b0 b1 c= * part cinverse * * part cPOWER * part cinverse b0 b1 * * part cPOWER b0 b1
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- (((permutes p) s) ==> (!n. ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c==> cpermutes f0 f1 ! c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0
- |- ((~ ((inverse ((POWER (inv_loop_map L)) m)) = (inverse ((POWER (inv_loop_map L)) m)))) ==> ((inverse ((POWER (inv_loop_map L)) m)) = (inverse ((POWER (inv_loop_map L)) m))))
T c==> c~ c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1
- |- (((((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) ==> (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))) = (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)))
T c= c==> c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
- (_2495486 = _2495487) |- ((_2495486 = _2495487) /\ ((inv_loop_map _2495486) = (inv_loop_map _2495487)))
T c==> c= f0 f1 c/\ c= f0 f1 c= * part cinv_loop_map f0 * part cinv_loop_map f1
- |- ((((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))))) = T)
T c= c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cT
- ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F), (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) ==> ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F)) |- (((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F) /\ ((~ (((((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m))) /\ ((inverse ((POWER (inv_loop_map L)) m)) = ((POWER (loop_map L)) m))) ==> ((((POWER (loop_map L)) m) = (inverse ((POWER (inv_loop_map L)) m))) /\ (((POWER (inv_loop_map L)) m) = (inverse ((POWER (loop_map L)) m)))))) ==> F))
T c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c==> c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c/\ c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF c==> c~ c==> c/\ c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 c= * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 * * part cPOWER * part cloop_map f0 f1 c/\ c= * * part cPOWER * part cloop_map f0 f1 * part cinverse * * part cPOWER * part cinv_loop_map f0 f1 c= * * part cPOWER * part cinv_loop_map f0 f1 * part cinverse * * part cPOWER * part cloop_map f0 f1 cF
