N SPAN_AFFINE_HULL_INSERT
C |- (!s. ((span s) = ((hull affine) ((vec (NUMERAL _0)) INSERT s))))
T c= * part cspan f0 * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0
D TRUTH
A |- T
T cT
D IN_INSERT
A |- (!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))))
T c= cIN f0 * * part cINSERT f1 f2 c\/ c= f0 f1 cIN f0 f2
D HULL_INC
A |- (!P. (!s. (!x. ((x IN s) ==> (x IN ((hull P) s))))))
T c==> cIN f0 f1 cIN f0 * * part chull f2 f1
D SPAN_INSERT_0
A |- (!s. ((span ((vec (NUMERAL _0)) INSERT s)) = (span s)))
T c= * part cspan * * part cINSERT cvec cNUMERAL c_0 f0 * part cspan f0
D AFFINE_HULL_EQ_SPAN
A |- (!s. (((vec (NUMERAL _0)) IN ((hull affine) s)) ==> (((hull affine) s) = (span s))))
T c==> cIN cvec cNUMERAL c_0 * * part chull part caffine f0 c= * * part chull part caffine f0 * part cspan f0
+ |- (T = (!s. ((span s) = ((hull affine) ((vec (NUMERAL _0)) INSERT s)))))
T c= cT ! c= * part cspan b0 * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 b0
+ |- ((\x. ((x IN s) ==> (x IN ((hull P) s)))) x)
T * / c==> cIN b0 f0 cIN b0 * * part chull f1 f0 f2
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- ((vec (NUMERAL _0)) IN ((hull affine) s)) |- (((vec (NUMERAL _0)) IN ((hull affine) s)) /\ (((hull affine) s) = (span s)))
T c==> cIN cvec cNUMERAL c_0 * * part chull part caffine f0 c/\ cIN cvec cNUMERAL c_0 * * part chull part caffine f0 c= * * part chull part caffine f0 * part cspan f0
