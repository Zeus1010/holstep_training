N Aq1.AQ1
C |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 cuniq cflatten cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0
D TRUTH
A |- T
T cT
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D o_DEF
A |- (!f. (!g. ((f o g) = (\x. (f (g x))))))
T c= * * part co f0 f1 / * f0 * f1 b0
D I_DEF
A |- (I = (\x. x))
T c= part cI / b0
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D MEM_APPEND
A |- (!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))))
T c= cMEM f0 cAPPEND f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
D Fan.POWER
A |- ((!f. (((POWER f) (NUMERAL _0)) = I)) /\ (!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))))
T c/\ ! c= * * part cPOWER b0 cNUMERAL c_0 part cI ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D Nkezbfc_local.lemma
A |- (!A. (A \/ (~ A)))
T c\/ f0 c~ f0
D Seq.hasP
A |- (!a. (!s. ((?x. (((MEM x) s) /\ (a x))) = ((has a) s))))
T c= c? / c/\ cMEM b0 f0 * f1 b0 chas f1 f0
D Seq.cat_uniq
A |- (!s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))))
T c= cuniq ccat f0 f1 c/\ cuniq f0 c/\ c~ chas / cMEM b0 f0 f1 cuniq f1
D Seq.filter_uniq
A |- (!s. (!a. ((uniq s) ==> (uniq ((filter a) s)))))
T c==> cuniq f0 cuniq cfilter f1 f0
D Seq.flatten_cat
A |- (!ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))))
T c= cflatten ccat f0 f1 ccat cflatten f0 cflatten f1
D Seq2.APPEND_cat
A |- (APPEND = cat)
T c= part cAPPEND part ccat
D Seq2.next_prev_id
A |- (!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x))))
T c==> cuniq f0 c= cnext_el f0 cprev_el f0 f1 f1
D List_hypermap.uniq_find_face
A |- (!d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1
D Tame_defs2.good_list
A |- (!L. ((good_list L) = ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))))))))
T c= cgood_list f0 c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0
D Tame_defs2.normal_list
A |- (!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))))))
T c= cnormal_list f0 f1 c/\ cuniq cflatten f1 c/\ call / c~ c= b0 cNIL f1 c/\ call * part cf_last f0 f1 c/\ call * part cloop_list f0 f1 ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1
D Tame_defs2.transform_list
A |- (!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))))
T c= ctransform_list f0 f1 c, f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f3 c, f2 f3 c, b5 cSND b4 cAPPEND creplace f3 cCONS cSND b4 cNIL f2 cCONS cFST b4 cNIL csplit_normal_list f0 f3 b3 b0 b2 cfind_face f0 b0 cprev_el f3 b1 cl'z f0 f2 f3 f1 cl'y f0 f3 f1
D Tame_defs2.ntrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= cntrans f0 f1 f2 f3 f4 cFST cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.rtrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= crtrans f0 f1 f2 f3 f4 cSND cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.ytrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x)))))))
T c= cytrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.ztrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))
T c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.marked_list
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))))))
T c= cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3
D Tame_list.APPEND_cat
A |- (APPEND = cat)
T c= part cAPPEND part ccat
D Tame_list.uniq_flatten_uniq
A |- (!L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s))))
T c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1
D Pplhulj.marked_list_of_dart
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))))
T c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0
D Hojodcm.ytrans_mem_rtrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
D Hojodcm.mem_ztrans_rtrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2
D Aq1.change_flatten_replace_filter
A |- (((uniq (flatten N)) /\ (((all (\l. (~ (l = NIL)))) N) /\ ((MEM r) N))) ==> (!x. (((MEM x) (flatten (((replace r) ((CONS s) NIL)) N))) = ((MEM x) ((APPEND s) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))
T c==> c/\ cuniq cflatten f0 c/\ call / c~ c= b0 cNIL f0 cMEM f1 f0 ! c= cMEM b0 cflatten creplace f1 cCONS f2 cNIL f0 cMEM b0 cAPPEND f2 cfilter / c~ cMEM b1 f1 cflatten f0
D Aq1.flatten_sing
A |- ((flatten ((CONS s) NIL)) = s)
T c= cflatten cCONS f0 cNIL f0
D Aq1.uniq_replace_filter_flatten
A |- (((uniq (flatten N)) /\ (((all (\l. (~ (l = NIL)))) N) /\ ((MEM r) N))) ==> ((uniq (flatten (((replace r) ((CONS s) NIL)) N))) = (uniq ((APPEND s) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))
T c==> c/\ cuniq cflatten f0 c/\ call / c~ c= b0 cNIL f0 cMEM f1 f0 c= cuniq cflatten creplace f1 cCONS f2 cNIL f0 cuniq cAPPEND f2 cfilter / c~ cMEM b0 f1 cflatten f0
D Aq1.uniq_snd_split_norm
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cuniq cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3
D Aq1.has_snd_norm_list_fliter
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((has (\d. ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c~ chas / cMEM b0 cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cfilter / c~ cMEM b0 f2 cflatten f1
D Aq1.uniq_fst_split_norm
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cuniq cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3
D Aq1.FST_SND_MEM_SPLIT_NORMAL_F
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ cMEM f4 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cMEM f4 cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cF
D Aq1.FST_FLITER_MEM_SPLIT_NORMAL_F
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))) ==> F)))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ cMEM f4 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cMEM f4 cfilter / c~ cMEM b0 f2 cflatten f1 cF
+ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) |- (((MEM x') (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) = T)
T c==> cMEM f0 cSND csplit_normal_list f1 f2 cfind_face f1 f3 f3 f4 c= cMEM f0 cSND csplit_normal_list f1 f2 cfind_face f1 f3 f3 f4 cT
+ |- ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)
T * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
- |- ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))
T c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ (good_list L), (good_list_nodes L), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> cMEM f2 f1 c==> cnormal_list f0 f1 c==> cmarked_list f0 f1 f2 f3 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f1 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3
+ |- (((!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) ==> ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i)) = ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i))
T c= c==> ! c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
+ |- ((((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) = ((good_list L) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))
T c= c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 c==> cgood_list f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x), ((\x. (((MEM x) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ (((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) x') |- (((\x. (((MEM x) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ (((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) x') /\ F)
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c==> * / c/\ cMEM b0 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c\/ cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cMEM b0 cfilter / c~ cMEM b1 f1 cflatten f6 f7 c/\ * / c/\ cMEM b0 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c\/ cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cMEM b0 cfilter / c~ cMEM b1 f1 cflatten f6 f7 cF
+ |- (((!s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) ==> ((\s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) s1)) = ((\s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) s1))
T c= c==> ! ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 * / ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 f0 * / ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 f0
+ (uniq (flatten N)), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N) |- (((MEM x) (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))) = ((MEM x) ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> cuniq cflatten f0 c==> cMEM f1 f0 c==> call / c~ c= b0 cNIL f0 c= cMEM f2 cflatten creplace f1 cCONS cSND csplit_normal_list f3 f1 cfind_face f3 f4 f4 f5 cNIL f0 cMEM f2 cAPPEND cSND csplit_normal_list f3 f1 cfind_face f3 f4 f4 f5 cfilter / c~ cMEM b0 f1 cflatten f0
+ |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ztrans L) N) r) x) (NUMERAL _0))) = ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) (((((ztrans L) N) r) x) (NUMERAL _0))))
T c= c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((MEM z) r)), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> c==> c~ cfinal_list f1 f2 cMEM f5 f2 c==> cMEM f3 clist_of_darts f1 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((uniq (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ==> ((~ ((has (\x. ((MEM x) ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1)))) /\ (uniq (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1)))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c==> cuniq cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c/\ c~ chas / cMEM b0 cAPPEND cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cfilter / c~ cMEM b1 f1 cflatten f6 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cuniq cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f6 f1 f4 c~ cfinal_list f0 f1 cuniq cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f4 cl'y f0 f1 f4 cprev_el f1 cl'z f0 f6 f1 f4 cuniq cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3
+ |- (((!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) ==> ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)) = ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x))
T c= c==> ! ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (((!x. (((\x. (((MEM x) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ (((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) x) ==> F)) ==> ((?x. (((MEM x) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ (((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) ==> F)) = ((?x. (((MEM x) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ (((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) ==> F))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c= c==> ! c==> * / c/\ cMEM b1 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c\/ cMEM b1 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cMEM b1 cfilter / c~ cMEM b1 f1 cflatten f6 b0 cF c==> c? / c/\ cMEM b0 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c\/ cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cMEM b0 cfilter / c~ cMEM b1 f1 cflatten f6 cF c==> c? / c/\ cMEM b0 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c\/ cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cMEM b0 cfilter / c~ cMEM b1 f1 cflatten f6 cF
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) /\ (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> cMEM f1 clist_of_darts f0 c==> cMEM f2 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f2 f1 c/\ cMEM f1 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- ((((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))) = (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c= c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 cuniq cflatten cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0 cuniq cflatten cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0
+ |- ((\s. (!r. (!N. (((uniq (flatten N)) /\ (((all (\l. (~ (l = NIL)))) N) /\ ((MEM r) N))) ==> ((uniq (flatten (((replace r) ((CONS s) NIL)) N))) = (uniq ((APPEND s) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))))) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1)))
T * / ! ! c==> c/\ cuniq cflatten b2 c/\ call / c~ c= b3 cNIL b2 cMEM b1 b2 c= cuniq cflatten creplace b1 cCONS b0 cNIL b2 cuniq cAPPEND b0 cfilter / c~ cMEM b3 b1 cflatten b2 cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3
- (~ ((final_list L) r)), (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))) ==> ((~ ((has (\x. ((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))) /\ (uniq ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f5 f6 c==> c= cl'z f0 f2 f1 f5 f3 c==> cmarked_list f0 f2 f1 f5 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 f5 c~ cfinal_list f0 f1 cuniq cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f5 cl'y f0 f1 f5 cprev_el f1 cl'z f0 f2 f1 f5 c/\ c~ chas / cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cfilter / c~ cMEM b0 f1 cflatten f2 cuniq cfilter / c~ cMEM b0 f1 cflatten f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f6 f2 f1 c==> c==> cfinal_list f0 f2 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f1 f2 c==> cMEM f2 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f2 f1 c==> cMEM f1 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c/\ c==> cfinal_list f0 f1 cflag_list f0 f3 c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((\y. ((((l'y L) r) x) = y)) y) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> * / c= cl'y f0 f1 f2 b0 f4 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f6 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f2 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2
+ |- (((!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) ==> ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)) = ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L))
T c= c==> ! ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
- |- ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y)))
T c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
+ |- (((!a. ((uniq (flatten N)) ==> (uniq ((filter a) (flatten N))))) ==> ((\a. ((uniq (flatten N)) ==> (uniq ((filter a) (flatten N))))) (\d. (~ ((MEM d) r))))) = ((\a. ((uniq (flatten N)) ==> (uniq ((filter a) (flatten N))))) (\d. (~ ((MEM d) r)))))
T c= c==> ! c==> cuniq cflatten f0 cuniq cfilter b0 cflatten f0 * / c==> cuniq cflatten f0 cuniq cfilter b0 cflatten f0 / c~ cMEM b0 f1 * / c==> cuniq cflatten f0 cuniq cfilter b0 cflatten f0 / c~ cMEM b0 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM x') (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))), ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))), ((((marked_list L) N) r) x) |- (T = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F) ==> F))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cMEM f7 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c==> cMEM f7 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c==> cmarked_list f0 f6 f1 f4 c= cT c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f6 f1 f4 c/\ c~ cfinal_list f0 f1 c/\ cMEM f7 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f4 cl'y f0 f1 f4 cprev_el f1 cl'z f0 f6 f1 f4 cMEM f7 cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f4 cl'y f0 f1 f4 cprev_el f1 cl'z f0 f6 f1 f4 cF cF
+ |- ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)
T * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L))
T c= c==> ! ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0
- |- ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))
T c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- |- ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)
T * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ |- (((((final_list L) r) \/ (~ ((final_list L) r))) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1)))))))) = (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))))))
T c= c==> c\/ cfinal_list f0 f1 c~ cfinal_list f0 f1 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 f4 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 f4 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 f4 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 f4
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
+ ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) = T)
T c==> cmarked_list f0 f1 f2 f3 c= cmarked_list f0 f1 f2 f3 cT
+ |- (((!s. (((has a) s) = (?x. (((MEM x) s) /\ (a x))))) ==> ((\s. (((has a) s) = (?x. (((MEM x) s) /\ (a x))))) s)) = ((\s. (((has a) s) = (?x. (((MEM x) s) /\ (a x))))) s))
T c= c==> ! c= chas f0 b0 c? / c/\ cMEM b1 b0 * f0 b1 * / c= chas f0 b0 c? / c/\ cMEM b1 b0 * f0 b1 f1 * / c= chas f0 b0 c? / c/\ cMEM b1 b0 * f0 b1 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((!x'. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) x') ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))) ==> ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))) = ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c= c==> ! c==> * / c= cztrans f0 f3 f1 f2 cNUMERAL c_0 b1 b0 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0 c==> c? / c= cztrans f0 f3 f1 f2 cNUMERAL c_0 b0 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0 c==> c? / c= cztrans f0 f3 f1 f2 cNUMERAL c_0 b0 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2 cT
- |- (((!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) ==> ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)) = ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2))
T c= c==> ! c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
+ (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))
T c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f4 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4
+ (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))
T c==> cuniq cflatten f0 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f1 f2 f5 f6 c==> c= cztrans f1 f0 f2 f5 cNUMERAL c_0 f3 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f5 c/\ call / c~ c= b0 cNIL f0 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cuniq f2 c==> c= cnext_el f2 f4 f3 c==> c==> c~ cfinal_list f1 f2 cMEM f3 f2 c==> c==> c~ cfinal_list f1 f2 cMEM f6 f2 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5
+ ((((l'y L) r) x) = y) |- ((((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))) = (((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))
T c==> c= cl'y f0 f1 f2 f3 c= c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f4 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2 c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f4 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2
+ |- (((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))) = (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c= c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f2 f1 f4 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f2 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f2 f1 f4 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f2 f1 f4 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f2 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f2 f1 f4
+ (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> cuniq cflatten f0 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f1 f2 f5 f6 c==> c= cztrans f1 f0 f2 f5 cNUMERAL c_0 f3 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f5 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((?y. ((((l'y L) r) x) = y)) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> c? / c= cl'y f0 f1 f2 b0 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
- (is_restricted (hypermap_of_list L)) |- ((is_restricted (hypermap_of_list L)) = T)
T c==> cis_restricted chypermap_of_list f0 c= cis_restricted chypermap_of_list f0 cT
+ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) |- (((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) /\ (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 c/\ c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 cuniq cflatten cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0
+ |- (!r'. (!N. (((uniq (flatten N)) /\ (((all (\l. (~ (l = NIL)))) N) /\ ((MEM r') N))) ==> ((uniq (flatten (((replace r') ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))) = (uniq ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r')))) (flatten N))))))))
T c==> c/\ cuniq cflatten f0 c/\ call / c~ c= b0 cNIL f0 cMEM f1 f0 c= cuniq cflatten creplace f1 cCONS cSND csplit_normal_list f2 f3 cfind_face f2 f4 f4 f5 cNIL f0 cuniq cAPPEND cSND csplit_normal_list f2 f3 cfind_face f2 f4 f4 f5 cfilter / c~ cMEM b0 f1 cflatten f0
- |- (((!x'. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) x') ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))) ==> ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))) = ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))))
T c= c==> ! c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b1 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b1 c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f4 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cmarked_list f0 f4 f1 f2 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f4 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2
+ |- (((!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) ==> ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)) = ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x))
T c= c==> ! c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ (~ ((final_list L) r)), (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((~ ((has (\x. ((MEM x) (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))))) (flatten ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) /\ (uniq (flatten ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = ((uniq (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))) /\ ((~ ((has (\x. ((MEM x) (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))))) (flatten ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) /\ (uniq (flatten ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f5 f6 c==> c= cl'z f0 f2 f1 f5 f3 c==> cMEM f1 f2 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f5 c= c/\ c~ chas / cMEM b0 cflatten creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cNIL f2 cflatten cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cNIL cuniq cflatten cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cNIL c/\ cuniq cflatten creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cNIL f2 c/\ c~ chas / cMEM b0 cflatten creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cNIL f2 cflatten cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cNIL cuniq cflatten cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cNIL
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
- |- ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))
T c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) |- (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) = T)
T c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 c= c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c==> c~ cfinal_list f1 f2 cMEM f5 f2 c==> c==> c~ cfinal_list f1 f2 cMEM f6 f2 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3
+ |- ((\N. (((uniq (flatten N)) /\ (((all (\l. (~ (l = NIL)))) N) /\ ((MEM r) N))) ==> ((uniq (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))) = (uniq ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))) N)
T * / c==> c/\ cuniq cflatten b0 c/\ call / c~ c= b1 cNIL b0 cMEM f0 b0 c= cuniq cflatten creplace f0 cCONS cSND csplit_normal_list f1 f0 cfind_face f1 f2 f2 f3 cNIL b0 cuniq cAPPEND cSND csplit_normal_list f1 f0 cfind_face f1 f2 f2 f3 cfilter / c~ cMEM b1 f0 cflatten b0 f4
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) /\ ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f4 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cmarked_list f0 f4 f1 f2 c/\ c= cl'y f0 f1 f2 f3 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f4 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2
+ (good_list L), (good_list_nodes L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cnormal_list f0 f1 c==> cmarked_list f0 f1 f2 f3 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f1 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3
+ |- (((((uniq (flatten N)) /\ (((all (\l. (~ (l = NIL)))) N) /\ ((MEM r) N))) ==> ((uniq (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))) = (uniq ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) ==> (uniq (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)))) = (uniq (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))))
T c= c==> c==> c/\ cuniq cflatten f0 c/\ call / c~ c= b0 cNIL f0 cMEM f1 f0 c= cuniq cflatten creplace f1 cCONS cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 cNIL f0 cuniq cAPPEND cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 cfilter / c~ cMEM b0 f1 cflatten f0 cuniq cflatten creplace f1 cCONS cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 cNIL f0 cuniq cflatten creplace f1 cCONS cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 cNIL f0
- (((final_list L) r) ==> ((flag_list L) N)) |- (((final_list L) r) ==> (((flag_list L) N) = T))
T c==> c==> cfinal_list f0 f1 cflag_list f0 f2 c==> cfinal_list f0 f1 c= cflag_list f0 f2 cT
- |- ((\x. (((MEM x) (rev s)) = ((MEM x) s))) x)
T * / c= cMEM b0 crev f0 cMEM b0 f0 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((MEM y) r)), ((~ ((final_list L) r)) ==> ((MEM z) r)), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> c==> c~ cfinal_list f1 f2 cMEM f6 f2 c==> c==> c~ cfinal_list f1 f2 cMEM f5 f2 c==> cMEM f3 clist_of_darts f1 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3
+ |- ((\d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))) x)
T * / ! c==> cuniq clist_of_darts b1 cuniq cfind_face b1 b0 f0
- |- (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))
T c= cMEM f0 ccat f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
+ |- (((!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
- |- (((!s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) ==> ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s)) = ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s))
T c= c==> ! ! c= cMEM b1 crev b0 cMEM b1 b0 * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0 * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x), ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) /\ (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> * / c= cztrans f0 f3 f1 f2 cNUMERAL c_0 b0 f6 c/\ * / c= cztrans f0 f3 f1 f2 cNUMERAL c_0 b0 f6 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ |- (((!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) ==> ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)) = ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L))
T c= c==> ! ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
- |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) = ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1))
T c= c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (((\x. (((MEM x) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ (((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) x') ==> F)
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c==> * / c/\ cMEM b0 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c\/ cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cMEM b0 cfilter / c~ cMEM b1 f1 cflatten f6 f7 cF
- (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c/\ cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> c==> cfinal_list f0 f1 cflag_list f0 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x), ((\y. ((((l'y L) r) x) = y)) y) |- (((\y. ((((l'y L) r) x) = y)) y) /\ (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> * / c= cl'y f0 f1 f2 b0 f4 c/\ * / c= cl'y f0 f1 f2 b0 f4 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cflatten f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f3 f4 f5 c==> c= cl'y f0 f3 f2 f6 c==> c= cztrans f0 f1 f3 f2 cNUMERAL c_0 f4 c==> c/\ call * part cf_last f0 f1 c/\ call * part cloop_list f0 f1 ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cMEM f2 clist_of_darts f0 c==> cMEM f3 f1 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f1 c==> call / c~ c= b0 cNIL f1 c==> cmarked_list f0 f1 f3 f2 cuniq cflatten cFST cCOND cfinal_list f0 f3 c, f1 f3 c, cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2 cNIL f1 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2 cNIL cSND csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2
+ |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) x)
T * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cuniq cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 f3
- |- ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)
T * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
+ (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) /\ (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))
T c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> cMEM f2 f6 c==> cmarked_list f0 f6 f2 f1 c/\ cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f2 c==> c= cnext_el f2 f4 f3 c==> c==> c~ cfinal_list f0 f2 cMEM f3 f2 c==> c==> c~ cfinal_list f0 f2 cMEM f5 f2 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
+ (uniq (flatten N)) |- ((uniq (flatten N)) = T)
T c==> cuniq cflatten f0 c= cuniq cflatten f0 cT
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((!x'. (((\y. ((((l'y L) r) x) = y)) x') ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))) ==> ((?y. ((((l'y L) r) x) = y)) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))) = ((?y. ((((l'y L) r) x) = y)) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c= c==> ! c==> * / c= cl'y f0 f1 f2 b1 b0 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0 c==> c? / c= cl'y f0 f1 f2 b0 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0 c==> c? / c= cl'y f0 f1 f2 b0 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (~ ((has (\x. ((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c~ chas / cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cfilter / c~ cMEM b0 f1 cflatten f6
+ |- ((\x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) x)
T * / ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 f3
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f6 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f2 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2
- |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- (~ ((final_list L) r)), ((~ ((final_list L) r)) ==> ((MEM y) r)) |- (((MEM y) r) = T)
T c==> c~ cfinal_list f0 f1 c==> c==> c~ cfinal_list f0 f1 cMEM f2 f1 c= cMEM f2 f1 cT
- |- ((((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))) = T)
T c= c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cT
- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) |- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1)
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), ((MEM d) (flatten N)) |- (((MEM d) (flatten N)) /\ ((((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))) = T))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cMEM f2 cflatten f0 c/\ cMEM f2 cflatten f0 c= cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0 cT
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
+ (uniq (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) |- ((~ ((has (\x. ((MEM x) ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1)))) = ((~ ((has (\x. ((MEM x) ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1)))) /\ (uniq (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1)))))
T c==> cuniq cFST csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 c= c~ chas / cMEM b0 cAPPEND cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 cfilter / c~ cMEM b1 f1 cflatten f4 cFST csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 c/\ c~ chas / cMEM b0 cAPPEND cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 cfilter / c~ cMEM b1 f1 cflatten f4 cFST csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 cuniq cFST csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3
+ |- ((uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))) = (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c= cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cuniq cflatten cntrans f0 f2 f1 f3 cNUMERAL cBIT1 c_0
+ |- (((!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) ==> ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)) = ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1))
T c= c==> ! ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4
- |- (MAP = map)
T c= part cMAP part cmap
- |- (LENGTH = sizel)
T c= part cLENGTH part csizel
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f4 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cmarked_list f0 f4 f1 f2 cuniq cflatten cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> cMEM f2 f3 c==> cMEM f3 f1 c==> cnormal_list f0 f1 c==> cmarked_list f0 f1 f3 f2 c==> c= cnext_el f3 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c==> c==> cfinal_list f0 f3 cflag_list f0 f1 c==> c==> c~ cfinal_list f0 f3 cs_flag_list f0 f1 f3 f2 c==> c= cl'y f0 f3 f2 f4 c==> c= cprev_el f3 f5 f6 c==> c= cztrans f0 f1 f3 f2 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f3 c, f1 f3 c, cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 cl'y f0 f3 f2 cl'y f0 f3 f2 cprev_el f3 cl'z f0 f1 f3 f2 cNIL f1 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 cl'y f0 f3 f2 cl'y f0 f3 f2 cprev_el f3 cl'z f0 f1 f3 f2 cNIL cSND csplit_normal_list f0 f3 cfind_face f0 cl'y f0 f3 f2 cl'y f0 f3 f2 cprev_el f3 cl'z f0 f1 f3 f2
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM x') (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))), ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F) ==> F)
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cMEM f7 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c==> cMEM f7 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c==> cmarked_list f0 f6 f1 f4 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f6 f1 f4 c/\ c~ cfinal_list f0 f1 c/\ cMEM f7 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f4 cl'y f0 f1 f4 cprev_el f1 cl'z f0 f6 f1 f4 cMEM f7 cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f4 cl'y f0 f1 f4 cprev_el f1 cl'z f0 f6 f1 f4 cF cF
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2
+ ((?x. (((MEM x) s) /\ (a x))) = ((has a) s)) |- (((has a) s) = (?x. (((MEM x) s) /\ (a x))))
T c==> c= c? / c/\ cMEM b0 f0 * f1 b0 chas f1 f0 c= chas f1 f0 c? / c/\ cMEM b0 f0 * f1 b0
+ |- ((\s. (((uniq (flatten N)) /\ ((MEM s) N)) ==> (uniq s))) r)
T * / c==> c/\ cuniq cflatten f0 cMEM b0 f0 cuniq b0 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))), ((((marked_list L) N) r) x) |- (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3 c==> cmarked_list f0 f1 f2 f3 cuniq cflatten cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0
+ |- (((!ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ==> ((\ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ss1)) = ((\ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ss1))
T c= c==> ! ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 * / ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 f0 * / ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 f0
+ (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) /\ (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f4 c/\ c= cprev_el f1 f2 f3 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c/\ c==> cfinal_list f0 f1 cflag_list f0 f3 c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ |- ((\L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s)))) N)
T * / ! c==> c/\ cuniq cflatten b0 cMEM b1 b0 cuniq b1 f0
+ |- (((has a) s) = (?x. (((MEM x) s) /\ (a x))))
T c= chas f0 f1 c? / c/\ cMEM b0 f1 * f0 b0
+ |- ((\N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))) N)
T * / ! ! ! c= cztrans f0 b0 b1 b2 b3 cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((((marked_list L) N) r) x) |- (((normal_list L) N) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> cMEM f1 clist_of_darts f0 c==> cMEM f2 f6 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f0 f6 f2 f1 c==> cnormal_list f0 f6 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
- |- (T = ((~ (!A. (A \/ (~ A)))) ==> F))
T c= cT c==> c~ ! c\/ b0 c~ b0 cF
- (~ ((final_list L) r)), ((~ ((final_list L) r)) ==> ((MEM y) r)) |- ((MEM y) r)
T c==> c~ cfinal_list f0 f1 c==> c==> c~ cfinal_list f0 f1 cMEM f2 f1 cMEM f2 f1
- |- (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
+ |- (((!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) ==> ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) (NUMERAL _0)))) = ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) (NUMERAL _0))))
T c= c==> ! ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cflatten f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f3 f4 f5 c==> c= cl'y f0 f3 f2 f6 c==> c= cztrans f0 f1 f3 f2 cNUMERAL c_0 f4 c==> cMEM f2 clist_of_darts f0 c==> cMEM f3 f1 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f1 c==> cmarked_list f0 f1 f3 f2 c==> call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f3 c==> c= cnext_el f3 f5 f4 c==> c==> c~ cfinal_list f0 f3 cMEM f4 f3 c==> c==> c~ cfinal_list f0 f3 cMEM f6 f3 cuniq cflatten cFST cCOND cfinal_list f0 f3 c, f1 f3 c, cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2 cNIL f1 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2 cNIL cSND csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2
+ (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) /\ ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))
T c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f4 c/\ call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4
- |- (((!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) ==> ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)) = ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i))
T c= c==> ! c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1)))))))
T c==> cuniq cflatten f0 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f1 f2 f5 f6 c==> c= cl'z f1 f0 f2 f5 f3 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f5 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 f4 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 f4 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 f4
+ (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> c==> cfinal_list f0 f1 cflag_list f0 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f4 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cmarked_list f0 f4 f1 f2 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f4 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2
+ |- (((!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))) ==> ((\s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))) s2)) = ((\s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))) s2))
T c= c==> ! c= cuniq ccat f0 b0 c/\ cuniq f0 c/\ c~ chas / cMEM b1 f0 b0 cuniq b0 * / c= cuniq ccat f0 b0 c/\ cuniq f0 c/\ c~ chas / cMEM b1 f0 b0 cuniq b0 f1 * / c= cuniq ccat f0 b0 c/\ cuniq f0 c/\ c~ chas / cMEM b1 f0 b0 cuniq b0 f1
- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))) = (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
+ (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f4 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((has (\d. ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((has (\d. ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((has (\d. ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))) N))
T c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ chas / cMEM b3 cSND csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cfilter / c~ cMEM b3 b1 cflatten b0 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ chas / cMEM b3 cSND csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cfilter / c~ cMEM b3 b1 cflatten b0 f1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ chas / cMEM b3 cSND csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cfilter / c~ cMEM b3 b1 cflatten b0 f1
- |- ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)
T * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((MEM z) r)), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) /\ (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> c==> c~ cfinal_list f1 f2 cMEM f5 f2 c==> cMEM f3 clist_of_darts f1 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c/\ ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3
+ (((prev_el r) z) = z1), (((((l'z L) N) r) x) = z) |- ((uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))))) = (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> c= cprev_el f0 f1 f2 c==> c= cl'z f3 f4 f0 f5 f1 c= cuniq cflatten cFST cCOND cfinal_list f3 f0 c, f4 f0 c, cAPPEND creplace f0 cCONS cSND csplit_normal_list f3 f0 cfind_face f3 f6 f6 f2 cNIL f4 cCONS cFST csplit_normal_list f3 f0 cfind_face f3 f6 f6 f2 cNIL cSND csplit_normal_list f3 f0 cfind_face f3 f6 f6 f2 cuniq cflatten cFST cCOND cfinal_list f3 f0 c, f4 f0 c, cAPPEND creplace f0 cCONS cSND csplit_normal_list f3 f0 cfind_face f3 f6 f6 cprev_el f0 cl'z f3 f4 f0 f5 cNIL f4 cCONS cFST csplit_normal_list f3 f0 cfind_face f3 f6 f6 cprev_el f0 cl'z f3 f4 f0 f5 cNIL cSND csplit_normal_list f3 f0 cfind_face f3 f6 f6 cprev_el f0 cl'z f3 f4 f0 f5
- |- ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))
T c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0
+ |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- |- (((!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) ==> ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)) = ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1))
T c= c==> ! ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ |- (((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((has (\d. ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) ==> ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((has (\d. ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) x)) = ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((has (\d. ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) x))
T c= c==> ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ chas / cMEM b1 cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cfilter / c~ cMEM b1 f2 cflatten f1 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ chas / cMEM b1 cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cfilter / c~ cMEM b1 f2 cflatten f1 f3 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ chas / cMEM b1 cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cfilter / c~ cMEM b1 f2 cflatten f1 f3
+ |- (((!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) ==> ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N)) = ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N))
T c= c==> ! ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1
- |- (((!x'. (((\y. ((((l'y L) r) x) = y)) x') ==> (?y. ((((l'y L) r) x) = y)))) ==> ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y)))) = ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y))))
T c= c==> ! c==> * / c= cl'y f0 f1 f2 b1 b0 c? / c= cl'y f0 f1 f2 b1 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
+ (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))
T c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f4 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4
- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- ((((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))) = (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c= c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f3 f4 f5 c==> c= cl'y f1 f3 f2 f6 c==> c= cztrans f1 f0 f3 f2 cNUMERAL c_0 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f3 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f3 f2 cuniq cflatten cFST cCOND cfinal_list f1 f3 c, f0 f3 c, cAPPEND creplace f3 cCONS cSND csplit_normal_list f1 f3 cfind_face f1 f6 f6 cprev_el f3 cl'z f1 f0 f3 f2 cNIL f0 cCONS cFST csplit_normal_list f1 f3 cfind_face f1 f6 f6 cprev_el f3 cl'z f1 f0 f3 f2 cNIL cSND csplit_normal_list f1 f3 cfind_face f1 f6 f6 cprev_el f3 cl'z f1 f0 f3 f2
+ (uniq (flatten N)), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N) |- (((~ ((has (\x. ((MEM x) ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1)))) /\ (uniq (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1)))) = ((~ ((has (\x. ((MEM x) (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))))) (flatten ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) /\ (uniq (flatten ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))))
T c==> cuniq cflatten f0 c==> cMEM f1 f0 c==> call / c~ c= b0 cNIL f0 c= c/\ c~ chas / cMEM b0 cAPPEND cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 cfilter / c~ cMEM b1 f1 cflatten f0 cFST csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 cuniq cFST csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 c/\ c~ chas / cMEM b0 cflatten creplace f1 cCONS cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 cNIL f0 cflatten cCONS cFST csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 cNIL cuniq cflatten cCONS cFST csplit_normal_list f2 f1 cfind_face f2 f3 f3 f4 cNIL
- |- ((!A'. (A' \/ (~ A))) = ((!A. A) \/ (~ A)))
T c= ! c\/ b0 c~ f0 c\/ ! b0 c~ f0
+ (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))
T c==> cuniq cflatten f0 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f1 f2 f5 f6 c==> c= cztrans f1 f0 f2 f5 cNUMERAL c_0 f3 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f5 c==> c==> c~ cfinal_list f1 f2 cMEM f3 f2 c==> c==> c~ cfinal_list f1 f2 cMEM f6 f2 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5
- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)) |- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))
T c==> c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4 c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
+ |- (((!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) ==> ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)) = ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f))
T c= c==> ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
- |- (((!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ==> ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)) = ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1))
T c= c==> ! ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((final_list L) r) \/ (~ ((final_list L) r))), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((final_list L) r) \/ (~ ((final_list L) r))) /\ (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((cat (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))))))
T c==> cuniq cflatten f0 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f1 f2 f5 f6 c==> c= cl'z f1 f0 f2 f5 f3 c==> c\/ cfinal_list f1 f2 c~ cfinal_list f1 f2 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f5 c/\ c\/ cfinal_list f1 f2 c~ cfinal_list f1 f2 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, ccat creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 f4 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 f4 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 f4
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ |- ((\d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))) ==> F)))))) x')
T * / ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ cMEM b0 cFST csplit_normal_list b1 b3 cfind_face b1 cl'y b1 b3 b4 cl'y b1 b3 b4 cprev_el b3 cl'z b1 b2 b3 b4 cMEM b0 cfilter / c~ cMEM b5 b3 cflatten b2 cF f0
+ |- (((!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)))))) ==> ((\d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)))))) x')) = ((\d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)))))) x'))
T c= c==> ! ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ cMEM b0 cFST csplit_normal_list b1 b3 cfind_face b1 cl'y b1 b3 b4 cl'y b1 b3 b4 cprev_el b3 cl'z b1 b2 b3 b4 cMEM b0 cSND csplit_normal_list b1 b3 cfind_face b1 cl'y b1 b3 b4 cl'y b1 b3 b4 cprev_el b3 cl'z b1 b2 b3 b4 cF * / ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ cMEM b0 cFST csplit_normal_list b1 b3 cfind_face b1 cl'y b1 b3 b4 cl'y b1 b3 b4 cprev_el b3 cl'z b1 b2 b3 b4 cMEM b0 cSND csplit_normal_list b1 b3 cfind_face b1 cl'y b1 b3 b4 cl'y b1 b3 b4 cprev_el b3 cl'z b1 b2 b3 b4 cF f0 * / ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ cMEM b0 cFST csplit_normal_list b1 b3 cfind_face b1 cl'y b1 b3 b4 cl'y b1 b3 b4 cprev_el b3 cl'z b1 b2 b3 b4 cMEM b0 cSND csplit_normal_list b1 b3 cfind_face b1 cl'y b1 b3 b4 cl'y b1 b3 b4 cprev_el b3 cl'z b1 b2 b3 b4 cF f0
+ (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> c==> cfinal_list f0 f1 cflag_list f0 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3
+ |- ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))) ==> F)))) N)
T * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ cMEM f1 cFST csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cMEM f1 cfilter / c~ cMEM b3 b1 cflatten b0 cF f2
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))) = T)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c= c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0 cT
+ (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f1 f6 c==> cmarked_list f0 f6 f1 f4 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> c==> c~ cfinal_list f0 f1 cMEM f2 f1 c==> c==> c~ cfinal_list f0 f1 cMEM f5 f1 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f3 f4 f5 c==> c= cl'y f1 f3 f2 f6 c==> c= cztrans f1 f0 f3 f2 cNUMERAL c_0 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f3 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f3 f2 c==> cuniq f3 c==> c= cnext_el f3 f5 f4 c==> c==> c~ cfinal_list f1 f3 cMEM f4 f3 c==> c==> c~ cfinal_list f1 f3 cMEM f6 f3 cuniq cflatten cFST cCOND cfinal_list f1 f3 c, f0 f3 c, cAPPEND creplace f3 cCONS cSND csplit_normal_list f1 f3 cfind_face f1 f6 f6 cprev_el f3 cl'z f1 f0 f3 f2 cNIL f0 cCONS cFST csplit_normal_list f1 f3 cfind_face f1 f6 f6 cprev_el f3 cl'z f1 f0 f3 f2 cNIL cSND csplit_normal_list f1 f3 cfind_face f1 f6 f6 cprev_el f3 cl'z f1 f0 f3 f2
+ |- (((!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) ==> ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)) = ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r))
T c= c==> ! ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
+ |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((has (\d. ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))) r)
T * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ chas / cMEM b2 cSND csplit_normal_list f0 b0 cfind_face f0 cl'y f0 b0 b1 cl'y f0 b0 b1 cprev_el b0 cl'z f0 f1 b0 b1 cfilter / c~ cMEM b2 b0 cflatten f1 f2
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((final_list L) r) ==> ((flag_list L) N)) /\ (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c/\ c==> cfinal_list f0 f1 cflag_list f0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f6 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f2 c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2
+ |- (?y. ((((l'y L) r) x) = y))
T c? / c= cl'y f0 f1 f2 b0
- |- ((!d. t) = t)
T c= ! f0 f0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cMEM f1 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c/\ c==> cfinal_list f0 f2 cflag_list f0 f3 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f3 f2 f1 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 cuniq cflatten cntrans f0 f3 f2 f1 cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))) = T)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c= c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
+ (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f1 f6 c==> cmarked_list f0 f6 f1 f4 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> c==> c~ cfinal_list f0 f1 cMEM f2 f1 c==> c==> c~ cfinal_list f0 f1 cMEM f5 f1 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4
+ |- ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ |- ((\r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) r)
T * / ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 f2
+ (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))))))
T c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f1 f6 c==> cmarked_list f0 f6 f1 f4 c/\ cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> c==> c~ cfinal_list f0 f1 cMEM f2 f1 c==> c==> c~ cfinal_list f0 f1 cMEM f5 f1 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4
+ |- ((\f. (!x. (((LET f) x) = (f x)))) f)
T * / ! c= cLET b0 b1 * b0 b1 f0
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c/\ c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2
+ (good_list L), ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x))) |- (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> cgood_list f0 c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 cuniq cflatten cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cflatten f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f3 f4 f5 c==> c= cl'y f0 f3 f2 f6 c==> c= cztrans f0 f1 f3 f2 cNUMERAL c_0 f4 c==> c/\ call / c~ c= b0 cNIL f1 c/\ call * part cf_last f0 f1 c/\ call * part cloop_list f0 f1 ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cMEM f2 clist_of_darts f0 c==> cMEM f3 f1 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f0 f1 f3 f2 cuniq cflatten cFST cCOND cfinal_list f0 f3 c, f1 f3 c, cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2 cNIL f1 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2 cNIL cSND csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2
- |- (((!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) ==> ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)) = ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N))
T c= c==> ! ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
+ |- (((!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) ==> ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)) = ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N))
T c= c==> ! ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
+ |- ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)
T * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
+ |- ((((uniq r) ==> (((next_el r) ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0)))) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))) = (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c= c==> c==> cuniq f0 c= cnext_el f0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cuniq cflatten cFST cCOND cfinal_list f1 f0 c, f2 f0 c, cAPPEND creplace f0 cCONS cSND csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3 cNIL f2 cCONS cFST csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3 cNIL cSND csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3 cuniq cflatten cFST cCOND cfinal_list f1 f0 c, f2 f0 c, cAPPEND creplace f0 cCONS cSND csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3 cNIL f2 cCONS cFST csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3 cNIL cSND csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((MEM x') (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x') ((filter (\d. (~ ((MEM d) r)))) (flatten N)))), ((MEM x') (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))), ((((marked_list L) N) r) x) |- F
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c\/ cMEM f7 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cMEM f7 cfilter / c~ cMEM b0 f1 cflatten f6 c==> cMEM f7 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c==> cmarked_list f0 f6 f1 f4 cF
+ |- (((((uniq (flatten N)) /\ ((MEM r) N)) ==> (uniq r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))) = (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c= c==> c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1 cuniq cflatten cFST cCOND cfinal_list f2 f1 c, f0 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4 cNIL f0 cCONS cFST csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4 cNIL cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4 cuniq cflatten cFST cCOND cfinal_list f2 f1 c, f0 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4 cNIL f0 cCONS cFST csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4 cNIL cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4
+ |- ((!N. (((uniq (flatten N)) /\ (((all (\l. (~ (l = NIL)))) N) /\ ((MEM r) N))) ==> ((uniq (flatten (((replace r) ((CONS s) NIL)) N))) = (uniq ((APPEND s) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))) = T)
T c= ! c==> c/\ cuniq cflatten b0 c/\ call / c~ c= b1 cNIL b0 cMEM f0 b0 c= cuniq cflatten creplace f0 cCONS f1 cNIL b0 cuniq cAPPEND f1 cfilter / c~ cMEM b1 f0 cflatten b0 cT
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2 cT
+ ((\y. ((((l'y L) r) x) = y)) y) |- ((((((l'y L) r) x) = y) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))) = (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c= c==> c= cl'y f0 f1 f2 f3 cuniq cflatten cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0 cuniq cflatten cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2
+ |- ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)
T * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ |- (((?y. ((((l'y L) r) x) = y)) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))) = (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c= c==> c? / c= cl'y f0 f1 f2 b0 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0 cuniq cflatten cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
- (((final_list L) r) ==> ((flag_list L) N)), ((final_list L) r) |- ((flag_list L) N)
T c==> c==> cfinal_list f0 f1 cflag_list f0 f2 c==> cfinal_list f0 f1 cflag_list f0 f2
+ |- ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L)
T * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f4 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cmarked_list f0 f4 f1 f2 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f4 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2
+ |- (((!t. ((LET_END t) = t)) ==> ((\t. ((LET_END t) = t)) t)) = ((\t. ((LET_END t) = t)) t))
T c= c==> ! c= cLET_END b0 b0 * / c= cLET_END b0 b0 f0 * / c= cLET_END b0 b0 f0
+ (~ ((final_list L) r)), (uniq (flatten N)), (good_list L), (good_list_nodes L), ((uniq (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N))) = (uniq ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (uniq (flatten (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)))
T c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cuniq cflatten creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 f4 cNIL f2 cuniq cAPPEND cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 f4 cfilter / c~ cMEM b0 f1 cflatten f2 c==> c= cprev_el f1 f5 f4 c==> c= cl'y f0 f1 f6 f3 c==> c= cl'z f0 f2 f1 f6 f5 c==> cmarked_list f0 f2 f1 f6 cuniq cflatten creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 f4 cNIL f2
+ |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)))) N))
T c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ cMEM f1 cFST csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cMEM f1 cSND csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cF * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ cMEM f1 cFST csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cMEM f1 cSND csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cF f2 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ cMEM f1 cFST csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cMEM f1 cSND csplit_normal_list f0 b1 cfind_face f0 cl'y f0 b1 b2 cl'y f0 b1 b2 cprev_el b1 cl'z f0 b0 b1 b2 cF f2
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
+ |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))) ==> ((~ ((has (\x. ((MEM x) ((APPEND (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1)))) /\ (uniq (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1)))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f6 f1 f4 c~ cfinal_list f0 f1 cuniq cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f4 cl'y f0 f1 f4 cprev_el f1 cl'z f0 f6 f1 f4 c/\ c~ chas / cMEM b0 cAPPEND cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cfilter / c~ cMEM b1 f1 cflatten f6 cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cuniq cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3
+ |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))) = ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))))
T c= c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0
+ |- (((!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) ==> ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i)) = ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i))
T c= c==> ! c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4
+ (uniq (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) |- ((uniq (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) = T)
T c==> cuniq cFST csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 c= cuniq cFST csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 cT
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
- (~ ((final_list L) r)), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) |- ((~ ((final_list L) r)) /\ (((((s_flag_list L) N) r) x) = T))
T c==> c~ cfinal_list f0 f1 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 c/\ c~ cfinal_list f0 f1 c= cs_flag_list f0 f2 f1 f3 cT
+ |- (((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)) ==> ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)) x)) = ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)) x))
T c= c==> ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ cMEM f3 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cMEM f3 cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cF * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ cMEM f3 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cMEM f3 cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cF f4 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ cMEM f3 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cMEM f3 cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cF f4
+ |- ((\r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))))) r)
T * / ! ! c= cytrans f0 f1 b0 b1 b2 cl'y f0 crtrans f0 f1 b0 b1 b2 b1 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((MEM z) r)), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> c==> c~ cfinal_list f1 f2 cMEM f5 f2 c==> cMEM f3 clist_of_darts f1 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c==> c~ cfinal_list f1 f2 cMEM f6 f2 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3
- |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
- |- ((?x. t) = t)
T c= c? / f0 f0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) /\ (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> cMEM f2 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f2 f1 c/\ cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f6 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f2 c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2
- |- ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)
T * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ |- ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)
T * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
- ((all (loop_list L)) N) |- (((all (loop_list L)) N) = T)
T c==> call * part cloop_list f0 f1 c= call * part cloop_list f0 f1 cT
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> cMEM f1 clist_of_darts f0 c==> cMEM f2 f6 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f0 f6 f2 f1 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f2 c==> c= cnext_el f2 f4 f3 c==> c==> c~ cfinal_list f0 f2 cMEM f3 f2 c==> c==> c~ cfinal_list f0 f2 cMEM f5 f2 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
- |- ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x)
T * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (T = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((has (\d. ((MEM d) (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))) ==> (~ ((has (\x. ((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c= cT c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f6 f1 f4 c~ cfinal_list f0 f1 c~ chas / cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f4 cl'y f0 f1 f4 cprev_el f1 cl'z f0 f6 f1 f4 cfilter / c~ cMEM b0 f1 cflatten f6 c~ chas / cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cfilter / c~ cMEM b0 f1 cflatten f6
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cflatten f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f3 f4 f5 c==> c= cl'y f0 f3 f2 f6 c==> c= cztrans f0 f1 f3 f2 cNUMERAL c_0 f4 c==> cMEM f2 clist_of_darts f0 c==> cMEM f3 f1 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f1 c==> call / c~ c= b0 cNIL f1 c==> cmarked_list f0 f1 f3 f2 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f3 c==> c= cnext_el f3 f5 f4 c==> c==> c~ cfinal_list f0 f3 cMEM f4 f3 c==> c==> c~ cfinal_list f0 f3 cMEM f6 f3 cuniq cflatten cFST cCOND cfinal_list f0 f3 c, f1 f3 c, cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2 cNIL f1 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2 cNIL cSND csplit_normal_list f0 f3 cfind_face f0 f6 f6 cprev_el f3 cl'z f0 f1 f3 f2
+ |- (((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) ==> ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) x)) = ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))) x))
T c= c==> ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cuniq cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cuniq cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 f3 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cuniq cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 f3
+ |- (((!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) ==> ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x)) = ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x))
T c= c==> ! ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f6 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f2 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) /\ ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((~ ((final_list L) r)) ==> ((MEM z) r)) ==> (((~ ((final_list L) r)) ==> ((MEM y) r)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f1 f6 c==> cmarked_list f0 f6 f1 f4 c/\ ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> c==> c~ cfinal_list f0 f1 cMEM f2 f1 c==> c==> c~ cfinal_list f0 f1 cMEM f5 f1 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4
+ (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))
T c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f6 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f2 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2
+ |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM x') (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM x') (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> F)) x)
T * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ cMEM f3 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cMEM f3 cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cF f4
- ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) |- (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) /\ ((uniq (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) = T))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c/\ c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c= cuniq cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cT
+ (good_list L), (good_list_nodes L), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> cMEM f2 f3 c==> cMEM f3 f1 c==> cnormal_list f0 f1 c==> cmarked_list f0 f1 f3 f2 c==> c= cnext_el f3 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c==> c==> cfinal_list f0 f3 cflag_list f0 f1 c==> c==> c~ cfinal_list f0 f3 cs_flag_list f0 f1 f3 f2 c==> c= cl'y f0 f3 f2 f4 c==> c= cprev_el f3 f5 f6 c==> c= cztrans f0 f1 f3 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f3 c, f1 f3 c, cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 f4 f4 cprev_el f3 cl'z f0 f1 f3 f2 cNIL f1 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 f4 f4 cprev_el f3 cl'z f0 f1 f3 f2 cNIL cSND csplit_normal_list f0 f3 cfind_face f0 f4 f4 cprev_el f3 cl'z f0 f1 f3 f2
+ |- (((!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) ==> ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L)) = ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L))
T c= c==> ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f6 f2 f1 c==> c==> cfinal_list f0 f2 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f1 f2 c==> cMEM f2 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f2 f1 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
- (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) /\ ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c/\ cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f1 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3
+ |- (((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) ==> ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) L)) = ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) L))
T c= c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cuniq cSND csplit_normal_list b0 b2 cfind_face b0 cl'y b0 b2 b3 cl'y b0 b2 b3 cprev_el b2 cl'z b0 b1 b2 b3 * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cuniq cSND csplit_normal_list b0 b2 cfind_face b0 cl'y b0 b2 b3 cl'y b0 b2 b3 cprev_el b2 cl'z b0 b1 b2 b3 f0 * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cuniq cSND csplit_normal_list b0 b2 cfind_face b0 cl'y b0 b2 b3 cl'y b0 b2 b3 cprev_el b2 cl'z b0 b1 b2 b3 f0
- |- ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s)
T * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0
+ ((final_list L) r) |- (((final_list L) r) = T)
T c==> cfinal_list f0 f1 c= cfinal_list f0 f1 cT
+ |- (((!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) ==> ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)) = ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x))
T c= c==> ! c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
- ((normal_list L) N) |- (((normal_list L) N) = T)
T c==> cnormal_list f0 f1 c= cnormal_list f0 f1 cT
+ |- ((\s. (!a. ((uniq s) ==> (uniq ((filter a) s))))) (flatten N))
T * / ! c==> cuniq b0 cuniq cfilter b1 b0 cflatten f0
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L))
T c= c==> ! ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0
- (?x. (((MEM x) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ (((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))), (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((?x. (((MEM x) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ (((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) /\ F)
T c==> c? / c/\ cMEM b0 cFST csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 c\/ cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 cMEM b0 cfilter / c~ cMEM b1 f1 cflatten f4 c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f5 f3 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f4 f1 f6 f5 c==> cmarked_list f0 f4 f1 f6 c/\ c? / c/\ cMEM b0 cFST csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 c\/ cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 cMEM b0 cfilter / c~ cMEM b1 f1 cflatten f4 cF
+ (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) /\ (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> cuniq cflatten f0 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f1 f2 f5 f6 c==> c= cl'z f1 f0 f2 f5 f3 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f5 c/\ c= cl'z f1 f0 f2 f5 f3 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f5
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f6 f2 f1 c==> c==> cfinal_list f0 f2 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f1 f2 c==> cMEM f2 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f2 f1 c==> c==> cmarked_list f0 f6 f2 f1 cMEM f1 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) ==> ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r)) = ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
- |- ((!A. (A \/ (~ A))) = ((T \/ (~ T)) /\ (F \/ (~ F))))
T c= ! c\/ b0 c~ b0 c/\ c\/ cT c~ cT c\/ cF c~ cF
- (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))) = (\x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 f2 / c==> c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 f2
- |- ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)
T * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))) r)
T * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cuniq cSND csplit_normal_list f0 b0 cfind_face f0 cl'y f0 b0 b1 cl'y f0 b0 b1 cprev_el b0 cl'z f0 f1 b0 b1 f2
+ (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cmarked_list f0 f4 f1 f2 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f4 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2
+ (~ ((final_list L) r)), (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM r) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) /\ (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((cat (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f5 f6 c==> c= cl'z f0 f2 f1 f5 f3 c==> cMEM f1 f2 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f5 c/\ c~ cfinal_list f0 f1 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f2 f1 c, ccat creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4
- ((MEM x) (list_of_darts L)) |- (((MEM x) (list_of_darts L)) = T)
T c==> cMEM f0 clist_of_darts f1 c= cMEM f0 clist_of_darts f1 cT
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- |- (!z. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x), ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) /\ (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f4 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cmarked_list f0 f4 f1 f2 c==> * / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 f5 c/\ * / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 f5 cuniq cflatten cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (!z1. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f4 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cmarked_list f0 f4 f1 f2 ! c==> * / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b1 b0 cuniq cflatten cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))), ((normal_list L) N), ((((marked_list L) N) r) x) |- (uniq (flatten (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c/\ c==> cfinal_list f0 f1 cflag_list f0 f2 c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 cuniq cflatten cntrans f0 f2 f1 f3 cNUMERAL cBIT1 c_0
+ (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f3 f1 f2 c==> c==> cfinal_list f0 f1 cflag_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2
+ |- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) (((((ztrans L) N) r) x) (NUMERAL _0)))
T * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
- |- (((((l'y L) r) x) = y) = ((\y. ((((l'y L) r) x) = y)) y))
T c= c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
- |- ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)
T * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
- |- ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) /\ (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c/\ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- (!y. (((\y. ((((l'y L) r) x) = y)) y) ==> (?y. ((((l'y L) r) x) = y))))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))) = (\x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 b0 cNUMERAL c_0 f2 / c==> c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 b0 cNUMERAL c_0 f2
- |- (((!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) ==> ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)) = ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x))
T c= c==> ! ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
- |- ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)
T * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
- |- ((((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))) = T)
T c= c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 cT
- ((~ ((final_list L) r)) ==> ((MEM y) r)) |- ((~ ((final_list L) r)) ==> (((MEM y) r) = T))
T c==> c==> c~ cfinal_list f0 f1 cMEM f2 f1 c==> c~ cfinal_list f0 f1 c= cMEM f2 f1 cT
- (~ (!A. (A \/ (~ A)))) |- F
T c==> c~ ! c\/ b0 c~ b0 cF
- |- ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))
T c= csplit_normal_list f0 f1 f2 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b5 b6 cAPPEND b7 b4 cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 f3 cCONS f3 cNIL cAPPEND cCONS b0 cNIL cAPPEND cbetwn f1 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f2 f3 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f4 cnext_el f1 f3
- ((((l'y L) r) x) = y) |- ((\y. ((((l'y L) r) x) = y)) y)
T c==> c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
- |- ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- ((SUC (NUMERAL _0)) = (NUMERAL (BIT1 _0)))
T c= cSUC cNUMERAL c_0 cNUMERAL cBIT1 c_0
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((!A. ((P A) \/ Q)) = ((!A. (P A)) \/ Q))
T c= ! c\/ * f0 b0 f1 c\/ ! * f0 b0 f1
- |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) = ((~ (!A. (A \/ (~ A)))) ==> F))
T c= c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) ==> (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)))
T c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- ((~ (!A. (A \/ (~ A)))) ==> F), (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) |- (((~ (!A. (A \/ (~ A)))) ==> F) /\ ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c/\ c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- |- (((((l'y L) r) x) = y) ==> (?y. ((((l'y L) r) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- |- (((!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) ==> ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)) = ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r))
T c= c==> ! ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)
T * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- |- (((!y. (((MEM x) ((CONS y) NIL)) = (x = y))) ==> ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y)) = ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y))
T c= c==> ! c= cMEM f0 cCONS b0 cNIL c= f0 b0 * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1 * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1
- (~ ((final_list L) r)), (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((uniq (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ==> ((~ ((has (\x. ((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))) /\ (uniq ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f5 f6 c==> c= cl'z f0 f2 f1 f5 f3 c==> cmarked_list f0 f2 f1 f5 c==> cuniq cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 c/\ c~ chas / cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f4 cfilter / c~ cMEM b0 f1 cflatten f2 cuniq cfilter / c~ cMEM b0 f1 cflatten f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) /\ (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f6 f2 f1 c==> c==> cfinal_list f0 f2 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f1 f2 c==> cMEM f1 clist_of_darts f0 c==> cMEM f2 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f2 f1 c/\ cMEM f1 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) /\ (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c/\ c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- ((x = x) = T)
T c= c= f0 f0 cT
- (~ (!A. (A \/ (~ A)))) |- ((~ (!A. (A \/ (~ A)))) /\ F)
T c==> c~ ! c\/ b0 c~ b0 c/\ c~ ! c\/ b0 c~ b0 cF
- |- (((MEM x) ((CONS y) NIL)) = (x = y))
T c= cMEM f0 cCONS f1 cNIL c= f0 f1
- (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) /\ (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)))
T c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c/\ c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- |- (((!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ==> ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2)) = ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2))
T c= c==> ! c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4 * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), ((MEM d) (list_of_darts L)) |- ((MEM ((SND d) , (FST d))) (list_of_darts L))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0
- ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z)
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4
- |- (((!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) ==> ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)) = ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0))
T c= c==> ! c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- (((final_list L) r) ==> ((flag_list L) N)) |- ((((final_list L) r) ==> ((flag_list L) N)) = T)
T c==> c==> cfinal_list f0 f1 cflag_list f0 f2 c= c==> cfinal_list f0 f1 cflag_list f0 f2 cT
- |- ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f)
T * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2
- (~ ((final_list L) r)), (uniq (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))), (uniq (flatten N)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((uniq (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ ((~ ((has (\x. ((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))) /\ (uniq ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cuniq cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 c==> cuniq cflatten f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f5 f3 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f4 f1 f6 f5 c==> cmarked_list f0 f4 f1 f6 c/\ cuniq cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 c/\ c~ chas / cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 cfilter / c~ cMEM b0 f1 cflatten f4 cuniq cfilter / c~ cMEM b0 f1 cflatten f4
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((\d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) d)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 * / c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 f1
- |- ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)
T * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
- |- (((!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) ==> ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f)) = ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f))
T c= c==> ! ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2 * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2
- (~ ((final_list L) r)), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) |- ((((s_flag_list L) N) r) x)
T c==> c~ cfinal_list f0 f1 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 cs_flag_list f0 f2 f1 f3
- |- (((!x'. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) x') ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))) ==> ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))) = ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))))
T c= c==> ! c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b1 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b1 c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- (((!x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) ==> ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x)) = ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x))
T c= c==> ! ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((\d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) d)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 * / c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 f2
- |- (((!L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) ==> ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)) = ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L))
T c= c==> ! ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- |- (((!x. (((MEM x) (rev s)) = ((MEM x) s))) ==> ((\x. (((MEM x) (rev s)) = ((MEM x) s))) x)) = ((\x. (((MEM x) (rev s)) = ((MEM x) s))) x))
T c= c==> ! c= cMEM b0 crev f0 cMEM b0 f0 * / c= cMEM b0 crev f0 cMEM b0 f0 f1 * / c= cMEM b0 crev f0 cMEM b0 f0 f1
- |- (((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) ==> ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)) = ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s))
T c= c==> ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
- ((\y. ((((l'y L) r) x) = y)) y) |- ((((((l'y L) r) x) = y) ==> (?y. ((((l'y L) r) x) = y))) = (?y. ((((l'y L) r) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c= c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- ((~ (!A. (A \/ (~ A)))) ==> F), (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) /\ ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c/\ c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- |- (F = (~ T))
T c= cF c~ cT
- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) /\ (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c/\ * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- ((((\y. ((((l'y L) r) x) = y)) y) ==> (?y. ((((l'y L) r) x) = y))) = T)
T c= c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0 cT
- |- ((T \/ t) = T)
T c= c\/ cT f0 cT
- |- ((!A. (P \/ (Q A))) = (P \/ (!A. (Q A))))
T c= ! c\/ f0 * f1 b0 c\/ f0 ! * f1 b0
- |- ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L)
T * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- (((final_list L) r) ==> ((flag_list L) N)), ((final_list L) r) |- (((final_list L) r) /\ (((flag_list L) N) = T))
T c==> c==> cfinal_list f0 f1 cflag_list f0 f2 c==> cfinal_list f0 f1 c/\ cfinal_list f0 f1 c= cflag_list f0 f2 cT
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- |- (((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))) = T)
T c= c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0 cT
- |- (((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) ==> (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F))) = (((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)))
T c= c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- |- ((LENGTH = sizel) /\ ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))))
T c/\ c= part cLENGTH part csizel c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- (?x. (((MEM x) (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) /\ (((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) \/ ((MEM x) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))), (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- F
T c==> c? / c/\ cMEM b0 cFST csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 c\/ cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 cMEM b0 cfilter / c~ cMEM b1 f1 cflatten f4 c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f5 f3 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f4 f1 f6 f5 c==> cmarked_list f0 f4 f1 f6 cF
- |- (T = ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0))))
T c= cT c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
- |- (((!L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) ==> ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L)) = ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L))
T c= c==> ! ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0 * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0
- |- ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)
T * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
- ((~ (!A. (A \/ (~ A)))) ==> F) |- (((~ (!A. (A \/ (~ A)))) ==> F) /\ ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c/\ c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- |- (!z1. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- (((MEM x) (rev s)) = ((MEM x) s))
T c= cMEM f0 crev f1 cMEM f0 f1
- |- ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x)
T * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- ((~ ((final_list L) r)) ==> ((MEM y) r)) |- (((~ ((final_list L) r)) ==> ((MEM y) r)) = T)
T c==> c==> c~ cfinal_list f0 f1 cMEM f2 f1 c= c==> c~ cfinal_list f0 f1 cMEM f2 f1 cT
- |- ((F \/ t) = t)
T c= c\/ cF f0 f0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), ((MEM d) (flatten N)) |- (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0
- ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) |- ((~ ((final_list L) r)) ==> (((((s_flag_list L) N) r) x) = T))
T c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 c==> c~ cfinal_list f0 f1 c= cs_flag_list f0 f2 f1 f3 cT
- |- ((!A. (P A)) = ((P T) /\ (P F)))
T c= ! * f0 b0 c/\ * f0 cT * f0 cF
- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) /\ (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c/\ * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((uniq (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) = T))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c= cuniq cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cT
- (~ ((final_list L) r)), ((~ ((final_list L) r)) ==> ((MEM y) r)) |- ((~ ((final_list L) r)) /\ (((MEM y) r) = T))
T c==> c~ cfinal_list f0 f1 c==> c==> c~ cfinal_list f0 f1 cMEM f2 f1 c/\ c~ cfinal_list f0 f1 c= cMEM f2 f1 cT
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- (good_list L), (good_list_nodes L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cnormal_list f0 f1 c==> cmarked_list f0 f1 f2 f3 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f1 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- ((APPEND = cat) /\ (ALL = all))
T c/\ c= part cAPPEND part ccat c= part cALL part call
- |- (FILTER = filter)
T c= part cFILTER part cfilter
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((MEM y) r)), ((~ ((final_list L) r)) ==> ((MEM z) r)), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((~ ((final_list L) r)) ==> ((MEM y) r)) /\ (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> c==> c~ cfinal_list f1 f2 cMEM f6 f2 c==> c==> c~ cfinal_list f1 f2 cMEM f5 f2 c==> cMEM f3 clist_of_darts f1 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c/\ c==> c~ cfinal_list f1 f2 cMEM f6 f2 cuniq cflatten cFST cCOND cfinal_list f1 f2 c, f0 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3
- |- (((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))) ==> ((~ ((has (\x. ((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))) /\ (uniq ((filter (\d. (~ ((MEM d) r)))) (flatten N))))) = ((~ ((has (\x. ((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))) /\ (uniq ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c= c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cuniq cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 c/\ c~ chas / cMEM b0 cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 f5 cfilter / c~ cMEM b0 f2 cflatten f1 cuniq cfilter / c~ cMEM b0 f2 cflatten f1 c/\ c~ chas / cMEM b0 cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 f5 cfilter / c~ cMEM b0 f2 cflatten f1 cuniq cfilter / c~ cMEM b0 f2 cflatten f1
- ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) = T)
T c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c= cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 cT
- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)) |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c==> c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) = ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z))
T c= c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4
- (uniq ((find_face L) x)) |- ((uniq ((find_face L) x)) = T)
T c==> cuniq cfind_face f0 f1 c= cuniq cfind_face f0 f1 cT
- ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) = T)
T c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c= cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 cT
- |- (((\N'. (f N')) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (((!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) ==> ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)) = ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r))
T c= c==> ! ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
- |- ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2)
T * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4
- ((all (f_last L)) N) |- (((all (f_last L)) N) = T)
T c==> call * part cf_last f0 f1 c= call * part cf_last f0 f1 cT
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (((uniq (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) ==> ((~ ((has (\x. ((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))) /\ (uniq ((filter (\d. (~ ((MEM d) r)))) (flatten N))))) = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (uniq (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))) ==> ((~ ((has (\x. ((MEM x) (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))))) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))) /\ (uniq ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c= c==> cuniq cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 c/\ c~ chas / cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cfilter / c~ cMEM b0 f1 cflatten f6 cuniq cfilter / c~ cMEM b0 f1 cflatten f6 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f6 f1 f4 c~ cfinal_list f0 f1 cuniq cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f4 cl'y f0 f1 f4 cprev_el f1 cl'z f0 f6 f1 f4 c/\ c~ chas / cMEM b0 cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f3 cfilter / c~ cMEM b0 f1 cflatten f6 cuniq cfilter / c~ cMEM b0 f1 cflatten f6
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)), (((final_list L) r) ==> ((flag_list L) N)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 f3 f4 c==> c= cl'y f0 f2 f1 f5 c==> c= cztrans f0 f6 f2 f1 cNUMERAL c_0 f3 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f6 f2 f1 c==> c==> cfinal_list f0 f2 cflag_list f0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f1 f2 c==> cMEM f1 clist_of_darts f0 c==> cMEM f2 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f2 f1 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f6 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL f6 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f6 f2 f1
- |- ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y)
T * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- (((MEM d) (list_of_darts L)) ==> (((MEM ((SND d) , (FST d))) (list_of_darts L)) = T))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 c= cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
- (~ ((final_list L) r)), ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) |- (((((s_flag_list L) N) r) x) = T)
T c==> c~ cfinal_list f0 f1 c==> c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 c= cs_flag_list f0 f2 f1 f3 cT
- |- (((~ (!A. (A \/ (~ A)))) ==> F) = (!A. (A \/ (~ A))))
T c= c==> c~ ! c\/ b0 c~ b0 cF ! c\/ b0 c~ b0
- ((~ (!A. (A \/ (~ A)))) ==> F) |- ((((~ (!A. (A \/ (~ A)))) ==> F) ==> ((~ (!A. (A \/ (~ A)))) ==> F)) ==> ((~ (!A. (A \/ (~ A)))) ==> F))
T c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c==> c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF c==> c~ ! c\/ b0 c~ b0 cF
- (good_list L), (good_list_nodes L) |- ((good_list_nodes L) /\ (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> ((((final_list L) r) ==> ((flag_list L) N)) ==> (((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (uniq (flatten (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 cuniq cflatten cFST cCOND cfinal_list f0 f2 c, f1 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3
- ((\y. ((((l'y L) r) x) = y)) y) |- (((\y. ((((l'y L) r) x) = y)) y) /\ (?y. ((((l'y L) r) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c/\ * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- |- (~ (~ T))
T c~ c~ cT
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), ((MEM d) (list_of_darts L)) |- (((MEM d) (list_of_darts L)) /\ (((MEM ((SND d) , (FST d))) (list_of_darts L)) = T))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 c/\ cMEM f1 clist_of_darts f0 c= cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
- ((((l'y L) r) x) = y) |- (((((l'y L) r) x) = y) /\ (?y. ((((l'y L) r) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c/\ c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- |- (((!x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) ==> ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x)) = ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x))
T c= c==> ! ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0 * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0
- |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- (((MEM d) (flatten N)) ==> ((((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))) = T))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cMEM f2 cflatten f0 c= cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0 cT
- (uniq (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) |- ((uniq (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) = T)
T c==> cuniq cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 c= cuniq cSND csplit_normal_list f0 f1 cfind_face f0 f2 f2 f3 cT
- |- ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)
T * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
