N List_hypermap.uniq_find_face
C |- (!d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1
D TRUTH
A |- T
T cT
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D MAP
A |- ((!f. (((MAP f) NIL) = NIL)) /\ (!f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))))
T c/\ ! c= cMAP b0 cNIL cNIL ! ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2
D bool_elim
A |- (!P. (((P T) /\ (P F)) ==> (!x. (P x))))
T c==> c/\ * f0 cT * f0 cF ! * f0 b0
D Seq.cat_uniq
A |- (!s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))))
T c= cuniq ccat f0 f1 c/\ cuniq f0 c/\ c~ chas / cMEM b0 f0 f1 cuniq f1
D Seq.foldr
A |- (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))
T c/\ c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3 c= cfoldr f0 f1 cNIL f1
D List_hypermap.list_of_darts
A |- (!L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L)))
T c= clist_of_darts f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f0
D List_hypermap.list_of_faces
A |- (!L. ((list_of_faces L) = ((MAP list_pairs) L)))
T c= clist_of_faces f0 cMAP part clist_pairs f0
D List_hypermap.find_list
A |- (!h. (!t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x)))))))
T c/\ c= cfind_list cNIL f0 cNIL c= cfind_list cCONS f1 f2 f0 cCOND cMEM f0 f1 f1 cfind_list f2 f0
D List_hypermap.find_face
A |- (!L. (!d. (((find_face L) d) = ((find_list (list_of_faces L)) d))))
T c= cfind_face f0 f1 cfind_list clist_of_faces f0 f1
+ |- (((!L. (((MAP list_pairs) L) = (list_of_faces L))) ==> ((\L. (((MAP list_pairs) L) = (list_of_faces L))) L)) = ((\L. (((MAP list_pairs) L) = (list_of_faces L))) L))
T c= c==> ! c= cMAP part clist_pairs b0 clist_of_faces b0 * / c= cMAP part clist_pairs b0 clist_of_faces b0 f0 * / c= cMAP part clist_pairs b0 clist_of_faces b0 f0
+ |- (((!s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) ==> ((\s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) s1)) = ((\s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) s1))
T c= c==> ! ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 * / ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 f0 * / ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 f0
- (((MEM d) (list_pairs h)) = x) |- ((((MEM d) (list_pairs h)) = x) /\ (?x. (((MEM d) (list_pairs h)) = x)))
T c==> c= cMEM f0 clist_pairs f1 f2 c/\ c= cMEM f0 clist_pairs f1 f2 c? / c= cMEM f0 clist_pairs f1 b0
- (L = L1) |- (((uniq (list_of_darts L1)) ==> (uniq ((find_face L1) d))) = ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))
T c==> c= f0 f1 c= c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2
+ |- ((((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = (uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t)))) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> q')))) = (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> q'))))
T c= c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c==> c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 f3 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 f3 c==> c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 f3 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 f3
+ |- (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))
T c==> c= cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 f4 c= c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 f4
+ (uniq (list_pairs h)), ((uniq (list_pairs h)) /\ ((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t)))), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))
T c==> cuniq clist_pairs f0 c==> c/\ cuniq clist_pairs f0 c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
- |- (!L1. (((\L1. (L = L1)) L1) ==> ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c==> * / c= f0 b0 f1 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2
+ (uniq (list_pairs h)) |- ((uniq (((COND F) (list_pairs h)) ((find_face t) d))) = ((uniq (((COND T) (list_pairs h)) ((find_face t) d))) /\ (uniq (((COND F) (list_pairs h)) ((find_face t) d)))))
T c==> cuniq clist_pairs f0 c= cuniq cCOND cF clist_pairs f0 cfind_face f1 f2 c/\ cuniq cCOND cT clist_pairs f0 cfind_face f1 f2 cuniq cCOND cF clist_pairs f0 cfind_face f1 f2
- |- ((((MEM d) (list_pairs h)) = x) ==> (?x. (((MEM d) (list_pairs h)) = x)))
T c==> c= cMEM f0 clist_pairs f1 f2 c? / c= cMEM f0 clist_pairs f1 b0
- ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cT * f0 cF c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
+ (~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))), (uniq (list_pairs h)), ((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t))), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))
T c==> c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 c==> cuniq clist_pairs f0 c==> c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ |- ((uniq NIL) ==> (uniq ((find_list (list_of_faces NIL)) d)))
T c==> cuniq cNIL cuniq cfind_list clist_of_faces cNIL f0
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (((!f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) ==> ((\f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) f)) = ((\f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) f))
T c= c==> ! ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 * / ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 f0 * / ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 f0
+ |- (((uniq (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL)) ==> (uniq ((find_face NIL) d))) = ((uniq (list_of_darts NIL)) ==> (uniq ((find_face NIL) d))))
T c= c==> cuniq cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cuniq cfind_face cNIL f0 c==> cuniq clist_of_darts cNIL cuniq cfind_face cNIL f0
- |- (((!t'. (!e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> f2 c= clist_pairs f1 b0 c==> c==> c~ f2 c= cfind_list cMAP part clist_pairs f3 f0 b1 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f3 f0 cCOND f2 b0 b1 * / ! c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> f2 c= clist_pairs f1 b0 c==> c==> c~ f2 c= cfind_list cMAP part clist_pairs f3 f0 b1 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f3 f0 cCOND f2 b0 b1 f4 * / ! c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> f2 c= clist_pairs f1 b0 c==> c==> c~ f2 c= cfind_list cMAP part clist_pairs f3 f0 b1 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f3 f0 cCOND f2 b0 b1 f4
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (list_of_darts t)) /\ (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c/\ cuniq clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ (((MAP list_pairs) L) = (list_of_faces L)) |- ((list_of_faces L) = ((MAP list_pairs) L))
T c==> c= cMAP part clist_pairs f0 clist_of_faces f0 c= clist_of_faces f0 cMAP part clist_pairs f0
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ ((uniq (list_pairs h)) /\ ((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t)))), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))
T c==> c/\ cuniq clist_pairs f0 c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ |- ((\p'. (!q'. (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q')))))) p')
T * / ! c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 b0 c==> c==> b0 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 b1 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> b0 b1 f3
- |- ((((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (?x. (((MEM d) (list_pairs h)) = x))) = T)
T c= c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c? / c= cMEM f0 clist_pairs f1 b0 cT
+ |- ((\q'. (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))) q')
T * / c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 b0 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 b0 f4
+ ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L)) |- ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))
T c==> c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 clist_of_darts f0 c= clist_of_darts f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f0
+ |- (((MAP list_pairs) L) = (list_of_faces L))
T c= cMAP part clist_pairs f0 clist_of_faces f0
+ |- (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_list ((CONS (list_pairs h)) ((MAP list_pairs) t))) d))))
T c= c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cfind_list cCONS clist_pairs f0 cMAP part clist_pairs f1 f2
- ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (list_pairs h)) ==> (((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq clist_pairs f2 c==> c/\ c~ chas / cMEM b0 clist_pairs f2 clist_of_darts f0 cuniq clist_of_darts f0 cuniq cCOND cMEM f1 clist_pairs f2 clist_pairs f2 cfind_face f0 f1
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))), ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((\x. (((MEM d) (list_pairs h)) = x)) x) /\ (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c==> * / c= cMEM f2 clist_pairs f0 b0 f3 c/\ * / c= cMEM f2 clist_pairs f0 b0 f3 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
- |- ((((~ ((MEM d) (list_pairs h))) ==> (((find_list ((MAP list_pairs) t)) d) = ((find_list ((MAP list_pairs) t)) d))) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))))
T c= c==> c==> c~ cMEM f0 clist_pairs f1 c= cfind_list cMAP part clist_pairs f2 f0 cfind_list cMAP part clist_pairs f2 f0 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0
- |- ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)
T * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
- |- ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e')))))
T c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> f2 c= clist_pairs f1 f3 c==> c==> c~ f2 c= cfind_list cMAP part clist_pairs f4 f0 f5 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f4 f0 cCOND f2 f3 f5
+ (uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) |- ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) /\ ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))))
T c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c/\ cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2
+ |- ((\q'. (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))) q')
T * / c==> c= cuniq * * / / ccat clist_pairs b1 b2 f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 b0 c= c==> cuniq * * / / ccat clist_pairs b1 b2 f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 b0 f4
- (L = L1) |- (((uniq (list_of_darts L1)) ==> (uniq ((find_face L1) d))) = ((uniq (list_of_darts L1)) ==> (uniq ((find_face L) d))))
T c==> c= f0 f1 c= c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c==> cuniq clist_of_darts f1 cuniq cfind_face f0 f2
- |- (((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))) = T)
T c= c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 cT
+ |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- |- ((\g'. (!t'. (!e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cMEM f0 clist_pairs f1 b0 c==> c==> b0 c= clist_pairs f1 b1 c==> c==> c~ b0 c= cfind_list cMAP part clist_pairs f2 f0 b2 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND b0 b1 b2 f3
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (((COND T) (list_pairs h)) ((find_face t) d))) /\ (uniq (((COND F) (list_pairs h)) ((find_face t) d))))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c/\ cuniq cCOND cT clist_pairs f0 cfind_face f1 f2 cuniq cCOND cF clist_pairs f0 cfind_face f1 f2
+ |- (((!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))) ==> ((\s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))) s2)) = ((\s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))) s2))
T c= c==> ! c= cuniq ccat f0 b0 c/\ cuniq f0 c/\ c~ chas / cMEM b1 f0 b0 cuniq b0 * / c= cuniq ccat f0 b0 c/\ cuniq f0 c/\ c~ chas / cMEM b1 f0 b0 cuniq b0 f1 * / c= cuniq ccat f0 b0 c/\ cuniq f0 c/\ c~ chas / cMEM b1 f0 b0 cuniq b0 f1
+ |- ((\d. (((find_face L) d) = ((find_list (list_of_faces L)) d))) d)
T * / c= cfind_face f0 b0 cfind_list clist_of_faces f0 b0 f1
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- ((\x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x))))) x)
T * / c/\ c= cfind_list cNIL b0 cNIL c= cfind_list cCONS f0 f1 b0 cCOND cMEM b0 f0 f0 cfind_list f1 b0 f2
+ |- ((((foldr f) z0) NIL) = z0)
T c= cfoldr f0 f1 cNIL f1
+ |- (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> q')))
T c==> c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 f3 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 f3
+ |- (((uniq (((COND T) (list_pairs h)) ((find_face t) d))) /\ (uniq (((COND F) (list_pairs h)) ((find_face t) d)))) ==> (!x. (uniq (((COND x) (list_pairs h)) ((find_face t) d)))))
T c==> c/\ cuniq cCOND cT clist_pairs f0 cfind_face f1 f2 cuniq cCOND cF clist_pairs f0 cfind_face f1 f2 ! cuniq cCOND b0 clist_pairs f0 cfind_face f1 f2
+ |- ((\L. (!d. (((find_list (list_of_faces L)) d) = ((find_face L) d)))) L)
T * / ! c= cfind_list clist_of_faces b0 b1 cfind_face b0 b1 f0
+ |- (((!L. ((list_of_faces L) = ((MAP list_pairs) L))) ==> ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L)) = ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L))
T c= c==> ! c= clist_of_faces b0 cMAP part clist_pairs b0 * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0 * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0
- |- ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))
T c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((\x. (uniq (((COND x) (list_pairs h)) ((find_face t) d)))) x)
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 * / cuniq cCOND b0 clist_pairs f0 cfind_face f1 f2 f3
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
- (uniq (list_of_darts t)) |- (((uniq (list_of_darts t)) ==> ((uniq ((find_face t) d)) = T)) ==> (uniq ((find_face t) d)))
T c==> cuniq clist_of_darts f0 c==> c==> cuniq clist_of_darts f0 c= cuniq cfind_face f0 f1 cT cuniq cfind_face f0 f1
+ |- ((uniq NIL) ==> (uniq ((find_list ((MAP list_pairs) NIL)) d)))
T c==> cuniq cNIL cuniq cfind_list cMAP part clist_pairs cNIL f0
- ((uniq ((find_face t) d)) = T) |- (T = (uniq ((find_face t) d)))
T c==> c= cuniq cfind_face f0 f1 cT c= cT cuniq cfind_face f0 f1
+ ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_face ((CONS h) t)) d)))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cuniq cfind_face cCONS f2 f0 f1
- (uniq (list_pairs h)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))
T c==> cuniq clist_pairs f0 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c==> c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 cuniq clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_list ((MAP list_pairs) ((CONS h) t))) d)))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cuniq cfind_list cMAP part clist_pairs cCONS f2 f0 f1
- |- (!L1. (((\L1. (L = L1)) L1) ==> (?L1. (L = L1))))
T c==> * / c= f0 b0 f1 c? / c= f0 b0
- |- ((?L1. (L = L1)) ==> ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))
T c==> c? / c= f0 b0 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1
- (uniq (list_of_darts t)) |- ((((uniq (list_of_darts t)) /\ (((uniq ((find_face t) d)) = T) ==> (uniq ((find_face t) d)))) ==> (((uniq (list_of_darts t)) ==> ((uniq ((find_face t) d)) = T)) ==> (uniq ((find_face t) d)))) = (((uniq (list_of_darts t)) ==> ((uniq ((find_face t) d)) = T)) ==> (uniq ((find_face t) d))))
T c==> cuniq clist_of_darts f0 c= c==> c/\ cuniq clist_of_darts f0 c==> c= cuniq cfind_face f0 f1 cT cuniq cfind_face f0 f1 c==> c==> cuniq clist_of_darts f0 c= cuniq cfind_face f0 f1 cT cuniq cfind_face f0 f1 c==> c==> cuniq clist_of_darts f0 c= cuniq cfind_face f0 f1 cT cuniq cfind_face f0 f1
- |- ((\L1. (L = L1)) L)
T * / c= f0 b0 f0
+ |- ((((MEM d) (list_pairs h)) = ((MEM d) (list_pairs h))) = ((\x. (((MEM d) (list_pairs h)) = x)) ((MEM d) (list_pairs h))))
T c= c= cMEM f0 clist_pairs f1 cMEM f0 clist_pairs f1 * / c= cMEM f0 clist_pairs f1 b0 cMEM f0 clist_pairs f1
+ |- (((uniq (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t))) ==> (uniq ((find_face ((CONS h) t)) d))) = ((uniq (list_of_darts ((CONS h) t))) ==> (uniq ((find_face ((CONS h) t)) d))))
T c= c==> cuniq cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f0 f1 cuniq cfind_face cCONS f0 f1 f2 c==> cuniq clist_of_darts cCONS f0 f1 cuniq cfind_face cCONS f0 f1 f2
+ |- (((uniq NIL) ==> (uniq ((find_face NIL) d))) = ((uniq (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL)) ==> (uniq ((find_face NIL) d))))
T c= c==> cuniq cNIL cuniq cfind_face cNIL f0 c==> cuniq cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cuniq cfind_face cNIL f0
- (uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) |- ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = T)
T c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cT
+ ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((MEM d) (list_pairs h)) = x)
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c= cMEM f0 clist_pairs f1 f2
+ |- ((\L. (((MAP list_pairs) L) = (list_of_faces L))) L)
T * / c= cMAP part clist_pairs b0 clist_of_faces b0 f0
+ |- (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))))
T c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2
+ |- (((uniq NIL) ==> (uniq ((find_list NIL) d))) = ((uniq NIL) ==> (uniq ((find_list ((MAP list_pairs) NIL)) d))))
T c= c==> cuniq cNIL cuniq cfind_list cNIL f0 c==> cuniq cNIL cuniq cfind_list cMAP part clist_pairs cNIL f0
+ |- (?x. (((MEM d) (list_pairs h)) = x))
T c? / c= cMEM f0 clist_pairs f1 b0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
- |- ((((\L1. (L = L1)) L1) ==> ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))) = T)
T c= c==> * / c= f0 b0 f1 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2 cT
+ (~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))), (uniq (list_pairs h)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (list_of_darts t)) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))
T c==> c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 c==> cuniq clist_pairs f0 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c==> cuniq clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ |- (((!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) ==> ((\h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) h)) = ((\h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) h))
T c= c==> ! ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 * / ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 f1 * / ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 f1
- |- (((!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))) ==> ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))) L1)) = ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))) L1))
T c= c==> ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1
+ |- ((((uniq (list_pairs h)) /\ ((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t)))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))) = ((uniq ((cat (list_pairs h)) (list_of_darts t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))))
T c= c==> c/\ cuniq clist_pairs f0 c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 cuniq clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2 c==> cuniq ccat clist_pairs f0 clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ |- ((((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = (uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t)))) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> q')))) = (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> q'))))
T c= c==> c= cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c==> c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 f3 c= c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 f3 c==> c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 f3 c= c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 f3
+ ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) /\ ((uniq (list_of_darts ((CONS h) t))) ==> (uniq ((find_face ((CONS h) t)) d))))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c/\ c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq clist_of_darts cCONS f2 f0 cuniq cfind_face cCONS f2 f0 f1
+ |- (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x)))
T c= cfind_list cCONS f0 f1 f2 cCOND cMEM f2 f0 f0 cfind_list f1 f2
+ |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)) = ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
+ |- (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> q')))
T c==> c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 f3 c= c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 f3
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
- (((MEM d) (list_pairs h)) = x) |- ((\x. (((MEM d) (list_pairs h)) = x)) x)
T c==> c= cMEM f0 clist_pairs f1 f2 * / c= cMEM f0 clist_pairs f1 b0 f2
- |- (((((MEM d) (list_pairs h)) = ((MEM d) (list_pairs h))) ==> ((((MEM d) (list_pairs h)) ==> ((list_pairs h) = t')) ==> (((~ ((MEM d) (list_pairs h))) ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) t') e'))))) = ((((MEM d) (list_pairs h)) ==> ((list_pairs h) = t')) ==> (((~ ((MEM d) (list_pairs h))) ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) t') e')))))
T c= c==> c= cMEM f0 clist_pairs f1 cMEM f0 clist_pairs f1 c==> c==> cMEM f0 clist_pairs f1 c= clist_pairs f1 f2 c==> c==> c~ cMEM f0 clist_pairs f1 c= cfind_list cMAP part clist_pairs f3 f0 f4 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f3 f0 cCOND cMEM f0 clist_pairs f1 f2 f4 c==> c==> cMEM f0 clist_pairs f1 c= clist_pairs f1 f2 c==> c==> c~ cMEM f0 clist_pairs f1 c= cfind_list cMAP part clist_pairs f3 f0 f4 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f3 f0 cCOND cMEM f0 clist_pairs f1 f2 f4
+ |- ((uniq (list_pairs h)) = (uniq (((COND T) (list_pairs h)) ((find_face t) d))))
T c= cuniq clist_pairs f0 cuniq cCOND cT clist_pairs f0 cfind_face f1 f2
- |- (((~ ((MEM d) (list_pairs h))) ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) e')))
T c==> c==> c~ cMEM f0 clist_pairs f1 c= cfind_list cMAP part clist_pairs f2 f0 f3 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND cMEM f0 clist_pairs f1 clist_pairs f1 f3
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), (((MEM d) (list_pairs h)) = x), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c= cMEM f2 clist_pairs f0 f3 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF ! * f0 b0
+ |- (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))
T c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 f4 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 f4
- |- ((~ ((MEM d) (list_pairs h))) ==> (((find_list ((MAP list_pairs) t)) d) = ((find_list ((MAP list_pairs) t)) d)))
T c==> c~ cMEM f0 clist_pairs f1 c= cfind_list cMAP part clist_pairs f2 f0 cfind_list cMAP part clist_pairs f2 f0
+ |- (!a0. (!a1. (((uniq (list_of_darts a1)) ==> (uniq ((find_face a1) d))) ==> ((uniq (list_of_darts ((CONS a0) a1))) ==> (uniq ((find_face ((CONS a0) a1)) d))))))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq clist_of_darts cCONS f2 f0 cuniq cfind_face cCONS f2 f0 f1
+ |- ((((uniq (list_of_darts NIL)) ==> (uniq ((find_face NIL) d))) /\ (!a0. (!a1. (((uniq (list_of_darts a1)) ==> (uniq ((find_face a1) d))) ==> ((uniq (list_of_darts ((CONS a0) a1))) ==> (uniq ((find_face ((CONS a0) a1)) d))))))) ==> (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c==> c/\ c==> cuniq clist_of_darts cNIL cuniq cfind_face cNIL f0 ! ! c==> c==> cuniq clist_of_darts b1 cuniq cfind_face b1 f0 c==> cuniq clist_of_darts cCONS b0 b1 cuniq cfind_face cCONS b0 b1 f0 ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0
- |- ((((MEM d) (list_pairs h)) ==> ((list_pairs h) = t')) ==> (((~ ((MEM d) (list_pairs h))) ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) t') e'))))
T c==> c==> cMEM f0 clist_pairs f1 c= clist_pairs f1 f2 c==> c==> c~ cMEM f0 clist_pairs f1 c= cfind_list cMAP part clist_pairs f3 f0 f4 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f3 f0 cCOND cMEM f0 clist_pairs f1 f2 f4
+ |- ((\L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) L)
T * / c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 f0
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
+ |- (((find_list NIL) x) = NIL)
T c= cfind_list cNIL f0 cNIL
- |- (((!e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e')))))) ==> ((\e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e')))))) e')) = ((\e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> f2 c= clist_pairs f1 f3 c==> c==> c~ f2 c= cfind_list cMAP part clist_pairs f4 f0 b0 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f4 f0 cCOND f2 f3 b0 * / c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> f2 c= clist_pairs f1 f3 c==> c==> c~ f2 c= cfind_list cMAP part clist_pairs f4 f0 b0 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f4 f0 cCOND f2 f3 b0 f5 * / c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> f2 c= clist_pairs f1 f3 c==> c==> c~ f2 c= cfind_list cMAP part clist_pairs f4 f0 b0 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f4 f0 cCOND f2 f3 b0 f5
- |- ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)
T * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
+ |- (((uniq ((cat (list_pairs h)) (list_of_darts t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list (list_of_faces t)) d)))) = ((uniq ((cat (list_pairs h)) (list_of_darts t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))))
T c= c==> cuniq ccat clist_pairs f0 clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list clist_of_faces f1 f2 c==> cuniq ccat clist_pairs f0 clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((((MEM d) (list_pairs h)) = x) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c==> c= cMEM f2 clist_pairs f0 f3 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ |- ((uniq (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL)) ==> (uniq ((find_face NIL) d)))
T c==> cuniq cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cuniq cfind_face cNIL f0
+ ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_list ((CONS (list_pairs h)) ((MAP list_pairs) t))) d)))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cuniq cfind_list cCONS clist_pairs f2 cMAP part clist_pairs f0 f1
- |- ((L = L1) = ((\L1. (L = L1)) L1))
T c= c= f0 f1 * / c= f0 b0 f1
- |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
- (uniq (list_pairs h)) |- (T = (uniq (list_pairs h)))
T c==> cuniq clist_pairs f0 c= cT cuniq clist_pairs f0
+ |- (((uniq ((cat (list_pairs h)) (list_of_darts t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))))
T c= c==> cuniq ccat clist_pairs f0 clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2
- (uniq (list_pairs h)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (list_pairs h)) /\ (((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))))
T c==> cuniq clist_pairs f0 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c/\ cuniq clist_pairs f0 c==> c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 cuniq clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ |- ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))
T c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 clist_of_darts f0
+ |- ((((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) ==> ((uniq (list_of_darts ((CONS h) t))) ==> (uniq ((find_face ((CONS h) t)) d)))) = T)
T c= c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq clist_of_darts cCONS f2 f0 cuniq cfind_face cCONS f2 f0 f1 cT
- |- (((((MEM d) (list_pairs h)) ==> ((list_pairs h) = (list_pairs h))) ==> (((~ ((MEM d) (list_pairs h))) ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) e')))) = (((~ ((MEM d) (list_pairs h))) ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) e'))))
T c= c==> c==> cMEM f0 clist_pairs f1 c= clist_pairs f1 clist_pairs f1 c==> c==> c~ cMEM f0 clist_pairs f1 c= cfind_list cMAP part clist_pairs f2 f0 f3 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND cMEM f0 clist_pairs f1 clist_pairs f1 f3 c==> c==> c~ cMEM f0 clist_pairs f1 c= cfind_list cMAP part clist_pairs f2 f0 f3 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND cMEM f0 clist_pairs f1 clist_pairs f1 f3
+ (((MEM d) (list_pairs h)) = x) |- ((uniq (((COND x) (list_pairs h)) ((find_face t) d))) = (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))
T c==> c= cMEM f0 clist_pairs f1 f2 c= cuniq cCOND f2 clist_pairs f1 cfind_face f3 f0 cuniq cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_face f3 f0
+ |- (((!L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) ==> ((\L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) L)) = ((\L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) L))
T c= c==> ! c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 * / c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 f0 * / c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 f0
+ |- ((!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))) = T)
T c= ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 cT
+ |- ((uniq NIL) ==> (uniq ((find_list NIL) d)))
T c==> cuniq cNIL cuniq cfind_list cNIL f0
- |- (((MEM d) (list_pairs h)) ==> ((list_pairs h) = (list_pairs h)))
T c==> cMEM f0 clist_pairs f1 c= clist_pairs f1 clist_pairs f1
- |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))) = (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)
T * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
- |- (((!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (?x. (((MEM d) (list_pairs h)) = x)))) ==> ((?x. (((MEM d) (list_pairs h)) = x)) ==> (?x. (((MEM d) (list_pairs h)) = x)))) = ((?x. (((MEM d) (list_pairs h)) = x)) ==> (?x. (((MEM d) (list_pairs h)) = x))))
T c= c==> ! c==> * / c= cMEM f0 clist_pairs f1 b1 b0 c? / c= cMEM f0 clist_pairs f1 b1 c==> c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0 c==> c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
+ |- (((!d. (((find_face L) d) = ((find_list (list_of_faces L)) d))) ==> ((\d. (((find_face L) d) = ((find_list (list_of_faces L)) d))) d)) = ((\d. (((find_face L) d) = ((find_list (list_of_faces L)) d))) d))
T c= c==> ! c= cfind_face f0 b0 cfind_list clist_of_faces f0 b0 * / c= cfind_face f0 b0 cfind_list clist_of_faces f0 b0 f1 * / c= cfind_face f0 b0 cfind_list clist_of_faces f0 b0 f1
+ ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_list (list_of_faces ((CONS h) t))) d)))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f0 cuniq cfind_list clist_of_faces cCONS f2 f0 f1
- ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
- |- ((L = L1) ==> ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))
T c==> c= f0 f1 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2
+ |- ((\x. (((MEM d) (list_pairs h)) = x)) ((MEM d) (list_pairs h)))
T * / c= cMEM f0 clist_pairs f1 b0 cMEM f0 clist_pairs f1
+ |- (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_list ((MAP list_pairs) ((CONS h) t))) d))) = ((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_list (list_of_faces ((CONS h) t))) d))))
T c= c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cfind_list cMAP part clist_pairs cCONS f0 f1 f2 c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cfind_list clist_of_faces cCONS f0 f1 f2
+ |- ((\h. (!t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x))))))) h)
T * / ! ! c/\ c= cfind_list cNIL b2 cNIL c= cfind_list cCONS b0 b1 b2 cCOND cMEM b2 b0 b0 cfind_list b1 b2 f0
+ |- ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
+ |- ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L)
T * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0
+ |- (((!L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))) ==> ((\L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))) L)) = ((\L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))) L))
T c= c==> ! c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 clist_of_darts b0 * / c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 clist_of_darts b0 f0 * / c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 clist_of_darts b0 f0
+ |- ((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s)))
T c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3
- |- ((?L1. (L = L1)) ==> (?L1. (L = L1)))
T c==> c? / c= f0 b0 c? / c= f0 b0
+ |- (((uniq NIL) ==> (uniq ((find_list ((MAP list_pairs) NIL)) d))) = ((uniq NIL) ==> (uniq ((find_list (list_of_faces NIL)) d))))
T c= c==> cuniq cNIL cuniq cfind_list cMAP part clist_pairs cNIL f0 c==> cuniq cNIL cuniq cfind_list clist_of_faces cNIL f0
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
+ |- ((\h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) h)
T * / ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- |- ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)
T * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
- (L = L1) |- (L1 = L)
T c==> c= f0 f1 c= f1 f0
+ ((list_of_faces L) = ((MAP list_pairs) L)) |- (((MAP list_pairs) L) = (list_of_faces L))
T c==> c= clist_of_faces f0 cMAP part clist_pairs f0 c= cMAP part clist_pairs f0 clist_of_faces f0
- |- (((uniq ((find_face t) d)) = T) ==> (uniq ((find_face t) d)))
T c==> c= cuniq cfind_face f0 f1 cT cuniq cfind_face f0 f1
+ |- ((\L. (!d. (((find_face L) d) = ((find_list (list_of_faces L)) d)))) L)
T * / ! c= cfind_face b0 b1 cfind_list clist_of_faces b0 b1 f0
+ ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L)) |- ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))
T c==> c= clist_of_darts f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f0 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 clist_of_darts f0
- ((MEM d) (list_pairs h)) |- (((MEM d) (list_pairs h)) = T)
T c==> cMEM f0 clist_pairs f1 c= cMEM f0 clist_pairs f1 cT
- ((\L1. (L = L1)) L1) |- (((L = L1) ==> (?L1. (L = L1))) = (?L1. (L = L1)))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c? / c= f0 b0 c? / c= f0 b0
+ |- ((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))))
T c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2
- ((\L1. (L = L1)) L1) |- (((L = L1) ==> ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))) = ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2
+ ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (((uniq (list_pairs h)) /\ ((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t)))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> c/\ cuniq clist_pairs f2 c/\ c~ chas / cMEM b0 clist_pairs f2 clist_of_darts f0 cuniq clist_of_darts f0 cuniq cCOND cMEM f1 clist_pairs f2 clist_pairs f2 cfind_face f0 f1
- ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((((MEM d) (list_pairs h)) = x) ==> (?x. (((MEM d) (list_pairs h)) = x))) = (?x. (((MEM d) (list_pairs h)) = x)))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c= c==> c= cMEM f0 clist_pairs f1 f2 c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0
- |- (((?L1. (L = L1)) ==> ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))) = ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))
T c= c==> c? / c= f0 b0 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1
+ (uniq (list_pairs h)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (list_of_darts t)) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))
T c==> cuniq clist_pairs f0 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c==> cuniq clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ |- (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_list (list_of_faces ((CONS h) t))) d))) = ((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_face ((CONS h) t)) d))))
T c= c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cfind_list clist_of_faces cCONS f0 f1 f2 c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cfind_face cCONS f0 f1 f2
+ |- (((uniq NIL) ==> (uniq NIL)) = ((uniq NIL) ==> (uniq ((find_list NIL) d))))
T c= c==> cuniq cNIL cuniq cNIL c==> cuniq cNIL cuniq cfind_list cNIL f0
+ (uniq (list_pairs h)) |- (uniq (((COND T) (list_pairs h)) ((find_face t) d)))
T c==> cuniq clist_pairs f0 cuniq cCOND cT clist_pairs f0 cfind_face f1 f2
- |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (((!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))) ==> ((?x. (((MEM d) (list_pairs h)) = x)) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))) = ((?x. (((MEM d) (list_pairs h)) = x)) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c= c==> ! c==> * / c= cMEM f2 clist_pairs f0 b1 b0 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2 c==> c? / c= cMEM f2 clist_pairs f0 b0 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2 c==> c? / c= cMEM f2 clist_pairs f0 b0 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
- |- ((L = L) = ((\L1. (L = L1)) L))
T c= c= f0 f0 * / c= f0 b0 f0
+ |- ((uniq (list_of_darts NIL)) ==> (uniq ((find_face NIL) d)))
T c==> cuniq clist_of_darts cNIL cuniq cfind_face cNIL f0
+ |- (((MAP f) NIL) = NIL)
T c= cMAP f0 cNIL cNIL
+ (~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))), (uniq (list_pairs h)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ ((uniq (list_of_darts t)) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))))
T c==> c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 c==> cuniq clist_pairs f0 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 c==> cuniq clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((((uniq (((COND T) (list_pairs h)) ((find_face t) d))) /\ (uniq (((COND F) (list_pairs h)) ((find_face t) d)))) ==> (!x. (uniq (((COND x) (list_pairs h)) ((find_face t) d))))) = (!x. (uniq (((COND x) (list_pairs h)) ((find_face t) d)))))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c= c==> c/\ cuniq cCOND cT clist_pairs f0 cfind_face f1 f2 cuniq cCOND cF clist_pairs f0 cfind_face f1 f2 ! cuniq cCOND b0 clist_pairs f0 cfind_face f1 f2 ! cuniq cCOND b0 clist_pairs f0 cfind_face f1 f2
+ |- (((!t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x)))))) ==> ((\t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x)))))) t)) = ((\t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x)))))) t))
T c= c==> ! ! c/\ c= cfind_list cNIL b1 cNIL c= cfind_list cCONS f0 b0 b1 cCOND cMEM b1 f0 f0 cfind_list b0 b1 * / ! c/\ c= cfind_list cNIL b1 cNIL c= cfind_list cCONS f0 b0 b1 cCOND cMEM b1 f0 f0 cfind_list b0 b1 f1 * / ! c/\ c= cfind_list cNIL b1 cNIL c= cfind_list cCONS f0 b0 b1 cCOND cMEM b1 f0 f0 cfind_list b0 b1 f1
- |- (!g'. (!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5
+ |- (((!p'. (!q'. (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 b0 c==> c==> b0 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 b1 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> b0 b1 * / ! c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 b0 c==> c==> b0 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 b1 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> b0 b1 f3 * / ! c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 b0 c==> c==> b0 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 b1 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> b0 b1 f3
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((((P T) /\ (P F)) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c= c==> c/\ * f0 cT * f0 cF ! * f0 b0 cT
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ (uniq (list_pairs h)), ((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t))), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))
T c==> cuniq clist_pairs f0 c==> c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
- ((\L1. (L = L1)) L1) |- (L = L1)
T c==> * / c= f0 b0 f1 c= f0 f1
- (L = L1) |- ((L = L1) /\ (?L1. (L = L1)))
T c==> c= f0 f1 c/\ c= f0 f1 c? / c= f0 b0
+ |- (((uniq (list_of_darts NIL)) ==> (uniq ((find_face NIL) d))) /\ (!a0. (!a1. (((uniq (list_of_darts a1)) ==> (uniq ((find_face a1) d))) ==> ((uniq (list_of_darts ((CONS a0) a1))) ==> (uniq ((find_face ((CONS a0) a1)) d)))))))
T c/\ c==> cuniq clist_of_darts cNIL cuniq cfind_face cNIL f0 ! ! c==> c==> cuniq clist_of_darts b1 cuniq cfind_face b1 f0 c==> cuniq clist_of_darts cCONS b0 b1 cuniq cfind_face cCONS b0 b1 f0
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (((!x. (uniq (((COND x) (list_pairs h)) ((find_face t) d)))) ==> ((\x. (uniq (((COND x) (list_pairs h)) ((find_face t) d)))) x)) = ((\x. (uniq (((COND x) (list_pairs h)) ((find_face t) d)))) x))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c= c==> ! cuniq cCOND b0 clist_pairs f0 cfind_face f1 f2 * / cuniq cCOND b0 clist_pairs f0 cfind_face f1 f2 f3 * / cuniq cCOND b0 clist_pairs f0 cfind_face f1 f2 f3
+ |- (((!q'. (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))) ==> ((\q'. (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))) q')) = ((\q'. (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 b0 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 b0 * / c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 b0 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 b0 f4 * / c==> c= cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 b0 c= c==> cuniq ccat clist_pairs f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 b0 f4
+ |- (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))
T c= cMAP f0 cCONS f1 f2 cCONS * f0 f1 cMAP f0 f2
+ |- ((!a0. (!a1. (((uniq (list_of_darts a1)) ==> (uniq ((find_face a1) d))) ==> ((uniq (list_of_darts ((CONS a0) a1))) ==> (uniq ((find_face ((CONS a0) a1)) d)))))) = (((uniq (list_of_darts NIL)) ==> (uniq ((find_face NIL) d))) /\ (!a0. (!a1. (((uniq (list_of_darts a1)) ==> (uniq ((find_face a1) d))) ==> ((uniq (list_of_darts ((CONS a0) a1))) ==> (uniq ((find_face ((CONS a0) a1)) d))))))))
T c= ! ! c==> c==> cuniq clist_of_darts b1 cuniq cfind_face b1 f0 c==> cuniq clist_of_darts cCONS b0 b1 cuniq cfind_face cCONS b0 b1 f0 c/\ c==> cuniq clist_of_darts cNIL cuniq cfind_face cNIL f0 ! ! c==> c==> cuniq clist_of_darts b1 cuniq cfind_face b1 f0 c==> cuniq clist_of_darts cCONS b0 b1 cuniq cfind_face cCONS b0 b1 f0
+ |- ((\s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) s1)
T * / ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 f0
+ |- (((!h. (!t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x))))))) ==> ((\h. (!t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x))))))) h)) = ((\h. (!t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x))))))) h))
T c= c==> ! ! ! c/\ c= cfind_list cNIL b2 cNIL c= cfind_list cCONS b0 b1 b2 cCOND cMEM b2 b0 b0 cfind_list b1 b2 * / ! ! c/\ c= cfind_list cNIL b2 cNIL c= cfind_list cCONS b0 b1 b2 cCOND cMEM b2 b0 b0 cfind_list b1 b2 f0 * / ! ! c/\ c= cfind_list cNIL b2 cNIL c= cfind_list cCONS b0 b1 b2 cCOND cMEM b2 b0 b0 cfind_list b1 b2 f0
- ((\L1. (L = L1)) L1) |- (((\L1. (L = L1)) L1) /\ (?L1. (L = L1)))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c? / c= f0 b0
- (L = L1) |- ((L = L1) /\ ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))
T c==> c= f0 f1 c/\ c= f0 f1 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2
+ |- (((!q'. (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))) ==> ((\q'. (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))) q')) = ((\q'. (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cuniq * * / / ccat clist_pairs b1 b2 f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 b0 c= c==> cuniq * * / / ccat clist_pairs b1 b2 f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 b0 * / c==> c= cuniq * * / / ccat clist_pairs b1 b2 f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 b0 c= c==> cuniq * * / / ccat clist_pairs b1 b2 f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 b0 f4 * / c==> c= cuniq * * / / ccat clist_pairs b1 b2 f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 f2 c==> c==> f2 c= cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 b0 c= c==> cuniq * * / / ccat clist_pairs b1 b2 f0 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cuniq cCOND cMEM f3 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f3 c==> f2 b0 f4
+ |- (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_list ((CONS (list_pairs h)) ((MAP list_pairs) t))) d))) = ((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_list ((MAP list_pairs) ((CONS h) t))) d))))
T c= c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cfind_list cCONS clist_pairs f0 cMAP part clist_pairs f1 f2 c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cfind_list cMAP part clist_pairs cCONS f0 f1 f2
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (!x. (uniq (((COND x) (list_pairs h)) ((find_face t) d))))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 ! cuniq cCOND b0 clist_pairs f0 cfind_face f1 f2
- |- ((p /\ (q ==> r)) ==> ((p ==> q) ==> r))
T c==> c/\ f0 c==> f1 f2 c==> c==> f0 f1 f2
+ |- (((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)) = ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P))
T c= c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0 * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
- ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((\x. (((MEM d) (list_pairs h)) = x)) x) /\ (?x. (((MEM d) (list_pairs h)) = x)))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c/\ * / c= cMEM f0 clist_pairs f1 b0 f2 c? / c= cMEM f0 clist_pairs f1 b0
+ |- (((!p'. (!q'. (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = p') ==> ((p' ==> ((uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = q')) ==> (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cuniq * * / / ccat clist_pairs b2 b3 f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 b0 c==> c==> b0 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 b1 c= c==> cuniq * * / / ccat clist_pairs b2 b3 f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> b0 b1 * / ! c==> c= cuniq * * / / ccat clist_pairs b2 b3 f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 b0 c==> c==> b0 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 b1 c= c==> cuniq * * / / ccat clist_pairs b2 b3 f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> b0 b1 f3 * / ! c==> c= cuniq * * / / ccat clist_pairs b2 b3 f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 b0 c==> c==> b0 c= cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 b1 c= c==> cuniq * * / / ccat clist_pairs b2 b3 f0 cfoldr / / ccat clist_pairs b2 b3 cNIL f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c==> b0 b1 f3
- (((MEM d) (list_pairs h)) = x) |- (x = ((MEM d) (list_pairs h)))
T c==> c= cMEM f0 clist_pairs f1 f2 c= f2 cMEM f0 clist_pairs f1
+ |- (((find_list (list_of_faces L)) d) = ((find_face L) d))
T c= cfind_list clist_of_faces f0 f1 cfind_face f0 f1
+ |- ((((COND F) t1) t2) = t2)
T c= cCOND cF f0 f1 f1
+ |- (((!d. (((find_list (list_of_faces L)) d) = ((find_face L) d))) ==> ((\d. (((find_list (list_of_faces L)) d) = ((find_face L) d))) d)) = ((\d. (((find_list (list_of_faces L)) d) = ((find_face L) d))) d))
T c= c==> ! c= cfind_list clist_of_faces f0 b0 cfind_face f0 b0 * / c= cfind_list clist_of_faces f0 b0 cfind_face f0 b0 f1 * / c= cfind_list clist_of_faces f0 b0 cfind_face f0 b0 f1
+ |- (T = ((uniq NIL) ==> (uniq NIL)))
T c= cT c==> cuniq cNIL cuniq cNIL
- |- (((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x))))) = (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- (((!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) ==> ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)) = ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0))
T c= c==> ! c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
- (uniq (list_of_darts t)) |- ((uniq (list_of_darts t)) = T)
T c==> cuniq clist_of_darts f0 c= cuniq clist_of_darts f0 cT
- ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (list_of_darts t)) ==> ((uniq ((find_face t) d)) = T))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> cuniq clist_of_darts f0 c= cuniq cfind_face f0 f1 cT
- |- (((!x. (((\L1. (L = L1)) x) ==> (?L1. (L = L1)))) ==> ((?L1. (L = L1)) ==> (?L1. (L = L1)))) = ((?L1. (L = L1)) ==> (?L1. (L = L1))))
T c= c==> ! c==> * / c= f0 b1 b0 c? / c= f0 b1 c==> c? / c= f0 b0 c? / c= f0 b0 c==> c? / c= f0 b0 c? / c= f0 b0
+ |- ((uniq ((find_face t) d)) = (uniq (((COND F) (list_pairs h)) ((find_face t) d))))
T c= cuniq cfind_face f0 f1 cuniq cCOND cF clist_pairs f2 cfind_face f0 f1
+ (((find_list (list_of_faces L)) d) = ((find_face L) d)) |- (((find_face L) d) = ((find_list (list_of_faces L)) d))
T c==> c= cfind_list clist_of_faces f0 f1 cfind_face f0 f1 c= cfind_face f0 f1 cfind_list clist_of_faces f0 f1
+ |- (((((uniq (list_of_darts NIL)) ==> (uniq ((find_face NIL) d))) /\ (!a0. (!a1. (((uniq (list_of_darts a1)) ==> (uniq ((find_face a1) d))) ==> ((uniq (list_of_darts ((CONS a0) a1))) ==> (uniq ((find_face ((CONS a0) a1)) d))))))) ==> (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))) = (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c= c==> c/\ c==> cuniq clist_of_darts cNIL cuniq cfind_face cNIL f0 ! ! c==> c==> cuniq clist_of_darts b1 cuniq cfind_face b1 f0 c==> cuniq clist_of_darts cCONS b0 b1 cuniq cfind_face cCONS b0 b1 f0 ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0
- |- ((!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e')))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 b0 c= cCOND f0 f2 f4 cCOND f1 f3 b0 cT
+ (uniq (list_pairs h)), (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (uniq (((COND x) (list_pairs h)) ((find_face t) d)))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 cuniq cCOND f3 clist_pairs f0 cfind_face f1 f2
- |- (((!g'. (!t'. (!e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cMEM f0 clist_pairs f1 b0 c==> c==> b0 c= clist_pairs f1 b1 c==> c==> c~ b0 c= cfind_list cMAP part clist_pairs f2 f0 b2 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND b0 b1 b2 * / ! ! c==> c= cMEM f0 clist_pairs f1 b0 c==> c==> b0 c= clist_pairs f1 b1 c==> c==> c~ b0 c= cfind_list cMAP part clist_pairs f2 f0 b2 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND b0 b1 b2 f3 * / ! ! c==> c= cMEM f0 clist_pairs f1 b0 c==> c==> b0 c= clist_pairs f1 b1 c==> c==> c~ b0 c= cfind_list cMAP part clist_pairs f2 f0 b2 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND b0 b1 b2 f3
+ |- (((uniq (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) ==> (uniq ((find_face ((CONS h) t)) d))) = ((uniq (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t))) ==> (uniq ((find_face ((CONS h) t)) d))))
T c= c==> cuniq * * / / ccat clist_pairs b0 b1 f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cuniq cfind_face cCONS f0 f1 f2 c==> cuniq cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f0 f1 cuniq cfind_face cCONS f0 f1 f2
- |- ((L = L1) ==> (?L1. (L = L1)))
T c==> c= f0 f1 c? / c= f0 b0
- |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
+ |- (((!f. (((MAP f) NIL) = NIL)) ==> ((\f. (((MAP f) NIL) = NIL)) f)) = ((\f. (((MAP f) NIL) = NIL)) f))
T c= c==> ! c= cMAP b0 cNIL cNIL * / c= cMAP b0 cNIL cNIL f0 * / c= cMAP b0 cNIL cNIL f0
+ (uniq (list_pairs h)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) ==> ((uniq (list_of_darts t)) ==> (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))))
T c==> cuniq clist_pairs f0 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c==> c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 c==> cuniq clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
- |- ((?x. (((MEM d) (list_pairs h)) = x)) ==> (?x. (((MEM d) (list_pairs h)) = x)))
T c==> c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0
- |- (((!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) ==> ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)) = ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s))
T c= c==> ! ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
- ((\L1. (L = L1)) L1) |- (((\L1. (L = L1)) L1) /\ ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (((P T) /\ (P F)) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ c/\ * f0 cT * f0 cF ! * f0 b0
- |- ((\t'. (!e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> f2 c= clist_pairs f1 b0 c==> c==> c~ f2 c= cfind_list cMAP part clist_pairs f3 f0 b1 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f3 f0 cCOND f2 b0 b1 f4
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- (!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (?x. (((MEM d) (list_pairs h)) = x))))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c? / c= cMEM f0 clist_pairs f1 b0
- |- (((!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) ==> ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)) = ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f))
T c= c==> ! ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
- (L = L1) |- ((uniq (list_of_darts L1)) ==> (uniq ((find_face L1) d)))
T c==> c= f0 f1 c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2
- (L = L1) |- ((uniq (list_of_darts L1)) ==> (uniq ((find_face L) d)))
T c==> c= f0 f1 c==> cuniq clist_of_darts f1 cuniq cfind_face f0 f2
- |- (((!x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) ==> ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)) = ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x))
T c= c==> ! ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c= c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0 cT
- ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((((uniq (list_of_darts t)) ==> ((uniq ((find_face t) d)) = T)) ==> (uniq ((find_face t) d))) = (uniq ((find_face t) d)))
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c= c==> c==> cuniq clist_of_darts f0 c= cuniq cfind_face f0 f1 cT cuniq cfind_face f0 f1 cuniq cfind_face f0 f1
- |- ((((MEM d) (list_pairs h)) = x) = ((\x. (((MEM d) (list_pairs h)) = x)) x))
T c= c= cMEM f0 clist_pairs f1 f2 * / c= cMEM f0 clist_pairs f1 b0 f2
- (L = L1) |- ((\L1. (L = L1)) L1)
T c==> c= f0 f1 * / c= f0 b0 f1
- |- ((\e'. ((((MEM d) (list_pairs h)) = g') ==> ((g' ==> ((list_pairs h) = t')) ==> (((~ g') ==> (((find_list ((MAP list_pairs) t)) d) = e')) ==> ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND g') t') e')))))) e')
T * / c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> f2 c= clist_pairs f1 f3 c==> c==> c~ f2 c= cfind_list cMAP part clist_pairs f4 f0 b0 c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f4 f0 cCOND f2 f3 b0 f5
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- (~ ((MEM d) (list_pairs h))) |- (((MEM d) (list_pairs h)) = F)
T c==> c~ cMEM f0 clist_pairs f1 c= cMEM f0 clist_pairs f1 cF
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
- |- ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))) L1)
T * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1
- |- (((\a. (f a)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (?L1. (L = L1))
T c? / c= f0 b0
- (uniq (list_of_darts t)) |- (T = (uniq (list_of_darts t)))
T c==> cuniq clist_of_darts f0 c= cT cuniq clist_of_darts f0
- (uniq (list_of_darts t)) |- ((uniq (list_of_darts t)) /\ (((uniq ((find_face t) d)) = T) ==> (uniq ((find_face t) d))))
T c==> cuniq clist_of_darts f0 c/\ cuniq clist_of_darts f0 c==> c= cuniq cfind_face f0 f1 cT cuniq cfind_face f0 f1
- (L = L1) |- (((uniq (list_of_darts L1)) ==> (uniq ((find_face L) d))) = ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))
T c==> c= f0 f1 c= c==> cuniq clist_of_darts f1 cuniq cfind_face f0 f2 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f2
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- ((((\L1. (L = L1)) L1) ==> (?L1. (L = L1))) = T)
T c= c==> * / c= f0 b0 f1 c? / c= f0 b0 cT
- ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) = T)
T c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c= c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 cT
- (~ ((MEM d) (list_pairs h))) |- ((~ ((MEM d) (list_pairs h))) /\ (((find_list ((MAP list_pairs) t)) d) = ((find_list ((MAP list_pairs) t)) d)))
T c==> c~ cMEM f0 clist_pairs f1 c/\ c~ cMEM f0 clist_pairs f1 c= cfind_list cMAP part clist_pairs f2 f0 cfind_list cMAP part clist_pairs f2 f0
- ((uniq ((find_face t) d)) = T) |- (((uniq ((find_face t) d)) = T) /\ (uniq ((find_face t) d)))
T c==> c= cuniq cfind_face f0 f1 cT c/\ c= cuniq cfind_face f0 f1 cT cuniq cfind_face f0 f1
- (uniq (list_pairs h)), ((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t))), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (((~ ((has (\x. ((MEM x) (list_pairs h)))) (list_of_darts t))) /\ (uniq (list_of_darts t))) /\ (uniq (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))
T c==> cuniq clist_pairs f0 c==> c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 cuniq clist_of_darts f1 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 c/\ c/\ c~ chas / cMEM b0 clist_pairs f0 clist_of_darts f1 cuniq clist_of_darts f1 cuniq cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
- ((MEM d) (list_pairs h)) |- (((MEM d) (list_pairs h)) /\ ((list_pairs h) = (list_pairs h)))
T c==> cMEM f0 clist_pairs f1 c/\ cMEM f0 clist_pairs f1 c= clist_pairs f1 clist_pairs f1
- |- (((!x. (((\L1. (L = L1)) x) ==> ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))) ==> ((?L1. (L = L1)) ==> ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))) = ((?L1. (L = L1)) ==> ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c= c==> ! c==> * / c= f0 b1 b0 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> c? / c= f0 b0 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> c? / c= f0 b0 c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))) = T)
T c= ! ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c==> c==> c~ f1 c= f3 b1 c= cCOND f0 f2 f3 cCOND f1 b0 b1 cT
- (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq (list_of_darts t)) /\ ((uniq ((find_face t) d)) = T))
T c==> cuniq clist_of_darts f0 c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c/\ cuniq clist_of_darts f0 c= cuniq cfind_face f0 f1 cT
- (uniq (list_pairs h)) |- ((uniq (list_pairs h)) = T)
T c==> cuniq clist_pairs f0 c= cuniq clist_pairs f0 cT
- (uniq (list_of_darts t)), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- ((uniq ((find_face t) d)) = T)
T c==> cuniq clist_of_darts f0 c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c= cuniq cfind_face f0 f1 cT
- (uniq (list_pairs h)), (uniq (list_of_darts t)), (((MEM d) (list_pairs h)) = x), ((uniq (list_of_darts t)) ==> (uniq ((find_face t) d))) |- (uniq (((COND x) (list_pairs h)) ((find_face t) d)))
T c==> cuniq clist_pairs f0 c==> cuniq clist_of_darts f1 c==> c= cMEM f2 clist_pairs f0 f3 c==> c==> cuniq clist_of_darts f1 cuniq cfind_face f1 f2 cuniq cCOND f3 clist_pairs f0 cfind_face f1 f2
