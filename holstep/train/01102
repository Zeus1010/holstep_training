N Reduction1.final_face_seed
C |- (!p. (((filter SND) (faces (Seed p))) = ((CONS (((upt (NUMERAL _0)) (maxGon p)) , T)) NIL)))
T c= cfilter part cSND cfaces cSeed f0 cCONS c, cupt cNUMERAL c_0 cmaxGon f0 cT cNIL
D TRUTH
A |- T
T cT
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D Tame_defs.faces
A |- (faces = FST)
T c= part cfaces part cFST
D Tame_defs.GRAPH
A |- (!fs. (!n. (!f. (!h. (((((Graph fs) n) f) h) = (fs , (n , (f , h))))))))
T c= cGraph f0 f1 f2 f3 c, f0 c, f1 c, f2 f3
D Tame_defs.graphl
A |- (!n. ((graphl n) = ((LET (\vs. (LET_END ((LET (\fs. (LET_END ((((Graph fs) n) ((REPLICATE n) fs)) ((REPLICATE n) (NUMERAL _0)))))) ((CONS (vs , T)) ((CONS ((REVERSE vs) , F)) NIL)))))) ((upt (NUMERAL _0)) n))))
T c= cgraphl f0 cLET / cLET_END cLET / cLET_END cGraph b1 f0 cREPLICATE f0 b1 cREPLICATE f0 cNUMERAL c_0 cCONS c, b0 cT cCONS c, cREVERSE b0 cF cNIL cupt cNUMERAL c_0 f0
D Tame_defs.SEED
A |- (!p. ((Seed p) = (graphl (maxGon p))))
T c= cSeed f0 cgraphl cmaxGon f0
D Tame_list.filter_rec
A |- ((((filter f) NIL) = NIL) /\ (((filter f) ((CONS x) xs)) = (((COND (f x)) ((CONS x) ((filter f) xs))) ((filter f) xs))))
T c/\ c= cfilter f0 cNIL cNIL c= cfilter f0 cCONS f1 f2 cCOND * f0 f1 cCONS f1 cfilter f0 f2 cfilter f0 f2
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
- |- (((\fs. (f fs)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
