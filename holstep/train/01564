N Aq8.eq_fst_betwn_rev_parts
C |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D o_DEF
A |- (!f. (!g. ((f o g) = (\x. (f (g x))))))
T c= * * part co f0 f1 / * f0 * f1 b0
D I_DEF
A |- (I = (\x. x))
T c= part cI / b0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D ADD_CLAUSES
A |- ((!n. (((NUMERAL _0) + n) = n)) /\ ((!m. ((m + (NUMERAL _0)) = m)) /\ ((!m. (!n. (((SUC m) + n) = (SUC (m + n))))) /\ (!m. (!n. ((m + (SUC n)) = (SUC (m + n))))))))
T c/\ ! c= c+ cNUMERAL c_0 b0 b0 c/\ ! c= c+ b0 cNUMERAL c_0 b0 c/\ ! ! c= c+ cSUC b0 b1 cSUC c+ b0 b1 ! ! c= c+ b0 cSUC b1 cSUC c+ b0 b1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D MULT_CLAUSES
A |- ((!n. (((NUMERAL _0) * n) = (NUMERAL _0))) /\ ((!m. ((m * (NUMERAL _0)) = (NUMERAL _0))) /\ ((!n. (((NUMERAL (BIT1 _0)) * n) = n)) /\ ((!m. ((m * (NUMERAL (BIT1 _0))) = m)) /\ ((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) /\ (!m. (!n. ((m * (SUC n)) = (m + (m * n))))))))))
T c/\ ! c= c* cNUMERAL c_0 b0 cNUMERAL c_0 c/\ ! c= c* b0 cNUMERAL c_0 cNUMERAL c_0 c/\ ! c= c* cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= c* b0 cNUMERAL cBIT1 c_0 b0 c/\ ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D REAL_ADD_SYM
A |- (!x. (!y. (((real_add x) y) = ((real_add y) x))))
T c= creal_add f0 f1 creal_add f1 f0
D REAL_ADD_ASSOC
A |- (!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z)))))
T c= creal_add f0 creal_add f1 f2 creal_add creal_add f0 f1 f2
D REAL_ADD_LID
A |- (!x. (((real_add (real_of_num (NUMERAL _0))) x) = x))
T c= creal_add creal_of_num cNUMERAL c_0 f0 f0
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_ADD_RID
A |- (!x. (((real_add x) (real_of_num (NUMERAL _0))) = x))
T c= creal_add f0 creal_of_num cNUMERAL c_0 f0
D REAL_ADD_RINV
A |- (!x. (((real_add x) (real_neg x)) = (real_of_num (NUMERAL _0))))
T c= creal_add f0 creal_neg f0 creal_of_num cNUMERAL c_0
D REAL_MUL_RZERO
A |- (!x. (((real_mul x) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0))))
T c= creal_mul f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D REAL_NEG_ADD
A |- (!x. (!y. ((real_neg ((real_add x) y)) = ((real_add (real_neg x)) (real_neg y)))))
T c= creal_neg creal_add f0 f1 creal_add creal_neg f0 creal_neg f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_LE_LT
A |- (!x. (!y. (((real_le x) y) = (((real_lt x) y) \/ (x = y)))))
T c= creal_le f0 f1 c\/ creal_lt f0 f1 c= f0 f1
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D Real_ext.REAL_PROP_POS_ADD2
A |- (!x. (!y. ((((real_lt (real_of_num (NUMERAL _0))) x) /\ ((real_lt (real_of_num (NUMERAL _0))) y)) ==> ((real_lt (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c==> c/\ creal_lt creal_of_num cNUMERAL c_0 f0 creal_lt creal_of_num cNUMERAL c_0 f1 creal_lt creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D int_le
A |- (!x. (!y. (((int_le x) y) = ((real_le (real_of_int x)) (real_of_int y)))))
T c= cint_le f0 f1 creal_le creal_of_int f0 creal_of_int f1
D int_of_num_th
A |- (!n. ((real_of_int (int_of_num n)) = (real_of_num n)))
T c= creal_of_int cint_of_num f0 creal_of_num f0
D INT_NOT_LT
A |- (!x. (!y. ((~ ((int_lt x) y)) = ((int_le y) x))))
T c= c~ cint_lt f0 f1 cint_le f1 f0
D INT_OF_NUM_LE
A |- (!m. (!n. (((int_le (int_of_num m)) (int_of_num n)) = (m <= n))))
T c= cint_le cint_of_num f0 cint_of_num f1 c<= f0 f1
D INT_OF_NUM_LT
A |- (!m. (!n. (((int_lt (int_of_num m)) (int_of_num n)) = (m < n))))
T c= cint_lt cint_of_num f0 cint_of_num f1 c< f0 f1
D INT_POS
A |- (!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n)))
T cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
D Fan.POWER
A |- ((!f. (((POWER f) (NUMERAL _0)) = I)) /\ (!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))))
T c/\ ! c= * * part cPOWER b0 cNUMERAL c_0 part cI ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D Hypermap.lemma_node_nondegenerate
A |- (!H. ((is_node_nondegenerate H) = (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node H) x)))))))
T c= cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode f0 b0
D Hypermap.is_restricted
A |- (!H. ((is_restricted H) = ((~ ((dart H) = EMPTY)) /\ ((planar_hypermap H) /\ ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x)))))))))))))))
T c= cis_restricted f0 c/\ c~ c= * part cdart f0 part cEMPTY c/\ cplanar_hypermap f0 c/\ cplain_hypermap f0 c/\ cconnected_hypermap f0 c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0
D Seq.map_MAP
A |- (map = MAP)
T c= part cmap part cMAP
D Seq.map_rev
A |- (!f. (!s. (((map f) (rev s)) = (rev ((map f) s)))))
T c= cmap f0 crev f1 crev cmap f0 f1
D Seq.mapP
A |- (!f. (!s. (!y. (((MEM y) ((map f) s)) = (?x. (((MEM x) s) /\ (y = (f x))))))))
T c= cMEM f0 cmap f1 f2 c? / c/\ cMEM b0 f2 c= f0 * f1 b0
D Seq.map_comp
A |- (!f1. (!f2. (!s. (((map (f1 o f2)) s) = ((map f1) ((map f2) s))))))
T c= cmap * * part co f0 f1 f2 cmap f0 cmap f1 f2
D Seq.eq_in_map
A |- (!f1. (!f2. (!s. ((!x. (((MEM x) s) ==> ((f1 x) = (f2 x)))) ==> (((map f1) s) = ((map f2) s))))))
T c==> ! c==> cMEM b0 f0 c= * f1 b0 * f2 b0 c= cmap f1 f0 cmap f2 f0
D Seq2.next_prev_id
A |- (!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x))))
T c==> cuniq f0 c= cnext_el f0 cprev_el f0 f1 f1
D List_hypermap.dart_in_face
A |- (!d. (!L. (((MEM d) (list_of_darts L)) = ((MEM d) ((find_face L) d)))))
T c= cMEM f0 clist_of_darts f1 cMEM f0 cfind_face f1 f0
D List_hypermap.uniq_find_face
A |- (!d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1
D List_hypermap.mem_find_face_imp_faces_eq
A |- (!d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2))))))
T c==> c/\ cuniq clist_of_darts f0 cMEM f1 cfind_face f0 f2 c= cfind_face f0 f1 cfind_face f0 f2
D List_hypermap.good_list_uniq
A |- (!L. ((good_list L) ==> (uniq L)))
T c==> cgood_list f0 cuniq f0
D List_hypermap.mem_not_nil
A |- (!s. ((~ (s = NIL)) = (?x. ((MEM x) s))))
T c= c~ c= f0 cNIL c? / cMEM b0 f0
D Lp_gen_theory.dart_list_all
A |- (!L. ((good_list L) ==> (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d)))))))
T c==> cgood_list f0 ! c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1
D Tame_defs2.good_list
A |- (!L. ((good_list L) = ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))))))))
T c= cgood_list f0 c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0
D Tame_defs2.normal_list
A |- (!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))))))
T c= cnormal_list f0 f1 c/\ cuniq cflatten f1 c/\ call / c~ c= b0 cNIL f1 c/\ call * part cf_last f0 f1 c/\ call * part cloop_list f0 f1 ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1
D Tame_defs2.ntrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= cntrans f0 f1 f2 f3 f4 cFST cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.rtrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= crtrans f0 f1 f2 f3 f4 cSND cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.ytrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x)))))))
T c= cytrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.ztrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))
T c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.marked_list
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))))))
T c= cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3
D Tame_defs2.facesAt_list
A |- (!v. (!L. (((facesAt_list L) v) = ((FILTER (MEM v)) L))))
T c= cfacesAt_list f0 f1 cFILTER * part cMEM f1 f0
D Tame_list.lower_case
A |- ((MAP = map) /\ ((LENGTH = sizel) /\ ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))))
T c/\ c= part cMAP part cmap c/\ c= part cLENGTH part csizel c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
D Tame_list.betwn_mem
A |- (!f. (!u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f))))))
T c==> cMEM f0 cbetwn f1 f2 f3 cMEM f0 f1
D Tame_list.uniq_flatten_uniq
A |- (!L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s))))
T c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1
D Tame_list.LAST_MAP
A |- (!s. (!f. ((~ (s = NIL)) ==> ((LAST ((MAP f) s)) = (f (LAST s))))))
T c==> c~ c= f0 cNIL c= cLAST cMAP f1 f0 * f1 cLAST f0
D Tame_list.HD_rev
A |- (!t. ((~ (t = NIL)) ==> ((HD (rev t)) = (LAST t))))
T c==> c~ c= f0 cNIL c= cHD crev f0 cLAST f0
D Tame_list.dart_of_card_node
A |- (!L. (!x. (!v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM x) (list_of_darts L)) /\ ((FST x) = v))))) ==> ((CARD ((node (hypermap_of_list L)) x)) = (LENGTH ((facesAt_list L) v)))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM f1 clist_of_darts f0 c= cFST f1 f2 c= cCARD * * part cnode chypermap_of_list f0 f1 cLENGTH cfacesAt_list f0 f2
D Tame_list.simple_hypermap_uniq
A |- (!L. (((good_list L) /\ (good_list_nodes L)) ==> ((simple_hypermap (hypermap_of_list L)) = ((all uniq) L))))
T c==> c/\ cgood_list f0 cgood_list_nodes f0 c= csimple_hypermap chypermap_of_list f0 call part cuniq f0
D Ohcgkfu.uniq_betwn
A |- (!r. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq (((betwn r) z) y))))
T c==> c/\ cuniq f0 c/\ cMEM f1 f0 c/\ cMEM f2 f0 c~ c= f1 f2 cuniq cbetwn f0 f1 f2
D Pplhulj.marked_list_of_dart
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))))
T c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0
D Lebhirj.FST_N_LIST_POWER
A |- (((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d)))
T c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1
D Hojodcm.ytrans_mem_rtrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
D Hojodcm.mem_ztrans_rtrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2
D Hojodcm.z_not_eq_ytrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cytrans f0 f1 f2 f3 cNUMERAL c_0
D Hojodcm.PPLHULJ_v0
A |- (!L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 c/\ cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f4 c/\ cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c< cindexf f5 cytrans f0 f1 f2 f3 cNUMERAL c_0 f4 cindexf f5 cztrans f0 f1 f2 f3 cNUMERAL c_0 f4
D Hojodcm.count_node_face
A |- (!L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L)))))
T c==> c/\ cuniq f0 call part cuniq f0 c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0
D Aq1.MEM_EQ_UPT
A |- (((MEM j) ((upt (NUMERAL (BIT1 _0))) a)) = (((NUMERAL _0) < j) /\ (j < a)))
T c= cMEM f0 cupt cNUMERAL cBIT1 c_0 f1 c/\ c< cNUMERAL c_0 f0 c< f0 f1
D Aq23.LAST_UPT
A |- (!a. (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((LAST ((upt (NUMERAL (BIT1 _0))) a)) = (PRE a))))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cLAST cupt cNUMERAL cBIT1 c_0 f0 cPRE f0
D Aq4.nil_upt
A |- (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL
D Aq8.parts_f_betwn_pure
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c= cparts f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cMAP / cCONS b0 cNIL cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
D Aq8.parts_rev_f_betwn_pure
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c= cparts f0 f4 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((~ (z = y)) /\ ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ c~ c= f2 f3 c==> c= cnext_el f4 f6 f9 c==> c= cfind_face f1 f6 f4 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f9 f3 f4 cindexf f9 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> c= cfind_face f0 f2 f6 c==> cmarked_list f0 f4 f1 f2 c= c==> c= cparts f0 cbetwn f6 f3 f5 cMAP / cCONS b0 cNIL cbetwn f6 f3 f5 c= cmap / cFST cHD b0 cparts f0 f7 crev cmap part cFST cbetwn f6 f3 f5 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f4 f1 f2 c~ cfinal_list f0 f1 c= cparts f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f4 f1 f2 cMAP / cCONS b0 cNIL cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f4 f1 f2 c= cmap / cFST cHD b0 cparts f0 f7 crev cmap part cFST cbetwn f6 f3 f5
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) f) /\ (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f3 cl'z f1 f0 f5 f6 f7 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = T)
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= c==> * / c= cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 f7 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1 cT
- (a = b), ((a = b) ==> ((rev a) = (rev b))) |- (((a = b) ==> ((rev a) = (rev b))) /\ ((rev a) = (rev b)))
T c==> c= f0 f1 c==> c==> c= f0 f1 c= crev f0 crev f1 c/\ c==> c= f0 f1 c= crev f0 crev f1 c= crev f0 crev f1
+ |- ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)
T * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> cMEM f3 f1 c==> cMEM f4 f1 c==> c= cl'z f0 f5 f1 f6 f3 c==> c~ c= f3 f4 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f4 f7 c==> cMEM f3 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f3 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f3 cMAP / cCONS b0 cNIL cbetwn f7 f4 f3 c==> cuniq cbetwn f7 f4 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f3 f9 c==> c~ c= cbetwn f7 f4 f3 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f3 c==> cMEM f10 cbetwn f7 f4 f3 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ |- ((\H. ((is_node_nondegenerate H) = (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node H) x))))))) H)
T * / c= cis_node_nondegenerate b0 ! c==> cIN b1 * part cdart b0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode b0 b1 f0
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c/\ cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))))), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> c/\ cMEM f1 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 cs_flag_list f0 f3 f2 f1 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ |- ((\d. (!L. (((MEM d) (list_of_darts L)) = ((MEM d) ((find_face L) d))))) d)
T * / ! c= cMEM b0 clist_of_darts b1 cMEM b0 cfind_face b1 b0 f0
- |- ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))
T c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) /\ (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ c= cfind_face f1 f6 f4 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ |- (((!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) ==> ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i)) = ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i))
T c= c==> ! c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cl'z f1 f0 f4 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f7 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 f7
+ |- ((\f. (!u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f)))))) f)
T * / ! ! ! c==> cMEM b3 cbetwn b0 b1 b2 cMEM b3 b0 f0
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f6 c==> cmarked_list f0 f3 f4 f1 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f3 c==> cMEM f4 f3 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f6 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f7 c==> c~ c= f7 f2 c==> c= cnext_el f6 f1 f9 c==> c= cfind_face f0 f1 f6 c==> cMEM f2 f6 c==> cMEM f7 f6 c==> c< cindexf f9 f2 f6 cindexf f9 f7 f6 c==> c= cfind_face f0 f2 f6 c==> c= cparts f0 cbetwn f6 f2 f7 cMAP / cCONS b0 cNIL cbetwn f6 f2 f7 c==> cuniq cbetwn f6 f2 f7 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f6 f2 f7
+ ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((((next_el ((find_face L) x)) x) = w) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c= c==> c= cnext_el cfind_face f0 f1 f1 f2 c= cmap / cFST cHD b0 cparts f0 f3 crev cmap part cFST cbetwn cfind_face f0 f1 f4 f5 c= cmap / cFST cHD b0 cparts f0 f3 crev cmap part cFST cbetwn cfind_face f0 f1 f4 f5
+ |- (((map f1) ((map f2) s)) = ((map (f1 o f2)) s))
T c= cmap f0 cmap f1 f2 cmap * * part co f0 f1 f2
+ |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ztrans L) N) r) x) (NUMERAL _0))) = ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) (((((ztrans L) N) r) x) (NUMERAL _0))))
T c= c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'z f0 f1 f2 f3 f4 c==> c~ c= f4 f5 c==> c= cnext_el f6 f3 f7 c==> c= cfind_face f0 f3 f6 c==> cMEM f5 f6 c==> cMEM f4 f6 c==> c< cindexf f7 f5 f6 cindexf f7 f4 f6 c==> c= cfind_face f0 f5 f6 c==> c= cparts f0 cbetwn f6 f5 f4 cMAP / cCONS b0 cNIL cbetwn f6 f5 f4 c==> cuniq cbetwn f6 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f5 f4 f8 c==> c~ c= cbetwn f6 f5 f4 cNIL c==> c= cparts f0 f8 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f5 f4 c==> cMEM f9 cbetwn f6 f5 f4 c==> cMEM f9 f6 c==> c= cfind_face f0 f9 f6 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f9 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f9 cflatten f0 cFST f9
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= cprev_el f1 f4 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f6 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f7 c==> call / c~ c= b0 cNIL f7 c==> call * part cf_last f0 f7 c==> call * part cloop_list f0 f7 c==> ! c==> cMEM b0 cflatten f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f7 c==> cuniq f1 c==> c= cnext_el f1 f5 f4 c==> cMEM f4 f1 c==> cMEM f3 f1 c==> c= cl'z f0 f7 f1 f2 f4 c==> c~ c= f4 f3 c==> c= cnext_el f6 f2 f8 c==> c= cfind_face f0 f2 f6 c==> cMEM f3 f6 c==> cMEM f4 f6 c==> c< cindexf f8 f3 f6 cindexf f8 f4 f6 c==> c= cfind_face f0 f3 f6 c==> c= cparts f0 cbetwn f6 f3 f4 cMAP / cCONS b0 cNIL cbetwn f6 f3 f4 c==> cuniq cbetwn f6 f3 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f3 f4 f9 c==> c~ c= cbetwn f6 f3 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f3 f4 c==> cMEM f10 cbetwn f6 f3 f4 c==> cMEM f10 f6 c==> c= cfind_face f0 f10 f6 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- (sizel = LENGTH) |- (LENGTH = sizel)
T c==> c= part csizel part cLENGTH c= part cLENGTH part csizel
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ |- (((!p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> b0 b1 * / ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> b0 b1 f3 * / ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> b0 b1 f3
- |- ((((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)))) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))))) = (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)))))
T c= c==> c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
+ (((map (f1 o f2)) s) = ((map f1) ((map f2) s))) |- (((map f1) ((map f2) s)) = ((map (f1 o f2)) s))
T c==> c= cmap * * part co f0 f1 f2 cmap f0 cmap f1 f2 c= cmap f0 cmap f1 f2 cmap * * part co f0 f1 f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ call * part cloop_list f0 f3 ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)), (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c= cFST cPOWER * part cn_list f0 cLAST cupt cNUMERAL cBIT1 c_0 f2 f1 cFST f1
+ |- ((((real_le (real_of_num (NUMERAL _0))) (real_of_int _10350089)) /\ (((real_le (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_int _10350089)) /\ ((real_le (real_of_int _10350089)) (real_of_num (NUMERAL (BIT1 _0)))))) = (~ (((int_le (int_of_num (NUMERAL _0))) _10350089) ==> ((~ ((int_le (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) _10350089)) \/ ((int_lt (int_of_num (NUMERAL (BIT1 _0)))) _10350089)))))
T c= c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c\/ c~ cint_le cint_of_num cNUMERAL cBIT0 cBIT1 c_0 f0 cint_lt cint_of_num cNUMERAL cBIT1 c_0 f0
- (NIL = (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) |- ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)
T c==> c= cNIL cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL
- |- (((!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) ==> ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)) = ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x))
T c= c==> ! ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
+ |- (((((uniq f) /\ (((MEM y) f) /\ (((MEM z) f) /\ (~ (y = z))))) ==> (uniq (((betwn f) y) z))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c= c==> c==> c/\ cuniq f0 c/\ cMEM f1 f0 c/\ cMEM f2 f0 c~ c= f1 f2 cuniq cbetwn f0 f1 f2 c= cmap / cFST cHD b0 cparts f3 f4 crev cmap part cFST cbetwn f0 f1 f2 c= cmap / cFST cHD b0 cparts f3 f4 crev cmap part cFST cbetwn f0 f1 f2
- |- (((all a) s) = (!x. (((MEM x) s) ==> (a x))))
T c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0
+ (good_list L), ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g)))))) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> cgood_list f0 c==> c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ |- (((!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) ==> ((\N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) N)) = ((\N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) N))
T c= c==> ! ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 * / ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 f1 * / ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x), ((\y. ((((l'y L) r) x) = y)) y) |- (((\y. ((((l'y L) r) x) = y)) y) /\ (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> * / c= cl'y f0 f2 f1 b0 f5 c/\ * / c= cl'y f0 f2 f1 b0 f5 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- |- (((!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))) ==> ((\r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))) r)) = ((\r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))) r))
T c= c==> ! c= ccore f0 b0 cMAP * * part co part cFST part cHD cparts f0 b0 * / c= ccore f0 b0 cMAP * * part co part cFST part cHD cparts f0 b0 f1 * / c= ccore f0 b0 cMAP * * part co part cFST part cHD cparts f0 b0 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> c= cnext_el f4 f7 f6 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
- |- ((\L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))) L)
T * / c= cMEM f0 cflatten b0 c? / c/\ cMEM b1 b0 cMEM f0 b1 f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f7 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM d) f), ((MEM d) (((betwn f) y) z)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) x))) ==> (((find_face L) d) = ((find_face L) x))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f10 f4 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> c==> c/\ cuniq clist_of_darts f1 cMEM f10 cfind_face f1 f6 c= cfind_face f1 f10 cfind_face f1 f6 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> c= cfind_face f1 f6 f4 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f10 f4 c==> c= cfind_face f1 f10 f4 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> q')))
T c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 f3 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f3
- |- ((\L. (!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s)))))) L)
T * / ! c= cf_last b0 b1 c= cnext_el b1 cLAST b1 cf_list b0 cLAST b1 f0
+ |- ((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) (sizel ((filter (MEM (FST d))) L)))
T * / c= csizel cfilter * part cMEM cFST f0 f1 b0 csizel cfilter * part cMEM cFST f0 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) /\ ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f1 c==> cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- |- (((!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) ==> ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)) = ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L))
T c= c==> ! ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f10 f4 c==> c= cfind_face f1 f10 f4 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- ((((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> c==> cMEM f1 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- (good_list L), (good_list_nodes L) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))) = (\r. (!x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0 / ! c==> c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f3 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f3 f4 cf_list f1 f4 c==> c= cnext_el f3 f5 f6 c==> c= cprev_el f3 f6 f5 c==> c= cl'y f1 f3 f4 f7 c==> c= cl'z f1 f0 f3 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f3 c==> cMEM f4 clist_of_darts f1 c==> cMEM f7 f3 c==> cMEM f6 f3 c==> cMEM f3 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f3 f4 c==> c~ c= f6 f7 c==> c= cnext_el f2 f4 f8 c==> c= cfind_face f1 f4 f2 c==> cMEM f7 f2 c==> cMEM f6 f2 c==> c< cindexf f8 f7 f2 cindexf f8 f6 f2 c==> c= cfind_face f1 f7 f2 c==> c= cparts f1 cbetwn f2 f7 f6 cMAP / cCONS b0 cNIL cbetwn f2 f7 f6 c==> cuniq cbetwn f2 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f6 f9 c==> c~ c= cbetwn f2 f7 f6 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f6 c==> cMEM f10 cbetwn f2 f7 f6 c==> cMEM f10 f2 c==> c= cfind_face f1 f10 f2 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((!x'. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) x') ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))) ==> ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))) = ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= c==> ! c==> * / c= cztrans f0 f3 f2 f1 cNUMERAL c_0 b1 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1 c==> c? / c= cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1 c==> c? / c= cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
+ (good_list L), ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> cgood_list f0 c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
- |- ((((a = b) ==> ((rev a) = (rev b))) ==> ((a = b) ==> ((rev a) = (rev b)))) = ((a = b) ==> ((rev a) = (rev b))))
T c= c==> c==> c= f0 f1 c= crev f0 crev f1 c==> c= f0 f1 c= crev f0 crev f1 c==> c= f0 f1 c= crev f0 crev f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c/\ c= cfind_face f1 f4 f9 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
- |- ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y)))
T c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) ((((l'z L) N) r) x))))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 cl'z f1 f0 f5 f6 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- (((all a) s) = (!x. (((MEM x) s) ==> (a x)))) |- ((!x. (((MEM x) s) ==> (a x))) = ((all a) s))
T c==> c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0 c= ! c==> cMEM b0 f1 * f0 b0 call f0 f1
+ |- ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)
T * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cl'z f1 f0 f4 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> c= cfind_face f1 f2 f8 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f7 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> c~ c= f7 f3 c==> c= cnext_el f8 f2 f9 c==> c= cfind_face f1 f2 f8 c==> cMEM f3 f8 c==> cMEM f7 f8 c==> c< cindexf f9 f3 f8 cindexf f9 f7 f8 c==> c= cfind_face f1 f3 f8 c==> c= cparts f1 cbetwn f8 f3 f7 cMAP / cCONS b0 cNIL cbetwn f8 f3 f7 c==> cuniq cbetwn f8 f3 f7 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn f8 f3 f7
+ |- ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))
T c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L))
T c= c==> ! ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0
- |- ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)
T * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((((MEM z) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> cmarked_list f0 f2 f1 f3 c= c==> cMEM f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f3 f6 cl'z f0 f2 f1 f3 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 f3 c~ cfinal_list f0 f1 cMEM cztrans f0 f2 f1 f3 cNUMERAL c_0 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f3 f6 cl'z f0 f2 f1 f3
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f4 c==> cMEM f5 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c= cl'z f0 f6 f1 f5 f2 c==> c~ c= f2 f7 c==> c= cnext_el f4 f5 f8 c==> c= cfind_face f0 f5 f4 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f7 f4 cindexf f8 f2 f4 c==> c= cfind_face f0 f7 f4 c==> c= cparts f0 cbetwn f4 f7 f2 cMAP / cCONS b0 cNIL cbetwn f4 f7 f2 c==> cuniq cbetwn f4 f7 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f4 f7 f2 f9 c==> c~ c= cbetwn f4 f7 f2 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f4 f7 f2 c==> cMEM f10 cbetwn f4 f7 f2 c==> cMEM f10 f4 c==> c= cfind_face f0 f10 f4 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) = T)
T c==> cmarked_list f0 f1 f2 f3 c= cmarked_list f0 f1 f2 f3 cT
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) /\ ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f1 c==> cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ (good_list L), (((find_face L) d) = f), ((MEM d) f) |- (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2 cT
- |- (((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L)))) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> q')))) = ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> q'))))
T c= c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 f2 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 f2 c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 f2 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 f2
+ |- (!f2. (!s. ((!x. (((MEM x) s) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (f2 x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) s) = ((map f2) s)))))
T c==> ! c==> cMEM b0 f0 c= * / cFST cHD crev cmap / cPOWER * part cn_list f1 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f1 b0 * f2 b0 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 f0 cmap f2 f0
- |- ((((find_face L) x) = f) = ((\f. (((find_face L) x) = f)) f))
T c= c= cfind_face f0 f1 f2 * / c= cfind_face f0 f1 b0 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) /\ (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((sizel ((filter (MEM (FST d))) L)) = a) ==> (?a. ((sizel ((filter (MEM (FST d))) L)) = a)))
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0
- |- (((!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) ==> ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)) = ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2))
T c= c==> ! c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
+ (is_restricted (hypermap_of_list L)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f4 f3 c==> cMEM f3 f1 c==> cMEM f5 f1 c==> c= cl'z f0 f6 f1 f2 f3 c==> c~ c= f3 f5 c==> c= cnext_el f7 f2 f8 c==> c= cfind_face f0 f2 f7 c==> cMEM f5 f7 c==> cMEM f3 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f3 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f3 cMAP / cCONS b0 cNIL cbetwn f7 f5 f3 c==> cuniq cbetwn f7 f5 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f3 f9 c==> c~ c= cbetwn f7 f5 f3 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f3 c==> cMEM f10 cbetwn f7 f5 f3 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- |- (((!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))) ==> ((\s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))) s)) = ((\s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))) s))
T c= c==> ! c= cf_last f0 b0 c= cnext_el b0 cLAST b0 cf_list f0 cLAST b0 * / c= cf_last f0 b0 c= cnext_el b0 cLAST b0 cf_list f0 cLAST b0 f1 * / c= cf_last f0 b0 c= cnext_el b0 cLAST b0 cf_list f0 cLAST b0 f1
- ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((\w. (((next_el ((find_face L) x)) x) = w)) w) /\ (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c/\ * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- ((((real_gt x) (real_of_num (NUMERAL _0))) /\ ((real_ge y) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt f0 creal_of_num cNUMERAL c_0 creal_ge f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul f0 f1 creal_of_num cNUMERAL c_0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c/\ cuniq cflatten f3 c/\ call / c~ c= b0 cNIL f3 c/\ call * part cf_last f0 f3 c/\ call * part cloop_list f0 f3 ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 f5 cl'z f0 f1 f2 f3 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 f5 cl'z f0 f1 f2 f3
+ |- (((!v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM d) (list_of_darts L)) /\ ((FST d) = v))))) ==> ((CARD ((node (hypermap_of_list L)) d)) = (LENGTH ((facesAt_list L) v))))) ==> ((\v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM d) (list_of_darts L)) /\ ((FST d) = v))))) ==> ((CARD ((node (hypermap_of_list L)) d)) = (LENGTH ((facesAt_list L) v))))) (FST d))) = ((\v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM d) (list_of_darts L)) /\ ((FST d) = v))))) ==> ((CARD ((node (hypermap_of_list L)) d)) = (LENGTH ((facesAt_list L) v))))) (FST d)))
T c= c==> ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM f1 clist_of_darts f0 c= cFST f1 b0 c= cCARD * * part cnode chypermap_of_list f0 f1 cLENGTH cfacesAt_list f0 b0 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM f1 clist_of_darts f0 c= cFST f1 b0 c= cCARD * * part cnode chypermap_of_list f0 f1 cLENGTH cfacesAt_list f0 b0 cFST f1 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM f1 clist_of_darts f0 c= cFST f1 b0 c= cCARD * * part cnode chypermap_of_list f0 f1 cLENGTH cfacesAt_list f0 b0 cFST f1
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)) |- (~ (NIL = (((betwn f) y) ((((l'z L) N) r) x))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c~ c= cNIL cbetwn f0 f1 cl'z f2 f3 f4 f5
+ |- (((((uniq (flatten N)) /\ ((MEM r) N)) ==> (uniq r)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c= c==> c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1 c= cmap / cFST cHD b0 cparts f2 f3 crev cmap part cFST cbetwn cfind_face f2 f4 f5 cl'z f2 f0 f1 f4 c= cmap / cFST cHD b0 cparts f2 f3 crev cmap part cFST cbetwn cfind_face f2 f4 f5 cl'z f2 f0 f1 f4
- (is_restricted (hypermap_of_list L)) |- ((is_restricted (hypermap_of_list L)) = T)
T c==> cis_restricted chypermap_of_list f0 c= cis_restricted chypermap_of_list f0 cT
+ |- ((((rev b) = (rev b)) ==> F) = F)
T c= c==> c= crev f0 crev f0 cF cF
+ (good_list L), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) /\ ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f2 c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) f) /\ (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- |- (((!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (p' ==> q'))))) ==> ((\q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (p' ==> q'))))) q')) = ((\q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 f2 c==> c==> f2 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b1 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b1 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> f2 b0 * / c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 f2 c==> c==> f2 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b1 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b1 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> f2 b0 f3 * / c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 f2 c==> c==> f2 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b1 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b1 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> f2 b0 f3
- (is_no_double_joins (hypermap_of_list L)) |- ((is_no_double_joins (hypermap_of_list L)) = T)
T c==> cis_no_double_joins chypermap_of_list f0 c= cis_no_double_joins chypermap_of_list f0 cT
- |- (((!x'. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) x') ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))) ==> ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))) = ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))))
T c= c==> ! c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b1 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b1 c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- (((!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) ==> ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)) = ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x))
T c= c==> ! c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
- |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 f4 c==> cmarked_list f0 f3 f1 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 f4 c==> c~ c= cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 cNIL c==> cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (f_last L)) N) /\ (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10350089)) /\ (((real_le (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_int _10350089)) /\ ((real_le (real_of_int _10350089)) (real_of_num (NUMERAL (BIT1 _0)))))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((?y. ((((l'y L) r) x) = y)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))) = (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c= c==> c? / c= cl'y f0 f1 f2 b0 c= cmap * * part co part cFST part cHD cparts f0 f3 crev cmap part cFST cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f4 f1 f2 c= cmap * * part co part cFST part cHD cparts f0 f3 crev cmap part cFST cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f4 f1 f2
+ |- ((T /\ F) = F)
T c= c/\ cT cF cF
+ |- (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d))) = ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> q')))
T c==> c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 f3 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f10 f4 c==> c= cfind_face f1 f10 f4 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f3 cl'z f1 f0 f5 f6 f7 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- |- ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))
T c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- (~ ((((betwn f) y) z) = NIL)) |- ((NIL = (((betwn f) y) z)) = F)
T c==> c~ c= cbetwn f0 f1 f2 cNIL c= c= cNIL cbetwn f0 f1 f2 cF
+ |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _10350089) ==> ((~ ((int_le (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) _10350089)) \/ ((int_lt (int_of_num (NUMERAL (BIT1 _0)))) _10350089)))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c\/ c~ cint_le cint_of_num cNUMERAL cBIT0 cBIT1 c_0 f0 cint_lt cint_of_num cNUMERAL cBIT1 c_0 f0
+ |- ((m < n) = ((int_lt (int_of_num m)) (int_of_num n)))
T c= c< f0 f1 cint_lt cint_of_num f0 cint_of_num f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f7 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> c= cl'z f1 f0 f4 f2 f7 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) |- (~ (NIL = ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c~ c= cNIL cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2
- |- (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))
T c= cf_last f0 f1 c= cnext_el f1 cLAST f1 cf_list f0 cLAST f1
- |- ((\q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q'))))) q')
T * / c==> c= c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3 c==> c==> f3 c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b0 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> f3 b0 f4
+ |- ((!x. (((MEM x) (((betwn f) y) z)) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (FST x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) (((betwn f) y) z)) = ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cbetwn f0 f1 f2 c= * / cFST cHD crev cmap / cPOWER * part cn_list f3 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f3 b0 cFST b0 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f0 f1 f2 cmap part cFST cbetwn f0 f1 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f10 f4 c==> c= cfind_face f1 f10 f4 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- ((\x. (((MEM x) (rev s)) = ((MEM x) s))) x)
T * / c= cMEM b0 crev f0 cMEM b0 f0 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ |- ((\L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))))) L)
T * / c==> c/\ cuniq b0 call part cuniq b0 c= csizel cfilter / c= b1 cFST f0 cflatten b0 csizel cfilter * part cMEM cFST f0 b0 f1
- |- (((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))) = ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))))
T c= c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0
- ((good_list L) /\ ((MEM d) (list_of_darts L))), (((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))) |- (((good_list L) /\ ((MEM d) (list_of_darts L))) /\ ((FST (((POWER (n_list L)) n) d)) = (FST d)))
T c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c==> c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1 c/\ c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM d) f), ((MEM d) (((betwn f) y) z)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((find_face L) d) = f) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f10 f4 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> c= cfind_face f1 f10 f4 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ |- ((\d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))) x)
T * / ! c==> cuniq clist_of_darts b1 cuniq cfind_face b1 b0 f0
- |- (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))
T c= cMEM f0 ccat f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))))))), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> c/\ cnormal_list f0 f3 c/\ cMEM f2 f3 c/\ cMEM f1 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0
- (uniq (((betwn f) y) z)) |- ((uniq (((betwn f) y) z)) = T)
T c==> cuniq cbetwn f0 f1 f2 c= cuniq cbetwn f0 f1 f2 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> cMEM f3 f9 c==> cMEM f2 f9 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> c= cfind_face f1 f3 f9 c==> c= cparts f1 cbetwn f9 f3 f2 cMAP / cCONS b0 cNIL cbetwn f9 f3 f2 c==> cuniq cbetwn f9 f3 f2 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 cbetwn f2 f3 f4 c==> cMEM f1 f2 c==> c= cfind_face f0 f1 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ |- (((!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
- (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((!s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) ==> ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s)) = ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s))
T c= c==> ! ! c= cMEM b1 crev b0 cMEM b1 b0 * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0 * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f) |- ((((find_face L) d) = f) /\ ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c/\ c= cfind_face f0 f1 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
- (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) x))))) |- ((x IN (dart (hypermap_of_list L))) ==> (((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) x))) = T))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c==> cIN f1 * part cdart chypermap_of_list f0 c= c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 f1 cT
+ |- (((!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) ==> ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)) = ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L))
T c= c==> ! ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
- |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) = ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1))
T c= c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c~ c= f1 f2 c==> c= cnext_el f3 f4 f5 c==> c= cfind_face f0 f4 f3 c==> cMEM f2 f3 c==> cMEM f1 f3 c==> c< cindexf f5 f2 f3 cindexf f5 f1 f3 c==> c= cfind_face f0 f2 f3 c==> c= cparts f0 cbetwn f3 f2 f1 cMAP / cCONS b0 cNIL cbetwn f3 f2 f1 c==> cuniq cbetwn f3 f2 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f3 f2 f1 f6 c==> c~ c= cbetwn f3 f2 f1 cNIL c==> c= cparts f0 f6 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f3 f2 f1 c==> cMEM f7 cbetwn f3 f2 f1 c==> cMEM f7 f3 c==> c= cfind_face f0 f7 f3 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f7 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f7 cflatten f0 cFST f7
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> c? / c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f6 c==> c~ c= f6 f2 c==> c= cnext_el f8 f1 f9 c==> c= cfind_face f0 f1 f8 c==> cMEM f2 f8 c==> cMEM f6 f8 c==> c< cindexf f9 f2 f8 cindexf f9 f6 f8 c==> c= cfind_face f0 f2 f8 c==> c= cparts f0 cbetwn f8 f2 f6 cMAP / cCONS b0 cNIL cbetwn f8 f2 f6 c==> cuniq cbetwn f8 f2 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f8 f2 f6
+ |- (((!L. (((good_list L) /\ (good_list_nodes L)) ==> ((simple_hypermap (hypermap_of_list L)) = ((all uniq) L)))) ==> ((\L. (((good_list L) /\ (good_list_nodes L)) ==> ((simple_hypermap (hypermap_of_list L)) = ((all uniq) L)))) L)) = ((\L. (((good_list L) /\ (good_list_nodes L)) ==> ((simple_hypermap (hypermap_of_list L)) = ((all uniq) L)))) L))
T c= c==> ! c==> c/\ cgood_list b0 cgood_list_nodes b0 c= csimple_hypermap chypermap_of_list b0 call part cuniq b0 * / c==> c/\ cgood_list b0 cgood_list_nodes b0 c= csimple_hypermap chypermap_of_list b0 call part cuniq b0 f0 * / c==> c/\ cgood_list b0 cgood_list_nodes b0 c= csimple_hypermap chypermap_of_list b0 call part cuniq b0 f0
+ (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> ! c==> cMEM b0 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f) |- ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (uniq f), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f3 f4 cf_list f0 f4 c==> c= cprev_el f3 f5 f6 c==> c= cl'y f0 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> cMEM f4 f3 c==> cMEM f4 clist_of_darts f0 c==> cMEM f3 f2 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f2 c==> cs_flag_list f0 f2 f3 f4 c==> call / c~ c= b0 cNIL f2 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f3 c==> c= cnext_el f3 f6 f5 c==> cMEM f5 f3 c==> cMEM f7 f3 c==> c= cl'z f0 f2 f3 f4 f5 c==> c~ c= f5 f7 c==> c= cnext_el f1 f4 f8 c==> c= cfind_face f0 f4 f1 c==> cMEM f7 f1 c==> cMEM f5 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f5 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f5 cMAP / cCONS b0 cNIL cbetwn f1 f7 f5 c==> cuniq cbetwn f1 f7 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f5 f9 c==> c~ c= cbetwn f1 f7 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f5 c==> cMEM f10 cbetwn f1 f7 f5 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))) |- ((!d. ((d IN (dart (hypermap_of_list L))) ==> ((\d. ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) d))) = (!d. (((MEM d) (list_of_darts L)) ==> ((\d. ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) d))))
T c==> ! c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 c= ! c==> cIN b0 * part cdart chypermap_of_list f0 * / c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b1 b0 ! c==> cMEM b0 clist_of_darts f0 * / c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b1 b0
+ ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) |- ((((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g) ==> ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))) = ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))))
T c==> c= cl'y f0 f1 f2 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f4 f1 f2 f5 c= c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 f5 c==> c~ c= cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f4 c==> cMEM f1 f4 c==> cMEM f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cs_flag_list f0 f4 f1 f2 c==> c= cl'y f0 f1 f2 f3 c==> c= cprev_el f1 f6 f7 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 c==> c~ c= cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f4 c==> cMEM f1 f4 c==> cMEM f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cs_flag_list f0 f4 f1 f2 c==> c= cl'y f0 f1 f2 f3 c==> c= cprev_el f1 f6 f7 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2
- |- ((\x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) x0)
T * / c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> cuniq f1 c==> cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- |- ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)
T * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> c= cfind_face f1 f2 f8 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f7 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> c= cl'z f1 f0 f4 f2 f7 c==> c~ c= f7 f3 c==> c= cnext_el f8 f2 f9 c==> c= cfind_face f1 f2 f8 c==> cMEM f3 f8 c==> cMEM f7 f8 c==> c< cindexf f9 f3 f8 cindexf f9 f7 f8 c==> c= cfind_face f1 f3 f8 c==> c= cparts f1 cbetwn f8 f3 f7 cMAP / cCONS b0 cNIL cbetwn f8 f3 f7 c==> cuniq cbetwn f8 f3 f7 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn f8 f3 f7
+ (uniq (flatten N)) |- ((uniq (flatten N)) = T)
T c==> cuniq cflatten f0 c= cuniq cflatten f0 cT
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) ==> ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f1 f3 cl'z f0 f2 f1 f3 f4 c==> c~ c= cbetwn cfind_face f0 f3 cl'y f0 f1 f3 cl'z f0 f2 f1 f3 cNIL c==> cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f1 f3 cl'z f0 f2 f1 f3
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f6 c==> cmarked_list f0 f3 f4 f1 c==> cnormal_list f0 f3 c==> cMEM f4 f3 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f6 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f7 c==> c~ c= f7 f2 c==> c= cnext_el f6 f1 f9 c==> c= cfind_face f0 f1 f6 c==> cMEM f2 f6 c==> cMEM f7 f6 c==> c< cindexf f9 f2 f6 cindexf f9 f7 f6 c==> c= cfind_face f0 f2 f6 c==> c= cparts f0 cbetwn f6 f2 f7 cMAP / cCONS b0 cNIL cbetwn f6 f2 f7 c==> cuniq cbetwn f6 f2 f7 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f6 f2 f7
+ (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f), ((all uniq) L) |- ((((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = ((((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM d) (list_of_darts L)) /\ ((FST d) = (FST d)))))) ==> ((CARD ((node (hypermap_of_list L)) d)) = (LENGTH ((facesAt_list L) (FST d))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> call part cuniq f0 c= c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM f1 clist_of_darts f0 c= cFST f1 cFST f1 c= cCARD * * part cnode chypermap_of_list f0 f1 cLENGTH cfacesAt_list f0 cFST f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) |- ((((map (\x. (FST (HD x)))) (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) = (rev ((map FST) (((betwn f) y) z)))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> c= cparts f0 f1 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f3 f4 c= c= cmap / cFST cHD b0 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f3 f4 crev cmap part cFST cbetwn f2 f3 f4 c= cmap / cFST cHD b0 cparts f0 f1 crev cmap part cFST cbetwn f2 f3 f4
+ |- ((\x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) x)
T * / ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 f3
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g)))), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ c~ cfinal_list f0 f1 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 f4 c/\ c~ c= cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 cNIL cuniq f4 c==> cmarked_list f0 f3 f1 f2 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 crev cmap part cFST cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2
- (~ ((dart (hypermap_of_list L)) = EMPTY)) |- (((~ (EMPTY = (dart (hypermap_of_list L)))) ==> ((EMPTY = (dart (hypermap_of_list L))) = F)) = ((EMPTY = (dart (hypermap_of_list L))) = F))
T c==> c~ c= * part cdart chypermap_of_list f0 part cEMPTY c= c==> c~ c= part cEMPTY * part cdart chypermap_of_list f0 c= c= part cEMPTY * part cdart chypermap_of_list f0 cF c= c= part cEMPTY * part cdart chypermap_of_list f0 cF
- |- ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL)))
T c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
- |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- ((((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))) = T)
T c= c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cT
- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) |- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1)
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), ((MEM d) (flatten N)) |- (((MEM d) (flatten N)) /\ ((((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))) = T))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cMEM f2 cflatten f0 c/\ cMEM f2 cflatten f0 c= cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0 cT
- |- (((!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) ==> ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)) = ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1))
T c= c==> ! ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- |- ((\r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))) r)
T * / c= ccore f0 b0 cMAP * * part co part cFST part cHD cparts f0 b0 f1
- |- (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))
T c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
- (NIL = ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))) |- (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)
T c==> c= cNIL cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL
+ ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((MEM (SUC (NUMERAL _0))) ((upt (NUMERAL (BIT1 _0))) a)) /\ (((n_list L) d) = (((POWER (n_list L)) (SUC (NUMERAL _0))) d))) = ((\x. (((MEM x) ((upt (NUMERAL (BIT1 _0))) a)) /\ (((n_list L) d) = (((POWER (n_list L)) x) d)))) (SUC (NUMERAL _0))))
T c= c/\ cMEM cSUC cNUMERAL c_0 cupt cNUMERAL cBIT1 c_0 f0 c= cn_list f1 f2 cPOWER * part cn_list f1 cSUC cNUMERAL c_0 f2 * / c/\ cMEM b0 cupt cNUMERAL cBIT1 c_0 f0 c= cn_list f1 f2 cPOWER * part cn_list f1 b0 f2 cSUC cNUMERAL c_0
- |- (MAP = map)
T c= part cMAP part cmap
+ |- (LENGTH = sizel)
T c= part cLENGTH part csizel
- |- ((uniq (rev s)) = (uniq s))
T c= cuniq crev f0 cuniq f0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f1 c==> c= cnext_el f1 f6 f5 c==> cMEM f5 f1 c==> cMEM f4 f1 c==> c= cl'z f0 f3 f1 f2 f5 c==> c~ c= f5 f4 c==> c= cnext_el f7 f2 f8 c==> c= cfind_face f0 f2 f7 c==> cMEM f4 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f5 cMAP / cCONS b0 cNIL cbetwn f7 f4 f5 c==> cuniq cbetwn f7 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 f9 c==> c~ c= cbetwn f7 f4 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 c==> cMEM f10 cbetwn f7 f4 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f3 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ |- ((\s. (((uniq (flatten N)) /\ ((MEM s) N)) ==> (uniq s))) r)
T * / c==> c/\ cuniq cflatten f0 cMEM b0 f0 cuniq b0 f1
+ |- (((!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) d2))) ==> (((find_face L) d) = ((find_face L) d2))))) ==> ((\d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) d2))) ==> (((find_face L) d) = ((find_face L) d2))))) x)) = ((\d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) d2))) ==> (((find_face L) d) = ((find_face L) d2))))) x))
T c= c==> ! ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 * / ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 f1 * / ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 f1
- |- (((!q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q'))))) ==> ((\q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q'))))) q')) = ((\q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 b0 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 c==> f1 b0 * / c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 b0 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 c==> f1 b0 f4 * / c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 b0 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 c==> f1 b0 f4
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))))), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f3 c/\ cMEM f2 f3 c/\ cMEM f1 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c= cmap * * part co part cFST part cHD cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f3 f6 cl'z f1 f2 f0 f3 c= cmap * * part co part cFST part cHD cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f3 f6 cl'z f1 f2 f0 f3
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) |- (~ (NIL = (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c~ c= cNIL cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> * / c= cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 f7 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) /\ ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f3 cl'z f1 f0 f5 f6 f7 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (is_node_nondegenerate (hypermap_of_list L)), (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- (((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))) /\ ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cis_node_nondegenerate chypermap_of_list f0 c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c/\ c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ call * part cf_last f0 f3 c/\ call * part cloop_list f0 f3 ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq r) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c/\ cuniq f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ |- ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))))
T c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cFST cLAST cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2
+ (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((~ ((dart (hypermap_of_list L)) = EMPTY)) /\ ((planar_hypermap (hypermap_of_list L)) /\ ((plain_hypermap (hypermap_of_list L)) /\ ((connected_hypermap (hypermap_of_list L)) /\ ((simple_hypermap (hypermap_of_list L)) /\ ((is_no_double_joins (hypermap_of_list L)) /\ ((is_edge_nondegenerate (hypermap_of_list L)) /\ ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))))))))))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> c/\ c~ c= * part cdart chypermap_of_list f0 part cEMPTY c/\ cplanar_hypermap chypermap_of_list f0 c/\ cplain_hypermap chypermap_of_list f0 c/\ cconnected_hypermap chypermap_of_list f0 c/\ csimple_hypermap chypermap_of_list f0 c/\ cis_no_double_joins chypermap_of_list f0 c/\ cis_edge_nondegenerate chypermap_of_list f0 c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (good_list L) |- (((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = (((good_list L) ==> (uniq L)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))
T c==> cgood_list f0 c= c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1 c==> c==> cgood_list f0 cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ |- ((\L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s)))) N)
T * / ! c==> c/\ cuniq cflatten b0 cMEM b1 b0 cuniq b1 f0
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (!z. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 ! c==> * / c= cztrans f0 f3 f2 f1 cNUMERAL c_0 b1 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1
+ |- ((\N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))) N)
T * / ! ! ! c= cztrans f0 b0 b1 b2 b3 cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
+ (~ ((((betwn f) y) z) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), ((((marked_list L) N) r) x) |- (((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))
T c==> c~ c= cbetwn f0 f1 f2 cNIL c==> c~ cfinal_list f3 f4 c==> cuniq f5 c==> cgood_list f3 c==> cgood_list_nodes f3 c==> c= cl'y f3 f4 f6 f1 c==> c= cl'z f3 f7 f4 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f0 f1 f2 f5 c==> c= cfind_face f3 f6 f0 c==> cmarked_list f3 f7 f4 f6 c= c==> c= cparts f3 f5 crev cmap / cmap / cPOWER * part cn_list f3 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f0 f1 f2 c= cmap / cFST cHD b0 cparts f3 f5 crev cmap part cFST cbetwn f0 f1 f2 c==> c==> c/\ cgood_list f3 c/\ cgood_list_nodes f3 c/\ cmarked_list f3 f7 f4 f6 c/\ c~ cfinal_list f3 f4 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn cfind_face f3 f6 cl'y f3 f4 f6 cl'z f3 f7 f4 f6 f5 c/\ c~ c= cbetwn cfind_face f3 f6 cl'y f3 f4 f6 cl'z f3 f7 f4 f6 cNIL cuniq f5 c= cparts f3 f5 crev cmap / cmap / cPOWER * part cn_list f3 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn cfind_face f3 f6 cl'y f3 f4 f6 cl'z f3 f7 f4 f6 c= cmap / cFST cHD b0 cparts f3 f5 crev cmap part cFST cbetwn f0 f1 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cuniq cflatten f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f3 f4 c==> cMEM f4 f2 c==> cMEM f5 f2 c==> c= cl'z f0 f1 f2 f6 f4 c==> c~ c= f4 f5 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f5 f7 c==> cMEM f4 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f4 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f4 cMAP / cCONS b0 cNIL cbetwn f7 f5 f4 c==> cuniq cbetwn f7 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 f9 c==> c~ c= cbetwn f7 f5 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 c==> cMEM f10 cbetwn f7 f5 f4 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) /\ (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f5 f3 cl'z f1 f0 f4 f5 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c/\ c= cnext_el f4 f7 f8 c==> cMEM f8 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 f4 c==> cmarked_list f0 f3 f1 f2 c==> c~ c= cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 cNIL c==> cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2
+ |- (!s. ((!x. (((MEM x) s) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (FST x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) s) = ((map FST) s))))
T c==> ! c==> cMEM b0 f0 c= * / cFST cHD crev cmap / cPOWER * part cn_list f1 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f1 b0 cFST b0 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 f0 cmap part cFST f0
+ (is_restricted (hypermap_of_list L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L) |- ((uniq (((betwn f) y) z)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cuniq cbetwn f1 f2 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cuniq cbetwn f1 f2 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 f4 c==> c~ c= cbetwn f1 f2 f3 cNIL c==> c= cparts f0 f4 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 c==> cMEM f5 cbetwn f1 f2 f3 c==> cMEM f5 f1 c==> c= cfind_face f0 f5 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f5 cflatten f0 cFST f5
+ |- (((!f2. (!s. (((map f1) ((map f2) s)) = ((map (f1 o f2)) s)))) ==> ((\f2. (!s. (((map f1) ((map f2) s)) = ((map (f1 o f2)) s)))) f2)) = ((\f2. (!s. (((map f1) ((map f2) s)) = ((map (f1 o f2)) s)))) f2))
T c= c==> ! ! c= cmap f0 cmap b0 b1 cmap * * part co f0 b0 b1 * / ! c= cmap f0 cmap b0 b1 cmap * * part co f0 b0 b1 f1 * / ! c= cmap f0 cmap b0 b1 cmap * * part co f0 b0 b1 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM d) f), ((MEM d) (((betwn f) y) z)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((MEM d) f) /\ ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f10 f4 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c/\ cMEM f10 f4 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ |- ((\u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f))))) y)
T * / ! ! c==> cMEM b2 cbetwn f0 b0 b1 cMEM b2 f0 f1
- |- ((((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) = ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))
T c= c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
+ |- (((!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) ==> ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) (NUMERAL _0)))) = ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) (NUMERAL _0))))
T c= c==> ! ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f1 f4 f5 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f5 f3 cl'z f1 f0 f4 f5 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f7 c==> c~ c= f7 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f7 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f7 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f7 cMAP / cCONS b0 cNIL cbetwn f2 f3 f7 c==> cuniq cbetwn f2 f3 f7 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f7
- |- (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))))
T c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2
- |- (((!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) ==> ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)) = ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s))
T c= c==> ! c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((\y. ((((l'y L) r) x) = y)) y) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> * / c= cl'y f0 f2 f1 b0 f5 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- |- (((!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) ==> ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)) = ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i))
T c= c==> ! c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c/\ ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ (is_restricted (hypermap_of_list L)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L) |- ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f1 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f5 f6 c==> cMEM f6 f4 c==> cMEM f7 f4 c==> c= cl'z f0 f3 f4 f2 f6 c==> c~ c= f6 f7 c==> c= cnext_el f1 f2 f8 c==> c= cfind_face f0 f2 f1 c==> cMEM f7 f1 c==> cMEM f6 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f6 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f6 cMAP / cCONS b0 cNIL cbetwn f1 f7 f6 c==> cuniq cbetwn f1 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 f9 c==> c~ c= cbetwn f1 f7 f6 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 c==> cMEM f10 cbetwn f1 f7 f6 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))) = (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- (a = b) |- (((a = b) ==> ((rev a) = (rev b))) ==> ((rev a) = (rev b)))
T c==> c= f0 f1 c==> c==> c= f0 f1 c= crev f0 crev f1 c= crev f0 crev f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((good_list L) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cgood_list f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (T = ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))
T c= cT creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f3 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f3 f4 cf_list f1 f4 c==> c= cprev_el f3 f5 f6 c==> c= cl'y f1 f3 f4 f7 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f3 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f3 f4 c==> c= cnext_el f3 f6 f5 c==> cMEM f5 f3 c==> cMEM f7 f3 c==> c= cl'z f1 f0 f3 f4 f5 c==> c~ c= f5 f7 c==> c= cnext_el f2 f4 f8 c==> c= cfind_face f1 f4 f2 c==> cMEM f7 f2 c==> cMEM f5 f2 c==> c< cindexf f8 f7 f2 cindexf f8 f5 f2 c==> c= cfind_face f1 f7 f2 c==> c= cparts f1 cbetwn f2 f7 f5 cMAP / cCONS b0 cNIL cbetwn f2 f7 f5 c==> cuniq cbetwn f2 f7 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f5 f9 c==> c~ c= cbetwn f2 f7 f5 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f5 c==> cMEM f10 cbetwn f2 f7 f5 c==> cMEM f10 f2 c==> c= cfind_face f1 f10 f2 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) |- (((~ (NIL = (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))) ==> ((NIL = (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = F)) = ((NIL = (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = F))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c= c==> c~ c= cNIL cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 c= c= cNIL cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cF c= c= cNIL cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cF
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((MEM d) (((betwn f) y) z)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = T)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c= c==> cMEM f10 cbetwn f4 f3 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f3 cl'z f1 f0 f5 f6 f7 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d))
T c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
- |- ((((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) ==> (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)))
T c==> c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
- |- ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)
T * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- |- (((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) ==> ((\s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) s)) = ((\s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) s))
T c= c==> ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 * / ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 f0 * / ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 f0
- |- ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))
T c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0
+ |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- |- (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) ==> ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)) = ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1))
T c= c==> ! ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- (((find_face L) x) = f) |- ((((find_face L) x) = f) /\ (?f. (((find_face L) x) = f)))
T c==> c= cfind_face f0 f1 f2 c/\ c= cfind_face f0 f1 f2 c? / c= cfind_face f0 f1 b0
- |- ((((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL))) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> q')))) = (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> q'))))
T c= c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c==> c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 f3 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f3 c==> c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 f3 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f3
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (good_list L), (good_list_nodes L) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) = (\r. (!x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 / ! c==> c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- (((!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) ==> ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N)) = ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N))
T c= c==> ! ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1
- |- ((~ (_10350033 = _10350034)) \/ ((rev _10350033) = (rev _10350034)))
T c\/ c~ c= f0 f1 c= crev f0 crev f1
- |- (((!x'. (((\y. ((((l'y L) r) x) = y)) x') ==> (?y. ((((l'y L) r) x) = y)))) ==> ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y)))) = ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y))))
T c= c==> ! c==> * / c= cl'y f0 f1 f2 b1 b0 c? / c= cl'y f0 f1 f2 b1 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cPOWER * part cn_list f0 cLAST cupt cNUMERAL cBIT1 c_0 f2 f1 cFST f1
- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- ((((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))) = (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c= c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- (REVERSE = rev) |- (rev = REVERSE)
T c==> c= part cREVERSE part crev c= part crev part cREVERSE
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cmarked_list f2 f3 f4 f5 c==> cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (((betwn f) y) z)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ cMEM f4 f3 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((\a. (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)))) a)
T * / c==> c<= cNUMERAL cBIT0 cBIT1 c_0 b0 c~ c= cupt cNUMERAL cBIT1 c_0 b0 cNIL f0
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> c? / c= cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f3 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)) |- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))
T c==> c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4 c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
+ |- (((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c= c==> c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 f5 cl'z f0 f1 f2 f3 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 f5 cl'z f0 f1 f2 f3
+ (uniq L), ((all uniq) L) |- ((((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = ((((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L)))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))
T c==> cuniq f0 c==> call part cuniq f0 c= c==> c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1 c==> c==> c/\ cuniq f0 call part cuniq f0 c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ |- (((!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) ==> ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)) = ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f))
T c= c==> ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ |- (((!H. ((is_node_nondegenerate H) = (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node H) x))))))) ==> ((\H. ((is_node_nondegenerate H) = (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node H) x))))))) H)) = ((\H. ((is_node_nondegenerate H) = (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node H) x))))))) H))
T c= c==> ! c= cis_node_nondegenerate b0 ! c==> cIN b1 * part cdart b0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode b0 b1 * / c= cis_node_nondegenerate b0 ! c==> cIN b1 * part cdart b0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode b0 b1 f0 * / c= cis_node_nondegenerate b0 ! c==> cIN b1 * part cdart b0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode b0 b1 f0
- |- (((!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ==> ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)) = ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1))
T c= c==> ! ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) /\ ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cl'y f2 f4 f5 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c/\ c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\b. (!a. ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))) b)
T * / ! c==> c~ c==> c= b1 b0 c= crev b1 crev b0 cF f0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq r) /\ ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f1 f4 f5 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f5 f3 cl'z f1 f0 f4 f5 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c/\ cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f7 c==> c~ c= f7 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f7 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f7 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f7 cMAP / cCONS b0 cNIL cbetwn f2 f3 f7 c==> cuniq cbetwn f2 f3 f7 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f7
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c/\ cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- (((((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ |- (((!v. (!w. (((MEM w) (((betwn f) y) v)) ==> ((MEM w) f)))) ==> ((\v. (!w. (((MEM w) (((betwn f) y) v)) ==> ((MEM w) f)))) z)) = ((\v. (!w. (((MEM w) (((betwn f) y) v)) ==> ((MEM w) f)))) z))
T c= c==> ! ! c==> cMEM b1 cbetwn f0 f1 b0 cMEM b1 f0 * / ! c==> cMEM b1 cbetwn f0 f1 b0 cMEM b1 f0 f2 * / ! c==> cMEM b1 cbetwn f0 f1 b0 cMEM b1 f0 f2
+ ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = ((((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))
T c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1 c==> c==> cMEM f1 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ cuniq cflatten f3 c/\ call / c~ c= b0 cNIL f3 c/\ call * part cf_last f0 f3 c/\ call * part cloop_list f0 f3 ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((\g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)))) g)
T * / ! c= cMAP b0 cMAP f0 b1 cMAP * * part co b0 f0 b1 f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) /\ ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)))
T c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c==> cgood_list f1 c==> c= csizel cfilter * part cMEM cFST f2 f1 f0 c==> c= cfind_face f1 f2 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f2 f1 c==> cMEM f2 f3 c/\ c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cuniq f8 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f6 c==> c~ c= f6 f2 c==> c= cnext_el f8 f1 f9 c==> c= cfind_face f0 f1 f8 c==> cMEM f2 f8 c==> cMEM f6 f8 c==> c< cindexf f9 f2 f8 cindexf f9 f6 f8 c==> c= cfind_face f0 f2 f8 c==> c= cparts f0 cbetwn f8 f2 f6 cMAP / cCONS b0 cNIL cbetwn f8 f2 f6 c==> cuniq cbetwn f8 f2 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f8 f2 f6
+ |- (((!s. ((!x. (((MEM x) s) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (FST x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) s) = ((map FST) s)))) ==> ((\s. ((!x. (((MEM x) s) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (FST x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) s) = ((map FST) s)))) (((betwn f) y) z))) = ((\s. ((!x. (((MEM x) s) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (FST x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) s) = ((map FST) s)))) (((betwn f) y) z)))
T c= c==> ! c==> ! c==> cMEM b1 b0 c= * / cFST cHD crev cmap / cPOWER * part cn_list f0 b2 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 b1 cFST b1 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 b0 cmap part cFST b0 * / c==> ! c==> cMEM b1 b0 c= * / cFST cHD crev cmap / cPOWER * part cn_list f0 b2 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 b1 cFST b1 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 b0 cmap part cFST b0 cbetwn f1 f2 f3 * / c==> ! c==> cMEM b1 b0 c= * / cFST cHD crev cmap / cPOWER * part cn_list f0 b2 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 b1 cFST b1 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 b0 cmap part cFST b0 cbetwn f1 f2 f3
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))) = T)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c= c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0 cT
- |- (((!a. ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) ==> ((\a. ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) a)) = ((\a. ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) a))
T c= c==> ! c==> c~ c==> c= b0 f0 c= crev b0 crev f0 cF * / c==> c~ c==> c= b0 f0 c= crev b0 crev f0 cF f1 * / c==> c~ c==> c= b0 f0 c= crev b0 crev f0 cF f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) /\ (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cmarked_list f0 f3 f4 f1 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f3 c==> cMEM f4 f3 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- (((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c= c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c= cparts f0 f4 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn f5 f6 f7 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn f5 f6 f7
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f3 f4 c==> cMEM f4 f2 c==> cMEM f5 f2 c==> c= cl'z f0 f1 f2 f6 f4 c==> c~ c= f4 f5 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f5 f7 c==> cMEM f4 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f4 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f4 cMAP / cCONS b0 cNIL cbetwn f7 f5 f4 c==> cuniq cbetwn f7 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 f9 c==> c~ c= cbetwn f7 f5 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 c==> cMEM f10 cbetwn f7 f5 f4 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ ((sizel ((filter (MEM (FST d))) L)) = a), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- (((NUMERAL (BIT0 (BIT1 _0))) <= a) = T)
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c<= cNUMERAL cBIT0 cBIT1 c_0 f2 cT
+ |- ((?x. (?x. (((MEM x) ((upt (NUMERAL (BIT1 _0))) a)) /\ (x = (((POWER (n_list L)) x) d))))) = (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)))
T c= c? / c? / c/\ cMEM b1 cupt cNUMERAL cBIT1 c_0 f0 c= b0 cPOWER * part cn_list f1 b1 f2 c~ c= cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cNIL
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (uniq L), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) d) = f), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM d) f), ((MEM d) (((betwn f) y) z)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((uniq L) /\ ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cuniq f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f10 f4 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f10 f4 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c/\ cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ (good_list L), (((find_face L) d) = f), ((MEM d) f) |- (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f3 c= cFST cPOWER * part cn_list f0 cPRE f3 f1 cFST f1
+ |- ((\d. (((MEM d) (list_of_darts L)) ==> ((\d. ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) d))) = (\d. (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))))
T c= / c==> cMEM b0 clist_of_darts f0 * / c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b1 b0 / c==> cMEM b0 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0
+ |- (((!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) ==> ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)) = ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r))
T c= c==> ! ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
+ |- ((\L. ((good_list L) ==> (uniq L))) L)
T * / c==> cgood_list b0 cuniq b0 f0
+ |- ((\r. (((uniq r) /\ (((MEM y) r) /\ (((MEM z) r) /\ (~ (y = z))))) ==> (uniq (((betwn r) y) z)))) f)
T * / c==> c/\ cuniq b0 c/\ cMEM f0 b0 c/\ cMEM f1 b0 c~ c= f0 f1 cuniq cbetwn b0 f0 f1 f2
+ |- (((NUMERAL (BIT1 _0)) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
- |- (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((LET f) x) = (f x))
T c= cLET f0 f1 * f0 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((s_flag_list L) N) r) x) |- (((((s_flag_list L) N) r) x) /\ (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cs_flag_list f0 f1 f2 f3 c/\ cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f3 clist_of_darts f0 c==> cuniq cflatten f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f6 f5 c==> cMEM f5 f2 c==> cMEM f4 f2 c==> c= cl'z f0 f1 f2 f3 f5 c==> c~ c= f5 f4 c==> c= cnext_el f7 f3 f8 c==> c= cfind_face f0 f3 f7 c==> cMEM f4 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f5 cMAP / cCONS b0 cNIL cbetwn f7 f4 f5 c==> cuniq cbetwn f7 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 f9 c==> c~ c= cbetwn f7 f4 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 c==> cMEM f10 cbetwn f7 f4 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- |- (((~ p) ==> p) = p)
T c= c==> c~ f0 f0 f0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- (((rev ((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) (((betwn f) y) z))) = (rev ((map FST) (((betwn f) y) z)))) = (((map (\x. (FST (HD x)))) (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) = (rev ((map FST) (((betwn f) y) z)))))
T c= c= crev cmap / cFST cHD crev cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 crev cmap part cFST cbetwn f1 f2 f3 c= cmap / cFST cHD b0 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 crev cmap part cFST cbetwn f1 f2 f3
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ |- ((((~ ((dart (hypermap_of_list L)) = EMPTY)) /\ ((planar_hypermap (hypermap_of_list L)) /\ ((plain_hypermap (hypermap_of_list L)) /\ ((connected_hypermap (hypermap_of_list L)) /\ ((simple_hypermap (hypermap_of_list L)) /\ ((is_no_double_joins (hypermap_of_list L)) /\ ((is_edge_nondegenerate (hypermap_of_list L)) /\ ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))))))))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = ((is_restricted (hypermap_of_list L)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))
T c= c==> c/\ c~ c= * part cdart chypermap_of_list f0 part cEMPTY c/\ cplanar_hypermap chypermap_of_list f0 c/\ cplain_hypermap chypermap_of_list f0 c/\ cconnected_hypermap chypermap_of_list f0 c/\ csimple_hypermap chypermap_of_list f0 c/\ cis_no_double_joins chypermap_of_list f0 c/\ cis_edge_nondegenerate chypermap_of_list f0 c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1 c==> cis_restricted chypermap_of_list f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))
T c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ |- (?y. ((((l'y L) r) x) = y))
T c? / c= cl'y f0 f1 f2 b0
+ |- (((!x. (!v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM x) (list_of_darts L)) /\ ((FST x) = v))))) ==> ((CARD ((node (hypermap_of_list L)) x)) = (LENGTH ((facesAt_list L) v)))))) ==> ((\x. (!v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM x) (list_of_darts L)) /\ ((FST x) = v))))) ==> ((CARD ((node (hypermap_of_list L)) x)) = (LENGTH ((facesAt_list L) v)))))) d)) = ((\x. (!v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM x) (list_of_darts L)) /\ ((FST x) = v))))) ==> ((CARD ((node (hypermap_of_list L)) x)) = (LENGTH ((facesAt_list L) v)))))) d))
T c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM b0 clist_of_darts f0 c= cFST b0 b1 c= cCARD * * part cnode chypermap_of_list f0 b0 cLENGTH cfacesAt_list f0 b1 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM b0 clist_of_darts f0 c= cFST b0 b1 c= cCARD * * part cnode chypermap_of_list f0 b0 cLENGTH cfacesAt_list f0 b1 f1 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM b0 clist_of_darts f0 c= cFST b0 b1 c= cCARD * * part cnode chypermap_of_list f0 b0 cLENGTH cfacesAt_list f0 b1 f1
- |- ((\l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))) l)
T * / c= cMEM f0 cMAP f1 b0 c? / c/\ cMEM b1 b0 c= f0 * f1 b1 f2
- |- (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))
T c= cMEM f0 cMAP f1 f2 c? / c/\ cMEM b0 f2 c= f0 * f1 b0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 f5 c==> cmarked_list f0 f4 f1 f2 c==> c~ c= cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f4 c==> cMEM f1 f4 c==> cMEM f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cs_flag_list f0 f4 f1 f2 c==> c= cl'y f0 f1 f2 f3 c==> c= cprev_el f1 f6 f7 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))) = T)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c= c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- ((\l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))) l)
T * / c= cMAP f0 cMAP f1 b0 cMAP * * part co f0 f1 b0 f2
+ |- ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ |- (((!L. (!x. (!v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM x) (list_of_darts L)) /\ ((FST x) = v))))) ==> ((CARD ((node (hypermap_of_list L)) x)) = (LENGTH ((facesAt_list L) v))))))) ==> ((\L. (!x. (!v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM x) (list_of_darts L)) /\ ((FST x) = v))))) ==> ((CARD ((node (hypermap_of_list L)) x)) = (LENGTH ((facesAt_list L) v))))))) L)) = ((\L. (!x. (!v. (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM x) (list_of_darts L)) /\ ((FST x) = v))))) ==> ((CARD ((node (hypermap_of_list L)) x)) = (LENGTH ((facesAt_list L) v))))))) L))
T c= c==> ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ call part cuniq b0 c/\ cMEM b1 clist_of_darts b0 c= cFST b1 b2 c= cCARD * * part cnode chypermap_of_list b0 b1 cLENGTH cfacesAt_list b0 b2 * / ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ call part cuniq b0 c/\ cMEM b1 clist_of_darts b0 c= cFST b1 b2 c= cCARD * * part cnode chypermap_of_list b0 b1 cLENGTH cfacesAt_list b0 b2 f0 * / ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ call part cuniq b0 c/\ cMEM b1 clist_of_darts b0 c= cFST b1 b2 c= cCARD * * part cnode chypermap_of_list b0 b1 cLENGTH cfacesAt_list b0 b2 f0
+ |- ((\r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) r)
T * / ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 f2
+ |- ((((uniq r) ==> (((next_el r) ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0)))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c= c==> c==> cuniq f0 c= cnext_el f0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cztrans f1 f2 f0 f3 cNUMERAL c_0 c= cmap / cFST cHD b0 cparts f1 f4 crev cmap part cFST cbetwn cfind_face f1 f3 f5 cl'z f1 f2 f0 f3 c= cmap / cFST cHD b0 cparts f1 f4 crev cmap part cFST cbetwn cfind_face f1 f3 f5 cl'z f1 f2 f0 f3
- (~ ((dart (hypermap_of_list L)) = EMPTY)) |- ((EMPTY = (dart (hypermap_of_list L))) = F)
T c==> c~ c= * part cdart chypermap_of_list f0 part cEMPTY c= c= part cEMPTY * part cdart chypermap_of_list f0 cF
- |- ((\f. (!x. (((LET f) x) = (f x)))) f)
T * / ! c= cLET b0 b1 * b0 b1 f0
+ (((next_el ((find_face L) x)) x) = w), (((find_face L) x) = f) |- (((next_el f) x) = w)
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c==> c= cfind_face f0 f1 f3 c= cnext_el f3 f1 f2
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- (((!L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) ==> ((\L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) L)) = ((\L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) L))
T c= c==> ! ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 * / ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 f0 * / ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 f0
+ (good_list L), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- (!a. (((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f2 ! c==> * / c= csizel cfilter * part cMEM cFST f1 f0 b1 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- (((MAP (g o f)) l) = ((MAP g) ((MAP f) l))) |- (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))
T c==> c= cMAP * * part co f0 f1 f2 cMAP f0 cMAP f1 f2 c= cMAP f0 cMAP f1 f2 cMAP * * part co f0 f1 f2
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cparts f0 cbetwn f1 f2 f3 cMAP / cCONS b0 cNIL cbetwn f1 f2 f3 c==> cuniq cbetwn f1 f2 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 f4 c==> c~ c= cbetwn f1 f2 f3 cNIL c==> c= cparts f0 f4 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 c==> cMEM f5 cbetwn f1 f2 f3 c==> cMEM f5 f1 c==> c= cfind_face f0 f5 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f5 cflatten f0 cFST f5
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (!d. (((MEM d) (((betwn f) y) z)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 ! c==> cMEM b0 cbetwn f4 f3 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cFST b0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ call / c~ c= b0 cNIL f3 c/\ call * part cf_last f0 f3 c/\ call * part cloop_list f0 f3 ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) ==> ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)) = ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N))
T c= c==> ! ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
+ |- (((!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) ==> ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)) = ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N))
T c= c==> ! ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
+ |- ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)
T * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f1 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f5 f6 c==> cMEM f6 f4 c==> cMEM f7 f4 c==> c= cl'z f0 f3 f4 f2 f6 c==> c~ c= f6 f7 c==> c= cnext_el f1 f2 f8 c==> c= cfind_face f0 f2 f1 c==> cMEM f7 f1 c==> cMEM f6 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f6 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f6 cMAP / cCONS b0 cNIL cbetwn f1 f7 f6 c==> cuniq cbetwn f1 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 f9 c==> c~ c= cbetwn f1 f7 f6 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 c==> cMEM f10 cbetwn f1 f7 f6 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f3 f2 c==> cMEM f4 f2 c==> c< cindexf f5 f3 f2 cindexf f5 f4 f2 c==> c= cfind_face f0 f3 f2 c==> c= cparts f0 cbetwn f2 f3 f4 cMAP / cCONS b0 cNIL cbetwn f2 f3 f4 c==> cuniq cbetwn f2 f3 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f3 f4 f6 c==> c~ c= cbetwn f2 f3 f4 cNIL c==> c= cparts f0 f6 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f3 f4 c==> cMEM f7 cbetwn f2 f3 f4 c==> cMEM f7 f2 c==> c= cfind_face f0 f7 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f7 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f7 cflatten f0 cFST f7
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((MEM y) f) /\ (((MEM z) f) /\ ((((indexf w) y) f) < (((indexf w) z) f)))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((MEM y) f) /\ (((MEM z) f) /\ ((((indexf w) y) f) < (((indexf w) z) f)))) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> c/\ cMEM f3 f9 c/\ cMEM f2 f9 c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c/\ c/\ cMEM f3 f9 c/\ cMEM f2 f9 c< cindexf f8 f3 f9 cindexf f8 f2 f9 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z) |- ((((next_el r) z1) = z) /\ (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c/\ c= cnext_el f1 f2 f3 c==> cMEM f3 f1 c==> cMEM f4 f1 c==> c= cl'z f0 f5 f1 f6 f3 c==> c~ c= f3 f4 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f4 f7 c==> cMEM f3 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f3 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f3 cMAP / cCONS b0 cNIL cbetwn f7 f4 f3 c==> cuniq cbetwn f7 f4 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f3 f9 c==> c~ c= cbetwn f7 f4 f3 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f3 c==> cMEM f10 cbetwn f7 f4 f3 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- |- ((filter = FILTER) /\ ((rev = REVERSE) /\ ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL)))))
T c/\ c= part cfilter part cFILTER c/\ c= part crev part cREVERSE c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) |- (T = (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cT c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL
- (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) |- ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) /\ (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))))
T c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c/\ c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f9 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> c= cfind_face f1 f3 f9 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
- (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) |- ((NIL = ((upt (NUMERAL (BIT1 _0))) a)) = F)
T c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cNIL cupt cNUMERAL cBIT1 c_0 f0 cF
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2 cT
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)
T * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
- (NIL = (((betwn f) y) ((((l'z L) N) r) x))) |- ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)
T c==> c= cNIL cbetwn f0 f1 cl'z f2 f3 f4 f5 c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f10 f4 c==> c= cfind_face f1 f10 f4 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- (((sizel ((filter (MEM (FST d))) L)) = a) /\ ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)))))
T c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c/\ c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cPOWER * part cn_list f0 cLAST cupt cNUMERAL cBIT1 c_0 f2 f1 cFST f1
+ |- (((!a. (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((LAST ((upt (NUMERAL (BIT1 _0))) a)) = (PRE a)))) ==> ((\a. (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((LAST ((upt (NUMERAL (BIT1 _0))) a)) = (PRE a)))) a)) = ((\a. (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((LAST ((upt (NUMERAL (BIT1 _0))) a)) = (PRE a)))) a))
T c= c==> ! c==> c<= cNUMERAL cBIT0 cBIT1 c_0 b0 c= cLAST cupt cNUMERAL cBIT1 c_0 b0 cPRE b0 * / c==> c<= cNUMERAL cBIT0 cBIT1 c_0 b0 c= cLAST cupt cNUMERAL cBIT1 c_0 b0 cPRE b0 f0 * / c==> c<= cNUMERAL cBIT0 cBIT1 c_0 b0 c= cLAST cupt cNUMERAL cBIT1 c_0 b0 cPRE b0 f0
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) /\ (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c/\ c= cl'y f0 f2 f1 f5 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq r) /\ ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c/\ cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f7 c==> c~ c= f7 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f7 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f7 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f7 cMAP / cCONS b0 cNIL cbetwn f2 f3 f7 c==> cuniq cbetwn f2 f3 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f7 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f7
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f3 clist_of_darts f0 c==> cuniq cflatten f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f6 f5 c==> cMEM f5 f2 c==> cMEM f4 f2 c==> c= cl'z f0 f1 f2 f3 f5 c==> c~ c= f5 f4 c==> c= cnext_el f7 f3 f8 c==> c= cfind_face f0 f3 f7 c==> cMEM f4 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f5 cMAP / cCONS b0 cNIL cbetwn f7 f4 f5 c==> cuniq cbetwn f7 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 f9 c==> c~ c= cbetwn f7 f4 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 c==> cMEM f10 cbetwn f7 f4 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) /\ ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- |- (((real_add (real_of_num m)) (real_neg (real_of_num m))) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_of_num f0 creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0
+ |- ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L)
T * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
+ |- (((sizel ((filter (MEM (FST d))) L)) = (sizel ((filter (MEM (FST d))) L))) = ((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) (sizel ((filter (MEM (FST d))) L))))
T c= c= csizel cfilter * part cMEM cFST f0 f1 csizel cfilter * part cMEM cFST f0 f1 * / c= csizel cfilter * part cMEM cFST f0 f1 b0 csizel cfilter * part cMEM cFST f0 f1
+ |- (((!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q'))))) ==> ((\q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q'))))) q')) = ((\q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 c==> f1 b0 * / c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 c==> f1 b0 f4 * / c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 c==> f1 b0 f4
+ (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)))
T c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f10 f4 c==> c= cfind_face f1 f10 f4 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- |- (((!t. ((LET_END t) = t)) ==> ((\t. ((LET_END t) = t)) t)) = ((\t. ((LET_END t) = t)) t))
T c= c==> ! c= cLET_END b0 b0 * / c= cLET_END b0 b0 f0 * / c= cLET_END b0 b0 f0
+ |- ((((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = (((normal_list L) N) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c= c==> c/\ cuniq cflatten f0 c/\ call / c~ c= b0 cNIL f0 c/\ call * part cf_last f1 f0 c/\ call * part cloop_list f1 f0 ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c= cmap / cFST cHD b0 cparts f1 f2 crev cmap part cFST cbetwn cfind_face f1 f3 f4 cl'z f1 f0 f5 f3 c==> cnormal_list f1 f0 c= cmap / cFST cHD b0 cparts f1 f2 crev cmap part cFST cbetwn cfind_face f1 f3 f4 cl'z f1 f0 f5 f3
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((all (\s. (~ (s = NIL)))) N) |- (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> call / c~ c= b0 cNIL f1 c/\ call / c~ c= b0 cNIL f1 c==> call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f3 f4 c==> cMEM f4 f2 c==> cMEM f5 f2 c==> c= cl'z f0 f1 f2 f6 f4 c==> c~ c= f4 f5 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f5 f7 c==> cMEM f4 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f4 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f4 cMAP / cCONS b0 cNIL cbetwn f7 f5 f4 c==> cuniq cbetwn f7 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 f9 c==> c~ c= cbetwn f7 f5 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 c==> cMEM f10 cbetwn f7 f5 f4 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> c= cfind_face f1 f4 f9 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ |- (((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))))) ==> ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))))) L)) = ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))))) L))
T c= c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list b0 b4 b4 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f0 c/\ c~ c= cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cNIL cuniq f0 c= cparts b0 f0 crev cmap / cmap / cPOWER * part cn_list b0 b4 b4 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list b0 b4 b4 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f0 c/\ c~ c= cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cNIL cuniq f0 c= cparts b0 f0 crev cmap / cmap / cPOWER * part cn_list b0 b4 b4 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f1 * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list b0 b4 b4 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f0 c/\ c~ c= cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cNIL cuniq f0 c= cparts b0 f0 crev cmap / cmap / cPOWER * part cn_list b0 b4 b4 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f1
- |- ((?f. (((find_face L) x) = f)) ==> (?f. (((find_face L) x) = f)))
T c==> c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0
- |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))) = ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))))
T c= c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> c/\ cMEM f2 f3 c/\ cMEM f1 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 cs_flag_list f0 f3 f2 f1 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- (good_list L) |- ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((~ ((final_list L) r)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g) ==> ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f4 cl'z f0 f1 f2 f3 f5 c==> c~ c= cbetwn cfind_face f0 f3 f4 cl'z f0 f1 f2 f3 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f3 f4 cl'z f0 f1 f2 f3
+ ((sizel ((filter (MEM (FST d))) L)) = a), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)))
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f2 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f2 f0 cFST f0 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f2 f0 cFST f0
+ |- (((!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) ==> ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i)) = ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i))
T c= c==> ! c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4
- |- (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) = ((a = b) ==> ((rev a) = (rev b))))
T c= c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c= f0 f1 c= crev f0 crev f1
- (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (x IN (dart (hypermap_of_list L))) |- ((x IN (dart (hypermap_of_list L))) /\ (((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))) = T))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cIN f1 * part cdart chypermap_of_list f0 c/\ cIN f1 * part cdart chypermap_of_list f0 c= c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 f1 cT
+ |- (((!p'. (!q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL b0 c==> c==> b0 c= c= cFST cHD crev cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b1 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cHD crev cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> b0 b1 * / ! c==> c= c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL b0 c==> c==> b0 c= c= cFST cHD crev cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b1 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cHD crev cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> b0 b1 f3 * / ! c==> c= c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL b0 c==> c==> b0 c= c= cFST cHD crev cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b1 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cHD crev cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> b0 b1 f3
+ |- ((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))) = T)
T c= ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 f2 c/\ c~ c= cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 cNIL cuniq f2 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 crev cmap part cFST cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 cT
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ |- ((\z. (!y. (!r. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq (((betwn r) z) y)))))) y)
T * / ! ! c==> c/\ cuniq b2 c/\ cMEM b0 b2 c/\ cMEM b1 b2 c~ c= b0 b1 cuniq cbetwn b2 b0 b1 f0
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
- |- ((\y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))) y)
T * / ! c= cMEM b0 cMAP f0 b1 c? / c/\ cMEM b2 b1 c= b0 * f0 b2 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)) |- (((((betwn f) y) ((((l'z L) N) r) x)) = NIL) = F)
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c= c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL cF
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((uniq (flatten N)) /\ ((MEM r) N)) ==> (uniq r)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> c==> c/\ cuniq cflatten f0 cMEM f4 f0 cuniq f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM r) N) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c/\ cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f3 clist_of_darts f0 c==> cuniq cflatten f2 c==> call / c~ c= b0 cNIL f2 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f1 c==> c= cnext_el f1 f6 f5 c==> cMEM f5 f1 c==> cMEM f4 f1 c==> c= cl'z f0 f2 f1 f3 f5 c==> c~ c= f5 f4 c==> c= cnext_el f7 f3 f8 c==> c= cfind_face f0 f3 f7 c==> cMEM f4 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f5 cMAP / cCONS b0 cNIL cbetwn f7 f4 f5 c==> cuniq cbetwn f7 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 f9 c==> c~ c= cbetwn f7 f4 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 c==> cMEM f10 cbetwn f7 f4 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- (~ ((((betwn f) y) z) = NIL)) |- (((~ (NIL = (((betwn f) y) z))) ==> ((NIL = (((betwn f) y) z)) = F)) = ((NIL = (((betwn f) y) z)) = F))
T c==> c~ c= cbetwn f0 f1 f2 cNIL c= c==> c~ c= cNIL cbetwn f0 f1 f2 c= c= cNIL cbetwn f0 f1 f2 cF c= c= cNIL cbetwn f0 f1 f2 cF
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cl'z f1 f0 f4 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f7 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> c==> c/\ cgood_list f1 c/\ cgood_list_nodes f1 c/\ cmarked_list f1 f0 f4 f2 c~ cfinal_list f1 f4 c~ c= cztrans f1 f0 f4 f2 cNUMERAL c_0 cytrans f1 f0 f4 f2 cNUMERAL c_0 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 f7
- |- (((!p'. (!q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 b1 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> b0 b1 * / ! c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 b1 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> b0 b1 f3 * / ! c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 b1 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> b0 b1 f3
+ |- (((!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) x))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = ((is_node_nondegenerate (hypermap_of_list L)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))
T c= c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1 c==> cis_node_nondegenerate chypermap_of_list f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- |- ((\s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) s)
T * / ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 f0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 f5 c==> cmarked_list f0 f4 f1 f2 c==> c~ c= cbetwn f6 f3 cl'z f0 f4 f1 f2 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f4 c==> cMEM f1 f4 c==> cMEM f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cs_flag_list f0 f4 f1 f2 c==> c= cl'y f0 f1 f2 f3 c==> c= cprev_el f1 f7 f8 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f6 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f4 c==> call / c~ c= b0 cNIL f4 c==> call * part cf_last f0 f4 c==> call * part cloop_list f0 f4 c==> ! c==> cMEM b0 cflatten f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f4 c==> cuniq f1 c==> c= cnext_el f1 f8 f7 c==> cMEM f7 f1 c==> cMEM f3 f1 c==> c= cl'z f0 f4 f1 f2 f7 c==> c~ c= f7 f3 c==> c= cnext_el f6 f2 f9 c==> c= cfind_face f0 f2 f6 c==> cMEM f3 f6 c==> cMEM f7 f6 c==> c< cindexf f9 f3 f6 cindexf f9 f7 f6 c==> c= cfind_face f0 f3 f6 c==> c= cparts f0 cbetwn f6 f3 f7 cMAP / cCONS b0 cNIL cbetwn f6 f3 f7 c==> cuniq cbetwn f6 f3 f7 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f6 f3 f7
+ |- ((\r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))))) r)
T * / ! ! c= cytrans f0 f1 b0 b1 b2 cl'y f0 crtrans f0 f1 b0 b1 b2 b1 f2
+ |- ((\f. (((find_face L) x) = f)) ((find_face L) x))
T * / c= cfind_face f0 f1 b0 cfind_face f0 f1
- (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))) |- ((\P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))) P)
T c==> ! c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 * / c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 f1
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) /\ ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f) |- (((~ ((dart (hypermap_of_list L)) = EMPTY)) /\ ((planar_hypermap (hypermap_of_list L)) /\ ((plain_hypermap (hypermap_of_list L)) /\ ((connected_hypermap (hypermap_of_list L)) /\ ((simple_hypermap (hypermap_of_list L)) /\ ((is_no_double_joins (hypermap_of_list L)) /\ ((is_edge_nondegenerate (hypermap_of_list L)) /\ ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))))))))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> c/\ c~ c= * part cdart chypermap_of_list f0 part cEMPTY c/\ cplanar_hypermap chypermap_of_list f0 c/\ cplain_hypermap chypermap_of_list f0 c/\ cconnected_hypermap chypermap_of_list f0 c/\ csimple_hypermap chypermap_of_list f0 c/\ cis_no_double_joins chypermap_of_list f0 c/\ cis_edge_nondegenerate chypermap_of_list f0 c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> c= cfind_face f1 f4 f9 c==> cMEM f3 f9 c==> cMEM f2 f9 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> c= cfind_face f1 f3 f9 c==> c= cparts f1 cbetwn f9 f3 f2 cMAP / cCONS b0 cNIL cbetwn f9 f3 f2 c==> cuniq cbetwn f9 f3 f2 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
- |- ((?x. t) = t)
T c= c? / f0 f0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1
- |- ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)
T * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
+ (!d. (((MEM d) (((betwn f) y) z)) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) d) = (FST d)))) |- (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) (((betwn f) y) z)) = ((map FST) (((betwn f) y) z)))
T c==> ! c==> cMEM b0 cbetwn f0 f1 f2 c= * / cFST cHD crev cmap / cPOWER * part cn_list f3 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f3 b0 cFST b0 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f0 f1 f2 cmap part cFST cbetwn f0 f1 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((!x'. (((\w. (((next_el ((find_face L) x)) x) = w)) x') ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))) ==> ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))) = ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= c==> ! c==> * / c= cnext_el cfind_face f1 f4 f4 b1 b0 c= cmap / cFST cHD b1 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2 c==> c? / c= cnext_el cfind_face f1 f4 f4 b0 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2 c==> c? / c= cnext_el cfind_face f1 f4 f4 b0 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) /\ ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c/\ c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ |- (((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) ==> ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) x)) = ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) x))
T c= c==> ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f3 c/\ c~ c= cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 cNIL cuniq f3 c= cparts f0 f3 crev cmap / cmap / cPOWER * part cn_list f0 b1 b1 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f3 c/\ c~ c= cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 cNIL cuniq f3 c= cparts f0 f3 crev cmap / cmap / cPOWER * part cn_list f0 b1 b1 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f4 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f3 c/\ c~ c= cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 cNIL cuniq f3 c= cparts f0 f3 crev cmap / cmap / cPOWER * part cn_list f0 b1 b1 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f4
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f6 c==> c~ c= f6 f2 c==> c= cnext_el f8 f1 f9 c==> c= cfind_face f0 f1 f8 c==> cMEM f2 f8 c==> cMEM f6 f8 c==> c< cindexf f9 f2 f8 cindexf f9 f6 f8 c==> c= cfind_face f0 f2 f8 c==> c= cparts f0 cbetwn f8 f2 f6 cMAP / cCONS b0 cNIL cbetwn f8 f2 f6 c==> cuniq cbetwn f8 f2 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f8 f2 f6
- |- ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)
T * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x), ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) /\ (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> * / c= cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 f7 c/\ * / c= cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 f7 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 c==> cs_flag_list f0 f3 f2 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1
- (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL) |- (NIL = ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))
T c==> c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cNIL cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f2 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1
- |- ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)
T * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
- ((all (loop_list L)) N) |- (((all (loop_list L)) N) = T)
T c==> call * part cloop_list f0 f1 c= call * part cloop_list f0 f1 cT
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x)
T * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0
- |- (((a = b) ==> ((rev a) = (rev b))) ==> ((a = b) ==> ((rev a) = (rev b))))
T c==> c==> c= f0 f1 c= crev f0 crev f1 c==> c= f0 f1 c= crev f0 crev f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f8 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f6 c==> c~ c= f6 f2 c==> c= cnext_el f8 f1 f9 c==> c= cfind_face f0 f1 f8 c==> cMEM f2 f8 c==> cMEM f6 f8 c==> c< cindexf f9 f2 f8 cindexf f9 f6 f8 c==> c= cfind_face f0 f2 f8 c==> c= cparts f0 cbetwn f8 f2 f6 cMAP / cCONS b0 cNIL cbetwn f8 f2 f6 c==> cuniq cbetwn f8 f2 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f8 f2 f6
+ |- (((!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) ==> ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x)) = ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x))
T c= c==> ! ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ (is_node_nondegenerate (hypermap_of_list L)), (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- (((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cis_node_nondegenerate chypermap_of_list f0 c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el ((find_face L) x)) x) = w) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c/\ c= cnext_el cfind_face f1 f4 f4 f8 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
+ (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((planar_hypermap (hypermap_of_list L)) /\ ((plain_hypermap (hypermap_of_list L)) /\ ((connected_hypermap (hypermap_of_list L)) /\ ((simple_hypermap (hypermap_of_list L)) /\ ((is_no_double_joins (hypermap_of_list L)) /\ ((is_edge_nondegenerate (hypermap_of_list L)) /\ ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x)))))))))))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> c/\ cplanar_hypermap chypermap_of_list f0 c/\ cplain_hypermap chypermap_of_list f0 c/\ cconnected_hypermap chypermap_of_list f0 c/\ csimple_hypermap chypermap_of_list f0 c/\ cis_no_double_joins chypermap_of_list f0 c/\ cis_edge_nondegenerate chypermap_of_list f0 c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
- |- ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f9 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> c= cfind_face f1 f3 f9 c==> c= cparts f1 cbetwn f9 f3 f2 cMAP / cCONS b0 cNIL cbetwn f9 f3 f2 c==> cuniq cbetwn f9 f3 f2 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
- |- ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> q')))
T c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 f2 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM d) f) |- (((MEM d) f) /\ ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c/\ cMEM f1 f2 c==> c= cfind_face f0 f1 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cl'y f2 f4 f5 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 b0 cNUMERAL c_0 cytrans f0 f1 f2 b0 cNUMERAL c_0
- (~ (t = NIL)) |- ((~ (t = NIL)) /\ ((HD (rev t)) = (LAST t)))
T c==> c~ c= f0 cNIL c/\ c~ c= f0 cNIL c= cHD crev f0 cLAST f0
- ((all (\s. (~ (s = NIL)))) N) |- (((all (\s. (~ (s = NIL)))) N) = T)
T c==> call / c~ c= b0 cNIL f0 c= call / c~ c= b0 cNIL f0 cT
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f8 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c==> c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f8 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x), ((\f. (((find_face L) x) = f)) f) |- (((\f. (((find_face L) x) = f)) f) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> * / c= cfind_face f1 f4 b0 f9 c/\ * / c= cfind_face f1 f4 b0 f9 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
+ |- (((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM d) (list_of_darts L)) /\ ((FST d) = (FST d)))))) ==> ((CARD ((node (hypermap_of_list L)) d)) = (LENGTH ((facesAt_list L) (FST d)))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM f1 clist_of_darts f0 c= cFST f1 cFST f1 c= cCARD * * part cnode chypermap_of_list f0 f1 cLENGTH cfacesAt_list f0 cFST f1
- |- (all = ALL)
T c= part call part cALL
+ |- (((!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) ==> ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L)) = ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L))
T c= c==> ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1
- (all = ALL) |- (ALL = all)
T c==> c= part call part cALL c= part cALL part call
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> cMEM f7 f4 c==> cMEM f3 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (uniq f), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f3 f4 cf_list f0 f4 c==> c= cprev_el f3 f5 f6 c==> c= cl'y f0 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> cMEM f4 f3 c==> cMEM f4 clist_of_darts f0 c==> cMEM f3 f2 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> call / c~ c= b0 cNIL f2 c==> cnormal_list f0 f2 c==> cs_flag_list f0 f2 f3 f4 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f3 c==> c= cnext_el f3 f6 f5 c==> cMEM f5 f3 c==> cMEM f7 f3 c==> c= cl'z f0 f2 f3 f4 f5 c==> c~ c= f5 f7 c==> c= cnext_el f1 f4 f8 c==> c= cfind_face f0 f4 f1 c==> cMEM f7 f1 c==> cMEM f5 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f5 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f5 cMAP / cCONS b0 cNIL cbetwn f1 f7 f5 c==> cuniq cbetwn f1 f7 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f5 f9 c==> c~ c= cbetwn f1 f7 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f5 c==> cMEM f10 cbetwn f1 f7 f5 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (is_node_nondegenerate (hypermap_of_list L)), (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))
T c==> cis_node_nondegenerate chypermap_of_list f0 c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) r) /\ (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f8 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c/\ cMEM f8 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f8 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
- |- ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s)
T * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0
+ |- ((\f1. (!f2. (!s. (((map f1) ((map f2) s)) = ((map (f1 o f2)) s))))) f1)
T * / ! ! c= cmap b0 cmap b1 b2 cmap * * part co b0 b1 b2 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\f. ((~ (s = NIL)) ==> ((LAST ((MAP f) s)) = (f (LAST s))))) f)
T * / c==> c~ c= f0 cNIL c= cLAST cMAP b0 f0 * b0 cLAST f0 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((all (f_last L)) N) |- (((all (f_last L)) N) /\ (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> call * part cf_last f0 f1 c/\ call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f3 f4 c==> cMEM f4 f2 c==> cMEM f5 f2 c==> c= cl'z f0 f1 f2 f6 f4 c==> c~ c= f4 f5 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f5 f7 c==> cMEM f4 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f4 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f4 cMAP / cCONS b0 cNIL cbetwn f7 f5 f4 c==> cuniq cbetwn f7 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 f9 c==> c~ c= cbetwn f7 f5 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 c==> cMEM f10 cbetwn f7 f5 f4 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ ((sizel ((filter (MEM (FST d))) L)) = a), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- (((NUMERAL _0) < (SUC (NUMERAL _0))) /\ ((SUC (NUMERAL _0)) < a))
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c/\ c< cNUMERAL c_0 cSUC cNUMERAL c_0 c< cSUC cNUMERAL c_0 f2
+ |- (((!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) ==> ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)) = ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x))
T c= c==> ! c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cuniq f1 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f5 f6 c==> cMEM f6 f4 c==> cMEM f7 f4 c==> c= cl'z f0 f3 f4 f2 f6 c==> c~ c= f6 f7 c==> c= cnext_el f1 f2 f8 c==> c= cfind_face f0 f2 f1 c==> cMEM f7 f1 c==> cMEM f6 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f6 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f6 cMAP / cCONS b0 cNIL cbetwn f1 f7 f6 c==> cuniq cbetwn f1 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 f9 c==> c~ c= cbetwn f1 f7 f6 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 c==> cMEM f10 cbetwn f1 f7 f6 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ |- (((!y'. (!r. (((uniq r) /\ (((MEM y) r) /\ (((MEM y') r) /\ (~ (y = y'))))) ==> (uniq (((betwn r) y) y'))))) ==> ((\y'. (!r. (((uniq r) /\ (((MEM y) r) /\ (((MEM y') r) /\ (~ (y = y'))))) ==> (uniq (((betwn r) y) y'))))) z)) = ((\y'. (!r. (((uniq r) /\ (((MEM y) r) /\ (((MEM y') r) /\ (~ (y = y'))))) ==> (uniq (((betwn r) y) y'))))) z))
T c= c==> ! ! c==> c/\ cuniq b1 c/\ cMEM f0 b1 c/\ cMEM b0 b1 c~ c= f0 b0 cuniq cbetwn b1 f0 b0 * / ! c==> c/\ cuniq b1 c/\ cMEM f0 b1 c/\ cMEM b0 b1 c~ c= f0 b0 cuniq cbetwn b1 f0 b0 f1 * / ! c==> c/\ cuniq b1 c/\ cMEM f0 b1 c/\ cMEM b0 b1 c~ c= f0 b0 cuniq cbetwn b1 f0 b0 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cuniq cbetwn f7 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f8 f2 c==> c= cnext_el cfind_face f1 f4 f4 f9 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f7 c==> c= cfind_face f1 f3 f7 c==> c= cparts f1 cbetwn f7 f3 f2 cMAP / cCONS b0 cNIL cbetwn f7 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f9 f3 f7 cindexf f9 f2 f7 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f2 f7 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f7 f3 f2
- ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL) |- (NIL = (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))
T c==> c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c= cNIL cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- ((normal_list L) N) |- (((normal_list L) N) = T)
T c==> cnormal_list f0 f1 c= cnormal_list f0 f1 cT
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((!b. (!a. ((a = b) ==> ((rev a) = (rev b))))) = (!b. (!a. ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))))
T c= ! ! c==> c= b1 b0 c= crev b1 crev b0 ! ! c==> c~ c==> c= b1 b0 c= crev b1 crev b0 cF
+ (~ ((final_list L) r)) |- ((((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))))) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))) = (((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))
T c==> c~ cfinal_list f0 f1 c= c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f2 c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f1 f3 cl'z f0 f2 f1 f3 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f2 c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c/\ c==> cfinal_list f0 f1 cflag_list f0 f2 c==> c~ cfinal_list f0 f1 cs_flag_list f0 f2 f1 f3 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f1 f3 cl'z f0 f2 f1 f3
+ (uniq ((find_face L) x)), (((find_face L) x) = f) |- (((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))) = (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))
T c==> cuniq cfind_face f0 f1 c==> c= cfind_face f0 f1 f2 c= c==> cuniq f2 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f5 f6 c==> cMEM f6 f4 c==> cMEM f7 f4 c==> c= cl'z f0 f3 f4 f1 f6 c==> c~ c= f6 f7 c==> c= cnext_el f2 f1 f8 c==> c= cfind_face f0 f1 f2 c==> cMEM f7 f2 c==> cMEM f6 f2 c==> c< cindexf f8 f7 f2 cindexf f8 f6 f2 c==> c= cfind_face f0 f7 f2 c==> c= cparts f0 cbetwn f2 f7 f6 cMAP / cCONS b0 cNIL cbetwn f2 f7 f6 c==> cuniq cbetwn f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f9 crev cmap part cFST cbetwn f2 f7 f6 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f5 f6 c==> cMEM f6 f4 c==> cMEM f7 f4 c==> c= cl'z f0 f3 f4 f1 f6 c==> c~ c= f6 f7 c==> c= cnext_el f2 f1 f8 c==> c= cfind_face f0 f1 f2 c==> cMEM f7 f2 c==> cMEM f6 f2 c==> c< cindexf f8 f7 f2 cindexf f8 f6 f2 c==> c= cfind_face f0 f7 f2 c==> c= cparts f0 cbetwn f2 f7 f6 cMAP / cCONS b0 cNIL cbetwn f2 f7 f6 c==> cuniq cbetwn f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f9 crev cmap part cFST cbetwn f2 f7 f6
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- (planar_hypermap (hypermap_of_list L)) |- ((planar_hypermap (hypermap_of_list L)) = T)
T c==> cplanar_hypermap chypermap_of_list f0 c= cplanar_hypermap chypermap_of_list f0 cT
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) /\ ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f2 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c/\ call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L))
T c= c==> ! ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0
+ |- ((\x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))) x)
T * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= b1 cfind_face f0 b0 c= b2 cnext_el b1 b0 c/\ cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 b1 c/\ cMEM cztrans f0 f1 f2 b0 cNUMERAL c_0 b1 c< cindexf b2 cytrans f0 f1 f2 b0 cNUMERAL c_0 b1 cindexf b2 cztrans f0 f1 f2 b0 cNUMERAL c_0 b1 f3
- |- ((((\f. (((find_face L) x) = f)) f) ==> (?f. (((find_face L) x) = f))) = T)
T c= c==> * / c= cfind_face f0 f1 b0 f2 c? / c= cfind_face f0 f1 b0 cT
- |- ((\s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))) s)
T * / c= cf_last f0 b0 c= cnext_el b0 cLAST b0 cf_list f0 cLAST b0 f1
+ |- (((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c= c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 c/\ cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f4 c/\ cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c< cindexf f5 cytrans f0 f1 f2 f3 cNUMERAL c_0 f4 cindexf f5 cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f4 f7 f8 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f4 f7 f8
- (~ ((((betwn f) y) z) = NIL)) |- (~ (NIL = (((betwn f) y) z)))
T c==> c~ c= cbetwn f0 f1 f2 cNIL c~ c= cNIL cbetwn f0 f1 f2
- |- (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> q')))
T c==> c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 f3 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f3
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) ==> ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r)) = ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cmarked_list f2 f3 f4 f5 c==> cis_restricted chypermap_of_list f2 c==> cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- ((\N. (((quotient_list L) N) = ((MAP (core L)) N))) N)
T * / c= cquotient_list f0 b0 cMAP * part ccore f0 b0 f1
- |- ((\p'. (!q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q')))))) p')
T * / ! c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 b1 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> b0 b1 f3
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))) = (\x. (((((marked_list L) N) r) x) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 b0 c~ cfinal_list f0 f1 cMEM cztrans f0 f2 f1 b0 cNUMERAL c_0 f1 / c==> cmarked_list f0 f2 f1 b0 cMEM cztrans f0 f2 f1 b0 cNUMERAL c_0 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((~ ((((betwn f) y) z) = NIL)) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f7 f8 c==> c= cnext_el f5 f7 cf_list f1 f7 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f7 f3 c==> c= cl'z f1 f0 f5 f7 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f6 c==> c= cfind_face f1 f7 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f7 f5 c==> cMEM f7 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f7 c==> cmarked_list f1 f0 f5 f7 c/\ c~ c= cbetwn f4 f3 f2 cNIL c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f4 f3 f2
- |- ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)
T * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ ((NUMERAL (BIT0 (BIT1 _0))) <= a) |- (((NUMERAL (BIT0 (BIT1 _0))) <= a) /\ (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> c= cfind_face f1 f3 f9 c==> c= cparts f1 cbetwn f9 f3 f2 cMAP / cCONS b0 cNIL cbetwn f9 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f9 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c/\ c= cparts f1 cbetwn f9 f3 f2 cMAP / cCONS b0 cNIL cbetwn f9 f3 f2 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ |- (((~ ((rev a) = (rev b))) ==> F) = ((rev a) = (rev b)))
T c= c==> c~ c= crev f0 crev f1 cF c= crev f0 crev f1
- ((MEM x) (list_of_darts L)) |- (((MEM x) (list_of_darts L)) = T)
T c==> cMEM f0 clist_of_darts f1 c= cMEM f0 clist_of_darts f1 cT
+ |- ((\L. (((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) x))) ==> (((find_face L) d) = ((find_face L) x)))) L)
T * / c==> c/\ cuniq clist_of_darts b0 cMEM f0 cfind_face b0 f1 c= cfind_face b0 f0 cfind_face b0 f1 f2
- ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F), (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) |- ((((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) /\ ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))
T c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c/\ c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
+ (~ ((rev a) = (rev b))), (a = b) |- (~ ((rev b) = (rev b)))
T c==> c~ c= crev f0 crev f1 c==> c= f0 f1 c~ c= crev f1 crev f1
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 f4 c==> c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 f4 c/\ c~ c= cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 cNIL cuniq f4 c==> cmarked_list f0 f3 f1 f2 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 crev cmap part cFST cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- |- (!z. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ |- (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))))
T c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- ((\L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) L)
T * / ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 f0
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 cs_flag_list f0 f3 f2 f1 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) ==> ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c==> c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL c==> cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f6 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> cMEM f4 f3 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f6 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f7 c==> c~ c= f7 f2 c==> c= cnext_el f6 f1 f9 c==> c= cfind_face f0 f1 f6 c==> cMEM f2 f6 c==> cMEM f7 f6 c==> c< cindexf f9 f2 f6 cindexf f9 f7 f6 c==> c= cfind_face f0 f2 f6 c==> c= cparts f0 cbetwn f6 f2 f7 cMAP / cCONS b0 cNIL cbetwn f6 f2 f7 c==> cuniq cbetwn f6 f2 f7 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f6 f2 f7
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f10 f4 c==> c= cfind_face f1 f10 f4 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((!x'. (((\y. ((((l'y L) r) x) = y)) x') ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) ==> ((?y. ((((l'y L) r) x) = y)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = ((?y. ((((l'y L) r) x) = y)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= c==> ! c==> * / c= cl'y f0 f2 f1 b1 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 c==> c? / c= cl'y f0 f2 f1 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 c==> c? / c= cl'y f0 f2 f1 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((find_face L) y) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> c= cfind_face f1 f3 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f9 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> c= cparts f1 cbetwn f9 f3 f2 cMAP / cCONS b0 cNIL cbetwn f9 f3 f2 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g)), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> c/\ c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL cuniq f4 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- (map = MAP) |- (MAP = map)
T c==> c= part cmap part cMAP c= part cMAP part cmap
+ |- (((!d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) ==> ((\d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) d)) = ((\d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) d))
T c= c==> ! ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 * / ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 f0 * / ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 f0
+ ((MEM d) (((betwn f) y) z)) |- (((MEM d) (((betwn f) y) z)) = T)
T c==> cMEM f0 cbetwn f1 f2 f3 c= cMEM f0 cbetwn f1 f2 f3 cT
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> c= cnext_el f4 f6 f9 c==> c= cfind_face f1 f6 f4 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f9 f3 f4 cindexf f9 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- (is_node_nondegenerate (hypermap_of_list L)) |- ((is_node_nondegenerate (hypermap_of_list L)) = T)
T c==> cis_node_nondegenerate chypermap_of_list f0 c= cis_node_nondegenerate chypermap_of_list f0 cT
+ |- (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))))
T c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2
+ |- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) (((((ztrans L) N) r) x) (NUMERAL _0)))
T * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) /\ ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f1 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f5 f6 c==> cMEM f6 f4 c==> cMEM f7 f4 c==> c= cl'z f0 f3 f4 f2 f6 c==> c~ c= f6 f7 c==> c= cnext_el f1 f2 f8 c==> c= cfind_face f0 f2 f1 c==> cMEM f7 f1 c==> cMEM f6 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f6 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f6 cMAP / cCONS b0 cNIL cbetwn f1 f7 f6 c==> cuniq cbetwn f1 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 f9 c==> c~ c= cbetwn f1 f7 f6 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 c==> cMEM f10 cbetwn f1 f7 f6 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ |- ((\y'. (!r. (((uniq r) /\ (((MEM y) r) /\ (((MEM y') r) /\ (~ (y = y'))))) ==> (uniq (((betwn r) y) y'))))) z)
T * / ! c==> c/\ cuniq b1 c/\ cMEM f0 b1 c/\ cMEM b0 b1 c~ c= f0 b0 cuniq cbetwn b1 f0 b0 f1
+ ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- ((((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c= c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c= cmap * * part co part cFST part cHD cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f3 f6 cl'z f0 f1 f2 f3 c= cmap * * part co part cFST part cHD cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f3 f6 cl'z f0 f1 f2 f3
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ cuniq cflatten f3 c/\ call / c~ c= b0 cNIL f3 c/\ call * part cf_last f0 f3 c/\ call * part cloop_list f0 f3 ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) /\ ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ |- ((\L. ((good_list L) ==> (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))))) L)
T * / c==> cgood_list b0 ! c= ! c==> cIN b2 * part cdart chypermap_of_list b0 * b1 b2 ! c==> cMEM b2 clist_of_darts b0 * b1 b2 f0
+ (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- ((is_node_nondegenerate (hypermap_of_list L)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> cis_node_nondegenerate chypermap_of_list f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ |- ((\s. (!f. ((~ (s = NIL)) ==> ((LAST ((MAP f) s)) = (f (LAST s)))))) s)
T * / ! c==> c~ c= b0 cNIL c= cLAST cMAP b1 b0 * b1 cLAST b0 f0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f2 f1 c==> c= cl'y f0 f2 f1 f4 c==> c= cprev_el f2 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f2 c==> c= cnext_el f2 f6 f5 c==> cMEM f5 f2 c==> cMEM f4 f2 c==> c= cl'z f0 f3 f2 f1 f5 c==> c~ c= f5 f4 c==> c= cnext_el f7 f1 f8 c==> c= cfind_face f0 f1 f7 c==> cMEM f4 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f5 cMAP / cCONS b0 cNIL cbetwn f7 f4 f5 c==> cuniq cbetwn f7 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 f9 c==> c~ c= cbetwn f7 f4 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 c==> cMEM f10 cbetwn f7 f4 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (x IN (dart (hypermap_of_list L))) |- ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x)))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cIN f1 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 f1
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) /\ (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c/\ cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> c= cprev_el f1 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f4 c==> call / c~ c= b0 cNIL f4 c==> call * part cf_last f0 f4 c==> call * part cloop_list f0 f4 c==> ! c==> cMEM b0 cflatten f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f4 c==> cuniq f1 c==> c= cnext_el f1 f6 f5 c==> cMEM f5 f1 c==> cMEM f3 f1 c==> c= cl'z f0 f4 f1 f2 f5 c==> c~ c= f5 f3 c==> c= cnext_el f7 f2 f8 c==> c= cfind_face f0 f2 f7 c==> cMEM f3 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f3 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f3 f7 c==> c= cparts f0 cbetwn f7 f3 f5 cMAP / cCONS b0 cNIL cbetwn f7 f3 f5 c==> cuniq cbetwn f7 f3 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f3 f5 f9 c==> c~ c= cbetwn f7 f3 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f3 f5 c==> cMEM f10 cbetwn f7 f3 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- (((((l'y L) r) x) = y) = ((\y. ((((l'y L) r) x) = y)) y))
T c= c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
+ |- (((((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) x))) ==> (((find_face L) y) = ((find_face L) x))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c= c==> c==> c/\ cuniq clist_of_darts f0 cMEM f1 cfind_face f0 f2 c= cfind_face f0 f1 cfind_face f0 f2 c= cmap / cFST cHD b0 cparts f0 f3 crev cmap part cFST cbetwn f4 f1 f5 c= cmap / cFST cHD b0 cparts f0 f3 crev cmap part cFST cbetwn f4 f1 f5
- ((sizel ((filter (MEM (FST d))) L)) = a), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- (((sizel ((filter (MEM (FST d))) L)) = a) /\ (((NUMERAL _0) < (SUC (NUMERAL _0))) /\ ((SUC (NUMERAL _0)) < a)))
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c/\ c= csizel cfilter * part cMEM cFST f0 f1 f2 c/\ c< cNUMERAL c_0 cSUC cNUMERAL c_0 c< cSUC cNUMERAL c_0 f2
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cmarked_list f2 f3 f4 f5 c/\ cis_restricted chypermap_of_list f2 c==> cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ |- ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)
T * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))) = (\x. (((((marked_list L) N) r) x) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 b0 c~ cfinal_list f0 f1 c~ c= cztrans f0 f2 f1 b0 cNUMERAL c_0 cytrans f0 f2 f1 b0 cNUMERAL c_0 / c==> cmarked_list f0 f2 f1 b0 c~ c= cztrans f0 f2 f1 b0 cNUMERAL c_0 cytrans f0 f2 f1 b0 cNUMERAL c_0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (((find_face L) x) = f) |- ((NIL = (((betwn f) y) ((((l'z L) N) r) x))) = F)
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c= cfind_face f0 f1 f5 c= c= cNIL cbetwn f5 f2 cl'z f0 f3 f4 f1 cF
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cmarked_list f2 f3 f4 f5 c==> cis_restricted chypermap_of_list f2 c==> cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
- |- ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)
T * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w) |- ((((next_el f) x) = w) /\ ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c/\ c= cnext_el f1 f2 f3 c==> c= cfind_face f0 f2 f1 c==> cMEM f4 f1 c==> cMEM f5 f1 c==> c< cindexf f3 f4 f1 cindexf f3 f5 f1 c==> c= cfind_face f0 f4 f1 c==> c= cparts f0 cbetwn f1 f4 f5 cMAP / cCONS b0 cNIL cbetwn f1 f4 f5 c==> cuniq cbetwn f1 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f4 f5 f6 c==> c~ c= cbetwn f1 f4 f5 cNIL c==> c= cparts f0 f6 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f4 f5 c==> cMEM f7 cbetwn f1 f4 f5 c==> cMEM f7 f1 c==> c= cfind_face f0 f7 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f7 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f7 cflatten f0 cFST f7
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f3 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f3 f4 cf_list f1 f4 c==> c= cnext_el f3 f5 f6 c==> c= cprev_el f3 f6 f5 c==> c= cl'y f1 f3 f4 f7 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f3 c==> cMEM f4 clist_of_darts f1 c==> cMEM f6 f3 c==> cMEM f3 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f3 f4 c==> cMEM f7 f3 c==> c= cl'z f1 f0 f3 f4 f6 c==> c~ c= f6 f7 c==> c= cnext_el f2 f4 f8 c==> c= cfind_face f1 f4 f2 c==> cMEM f7 f2 c==> cMEM f6 f2 c==> c< cindexf f8 f7 f2 cindexf f8 f6 f2 c==> c= cfind_face f1 f7 f2 c==> c= cparts f1 cbetwn f2 f7 f6 cMAP / cCONS b0 cNIL cbetwn f2 f7 f6 c==> cuniq cbetwn f2 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f6 f9 c==> c~ c= cbetwn f2 f7 f6 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f6 c==> cMEM f10 cbetwn f2 f7 f6 c==> cMEM f10 f2 c==> c= cfind_face f1 f10 f2 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ |- (((real_mul (real_neg (real_of_num x))) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ (good_list L), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- |- ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) /\ (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- ((?x. (((MEM x) ((upt (NUMERAL (BIT1 _0))) a)) /\ (((n_list L) d) = (((POWER (n_list L)) x) d)))) = ((\x. (?x. (((MEM x) ((upt (NUMERAL (BIT1 _0))) a)) /\ (x = (((POWER (n_list L)) x) d))))) ((n_list L) d)))
T c= c? / c/\ cMEM b0 cupt cNUMERAL cBIT1 c_0 f0 c= cn_list f1 f2 cPOWER * part cn_list f1 b0 f2 * / c? / c/\ cMEM b1 cupt cNUMERAL cBIT1 c_0 f0 c= b0 cPOWER * part cn_list f1 b1 f2 cn_list f1 f2
+ (good_list L), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- (((sizel ((filter (MEM (FST d))) L)) = a) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f2 c==> c= csizel cfilter * part cMEM cFST f1 f0 f3 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ |- (((!p'. (!q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL b0 c==> c==> b0 c= c= cFST cLAST cmap / cPOWER * part cn_list f1 b2 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 b1 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f1 b2 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 c==> b0 b1 * / ! c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL b0 c==> c==> b0 c= c= cFST cLAST cmap / cPOWER * part cn_list f1 b2 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 b1 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f1 b2 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 c==> b0 b1 f3 * / ! c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL b0 c==> c==> b0 c= c= cFST cLAST cmap / cPOWER * part cn_list f1 b2 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 b1 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f1 b2 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 c==> b0 b1 f3
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- ((rev = REVERSE) /\ ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL))))
T c/\ c= part crev part cREVERSE c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) (((betwn f) y) z)) = ((map FST) (((betwn f) y) z)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 cmap part cFST cbetwn f4 f3 f2
- |- ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)
T * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 f2
- (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) x))))), (x IN (dart (hypermap_of_list L))) |- ((x IN (dart (hypermap_of_list L))) /\ (((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) x))) = T))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c==> cIN f1 * part cdart chypermap_of_list f0 c/\ cIN f1 * part cdart chypermap_of_list f0 c= c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 f1 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM y) f) /\ (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f3 cl'z f1 f0 f5 f6 f7 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cMEM f3 f2 c==> c< cindexf f4 f1 f2 cindexf f4 f3 f2 c==> c= cfind_face f0 f1 f2 c==> c= cparts f0 cbetwn f2 f1 f3 cMAP / cCONS b0 cNIL cbetwn f2 f1 f3 c==> cuniq cbetwn f2 f1 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f1 f3 f5 c==> c~ c= cbetwn f2 f1 f3 cNIL c==> c= cparts f0 f5 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f1 f3 c==> cMEM f6 cbetwn f2 f1 f3 c==> cMEM f6 f2 c==> c= cfind_face f0 f6 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f6 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f6 cflatten f0 cFST f6
- |- (((!x'. (((\w. (((next_el ((find_face L) x)) x) = w)) x') ==> (?w. (((next_el ((find_face L) x)) x) = w)))) ==> ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (?w. (((next_el ((find_face L) x)) x) = w)))) = ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (?w. (((next_el ((find_face L) x)) x) = w))))
T c= c==> ! c==> * / c= cnext_el cfind_face f0 f1 f1 b1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b1 c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0 c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- ((~ ((rev b) = (rev b))) ==> ((rev b) = (rev b)))
T c==> c~ c= crev f0 crev f0 c= crev f0 crev f0
+ (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f) |- ((is_restricted (hypermap_of_list L)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> cis_restricted chypermap_of_list f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (((next_el ((find_face L) x)) x) = w), (((find_face L) x) = f) |- (((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))) = ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c==> c= cfind_face f0 f1 f3 c= c==> c= cnext_el f3 f1 f2 c==> c= cfind_face f0 f1 f3 c==> cMEM f4 f3 c==> cMEM f5 f3 c==> c< cindexf f2 f4 f3 cindexf f2 f5 f3 c==> c= cfind_face f0 f4 f3 c==> c= cparts f0 cbetwn f3 f4 f5 cMAP / cCONS b0 cNIL cbetwn f3 f4 f5 c==> cuniq cbetwn f3 f4 f5 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f3 f4 f5 c==> c= cfind_face f0 f1 f3 c==> cMEM f4 f3 c==> cMEM f5 f3 c==> c< cindexf f2 f4 f3 cindexf f2 f5 f3 c==> c= cfind_face f0 f4 f3 c==> c= cparts f0 cbetwn f3 f4 f5 cMAP / cCONS b0 cNIL cbetwn f3 f4 f5 c==> cuniq cbetwn f3 f4 f5 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f3 f4 f5
+ (((map f1) ((map f2) s)) = ((map (f1 o f2)) s)) |- (((map (f1 o f2)) s) = ((map f1) ((map f2) s)))
T c==> c= cmap f0 cmap f1 f2 cmap * * part co f0 f1 f2 c= cmap * * part co f0 f1 f2 cmap f0 cmap f1 f2
- ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) /\ (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c/\ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ |- (((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL))) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)))
T c= c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 c= cFST cLAST cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- ((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) |- ((((sizel ((filter (MEM (FST d))) L)) = a) ==> (?a. ((sizel ((filter (MEM (FST d))) L)) = a))) = (?a. ((sizel ((filter (MEM (FST d))) L)) = a)))
T c==> * / c= csizel cfilter * part cMEM cFST f0 f1 b0 f2 c= c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0
+ |- ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))))) L)
T * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list b0 b4 b4 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f0 c/\ c~ c= cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cNIL cuniq f0 c= cparts b0 f0 crev cmap / cmap / cPOWER * part cn_list b0 b4 b4 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f1
- |- (!y. (((\y. ((((l'y L) r) x) = y)) y) ==> (?y. ((((l'y L) r) x) = y))))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- |- ((LET_END t) = t)
T c= cLET_END f0 f0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((all (loop_list L)) N) |- (((all (loop_list L)) N) /\ ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> call * part cloop_list f0 f1 c/\ call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f3 f4 c==> cMEM f4 f2 c==> cMEM f5 f2 c==> c= cl'z f0 f1 f2 f6 f4 c==> c~ c= f4 f5 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f5 f7 c==> cMEM f4 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f4 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f4 cMAP / cCONS b0 cNIL cbetwn f7 f5 f4 c==> cuniq cbetwn f7 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 f9 c==> c~ c= cbetwn f7 f5 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 c==> cMEM f10 cbetwn f7 f5 f4 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- (~ ((rev a) = (rev b))), (a = b) |- ((~ F) ==> F)
T c==> c~ c= crev f0 crev f1 c==> c= f0 f1 c==> c~ cF cF
- ((!x. (((MEM x) s) ==> (a x))) = ((all a) s)) |- (((all a) s) = (!x. (((MEM x) s) ==> (a x))))
T c==> c= ! c==> cMEM b0 f0 * f1 b0 call f1 f0 c= call f1 f0 ! c==> cMEM b0 f0 * f1 b0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
+ (good_list L), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = T)
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f2 c= c==> * / c= csizel cfilter * part cMEM cFST f1 f0 b0 f3 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (!w. (((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 ! c==> * / c= cnext_el cfind_face f1 f4 f4 b1 b0 c= cmap / cFST cHD b1 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (is_node_nondegenerate (hypermap_of_list L)), (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f), ((all uniq) L) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> call part cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
- |- ((\s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))) s)
T * / c= cMEM f0 cfilter f1 b0 c/\ * f1 f0 cMEM f0 b0 f2
- |- (((((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))) ==> (((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d)))) = (((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))))
T c= c==> c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1 c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1 c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> c= cfind_face f1 f2 f8 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f2 f6 c==> c~ c= f6 f3 c==> c= cnext_el f8 f2 f9 c==> c= cfind_face f1 f2 f8 c==> cMEM f3 f8 c==> cMEM f6 f8 c==> c< cindexf f9 f3 f8 cindexf f9 f6 f8 c==> c= cfind_face f1 f3 f8 c==> c= cparts f1 cbetwn f8 f3 f6 cMAP / cCONS b0 cNIL cbetwn f8 f3 f6 c==> cuniq cbetwn f8 f3 f6 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn f8 f3 f6
+ |- (((NUMERAL (BIT1 _0)) * (NUMERAL (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0))))
T c= c* cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- |- (((!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) ==> ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)) = ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x))
T c= c==> ! ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
+ |- ((\H. ((is_restricted H) = ((~ ((dart H) = EMPTY)) /\ ((planar_hypermap H) /\ ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))))))))) H)
T * / c= cis_restricted b0 c/\ c~ c= * part cdart b0 part cEMPTY c/\ cplanar_hypermap b0 c/\ cplain_hypermap b0 c/\ cconnected_hypermap b0 c/\ csimple_hypermap b0 c/\ cis_no_double_joins b0 c/\ cis_edge_nondegenerate b0 c/\ cis_node_nondegenerate b0 ! c==> cIN b1 * part cdart b0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface b0 b1 f0
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1
+ (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)
T * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq f) /\ (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ cuniq f1 c==> cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c==> cmarked_list f0 f3 f4 f1 cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))) = T)
T c= c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 cT
+ (~ (z = y)) |- (((~ (y = z)) ==> ((y = z) = F)) = ((y = z) = F))
T c==> c~ c= f0 f1 c= c==> c~ c= f1 f0 c= c= f1 f0 cF c= c= f1 f0 cF
+ |- ((!r. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq (((betwn r) z) y)))) = T)
T c= ! c==> c/\ cuniq b0 c/\ cMEM f0 b0 c/\ cMEM f1 b0 c~ c= f0 f1 cuniq cbetwn b0 f0 f1 cT
+ |- ((\v. (!L. (((facesAt_list L) v) = ((FILTER (MEM v)) L)))) v)
T * / ! c= cfacesAt_list b1 b0 cFILTER * part cMEM b0 b1 f0
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) |- ((NIL = ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))) = F)
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cNIL cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cF
- |- ((\x. (!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l)))))) x)
T * / ! c= cMEM b0 cflatten b1 c? / c/\ cMEM b2 b1 cMEM b0 b2 f0
+ |- (((!q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d))) = (p' ==> q'))))) ==> ((\q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d))) = (p' ==> q'))))) q')) = ((\q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3 c==> c==> f3 c= c= cFST cHD crev cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b0 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cHD crev cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> f3 b0 * / c==> c= c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3 c==> c==> f3 c= c= cFST cHD crev cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b0 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cHD crev cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> f3 b0 f4 * / c==> c= c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3 c==> c==> f3 c= c= cFST cHD crev cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b0 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cHD crev cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> f3 b0 f4
+ (is_restricted (hypermap_of_list L)), (uniq f), (good_list L), (good_list_nodes L) |- ((uniq f) /\ (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cuniq f1 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f5 f6 c==> cMEM f6 f4 c==> cMEM f7 f4 c==> c= cl'z f0 f3 f4 f2 f6 c==> c~ c= f6 f7 c==> c= cnext_el f1 f2 f8 c==> c= cfind_face f0 f2 f1 c==> cMEM f7 f1 c==> cMEM f6 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f6 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f6 cMAP / cCONS b0 cNIL cbetwn f1 f7 f6 c==> cuniq cbetwn f1 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 f9 c==> c~ c= cbetwn f1 f7 f6 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 c==> cMEM f10 cbetwn f1 f7 f6 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- |- ((\p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (p' ==> q')))))) p')
T * / ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> b0 b1 f3
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) /\ ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- (((!s. (!f. ((~ (s = NIL)) ==> ((LAST ((MAP f) s)) = (f (LAST s)))))) ==> ((\s. (!f. ((~ (s = NIL)) ==> ((LAST ((MAP f) s)) = (f (LAST s)))))) s)) = ((\s. (!f. ((~ (s = NIL)) ==> ((LAST ((MAP f) s)) = (f (LAST s)))))) s))
T c= c==> ! ! c==> c~ c= b0 cNIL c= cLAST cMAP b1 b0 * b1 cLAST b0 * / ! c==> c~ c= b0 cNIL c= cLAST cMAP b1 b0 * b1 cLAST b0 f0 * / ! c==> c~ c= b0 cNIL c= cLAST cMAP b1 b0 * b1 cLAST b0 f0
+ (~ ((rev a) = (rev b))), (a = b) |- (((rev b) = (rev b)) ==> F)
T c==> c~ c= crev f0 crev f1 c==> c= f0 f1 c==> c= crev f1 crev f1 cF
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cmarked_list f2 f3 f4 f5 c/\ cis_restricted chypermap_of_list f2 c==> cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ |- (((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c= c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 f5 cl'z f0 f1 f2 f3 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 f5 cl'z f0 f1 f2 f3
- (~ (z = y)) |- ((z = y) = F)
T c==> c~ c= f0 f1 c= c= f0 f1 cF
+ |- (((!f. (((POWER f) (NUMERAL _0)) = I)) ==> ((\f. (((POWER f) (NUMERAL _0)) = I)) f)) = ((\f. (((POWER f) (NUMERAL _0)) = I)) f))
T c= c==> ! c= * * part cPOWER b0 cNUMERAL c_0 part cI * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0 * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0
+ (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)))
T c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cPOWER * part cn_list f0 cLAST cupt cNUMERAL cBIT1 c_0 f2 f1 cFST f1
- |- ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))
T c= csplit_normal_list f0 f1 f2 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b5 b6 cAPPEND b7 b4 cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 f3 cCONS f3 cNIL cAPPEND cCONS b0 cNIL cAPPEND cbetwn f1 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f2 f3 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f4 cnext_el f1 f3
+ |- ((\i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) i)
T * / c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
+ (simple_hypermap (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x)))))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> csimple_hypermap chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> c= cl'y f0 f2 f1 f5 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- ((((l'y L) r) x) = y) |- ((\y. ((((l'y L) r) x) = y)) y)
T c==> c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
+ |- ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)
T * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
+ (good_list L), (good_list_nodes L), (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c==> cmarked_list f0 f1 f2 f3 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
- |- ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ ((((l'y L) r) x) = y) |- ((((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c= cl'y f0 f1 f2 f3 c= c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f2 f3 cl'z f0 f5 f1 f2 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f5 f1 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) x))))), (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- ((!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> ! c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) = (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (good_list L), (good_list_nodes L), ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g)))), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ c~ cfinal_list f0 f1 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 f4 c/\ c~ c= cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 cNIL cuniq f4 c==> cmarked_list f0 f3 f1 f2 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 crev cmap part cFST cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2
+ |- ((SUC (NUMERAL _0)) = (NUMERAL (BIT1 _0)))
T c= cSUC cNUMERAL c_0 cNUMERAL cBIT1 c_0
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c/\ c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) /\ (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c/\ c= cnext_el f4 f6 f7 c==> cMEM f7 f4 c==> cMEM f3 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ (good_list L), (((find_face L) d) = f), ((MEM d) f) |- ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c= cFST cPOWER * part cn_list f0 cPRE f3 f1 cFST f1
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
- (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((\f. (((find_face L) x) = f)) f) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))) = T)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= c==> * / c= cfind_face f1 f4 b0 f9 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2 cT
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((!x'. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) x') ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))) ==> ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))) = ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= c==> ! c==> * / c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 b1 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1 c==> c? / c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1 c==> c? / c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1
+ |- ((\a. (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((LAST ((upt (NUMERAL (BIT1 _0))) a)) = (PRE a)))) a)
T * / c==> c<= cNUMERAL cBIT0 cBIT1 c_0 b0 c= cLAST cupt cNUMERAL cBIT1 c_0 b0 cPRE b0 f0
+ |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) x)
T * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f3 c/\ c~ c= cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 cNIL cuniq f3 c= cparts f0 f3 crev cmap / cmap / cPOWER * part cn_list f0 b1 b1 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f4
+ (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))) |- ((((!d. ((d IN (dart (hypermap_of_list L))) ==> ((\d. ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) d))) = (!d. (((MEM d) (list_of_darts L)) ==> ((\d. ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) d)))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> ! c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 c= c==> c= ! c==> cIN b0 * part cdart chypermap_of_list f0 * / c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b1 b0 ! c==> cMEM b0 clist_of_darts f0 * / c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b1 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL))) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f2 c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
+ |- (((!r. (((uniq r) /\ (((MEM y) r) /\ (((MEM z) r) /\ (~ (y = z))))) ==> (uniq (((betwn r) y) z)))) ==> ((\r. (((uniq r) /\ (((MEM y) r) /\ (((MEM z) r) /\ (~ (y = z))))) ==> (uniq (((betwn r) y) z)))) f)) = ((\r. (((uniq r) /\ (((MEM y) r) /\ (((MEM z) r) /\ (~ (y = z))))) ==> (uniq (((betwn r) y) z)))) f))
T c= c==> ! c==> c/\ cuniq b0 c/\ cMEM f0 b0 c/\ cMEM f1 b0 c~ c= f0 f1 cuniq cbetwn b0 f0 f1 * / c==> c/\ cuniq b0 c/\ cMEM f0 b0 c/\ cMEM f1 b0 c~ c= f0 f1 cuniq cbetwn b0 f0 f1 f2 * / c==> c/\ cuniq b0 c/\ cMEM f0 b0 c/\ cMEM f1 b0 c~ c= f0 f1 cuniq cbetwn b0 f0 f1 f2
+ |- (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))
T c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f3 clist_of_darts f0 c==> cuniq cflatten f2 c==> call / c~ c= b0 cNIL f2 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f1 c==> c= cnext_el f1 f6 f5 c==> cMEM f5 f1 c==> cMEM f4 f1 c==> c= cl'z f0 f2 f1 f3 f5 c==> c~ c= f5 f4 c==> c= cnext_el f7 f3 f8 c==> c= cfind_face f0 f3 f7 c==> cMEM f4 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f5 cMAP / cCONS b0 cNIL cbetwn f7 f4 f5 c==> cuniq cbetwn f7 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 f9 c==> c~ c= cbetwn f7 f4 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 c==> cMEM f10 cbetwn f7 f4 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- ((sizel ((filter (MEM (FST d))) L)) = a) |- (((sizel ((filter (MEM (FST d))) L)) = a) /\ (?a. ((sizel ((filter (MEM (FST d))) L)) = a)))
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c/\ c= csizel cfilter * part cMEM cFST f0 f1 f2 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f7 c==> c~ c= f7 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f7 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f7 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f7 cMAP / cCONS b0 cNIL cbetwn f2 f3 f7 c==> cuniq cbetwn f2 f3 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f7 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f7
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((find_face L) x) = f) |- ((((find_face L) x) = f) /\ (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c/\ c= cfind_face f0 f1 f2 c==> cMEM f3 f2 c==> cMEM f4 f2 c==> c< cindexf f5 f3 f2 cindexf f5 f4 f2 c==> c= cfind_face f0 f3 f2 c==> c= cparts f0 cbetwn f2 f3 f4 cMAP / cCONS b0 cNIL cbetwn f2 f3 f4 c==> cuniq cbetwn f2 f3 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f3 f4 f6 c==> c~ c= cbetwn f2 f3 f4 cNIL c==> c= cparts f0 f6 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f3 f4 c==> cMEM f7 cbetwn f2 f3 f4 c==> cMEM f7 f2 c==> c= cfind_face f0 f7 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f7 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f7 cflatten f0 cFST f7
+ |- (((?a. ((sizel ((filter (MEM (FST d))) L)) = a)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c= c==> c? / c= csizel cfilter * part cMEM cFST f0 f1 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0
+ (is_restricted (hypermap_of_list L)), (uniq (flatten N)), (good_list L), (good_list_nodes L) |- ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cuniq cflatten f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cuniq cflatten f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f3 f4 c==> cMEM f4 f2 c==> cMEM f5 f2 c==> c= cl'z f0 f1 f2 f6 f4 c==> c~ c= f4 f5 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f5 f7 c==> cMEM f4 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f4 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f4 cMAP / cCONS b0 cNIL cbetwn f7 f5 f4 c==> cuniq cbetwn f7 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 f9 c==> c~ c= cbetwn f7 f5 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 c==> cMEM f10 cbetwn f7 f5 f4 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g) ==> ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c/\ c~ cfinal_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f4 cl'z f0 f2 f1 f3 f5 c==> c~ c= cbetwn cfind_face f0 f3 f4 cl'z f0 f2 f1 f3 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f2 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f6 f7 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f3 f4 cl'z f0 f2 f1 f3
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f9 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> c= cfind_face f1 f3 f9 c==> c= cparts f1 cbetwn f9 f3 f2 cMAP / cCONS b0 cNIL cbetwn f9 f3 f2 c==> cuniq cbetwn f9 f3 f2 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ (a = b) |- ((~ ((rev a) = (rev b))) ==> F)
T c==> c= f0 f1 c==> c~ c= crev f0 crev f1 cF
- |- (((!g. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))))) ==> ((\g. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))))) g)) = ((\g. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))))) g))
T c= c==> ! ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list b1 b5 b5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 b0 c/\ c~ c= cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 cNIL cuniq b0 c= cparts b1 b0 crev cmap / cmap / cPOWER * part cn_list b1 b5 b5 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 * / ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list b1 b5 b5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 b0 c/\ c~ c= cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 cNIL cuniq b0 c= cparts b1 b0 crev cmap / cmap / cPOWER * part cn_list b1 b5 b5 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 f0 * / ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list b1 b5 b5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 b0 c/\ c~ c= cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 cNIL cuniq b0 c= cparts b1 b0 crev cmap / cmap / cPOWER * part cn_list b1 b5 b5 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 f0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f4 f3 c==> cMEM f3 f1 c==> cMEM f5 f1 c==> c= cl'z f0 f6 f1 f2 f3 c==> c~ c= f3 f5 c==> c= cnext_el f7 f2 f8 c==> c= cfind_face f0 f2 f7 c==> cMEM f5 f7 c==> cMEM f3 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f3 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f3 cMAP / cCONS b0 cNIL cbetwn f7 f5 f3 c==> cuniq cbetwn f7 f5 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f3 f9 c==> c~ c= cbetwn f7 f5 f3 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f3 c==> cMEM f10 cbetwn f7 f5 f3 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- |- ((real_neg (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) /\ ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (uniq (list_of_darts L)) |- (((uniq ((find_face L) x)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = (((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> cuniq clist_of_darts f0 c= c==> cuniq cfind_face f0 f1 c= cmap / cFST cHD b0 cparts f0 f2 crev cmap part cFST cbetwn cfind_face f0 f1 f3 cl'z f0 f4 f5 f1 c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c= cmap / cFST cHD b0 cparts f0 f2 crev cmap part cFST cbetwn cfind_face f0 f1 f3 cl'z f0 f4 f5 f1
- |- (((sizel ((filter (MEM (FST d))) L)) = a) = ((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a))
T c= c= csizel cfilter * part cMEM cFST f0 f1 f2 * / c= csizel cfilter * part cMEM cFST f0 f1 b0 f2
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))) = (\x. (((((marked_list L) N) r) x) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 b0 c~ cfinal_list f0 f1 cMEM cytrans f0 f2 f1 b0 cNUMERAL c_0 f1 / c==> cmarked_list f0 f2 f1 b0 cMEM cytrans f0 f2 f1 b0 cNUMERAL c_0 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) /\ ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c/\ ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f3 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (uniq f), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f3 f4 cf_list f0 f4 c==> c= cprev_el f3 f5 f6 c==> c= cl'y f0 f3 f4 f7 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> cMEM f4 f3 c==> cMEM f4 clist_of_darts f0 c==> cMEM f3 f2 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f2 c==> cnormal_list f0 f2 c==> cs_flag_list f0 f2 f3 f4 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f3 c==> c= cnext_el f3 f6 f5 c==> cMEM f5 f3 c==> cMEM f7 f3 c==> c= cl'z f0 f2 f3 f4 f5 c==> c~ c= f5 f7 c==> c= cnext_el f1 f4 f8 c==> c= cfind_face f0 f4 f1 c==> cMEM f7 f1 c==> cMEM f5 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f5 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f5 cMAP / cCONS b0 cNIL cbetwn f1 f7 f5 c==> cuniq cbetwn f1 f7 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f5 f9 c==> c~ c= cbetwn f1 f7 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f5 c==> cMEM f10 cbetwn f1 f7 f5 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((((next_el ((find_face L) x)) x) = w) ==> (?w. (((next_el ((find_face L) x)) x) = w))) = (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c= c==> c= cnext_el cfind_face f0 f1 f1 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), ((((l'y L) r) x) = y) |- (((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))) = ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c= cl'y f0 f2 f1 f4 c= c==> c~ c= cbetwn cfind_face f0 f1 f4 cl'z f0 f3 f2 f1 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f3 c==> cMEM f2 f3 c==> cMEM f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f2 f1 c==> c= cl'y f0 f2 f1 f4 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f4 cl'z f0 f3 f2 f1 c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f3 c==> cMEM f2 f3 c==> cMEM f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f2 f1 c==> c= cl'y f0 f2 f1 f4 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f4 cl'z f0 f3 f2 f1
+ (is_restricted (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> cis_restricted chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
- |- (((!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))) ==> ((\l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))) l)) = ((\l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))) l))
T c= c==> ! c= cMEM f0 cMAP f1 b0 c? / c/\ cMEM b1 b0 c= f0 * f1 b1 * / c= cMEM f0 cMAP f1 b0 c? / c/\ cMEM b1 b0 c= f0 * f1 b1 f2 * / c= cMEM f0 cMAP f1 b0 c? / c/\ cMEM b1 b0 c= f0 * f1 b1 f2
+ |- (((int_le (int_of_num (NUMERAL _0))) _10350089) ==> ((~ ((int_le (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) _10350089)) \/ ((int_lt (int_of_num (NUMERAL (BIT1 _0)))) _10350089)))
T c==> cint_le cint_of_num cNUMERAL c_0 f0 c\/ c~ cint_le cint_of_num cNUMERAL cBIT0 cBIT1 c_0 f0 cint_lt cint_of_num cNUMERAL cBIT1 c_0 f0
- (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- (((!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) ==> ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L)) = ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L))
T c= c==> ! ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0 * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f5 f3 cl'z f1 f0 f4 f5 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f8 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el f) x) = w) /\ ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ c= cnext_el f4 f6 f8 c==> c= cfind_face f1 f6 f4 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f2 c==> call / c~ c= b0 cNIL f2 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f3 c==> c= cnext_el f3 f4 f5 c==> cMEM f5 f3 c==> cMEM f6 f3 c==> c= cl'z f0 f2 f3 f1 f5 c==> c~ c= f5 f6 c==> c= cnext_el f7 f1 f8 c==> c= cfind_face f0 f1 f7 c==> cMEM f6 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f6 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f6 f7 c==> c= cparts f0 cbetwn f7 f6 f5 cMAP / cCONS b0 cNIL cbetwn f7 f6 f5 c==> cuniq cbetwn f7 f6 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f6 f5 f9 c==> c~ c= cbetwn f7 f6 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f6 f5 c==> cMEM f10 cbetwn f7 f6 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (!d. (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))), (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))) /\ ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> ! c==> cMEM b0 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c/\ ! c==> cMEM b0 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f3 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f3 f4 cf_list f1 f4 c==> c= cnext_el f3 f5 f6 c==> c= cprev_el f3 f6 f5 c==> c= cl'y f1 f3 f4 f7 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f3 c==> cMEM f4 clist_of_darts f1 c==> cMEM f7 f3 c==> cMEM f6 f3 c==> cMEM f3 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f3 f4 c==> c= cl'z f1 f0 f3 f4 f6 c==> c~ c= f6 f7 c==> c= cnext_el f2 f4 f8 c==> c= cfind_face f1 f4 f2 c==> cMEM f7 f2 c==> cMEM f6 f2 c==> c< cindexf f8 f7 f2 cindexf f8 f6 f2 c==> c= cfind_face f1 f7 f2 c==> c= cparts f1 cbetwn f2 f7 f6 cMAP / cCONS b0 cNIL cbetwn f2 f7 f6 c==> cuniq cbetwn f2 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f6 f9 c==> c~ c= cbetwn f2 f7 f6 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f6 c==> cMEM f10 cbetwn f2 f7 f6 c==> cMEM f10 f2 c==> c= cfind_face f1 f10 f2 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ |- ((\N. (!r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x)))))) N)
T * / ! ! ! c= cytrans f0 b0 b1 b2 b3 cl'y f0 crtrans f0 b0 b1 b2 b3 b2 f1
+ |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))) N))
T c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b3 b3 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 f1 c/\ c~ c= cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 cNIL cuniq f1 c= cparts f0 f1 crev cmap / cmap / cPOWER * part cn_list f0 b3 b3 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b3 b3 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 f1 c/\ c~ c= cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 cNIL cuniq f1 c= cparts f0 f1 crev cmap / cmap / cPOWER * part cn_list f0 b3 b3 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 f2 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b3 b3 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 f1 c/\ c~ c= cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 cNIL cuniq f1 c= cparts f0 f1 crev cmap / cmap / cPOWER * part cn_list f0 b3 b3 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 f2
- |- ((\f. (!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))))) f)
T * / ! ! c= cMEM b1 cMAP b0 b2 c? / c/\ cMEM b3 b2 c= b1 * b0 b3 f0
- (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) |- (T = (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)))
T c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cT c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- F
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- |- ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0)))
T creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (uniq ((find_face L) x)), (((find_face L) x) = f) |- ((uniq f) = T)
T c==> cuniq cfind_face f0 f1 c==> c= cfind_face f0 f1 f2 c= cuniq f2 cT
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f3 clist_of_darts f0 c==> cuniq cflatten f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f6 f5 c==> cMEM f5 f2 c==> cMEM f4 f2 c==> c= cl'z f0 f1 f2 f3 f5 c==> c~ c= f5 f4 c==> c= cnext_el f7 f3 f8 c==> c= cfind_face f0 f3 f7 c==> cMEM f4 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f5 cMAP / cCONS b0 cNIL cbetwn f7 f4 f5 c==> cuniq cbetwn f7 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 f9 c==> c~ c= cbetwn f7 f4 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 c==> cMEM f10 cbetwn f7 f4 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (is_restricted (hypermap_of_list L)), (uniq r), (good_list L), (good_list_nodes L) |- ((uniq r) /\ ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cuniq f1 c==> c= cnext_el f1 f2 f3 c==> cMEM f3 f1 c==> cMEM f4 f1 c==> c= cl'z f0 f5 f1 f6 f3 c==> c~ c= f3 f4 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f4 f7 c==> cMEM f3 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f3 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f3 cMAP / cCONS b0 cNIL cbetwn f7 f4 f3 c==> cuniq cbetwn f7 f4 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f3 f9 c==> c~ c= cbetwn f7 f4 f3 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f3 c==> cMEM f10 cbetwn f7 f4 f3 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ |- ((((real_ge x) (real_of_num (NUMERAL _0))) /\ ((real_ge y) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge f0 creal_of_num cNUMERAL c_0 creal_ge f1 creal_of_num cNUMERAL c_0 creal_ge creal_add f0 f1 creal_of_num cNUMERAL c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((((l'y L) r) x) = y) ==> (?y. ((((l'y L) r) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f6 c==> c~ c= f6 f2 c==> c= cnext_el f8 f1 f9 c==> c= cfind_face f0 f1 f8 c==> cMEM f2 f8 c==> cMEM f6 f8 c==> c< cindexf f9 f2 f8 cindexf f9 f6 f8 c==> c= cfind_face f0 f2 f8 c==> c= cparts f0 cbetwn f8 f2 f6 cMAP / cCONS b0 cNIL cbetwn f8 f2 f6 c==> cuniq cbetwn f8 f2 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f8 f2 f6
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))))), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> c/\ cMEM f1 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 cs_flag_list f0 f3 f2 f1 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- |- ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)
T * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- (MAP = map) |- (map = MAP)
T c==> c= part cMAP part cmap c= part cmap part cMAP
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM y) f) |- (((MEM y) f) /\ (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c/\ cMEM f1 f2 c==> cMEM f3 f2 c==> c< cindexf f4 f1 f2 cindexf f4 f3 f2 c==> c= cfind_face f0 f1 f2 c==> c= cparts f0 cbetwn f2 f1 f3 cMAP / cCONS b0 cNIL cbetwn f2 f1 f3 c==> cuniq cbetwn f2 f1 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f1 f3 f5 c==> c~ c= cbetwn f2 f1 f3 cNIL c==> c= cparts f0 f5 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f1 f3 c==> cMEM f6 cbetwn f2 f1 f3 c==> cMEM f6 f2 c==> c= cfind_face f0 f6 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f6 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f6 cflatten f0 cFST f6
+ |- (((((l'y L) r) x) = (((l'y L) r) x)) = ((\y. ((((l'y L) r) x) = y)) (((l'y L) r) x)))
T c= c= cl'y f0 f1 f2 cl'y f0 f1 f2 * / c= cl'y f0 f1 f2 b0 cl'y f0 f1 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM d) (((betwn f) y) z)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((MEM d) (((betwn f) y) z)) /\ ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c/\ cMEM f10 cbetwn f4 f3 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ |- (((!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) ==> ((\x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) x)) = ((\x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) x))
T c= c==> ! ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 * / ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 f3 * / ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 f3
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) |- (((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL) = F)
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c= c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL cF
+ |- (((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))) ==> ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))) L)) = ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))) L))
T c= c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c= cparts b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cMAP / cCONS b4 cNIL cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c= cparts b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cMAP / cCONS b4 cNIL cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f0 * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c= cparts b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cMAP / cCONS b4 cNIL cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f0
- |- (((!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) ==> ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)) = ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r))
T c= c==> ! ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f6 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f6 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f7 c==> c~ c= f7 f2 c==> c= cnext_el f6 f1 f9 c==> c= cfind_face f0 f1 f6 c==> cMEM f2 f6 c==> cMEM f7 f6 c==> c< cindexf f9 f2 f6 cindexf f9 f7 f6 c==> c= cfind_face f0 f2 f6 c==> c= cparts f0 cbetwn f6 f2 f7 cMAP / cCONS b0 cNIL cbetwn f6 f2 f7 c==> cuniq cbetwn f6 f2 f7 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f6 f2 f7
- (connected_hypermap (hypermap_of_list L)) |- ((connected_hypermap (hypermap_of_list L)) = T)
T c==> cconnected_hypermap chypermap_of_list f0 c= cconnected_hypermap chypermap_of_list f0 cT
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f3 f4 c==> cMEM f4 f2 c==> cMEM f5 f2 c==> c= cl'z f0 f1 f2 f6 f4 c==> c~ c= f4 f5 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f5 f7 c==> cMEM f4 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f4 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f4 cMAP / cCONS b0 cNIL cbetwn f7 f5 f4 c==> cuniq cbetwn f7 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 f9 c==> c~ c= cbetwn f7 f5 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 c==> cMEM f10 cbetwn f7 f5 f4 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) |- ((NIL = (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = F)
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c= c= cNIL cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cF
- |- ((\p'. (!q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q')))))) p')
T * / ! c==> c= c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL b0 c==> c==> b0 c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b1 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> b0 b1 f3
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((uniq g) /\ ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cmarked_list f2 f3 f4 f5 c/\ cuniq f6 c==> cis_restricted chypermap_of_list f2 c==> cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) /\ ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c/\ c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- (((!a. (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)))) ==> ((\a. (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)))) a)) = ((\a. (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)))) a))
T c= c==> ! c==> c<= cNUMERAL cBIT0 cBIT1 c_0 b0 c~ c= cupt cNUMERAL cBIT1 c_0 b0 cNIL * / c==> c<= cNUMERAL cBIT0 cBIT1 c_0 b0 c~ c= cupt cNUMERAL cBIT1 c_0 b0 cNIL f0 * / c==> c<= cNUMERAL cBIT0 cBIT1 c_0 b0 c~ c= cupt cNUMERAL cBIT1 c_0 b0 cNIL f0
- |- (((!f. (!x. (((LET f) x) = (f x)))) ==> ((\f. (!x. (((LET f) x) = (f x)))) f)) = ((\f. (!x. (((LET f) x) = (f x)))) f))
T c= c==> ! ! c= cLET b0 b1 * b0 b1 * / ! c= cLET b0 b1 * b0 b1 f0 * / ! c= cLET b0 b1 * b0 b1 f0
+ |- ((\s. (((map f1) ((map f2) s)) = ((map (f1 o f2)) s))) s)
T * / c= cmap f0 cmap f1 b0 cmap * * part co f0 f1 b0 f2
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cytrans f0 f1 f2 f3 cNUMERAL c_0 cT
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- ((\f1. (!f2. (!s. ((!x. (((MEM x) s) ==> ((f1 x) = (f2 x)))) ==> (((map f1) s) = ((map f2) s)))))) (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))))
T * / ! ! c==> ! c==> cMEM b3 b2 c= * b0 b3 * b1 b3 c= cmap b0 b2 cmap b1 b2 / cFST cHD crev cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0
- |- ((\p. (!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q))))) p)
T * / ! c= cLAST cAPPEND b0 b1 cCOND c= b1 cNIL cLAST b0 cLAST b1 f0
+ |- (((real_add (real_neg (real_of_num m))) (real_of_num m)) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_neg creal_of_num f0 creal_of_num f0 creal_of_num cNUMERAL c_0
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (is_node_nondegenerate (hypermap_of_list L)), (good_list L), (((find_face L) d) = f), ((MEM d) f) |- ((!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))) /\ (((all uniq) L) ==> (((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))) ==> (((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c/\ ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> call part cuniq f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((MEM z) f) /\ ((((indexf w) y) f) < (((indexf w) z) f))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> c/\ cMEM f2 f9 c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ |- ((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))) = T)
T c= ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b3 b3 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 f1 c/\ c~ c= cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 cNIL cuniq f1 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b3 b3 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 crev cmap part cFST cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 cT
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> c= cfind_face f0 f1 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ |- ((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = T)
T c= ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f3 c/\ c~ c= cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 cNIL cuniq f3 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 crev cmap part cFST cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 cT
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 f5 c==> cmarked_list f0 f4 f1 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 f5 c==> c~ c= cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f4 c==> cMEM f1 f4 c==> cMEM f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cs_flag_list f0 f4 f1 f2 c==> c= cl'y f0 f1 f2 f3 c==> c= cprev_el f1 f6 f7 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (is_node_nondegenerate (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f), ((all uniq) L) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM d) (list_of_darts L)) /\ ((FST d) = (FST d)))))) ==> ((CARD ((node (hypermap_of_list L)) d)) = (LENGTH ((facesAt_list L) (FST d))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> call part cuniq f0 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM f1 clist_of_darts f0 c= cFST f1 cFST f1 c= cCARD * * part cnode chypermap_of_list f0 f1 cLENGTH cfacesAt_list f0 cFST f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((MEM y) f) /\ (((MEM z) f) /\ ((((indexf w) y) f) < (((indexf w) z) f)))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> c/\ cMEM f3 f9 c/\ cMEM f2 f9 c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ |- ((((next_el ((find_face L) x)) x) = ((next_el ((find_face L) x)) x)) = ((\w. (((next_el ((find_face L) x)) x) = w)) ((next_el ((find_face L) x)) x)))
T c= c= cnext_el cfind_face f0 f1 f1 cnext_el cfind_face f0 f1 f1 * / c= cnext_el cfind_face f0 f1 f1 b0 cnext_el cfind_face f0 f1 f1
+ |- (((!L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) ==> ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L)) = ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L))
T c= c==> ! ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0 * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
+ |- ((((good_list L) ==> (uniq L)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c= c==> c==> cgood_list f0 cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))) |- (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))
T c==> ! c==> cMEM b0 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c==> cMEM f1 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 f1
- |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL))) = T)
T c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL cT
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) /\ (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c/\ c= cnext_el f4 f7 f8 c==> cMEM f8 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f8 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y) |- (((((l'y L) r) x) = y) /\ ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c/\ c= cl'y f0 f1 f2 f3 c==> c= cprev_el f1 f4 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f6 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f7 c==> call / c~ c= b0 cNIL f7 c==> call * part cf_last f0 f7 c==> call * part cloop_list f0 f7 c==> ! c==> cMEM b0 cflatten f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f7 c==> cuniq f1 c==> c= cnext_el f1 f5 f4 c==> cMEM f4 f1 c==> cMEM f3 f1 c==> c= cl'z f0 f7 f1 f2 f4 c==> c~ c= f4 f3 c==> c= cnext_el f6 f2 f8 c==> c= cfind_face f0 f2 f6 c==> cMEM f3 f6 c==> cMEM f4 f6 c==> c< cindexf f8 f3 f6 cindexf f8 f4 f6 c==> c= cfind_face f0 f3 f6 c==> c= cparts f0 cbetwn f6 f3 f4 cMAP / cCONS b0 cNIL cbetwn f6 f3 f4 c==> cuniq cbetwn f6 f3 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f3 f4 f9 c==> c~ c= cbetwn f6 f3 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f3 f4 c==> cMEM f10 cbetwn f6 f3 f4 c==> cMEM f10 f6 c==> c= cfind_face f0 f10 f6 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
+ |- ((m <= n) = ((int_le (int_of_num m)) (int_of_num n)))
T c= c<= f0 f1 cint_le cint_of_num f0 cint_of_num f1
+ |- (((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))) ==> ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))) x)) = ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))) x))
T c= c==> ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c= cparts f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 cMAP / cCONS b1 cNIL cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c= cparts f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 cMAP / cCONS b1 cNIL cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f3 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c= cparts f0 cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 cMAP / cCONS b1 cNIL cbetwn cfind_face f0 b0 cl'y f0 f2 b0 cl'z f0 f1 f2 b0 f3
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) |- (((~ (NIL = (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))) ==> ((NIL = (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))) = F)) = ((NIL = (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))) = F))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c= c==> c~ c= cNIL cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 c= c= cNIL cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cF c= c= cNIL cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cF
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) /\ (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ ((sizel ((filter (MEM (FST d))) L)) = a), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- (?x. (((MEM x) ((upt (NUMERAL (BIT1 _0))) a)) /\ (((n_list L) d) = (((POWER (n_list L)) x) d))))
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c? / c/\ cMEM b0 cupt cNUMERAL cBIT1 c_0 f2 c= cn_list f1 f0 cPOWER * part cn_list f1 b0 f0
+ |- ((\n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) a)
T * / cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 f0
+ |- (((!s. (!y. (((MEM y) ((map f) s)) = (?x. (((MEM x) s) /\ (y = (f x))))))) ==> ((\s. (!y. (((MEM y) ((map f) s)) = (?x. (((MEM x) s) /\ (y = (f x))))))) s)) = ((\s. (!y. (((MEM y) ((map f) s)) = (?x. (((MEM x) s) /\ (y = (f x))))))) s))
T c= c==> ! ! c= cMEM b1 cmap f0 b0 c? / c/\ cMEM b2 b0 c= b1 * f0 b2 * / ! c= cMEM b1 cmap f0 b0 c? / c/\ cMEM b2 b0 c= b1 * f0 b2 f1 * / ! c= cMEM b1 cmap f0 b0 c? / c/\ cMEM b2 b0 c= b1 * f0 b2 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> c= cparts f0 cbetwn f2 f1 f3 cMAP / cCONS b0 cNIL cbetwn f2 f1 f3 c==> cuniq cbetwn f2 f1 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f1 f3 f4 c==> c~ c= cbetwn f2 f1 f3 cNIL c==> c= cparts f0 f4 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f1 f3 c==> cMEM f5 cbetwn f2 f1 f3 c==> cMEM f5 f2 c==> c= cfind_face f0 f5 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f5 cflatten f0 cFST f5
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))) r)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!L. (((facesAt_list L) v) = ((FILTER (MEM v)) L))) ==> ((\L. (((facesAt_list L) v) = ((FILTER (MEM v)) L))) L)) = ((\L. (((facesAt_list L) v) = ((FILTER (MEM v)) L))) L))
T c= c==> ! c= cfacesAt_list b0 f0 cFILTER * part cMEM f0 b0 * / c= cfacesAt_list b0 f0 cFILTER * part cMEM f0 b0 f1 * / c= cfacesAt_list b0 f0 cFILTER * part cMEM f0 b0 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) r) /\ (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f5 f3 cl'z f1 f0 f4 f5 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f8 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c/\ cMEM f8 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)
T * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((~ ((((betwn f) y) z) = NIL)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f5 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f7 f8 c==> c= cnext_el f4 f7 cf_list f1 f7 c==> c= cnext_el f4 f9 f2 c==> c= cprev_el f4 f2 f9 c==> c= cl'y f1 f4 f7 f3 c==> c= cl'z f1 f0 f4 f7 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f5 f3 f2 f6 c==> c= cfind_face f1 f7 f5 c==> c= cfind_face f1 f3 f5 c==> c= cparts f1 cbetwn f5 f3 f2 cMAP / cCONS b0 cNIL cbetwn f5 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f7 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f5 cindexf f8 f2 f5 c==> cMEM f7 f4 c==> cMEM f7 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f3 f4 c==> cMEM f2 f5 c==> cMEM f2 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f7 c==> cmarked_list f1 f0 f4 f7 c==> c~ c= cbetwn f5 f3 f2 cNIL c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f5 f3 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))))), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f3 c/\ cMEM f2 f3 c/\ cMEM f1 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- (NIL = s) |- (s = NIL)
T c==> c= cNIL f0 c= f0 cNIL
+ (is_node_nondegenerate (hypermap_of_list L)), (good_list L), (((find_face L) d) = f), ((MEM d) f), ((all uniq) L) |- (((all uniq) L) /\ (((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))) ==> (((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))))
T c==> cis_node_nondegenerate chypermap_of_list f0 c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> call part cuniq f0 c/\ call part cuniq f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ |- (((((good_list L) /\ (good_list_nodes L)) ==> ((simple_hypermap (hypermap_of_list L)) = ((all uniq) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c= c==> c==> c/\ cgood_list f0 cgood_list_nodes f0 c= csimple_hypermap chypermap_of_list f0 call part cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f9 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
- |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- |- (((!y. (((MEM x) ((CONS y) NIL)) = (x = y))) ==> ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y)) = ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y))
T c= c==> ! c= cMEM f0 cCONS b0 cNIL c= f0 b0 * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1 * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f6 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f7 c==> c~ c= f7 f2 c==> c= cnext_el f6 f1 f9 c==> c= cfind_face f0 f1 f6 c==> cMEM f2 f6 c==> cMEM f7 f6 c==> c< cindexf f9 f2 f6 cindexf f9 f7 f6 c==> c= cfind_face f0 f2 f6 c==> c= cparts f0 cbetwn f6 f2 f7 cMAP / cCONS b0 cNIL cbetwn f6 f2 f7 c==> cuniq cbetwn f6 f2 f7 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f6 f2 f7
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f10 f4 c==> c= cfind_face f1 f10 f4 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> q')))
T c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 f3 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f3
- ((\f. (((find_face L) x) = f)) f) |- (((((find_face L) x) = f) ==> (?f. (((find_face L) x) = f))) = (?f. (((find_face L) x) = f)))
T c==> * / c= cfind_face f0 f1 b0 f2 c= c==> c= cfind_face f0 f1 f2 c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> c= cl'z f0 f3 f2 f4 f5 c==> c~ c= f5 f1 c==> c= cnext_el f6 f4 f7 c==> c= cfind_face f0 f4 f6 c==> cMEM f1 f6 c==> cMEM f5 f6 c==> c< cindexf f7 f1 f6 cindexf f7 f5 f6 c==> c= cfind_face f0 f1 f6 c==> c= cparts f0 cbetwn f6 f1 f5 cMAP / cCONS b0 cNIL cbetwn f6 f1 f5 c==> cuniq cbetwn f6 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f1 f5 f8 c==> c~ c= cbetwn f6 f1 f5 cNIL c==> c= cparts f0 f8 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f1 f5 c==> cMEM f9 cbetwn f6 f1 f5 c==> cMEM f9 f6 c==> c= cfind_face f0 f9 f6 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f9 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f9 cflatten f0 cFST f9
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((all (\l. (~ (l = NIL)))) L) |- (((all (\l. (~ (l = NIL)))) L) /\ ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> call / c~ c= b0 cNIL f0 c/\ call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f1 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f5 f6 c==> cMEM f6 f4 c==> cMEM f7 f4 c==> c= cl'z f0 f3 f4 f2 f6 c==> c~ c= f6 f7 c==> c= cnext_el f1 f2 f8 c==> c= cfind_face f0 f2 f1 c==> cMEM f7 f1 c==> cMEM f6 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f6 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f6 cMAP / cCONS b0 cNIL cbetwn f1 f7 f6 c==> cuniq cbetwn f1 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 f9 c==> c~ c= cbetwn f1 f7 f6 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 c==> cMEM f10 cbetwn f1 f7 f6 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ |- ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))) L)
T * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c= cparts b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cMAP / cCONS b4 cNIL cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f0
+ |- (((!s. ((~ (s = NIL)) = (?x. ((MEM x) s)))) ==> ((\s. ((~ (s = NIL)) = (?x. ((MEM x) s)))) s)) = ((\s. ((~ (s = NIL)) = (?x. ((MEM x) s)))) s))
T c= c==> ! c= c~ c= b0 cNIL c? / cMEM b1 b0 * / c= c~ c= b0 cNIL c? / cMEM b1 b0 f0 * / c= c~ c= b0 cNIL c? / cMEM b1 b0 f0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (f_last L)) N) /\ (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) /\ ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cmarked_list f0 f3 f4 f1 c/\ c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f3 c==> cMEM f4 f3 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> c= cfind_face f1 f3 f9 c==> c= cparts f1 cbetwn f9 f3 f2 cMAP / cCONS b0 cNIL cbetwn f9 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f9 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f7 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1
- |- (((!a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) ==> ((\a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) a)) = ((\a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) a))
T c= c==> ! ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 * / ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 f0 * / ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 f0
+ |- ((((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL))) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> q')))) = (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> q'))))
T c= c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c==> c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cFST cLAST cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 f3 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f3 c==> c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cFST cLAST cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 f3 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f1 b0 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f3
+ |- (((!f2. (!s. ((!x. (((MEM x) s) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (f2 x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) s) = ((map f2) s))))) ==> ((\f2. (!s. ((!x. (((MEM x) s) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (f2 x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) s) = ((map f2) s))))) FST)) = ((\f2. (!s. ((!x. (((MEM x) s) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (f2 x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) s) = ((map f2) s))))) FST))
T c= c==> ! ! c==> ! c==> cMEM b2 b1 c= * / cFST cHD crev cmap / cPOWER * part cn_list f0 b3 b3 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 b2 * b0 b2 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f0 b3 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b2 cflatten f0 b1 cmap b0 b1 * / ! c==> ! c==> cMEM b2 b1 c= * / cFST cHD crev cmap / cPOWER * part cn_list f0 b3 b3 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 b2 * b0 b2 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f0 b3 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b2 cflatten f0 b1 cmap b0 b1 part cFST * / ! c==> ! c==> cMEM b2 b1 c= * / cFST cHD crev cmap / cPOWER * part cn_list f0 b3 b3 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 b2 * b0 b2 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f0 b3 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b2 cflatten f0 b1 cmap b0 b1 part cFST
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2
- |- ((\s. ((uniq (rev s)) = (uniq s))) s)
T * / c= cuniq crev b0 cuniq b0 f0
+ (good_list L), (good_list_nodes L), (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
+ (good_list_nodes L) |- ((good_list_nodes L) = T)
T c==> cgood_list_nodes f0 c= cgood_list_nodes f0 cT
- (((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))) |- ((((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))) /\ (((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))))
T c==> c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1 c/\ c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1 c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1
+ (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))
T c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c= cFST cPOWER * part cn_list f0 cLAST cupt cNUMERAL cBIT1 c_0 f2 f1 cFST f1
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) /\ ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c/\ c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (is_node_nondegenerate (hypermap_of_list L)), (good_list L), (((find_face L) d) = f), ((MEM d) f) |- (((all uniq) L) ==> (((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))) ==> (((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))))
T c==> cis_node_nondegenerate chypermap_of_list f0 c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> call part cuniq f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((MEM d) (((betwn f) y) z)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cMEM f10 cbetwn f4 f3 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) /\ (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c/\ c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
+ |- ((\w. (((MEM w) (((betwn f) y) z)) ==> ((MEM w) f))) d)
T * / c==> cMEM b0 cbetwn f0 f1 f2 cMEM b0 f0 f3
+ |- (((!s. ((uniq s) ==> (((next_el s) ((prev_el s) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0))))) ==> ((\s. ((uniq s) ==> (((next_el s) ((prev_el s) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0))))) r)) = ((\s. ((uniq s) ==> (((next_el s) ((prev_el s) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0))))) r))
T c= c==> ! c==> cuniq b0 c= cnext_el b0 cprev_el b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / c==> cuniq b0 c= cnext_el b0 cprev_el b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 f2 * / c==> cuniq b0 c= cnext_el b0 cprev_el b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 f2
+ ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) |- ((((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c= c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f1 f4 f5 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f5 f3 cl'z f1 f0 f4 f5 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f7 c==> c~ c= f7 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f7 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f7 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f7 cMAP / cCONS b0 cNIL cbetwn f2 f3 f7 c==> cuniq cbetwn f2 f3 f7 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f7
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- (((!u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f))))) ==> ((\u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f))))) y)) = ((\u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f))))) y))
T c= c==> ! ! ! c==> cMEM b2 cbetwn f0 b0 b1 cMEM b2 f0 * / ! ! c==> cMEM b2 cbetwn f0 b0 b1 cMEM b2 f0 f1 * / ! ! c==> cMEM b2 cbetwn f0 b0 b1 cMEM b2 f0 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM z) r) |- (((MEM z) r) /\ (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c/\ cMEM f1 f2 c==> cMEM f3 f2 c==> c= cl'z f0 f4 f2 f5 f1 c==> c~ c= f1 f3 c==> c= cnext_el f6 f5 f7 c==> c= cfind_face f0 f5 f6 c==> cMEM f3 f6 c==> cMEM f1 f6 c==> c< cindexf f7 f3 f6 cindexf f7 f1 f6 c==> c= cfind_face f0 f3 f6 c==> c= cparts f0 cbetwn f6 f3 f1 cMAP / cCONS b0 cNIL cbetwn f6 f3 f1 c==> cuniq cbetwn f6 f3 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f3 f1 f8 c==> c~ c= cbetwn f6 f3 f1 cNIL c==> c= cparts f0 f8 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f3 f1 c==> cMEM f9 cbetwn f6 f3 f1 c==> cMEM f9 f6 c==> c= cfind_face f0 f9 f6 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f9 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f9 cflatten f0 cFST f9
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f3 clist_of_darts f0 c==> cuniq cflatten f2 c==> call / c~ c= b0 cNIL f2 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f1 c==> c= cnext_el f1 f6 f5 c==> cMEM f5 f1 c==> cMEM f4 f1 c==> c= cl'z f0 f2 f1 f3 f5 c==> c~ c= f5 f4 c==> c= cnext_el f7 f3 f8 c==> c= cfind_face f0 f3 f7 c==> cMEM f4 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f5 cMAP / cCONS b0 cNIL cbetwn f7 f4 f5 c==> cuniq cbetwn f7 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 f9 c==> c~ c= cbetwn f7 f4 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 c==> cMEM f10 cbetwn f7 f4 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM d) f), ((MEM d) (((betwn f) y) z)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f10 f4 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((MEM z) f) /\ ((((indexf w) y) f) < (((indexf w) z) f))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> c/\ cMEM f2 f9 c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f9 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ |- ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i)
T * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((indexf w) y) f) < (((indexf w) z) f)) /\ ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- |- (((!q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q'))))) ==> ((\q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q'))))) q')) = ((\q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3 c==> c==> f3 c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b0 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> f3 b0 * / c==> c= c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3 c==> c==> f3 c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b0 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> f3 b0 f4 * / c==> c= c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3 c==> c==> f3 c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b0 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> f3 b0 f4
+ |- ((x = x) = T)
T c= c= f0 f0 cT
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> c= cfind_face f1 f6 f4 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ ((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) |- ((sizel ((filter (MEM (FST d))) L)) = a)
T c==> * / c= csizel cfilter * part cMEM cFST f0 f1 b0 f2 c= csizel cfilter * part cMEM cFST f0 f1 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f2 c==> c= cnext_el f2 f3 f4 c==> cMEM f4 f2 c==> cMEM f5 f2 c==> c= cl'z f0 f1 f2 f6 f4 c==> c~ c= f4 f5 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f5 f7 c==> cMEM f4 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f4 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f4 cMAP / cCONS b0 cNIL cbetwn f7 f5 f4 c==> cuniq cbetwn f7 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 f9 c==> c~ c= cbetwn f7 f5 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f4 c==> cMEM f10 cbetwn f7 f5 f4 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ |- ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ |- ((\x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x)))) x)
T * / ! c= cytrans f0 f1 f2 b0 b1 cl'y f0 crtrans f0 f1 f2 b0 b1 b0 f3
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (uniq f), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> c= cprev_el f2 f4 f5 c==> c= cl'y f0 f2 f3 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f7 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f7 c==> cMEM f3 f2 c==> cMEM f2 f7 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f7 c==> cs_flag_list f0 f7 f2 f3 c==> cMEM f3 clist_of_darts f0 c==> cuniq cflatten f7 c==> call / c~ c= b0 cNIL f7 c==> call * part cf_last f0 f7 c==> call * part cloop_list f0 f7 c==> ! c==> cMEM b0 cflatten f7 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f7 c==> cuniq f2 c==> c= cnext_el f2 f5 f4 c==> cMEM f4 f2 c==> cMEM f6 f2 c==> c= cl'z f0 f7 f2 f3 f4 c==> c~ c= f4 f6 c==> c= cnext_el f1 f3 f8 c==> c= cfind_face f0 f3 f1 c==> cMEM f6 f1 c==> cMEM f4 f1 c==> c< cindexf f8 f6 f1 cindexf f8 f4 f1 c==> c= cfind_face f0 f6 f1 c==> c= cparts f0 cbetwn f1 f6 f4 cMAP / cCONS b0 cNIL cbetwn f1 f6 f4 c==> cuniq cbetwn f1 f6 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f6 f4 f9 c==> c~ c= cbetwn f1 f6 f4 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f6 f4 c==> cMEM f10 cbetwn f1 f6 f4 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ |- (((!L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))))) ==> ((\L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))))) L)) = ((\L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))))) L))
T c= c==> ! c==> c/\ cuniq b0 call part cuniq b0 c= csizel cfilter / c= b1 cFST f0 cflatten b0 csizel cfilter * part cMEM cFST f0 b0 * / c==> c/\ cuniq b0 call part cuniq b0 c= csizel cfilter / c= b1 cFST f0 cflatten b0 csizel cfilter * part cMEM cFST f0 b0 f1 * / c==> c/\ cuniq b0 call part cuniq b0 c= csizel cfilter / c= b1 cFST f0 cflatten b0 csizel cfilter * part cMEM cFST f0 b0 f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x), ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) /\ (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> * / c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 f6 c/\ * / c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 b0 f6 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1
+ |- (((!f. (!u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f)))))) ==> ((\f. (!u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f)))))) f)) = ((\f. (!u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f)))))) f))
T c= c==> ! ! ! ! c==> cMEM b3 cbetwn b0 b1 b2 cMEM b3 b0 * / ! ! ! c==> cMEM b3 cbetwn b0 b1 b2 cMEM b3 b0 f0 * / ! ! ! c==> cMEM b3 cbetwn b0 b1 b2 cMEM b3 b0 f0
- |- (((!p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 b0 c==> c==> b0 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b2 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b2 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> b0 b1 * / ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 b0 c==> c==> b0 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b2 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b2 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> b0 b1 f2 * / ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 b0 c==> c==> b0 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b2 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b2 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> b0 b1 f2
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!p. (!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q))))) ==> ((\p. (!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q))))) p)) = ((\p. (!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q))))) p))
T c= c==> ! ! c= cLAST cAPPEND b0 b1 cCOND c= b1 cNIL cLAST b0 cLAST b1 * / ! c= cLAST cAPPEND b0 b1 cCOND c= b1 cNIL cLAST b0 cLAST b1 f0 * / ! c= cLAST cAPPEND b0 b1 cCOND c= b1 cNIL cLAST b0 cLAST b1 f0
+ |- (((!f. (!s. (((map f) (rev s)) = (rev ((map f) s))))) ==> ((\f. (!s. (((map f) (rev s)) = (rev ((map f) s))))) f)) = ((\f. (!s. (((map f) (rev s)) = (rev ((map f) s))))) f))
T c= c==> ! ! c= cmap b0 crev b1 crev cmap b0 b1 * / ! c= cmap b0 crev b1 crev cmap b0 b1 f0 * / ! c= cmap b0 crev b1 crev cmap b0 b1 f0
+ |- ((\w. (((next_el ((find_face L) x)) x) = w)) ((next_el ((find_face L) x)) x))
T * / c= cnext_el cfind_face f0 f1 f1 b0 cnext_el cfind_face f0 f1 f1
+ ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f) |- ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) ((((l'z L) N) r) x))))) = g)
T c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f6 c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f2 cl'z f0 f3 f4 f1 f5
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ c= cztrans f0 b0 b1 b2 cNUMERAL c_0 cytrans f0 b0 b1 b2 cNUMERAL c_0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (y = z) |- (z = y)
T c==> c= f0 f1 c= f1 f0
- |- ((a ==> b) = ((~ a) \/ b))
T c= c==> f0 f1 c\/ c~ f0 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cuniq cbetwn f1 f2 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 f4 c==> c~ c= cbetwn f1 f2 f3 cNIL c==> c= cparts f0 f4 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 c==> cMEM f5 cbetwn f1 f2 f3 c==> cMEM f5 f1 c==> c= cfind_face f0 f5 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f5 cflatten f0 cFST f5
+ ((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) |- ((((sizel ((filter (MEM (FST d))) L)) = a) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> * / c= csizel cfilter * part cMEM cFST f0 f1 b0 f2 c= c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) /\ (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c/\ c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1
- ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), ((sizel ((filter (MEM (FST d))) L)) = a) |- ((CARD ((node (hypermap_of_list L)) d)) = a)
T c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c= cCARD * * part cnode chypermap_of_list f0 f1 f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))) |- ((\d. (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))) d)
T c==> ! c==> cMEM b0 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 * / c==> cMEM b0 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f3 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f3 f4 cf_list f1 f4 c==> c= cnext_el f3 f5 f6 c==> c= cprev_el f3 f6 f5 c==> c= cl'y f1 f3 f4 f7 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f3 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f3 f4 c==> cMEM f6 f3 c==> cMEM f7 f3 c==> c= cl'z f1 f0 f3 f4 f6 c==> c~ c= f6 f7 c==> c= cnext_el f2 f4 f8 c==> c= cfind_face f1 f4 f2 c==> cMEM f7 f2 c==> cMEM f6 f2 c==> c< cindexf f8 f7 f2 cindexf f8 f6 f2 c==> c= cfind_face f1 f7 f2 c==> c= cparts f1 cbetwn f2 f7 f6 cMAP / cCONS b0 cNIL cbetwn f2 f7 f6 c==> cuniq cbetwn f2 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f6 f9 c==> c~ c= cbetwn f2 f7 f6 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f7 f6 c==> cMEM f10 cbetwn f2 f7 f6 c==> cMEM f10 f2 c==> c= cfind_face f1 f10 f2 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ |- (?f. (((find_face L) x) = f))
T c? / c= cfind_face f0 f1 b0
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ |- (((!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) ==> ((\n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) a)) = ((\n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) a))
T c= c==> ! cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 * / cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 f0 * / cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 f0
- (filter = FILTER) |- (FILTER = filter)
T c==> c= part cfilter part cFILTER c= part cFILTER part cfilter
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 c==> cMEM f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f2 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))) ==> ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))) x)) = ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))) x))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 f2 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 f2 f3 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 f2 f3
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((MEM x) ((CONS y) NIL)) = (x = y))
T c= cMEM f0 cCONS f1 cNIL c= f0 f1
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))) N))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ c= cztrans f0 b0 b1 b2 cNUMERAL c_0 cytrans f0 b0 b1 b2 cNUMERAL c_0 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ c= cztrans f0 b0 b1 b2 cNUMERAL c_0 cytrans f0 b0 b1 b2 cNUMERAL c_0 f1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ c= cztrans f0 b0 b1 b2 cNUMERAL c_0 cytrans f0 b0 b1 b2 cNUMERAL c_0 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c= cmap / cFST cHD b0 cparts f1 f9 crev cmap part cFST cbetwn f4 f3 f2
- ((good_list L) /\ ((MEM d) (list_of_darts L))) |- ((((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d)))
T c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c==> c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1
+ |- ((\f. (!s. (((map f) (rev s)) = (rev ((map f) s))))) f)
T * / ! c= cmap b0 crev b1 crev cmap b0 b1 f0
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f1 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f5 f6 c==> cMEM f6 f4 c==> cMEM f7 f4 c==> c= cl'z f0 f3 f4 f2 f6 c==> c~ c= f6 f7 c==> c= cnext_el f1 f2 f8 c==> c= cfind_face f0 f2 f1 c==> cMEM f7 f1 c==> cMEM f6 f1 c==> c< cindexf f8 f7 f1 cindexf f8 f6 f1 c==> c= cfind_face f0 f7 f1 c==> c= cparts f0 cbetwn f1 f7 f6 cMAP / cCONS b0 cNIL cbetwn f1 f7 f6 c==> cuniq cbetwn f1 f7 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 f9 c==> c~ c= cbetwn f1 f7 f6 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f7 f6 c==> cMEM f10 cbetwn f1 f7 f6 c==> cMEM f10 f1 c==> c= cfind_face f0 f10 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cuniq cfind_face f0 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) /\ ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c/\ c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
- ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- (((sizel ((filter (MEM (FST d))) L)) = a) ==> (((NUMERAL _0) < (SUC (NUMERAL _0))) /\ ((SUC (NUMERAL _0)) < a)))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c/\ c< cNUMERAL c_0 cSUC cNUMERAL c_0 c< cSUC cNUMERAL c_0 f2
+ |- (?a. ((sizel ((filter (MEM (FST d))) L)) = a))
T c? / c= csizel cfilter * part cMEM cFST f0 f1 b0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) L)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 f0
- |- (((!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ==> ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2)) = ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2))
T c= c==> ! c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4 * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- |- (((!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))) ==> ((\l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))) l)) = ((\l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))) l))
T c= c==> ! c= cMAP f0 cMAP f1 b0 cMAP * * part co f0 f1 b0 * / c= cMAP f0 cMAP f1 b0 cMAP * * part co f0 f1 b0 f2 * / c= cMAP f0 cMAP f1 b0 cMAP * * part co f0 f1 b0 f2
+ (!d. (((MEM d) (((betwn f) y) z)) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) d) = (FST d)))) |- ((\d. (((MEM d) (((betwn f) y) z)) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) d) = (FST d)))) d)
T c==> ! c==> cMEM b0 cbetwn f0 f1 f2 c= * / cFST cHD crev cmap / cPOWER * part cn_list f3 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f3 b0 cFST b0 * / c==> cMEM b0 cbetwn f0 f1 f2 c= * / cFST cHD crev cmap / cPOWER * part cn_list f3 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f3 b0 cFST b0 f4
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cparts f0 f1 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f3 f4 c==> cMEM f5 cbetwn f2 f3 f4 c==> cMEM f5 f2 c==> c= cfind_face f0 f5 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f5 cflatten f0 cFST f5
- |- (((!b. (!a. ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))) ==> ((\b. (!a. ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))) b)) = ((\b. (!a. ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))) b))
T c= c==> ! ! c==> c~ c==> c= b1 b0 c= crev b1 crev b0 cF * / ! c==> c~ c==> c= b1 b0 c= crev b1 crev b0 cF f0 * / ! c==> c~ c==> c= b1 b0 c= crev b1 crev b0 cF f0
+ |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))))
T c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2
- (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))) |- (((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x)))) = T)
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c= c==> cIN f1 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 f1 cT
+ |- ((\N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) N)
T * / ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 f1
+ (~ ((rev a) = (rev b))), (a = b) |- F
T c==> c~ c= crev f0 crev f1 c==> c= f0 f1 cF
- |- (!f. (((\f. (((find_face L) x) = f)) f) ==> (?f. (((find_face L) x) = f))))
T c==> * / c= cfind_face f0 f1 b0 f2 c? / c= cfind_face f0 f1 b0
- (good_list L), (good_list_nodes L) |- ((good_list_nodes L) /\ (((((marked_list L) N) r) x) ==> ((~ ((final_list L) r)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g) ==> ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f4 cl'z f0 f1 f2 f3 f5 c==> c~ c= cbetwn cfind_face f0 f3 f4 cl'z f0 f1 f2 f3 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f3 f4 cl'z f0 f1 f2 f3
+ |- (((POWER f) (SUC n)) = (((POWER f) n) o f))
T c= * * part cPOWER f0 cSUC f1 * * part co * * part cPOWER f0 f1 f0
+ ((((marked_list L) N) r) x) |- ((((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))) = ((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> cmarked_list f0 f1 f2 f3 c= c==> cMEM f3 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 f5 cl'z f0 f1 f2 f3 c==> c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 f5 cl'z f0 f1 f2 f3
+ (~ (z = y)), (uniq ((find_face L) x)), (((find_face L) x) = f), ((MEM y) f), ((MEM z) f) |- (((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = ((((uniq f) /\ (((MEM y) f) /\ (((MEM z) f) /\ (~ (y = z))))) ==> (uniq (((betwn f) y) z))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))
T c==> c~ c= f0 f1 c==> cuniq cfind_face f2 f3 c==> c= cfind_face f2 f3 f4 c==> cMEM f1 f4 c==> cMEM f0 f4 c= c==> cuniq cbetwn f4 f1 f0 c= cmap / cFST cHD b0 cparts f2 f5 crev cmap part cFST cbetwn f4 f1 f0 c==> c==> c/\ cuniq f4 c/\ cMEM f1 f4 c/\ cMEM f0 f4 c~ c= f1 f0 cuniq cbetwn f4 f1 f0 c= cmap / cFST cHD b0 cparts f2 f5 crev cmap part cFST cbetwn f4 f1 f0
+ |- (((NUMERAL (BIT1 _0)) + (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT1 _0))))
T c= c+ cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
+ |- (((!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))))) ==> ((\r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))))) r)) = ((\r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))))) r))
T c= c==> ! ! ! c= cztrans f0 f1 b0 b1 b2 cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 * / ! ! c= cztrans f0 f1 b0 b1 b2 cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 f2 * / ! ! c= cztrans f0 f1 b0 b1 b2 cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 f2
+ |- (((?f. (((find_face L) x) = f)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c= c==> c? / c= cfind_face f0 f1 b0 c= cmap / cFST cHD b0 cparts f0 f2 crev cmap part cFST cbetwn cfind_face f0 f1 f3 f4 c= cmap / cFST cHD b0 cparts f0 f2 crev cmap part cFST cbetwn cfind_face f0 f1 f3 f4
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ call * part cf_last f0 f3 c/\ call * part cloop_list f0 f3 ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (((((l'z L) N) r) x) = z) |- (((~ ((((betwn f) y) z) = NIL)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = ((~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))
T c==> c= cl'z f0 f1 f2 f3 f4 c= c==> c~ c= cbetwn f5 f6 f4 cNIL c= cmap / cFST cHD b0 cparts f0 f7 crev cmap part cFST cbetwn f5 f6 f4 c==> c~ c= cbetwn f5 f6 cl'z f0 f1 f2 f3 cNIL c= cmap / cFST cHD b0 cparts f0 f7 crev cmap part cFST cbetwn f5 f6 f4
+ |- (((!L. (((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) x))) ==> (((find_face L) d) = ((find_face L) x)))) ==> ((\L. (((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) x))) ==> (((find_face L) d) = ((find_face L) x)))) L)) = ((\L. (((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) x))) ==> (((find_face L) d) = ((find_face L) x)))) L))
T c= c==> ! c==> c/\ cuniq clist_of_darts b0 cMEM f0 cfind_face b0 f1 c= cfind_face b0 f0 cfind_face b0 f1 * / c==> c/\ cuniq clist_of_darts b0 cMEM f0 cfind_face b0 f1 c= cfind_face b0 f0 cfind_face b0 f1 f2 * / c==> c/\ cuniq clist_of_darts b0 cMEM f0 cfind_face b0 f1 c= cfind_face b0 f0 cfind_face b0 f1 f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ call * part cloop_list f0 f3 ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- (((!n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) ==> ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n)) = ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n))
T c= c==> ! c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1
+ (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((simple_hypermap (hypermap_of_list L)) /\ ((is_no_double_joins (hypermap_of_list L)) /\ ((is_edge_nondegenerate (hypermap_of_list L)) /\ ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))))))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> c/\ csimple_hypermap chypermap_of_list f0 c/\ cis_no_double_joins chypermap_of_list f0 c/\ cis_edge_nondegenerate chypermap_of_list f0 c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM y) r) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f7 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c/\ cMEM f3 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))) ==> ((\N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))) N)) = ((\N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))) N))
T c= c==> ! ! ! ! c= cztrans f0 b0 b1 b2 b3 cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 * / ! ! ! c= cztrans f0 b0 b1 b2 b3 cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 f1 * / ! ! ! c= cztrans f0 b0 b1 b2 b3 cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) /\ ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) r) /\ (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f7 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c/\ cMEM f7 f4 c==> cMEM f3 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ |- (((!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))) ==> ((\f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))) f)) = ((\f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))) f))
T c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= b0 cfind_face f0 f3 c= b1 cnext_el b0 f3 c/\ cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 b0 c/\ cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c< cindexf b1 cytrans f0 f1 f2 f3 cNUMERAL c_0 b0 cindexf b1 cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= b0 cfind_face f0 f3 c= b1 cnext_el b0 f3 c/\ cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 b0 c/\ cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c< cindexf b1 cytrans f0 f1 f2 f3 cNUMERAL c_0 b0 cindexf b1 cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= b0 cfind_face f0 f3 c= b1 cnext_el b0 f3 c/\ cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 b0 c/\ cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c< cindexf b1 cytrans f0 f1 f2 f3 cNUMERAL c_0 b0 cindexf b1 cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4
- (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((uniq g) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cmarked_list f0 f3 f2 f1 c==> cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ (good_list L), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f), ((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) |- (((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) /\ ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f2 c==> * / c= csizel cfilter * part cMEM cFST f1 f0 b0 f3 c/\ * / c= csizel cfilter * part cMEM cFST f1 f0 b0 f3 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- |- (((!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) ==> ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2)) = ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2))
T c= c==> ! c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
+ |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))))
T c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2
+ |- ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))) N)
T * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c= cparts f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 cMAP / cCONS b3 cNIL cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), ((MEM d) (list_of_darts L)) |- ((MEM ((SND d) , (FST d))) (list_of_darts L))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0
- ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z)
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) /\ (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 f5 c==> c= cl'y f0 f2 f1 f6 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c/\ c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f7 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f6 cl'z f0 f3 f2 f1
+ (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
- |- (((!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) ==> ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)) = ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0))
T c= c==> ! c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))) x)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 b0 cNUMERAL c_0 cytrans f0 f1 f2 b0 cNUMERAL c_0 f3
+ ((sizel ((filter (MEM (FST d))) L)) = a), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- ((NUMERAL (BIT0 (BIT1 _0))) <= a)
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c<= cNUMERAL cBIT0 cBIT1 c_0 f2
- (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g) ==> ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c/\ cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f4 cl'z f0 f1 f2 f3 f5 c==> c~ c= cbetwn cfind_face f0 f3 f4 cl'z f0 f1 f2 f3 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f3 f4 cl'z f0 f1 f2 f3
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> c= cfind_face f1 f2 f8 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f2 f6 c==> c~ c= f6 f3 c==> c= cnext_el f8 f2 f9 c==> c= cfind_face f1 f2 f8 c==> cMEM f3 f8 c==> cMEM f6 f8 c==> c< cindexf f9 f3 f8 cindexf f9 f6 f8 c==> c= cfind_face f1 f3 f8 c==> c= cparts f1 cbetwn f8 f3 f6 cMAP / cCONS b0 cNIL cbetwn f8 f3 f6 c==> cuniq cbetwn f8 f3 f6 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn f8 f3 f6
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((normal_list L) N) /\ (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ cnormal_list f0 f3 c==> cMEM f4 f3 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)), (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) /\ ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c/\ c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) /\ ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cis_restricted chypermap_of_list f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c/\ ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cuniq f2 c==> c= cnext_el f2 f3 f4 c==> cMEM f4 f2 c==> cMEM f5 f2 c==> c= cl'z f1 f0 f2 f6 f4 c==> c~ c= f4 f5 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f1 f6 f7 c==> cMEM f5 f7 c==> cMEM f4 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f4 f7 c==> c= cfind_face f1 f5 f7 c==> c= cparts f1 cbetwn f7 f5 f4 cMAP / cCONS b0 cNIL cbetwn f7 f5 f4 c==> cuniq cbetwn f7 f5 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f7 f5 f4 f9 c==> c~ c= cbetwn f7 f5 f4 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f7 f5 f4 c==> cMEM f10 cbetwn f7 f5 f4 c==> cMEM f10 f7 c==> c= cfind_face f1 f10 f7 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- ((dart (hypermap_of_list L)) = EMPTY) |- (EMPTY = (dart (hypermap_of_list L)))
T c==> c= * part cdart chypermap_of_list f0 part cEMPTY c= part cEMPTY * part cdart chypermap_of_list f0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) /\ ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c==> cs_flag_list f0 f1 f3 f2 c==> c= cl'y f0 f3 f2 f4 c==> c= cprev_el f3 f5 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f0 f1 c==> call * part cloop_list f0 f1 c==> ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1 c==> cuniq f3 c==> c= cnext_el f3 f6 f5 c==> cMEM f5 f3 c==> cMEM f4 f3 c==> c= cl'z f0 f1 f3 f2 f5 c==> c~ c= f5 f4 c==> c= cnext_el f7 f2 f8 c==> c= cfind_face f0 f2 f7 c==> cMEM f4 f7 c==> cMEM f5 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f5 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f5 cMAP / cCONS b0 cNIL cbetwn f7 f4 f5 c==> cuniq cbetwn f7 f4 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 f9 c==> c~ c= cbetwn f7 f4 f5 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f5 c==> cMEM f10 cbetwn f7 f4 f5 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ (good_list L) |- (((!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (((good_list L) ==> (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d)))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))
T c==> cgood_list f0 c= c==> ! c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1 c==> c==> cgood_list f0 ! c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) /\ (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f3 cl'z f1 f0 f5 f6 f7 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ c= cfind_face f1 f6 f4 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c~ c= cbetwn f1 f2 f3 cNIL c==> c= cparts f0 f4 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 c==> cMEM f5 cbetwn f1 f2 f3 c==> cMEM f5 f1 c==> c= cfind_face f0 f5 f1 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f5 cflatten f0 cFST f5
+ |- ((\i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))) i)
T * / c= cztrans f0 f1 f2 f3 b0 cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 f4
- |- (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))
T c= cMEM f0 cfilter f1 f2 c/\ * f1 f0 cMEM f0 f2
- |- (((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)))) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))))) = ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)))))
T c= c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2
- |- ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f)
T * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (simple_hypermap (hypermap_of_list L)), (is_node_nondegenerate (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> csimple_hypermap chypermap_of_list f0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (((betwn f) y) z)) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cuniq cbetwn f7 f3 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f8 f2 c==> c= cnext_el cfind_face f1 f4 f4 f9 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f7 c==> c= cfind_face f1 f3 f7 c==> c= cparts f1 cbetwn f7 f3 f2 cMAP / cCONS b0 cNIL cbetwn f7 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f9 f3 f7 cindexf f9 f2 f7 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f7 c==> cMEM f3 f5 c==> cMEM f2 f7 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c/\ cuniq cbetwn f7 f3 f2 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f7 f3 f2
+ |- ((((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10350089)) /\ (((real_le (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_int _10350089)) /\ ((real_le (real_of_int _10350089)) (real_of_num (NUMERAL (BIT1 _0)))))))) ==> F) ==> (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10350089)) /\ (((real_le (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_int _10350089)) /\ ((real_le (real_of_int _10350089)) (real_of_num (NUMERAL (BIT1 _0)))))))) = (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10350089)) /\ (((real_le (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_int _10350089)) /\ ((real_le (real_of_int _10350089)) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 cF c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((uniq r) ==> (((next_el r) ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0))))
T c==> cuniq f0 c= cnext_el f0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cztrans f1 f2 f0 f3 cNUMERAL c_0
+ (!d. (((MEM d) (((betwn f) y) z)) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) d) = (FST d)))) |- (((!x. (((MEM x) (((betwn f) y) z)) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (FST x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) (((betwn f) y) z)) = ((map FST) (((betwn f) y) z)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) (((betwn f) y) z)) = ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cbetwn f0 f1 f2 c= * / cFST cHD crev cmap / cPOWER * part cn_list f3 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f3 b0 cFST b0 c==> c==> ! c==> cMEM b0 cbetwn f0 f1 f2 c= * / cFST cHD crev cmap / cPOWER * part cn_list f3 b1 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b1 cflatten f3 b0 cFST b0 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f0 f1 f2 cmap part cFST cbetwn f0 f1 f2 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f0 f1 f2 cmap part cFST cbetwn f0 f1 f2
- |- (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))))
T c= c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
- |- ((cat = APPEND) /\ (all = ALL))
T c/\ c= part ccat part cAPPEND c= part call part cALL
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((\d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) d)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 * / c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 f1
- (a = b) |- (F = F)
T c==> c= f0 f1 c= cF cF
- |- ((\l. (((APPEND l) NIL) = l)) l)
T * / c= cAPPEND b0 cNIL b0 f0
- |- ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)
T * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
+ |- (((((good_list L) /\ ((good_list_nodes L) /\ (((all uniq) L) /\ (((MEM d) (list_of_darts L)) /\ ((FST d) = (FST d)))))) ==> ((CARD ((node (hypermap_of_list L)) d)) = (LENGTH ((facesAt_list L) (FST d))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c= c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ call part cuniq f0 c/\ cMEM f1 clist_of_darts f0 c= cFST f1 cFST f1 c= cCARD * * part cnode chypermap_of_list f0 f1 cLENGTH cfacesAt_list f0 cFST f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ |- ((\s. ((!x. (((MEM x) s) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) x) = (FST x)))) ==> (((map (\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))))) s) = ((map FST) s)))) (((betwn f) y) z))
T * / c==> ! c==> cMEM b1 b0 c= * / cFST cHD crev cmap / cPOWER * part cn_list f0 b2 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 b1 cFST b1 c= cmap / cFST cHD crev cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 b0 cmap part cFST b0 cbetwn f1 f2 f3
+ |- ((\L. (((good_list L) /\ (good_list_nodes L)) ==> ((simple_hypermap (hypermap_of_list L)) = ((all uniq) L)))) L)
T * / c==> c/\ cgood_list b0 cgood_list_nodes b0 c= csimple_hypermap chypermap_of_list b0 call part cuniq b0 f0
- ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F), (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) |- (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) /\ ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))
T c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c/\ c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f3 cl'z f1 f0 f5 f6 f7 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> c= cfind_face f1 f6 f4 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))) |- ((\P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))) (\d. ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))))
T c==> ! c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 * / c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 / c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0
+ |- ((\d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) d2))) ==> (((find_face L) d) = ((find_face L) d2))))) x)
T * / ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 f1
+ |- ((((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c= c= cmap / cFST cHD b0 cparts f0 f1 crev cmap part cFST cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f5 f2 c= cmap * * part co part cFST part cHD cparts f0 f1 crev cmap part cFST cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f5 f2
- |- (((!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) ==> ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f)) = ((\f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))) f))
T c= c==> ! ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2 * / ! ! c= csplit_normal_list f0 f1 b0 b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b8 b9 cAPPEND b10 b7 cAPPEND cCONS b4 cNIL cAPPEND cbetwn f1 b4 b1 cCONS b1 cNIL cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b2 cCONS b2 cNIL cflatten cmap b6 b7 cbetwn b0 b1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b2 cnext_el f1 b1 f2
- |- (((!x. (((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) x) ==> (?a. ((sizel ((filter (MEM (FST d))) L)) = a)))) ==> ((?a. ((sizel ((filter (MEM (FST d))) L)) = a)) ==> (?a. ((sizel ((filter (MEM (FST d))) L)) = a)))) = ((?a. ((sizel ((filter (MEM (FST d))) L)) = a)) ==> (?a. ((sizel ((filter (MEM (FST d))) L)) = a))))
T c= c==> ! c==> * / c= csizel cfilter * part cMEM cFST f0 f1 b1 b0 c? / c= csizel cfilter * part cMEM cFST f0 f1 b1 c==> c? / c= csizel cfilter * part cMEM cFST f0 f1 b0 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0 c==> c? / c= csizel cfilter * part cMEM cFST f0 f1 b0 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0
- |- (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cmarked_list f2 f3 f4 f5 c==> cuniq f6 c==> cis_restricted chypermap_of_list f2 c==> cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- (((sizel ((filter (MEM (FST d))) L)) = a) /\ ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c/\ c= csizel cfilter * part cMEM cFST f1 f0 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ |- ((\s. (((map f) (rev s)) = (rev ((map f) s)))) s)
T * / c= cmap f0 crev b0 crev cmap f0 b0 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
+ (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f) |- ((!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) x))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))
T c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) |- (((~ (NIL = ((upt (NUMERAL (BIT1 _0))) a))) ==> ((NIL = ((upt (NUMERAL (BIT1 _0))) a)) = F)) = ((NIL = ((upt (NUMERAL (BIT1 _0))) a)) = F))
T c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c==> c~ c= cNIL cupt cNUMERAL cBIT1 c_0 f0 c= c= cNIL cupt cNUMERAL cBIT1 c_0 f0 cF c= c= cNIL cupt cNUMERAL cBIT1 c_0 f0 cF
+ |- (((!L. (!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))))))) ==> ((\L. (!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))))))) L)) = ((\L. (!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))))))) L))
T c= c==> ! ! ! ! ! c= cztrans b0 b1 b2 b3 b4 cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 * / ! ! ! ! c= cztrans b0 b1 b2 b3 b4 cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 f0 * / ! ! ! ! c= cztrans b0 b1 b2 b3 b4 cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 f0
+ |- (((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (((parts L) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))) = ((MAP (\x. ((CONS x) NIL))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c= c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c= cparts f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cMAP / cCONS b0 cNIL cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn f5 f6 f7 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn f5 f6 f7
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((find_face L) y) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> c= cfind_face f1 f3 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f9 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
+ |- (((!f1. (!f2. (!s. (((map f1) ((map f2) s)) = ((map (f1 o f2)) s))))) ==> ((\f1. (!f2. (!s. (((map f1) ((map f2) s)) = ((map (f1 o f2)) s))))) f1)) = ((\f1. (!f2. (!s. (((map f1) ((map f2) s)) = ((map (f1 o f2)) s))))) f1))
T c= c==> ! ! ! c= cmap b0 cmap b1 b2 cmap * * part co b0 b1 b2 * / ! ! c= cmap b0 cmap b1 b2 cmap * * part co b0 b1 b2 f0 * / ! ! c= cmap b0 cmap b1 b2 cmap * * part co b0 b1 b2 f0
+ ((sizel ((filter (MEM (FST d))) L)) = a), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- (((MEM (SUC (NUMERAL _0))) ((upt (NUMERAL (BIT1 _0))) a)) /\ (((n_list L) d) = (((POWER (n_list L)) (SUC (NUMERAL _0))) d)))
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c/\ cMEM cSUC cNUMERAL c_0 cupt cNUMERAL cBIT1 c_0 f2 c= cn_list f1 f0 cPOWER * part cn_list f1 cSUC cNUMERAL c_0 f0
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) |- ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) /\ (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c/\ c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
- |- (((!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) ==> ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N)) = ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N))
T c= c==> ! ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1 * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) r) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f7 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c/\ cMEM f7 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) |- (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) /\ (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c/\ c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
+ (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))))
T c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cPOWER * part cn_list f0 cLAST cupt cNUMERAL cBIT1 c_0 f2 f1 cFST f1
+ (simple_hypermap (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((is_no_double_joins (hypermap_of_list L)) /\ ((is_edge_nondegenerate (hypermap_of_list L)) /\ ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x)))))))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> csimple_hypermap chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> c/\ cis_no_double_joins chypermap_of_list f0 c/\ cis_edge_nondegenerate chypermap_of_list f0 c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM d) (((betwn f) y) z)) |- (((MEM d) (((betwn f) y) z)) /\ (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 cbetwn f2 f3 f4 c/\ cMEM f1 cbetwn f2 f3 f4 c==> cMEM f1 f2 c==> c= cfind_face f0 f1 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ |- (((((uniq (list_of_darts L)) /\ ((MEM d) ((find_face L) x))) ==> (((find_face L) d) = ((find_face L) x))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c= c==> c==> c/\ cuniq clist_of_darts f0 cMEM f1 cfind_face f0 f2 c= cfind_face f0 f1 cfind_face f0 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
- |- (!a. (((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) ==> (?a. ((sizel ((filter (MEM (FST d))) L)) = a))))
T c==> * / c= csizel cfilter * part cMEM cFST f0 f1 b0 f2 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0
+ (!d. (((MEM d) (((betwn f) y) z)) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) d) = (FST d)))) |- ((((MEM d) (((betwn f) y) z)) ==> (((\x. (FST (HD (rev ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))))) d) = (FST d))) = T)
T c==> ! c==> cMEM b0 cbetwn f0 f1 f2 c= * / cFST cHD crev cmap / cPOWER * part cn_list f3 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f3 b0 cFST b0 c= c==> cMEM f4 cbetwn f0 f1 f2 c= * / cFST cHD crev cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 f4 cFST f4 cT
+ |- ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)) = ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
- |- ((((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)))) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))))) = (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)))))
T c= c==> c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L) |- ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cuniq f1 c==> c= cnext_el f1 f2 f3 c==> cMEM f3 f1 c==> cMEM f4 f1 c==> c= cl'z f0 f5 f1 f6 f3 c==> c~ c= f3 f4 c==> c= cnext_el f7 f6 f8 c==> c= cfind_face f0 f6 f7 c==> cMEM f4 f7 c==> cMEM f3 f7 c==> c< cindexf f8 f4 f7 cindexf f8 f3 f7 c==> c= cfind_face f0 f4 f7 c==> c= cparts f0 cbetwn f7 f4 f3 cMAP / cCONS b0 cNIL cbetwn f7 f4 f3 c==> cuniq cbetwn f7 f4 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f3 f9 c==> c~ c= cbetwn f7 f4 f3 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f4 f3 c==> cMEM f10 cbetwn f7 f4 f3 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
- |- (((!x'. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) x') ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))) ==> ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))) = ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))))
T c= c==> ! c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b1 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b1 c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (is_node_nondegenerate (hypermap_of_list L)), (uniq L), (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f), ((all uniq) L) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> call part cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (is_node_nondegenerate (hypermap_of_list L)), (uniq L), (good_list L), ((CARD ((node (hypermap_of_list L)) d)) = (sizel ((filter (MEM (FST d))) L))), (((find_face L) d) = f), ((MEM d) f), ((all uniq) L) |- ((((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L)))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> c= cCARD * * part cnode chypermap_of_list f0 f1 csizel cfilter * part cMEM cFST f1 f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> call part cuniq f0 c==> c==> c/\ cuniq f0 call part cuniq f0 c= csizel cfilter / c= b0 cFST f1 cflatten f0 csizel cfilter * part cMEM cFST f1 f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (simple_hypermap (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((is_edge_nondegenerate (hypermap_of_list L)) /\ ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> csimple_hypermap chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> c/\ cis_edge_nondegenerate chypermap_of_list f0 c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((plain_hypermap (hypermap_of_list L)) /\ ((connected_hypermap (hypermap_of_list L)) /\ ((simple_hypermap (hypermap_of_list L)) /\ ((is_no_double_joins (hypermap_of_list L)) /\ ((is_edge_nondegenerate (hypermap_of_list L)) /\ ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))))))))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> c/\ cplain_hypermap chypermap_of_list f0 c/\ cconnected_hypermap chypermap_of_list f0 c/\ csimple_hypermap chypermap_of_list f0 c/\ cis_no_double_joins chypermap_of_list f0 c/\ cis_edge_nondegenerate chypermap_of_list f0 c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
- (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)) |- (((MAP (g o f)) l) = ((MAP g) ((MAP f) l)))
T c==> c= cMAP f0 cMAP f1 f2 cMAP * * part co f0 f1 f2 c= cMAP * * part co f0 f1 f2 cMAP f0 cMAP f1 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (!y. (((\y. ((((l'y L) r) x) = y)) y) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 ! c==> * / c= cl'y f0 f2 f1 b1 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- |- (((!x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) ==> ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x)) = ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x))
T c= c==> ! ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
+ |- (((!f. ((~ (s = NIL)) ==> ((LAST ((MAP f) s)) = (f (LAST s))))) ==> ((\f. ((~ (s = NIL)) ==> ((LAST ((MAP f) s)) = (f (LAST s))))) f)) = ((\f. ((~ (s = NIL)) ==> ((LAST ((MAP f) s)) = (f (LAST s))))) f))
T c= c==> ! c==> c~ c= f0 cNIL c= cLAST cMAP b0 f0 * b0 cLAST f0 * / c==> c~ c= f0 cNIL c= cLAST cMAP b0 f0 * b0 cLAST f0 f1 * / c==> c~ c= f0 cNIL c= cLAST cMAP b0 f0 * b0 cLAST f0 f1
+ |- (((?w. (((next_el ((find_face L) x)) x) = w)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c= c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c= cmap / cFST cHD b0 cparts f0 f2 crev cmap part cFST cbetwn cfind_face f0 f1 f3 f4 c= cmap / cFST cHD b0 cparts f0 f2 crev cmap part cFST cbetwn cfind_face f0 f1 f3 f4
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
+ |- ((\q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q'))))) q')
T * / c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f1 c==> c==> f1 c= c= cFST cLAST cmap / cPOWER * part cn_list f2 b1 f3 cupt cNUMERAL cBIT1 c_0 f0 cFST f3 b0 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f2 b1 f3 cupt cNUMERAL cBIT1 c_0 f0 cFST f3 c==> f1 b0 f4
- (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) |- ((((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) /\ (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)))
T c==> c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c/\ c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) /\ ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- (ALL = all) |- (all = ALL)
T c==> c= part cALL part call c= part call part cALL
+ |- (((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))) ==> ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))) r)) = ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))) r))
T c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 f2 c/\ c~ c= cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 cNIL cuniq f2 c= cparts f0 f2 crev cmap / cmap / cPOWER * part cn_list f0 b2 b2 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 f2 c/\ c~ c= cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 cNIL cuniq f2 c= cparts f0 f2 crev cmap / cmap / cPOWER * part cn_list f0 b2 b2 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 f3 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b2 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 f2 c/\ c~ c= cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 cNIL cuniq f2 c= cparts f0 f2 crev cmap / cmap / cPOWER * part cn_list f0 b2 b2 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn cfind_face f0 b1 cl'y f0 b0 b1 cl'z f0 f1 b0 b1 f3
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f6 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f7 c==> c~ c= f7 f2 c==> c= cnext_el f6 f1 f9 c==> c= cfind_face f0 f1 f6 c==> cMEM f2 f6 c==> cMEM f7 f6 c==> c< cindexf f9 f2 f6 cindexf f9 f7 f6 c==> c= cfind_face f0 f2 f6 c==> c= cparts f0 cbetwn f6 f2 f7 cMAP / cCONS b0 cNIL cbetwn f6 f2 f7 c==> cuniq cbetwn f6 f2 f7 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f6 f2 f7
- ((((betwn f) y) ((((l'z L) N) r) x)) = NIL) |- (NIL = (((betwn f) y) ((((l'z L) N) r) x)))
T c==> c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c= cNIL cbetwn f0 f1 cl'z f2 f3 f4 f5
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f7 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (((~ (z = y)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))) = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> cmarked_list f0 f4 f1 f2 c= c==> c~ c= f5 f3 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn cfind_face f0 f2 f3 f5 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f4 f1 f2 c~ cfinal_list f0 f1 c~ c= cztrans f0 f4 f1 f2 cNUMERAL c_0 cytrans f0 f4 f1 f2 cNUMERAL c_0 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn cfind_face f0 f2 f3 f5
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1
+ |- ((\L. (!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))))))) L)
T * / ! ! ! ! c= cztrans b0 b1 b2 b3 b4 cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 f0
- (~ ((dart (hypermap_of_list L)) = EMPTY)) |- (~ (EMPTY = (dart (hypermap_of_list L))))
T c==> c~ c= * part cdart chypermap_of_list f0 part cEMPTY c~ c= part cEMPTY * part cdart chypermap_of_list f0
- |- (((!L. (!N. (((quotient_list L) N) = ((MAP (core L)) N)))) ==> ((\L. (!N. (((quotient_list L) N) = ((MAP (core L)) N)))) L)) = ((\L. (!N. (((quotient_list L) N) = ((MAP (core L)) N)))) L))
T c= c==> ! ! c= cquotient_list b0 b1 cMAP * part ccore b0 b1 * / ! c= cquotient_list b0 b1 cMAP * part ccore b0 b1 f0 * / ! c= cquotient_list b0 b1 cMAP * part ccore b0 b1 f0
+ (good_list L), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- (((!x. (((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) x) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))) ==> ((?a. ((sizel ((filter (MEM (FST d))) L)) = a)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)))) = ((?a. ((sizel ((filter (MEM (FST d))) L)) = a)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f2 c= c==> ! c==> * / c= csizel cfilter * part cMEM cFST f1 f0 b1 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b1 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1 c==> c? / c= csizel cfilter * part cMEM cFST f1 f0 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1 c==> c? / c= csizel cfilter * part cMEM cFST f1 f0 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), (((MEM y) f) /\ (((MEM z) f) /\ ((((indexf w) y) f) < (((indexf w) z) f)))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cnext_el cfind_face f1 f4 f4 f8 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> c= cfind_face f1 f4 f9 c==> c/\ cMEM f3 f9 c/\ cMEM f2 f9 c< cindexf f8 f3 f9 cindexf f8 f2 f9 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f9 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f9 f3 f2
- |- (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))
T c= ccore f0 f1 cMAP * * part co part cFST part cHD cparts f0 f1
+ |- (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))
T c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) |- ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) /\ (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))) = (FST d)) = ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c/\ c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
- |- (((!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) ==> ((\x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) x0)) = ((\x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) x0))
T c= c==> ! c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 * / c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 f1 * / c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 f1
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)))) ==> ((\g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)))) g)) = ((\g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)))) g))
T c= c==> ! ! c= cMAP b0 cMAP f0 b1 cMAP * * part co b0 f0 b1 * / ! c= cMAP b0 cMAP f0 b1 cMAP * * part co b0 f0 b1 f1 * / ! c= cMAP b0 cMAP f0 b1 cMAP * * part co b0 f0 b1 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))))) N)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1
- |- (((!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))) ==> ((\s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))) s)) = ((\s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))) s))
T c= c==> ! c= cMEM f0 cfilter f1 b0 c/\ * f1 f0 cMEM f0 b0 * / c= cMEM f0 cfilter f1 b0 c/\ * f1 f0 cMEM f0 b0 f2 * / c= cMEM f0 cfilter f1 b0 c/\ * f1 f0 cMEM f0 b0 f2
+ |- (((!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) ==> ((\r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) r)) = ((\r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) r))
T c= c==> ! ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 * / ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 f2 * / ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 f2
+ ((sizel ((filter (MEM (FST d))) L)) = a), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (((NUMERAL _0) < (SUC (NUMERAL _0))) /\ ((SUC (NUMERAL _0)) < a))) = (((NUMERAL _0) < (SUC (NUMERAL _0))) /\ ((SUC (NUMERAL _0)) < a)))
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f2 c/\ c< cNUMERAL c_0 cSUC cNUMERAL c_0 c< cSUC cNUMERAL c_0 f2 c/\ c< cNUMERAL c_0 cSUC cNUMERAL c_0 c< cSUC cNUMERAL c_0 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cnext_el f4 f6 f7 c==> c= cprev_el f4 f7 f6 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c==> cMEM f7 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cmarked_list f2 f3 f4 f5 c==> cuniq f6 c==> cis_restricted chypermap_of_list f2 c==> cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) x))))) |- (((!d. (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (((!d. ((d IN (dart (hypermap_of_list L))) ==> ((\d. ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) d))) = (!d. (((MEM d) (list_of_darts L)) ==> ((\d. ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) d)))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c= c==> ! c==> cMEM b0 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1 c==> c= ! c==> cIN b0 * part cdart chypermap_of_list f0 * / c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b1 b0 ! c==> cMEM b0 clist_of_darts f0 * / c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b1 b0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 cFST f1
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (is_node_nondegenerate (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f) |- (((all uniq) L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> call part cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 cs_flag_list f0 f3 f2 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((\d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) d)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 * / c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 f2
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM z) f) |- (((MEM z) f) /\ (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c/\ cMEM f1 f2 c==> c< cindexf f3 f4 f2 cindexf f3 f1 f2 c==> c= cfind_face f0 f4 f2 c==> c= cparts f0 cbetwn f2 f4 f1 cMAP / cCONS b0 cNIL cbetwn f2 f4 f1 c==> cuniq cbetwn f2 f4 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f4 f1 f5 c==> c~ c= cbetwn f2 f4 f1 cNIL c==> c= cparts f0 f5 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f4 f1 c==> cMEM f6 cbetwn f2 f4 f1 c==> cMEM f6 f2 c==> c= cfind_face f0 f6 f2 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f6 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f6 cflatten f0 cFST f6
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)), (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) /\ ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c/\ c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cPOWER * part cn_list f0 cLAST cupt cNUMERAL cBIT1 c_0 f2 f1 cFST f1
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- (((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cmarked_list f0 f3 f2 f1 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f3 c/\ cMEM f2 f3 c/\ cMEM f1 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c/\ c= cnext_el f2 f1 cf_list f0 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c/\ c==> cfinal_list f0 f2 cflag_list f0 f3 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f3 f2 f1 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f10 f4 c==> c= cfind_face f1 f10 f4 c==> cuniq f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
+ (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) |- ((HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2
- (plain_hypermap (hypermap_of_list L)) |- ((plain_hypermap (hypermap_of_list L)) = T)
T c==> cplain_hypermap chypermap_of_list f0 c= cplain_hypermap chypermap_of_list f0 cT
+ |- ((\t. ((~ (t = NIL)) ==> ((HD (rev t)) = (LAST t)))) t)
T * / c==> c~ c= b0 cNIL c= cHD crev b0 cLAST b0 f0
+ (~ ((final_list L) r)) |- (((final_list L) r) = F)
T c==> c~ cfinal_list f0 f1 c= cfinal_list f0 f1 cF
- |- ((\q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (p' ==> q'))))) q')
T * / c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 c==> f1 b0 f4
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))) ==> ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))) r)) = ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))) r))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c/\ call / c~ c= b0 cNIL f3 c/\ call * part cf_last f0 f3 c/\ call * part cloop_list f0 f3 ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
+ |- ((\y. (((MEM y) ((map f) s)) = (?x. (((MEM x) s) /\ (y = (f x)))))) y)
T * / c= cMEM b0 cmap f0 f1 c? / c/\ cMEM b1 f1 c= b0 * f0 b1 f2
+ |- ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))) N)
T * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b3 b3 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 f1 c/\ c~ c= cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 cNIL cuniq f1 c= cparts f0 f1 crev cmap / cmap / cPOWER * part cn_list f0 b3 b3 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b3 cFST b3 cflatten f0 cbetwn cfind_face f0 b2 cl'y f0 b1 b2 cl'z f0 b0 b1 b2 f2
+ |- (((((MEM d) (((betwn f) y) z)) ==> ((MEM d) f)) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c= c==> c==> cMEM f0 cbetwn f1 f2 f3 cMEM f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f4 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f0 cflatten f4 cFST f0 c= cFST cHD crev cmap / cPOWER * part cn_list f4 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f0 cflatten f4 cFST f0
- |- (((!a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))))) ==> ((\a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))))) a)) = ((\a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))))) a))
T c= c==> ! ! ! c= cMEM b1 cfilter b0 b2 c/\ * b0 b1 cMEM b1 b2 * / ! ! c= cMEM b1 cfilter b0 b2 c/\ * b0 b1 cMEM b1 b2 f0 * / ! ! c= cMEM b1 cfilter b0 b2 c/\ * b0 b1 cMEM b1 b2 f0
+ |- (((!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))) ==> ((\r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))) r)) = ((\r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))) r))
T c= c==> ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= b2 cfind_face f0 b1 c= b3 cnext_el b2 b1 c/\ cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b2 c/\ cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b2 c< cindexf b3 cytrans f0 f1 b0 b1 cNUMERAL c_0 b2 cindexf b3 cztrans f0 f1 b0 b1 cNUMERAL c_0 b2 * / ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= b2 cfind_face f0 b1 c= b3 cnext_el b2 b1 c/\ cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b2 c/\ cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b2 c< cindexf b3 cytrans f0 f1 b0 b1 cNUMERAL c_0 b2 cindexf b3 cztrans f0 f1 b0 b1 cNUMERAL c_0 b2 f2 * / ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= b2 cfind_face f0 b1 c= b3 cnext_el b2 b1 c/\ cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b2 c/\ cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b2 c< cindexf b3 cytrans f0 f1 b0 b1 cNUMERAL c_0 b2 cindexf b3 cztrans f0 f1 b0 b1 cNUMERAL c_0 b2 f2
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)) |- (((~ (NIL = (((betwn f) y) ((((l'z L) N) r) x)))) ==> ((NIL = (((betwn f) y) ((((l'z L) N) r) x))) = F)) = ((NIL = (((betwn f) y) ((((l'z L) N) r) x))) = F))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c= c==> c~ c= cNIL cbetwn f0 f1 cl'z f2 f3 f4 f5 c= c= cNIL cbetwn f0 f1 cl'z f2 f3 f4 f5 cF c= c= cNIL cbetwn f0 f1 cl'z f2 f3 f4 f5 cF
- |- ((\a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) a)
T * / ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 f0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> * / c= cnext_el cfind_face f1 f4 f4 b0 f8 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
- ((NUMERAL (BIT0 (BIT1 _0))) <= a) |- (T = ((NUMERAL (BIT0 (BIT1 _0))) <= a))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cT c<= cNUMERAL cBIT0 cBIT1 c_0 f0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g)), ((((marked_list L) N) r) x) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 f4 c==> c/\ c~ c= cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 cNIL cuniq f4 c==> cmarked_list f0 f3 f1 f2 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2 crev cmap part cFST cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f3 f1 f2
+ |- (((!L. ((good_list L) ==> (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))))) ==> ((\L. ((good_list L) ==> (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))))) L)) = ((\L. ((good_list L) ==> (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))))) L))
T c= c==> ! c==> cgood_list b0 ! c= ! c==> cIN b2 * part cdart chypermap_of_list b0 * b1 b2 ! c==> cMEM b2 clist_of_darts b0 * b1 b2 * / c==> cgood_list b0 ! c= ! c==> cIN b2 * part cdart chypermap_of_list b0 * b1 b2 ! c==> cMEM b2 clist_of_darts b0 * b1 b2 f0 * / c==> cgood_list b0 ! c= ! c==> cIN b2 * part cdart chypermap_of_list b0 * b1 b2 ! c==> cMEM b2 clist_of_darts b0 * b1 b2 f0
- |- ((\x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))) x)
T * / ! c= cMEM b0 cfilter f0 b1 c/\ * f0 b0 cMEM b0 b1 f1
+ |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q'))))
T c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 f4 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 c==> f1 f4
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (simple_hypermap (hypermap_of_list L)), (is_node_nondegenerate (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f) |- ((((good_list L) /\ (good_list_nodes L)) ==> ((simple_hypermap (hypermap_of_list L)) = ((all uniq) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> csimple_hypermap chypermap_of_list f0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> c==> c/\ cgood_list f0 cgood_list_nodes f0 c= csimple_hypermap chypermap_of_list f0 call part cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10350089)) /\ (((real_le (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_int _10350089)) /\ ((real_le (real_of_int _10350089)) (real_of_num (NUMERAL (BIT1 _0)))))))) ==> F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 cF
+ |- ((\L. (!N. (!r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))))))) L)
T * / ! ! ! ! c= cytrans b0 b1 b2 b3 b4 cl'y b0 crtrans b0 b1 b2 b3 b4 b3 f0
+ (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f8 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f6 c==> c~ c= f6 f2 c==> c= cnext_el f8 f1 f9 c==> c= cfind_face f0 f1 f8 c==> cMEM f2 f8 c==> cMEM f6 f8 c==> c< cindexf f9 f2 f8 cindexf f9 f6 f8 c==> c= cfind_face f0 f2 f8 c==> c= cparts f0 cbetwn f8 f2 f6 cMAP / cCONS b0 cNIL cbetwn f8 f2 f6 c==> cuniq cbetwn f8 f2 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f8 f2 f6
+ |- (((!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= cntrans f0 f1 b0 b1 b2 cFST cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= cntrans f0 f1 b0 b1 b2 cFST cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= cntrans f0 f1 b0 b1 b2 cFST cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) /\ (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c/\ cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM y) r) |- (((MEM y) r) /\ ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c/\ cMEM f1 f2 c==> c= cl'z f0 f3 f2 f4 f5 c==> c~ c= f5 f1 c==> c= cnext_el f6 f4 f7 c==> c= cfind_face f0 f4 f6 c==> cMEM f1 f6 c==> cMEM f5 f6 c==> c< cindexf f7 f1 f6 cindexf f7 f5 f6 c==> c= cfind_face f0 f1 f6 c==> c= cparts f0 cbetwn f6 f1 f5 cMAP / cCONS b0 cNIL cbetwn f6 f1 f5 c==> cuniq cbetwn f6 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f1 f5 f8 c==> c~ c= cbetwn f6 f1 f5 cNIL c==> c= cparts f0 f8 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f1 f5 c==> cMEM f9 cbetwn f6 f1 f5 c==> cMEM f9 f6 c==> c= cfind_face f0 f9 f6 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f9 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f9 cflatten f0 cFST f9
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x), ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((\w. (((next_el ((find_face L) x)) x) = w)) w) /\ (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) z)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f6 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f4 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f5 f4 cf_list f1 f4 c==> c= cnext_el f5 f7 f2 c==> c= cprev_el f5 f2 f7 c==> c= cl'y f1 f5 f4 f3 c==> c= cl'z f1 f0 f5 f4 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f3 cl'z f1 f0 f5 f4 f6 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f4 f5 c==> cMEM f4 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f4 c==> cmarked_list f1 f0 f5 f4 c==> * / c= cnext_el cfind_face f1 f4 f4 b0 f8 c/\ * / c= cnext_el cfind_face f1 f4 f4 b0 f8 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn cfind_face f1 f4 f3 f2
- ((((s_flag_list L) N) r) x) |- (((((s_flag_list L) N) r) x) = T)
T c==> cs_flag_list f0 f1 f2 f3 c= cs_flag_list f0 f1 f2 f3 cT
+ (a = b) |- ((~ ((rev a) = (rev b))) = (~ ((rev b) = (rev b))))
T c==> c= f0 f1 c= c~ c= crev f0 crev f1 c~ c= crev f1 crev f1
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) |- (((~ (NIL = ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) ==> ((NIL = ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))) = F)) = ((NIL = ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a))) = F))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c==> c~ c= cNIL cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 c= c= cNIL cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cF c= c= cNIL cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cF
+ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))), (is_node_nondegenerate (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((MEM d) f), ((all uniq) L) |- (((all uniq) L) /\ ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f1 f2 c==> call part cuniq f0 c/\ call part cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ |- ((\p'. (!q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q')))))) p')
T * / ! c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL b0 c==> c==> b0 c= c= cFST cLAST cmap / cPOWER * part cn_list f1 b2 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 b1 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f1 b2 f2 cupt cNUMERAL cBIT1 c_0 f0 cFST f2 c==> b0 b1 f3
+ (is_restricted (hypermap_of_list L)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> ((~ ((((betwn f) y) z) = NIL)) ==> ((((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))) ==> (((MEM d) (((betwn f) y) z)) ==> (((MEM d) f) ==> ((((find_face L) d) = f) ==> ((uniq L) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d)))))))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq f7 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f4 f3 c==> cMEM f3 f1 c==> cMEM f5 f1 c==> c= cl'z f0 f6 f1 f2 f3 c==> c~ c= f3 f5 c==> c= cnext_el f7 f2 f8 c==> c= cfind_face f0 f2 f7 c==> cMEM f5 f7 c==> cMEM f3 f7 c==> c< cindexf f8 f5 f7 cindexf f8 f3 f7 c==> c= cfind_face f0 f5 f7 c==> c= cparts f0 cbetwn f7 f5 f3 cMAP / cCONS b0 cNIL cbetwn f7 f5 f3 c==> cuniq cbetwn f7 f5 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f3 f9 c==> c~ c= cbetwn f7 f5 f3 cNIL c==> c= cparts f0 f9 crev cmap / cmap / cPOWER * part cn_list f0 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f3 c==> cMEM f10 cbetwn f7 f5 f3 c==> cMEM f10 f7 c==> c= cfind_face f0 f10 f7 c==> cuniq f0 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f0 cFST f10
+ ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) |- ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g)
T c==> c= cl'y f0 f1 f2 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 cl'y f0 f1 f2 cl'z f0 f4 f1 f2 f5 c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f3 cl'z f0 f4 f1 f2 f5
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f8 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f1 f6 c==> c~ c= f6 f2 c==> c= cnext_el f8 f1 f9 c==> c= cfind_face f0 f1 f8 c==> cMEM f2 f8 c==> cMEM f6 f8 c==> c< cindexf f9 f2 f8 cindexf f9 f6 f8 c==> c= cfind_face f0 f2 f8 c==> c= cparts f0 cbetwn f8 f2 f6 cMAP / cCONS b0 cNIL cbetwn f8 f2 f6 c==> cuniq cbetwn f8 f2 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f8 f2 f6
- |- (((!L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) ==> ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)) = ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L))
T c= c==> ! ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
+ ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), (((find_face L) x) = f) |- ((((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) ((((l'z L) N) r) x))))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))) = (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))
T c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> c= cfind_face f0 f1 f6 c= c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f2 cl'z f0 f3 f4 f1 f5 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f6 f2 f7 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn f6 f2 f7
+ (simple_hypermap (hypermap_of_list L)), (is_node_nondegenerate (hypermap_of_list L)), (uniq L), (good_list L), (good_list_nodes L), (((find_face L) d) = f), ((is_node_nondegenerate (hypermap_of_list L)) /\ (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x)))))), ((MEM d) f) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> csimple_hypermap chypermap_of_list f0 c==> cis_node_nondegenerate chypermap_of_list f0 c==> cuniq f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cfind_face f0 f1 f2 c==> c/\ cis_node_nondegenerate chypermap_of_list f0 ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cMEM f1 f2 c= cFST cHD crev cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f1 cflatten f0 cFST f1
+ (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10350089)) /\ (((real_le (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_int _10350089)) /\ ((real_le (real_of_int _10350089)) (real_of_num (NUMERAL (BIT1 _0)))))))) |- (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 creal_le creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) ==> ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)) = ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r))
T c= c==> ! ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2 * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f2 f1 f4 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f5 c==> cmarked_list f0 f3 f2 f1 c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f3 c==> cMEM f2 f3 c==> cMEM f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f2 f1 c==> c= cl'y f0 f2 f1 f4 c==> c= cprev_el f2 f6 f7 c==> c= cztrans f0 f3 f2 f1 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f4 cl'z f0 f3 f2 f1
+ |- ((!y. (!r. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq (((betwn r) z) y))))) = T)
T c= ! ! c==> c/\ cuniq b1 c/\ cMEM f0 b1 c/\ cMEM b0 b1 c~ c= f0 b0 cuniq cbetwn b1 f0 b0 cT
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cmarked_list f2 f3 f4 f5 c==> cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
+ (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (!z1. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f2 f1 cf_list f0 f1 c==> c= cl'y f0 f2 f1 f5 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f2 c==> cMEM f2 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f2 f1 c==> cmarked_list f0 f3 f2 f1 ! c==> * / c= cprev_el f2 cztrans f0 f3 f2 f1 cNUMERAL c_0 b1 b0 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 f5 cl'z f0 f3 f2 f1
+ (good_list L), (good_list_nodes L), ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g)))))) |- (((map (FST o HD)) ((parts L) (rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 f4 c/\ c~ c= cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 cNIL cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f2 f3 cl'z f0 f1 f2 f3
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g) ==> ((~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f4 cl'z f0 f2 f1 f3 f5 c==> c~ c= cbetwn cfind_face f0 f3 f4 cl'z f0 f2 f1 f3 cNIL c==> cuniq f5 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f2 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f6 f7 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f6 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f3 f4 cl'z f0 f2 f1 f3
- |- ((((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> (?w. (((next_el ((find_face L) x)) x) = w))) = T)
T c= c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0 cT
- (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) |- (~ (NIL = ((upt (NUMERAL (BIT1 _0))) a)))
T c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c~ c= cNIL cupt cNUMERAL cBIT1 c_0 f0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f2 cl'z f0 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- |- (((!x. (((MEM x) (rev s)) = ((MEM x) s))) ==> ((\x. (((MEM x) (rev s)) = ((MEM x) s))) x)) = ((\x. (((MEM x) (rev s)) = ((MEM x) s))) x))
T c= c==> ! c= cMEM b0 crev f0 cMEM b0 f0 * / c= cMEM b0 crev f0 cMEM b0 f0 f1 * / c= cMEM b0 crev f0 cMEM b0 f0 f1
- |- (((!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (p' ==> q'))))) ==> ((\q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (p' ==> q'))))) q')) = ((\q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 c==> f1 b0 * / c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 c==> f1 b0 f4 * / c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 c==> f1 b0 f4
+ (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f5 f1 cl'z f2 f3 f4 f5 f6 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- (((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) ==> ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)) = ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s))
T c= c==> ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (a = b), ((a = b) ==> ((rev a) = (rev b))) |- ((a = b) /\ ((rev a) = (rev b)))
T c==> c= f0 f1 c==> c==> c= f0 f1 c= crev f0 crev f1 c/\ c= f0 f1 c= crev f0 crev f1
- ((sizel ((filter (MEM (FST d))) L)) = a) |- ((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a)
T c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 * / c= csizel cfilter * part cMEM cFST f0 f1 b0 f2
- |- (((NUMERAL (BIT1 _0)) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT1 _0)))
T c= c* cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 c_0
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)), (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)), (good_list L), ((sizel ((filter (MEM (FST d))) L)) = a), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> c~ c= cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> cgood_list f0 c==> c= csizel cfilter * part cMEM cFST f1 f0 f2 c==> c= cfind_face f0 f1 f3 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f3 c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1
- |- ((\q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))) q)
T * / c= cLAST cAPPEND f0 b0 cCOND c= b0 cNIL cLAST f0 cLAST b0 f1
- (NIL = (((betwn f) y) z)) |- ((((betwn f) y) z) = NIL)
T c==> c= cNIL cbetwn f0 f1 f2 c= cbetwn f0 f1 f2 cNIL
- ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) |- ((((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))
T c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
- ((\y. ((((l'y L) r) x) = y)) y) |- ((((((l'y L) r) x) = y) ==> (?y. ((((l'y L) r) x) = y))) = (?y. ((((l'y L) r) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c= c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- ((good_list L) /\ ((MEM d) (list_of_darts L))), (((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))) |- ((((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))) /\ ((FST (((POWER (n_list L)) n) d)) = (FST d)))
T c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c==> c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1 c/\ c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1
- |- (F = (~ T))
T c= cF c~ cT
- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) /\ (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c/\ * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((!d. (!L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L)))))) ==> ((\d. (!L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L)))))) d)) = ((\d. (!L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L)))))) d))
T c= c==> ! ! c==> c/\ cuniq b1 call part cuniq b1 c= csizel cfilter / c= b2 cFST b0 cflatten b1 csizel cfilter * part cMEM cFST b0 b1 * / ! c==> c/\ cuniq b1 call part cuniq b1 c= csizel cfilter / c= b2 cFST b0 cflatten b1 csizel cfilter * part cMEM cFST b0 b1 f0 * / ! c==> c/\ cuniq b1 call part cuniq b1 c= csizel cfilter / c= b2 cFST b0 cflatten b1 csizel cfilter * part cMEM cFST b0 b1 f0
- |- (((!N. (((quotient_list L) N) = ((MAP (core L)) N))) ==> ((\N. (((quotient_list L) N) = ((MAP (core L)) N))) N)) = ((\N. (((quotient_list L) N) = ((MAP (core L)) N))) N))
T c= c==> ! c= cquotient_list f0 b0 cMAP * part ccore f0 b0 * / c= cquotient_list f0 b0 cMAP * part ccore f0 b0 f1 * / c= cquotient_list f0 b0 cMAP * part ccore f0 b0 f1
- |- ((((\y. ((((l'y L) r) x) = y)) y) ==> (?y. ((((l'y L) r) x) = y))) = T)
T c= c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0 cT
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) /\ ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f2 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c/\ call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))), ((sizel ((filter (MEM (FST d))) L)) = a) |- ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = a)
T c==> c= csizel cfilter / c= b0 cFST f0 cflatten f1 csizel cfilter * part cMEM cFST f0 f1 c==> c= csizel cfilter * part cMEM cFST f0 f1 f2 c= csizel cfilter / c= b0 cFST f0 cflatten f1 f2
- ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) /\ (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0
- |- ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L)
T * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0
- |- (((!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))) ==> ((\x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))) x)) = ((\x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))) x))
T c= c==> ! ! c= cMEM b0 cfilter f0 b1 c/\ * f0 b0 cMEM b0 b1 * / ! c= cMEM b0 cfilter f0 b1 c/\ * f0 b0 cMEM b0 b1 f1 * / ! c= cMEM b0 cfilter f0 b1 c/\ * f0 b0 cMEM b0 b1 f1
- |- ((((find_face L) x) = f) ==> (?f. (((find_face L) x) = f)))
T c==> c= cfind_face f0 f1 f2 c? / c= cfind_face f0 f1 b0
- (LENGTH = sizel) |- (sizel = LENGTH)
T c==> c= part cLENGTH part csizel c= part csizel part cLENGTH
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (((find_face L) x) = f) |- (((~ (NIL = (((betwn f) y) ((((l'z L) N) r) x)))) ==> ((NIL = (((betwn f) y) ((((l'z L) N) r) x))) = F)) = ((NIL = (((betwn f) y) ((((l'z L) N) r) x))) = F))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c= cfind_face f0 f1 f5 c= c==> c~ c= cNIL cbetwn f5 f2 cl'z f0 f3 f4 f1 c= c= cNIL cbetwn f5 f2 cl'z f0 f3 f4 f1 cF c= c= cNIL cbetwn f5 f2 cl'z f0 f3 f4 f1 cF
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))) |- ((\x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))) x)
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 * / c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 f1
- |- (T = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (((NUMERAL _0) < (SUC (NUMERAL _0))) /\ ((SUC (NUMERAL _0)) < a))))
T c= cT c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c/\ c< cNUMERAL c_0 cSUC cNUMERAL c_0 c< cSUC cNUMERAL c_0 f0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)
T * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f2 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- ((?a. ((sizel ((filter (MEM (FST d))) L)) = a)) ==> (?a. ((sizel ((filter (MEM (FST d))) L)) = a)))
T c==> c? / c= csizel cfilter * part cMEM cFST f0 f1 b0 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0
- (good_list L), (good_list_nodes L) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))) = (\r. (!x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0 / ! c==> c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) /\ (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))) = T)
T c= c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0 cT
- (NIL = ((upt (NUMERAL (BIT1 _0))) a)) |- (((upt (NUMERAL (BIT1 _0))) a) = NIL)
T c==> c= cNIL cupt cNUMERAL cBIT1 c_0 f0 c= cupt cNUMERAL cBIT1 c_0 f0 cNIL
- |- ((sizel = LENGTH) /\ ((filter = FILTER) /\ ((rev = REVERSE) /\ ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL))))))
T c/\ c= part csizel part cLENGTH c/\ c= part cfilter part cFILTER c/\ c= part crev part cREVERSE c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N)
T * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1
- |- ((\p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (p' ==> q')))))) p')
T * / ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 b0 c==> c==> b0 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b2 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b2 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> b0 b1 f2
- ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) |- (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) /\ ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))
T c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c/\ c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
- (~ ((a = b) ==> ((rev a) = (rev b)))) |- F
T c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
- |- (T = ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0))))
T c= cT c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) ==> (?a. ((sizel ((filter (MEM (FST d))) L)) = a))) = T)
T c= c==> * / c= csizel cfilter * part cMEM cFST f0 f1 b0 f2 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0 cT
- |- (((NUMERAL (BIT0 (BIT1 _0))) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT1 _0))))
T c= c* cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- |- (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q'))))
T c==> c= c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3 c==> c==> f3 c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 f4 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> f3 f4
- |- ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))
T c= cLAST cAPPEND f0 f1 cCOND c= f1 cNIL cLAST f0 cLAST f1
- |- (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q'))))
T c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 f4 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 c==> f1 f4
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c/\ cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- (((!L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) ==> ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L)) = ((\L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))))))) L))
T c= c==> ! ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0 * / ! ! ! ! c= csplit_normal_list b0 b1 b2 b3 b4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b10 b11 cAPPEND b12 b9 cAPPEND cCONS b6 cNIL cAPPEND cbetwn b1 b6 b3 cCONS b3 cNIL cAPPEND cCONS b5 cNIL cAPPEND cbetwn b1 b5 b4 cCONS b4 cNIL cflatten cmap b8 b9 cbetwn b2 b3 b6 / cmap / cPOWER * part cn_list b0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten b0 cnext_el b1 b4 cnext_el b1 b3 f0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f8 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f8 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) /\ ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (!P. ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))) |- ((!d. ((d IN (dart (hypermap_of_list L))) ==> (P d))) = (!d. (((MEM d) (list_of_darts L)) ==> (P d))))
T c==> ! c= ! c==> cIN b1 * part cdart chypermap_of_list f0 * b0 b1 ! c==> cMEM b1 clist_of_darts f0 * b0 b1 c= ! c==> cIN b0 * part cdart chypermap_of_list f0 * f1 b0 ! c==> cMEM b0 clist_of_darts f0 * f1 b0
- (rev = REVERSE) |- (REVERSE = rev)
T c==> c= part crev part cREVERSE c= part cREVERSE part crev
- |- ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)
T * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- ((((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL))) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> q')))) = (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> q'))))
T c= c==> c= c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c==> c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 f3 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3 c==> c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 f3 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3
- |- ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (p' ==> q'))))
T c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 f2 c==> c==> f2 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 f3 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> f2 f3
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) /\ ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ ((rev b) = (rev b))) |- ((~ ((rev b) = (rev b))) /\ ((rev b) = (rev b)))
T c==> c~ c= crev f0 crev f0 c/\ c~ c= crev f0 crev f0 c= crev f0 crev f0
- |- ((~ T) = F)
T c= c~ cT cF
- (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((uniq g) /\ (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cuniq f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cmarked_list f0 f3 f2 f1 c/\ cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- |- ((s = t) = (!x. ((x IN s) = (x IN t))))
T c= c= f0 f1 ! c= cIN b0 f0 cIN b0 f1
- (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g), ((((marked_list L) N) r) x) |- ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ ((uniq g) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> c~ cfinal_list f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 f4 c==> cmarked_list f0 f3 f2 f1 c/\ c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c==> cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((\g. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))))))))) g)
T * / ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list b1 b5 b5 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 b0 c/\ c~ c= cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 cNIL cuniq b0 c= cparts b1 b0 crev cmap / cmap / cPOWER * part cn_list b1 b5 b5 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn cfind_face b1 b4 cl'y b1 b3 b4 cl'z b1 b2 b3 b4 f0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (((find_face L) x) = f) |- (~ (NIL = (((betwn f) y) ((((l'z L) N) r) x))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c= cfind_face f0 f1 f5 c~ c= cNIL cbetwn f5 f2 cl'z f0 f3 f4 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (!z1. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- (((!f. (!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))))) ==> ((\f. (!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))))) f)) = ((\f. (!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))))) f))
T c= c==> ! ! ! c= cMEM b1 cMAP b0 b2 c? / c/\ cMEM b3 b2 c= b1 * b0 b3 * / ! ! c= cMEM b1 cMAP b0 b2 c? / c/\ cMEM b3 b2 c= b1 * b0 b3 f0 * / ! ! c= cMEM b1 cMAP b0 b2 c? / c/\ cMEM b3 b2 c= b1 * b0 b3 f0
- |- (((MEM x) (rev s)) = ((MEM x) s))
T c= cMEM f0 crev f1 cMEM f0 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- |- ((!L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L))))) = T)
T c= ! c==> c/\ cuniq b0 call part cuniq b0 c= csizel cfilter / c= b1 cFST f0 cflatten b0 csizel cfilter * part cMEM cFST f0 b0 cT
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2)
T * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
- |- ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x)
T * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- |- ((\q'. (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = q')) ==> (((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))) = (p' ==> q'))))) q')
T * / c==> c= c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 b0 c= c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cFST cPOWER * part cn_list f2 cLAST cupt cNUMERAL cBIT1 c_0 f0 f3 cFST f3 c==> f1 b0 f4
- (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (cat = APPEND)
T c= part ccat part cAPPEND
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL) |- (NIL = (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))
T c==> c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c= cNIL cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- |- ((((next_el ((find_face L) x)) x) = w) ==> (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f7 c==> c~ c= f7 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f7 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f7 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f7 cMAP / cCONS b0 cNIL cbetwn f2 f3 f7 c==> cuniq cbetwn f2 f3 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f7 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f7
- (FILTER = filter) |- (filter = FILTER)
T c==> c= part cFILTER part cfilter c= part cfilter part cFILTER
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c==> cMEM f8 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f8 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
- ((a = b) ==> ((rev a) = (rev b))) |- (((a = b) ==> ((rev a) = (rev b))) /\ ((a = b) ==> ((rev a) = (rev b))))
T c==> c==> c= f0 f1 c= crev f0 crev f1 c/\ c==> c= f0 f1 c= crev f0 crev f1 c==> c= f0 f1 c= crev f0 crev f1
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), ((MEM d) (flatten N)) |- (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0
- |- (!w. (((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> (?w. (((next_el ((find_face L) x)) x) = w))))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- (APPEND = cat) |- (cat = APPEND)
T c==> c= part cAPPEND part ccat c= part ccat part cAPPEND
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f1 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> q')))
T c==> c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 f3 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL f3
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) z) = NIL)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq (((betwn f) y) z)), (uniq L), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g), (((find_face L) d) = f), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn f) y) z)))), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM d) f), ((MEM d) (((betwn f) y) z)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x) |- ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST d)))) (flatten L)))))))) = (FST d))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 f2 cNIL c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cbetwn f4 f3 f2 c==> cuniq f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f7 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f8 f2 c==> c= cprev_el f5 f2 f8 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f9 c==> c= cfind_face f1 f10 f4 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 f9 crev cmap / cmap / cPOWER * part cn_list f1 b1 b0 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f7 f3 f4 cindexf f7 f2 f4 c==> cMEM f10 f4 c==> cMEM f10 cbetwn f4 f3 f2 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f10 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b0 cFST f10 cflatten f1 cFST f10
- (~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) |- ((((upt (NUMERAL (BIT1 _0))) a) = NIL) = F)
T c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cupt cNUMERAL cBIT1 c_0 f0 cNIL cF
- |- (((!p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> b0 b1 * / ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> b0 b1 f3 * / ! c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 b0 c==> c==> b0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 b1 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> b0 b1 f3
- |- (((!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))) ==> ((\q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))) q)) = ((\q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))) q))
T c= c==> ! c= cLAST cAPPEND f0 b0 cCOND c= b0 cNIL cLAST f0 cLAST b0 * / c= cLAST cAPPEND f0 b0 cCOND c= b0 cNIL cLAST f0 cLAST b0 f1 * / c= cLAST cAPPEND f0 b0 cCOND c= b0 cNIL cLAST f0 cLAST b0 f1
- |- (rev = REVERSE)
T c= part crev part cREVERSE
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) /\ ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c/\ ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f7 c==> c~ c= f7 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f7 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f7 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f7 cMAP / cCONS b0 cNIL cbetwn f2 f3 f7 c==> cuniq cbetwn f2 f3 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f7 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f7
- |- ((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) /\ ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) /\ (uniq g))))))) ==> (((parts L) g) = (rev ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) (rev ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L)))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))))) = T)
T c= ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= crev cflatten cmap / cmap / cPOWER * part cn_list b0 b4 b4 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 f0 c/\ c~ c= cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cNIL cuniq f0 c= cparts b0 f0 crev cmap / cmap / cPOWER * part cn_list b0 b4 b4 crev cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn cfind_face b0 b3 cl'y b0 b2 b3 cl'z b0 b1 b2 b3 cT
- (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) |- (((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL) = F)
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c= c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL cF
- |- (((!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))) ==> ((\y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))) y)) = ((\y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))) y))
T c= c==> ! ! c= cMEM b0 cMAP f0 b1 c? / c/\ cMEM b2 b1 c= b0 * f0 b2 * / ! c= cMEM b0 cMAP f0 b1 c? / c/\ cMEM b2 b1 c= b0 * f0 b2 f1 * / ! c= cMEM b0 cMAP f0 b1 c? / c/\ cMEM b2 b1 c= b0 * f0 b2 f1
- |- (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))
T c= cMAP f0 cMAP f1 f2 cMAP * * part co f0 f1 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> cuniq f1 c==> cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) = p') ==> ((p' ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (p' ==> q'))))
T c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f1 c==> c==> f1 c= c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 f4 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f2 cPRE f0 f3 cFST f3 c==> f1 f4
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((((betwn f) y) z) = NIL) |- (NIL = (((betwn f) y) z))
T c==> c= cbetwn f0 f1 f2 cNIL c= cNIL cbetwn f0 f1 f2
- |- ((!a. (P a)) = ((P T) /\ (P F)))
T c= ! * f0 b0 c/\ * f0 cT * f0 cF
- (~ F), (~ ((rev a) = (rev b))), (a = b) |- ((~ F) /\ F)
T c==> c~ cF c==> c~ c= crev f0 crev f1 c==> c= f0 f1 c/\ c~ cF cF
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) /\ ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> c= cl'z f1 f0 f4 f5 f8 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f8 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c/\ c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f8 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) /\ (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c/\ * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- ((NUMERAL (BIT0 (BIT1 _0))) <= a) |- (((NUMERAL (BIT0 (BIT1 _0))) <= a) /\ (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2
- (~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) |- ((((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL) = F)
T c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL cF
- |- (((((NUMERAL (BIT0 (BIT1 _0))) <= a) = ((NUMERAL (BIT0 (BIT1 _0))) <= a)) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> q')))) = ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> q'))))
T c= c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 f3 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f3 c==> c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 f3 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 f3
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- |- (((!p'. (!q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) = p') ==> ((p' ==> (((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d)) = q')) ==> (((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((FST (LAST ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)))) = (FST d))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL b0 c==> c==> b0 c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b1 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> b0 b1 * / ! c==> c= c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL b0 c==> c==> b0 c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b1 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> b0 b1 f3 * / ! c==> c= c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL b0 c==> c==> b0 c= c= cFST cLAST cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 b1 c= c==> c~ c= cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cNIL c= cFST cLAST cmap / cPOWER * part cn_list f0 b2 f1 cupt cNUMERAL cBIT1 c_0 f2 cFST f1 c==> b0 b1 f3
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))
T c= cMEM f0 cAPPEND f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM y) r) /\ ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f8 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c/\ cMEM f3 f4 c==> c= cl'z f1 f0 f4 f5 f8 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f8 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
- |- (((!L. (!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s)))))) ==> ((\L. (!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s)))))) L)) = ((\L. (!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s)))))) L))
T c= c==> ! ! c= cf_last b0 b1 c= cnext_el b1 cLAST b1 cf_list b0 cLAST b1 * / ! c= cf_last b0 b1 c= cnext_el b1 cLAST b1 cf_list b0 cLAST b1 f0 * / ! c= cf_last b0 b1 c= cnext_el b1 cLAST b1 cf_list b0 cLAST b1 f0
- |- (((!l. (((APPEND l) NIL) = l)) ==> ((\l. (((APPEND l) NIL) = l)) l)) = ((\l. (((APPEND l) NIL) = l)) l))
T c= c==> ! c= cAPPEND b0 cNIL b0 * / c= cAPPEND b0 cNIL b0 f0 * / c= cAPPEND b0 cNIL b0 f0
- |- ((\d. (!L. (((uniq L) /\ ((all uniq) L)) ==> ((sizel ((filter (\t. (t = (FST d)))) (flatten L))) = (sizel ((filter (MEM (FST d))) L)))))) d)
T * / ! c==> c/\ cuniq b1 call part cuniq b1 c= csizel cfilter / c= b2 cFST b0 cflatten b1 csizel cfilter * part cMEM cFST b0 b1 f0
- ((\f. (((find_face L) x) = f)) f) |- (((\f. (((find_face L) x) = f)) f) /\ (?f. (((find_face L) x) = f)))
T c==> * / c= cfind_face f0 f1 b0 f2 c/\ * / c= cfind_face f0 f1 b0 f2 c? / c= cfind_face f0 f1 b0
- |- ((APPEND = cat) /\ (ALL = all))
T c/\ c= part cAPPEND part ccat c= part cALL part call
- ((LAST s) = ((last x0) s)) |- (((last x0) s) = (LAST s))
T c==> c= cLAST f0 clast f1 f0 c= clast f1 f0 cLAST f0
- (is_edge_nondegenerate (hypermap_of_list L)) |- ((is_edge_nondegenerate (hypermap_of_list L)) = T)
T c==> cis_edge_nondegenerate chypermap_of_list f0 c= cis_edge_nondegenerate chypermap_of_list f0 cT
- (~ ((dart (hypermap_of_list L)) = EMPTY)) |- (((dart (hypermap_of_list L)) = EMPTY) = F)
T c==> c~ c= * part cdart chypermap_of_list f0 part cEMPTY c= c= * part cdart chypermap_of_list f0 part cEMPTY cF
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ (s = NIL)) |- ((~ (s = NIL)) /\ ((LAST ((MAP f) s)) = (f (LAST s))))
T c==> c~ c= f0 cNIL c/\ c~ c= f0 cNIL c= cLAST cMAP f1 f0 * f1 cLAST f0
- |- (((quotient_list L) N) = ((MAP (core L)) N))
T c= cquotient_list f0 f1 cMAP * part ccore f0 f1
- |- (T = ((SUC (NUMERAL _0)) = (NUMERAL (BIT1 _0))))
T c= cT c= cSUC cNUMERAL c_0 cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- |- ((\q'. ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = p') ==> ((p' ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = q')) ==> ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (p' ==> q'))))) q')
T * / c==> c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 f2 c==> c==> f2 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b1 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 b0 c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b1 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> f2 b0 f3
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((next_el ((find_face L) x)) x) = w) = ((\w. (((next_el ((find_face L) x)) x) = w)) w))
T c= c= cnext_el cfind_face f0 f1 f1 f2 * / c= cnext_el cfind_face f0 f1 f1 b0 f2
- (~ (s = NIL)) |- (((last x0) s) = (LAST s))
T c==> c~ c= f0 cNIL c= clast f1 f0 cLAST f0
- |- (((!f. (!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))))) ==> ((\f. (!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))))) f)) = ((\f. (!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))))) f))
T c= c==> ! ! ! c= cMAP b1 cMAP b0 b2 cMAP * * part co b1 b0 b2 * / ! ! c= cMAP b1 cMAP b0 b2 cMAP * * part co b1 b0 b2 f0 * / ! ! c= cMAP b1 cMAP b0 b2 cMAP * * part co b1 b0 b2 f0
- ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) = T)
T c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c= cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 cT
- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)) |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c==> c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- |- ((((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))
T c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f2 f4 f5 f1 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cs_flag_list f2 f3 f4 f5 c==> cmarked_list f2 f3 f4 f5 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn f2 f3 cl'z f1 f0 f4 f5 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f2 c==> cuniq f6 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f5 cf_list f1 f5 c==> c= cnext_el f4 f7 f8 c==> c= cprev_el f4 f8 f7 c==> c= cl'y f1 f4 f5 f3 c==> c= cl'z f1 f0 f4 f5 f8 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f8 f4 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f5 c==> cmarked_list f1 f0 f4 f5 c==> c~ c= f8 f3 c==> c= cnext_el f2 f5 f9 c==> c= cfind_face f1 f5 f2 c==> cMEM f3 f2 c==> cMEM f8 f2 c==> c< cindexf f9 f3 f2 cindexf f9 f8 f2 c==> c= cfind_face f1 f3 f2 c==> c= cparts f1 cbetwn f2 f3 f8 cMAP / cCONS b0 cNIL cbetwn f2 f3 f8 c==> cuniq cbetwn f2 f3 f8 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f2 f3 f8 f6 c= cmap / cFST cHD b0 cparts f1 f6 crev cmap part cFST cbetwn f2 f3 f8
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) = ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z))
T c= c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4
- (uniq ((find_face L) x)) |- ((uniq ((find_face L) x)) = T)
T c==> cuniq cfind_face f0 f1 c= cuniq cfind_face f0 f1 cT
- |- (((a = b) ==> ((rev a) = (rev b))) = T)
T c= c==> c= f0 f1 c= crev f0 crev f1 cT
- (((real_ge (real_of_int _10350089)) (real_of_num (NUMERAL _0))) /\ (((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10350089))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10350089)) (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) /\ ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) = T)
T c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c= cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 cT
- |- (((\i. (f i)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (((!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) ==> ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)) = ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r))
T c= c==> ! ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
- |- (((!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))) ==> ((\L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))) L)) = ((\L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))) L))
T c= c==> ! c= cMEM f0 cflatten b0 c? / c/\ cMEM b1 b0 cMEM f0 b1 * / c= cMEM f0 cflatten b0 c? / c/\ cMEM b1 b0 cMEM f0 b1 f1 * / c= cMEM f0 cflatten b0 c? / c/\ cMEM b1 b0 cMEM f0 b1 f1
- |- (((!x. (((\f. (((find_face L) x) = f)) x) ==> (?f. (((find_face L) x) = f)))) ==> ((?f. (((find_face L) x) = f)) ==> (?f. (((find_face L) x) = f)))) = ((?f. (((find_face L) x) = f)) ==> (?f. (((find_face L) x) = f))))
T c= c==> ! c==> * / c= cfind_face f0 f1 b1 b0 c? / c= cfind_face f0 f1 b1 c==> c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0 c==> c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ ((a = b) ==> ((rev a) = (rev b)))) |- ((~ ((a = b) ==> ((rev a) = (rev b)))) /\ F)
T c==> c~ c==> c= f0 f1 c= crev f0 crev f1 c/\ c~ c==> c= f0 f1 c= crev f0 crev f1 cF
- (~ (s = NIL)) |- ((~ (s = NIL)) /\ (((last x0) s) = (LAST s)))
T c==> c~ c= f0 cNIL c/\ c~ c= f0 cNIL c= clast f1 f0 cLAST f0
- |- ((\ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1)))) ram2)
T * / c= csplit_normal_list f0 f1 f2 f3 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b6 b7 cAPPEND b8 b5 cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 f3 cCONS f3 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 b0 cCONS b0 cNIL cflatten cmap b4 b5 cbetwn f2 f3 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 b0 cnext_el f1 f3 f4
- |- ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> (((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)) = ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d))))
T c==> c~ c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2 c= cFST cPOWER * part cn_list f1 cLAST cupt cNUMERAL cBIT1 c_0 f0 f2 cFST f2
- |- ((\t. ((LET_END t) = t)) t)
T * / c= cLET_END b0 b0 f0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)) |- ((NIL = (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))) = F)
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c= c= cNIL cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cF
- |- (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))
T c= cMEM f0 cflatten f1 c? / c/\ cMEM b0 f1 cMEM f0 b0
- ((all (f_last L)) N) |- (((all (f_last L)) N) = T)
T c==> call * part cf_last f0 f1 c= call * part cf_last f0 f1 cT
- (!x. ((x IN (dart (hypermap_of_list L))) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))))) |- ((x IN (dart (hypermap_of_list L))) ==> (((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face (hypermap_of_list L)) x))) = T))
T c==> ! c==> cIN b0 * part cdart chypermap_of_list f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 b0 c==> cIN f1 * part cdart chypermap_of_list f0 c= c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_list f0 f1 cT
- (~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) |- (~ (NIL = (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))
T c==> c~ c= cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1 cNIL c~ c= cNIL cbetwn cfind_face f0 f1 cl'y f0 f2 f1 cl'z f0 f3 f2 f1
- |- ((\f. (!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))))) f)
T * / ! ! c= cMAP b1 cMAP b0 b2 cMAP * * part co b1 b0 b2 f0
- (((last x0) s) = (LAST s)) |- ((LAST s) = ((last x0) s))
T c==> c= clast f0 f1 cLAST f1 c= cLAST f1 clast f0 f1
- |- ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c/\ cMEM f4 f3 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) ==> (((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d)) = ((FST (HD (rev ((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (MEM (FST d))) L))))))) = (FST d))))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0 c= cFST cHD crev cmap / cPOWER * part cn_list f1 b0 f0 cupt cNUMERAL cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cFST f0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM y) f) /\ (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c/\ cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- |- (((APPEND l) NIL) = l)
T c= cAPPEND f0 cNIL f0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))
T c= ctransform_list f0 f1 c, f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f3 c, f2 f3 c, b5 cSND b4 cAPPEND creplace f3 cCONS cSND b4 cNIL f2 cCONS cFST b4 cNIL csplit_normal_list f0 f3 b3 b0 b2 cfind_face f0 b0 cprev_el f3 b1 cl'z f0 f2 f3 f1 cl'y f0 f3 f1
- ((((indexf w) y) f) < (((indexf w) z) f)) |- (((((indexf w) y) f) < (((indexf w) z) f)) = T)
T c==> c< cindexf f0 f1 f2 cindexf f0 f3 f2 c= c< cindexf f0 f1 f2 cindexf f0 f3 f2 cT
- |- ((\a. ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) a)
T * / c==> c~ c==> c= b0 f0 c= crev b0 crev f0 cF f1
- (((find_face L) x) = f) |- ((\f. (((find_face L) x) = f)) f)
T c==> c= cfind_face f0 f1 f2 * / c= cfind_face f0 f1 b0 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq f) /\ (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ cuniq f1 c==> cMEM f5 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- |- ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y)
T * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d))))) |- ((((MEM d) (list_of_darts L)) ==> ((NUMERAL (BIT0 (BIT1 _0))) <= (CARD ((node (hypermap_of_list L)) d)))) = T)
T c==> ! c==> cMEM b0 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 b0 c= c==> cMEM f1 clist_of_darts f0 c<= cNUMERAL cBIT0 cBIT1 c_0 cCARD * * part cnode chypermap_of_list f0 f1 cT
- (((next_el ((find_face L) x)) x) = w) |- ((\w. (((next_el ((find_face L) x)) x) = w)) w)
T c==> c= cnext_el cfind_face f0 f1 f1 f2 * / c= cnext_el cfind_face f0 f1 f1 b0 f2
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> cMEM f4 f3 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((normal_list L) N) /\ (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c/\ cnormal_list f2 f3 c==> cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) /\ (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x))))) = g) ==> ((~ ((((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)) = NIL)) ==> ((uniq g) ==> (((map (FST o HD)) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) (((l'y L) r) x)) ((((l'z L) N) r) x)))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c/\ c~ cfinal_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 cl'y f0 f1 f3 cl'z f0 f2 f1 f3 f4 c==> c~ c= cbetwn cfind_face f0 f3 cl'y f0 f1 f3 cl'z f0 f2 f1 f3 cNIL c==> cuniq f4 c= cmap * * part co part cFST part cHD cparts f0 f4 crev cmap part cFST cbetwn cfind_face f0 f3 cl'y f0 f1 f3 cl'z f0 f2 f1 f3
- |- (((!x. (!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l)))))) ==> ((\x. (!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l)))))) x)) = ((\x. (!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l)))))) x))
T c= c==> ! ! c= cMEM b0 cflatten b1 c? / c/\ cMEM b2 b1 cMEM b0 b2 * / ! c= cMEM b0 cflatten b1 c? / c/\ cMEM b2 b1 cMEM b0 b2 f0 * / ! c= cMEM b0 cflatten b1 c? / c/\ cMEM b2 b1 cMEM b0 b2 f0
- (good_list L), (((find_face L) d) = f), ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))), ((MEM d) f) |- (((sizel ((filter (MEM (FST d))) L)) = a) ==> ((~ (((map (\i. (((POWER (n_list L)) i) d))) ((upt (NUMERAL (BIT1 _0))) a)) = NIL)) ==> ((~ (((upt (NUMERAL (BIT1 _0))) a) = NIL)) ==> ((FST (((POWER (n_list L)) (LAST ((upt (NUMERAL (BIT1 _0))) a))) d)) = (FST d)))))
T c==> cgood_list f0 c==> c= cfind_face f0 f1 f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f1 f0 c==> cMEM f1 f2 c==> c= csizel cfilter * part cMEM cFST f1 f0 f3 c==> c~ c= cmap / cPOWER * part cn_list f0 b0 f1 cupt cNUMERAL cBIT1 c_0 f3 cNIL c==> c~ c= cupt cNUMERAL cBIT1 c_0 f3 cNIL c= cFST cPOWER * part cn_list f0 cLAST cupt cNUMERAL cBIT1 c_0 f3 f1 cFST f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- (((MEM d) (list_of_darts L)) ==> (((MEM ((SND d) , (FST d))) (list_of_darts L)) = T))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 c= cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
- |- ((\L. (!N. (((quotient_list L) N) = ((MAP (core L)) N)))) L)
T * / ! c= cquotient_list b0 b1 cMAP * part ccore b0 b1 f0
- |- ((\a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))))) a)
T * / ! ! c= cMEM b1 cfilter b0 b2 c/\ * b0 b1 cMEM b1 b2 f0
- |- (((((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)) ==> (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F))) = (((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F) ==> ((~ ((a = b) ==> ((rev a) = (rev b)))) ==> F)))
T c= c==> c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF c==> c~ c==> c= f0 f1 c= crev f0 crev f1 cF
- |- ((!a. ((a = b) ==> ((rev a) = (rev b)))) = T)
T c= ! c==> c= b0 f0 c= crev b0 crev f0 cT
- ((NUMERAL (BIT0 (BIT1 _0))) <= a) |- (((NUMERAL (BIT0 (BIT1 _0))) <= a) /\ ((LAST ((upt (NUMERAL (BIT1 _0))) a)) = (PRE a)))
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c/\ c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cLAST cupt cNUMERAL cBIT1 c_0 f0 cPRE f0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), (((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((((indexf w) y) f) < (((indexf w) z) f)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f4 c==> cMEM f3 f5 c==> cMEM f2 f4 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> (((NUMERAL _0) < (SUC (NUMERAL _0))) /\ ((SUC (NUMERAL _0)) < a))) = T)
T c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c/\ c< cNUMERAL c_0 cSUC cNUMERAL c_0 c< cSUC cNUMERAL c_0 f0 cT
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) /\ ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- ((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) |- (((NUMERAL (BIT0 (BIT1 _0))) <= (sizel ((filter (MEM (FST d))) L))) = T)
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 c= c<= cNUMERAL cBIT0 cBIT1 c_0 csizel cfilter * part cMEM cFST f0 f1 cT
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (((find_face L) x) = f) |- (((((betwn f) y) ((((l'z L) N) r) x)) = NIL) = F)
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c= cfind_face f0 f1 f5 c= c= cbetwn f5 f2 cl'z f0 f3 f4 f1 cNIL cF
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (cat = APPEND) |- (APPEND = cat)
T c==> c= part ccat part cAPPEND c= part cAPPEND part ccat
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq r) /\ ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 cNIL c==> c~ cfinal_list f1 f4 c==> cis_restricted chypermap_of_list f1 c==> cuniq f5 c==> cuniq f4 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f2 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f2 cf_list f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f1 f4 f2 f3 c==> c= cztrans f1 f0 f4 f2 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2 f5 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f2 f4 c==> cMEM f2 clist_of_darts f1 c==> cMEM f4 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f4 f2 c==> cmarked_list f1 f0 f4 f2 c/\ cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f3 f4 c= cmap / cFST cHD b0 cparts f1 f5 crev cmap part cFST cbetwn cfind_face f1 f2 f3 cl'z f1 f0 f4 f2
- |- (((!L. (!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r))))) ==> ((\L. (!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r))))) L)) = ((\L. (!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r))))) L))
T c= c==> ! ! c= ccore b0 b1 cMAP * * part co part cFST part cHD cparts b0 b1 * / ! c= ccore b0 b1 cMAP * * part co part cFST part cHD cparts b0 b1 f0 * / ! c= ccore b0 b1 cMAP * * part co part cFST part cHD cparts b0 b1 f0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) /\ ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn f1 f2 cl'z f0 f3 f4 f5 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f1 c==> cuniq f6 c==> cuniq cflatten f3 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f5 cf_list f0 f5 c==> c= cprev_el f4 f7 f8 c==> c= cl'y f0 f4 f5 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f5 f4 c==> cMEM f5 clist_of_darts f0 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> call / c~ c= b0 cNIL f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f5 c==> cmarked_list f0 f3 f4 f5 c/\ call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f2 f4 c==> c= cl'z f0 f3 f4 f5 f7 c==> c~ c= f7 f2 c==> c= cnext_el f1 f5 f9 c==> c= cfind_face f0 f5 f1 c==> cMEM f2 f1 c==> cMEM f7 f1 c==> c< cindexf f9 f2 f1 cindexf f9 f7 f1 c==> c= cfind_face f0 f2 f1 c==> c= cparts f0 cbetwn f1 f2 f7 cMAP / cCONS b0 cNIL cbetwn f1 f2 f7 c==> cuniq cbetwn f1 f2 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f7 f6 c= cmap / cFST cHD b0 cparts f0 f6 crev cmap part cFST cbetwn f1 f2 f7
- ((\y. ((((l'y L) r) x) = y)) y) |- (((\y. ((((l'y L) r) x) = y)) y) /\ (?y. ((((l'y L) r) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c/\ * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))) ==> (((good_list L) /\ ((MEM d) (list_of_darts L))) ==> ((FST (((POWER (n_list L)) n) d)) = (FST d))))
T c==> c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1 c==> c/\ cgood_list f0 cMEM f1 clist_of_darts f0 c= cFST cPOWER * part cn_list f0 f2 f1 cFST f1
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (s = NIL) |- (NIL = s)
T c==> c= f0 cNIL c= cNIL f0
- ((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) |- (((\a. ((sizel ((filter (MEM (FST d))) L)) = a)) a) /\ (?a. ((sizel ((filter (MEM (FST d))) L)) = a)))
T c==> * / c= csizel cfilter * part cMEM cFST f0 f1 b0 f2 c/\ * / c= csizel cfilter * part cMEM cFST f0 f1 b0 f2 c? / c= csizel cfilter * part cMEM cFST f0 f1 b0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (((find_face L) x) = f) |- (((~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)) ==> (((((betwn f) y) ((((l'z L) N) r) x)) = NIL) = F)) = (((((betwn f) y) ((((l'z L) N) r) x)) = NIL) = F))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c= cfind_face f0 f1 f5 c= c==> c~ c= cbetwn f5 f2 cl'z f0 f3 f4 f1 cNIL c= c= cbetwn f5 f2 cl'z f0 f3 f4 f1 cNIL cF c= c= cbetwn f5 f2 cl'z f0 f3 f4 f1 cNIL cF
- |- (~ (~ T))
T c~ c~ cT
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c/\ cMEM f4 f3 c==> cMEM f5 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), ((MEM d) (list_of_darts L)) |- (((MEM d) (list_of_darts L)) /\ (((MEM ((SND d) , (FST d))) (list_of_darts L)) = T))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 c/\ cMEM f1 clist_of_darts f0 c= cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
- |- ((((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))) = (((NUMERAL (BIT0 (BIT1 _0))) <= a) ==> ((FST (((POWER (n_list L)) (PRE a)) d)) = (FST d))))
T c= c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2 c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= cFST cPOWER * part cn_list f1 cPRE f0 f2 cFST f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> cMEM f1 clist_of_darts f0 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f0 f3 c==> call * part cloop_list f0 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f7 f6 c==> cMEM f6 f4 c==> cMEM f2 f4 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((real_lt (real_of_num m)) (real_of_num n)) = (m < n))
T c= creal_lt creal_of_num f0 creal_of_num f1 c< f0 f1
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cprev_el f4 f6 f7 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (((upt (NUMERAL (BIT1 _0))) a) = NIL) |- (NIL = ((upt (NUMERAL (BIT1 _0))) a))
T c==> c= cupt cNUMERAL cBIT1 c_0 f0 cNIL c= cNIL cupt cNUMERAL cBIT1 c_0 f0
- |- (((!s. ((uniq (rev s)) = (uniq s))) ==> ((\s. ((uniq (rev s)) = (uniq s))) s)) = ((\s. ((uniq (rev s)) = (uniq s))) s))
T c= c==> ! c= cuniq crev b0 cuniq b0 * / c= cuniq crev b0 cuniq b0 f0 * / c= cuniq crev b0 cuniq b0 f0
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)) |- ((NIL = (((betwn f) y) ((((l'z L) N) r) x))) = F)
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c= c= cNIL cbetwn f0 f1 cl'z f2 f3 f4 f5 cF
- ((NUMERAL (BIT0 (BIT1 _0))) <= a) |- (((NUMERAL (BIT0 (BIT1 _0))) <= a) = T)
T c==> c<= cNUMERAL cBIT0 cBIT1 c_0 f0 c= c<= cNUMERAL cBIT0 cBIT1 c_0 f0 cT
- (EMPTY = (dart (hypermap_of_list L))) |- ((dart (hypermap_of_list L)) = EMPTY)
T c==> c= part cEMPTY * part cdart chypermap_of_list f0 c= * part cdart chypermap_of_list f0 part cEMPTY
- (NIL = (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))) |- ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)
T c==> c= cNIL cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL
- ((((l'y L) r) x) = y) |- (((((l'y L) r) x) = y) /\ (?y. ((((l'y L) r) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c/\ c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))))))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f4 f1 c==> cMEM f1 f4 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cs_flag_list f0 f3 f4 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- |- (((!x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) ==> ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x)) = ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x))
T c= c==> ! ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0 * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x))))) = g), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) /\ ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn ((find_face L) x)) y) ((((l'z L) N) r) x)))))))))))))
T c==> c~ c= cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 cNIL c==> c~ cfinal_list f0 f4 c==> cis_restricted chypermap_of_list f0 c==> cuniq f5 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f4 f1 cf_list f0 f1 c==> c= cl'y f0 f4 f1 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f1 f4 c==> cMEM f4 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f4 f1 c==> cmarked_list f0 f3 f4 f1 c/\ c= cl'y f0 f4 f1 f2 c==> c= cprev_el f4 f6 f7 c==> c= cztrans f0 f3 f4 f1 cNUMERAL c_0 f6 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f1 c==> cMEM f1 clist_of_darts f0 c= cmap / cFST cHD b0 cparts f0 f5 crev cmap part cFST cbetwn cfind_face f0 f1 f2 cl'z f0 f3 f4 f1
- (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq g), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq f) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((((l'z L) N) r) x) = z) ==> ((~ (z = y)) ==> ((((next_el f) x) = w) ==> ((((find_face L) x) = f) ==> (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))))))))))))))))))))))))
T c==> c~ c= cbetwn f0 f1 cl'z f2 f3 f4 f5 cNIL c==> c~ cfinal_list f2 f4 c==> cis_restricted chypermap_of_list f2 c==> cuniq f6 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f4 f5 cf_list f2 f5 c==> cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f2 f3 c==> cMEM f5 f4 c==> cMEM f4 f3 c==> cnormal_list f2 f3 c==> cmarked_list f2 f3 f4 f5 c/\ cLET / cLET_END cfinal_list f2 b0 cfind_list f3 ce_list f5 c==> cs_flag_list f2 f3 f4 f5 c==> c= cl'y f2 f4 f5 f1 c==> c= cprev_el f4 f7 f8 c==> cuniq clist_of_darts f2 c==> call / c~ c= b0 cNIL f2 c==> ! c==> cMEM b0 clist_of_darts f2 cMEM c, cSND b0 cFST b0 clist_of_darts f2 c==> cuniq f0 c==> cMEM f5 clist_of_darts f2 c==> cuniq cflatten f3 c==> call / c~ c= b0 cNIL f3 c==> call * part cf_last f2 f3 c==> call * part cloop_list f2 f3 c==> ! c==> cMEM b0 cflatten f3 cSUBSET * * part cnode chypermap_of_list f2 b0 * part cset_of_list cflatten f3 c==> cuniq f4 c==> c= cnext_el f4 f8 f7 c==> cMEM f7 f4 c==> cMEM f1 f4 c==> c= cl'z f2 f3 f4 f5 f7 c==> c~ c= f7 f1 c==> c= cnext_el f0 f5 f9 c==> c= cfind_face f2 f5 f0 c==> cMEM f1 f0 c==> cMEM f7 f0 c==> c< cindexf f9 f1 f0 cindexf f9 f7 f0 c==> c= cfind_face f2 f1 f0 c==> c= cparts f2 cbetwn f0 f1 f7 cMAP / cCONS b0 cNIL cbetwn f0 f1 f7 c==> cuniq cbetwn f0 f1 f7 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn f0 f1 f7 f6 c= cmap / cFST cHD b0 cparts f2 f6 crev cmap part cFST cbetwn f0 f1 f7
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ (z = y)), (~ ((((betwn f) y) ((((l'z L) N) r) x)) = NIL)), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (uniq f), (uniq g), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el f) x) = w), (((next_el r) x) = ((f_list L) x)), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM y) f) ==> (((MEM z) f) ==> (((((indexf w) y) f) < (((indexf w) z) f)) ==> ((((find_face L) y) = f) ==> ((((parts L) (((betwn f) y) z)) = ((MAP (\x. ((CONS x) NIL))) (((betwn f) y) z))) ==> ((uniq (((betwn f) y) z)) ==> (((rev (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))) = g) ==> (((map (\x. (FST (HD x)))) ((parts L) g)) = (rev ((map FST) (((betwn f) y) z)))))))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ c= f2 f3 c==> c~ c= cbetwn f4 f3 cl'z f1 f0 f5 f6 cNIL c==> c~ cfinal_list f1 f5 c==> cis_restricted chypermap_of_list f1 c==> cuniq f4 c==> cuniq f7 c==> cuniq f5 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f4 f6 f8 c==> c= cnext_el f5 f6 cf_list f1 f6 c==> c= cnext_el f5 f9 f2 c==> c= cprev_el f5 f2 f9 c==> c= cl'y f1 f5 f6 f3 c==> c= cl'z f1 f0 f5 f6 f2 c==> c= cfind_face f1 f6 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list f0 ce_list f6 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 f0 c==> cMEM f6 f5 c==> cMEM f6 clist_of_darts f1 c==> cMEM f3 f5 c==> cMEM f2 f5 c==> cMEM f5 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f1 f0 c==> cs_flag_list f1 f0 f5 f6 c==> cmarked_list f1 f0 f5 f6 c==> cMEM f3 f4 c==> cMEM f2 f4 c==> c< cindexf f8 f3 f4 cindexf f8 f2 f4 c==> c= cfind_face f1 f3 f4 c==> c= cparts f1 cbetwn f4 f3 f2 cMAP / cCONS b0 cNIL cbetwn f4 f3 f2 c==> cuniq cbetwn f4 f3 f2 c==> c= crev cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn f4 f3 f2 f7 c= cmap / cFST cHD b0 cparts f1 f7 crev cmap part cFST cbetwn f4 f3 f2
- (((next_el ((find_face L) x)) x) = w) |- ((((next_el ((find_face L) x)) x) = w) /\ (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c/\ c= cnext_el cfind_face f0 f1 f1 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- ((\L. (!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r))))) L)
T * / ! c= ccore b0 b1 cMAP * * part co part cFST part cHD cparts b0 b1 f0
- |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- (((MEM d) (flatten N)) ==> ((((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))) = T))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cMEM f2 cflatten f0 c= cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0 cT
- |- ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)
T * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
