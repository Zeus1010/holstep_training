N Reduction3.facesAt_map_final
C |- (!f. (!g. (!v. (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
D Tame_defs.makeFaceFinalFaceList
A |- (!f. (!fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs))))
T c= cmakeFaceFinalFaceList f0 f1 creplace f0 cCONS csetFinal f0 cNIL f1
D Reduction3.uniq_replace_map
A |- (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))))
T c==> cuniq f0 c= creplace f1 cCONS f2 cNIL f0 cMAP / cCOND c= b0 f1 f2 b0 f0
D Reduction3.facesAt_makeFaceFinal
A |- (!f. (!g. (!v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v)))))))
T c==> c< f0 csizel cfaceListAt f1 c= cfacesAt cmakeFaceFinal f2 f1 f0 cmakeFaceFinalFaceList f2 cfacesAt f1 f0
+ |- (((!g. (!v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v)))))) ==> ((\g. (!v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v)))))) g)) = ((\g. (!v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v)))))) g))
T c= c==> ! ! c==> c< b1 csizel cfaceListAt b0 c= cfacesAt cmakeFaceFinal f0 b0 b1 cmakeFaceFinalFaceList f0 cfacesAt b0 b1 * / ! c==> c< b1 csizel cfaceListAt b0 c= cfacesAt cmakeFaceFinal f0 b0 b1 cmakeFaceFinalFaceList f0 cfacesAt b0 b1 f1 * / ! c==> c< b1 csizel cfaceListAt b0 c= cfacesAt cmakeFaceFinal f0 b0 b1 cmakeFaceFinalFaceList f0 cfacesAt b0 b1 f1
+ |- (((!f. (!fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs)))) ==> ((\f. (!fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs)))) f)) = ((\f. (!fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs)))) f))
T c= c==> ! ! c= cmakeFaceFinalFaceList b0 b1 creplace b0 cCONS csetFinal b0 cNIL b1 * / ! c= cmakeFaceFinalFaceList b0 b1 creplace b0 cCONS csetFinal b0 cNIL b1 f0 * / ! c= cmakeFaceFinalFaceList b0 b1 creplace b0 cCONS csetFinal b0 cNIL b1 f0
+ |- (((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))) = ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))))
T c= c==> c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
+ |- (((!p'. (!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 b0 c==> c==> b0 c= c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 b1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 c==> b0 b1 * / ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 b0 c==> c==> b0 c= c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 b1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 c==> b0 b1 f3 * / ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 b0 c==> c==> b0 c= c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 b1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 c==> b0 b1 f3
+ |- (((!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) ==> (!x. (!y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))))) = (!x. (!y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))))
T c= c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 ! ! ! c==> cuniq b2 c= creplace b0 cCONS b1 cNIL b2 cMAP / cCOND c= b3 b0 b1 b3 b2 ! ! ! c==> cuniq b2 c= creplace b0 cCONS b1 cNIL b2 cMAP / cCOND c= b3 b0 b1 b3 b2
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 ! c==> cuniq b0 c= creplace f0 cCONS f1 cNIL b0 cMAP / cCOND c= b1 f0 f1 b1 b0
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- ((!y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))) = T)
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c= ! ! c==> cuniq b1 c= creplace f0 cCONS b0 cNIL b1 cMAP / cCOND c= b2 f0 b0 b2 b1 cT
- |- ((\g'. (!t'. (!e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= f0 f1 b0 c==> c==> b0 c= csetFinal f1 b1 c==> c==> c~ b0 c= f0 b2 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND b0 b1 b2 f2
- |- ((\q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))) q')
T * / c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 b0 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 c==> f2 b0 f4
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- ((\fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) fs)
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 * / ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 f0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- ((\p'. (!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q')))))) p')
T * / ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 b0 c==> c==> b0 c= c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 b1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 c==> b0 b1 f3
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 ! c==> cuniq f0 c= creplace f1 cCONS b0 cNIL f0 cMAP / cCOND c= b1 f1 b0 b1 f0
+ ((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) |- (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v)))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cmakeFaceFinalFaceList f2 cfacesAt f0 f1
- |- ((\p'. (!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q')))))) p')
T * / ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 b0 c==> c==> b0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 b1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 c==> b0 b1 f3
- |- ((!v. t) = t)
T c= ! f0 f0
- |- ((((p = f) = (p = f)) ==> (((p = f) ==> ((setFinal f) = t')) ==> (((~ (p = f)) ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND (p = f)) t') e'))))) = (((p = f) ==> ((setFinal f) = t')) ==> (((~ (p = f)) ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND (p = f)) t') e')))))
T c= c==> c= c= f0 f1 c= f0 f1 c==> c==> c= f0 f1 c= csetFinal f1 f2 c==> c==> c~ c= f0 f1 c= f0 f3 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND c= f0 f1 f2 f3 c==> c==> c= f0 f1 c= csetFinal f1 f2 c==> c==> c~ c= f0 f1 c= f0 f3 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND c= f0 f1 f2 f3
- (v < (sizel (faceListAt g))) |- ((v < (sizel (faceListAt g))) /\ (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))
T c==> c< f0 csizel cfaceListAt f1 c/\ c< f0 csizel cfaceListAt f1 c= cfacesAt cmakeFaceFinal f2 f1 f0 cmakeFaceFinalFaceList f2 cfacesAt f1 f0
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- (((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))) = T)
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c= c==> cuniq f0 c= creplace f1 cCONS f2 cNIL f0 cMAP / cCOND c= b0 f1 f2 b0 f0 cT
+ |- ((\fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs))) fs)
T * / c= cmakeFaceFinalFaceList f0 b0 creplace f0 cCONS csetFinal f0 cNIL b0 f1
- ((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) |- ((v < (sizel (faceListAt g))) = T)
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c< f1 csizel cfaceListAt f0 cT
- |- ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> q')))
T c==> c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 f3 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f3
+ |- ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> q')))
T c==> c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 f3 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f3
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
- (~ (p = f)) |- (((~ (f = p)) ==> ((f = p) = F)) = ((f = p) = F))
T c==> c~ c= f0 f1 c= c==> c~ c= f1 f0 c= c= f1 f0 cF c= c= f1 f0 cF
- |- (((!t'. (!e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= f0 f1 f2 c==> c==> f2 c= csetFinal f1 b0 c==> c==> c~ f2 c= f0 b1 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND f2 b0 b1 * / ! c==> c= c= f0 f1 f2 c==> c==> f2 c= csetFinal f1 b0 c==> c==> c~ f2 c= f0 b1 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND f2 b0 b1 f3 * / ! c==> c= c= f0 f1 f2 c==> c==> f2 c= csetFinal f1 b0 c==> c==> c~ f2 c= f0 b1 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND f2 b0 b1 f3
+ |- ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))
T c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
- (~ (p = f)) |- ((p = f) = F)
T c==> c~ c= f0 f1 c= c= f0 f1 cF
- |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
- (uniq fs) |- ((!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))
T c==> cuniq f0 c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c= creplace f1 cCONS f2 cNIL f0 cMAP / cCOND c= b0 f1 f2 b0 f0
+ |- ((!f. (!g. (!v. (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))))) = (!f. (!g. (!v. (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))))))
T c= ! ! ! c==> c/\ cuniq cfacesAt b1 b2 c< b2 csizel cfaceListAt b1 c= cmakeFaceFinalFaceList b0 cfacesAt b1 b2 cMAP / cCOND c= b3 b0 csetFinal b0 b3 cfacesAt b1 b2 ! ! ! c==> c/\ cuniq cfacesAt b1 b2 c< b2 csizel cfaceListAt b1 c= cfacesAt cmakeFaceFinal b0 b1 b2 cMAP / cCOND c= b3 b0 csetFinal b0 b3 cfacesAt b1 b2
+ |- ((\x. (!y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) x)
T * / ! ! c==> cuniq b2 c= creplace b0 cCONS b1 cNIL b2 cMAP / cCOND c= b3 b0 b1 b3 b2 f0
+ |- (((!f. (!g. (!v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))))) ==> ((\f. (!g. (!v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))))) f)) = ((\f. (!g. (!v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))))) f))
T c= c==> ! ! ! c==> c< b2 csizel cfaceListAt b1 c= cfacesAt cmakeFaceFinal b0 b1 b2 cmakeFaceFinalFaceList b0 cfacesAt b1 b2 * / ! ! c==> c< b2 csizel cfaceListAt b1 c= cfacesAt cmakeFaceFinal b0 b1 b2 cmakeFaceFinalFaceList b0 cfacesAt b1 b2 f0 * / ! ! c==> c< b2 csizel cfaceListAt b1 c= cfacesAt cmakeFaceFinal b0 b1 b2 cmakeFaceFinalFaceList b0 cfacesAt b1 b2 f0
- (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))), (uniq fs) |- ((uniq fs) /\ ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c==> cuniq f0 c/\ cuniq f0 c= creplace f1 cCONS f2 cNIL f0 cMAP / cCOND c= b0 f1 f2 b0 f0
- (uniq ((facesAt g) v)) |- (T = (uniq ((facesAt g) v)))
T c==> cuniq cfacesAt f0 f1 c= cT cuniq cfacesAt f0 f1
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
+ |- (((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = ((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g))))) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> q')))) = ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> q'))))
T c= c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c==> c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 f3 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f3 c==> c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 f3 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f3
- |- ((x = x) = T)
T c= c= f0 f0 cT
- (v < (sizel (faceListAt g))) |- ((v < (sizel (faceListAt g))) = T)
T c==> c< f0 csizel cfaceListAt f1 c= c< f0 csizel cfaceListAt f1 cT
- (f = p) |- (p = f)
T c==> c= f0 f1 c= f1 f0
- |- ((((~ (p = f)) ==> (p = p)) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND (p = f)) (setFinal f)) p))) = ((((COND (p = f)) (setFinal f)) p) = (((COND (p = f)) (setFinal f)) p)))
T c= c==> c==> c~ c= f0 f1 c= f0 f0 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND c= f0 f1 csetFinal f1 f0 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND c= f0 f1 csetFinal f1 f0
- |- ((((COND (p = f)) (setFinal f)) p) = (((COND (p = f)) (setFinal f)) p))
T c= cCOND c= f0 f1 csetFinal f1 f0 cCOND c= f0 f1 csetFinal f1 f0
+ |- ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))
T c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b0 f3 csetFinal f3 b0 cfacesAt f0 f1 f4 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b0 f3 csetFinal f3 b0 cfacesAt f0 f1 c==> f2 f4
- |- (((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))) = ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))))
T c= c==> c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- (((!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))) ==> ((\x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))) x)) = ((\x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))) x))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c= c==> ! ! c==> cuniq f0 c= creplace b0 cCONS b1 cNIL f0 cMAP / cCOND c= b2 b0 b1 b2 f0 * / ! c==> cuniq f0 c= creplace b0 cCONS b1 cNIL f0 cMAP / cCOND c= b2 b0 b1 b2 f0 f1 * / ! c==> cuniq f0 c= creplace b0 cCONS b1 cNIL f0 cMAP / cCOND c= b2 b0 b1 b2 f0 f1
- |- (((!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))) ==> ((\q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))) q')) = ((\q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 b0 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 c==> f2 b0 * / c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 b0 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 c==> f2 b0 f4 * / c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 b0 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 c==> f2 b0 f4
- |- (!g'. (!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5
- ((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) |- (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) /\ ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c/\ c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
- |- (((!p'. (!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 b0 c==> c==> b0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 b1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 c==> b0 b1 * / ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 b0 c==> c==> b0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 b1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 c==> b0 b1 f3 * / ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 b0 c==> c==> b0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 b1 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b2 f2 csetFinal f2 b2 cfacesAt f0 f1 c==> b0 b1 f3
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- ((!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))) = T)
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c= ! c==> cuniq b0 c= creplace f0 cCONS f1 cNIL b0 cMAP / cCOND c= b1 f0 f1 b1 b0 cT
+ |- (((!v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))) ==> ((\v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))) v)) = ((\v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))) v))
T c= c==> ! c==> c< b0 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f1 f0 b0 cmakeFaceFinalFaceList f1 cfacesAt f0 b0 * / c==> c< b0 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f1 f0 b0 cmakeFaceFinalFaceList f1 cfacesAt f0 b0 f2 * / c==> c< b0 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f1 f0 b0 cmakeFaceFinalFaceList f1 cfacesAt f0 b0 f2
- |- (((!g'. (!t'. (!e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= f0 f1 b0 c==> c==> b0 c= csetFinal f1 b1 c==> c==> c~ b0 c= f0 b2 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND b0 b1 b2 * / ! ! c==> c= c= f0 f1 b0 c==> c==> b0 c= csetFinal f1 b1 c==> c==> c~ b0 c= f0 b2 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND b0 b1 b2 f2 * / ! ! c==> c= c= f0 f1 b0 c==> c==> b0 c= csetFinal f1 b1 c==> c==> c~ b0 c= f0 b2 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND b0 b1 b2 f2
- |- ((~ (p = f)) ==> (p = p))
T c==> c~ c= f0 f1 c= f0 f0
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- ((\x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))) x)
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 * / ! c==> cuniq f0 c= creplace b0 cCONS b1 cNIL f0 cMAP / cCOND c= b2 b0 b1 b2 f0 f1
- |- (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e')))))
T c==> c= c= f0 f1 f2 c==> c==> f2 c= csetFinal f1 f3 c==> c==> c~ f2 c= f0 f4 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND f2 f3 f4
- |- (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
+ |- (((!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))) ==> ((\fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))) fs)) = ((\fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))) fs))
T c= c==> ! c==> cuniq b0 c= creplace f0 cCONS f1 cNIL b0 cMAP / cCOND c= b1 f0 f1 b1 b0 * / c==> cuniq b0 c= creplace f0 cCONS f1 cNIL b0 cMAP / cCOND c= b1 f0 f1 b1 b0 f2 * / c==> cuniq b0 c= creplace f0 cCONS f1 cNIL b0 cMAP / cCOND c= b1 f0 f1 b1 b0 f2
+ |- ((\v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))) v)
T * / c==> c< b0 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f1 f0 b0 cmakeFaceFinalFaceList f1 cfacesAt f0 b0 f2
+ |- ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((replace f) ((CONS (setFinal f)) NIL)) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = T)
T c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= creplace f2 cCONS csetFinal f2 cNIL cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 cT
+ |- ((\y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))) y)
T * / ! c==> cuniq b1 c= creplace f0 cCONS b0 cNIL b1 cMAP / cCOND c= b2 f0 b0 b2 b1 f1
+ |- (((!fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs))) ==> ((\fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs))) fs)) = ((\fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs))) fs))
T c= c==> ! c= cmakeFaceFinalFaceList f0 b0 creplace f0 cCONS csetFinal f0 cNIL b0 * / c= cmakeFaceFinalFaceList f0 b0 creplace f0 cCONS csetFinal f0 cNIL b0 f1 * / c= cmakeFaceFinalFaceList f0 b0 creplace f0 cCONS csetFinal f0 cNIL b0 f1
+ |- ((\f. (!g. (!v. ((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))))) f)
T * / ! ! c==> c< b2 csizel cfaceListAt b1 c= cfacesAt cmakeFaceFinal b0 b1 b2 cmakeFaceFinalFaceList b0 cfacesAt b1 b2 f0
- |- ((((p = f) ==> ((setFinal f) = (setFinal f))) ==> (((~ (p = f)) ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND (p = f)) (setFinal f)) e')))) = (((~ (p = f)) ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND (p = f)) (setFinal f)) e'))))
T c= c==> c==> c= f0 f1 c= csetFinal f1 csetFinal f1 c==> c==> c~ c= f0 f1 c= f0 f2 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND c= f0 f1 csetFinal f1 f2 c==> c==> c~ c= f0 f1 c= f0 f2 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND c= f0 f1 csetFinal f1 f2
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((\t'. (!e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c= f0 f1 f2 c==> c==> f2 c= csetFinal f1 b0 c==> c==> c~ f2 c= f0 b1 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND f2 b0 b1 f3
- ((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) |- (T = (v < (sizel (faceListAt g))))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cT c< f1 csizel cfaceListAt f0
- |- ((!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e')))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 b0 c= cCOND f0 f2 f4 cCOND f1 f3 b0 cT
+ |- (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cfacesAt cmakeFaceFinal f2 f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
+ ((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) |- (((v < (sizel (faceListAt g))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v)))) = (((facesAt ((makeFaceFinal f) g)) v) = ((makeFaceFinalFaceList f) ((facesAt g) v))))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c==> c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f2 f0 f1 cmakeFaceFinalFaceList f2 cfacesAt f0 f1 c= cfacesAt cmakeFaceFinal f2 f0 f1 cmakeFaceFinalFaceList f2 cfacesAt f0 f1
- |- ((p = f) ==> ((setFinal f) = (setFinal f)))
T c==> c= f0 f1 c= csetFinal f1 csetFinal f1
+ |- (!f. (!g. (!v. (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
- (~ (p = f)) |- (~ (f = p))
T c==> c~ c= f0 f1 c~ c= f1 f0
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- ((\y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))) y)
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 * / c==> cuniq f0 c= creplace f1 cCONS b0 cNIL f0 cMAP / cCOND c= b1 f1 b0 b1 f0 f2
+ |- ((\q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))) q')
T * / c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 b0 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 c==> f2 b0 f4
- |- ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))
T c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b0 f3 csetFinal f3 b0 cfacesAt f0 f1 f4 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f3 cfacesAt f0 f1 cMAP / cCOND c= b0 f3 csetFinal f3 b0 cfacesAt f0 f1 c==> f2 f4
- (p = f) |- ((p = f) /\ ((setFinal f) = (setFinal f)))
T c==> c= f0 f1 c/\ c= f0 f1 c= csetFinal f1 csetFinal f1
- (~ (p = f)) |- ((f = p) = F)
T c==> c~ c= f0 f1 c= c= f1 f0 cF
- ((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) |- ((uniq ((facesAt g) v)) = T)
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cuniq cfacesAt f0 f1 cT
- |- (((~ (p = f)) ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND (p = f)) (setFinal f)) e')))
T c==> c==> c~ c= f0 f1 c= f0 f2 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND c= f0 f1 csetFinal f1 f2
- |- ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))
T c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
+ |- (((!y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))) ==> ((\y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))) y)) = ((\y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs))))) y))
T c= c==> ! ! c==> cuniq b1 c= creplace f0 cCONS b0 cNIL b1 cMAP / cCOND c= b2 f0 b0 b2 b1 * / ! c==> cuniq b1 c= creplace f0 cCONS b0 cNIL b1 cMAP / cCOND c= b2 f0 b0 b2 b1 f1 * / ! c==> cuniq b1 c= creplace f0 cCONS b0 cNIL b1 cMAP / cCOND c= b2 f0 b0 b2 b1 f1
+ (uniq ((facesAt g) v)) |- ((((replace f) ((CONS (setFinal f)) NIL)) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))
T c==> cuniq cfacesAt f0 f1 c= creplace f2 cCONS csetFinal f2 cNIL cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- (!y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 ! ! c==> cuniq b1 c= creplace f0 cCONS b0 cNIL b1 cMAP / cCOND c= b2 f0 b0 b2 b1
+ |- ((!v. (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((replace f) ((CONS (setFinal f)) NIL)) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))) = T)
T c= ! c==> c/\ cuniq cfacesAt f0 b0 c< b0 csizel cfaceListAt f0 c= creplace f1 cCONS csetFinal f1 cNIL cfacesAt f0 b0 cMAP / cCOND c= b1 f1 csetFinal f1 b1 cfacesAt f0 b0 cT
+ |- ((!f. (!g. (!v. (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((replace f) ((CONS (setFinal f)) NIL)) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))))) = (!f. (!g. (!v. (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))))))
T c= ! ! ! c==> c/\ cuniq cfacesAt b1 b2 c< b2 csizel cfaceListAt b1 c= creplace b0 cCONS csetFinal b0 cNIL cfacesAt b1 b2 cMAP / cCOND c= b3 b0 csetFinal b0 b3 cfacesAt b1 b2 ! ! ! c==> c/\ cuniq cfacesAt b1 b2 c< b2 csizel cfaceListAt b1 c= cmakeFaceFinalFaceList b0 cfacesAt b1 b2 cMAP / cCOND c= b3 b0 csetFinal b0 b3 cfacesAt b1 b2
+ |- ((!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) ==> (!x. (!y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 ! ! ! c==> cuniq b2 c= creplace b0 cCONS b1 cNIL b2 cMAP / cCOND c= b3 b0 b1 b3 b2
+ |- (!f. (!g. (!v. (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((replace f) ((CONS (setFinal f)) NIL)) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= creplace f2 cCONS csetFinal f2 cNIL cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
- |- (((!e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e')))))) ==> ((\e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e')))))) e')) = ((\e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c= f0 f1 f2 c==> c==> f2 c= csetFinal f1 f3 c==> c==> c~ f2 c= f0 b0 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND f2 f3 b0 * / c==> c= c= f0 f1 f2 c==> c==> f2 c= csetFinal f1 f3 c==> c==> c~ f2 c= f0 b0 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND f2 f3 b0 f4 * / c==> c= c= f0 f1 f2 c==> c==> f2 c= csetFinal f1 f3 c==> c==> c~ f2 c= f0 b0 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND f2 f3 b0 f4
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- (((!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))) ==> ((\y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))) y)) = ((\y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))) y))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c= c==> ! c==> cuniq f0 c= creplace f1 cCONS b0 cNIL f0 cMAP / cCOND c= b1 f1 b0 b1 f0 * / c==> cuniq f0 c= creplace f1 cCONS b0 cNIL f0 cMAP / cCOND c= b1 f1 b0 b1 f0 f2 * / c==> cuniq f0 c= creplace f1 cCONS b0 cNIL f0 cMAP / cCOND c= b1 f1 b0 b1 f0 f2
- (~ (p = f)) |- ((~ (p = f)) /\ (p = p))
T c==> c~ c= f0 f1 c/\ c~ c= f0 f1 c= f0 f0
- |- ((\e'. (((p = f) = g') ==> ((g' ==> ((setFinal f) = t')) ==> (((~ g') ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND g') t') e')))))) e')
T * / c==> c= c= f0 f1 f2 c==> c==> f2 c= csetFinal f1 f3 c==> c==> c~ f2 c= f0 b0 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND f2 f3 b0 f4
- |- (((p = f) ==> ((setFinal f) = t')) ==> (((~ (p = f)) ==> (p = e')) ==> ((((COND (p = f)) (setFinal f)) p) = (((COND (p = f)) t') e'))))
T c==> c==> c= f0 f1 c= csetFinal f1 f2 c==> c==> c~ c= f0 f1 c= f0 f3 c= cCOND c= f0 f1 csetFinal f1 f0 cCOND c= f0 f1 f2 f3
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- ((!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) /\ (!x. (!y. (!fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c/\ ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 ! ! ! c==> cuniq b2 c= creplace b0 cCONS b1 cNIL b2 cMAP / cCOND c= b3 b0 b1 b3 b2
+ |- ((!g. (!v. (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((replace f) ((CONS (setFinal f)) NIL)) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))))) = T)
T c= ! ! c==> c/\ cuniq cfacesAt b0 b1 c< b1 csizel cfaceListAt b0 c= creplace f0 cCONS csetFinal f0 cNIL cfacesAt b0 b1 cMAP / cCOND c= b2 f0 csetFinal f0 b2 cfacesAt b0 b1 cT
+ |- ((\fs. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))) fs)
T * / c==> cuniq b0 c= creplace f0 cCONS f1 cNIL b0 cMAP / cCOND c= b1 f0 f1 b1 b0 f2
+ |- (!p'. (!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c= c==> f0 f2 c==> f1 f3
+ ((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) |- (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) /\ ((((replace f) ((CONS (setFinal f)) NIL)) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))))
T c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c/\ c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= creplace f2 cCONS csetFinal f2 cNIL cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1
- (uniq ((facesAt g) v)) |- ((uniq ((facesAt g) v)) = T)
T c==> cuniq cfacesAt f0 f1 c= cuniq cfacesAt f0 f1 cT
+ |- (((!q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))) ==> ((\q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))) q')) = ((\q'. ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = p') ==> ((p' ==> ((((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((facesAt ((makeFaceFinal f) g)) v) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 b0 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 c==> f2 b0 * / c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 b0 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 c==> f2 b0 f4 * / c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f2 c==> c==> f2 c= c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 b0 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cfacesAt cmakeFaceFinal f3 f0 f1 cMAP / cCOND c= b1 f3 csetFinal f3 b1 cfacesAt f0 f1 c==> f2 b0 f4
+ |- (((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q')))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c= c==> f0 f2 c==> f1 f3 cT
+ (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) |- (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 ! ! c==> cuniq f0 c= creplace b0 cCONS b1 cNIL f0 cMAP / cCOND c= b2 b0 b1 b2 f0
- |- (((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) = ((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g))))) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> q')))) = ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> ((((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v))) = q')) ==> ((((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> (((makeFaceFinalFaceList f) ((facesAt g) v)) = ((MAP (\p. (((COND (p = f)) (setFinal f)) p))) ((facesAt g) v)))) = (((uniq ((facesAt g) v)) /\ (v < (sizel (faceListAt g)))) ==> q'))))
T c= c==> c= c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c==> c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 f3 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f3 c==> c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 f3 c= c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 c= cmakeFaceFinalFaceList f2 cfacesAt f0 f1 cMAP / cCOND c= b0 f2 csetFinal f2 b0 cfacesAt f0 f1 c==> c/\ cuniq cfacesAt f0 f1 c< f1 csizel cfaceListAt f0 f3
- (!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))), (uniq fs) |- ((!fs. (!x. (!y. ((uniq fs) ==> ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))))) /\ ((((replace x) ((CONS y) NIL)) fs) = ((MAP (\p. (((COND (p = x)) y) p))) fs)))
T c==> ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c==> cuniq f0 c/\ ! ! ! c==> cuniq b0 c= creplace b1 cCONS b2 cNIL b0 cMAP / cCOND c= b3 b1 b2 b3 b0 c= creplace f1 cCONS f2 cNIL f0 cMAP / cCOND c= b0 f1 f2 b0 f0
- |- ((!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))) = T)
T c= ! ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c==> c==> c~ f1 c= f3 b1 c= cCOND f0 f2 f3 cCOND f1 b0 b1 cT
