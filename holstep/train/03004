N List_hypermap.list_of_darts_k
C |- (!L. (!k. ((good_list L) ==> (((darts_k k) (hypermap_of_list L)) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))))
T c==> cgood_list f0 c= * * part cdarts_k f1 chypermap_of_list f0 * part cset_of_list cflatten cfilter / c= csizel b0 f1 clist_of_faces f0
D Seq.map_MAP
A |- (map = MAP)
T c= part cmap part cMAP
D List_hypermap.list_of_faces_k
A |- (!L. (!k. ((good_list L) ==> (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))))
T c==> cgood_list f0 c= * * part cface_set_k f1 chypermap_of_list f0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b0 f1 clist_of_faces f0
D List_hypermap.darts_k_union_face_set_k
A |- (!H. (!k. (((darts_k k) H) = (UNIONS ((face_set_k k) H)))))
T c= * * part cdarts_k f0 f1 * part cUNIONS * * part cface_set_k f0 f1
D List_hypermap.set_of_list_flatten_map
A |- (!s. ((set_of_list (flatten s)) = (UNIONS (set_of_list ((map set_of_list) s)))))
T c= * part cset_of_list cflatten f0 * part cUNIONS * part cset_of_list cmap part cset_of_list f0
+ |- ((\k. (((darts_k k) H) = (UNIONS ((face_set_k k) H)))) k)
T * / c= * * part cdarts_k b0 f0 * part cUNIONS * * part cface_set_k b0 f0 f1
+ |- (((!L. (!k. ((good_list L) ==> (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L)))))))) ==> ((\L. (!k. ((good_list L) ==> (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L)))))))) L)) = ((\L. (!k. ((good_list L) ==> (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L)))))))) L))
T c= c==> ! ! c==> cgood_list b0 c= * * part cface_set_k b1 chypermap_of_list b0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b2 b1 clist_of_faces b0 * / ! c==> cgood_list b0 c= * * part cface_set_k b1 chypermap_of_list b0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b2 b1 clist_of_faces b0 f0 * / ! c==> cgood_list b0 c= * * part cface_set_k b1 chypermap_of_list b0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b2 b1 clist_of_faces b0 f0
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ |- ((!k. ((good_list L) ==> (((darts_k k) (hypermap_of_list L)) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))) = T)
T c= ! c==> cgood_list f0 c= * * part cdarts_k b0 chypermap_of_list f0 * part cset_of_list cflatten cfilter / c= csizel b1 b0 clist_of_faces f0 cT
+ |- (MAP = map)
T c= part cMAP part cmap
+ |- ((UNIONS (set_of_list ((map set_of_list) s))) = (set_of_list (flatten s)))
T c= * part cUNIONS * part cset_of_list cmap part cset_of_list f0 * part cset_of_list cflatten f0
+ (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L))))) |- (((UNIONS (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L))))) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L))))) = ((UNIONS ((face_set_k k) (hypermap_of_list L))) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))
T c==> c= * * part cface_set_k f0 chypermap_of_list f1 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b0 f0 clist_of_faces f1 c= c= * part cUNIONS * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b0 f0 clist_of_faces f1 * part cset_of_list cflatten cfilter / c= csizel b0 f0 clist_of_faces f1 c= * part cUNIONS * * part cface_set_k f0 chypermap_of_list f1 * part cset_of_list cflatten cfilter / c= csizel b0 f0 clist_of_faces f1
+ |- (((!k. ((good_list L) ==> (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))) ==> ((\k. ((good_list L) ==> (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))) k)) = ((\k. ((good_list L) ==> (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))) k))
T c= c==> ! c==> cgood_list f0 c= * * part cface_set_k b0 chypermap_of_list f0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b1 b0 clist_of_faces f0 * / c==> cgood_list f0 c= * * part cface_set_k b0 chypermap_of_list f0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b1 b0 clist_of_faces f0 f1 * / c==> cgood_list f0 c= * * part cface_set_k b0 chypermap_of_list f0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b1 b0 clist_of_faces f0 f1
+ (good_list L) |- ((UNIONS ((face_set_k k) (hypermap_of_list L))) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L)))))
T c==> cgood_list f0 c= * part cUNIONS * * part cface_set_k f1 chypermap_of_list f0 * part cset_of_list cflatten cfilter / c= csizel b0 f1 clist_of_faces f0
+ (map = MAP) |- (MAP = map)
T c==> c= part cmap part cMAP c= part cMAP part cmap
+ |- (((!k. (((darts_k k) H) = (UNIONS ((face_set_k k) H)))) ==> ((\k. (((darts_k k) H) = (UNIONS ((face_set_k k) H)))) k)) = ((\k. (((darts_k k) H) = (UNIONS ((face_set_k k) H)))) k))
T c= c==> ! c= * * part cdarts_k b0 f0 * part cUNIONS * * part cface_set_k b0 f0 * / c= * * part cdarts_k b0 f0 * part cUNIONS * * part cface_set_k b0 f0 f1 * / c= * * part cdarts_k b0 f0 * part cUNIONS * * part cface_set_k b0 f0 f1
- |- (((set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L)))) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L))))) = ((UNIONS (set_of_list ((map set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L))))) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))
T c= c= * part cset_of_list cflatten cfilter / c= csizel b0 f0 clist_of_faces f1 * part cset_of_list cflatten cfilter / c= csizel b0 f0 clist_of_faces f1 c= * part cUNIONS * part cset_of_list cmap part cset_of_list cfilter / c= csizel b0 f0 clist_of_faces f1 * part cset_of_list cflatten cfilter / c= csizel b0 f0 clist_of_faces f1
+ (MAP = map) |- (map = MAP)
T c==> c= part cMAP part cmap c= part cmap part cMAP
+ (good_list L) |- ((((good_list L) /\ ((((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L))))) ==> ((UNIONS ((face_set_k k) (hypermap_of_list L))) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))) ==> (((good_list L) ==> (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L)))))) ==> ((UNIONS ((face_set_k k) (hypermap_of_list L))) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))) = (((good_list L) ==> (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L)))))) ==> ((UNIONS ((face_set_k k) (hypermap_of_list L))) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L)))))))
T c==> cgood_list f0 c= c==> c/\ cgood_list f0 c==> c= * * part cface_set_k f1 chypermap_of_list f0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b0 f1 clist_of_faces f0 c= * part cUNIONS * * part cface_set_k f1 chypermap_of_list f0 * part cset_of_list cflatten cfilter / c= csizel b0 f1 clist_of_faces f0 c==> c==> cgood_list f0 c= * * part cface_set_k f1 chypermap_of_list f0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b0 f1 clist_of_faces f0 c= * part cUNIONS * * part cface_set_k f1 chypermap_of_list f0 * part cset_of_list cflatten cfilter / c= csizel b0 f1 clist_of_faces f0 c==> c==> cgood_list f0 c= * * part cface_set_k f1 chypermap_of_list f0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b0 f1 clist_of_faces f0 c= * part cUNIONS * * part cface_set_k f1 chypermap_of_list f0 * part cset_of_list cflatten cfilter / c= csizel b0 f1 clist_of_faces f0
- |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
+ |- (((good_list L) ==> (((darts_k k) (hypermap_of_list L)) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L)))))) = T)
T c= c==> cgood_list f0 c= * * part cdarts_k f1 chypermap_of_list f0 * part cset_of_list cflatten cfilter / c= csizel b0 f1 clist_of_faces f0 cT
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- (good_list L) |- ((good_list L) = T)
T c==> cgood_list f0 c= cgood_list f0 cT
- (good_list L) |- ((good_list L) /\ (((face_set_k k) (hypermap_of_list L)) = (set_of_list ((MAP set_of_list) ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))
T c==> cgood_list f0 c/\ cgood_list f0 c= * * part cface_set_k f1 chypermap_of_list f0 * part cset_of_list cMAP part cset_of_list cfilter / c= csizel b0 f1 clist_of_faces f0
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- (good_list L) |- (T = (good_list L))
T c==> cgood_list f0 c= cT cgood_list f0
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- (T = ((set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L)))) = (set_of_list (flatten ((filter (\f. ((sizel f) = k))) (list_of_faces L))))))
T c= cT c= * part cset_of_list cflatten cfilter / c= csizel b0 f0 clist_of_faces f1 * part cset_of_list cflatten cfilter / c= csizel b0 f0 clist_of_faces f1
