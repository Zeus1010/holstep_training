N Pbflhet.ztrans_in_suc
C |- (!L. (!N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (~ ((final_list L) (((((rtrans L) N) r) x) i))))))))) ==> ((MEM (((((ztrans L) N) r) x) i)) (((((rtrans L) N) r) x) (SUC i)))))))))
T c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c/\ c= cnext_el f4 f3 f5 c~ cfinal_list f0 crtrans f0 f1 f2 f3 f6 cMEM cztrans f0 f1 f2 f3 f6 crtrans f0 f1 f2 f3 cSUC f6
D TRUTH
A |- T
T cT
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D o_DEF
A |- (!f. (!g. ((f o g) = (\x. (f (g x))))))
T c= * * part co f0 f1 / * f0 * f1 b0
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D MEM_APPEND
A |- (!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))))
T c= cMEM f0 cAPPEND f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
D Hypermap.COM_POWER
A |- (!n. (!f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))))
T c= * * part cPOWER f0 cSUC f1 * * part co f0 * * part cPOWER f0 f1
D Seq.mem_seq1
A |- (!x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y))))
T c= cMEM f0 cCONS f1 cNIL c= f0 f1
D Seq2.next_prev_id
A |- (!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x))))
T c==> cuniq f0 c= cnext_el f0 cprev_el f0 f1 f1
D Tame_defs2.normal_list
A |- (!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))))))
T c= cnormal_list f0 f1 c/\ cuniq cflatten f1 c/\ call / c~ c= b0 cNIL f1 c/\ call * part cf_last f0 f1 c/\ call * part cloop_list f0 f1 ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1
D Tame_defs2.split_normal_list
A |- (!L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))))
T c= csplit_normal_list f0 f1 f2 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b5 b6 cAPPEND b7 b4 cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 f3 cCONS f3 cNIL cAPPEND cCONS b0 cNIL cAPPEND cbetwn f1 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f2 f3 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f4 cnext_el f1 f3
D Tame_defs2.transform_list
A |- (!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))))
T c= ctransform_list f0 f1 c, f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f3 c, f2 f3 c, b5 cSND b4 cAPPEND creplace f3 cCONS cSND b4 cNIL f2 cCONS cFST b4 cNIL csplit_normal_list f0 f3 b3 b0 b2 cfind_face f0 b0 cprev_el f3 b1 cl'z f0 f2 f3 f1 cl'y f0 f3 f1
D Tame_defs2.rtrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= crtrans f0 f1 f2 f3 f4 cSND cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.ztrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))
T c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.marked_list
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))))))
T c= cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3
D Tame_list.uniq_flatten_uniq
A |- (!L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s))))
T c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1
D Tame_list.AQIUNPP3
A |- (!L. (!i. (!N. (!r. (!x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))
T c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 f3 cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
D Dangeyj.transform_list_power_rep
A |- (!j. ((((POWER ((transform_list L) x)) j) (N , r)) = ((((((ntrans L) N) r) x) j) , (((((rtrans L) N) r) x) j))))
T c= cPOWER * * part ctransform_list f0 f1 f2 c, f3 f4 c, cntrans f0 f3 f4 f1 f2 crtrans f0 f3 f4 f1 f2
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((MEM (((((ztrans L) N) r) x) i)) ((APPEND ((APPEND ((CONS ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) NIL)) ((APPEND (((betwn (((((rtrans L) N) r) x) i)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) (((l'y L) (((((rtrans L) N) r) x) i)) x))) ((CONS (((l'y L) (((((rtrans L) N) r) x) i)) x)) NIL)))) (((betwn ((find_face L) (((l'y L) (((((rtrans L) N) r) x) i)) x))) (((l'y L) (((((rtrans L) N) r) x) i)) x)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i))))))
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cMEM cztrans f0 f1 f2 f3 f4 cAPPEND cAPPEND cCONS cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cNIL cAPPEND cbetwn crtrans f0 f1 f2 f3 f4 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cCONS cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cNIL cbetwn cfind_face f0 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4
+ (good_list L), (good_list_nodes L), (transform_assumption_v2 L), ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (~ ((final_list L) (((((rtrans L) N) r) x) i))))))) |- ((MEM (((((ztrans L) N) r) x) i)) (((((rtrans L) N) r) x) (SUC i)))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c/\ c= cnext_el f4 f3 f5 c~ cfinal_list f0 crtrans f0 f1 f2 f3 f6 cMEM cztrans f0 f1 f2 f3 f6 crtrans f0 f1 f2 f3 cSUC f6
+ (((prev_el r1) z) = z1), ((((((ztrans L) N) r) x) i) = z), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1))))
T c==> c= cprev_el f0 f1 f2 c==> c= cztrans f3 f4 f5 f6 f7 f1 c==> cMEM f0 cntrans f3 f4 f5 f6 f7 c==> cnormal_list f3 cntrans f3 f4 f5 f6 f7 c\/ c\/ c= f1 cnext_el f0 f2 c\/ cMEM f1 cbetwn f0 cnext_el f0 f2 f8 c= f1 f8 cMEM f1 cbetwn cfind_face f3 f8 f8 cnext_el f0 f2
+ (transform_assumption_v2 L), ((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (~ ((final_list L) (((((rtrans L) N) r) x) i))))))))) |- ((MEM (((((ztrans L) N) r) x) i)) (((((rtrans L) N) r) x) (SUC i)))
T c==> ctransform_assumption_v2 f0 c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c= cfind_face f0 f3 f4 c/\ c= cnext_el f4 f3 f5 c~ cfinal_list f0 crtrans f0 f1 f2 f3 f6 cMEM cztrans f0 f1 f2 f3 f6 crtrans f0 f1 f2 f3 cSUC f6
+ ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) ==> ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((l'y L) r1) x) = y) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((((prev_el r1) z) = z1) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1))))))))))))
T c==> cMEM f0 cntrans f1 f2 f3 f4 f5 c==> cnormal_list f1 cntrans f1 f2 f3 f4 f5 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f1 cntrans f1 f2 f3 f4 f5 c==> c= cnext_el f0 f4 cf_list f1 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list cntrans f1 f2 f3 f4 f5 ce_list f4 c==> cs_flag_list f1 cntrans f1 f2 f3 f4 f5 f0 f4 c==> c= crtrans f1 f2 f3 f4 f5 f0 c==> c= cl'y f1 f0 f4 f6 c==> c= cztrans f1 f2 f3 f4 f5 f7 c==> c= cprev_el f0 f7 f8 c\/ c\/ c= f7 cnext_el f0 f8 c\/ cMEM f7 cbetwn f0 cnext_el f0 f8 f6 c= f7 f6 cMEM f7 cbetwn cfind_face f1 f6 f6 cnext_el f0 f8
+ |- ((((next_el r1) z1) = z) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))))
T c==> c= cnext_el f0 f1 f2 c\/ c\/ c= f2 cnext_el f0 f1 c\/ cMEM f2 cbetwn f0 cnext_el f0 f1 f3 c= f2 f3 cMEM f2 cbetwn cfind_face f4 f3 f3 cnext_el f0 f1
+ |- (((!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) ==> ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)) = ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x))
T c= c==> ! ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- ((MEM (((((ztrans L) N) r) x) i)) (SND (((transform_list L) x) ((((((ntrans L) N) r) x) i) , (((((rtrans L) N) r) x) i)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c/\ c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 cMEM cztrans f0 f1 f2 f3 f4 cSND ctransform_list f0 f3 c, cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4
+ ((\z1. (((prev_el r1) z) = z1)) z1) |- (((prev_el r1) z) = z1)
T c==> * / c= cprev_el f0 f1 b0 f2 c= cprev_el f0 f1 f2
+ |- (((!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) ==> ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)) = ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L))
T c= c==> ! ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
+ |- (((!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) ==> ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) i))) = ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) i)))
T c= c==> ! ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 f4 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 f4
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
- |- ((?y. ((((l'y L) r1) x) = y)) ==> (?y. ((((l'y L) r1) x) = y)))
T c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L))
T c= c==> ! ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((\y. ((((l'y L) r1) x) = y)) y) ==> ((MEM (((((ztrans L) N) r) x) i)) ((APPEND ((APPEND ((CONS ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))) NIL)) ((APPEND (((betwn r1) ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))) (((l'y L) r1) x))) ((CONS (((l'y L) r1) x)) NIL)))) (((betwn ((find_face L) (((l'y L) r1) x))) (((l'y L) r1) x)) ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i))))))) = T)
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= c==> * / c= cl'y f0 f5 f3 b0 f6 cMEM cztrans f0 f1 f2 f3 f4 cAPPEND cAPPEND cCONS cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4 cNIL cAPPEND cbetwn f5 cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4 cl'y f0 f5 f3 cCONS cl'y f0 f5 f3 cNIL cbetwn cfind_face f0 cl'y f0 f5 f3 cl'y f0 f5 f3 cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4 cT
+ |- ((((uniq (flatten (((((ntrans L) N) r) x) i))) /\ (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) /\ (((all (f_last L)) (((((ntrans L) N) r) x) i)) /\ (((all (loop_list L)) (((((ntrans L) N) r) x) i)) /\ (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))))))) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1))))) = (((normal_list L) (((((ntrans L) N) r) x) i)) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1))))))
T c= c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 c/\ call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c/\ call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c/\ call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c\/ c\/ c= f5 cnext_el f6 f7 c\/ cMEM f5 cbetwn f6 cnext_el f6 f7 f8 c= f5 f8 cMEM f5 cbetwn cfind_face f0 f8 f8 cnext_el f6 f7 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c\/ c\/ c= f5 cnext_el f6 f7 c\/ cMEM f5 cbetwn f6 cnext_el f6 f7 f8 c= f5 f8 cMEM f5 cbetwn cfind_face f0 f8 f8 cnext_el f6 f7
+ (uniq (flatten (((((ntrans L) N) r) x) i))), (((prev_el r1) z) = z1), ((((((ztrans L) N) r) x) i) = z), ((MEM r1) (((((ntrans L) N) r) x) i)) |- ((((uniq (flatten (((((ntrans L) N) r) x) i))) /\ ((MEM r1) (((((ntrans L) N) r) x) i))) ==> (uniq r1)) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))))
T c==> cuniq cflatten cntrans f0 f1 f2 f3 f4 c==> c= cprev_el f5 f6 f7 c==> c= cztrans f0 f1 f2 f3 f4 f6 c==> cMEM f5 cntrans f0 f1 f2 f3 f4 c==> c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 cMEM f5 cntrans f0 f1 f2 f3 f4 cuniq f5 c\/ c\/ c= f6 cnext_el f5 f7 c\/ cMEM f6 cbetwn f5 cnext_el f5 f7 f8 c= f6 f8 cMEM f6 cbetwn cfind_face f0 f8 f8 cnext_el f5 f7
+ ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) = T)
T c==> cmarked_list f0 f1 f2 f3 c= cmarked_list f0 f1 f2 f3 cT
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))) |- (((final_list L) (((((rtrans L) N) r) x) i)) = F)
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c= cfinal_list f0 crtrans f0 f1 f2 f3 f4 cF
- (is_restricted (hypermap_of_list L)) |- ((is_restricted (hypermap_of_list L)) = T)
T c==> cis_restricted chypermap_of_list f0 c= cis_restricted chypermap_of_list f0 cT
+ |- ((\f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))) f)
T * / c= * * part cPOWER b0 cSUC f0 * * part co b0 * * part cPOWER b0 f0 f1
+ |- (((!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) ==> ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)) = ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x))
T c= c==> ! c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ |- (((uniq (flatten (((((ntrans L) N) r) x) i))) /\ ((MEM r1) (((((ntrans L) N) r) x) i))) ==> (uniq r1))
T c==> c/\ cuniq cflatten cntrans f0 f1 f2 f3 f4 cMEM f5 cntrans f0 f1 f2 f3 f4 cuniq f5
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) ==> ((MEM (((((ztrans L) N) r) x) i)) ((APPEND ((APPEND ((CONS ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) NIL)) ((APPEND (((betwn (((((rtrans L) N) r) x) i)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) (((l'y L) (((((rtrans L) N) r) x) i)) x))) ((CONS (((l'y L) (((((rtrans L) N) r) x) i)) x)) NIL)))) (((betwn ((find_face L) (((l'y L) (((((rtrans L) N) r) x) i)) x))) (((l'y L) (((((rtrans L) N) r) x) i)) x)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))))))
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 cMEM cztrans f0 f1 f2 f3 f4 cAPPEND cAPPEND cCONS cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cNIL cAPPEND cbetwn crtrans f0 f1 f2 f3 f4 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cCONS cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cNIL cbetwn cfind_face f0 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((l'y L) r1) x) = y) ==> ((MEM (((((ztrans L) N) r) x) i)) ((APPEND ((APPEND ((CONS ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))) NIL)) ((APPEND (((betwn r1) ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))) (((l'y L) r1) x))) ((CONS (((l'y L) r1) x)) NIL)))) (((betwn ((find_face L) (((l'y L) r1) x))) (((l'y L) r1) x)) ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))))))
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c= cl'y f0 f5 f3 f6 cMEM cztrans f0 f1 f2 f3 f4 cAPPEND cAPPEND cCONS cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4 cNIL cAPPEND cbetwn f5 cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4 cl'y f0 f5 f3 cCONS cl'y f0 f5 f3 cNIL cbetwn cfind_face f0 cl'y f0 f5 f3 cl'y f0 f5 f3 cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4
- |- ((?r1. ((((((rtrans L) N) r) x) i) = r1)) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> c? / c= crtrans f0 f1 f2 f3 f4 b0 c? / c= crtrans f0 f1 f2 f3 f4 b0
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- ((MEM (((((ztrans L) N) r) x) i)) (SND (((transform_list L) x) ((((((ntrans L) N) r) x) i) , (((((rtrans L) N) r) x) i)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c/\ c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 cMEM cztrans f0 f1 f2 f3 f4 cSND ctransform_list f0 f3 c, cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4
+ |- (((!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
+ |- (((!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) ==> ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)) = ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L))
T c= c==> ! ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
+ (((prev_el r1) z) = z1) |- (((MEM z) ((APPEND ((APPEND ((CONS ((next_el r1) z1)) NIL)) ((APPEND (((betwn r1) ((next_el r1) z1)) y)) ((CONS y) NIL)))) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))) = ((MEM z) ((APPEND ((APPEND ((CONS ((next_el r1) ((prev_el r1) z))) NIL)) ((APPEND (((betwn r1) ((next_el r1) ((prev_el r1) z))) y)) ((CONS y) NIL)))) (((betwn ((find_face L) y)) y) ((next_el r1) ((prev_el r1) z))))))
T c==> c= cprev_el f0 f1 f2 c= cMEM f1 cAPPEND cAPPEND cCONS cnext_el f0 f2 cNIL cAPPEND cbetwn f0 cnext_el f0 f2 f3 cCONS f3 cNIL cbetwn cfind_face f4 f3 f3 cnext_el f0 f2 cMEM f1 cAPPEND cAPPEND cCONS cnext_el f0 cprev_el f0 f1 cNIL cAPPEND cbetwn f0 cnext_el f0 cprev_el f0 f1 f3 cCONS f3 cNIL cbetwn cfind_face f4 f3 f3 cnext_el f0 cprev_el f0 f1
+ |- ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)
T * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
+ (((prev_el r1) z) = z1), ((((((ztrans L) N) r) x) i) = z), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- ((((prev_el r1) z) = z1) /\ (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))))
T c==> c= cprev_el f0 f1 f2 c==> c= cztrans f3 f4 f5 f6 f7 f1 c==> cMEM f0 cntrans f3 f4 f5 f6 f7 c==> cnormal_list f3 cntrans f3 f4 f5 f6 f7 c/\ c= cprev_el f0 f1 f2 c\/ c\/ c= f1 cnext_el f0 f2 c\/ cMEM f1 cbetwn f0 cnext_el f0 f2 f8 c= f1 f8 cMEM f1 cbetwn cfind_face f3 f8 f8 cnext_el f0 f2
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((?y. ((((l'y L) r1) x) = y)) ==> ((MEM (((((ztrans L) N) r) x) i)) ((APPEND ((APPEND ((CONS ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))) NIL)) ((APPEND (((betwn r1) ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))) (((l'y L) r1) x))) ((CONS (((l'y L) r1) x)) NIL)))) (((betwn ((find_face L) (((l'y L) r1) x))) (((l'y L) r1) x)) ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))))))
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> c? / c= cl'y f0 f5 f3 b0 cMEM cztrans f0 f1 f2 f3 f4 cAPPEND cAPPEND cCONS cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4 cNIL cAPPEND cbetwn f5 cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4 cl'y f0 f5 f3 cCONS cl'y f0 f5 f3 cNIL cbetwn cfind_face f0 cl'y f0 f5 f3 cl'y f0 f5 f3 cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4
+ ((((((ztrans L) N) r) x) i) = z), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- ((((prev_el r1) z) = z1) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))))
T c==> c= cztrans f0 f1 f2 f3 f4 f5 c==> cMEM f6 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> c= cprev_el f6 f5 f7 c\/ c\/ c= f5 cnext_el f6 f7 c\/ cMEM f5 cbetwn f6 cnext_el f6 f7 f8 c= f5 f8 cMEM f5 cbetwn cfind_face f0 f8 f8 cnext_el f6 f7
+ |- ((((is_restricted (hypermap_of_list L)) /\ (((normal_list L) (((((ntrans L) N) r) x) i)) /\ (((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) /\ (((MEM x) (((((rtrans L) N) r) x) i)) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ ((((final_list L) (((((rtrans L) N) r) x) i)) ==> ((flag_list L) (((((ntrans L) N) r) x) i))) /\ ((~ ((final_list L) (((((rtrans L) N) r) x) i))) ==> ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))))) ==> ((MEM (((((ztrans L) N) r) x) i)) (SND (((transform_list L) x) ((((((ntrans L) N) r) x) i) , (((((rtrans L) N) r) x) i)))))) = (((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) ==> ((MEM (((((ztrans L) N) r) x) i)) (SND (((transform_list L) x) (((POWER ((transform_list L) x)) i) (N , r)))))))
T c= c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 cntrans f0 f1 f2 f3 f4 c/\ cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c/\ cMEM f3 crtrans f0 f1 f2 f3 f4 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c/\ c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c/\ c==> cfinal_list f0 crtrans f0 f1 f2 f3 f4 cflag_list f0 cntrans f0 f1 f2 f3 f4 c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cMEM cztrans f0 f1 f2 f3 f4 cSND ctransform_list f0 f3 c, cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cMEM cztrans f0 f1 f2 f3 f4 cSND ctransform_list f0 f3 cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((((((rtrans L) N) r) x) i) = r1) |- (((next_el r1) x) = ((f_list L) x))
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c= cnext_el f5 f3 cf_list f0 f3
+ |- (((!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) ==> ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)) = ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1))
T c= c==> ! ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ (transform_assumption_v2 L) |- ((transform_assumption_v2 L) = T)
T c==> ctransform_assumption_v2 f0 c= ctransform_assumption_v2 f0 cT
- ((((((rtrans L) N) r) x) i) = r1), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x) = T)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cmarked_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 cT
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (((MEM x) (((((rtrans L) N) r) x) i)) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) /\ ((((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))))), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- ((MEM (((((ztrans L) N) r) x) i)) (SND (((transform_list L) x) ((((((ntrans L) N) r) x) i) , (((((rtrans L) N) r) x) i)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c/\ cMEM f3 crtrans f0 f1 f2 f3 f4 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c/\ c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 cMEM cztrans f0 f1 f2 f3 f4 cSND ctransform_list f0 f3 c, cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4
+ ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- ((((next_el r1) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) ==> (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((l'y L) r1) x) = y) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((((prev_el r1) z) = z1) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))))))))))
T c==> cMEM f0 cntrans f1 f2 f3 f4 f5 c==> cnormal_list f1 cntrans f1 f2 f3 f4 f5 c==> c= cnext_el f0 f4 cf_list f1 f4 c==> cLET / cLET_END cfinal_list f1 b0 cfind_list cntrans f1 f2 f3 f4 f5 ce_list f4 c==> cs_flag_list f1 cntrans f1 f2 f3 f4 f5 f0 f4 c==> c= crtrans f1 f2 f3 f4 f5 f0 c==> c= cl'y f1 f0 f4 f6 c==> c= cztrans f1 f2 f3 f4 f5 f7 c==> c= cprev_el f0 f7 f8 c\/ c\/ c= f7 cnext_el f0 f8 c\/ cMEM f7 cbetwn f0 cnext_el f0 f8 f6 c= f7 f6 cMEM f7 cbetwn cfind_face f1 f6 f6 cnext_el f0 f8
+ |- (((!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) ==> ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)) = ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i))
T c= c==> ! c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ |- ((!N. (!r. (!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (~ ((final_list L) (((((rtrans L) N) r) x) i))))))))) ==> ((MEM (((((ztrans L) N) r) x) i)) (((((rtrans L) N) r) x) (SUC i)))))))) = T)
T c= ! ! ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c= cfind_face f0 b2 f1 c/\ c= cnext_el f1 b2 f2 c~ cfinal_list f0 crtrans f0 b0 b1 b2 b3 cMEM cztrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 cSUC b3 cT
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) /\ ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- ((MEM (((((ztrans L) N) r) x) i)) (SND (((transform_list L) x) ((((((ntrans L) N) r) x) i) , (((((rtrans L) N) r) x) i)))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c/\ c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 cMEM cztrans f0 f1 f2 f3 f4 cSND ctransform_list f0 f3 c, cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4
- ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))) = T)
T c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c= cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 cT
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- ((\x. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ ((((marked_list L) N) r) x)))) ==> ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))) x)
T * / c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 cmarked_list f0 f1 f2 b0 cmarked_list f0 cntrans f0 f1 f2 b0 f3 crtrans f0 f1 f2 b0 f3 b0 f4
+ (~ ((final_list L) (((((rtrans L) N) r) x) i))), (good_list L), (good_list_nodes L), (transform_assumption_v2 L), ((((marked_list L) N) r) x) |- ((MEM (((((ztrans L) N) r) x) i)) (((((rtrans L) N) r) x) (SUC i)))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> ctransform_assumption_v2 f0 c==> cmarked_list f0 f1 f2 f3 cMEM cztrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 cSUC f4
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ ((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) |- ((((((((rtrans L) N) r) x) i) = r1) ==> ((MEM (((((ztrans L) N) r) x) i)) ((APPEND ((APPEND ((CONS ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) NIL)) ((APPEND (((betwn (((((rtrans L) N) r) x) i)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) (((l'y L) (((((rtrans L) N) r) x) i)) x))) ((CONS (((l'y L) (((((rtrans L) N) r) x) i)) x)) NIL)))) (((betwn ((find_face L) (((l'y L) (((((rtrans L) N) r) x) i)) x))) (((l'y L) (((((rtrans L) N) r) x) i)) x)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i))))))) = ((MEM (((((ztrans L) N) r) x) i)) ((APPEND ((APPEND ((CONS ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) NIL)) ((APPEND (((betwn (((((rtrans L) N) r) x) i)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) (((l'y L) (((((rtrans L) N) r) x) i)) x))) ((CONS (((l'y L) (((((rtrans L) N) r) x) i)) x)) NIL)))) (((betwn ((find_face L) (((l'y L) (((((rtrans L) N) r) x) i)) x))) (((l'y L) (((((rtrans L) N) r) x) i)) x)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))))))
T c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c= c==> c= crtrans f0 f1 f2 f3 f4 f5 cMEM cztrans f0 f1 f2 f3 f4 cAPPEND cAPPEND cCONS cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cNIL cAPPEND cbetwn crtrans f0 f1 f2 f3 f4 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cCONS cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cNIL cbetwn cfind_face f0 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cMEM cztrans f0 f1 f2 f3 f4 cAPPEND cAPPEND cCONS cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cNIL cAPPEND cbetwn crtrans f0 f1 f2 f3 f4 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cCONS cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cNIL cbetwn cfind_face f0 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4
+ |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
+ ((((((rtrans L) N) r) x) i) = r1), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- (((((((rtrans L) N) r) x) i) = r1) /\ (((((l'y L) r1) x) = y) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((((prev_el r1) z) = z1) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1))))))))
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cMEM f5 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c/\ c= crtrans f0 f1 f2 f3 f4 f5 c==> c= cl'y f0 f5 f3 f6 c==> c= cztrans f0 f1 f2 f3 f4 f7 c==> c= cprev_el f5 f7 f8 c\/ c\/ c= f7 cnext_el f5 f8 c\/ cMEM f7 cbetwn f5 cnext_el f5 f8 f6 c= f7 f6 cMEM f7 cbetwn cfind_face f0 f6 f6 cnext_el f5 f8
- |- (((!x'. (((\y. ((((l'y L) r1) x) = y)) x') ==> (?y. ((((l'y L) r1) x) = y)))) ==> ((?y. ((((l'y L) r1) x) = y)) ==> (?y. ((((l'y L) r1) x) = y)))) = ((?y. ((((l'y L) r1) x) = y)) ==> (?y. ((((l'y L) r1) x) = y))))
T c= c==> ! c==> * / c= cl'y f0 f1 f2 b1 b0 c? / c= cl'y f0 f1 f2 b1 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- ((all (f_last L)) (((((ntrans L) N) r) x) i)) |- (((all (f_last L)) (((((ntrans L) N) r) x) i)) = T)
T c==> call * part cf_last f0 cntrans f0 f1 f2 f3 f4 c= call * part cf_last f0 cntrans f0 f1 f2 f3 f4 cT
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) ==> ((MEM (((((ztrans L) N) r) x) i)) ((APPEND ((APPEND ((CONS ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) NIL)) ((APPEND (((betwn (((((rtrans L) N) r) x) i)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i)))) (((l'y L) (((((rtrans L) N) r) x) i)) x))) ((CONS (((l'y L) (((((rtrans L) N) r) x) i)) x)) NIL)))) (((betwn ((find_face L) (((l'y L) (((((rtrans L) N) r) x) i)) x))) (((l'y L) (((((rtrans L) N) r) x) i)) x)) ((next_el (((((rtrans L) N) r) x) i)) ((prev_el (((((rtrans L) N) r) x) i)) (((((ztrans L) N) r) x) i))))))) = T)
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 cMEM cztrans f0 f1 f2 f3 f4 cAPPEND cAPPEND cCONS cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cNIL cAPPEND cbetwn crtrans f0 f1 f2 f3 f4 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cCONS cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cNIL cbetwn cfind_face f0 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cl'y f0 crtrans f0 f1 f2 f3 f4 f3 cnext_el crtrans f0 f1 f2 f3 f4 cprev_el crtrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 cT
+ (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)) |- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))
T c==> c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4 c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
+ |- (((!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ==> ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)) = ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1))
T c= c==> ! ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), ((((((rtrans L) N) r) x) i) = r1) |- (((~ ((final_list L) r1)) ==> (((final_list L) r1) = F)) = (((final_list L) r1) = F))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c= crtrans f0 f1 f2 f3 f4 f5 c= c==> c~ cfinal_list f0 f5 c= cfinal_list f0 f5 cF c= cfinal_list f0 f5 cF
- ((MEM x) (((((rtrans L) N) r) x) i)) |- (((MEM x) (((((rtrans L) N) r) x) i)) = T)
T c==> cMEM f0 crtrans f1 f2 f3 f0 f4 c= cMEM f0 crtrans f1 f2 f3 f0 f4 cT
+ |- ((!x. (!i. (((transform_assumption_v2 L) /\ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((((find_face L) x) = f) /\ ((((next_el f) x) = w) /\ (~ ((final_list L) (((((rtrans L) N) r) x) i))))))))) ==> ((MEM (((((ztrans L) N) r) x) i)) (((((rtrans L) N) r) x) (SUC i)))))) = T)
T c= ! ! c==> c/\ ctransform_assumption_v2 f0 c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c= cfind_face f0 b0 f3 c/\ c= cnext_el f3 b0 f4 c~ cfinal_list f0 crtrans f0 f1 f2 b0 b1 cMEM cztrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 cSUC b1 cT
- ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = T)
T c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cT
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), (((prev_el r1) z) = z1), ((((l'y L) r1) x) = y), ((((((ztrans L) N) r) x) i) = z), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((MEM z) ((APPEND ((APPEND ((CONS ((next_el r1) ((prev_el r1) z))) NIL)) ((APPEND (((betwn r1) ((next_el r1) ((prev_el r1) z))) y)) ((CONS y) NIL)))) (((betwn ((find_face L) y)) y) ((next_el r1) ((prev_el r1) z)))))
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= cprev_el f5 f6 f7 c==> c= cl'y f0 f5 f3 f8 c==> c= cztrans f0 f1 f2 f3 f4 f6 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cMEM f6 cAPPEND cAPPEND cCONS cnext_el f5 cprev_el f5 f6 cNIL cAPPEND cbetwn f5 cnext_el f5 cprev_el f5 f6 f8 cCONS f8 cNIL cbetwn cfind_face f0 f8 f8 cnext_el f5 cprev_el f5 f6
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ |- (((?z1. (((prev_el r1) z) = z1)) ==> ((MEM z) ((APPEND ((APPEND ((CONS ((next_el r1) ((prev_el r1) z))) NIL)) ((APPEND (((betwn r1) ((next_el r1) ((prev_el r1) z))) y)) ((CONS y) NIL)))) (((betwn ((find_face L) y)) y) ((next_el r1) ((prev_el r1) z)))))) = ((MEM z) ((APPEND ((APPEND ((CONS ((next_el r1) ((prev_el r1) z))) NIL)) ((APPEND (((betwn r1) ((next_el r1) ((prev_el r1) z))) y)) ((CONS y) NIL)))) (((betwn ((find_face L) y)) y) ((next_el r1) ((prev_el r1) z))))))
T c= c==> c? / c= cprev_el f0 f1 b0 cMEM f1 cAPPEND cAPPEND cCONS cnext_el f0 cprev_el f0 f1 cNIL cAPPEND cbetwn f0 cnext_el f0 cprev_el f0 f1 f2 cCONS f2 cNIL cbetwn cfind_face f3 f2 f2 cnext_el f0 cprev_el f0 f1 cMEM f1 cAPPEND cAPPEND cCONS cnext_el f0 cprev_el f0 f1 cNIL cAPPEND cbetwn f0 cnext_el f0 cprev_el f0 f1 f2 cCONS f2 cNIL cbetwn cfind_face f3 f2 f2 cnext_el f0 cprev_el f0 f1
+ |- (((!s. ((uniq s) ==> (((next_el s) ((prev_el s) (((((ztrans L) N) r) x) i))) = (((((ztrans L) N) r) x) i)))) ==> ((\s. ((uniq s) ==> (((next_el s) ((prev_el s) (((((ztrans L) N) r) x) i))) = (((((ztrans L) N) r) x) i)))) r1)) = ((\s. ((uniq s) ==> (((next_el s) ((prev_el s) (((((ztrans L) N) r) x) i))) = (((((ztrans L) N) r) x) i)))) r1))
T c= c==> ! c==> cuniq b0 c= cnext_el b0 cprev_el b0 cztrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 * / c==> cuniq b0 c= cnext_el b0 cprev_el b0 cztrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 f5 * / c==> cuniq b0 c= cnext_el b0 cprev_el b0 cztrans f0 f1 f2 f3 f4 cztrans f0 f1 f2 f3 f4 f5
+ |- (?y. ((((l'y L) r1) x) = y))
T c? / c= cl'y f0 f1 f2 b0
+ (uniq r1), (((prev_el r1) z) = z1), ((((((ztrans L) N) r) x) i) = z) |- (((uniq r1) ==> (((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i))) = (((((ztrans L) N) r) x) i))) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))))
T c==> cuniq f0 c==> c= cprev_el f0 f1 f2 c==> c= cztrans f3 f4 f5 f6 f7 f1 c==> c==> cuniq f0 c= cnext_el f0 cprev_el f0 cztrans f3 f4 f5 f6 f7 cztrans f3 f4 f5 f6 f7 c\/ c\/ c= f1 cnext_el f0 f2 c\/ cMEM f1 cbetwn f0 cnext_el f0 f2 f8 c= f1 f8 cMEM f1 cbetwn cfind_face f3 f8 f8 cnext_el f0 f2
- |- ((!d. t) = t)
T c= ! f0 f0
+ |- ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ |- ((\r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) r)
T * / ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 f2
+ (((next_el (((((rtrans L) N) r) x) i)) x) = ((f_list L) x)), ((((((rtrans L) N) r) x) i) = r1), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) (((((ntrans L) N) r) x) i))), ((MEM x) (((((rtrans L) N) r) x) i)), ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (!y. (((\y. ((((l'y L) r1) x) = y)) y) ==> ((MEM (((((ztrans L) N) r) x) i)) ((APPEND ((APPEND ((CONS ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))) NIL)) ((APPEND (((betwn r1) ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i)))) (((l'y L) r1) x))) ((CONS (((l'y L) r1) x)) NIL)))) (((betwn ((find_face L) (((l'y L) r1) x))) (((l'y L) r1) x)) ((next_el r1) ((prev_el r1) (((((ztrans L) N) r) x) i))))))))
T c==> c= cnext_el crtrans f0 f1 f2 f3 f4 f3 cf_list f0 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 cntrans f0 f1 f2 f3 f4 c==> cMEM f3 crtrans f0 f1 f2 f3 f4 c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 ! c==> * / c= cl'y f0 f5 f3 b1 b0 cMEM cztrans f0 f1 f2 f3 f4 cAPPEND cAPPEND cCONS cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4 cNIL cAPPEND cbetwn f5 cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4 cl'y f0 f5 f3 cCONS cl'y f0 f5 f3 cNIL cbetwn cfind_face f0 cl'y f0 f5 f3 cl'y f0 f5 f3 cnext_el f5 cprev_el f5 cztrans f0 f1 f2 f3 f4
+ |- (((((((rtrans L) N) r) x) i) = (((((rtrans L) N) r) x) i)) = ((\r1. ((((((rtrans L) N) r) x) i) = r1)) (((((rtrans L) N) r) x) i)))
T c= c= crtrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 * / c= crtrans f0 f1 f2 f3 f4 b0 crtrans f0 f1 f2 f3 f4
+ |- ((\f. (!x. (((LET f) x) = (f x)))) f)
T * / ! c= cLET b0 b1 * b0 b1 f0
+ ((((l'y L) r1) x) = y), ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- (((((l'y L) r1) x) = y) /\ (((((((ztrans L) N) r) x) i) = z) ==> ((((prev_el r1) z) = z1) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))))))
T c==> c= cl'y f0 f1 f2 f3 c==> cMEM f1 cntrans f0 f4 f5 f2 f6 c==> cnormal_list f0 cntrans f0 f4 f5 f2 f6 c/\ c= cl'y f0 f1 f2 f3 c==> c= cztrans f0 f4 f5 f2 f6 f7 c==> c= cprev_el f1 f7 f8 c\/ c\/ c= f7 cnext_el f1 f8 c\/ cMEM f7 cbetwn f1 cnext_el f1 f8 f3 c= f7 f3 cMEM f7 cbetwn cfind_face f0 f3 f3 cnext_el f1 f8
+ |- (((!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) ==> ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)) = ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N))
T c= c==> ! ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
+ |- (((!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) ==> ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)) = ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N))
T c= c==> ! ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
+ |- ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)
T * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
+ ((((((rtrans L) N) r) x) i) = r1), ((((s_flag_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) ==> (((((((rtrans L) N) r) x) i) = r1) ==> (((((l'y L) r1) x) = y) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((((prev_el r1) z) = z1) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1))))))))) = (((((((rtrans L) N) r) x) i) = r1) ==> (((((l'y L) r1) x) = y) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((((prev_el r1) z) = z1) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))))))))
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= cl'y f0 f5 f3 f6 c==> c= cztrans f0 f1 f2 f3 f4 f7 c==> c= cprev_el f5 f7 f8 c\/ c\/ c= f7 cnext_el f5 f8 c\/ cMEM f7 cbetwn f5 cnext_el f5 f8 f6 c= f7 f6 cMEM f7 cbetwn cfind_face f0 f6 f6 cnext_el f5 f8 c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> c= cl'y f0 f5 f3 f6 c==> c= cztrans f0 f1 f2 f3 f4 f7 c==> c= cprev_el f5 f7 f8 c\/ c\/ c= f7 cnext_el f5 f8 c\/ cMEM f7 cbetwn f5 cnext_el f5 f8 f6 c= f7 f6 cMEM f7 cbetwn cfind_face f0 f6 f6 cnext_el f5 f8
+ |- ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)
T * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ ((MEM r1) (((((ntrans L) N) r) x) i)), ((normal_list L) (((((ntrans L) N) r) x) i)) |- (((((l'y L) r1) x) = y) ==> (((((((ztrans L) N) r) x) i) = z) ==> ((((prev_el r1) z) = z1) ==> (((z = ((next_el r1) z1)) \/ (((MEM z) (((betwn r1) ((next_el r1) z1)) y)) \/ (z = y))) \/ ((MEM z) (((betwn ((find_face L) y)) y) ((next_el r1) z1)))))))
T c==> cMEM f0 cntrans f1 f2 f3 f4 f5 c==> cnormal_list f1 cntrans f1 f2 f3 f4 f5 c==> c= cl'y f1 f0 f4 f6 c==> c= cztrans f1 f2 f3 f4 f5 f7 c==> c= cprev_el f0 f7 f8 c\/ c\/ c= f7 cnext_el f0 f8 c\/ cMEM f7 cbetwn f0 cnext_el f0 f8 f6 c= f7 f6 cMEM f7 cbetwn cfind_face f1 f6 f6 cnext_el f0 f8
+ |- (((!t. ((LET_END t) = t)) ==> ((\t. ((LET_END t) = t)) t)) = ((\t. ((LET_END t) = t)) t))
T c= c==> ! c= cLET_END b0 b0 * / c= cLET_END b0 b0 f0 * / c= cLET_END b0 b0 f0
- |- ((?z. ((((((ztrans L) N) r) x) i) = z)) ==> (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c? / c= cztrans f0 f1 f2 f3 f4 b0
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) |- ((((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i))))) = T)
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c= c==> cMEM f5 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 f5 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 cT
- |- (((((((ztrans L) N) r) x) i) = z) = ((\z. ((((((ztrans L) N) r) x) i) = z)) z))
T c= c= cztrans f0 f1 f2 f3 f4 f5 * / c= cztrans f0 f1 f2 f3 f4 b0 f5
- |- ((((\z1. (((prev_el r1) z) = z1)) z1) ==> (?z1. (((prev_el r1) z) = z1))) = T)
T c= c==> * / c= cprev_el f0 f1 b0 f2 c? / c= cprev_el f0 f1 b0 cT
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) |- (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 c==> cMEM f5 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 f5 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4
- |- (((((l'y L) r1) x) = y) = ((\y. ((((l'y L) r1) x) = y)) y))
T c= c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
- ((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) |- (((MEM (((((rtrans L) N) r) x) i)) (((((ntrans L) N) r) x) i)) = T)
T c==> cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 c= cMEM crtrans f0 f1 f2 f3 f4 cntrans f0 f1 f2 f3 f4 cT
- |- ((((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1))) = T)
T c= c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0 cT
- |- (!y. (((\y. ((((l'y L) r1) x) = y)) y) ==> (?y. ((((l'y L) r1) x) = y))))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = T)
T c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cT
- ((((l'y L) r1) x) = y) |- ((\y. ((((l'y L) r1) x) = y)) y)
T c==> c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), ((((((rtrans L) N) r) x) i) = r1) |- (~ ((final_list L) r1))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c= crtrans f0 f1 f2 f3 f4 f5 c~ cfinal_list f0 f5
- ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list (((((ntrans L) N) r) x) i)) (e_list x))) = T)
T c==> cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 c= cLET / cLET_END cfinal_list f0 b0 cfind_list cntrans f0 f1 f2 f3 f4 ce_list f3 cT
- ((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) |- (((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) /\ (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c/\ * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0
- |- (((((l'y L) r1) x) = y) ==> (?y. ((((l'y L) r1) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- |- (((((((rtrans L) N) r) x) i) = r1) = ((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1))
T c= c= crtrans f0 f1 f2 f3 f4 f5 * / c= crtrans f0 f1 f2 f3 f4 b0 f5
- ((((((ztrans L) N) r) x) i) = z) |- ((\z. ((((((ztrans L) N) r) x) i) = z)) z)
T c==> c= cztrans f0 f1 f2 f3 f4 f5 * / c= cztrans f0 f1 f2 f3 f4 b0 f5
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), ((((((rtrans L) N) r) x) i) = r1) |- (((final_list L) r1) = F)
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> c= crtrans f0 f1 f2 f3 f4 f5 c= cfinal_list f0 f5 cF
- (!d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) |- ((\d. (((MEM d) (flatten (((((ntrans L) N) r) x) i))) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten (((((ntrans L) N) r) x) i)))))) d)
T c==> ! c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 * / c==> cMEM b0 cflatten cntrans f0 f1 f2 f3 f4 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten cntrans f0 f1 f2 f3 f4 f5
- |- ((?z1. (((prev_el r1) z) = z1)) ==> (?z1. (((prev_el r1) z) = z1)))
T c==> c? / c= cprev_el f0 f1 b0 c? / c= cprev_el f0 f1 b0
- ((\z. ((((((ztrans L) N) r) x) i) = z)) z) |- ((((((((ztrans L) N) r) x) i) = z) ==> (?z. ((((((ztrans L) N) r) x) i) = z))) = (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c= c==> c= cztrans f0 f1 f2 f3 f4 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0 c? / c= cztrans f0 f1 f2 f3 f4 b0
- ((((((ztrans L) N) r) x) i) = z) |- (((((((ztrans L) N) r) x) i) = z) /\ (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> c= cztrans f0 f1 f2 f3 f4 f5 c/\ c= cztrans f0 f1 f2 f3 f4 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0
- (~ ((final_list L) (((((rtrans L) N) r) x) i))), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- (((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) /\ ((MEM (((((ztrans L) N) r) x) i)) (SND (((transform_list L) x) (((POWER ((transform_list L) x)) i) (N , r))))))
T c==> c~ cfinal_list f0 crtrans f0 f1 f2 f3 f4 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c/\ cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cMEM cztrans f0 f1 f2 f3 f4 cSND ctransform_list f0 f3 cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
- |- (!z. (((\z. ((((((ztrans L) N) r) x) i) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) i) = z))))
T c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0
- ((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) |- (((all (\s. (~ (s = NIL)))) (((((ntrans L) N) r) x) i)) = T)
T c==> call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 c= call / c~ c= b0 cNIL cntrans f0 f1 f2 f3 f4 cT
- |- (((!x'. (((\z. ((((((ztrans L) N) r) x) i) = z)) x') ==> (?z. ((((((ztrans L) N) r) x) i) = z)))) ==> ((?z. ((((((ztrans L) N) r) x) i) = z)) ==> (?z. ((((((ztrans L) N) r) x) i) = z)))) = ((?z. ((((((ztrans L) N) r) x) i) = z)) ==> (?z. ((((((ztrans L) N) r) x) i) = z))))
T c= c==> ! c==> * / c= cztrans f0 f1 f2 f3 f4 b1 b0 c? / c= cztrans f0 f1 f2 f3 f4 b1 c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c? / c= cztrans f0 f1 f2 f3 f4 b0 c==> c? / c= cztrans f0 f1 f2 f3 f4 b0 c? / c= cztrans f0 f1 f2 f3 f4 b0
- ((\y. ((((l'y L) r1) x) = y)) y) |- ((((((l'y L) r1) x) = y) ==> (?y. ((((l'y L) r1) x) = y))) = (?y. ((((l'y L) r1) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c= c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- (((prev_el r1) z) = z1) |- ((\z1. (((prev_el r1) z) = z1)) z1)
T c==> c= cprev_el f0 f1 f2 * / c= cprev_el f0 f1 b0 f2
- |- ((((\y. ((((l'y L) r1) x) = y)) y) ==> (?y. ((((l'y L) r1) x) = y))) = T)
T c= c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0 cT
- ((((((rtrans L) N) r) x) i) = r1) |- ((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 * / c= crtrans f0 f1 f2 f3 f4 b0 f5
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- ((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) |- (((((s_flag_list L) (((((ntrans L) N) r) x) i)) r1) x) = T)
T c==> cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 c= cs_flag_list f0 cntrans f0 f1 f2 f3 f4 f5 f3 cT
- ((((((rtrans L) N) r) x) i) = r1) |- (((((((rtrans L) N) r) x) i) = r1) /\ (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c/\ c= crtrans f0 f1 f2 f3 f4 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0
- |- (!z1. (((\z1. (((prev_el r1) z) = z1)) z1) ==> (?z1. (((prev_el r1) z) = z1))))
T c==> * / c= cprev_el f0 f1 b0 f2 c? / c= cprev_el f0 f1 b0
- ((\z1. (((prev_el r1) z) = z1)) z1) |- (((((prev_el r1) z) = z1) ==> (?z1. (((prev_el r1) z) = z1))) = (?z1. (((prev_el r1) z) = z1)))
T c==> * / c= cprev_el f0 f1 b0 f2 c= c==> c= cprev_el f0 f1 f2 c? / c= cprev_el f0 f1 b0 c? / c= cprev_el f0 f1 b0
- |- ((((prev_el r1) z) = z1) = ((\z1. (((prev_el r1) z) = z1)) z1))
T c= c= cprev_el f0 f1 f2 * / c= cprev_el f0 f1 b0 f2
- |- (((!x. (((\z1. (((prev_el r1) z) = z1)) x) ==> (?z1. (((prev_el r1) z) = z1)))) ==> ((?z1. (((prev_el r1) z) = z1)) ==> (?z1. (((prev_el r1) z) = z1)))) = ((?z1. (((prev_el r1) z) = z1)) ==> (?z1. (((prev_el r1) z) = z1))))
T c= c==> ! c==> * / c= cprev_el f0 f1 b1 b0 c? / c= cprev_el f0 f1 b1 c==> c? / c= cprev_el f0 f1 b0 c? / c= cprev_el f0 f1 b0 c==> c? / c= cprev_el f0 f1 b0 c? / c= cprev_el f0 f1 b0
- |- (((((((ztrans L) N) r) x) i) = z) ==> (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> c= cztrans f0 f1 f2 f3 f4 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0
- |- (((((((rtrans L) N) r) x) i) = r1) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0
- ((all (loop_list L)) (((((ntrans L) N) r) x) i)) |- (((all (loop_list L)) (((((ntrans L) N) r) x) i)) = T)
T c==> call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 c= call * part cloop_list f0 cntrans f0 f1 f2 f3 f4 cT
- |- (!r1. (((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1))))
T c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0
- ((\z. ((((((ztrans L) N) r) x) i) = z)) z) |- (((\z. ((((((ztrans L) N) r) x) i) = z)) z) /\ (?z. ((((((ztrans L) N) r) x) i) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c/\ * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0
- ((\z1. (((prev_el r1) z) = z1)) z1) |- (((\z1. (((prev_el r1) z) = z1)) z1) /\ (?z1. (((prev_el r1) z) = z1)))
T c==> * / c= cprev_el f0 f1 b0 f2 c/\ * / c= cprev_el f0 f1 b0 f2 c? / c= cprev_el f0 f1 b0
- (((prev_el r1) z) = z1) |- ((((prev_el r1) z) = z1) /\ (?z1. (((prev_el r1) z) = z1)))
T c==> c= cprev_el f0 f1 f2 c/\ c= cprev_el f0 f1 f2 c? / c= cprev_el f0 f1 b0
- |- (((\f2. (f f2)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((((\z. ((((((ztrans L) N) r) x) i) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) i) = z))) = T)
T c= c==> * / c= cztrans f0 f1 f2 f3 f4 b0 f5 c? / c= cztrans f0 f1 f2 f3 f4 b0 cT
- ((\r1. ((((((rtrans L) N) r) x) i) = r1)) r1) |- ((((((((rtrans L) N) r) x) i) = r1) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1))) = (?r1. ((((((rtrans L) N) r) x) i) = r1)))
T c==> * / c= crtrans f0 f1 f2 f3 f4 b0 f5 c= c==> c= crtrans f0 f1 f2 f3 f4 f5 c? / c= crtrans f0 f1 f2 f3 f4 b0 c? / c= crtrans f0 f1 f2 f3 f4 b0
- ((((((rtrans L) N) r) x) i) = r1), ((((marked_list L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) |- ((((marked_list L) (((((ntrans L) N) r) x) i)) r1) x)
T c==> c= crtrans f0 f1 f2 f3 f4 f5 c==> cmarked_list f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cmarked_list f0 cntrans f0 f1 f2 f3 f4 f5 f3
- |- (((!x. (((\r1. ((((((rtrans L) N) r) x) i) = r1)) x) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1)))) ==> ((?r1. ((((((rtrans L) N) r) x) i) = r1)) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1)))) = ((?r1. ((((((rtrans L) N) r) x) i) = r1)) ==> (?r1. ((((((rtrans L) N) r) x) i) = r1))))
T c= c==> ! c==> * / c= crtrans f0 f1 f2 f3 f4 b1 b0 c? / c= crtrans f0 f1 f2 f3 f4 b1 c==> c? / c= crtrans f0 f1 f2 f3 f4 b0 c? / c= crtrans f0 f1 f2 f3 f4 b0 c==> c? / c= crtrans f0 f1 f2 f3 f4 b0 c? / c= crtrans f0 f1 f2 f3 f4 b0
- ((\y. ((((l'y L) r1) x) = y)) y) |- (((\y. ((((l'y L) r1) x) = y)) y) /\ (?y. ((((l'y L) r1) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c/\ * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- ((normal_list L) (((((ntrans L) N) r) x) i)) |- (((normal_list L) (((((ntrans L) N) r) x) i)) = T)
T c==> cnormal_list f0 cntrans f0 f1 f2 f3 f4 c= cnormal_list f0 cntrans f0 f1 f2 f3 f4 cT
- ((((l'y L) r1) x) = y) |- (((((l'y L) r1) x) = y) /\ (?y. ((((l'y L) r1) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c/\ c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- |- ((((prev_el r1) z) = z1) ==> (?z1. (((prev_el r1) z) = z1)))
T c==> c= cprev_el f0 f1 f2 c? / c= cprev_el f0 f1 b0
- ((MEM x) r1) |- (((MEM x) r1) = T)
T c==> cMEM f0 f1 c= cMEM f0 f1 cT
