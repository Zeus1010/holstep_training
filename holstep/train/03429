N Trigonometry2.ORTHONORMAL_IMP_SPANNING
C |- (!e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))))
T c==> corthonormal f0 f1 f2 c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
D TRUTH
A |- T
T cT
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_EQ
A |- ((!m. (!n. (((NUMERAL m) = (NUMERAL n)) = (m = n)))) /\ (((_0 = _0) = T) /\ ((!n. (((BIT0 n) = _0) = (n = _0))) /\ ((!n. (((BIT1 n) = _0) = F)) /\ ((!n. ((_0 = (BIT0 n)) = (_0 = n))) /\ ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))))))))))))
T c/\ ! ! c= c= cNUMERAL b0 cNUMERAL b1 c= b0 b1 c/\ c= c= c_0 c_0 cT c/\ ! c= c= cBIT0 b0 c_0 c= b0 c_0 c/\ ! c= c= cBIT1 b0 c_0 cF c/\ ! c= c= c_0 cBIT0 b0 c= c_0 b0 c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
D IN
A |- (!P. (!x. ((x IN P) = (P x))))
T c= cIN f0 f1 * f1 f0
D EXTENSION
A |- (!s. (!t. ((s = t) = (!x. ((x IN s) = (x IN t))))))
T c= c= f0 f1 ! c= cIN b0 f0 cIN b0 f1
D SUBSET
A |- (!s. (!t. ((s SUBSET t) = (!x. ((x IN s) ==> (x IN t))))))
T c= cSUBSET f0 f1 ! c==> cIN b0 f0 cIN b0 f1
D NOT_IN_EMPTY
A |- (!x. (~ (x IN EMPTY)))
T c~ cIN f0 part cEMPTY
D IN_UNIV
A |- (!x. (x IN UNIV))
T cIN f0 part cUNIV
D IN_INSERT
A |- (!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))))
T c= cIN f0 * * part cINSERT f1 f2 c\/ c= f0 f1 cIN f0 f2
D SUBSET_UNIV
A |- (!s. (s SUBSET UNIV))
T cSUBSET f0 part cUNIV
D FINITE_EMPTY
A |- (FINITE EMPTY)
T cFINITE part cEMPTY
D FINITE_INSERT
A |- (!s. (!x. ((FINITE (x INSERT s)) = (FINITE s))))
T c= cFINITE * * part cINSERT f0 f1 cFINITE f1
D Oxl_2012.CARD_INSERT
A |- (!x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))))
T c==> cFINITE f0 c= cCARD * * part cINSERT f1 f0 cCOND cIN f1 f0 cCARD f0 cSUC cCARD f0
D Oxl_2012.CARD_EMPTY
A |- ((CARD EMPTY) = (NUMERAL _0))
T c= cCARD part cEMPTY cNUMERAL c_0
D HAS_SIZE
A |- (!s. (!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))))
T c= cHAS_SIZE f0 f1 c/\ cFINITE f0 c= cCARD f0 f1
D DIMINDEX_3
A |- ((dimindex UNIV) = (NUMERAL (BIT1 (BIT1 _0))))
T c= cdimindex part cUNIV cNUMERAL cBIT1 cBIT1 c_0
D DIM_UNIV
A |- ((dim UNIV) = (dimindex UNIV))
T c= cdim part cUNIV cdimindex part cUNIV
D CARD_EQ_DIM
A |- (!v. (!b. (((b SUBSET v) /\ (b HAS_SIZE (dim v))) ==> ((independent b) = (v SUBSET (span b))))))
T c==> c/\ cSUBSET f0 f1 cHAS_SIZE f0 cdim f1 c= cindependent f0 cSUBSET f1 * part cspan f0
D Trigonometry2.ORTHONORMAL_IMP_DISTINCT
A |- (!e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3))))))))
T c==> corthonormal f0 f1 f2 c/\ c~ c= f0 f1 c/\ c~ c= f0 f2 c~ c= f1 f2
D ORTHONORMAL_IMP_INDEPENDENT
A |- (!e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))))
T c==> corthonormal f0 f1 f2 cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- (((orthonormal e1) e2) e3) |- ((e3 = e1) = F)
T c==> corthonormal f0 f1 f2 c= c= f2 f0 cF
- |- ((\m. (!n. (((BIT0 m) <= (BIT0 n)) = (m <= n)))) m)
T * / ! c= c<= cBIT0 b0 cBIT0 b1 c<= b0 b1 f0
- |- (((!n. (((BIT0 n) + _0) = (BIT0 n))) ==> ((\n. (((BIT0 n) + _0) = (BIT0 n))) n)) = ((\n. (((BIT0 n) + _0) = (BIT0 n))) n))
T c= c==> ! c= c+ cBIT0 b0 c_0 cBIT0 b0 * / c= c+ cBIT0 b0 c_0 cBIT0 b0 f0 * / c= c+ cBIT0 b0 c_0 cBIT0 b0 f0
- |- (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))
T c= cEXP cBIT0 f0 cBIT0 f1 c* cEXP cBIT0 f0 f1 cEXP cBIT0 f0 f1
- |- (((!m. (!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m)))) ==> ((\m. (!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m)))) m)) = ((\m. (!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m)))) m))
T c= c==> ! ! c= c>= cNUMERAL b1 cNUMERAL b0 c>= b1 b0 * / ! c= c>= cNUMERAL b1 cNUMERAL b0 c>= b1 b0 f0 * / ! c= c>= cNUMERAL b1 cNUMERAL b0 c>= b1 b0 f0
- |- ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))))))
T c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
- |- (((!n. (((BIT1 n) * _0) = _0)) ==> ((\n. (((BIT1 n) * _0) = _0)) n)) = ((\n. (((BIT1 n) * _0) = _0)) n))
T c= c==> ! c= c* cBIT1 b0 c_0 c_0 * / c= c* cBIT1 b0 c_0 c_0 f0 * / c= c* cBIT1 b0 c_0 c_0 f0
+ |- ((((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) t') e'))))) = ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) t') e')))))
T c= c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c==> c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 f4 c==> c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 f4
+ |- ((\e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3))))))) e2)
T * / ! c==> corthonormal f0 b0 b1 c/\ c~ c= f0 b0 c/\ c~ c= f0 b1 c~ c= b0 b1 f1
- |- (((BIT0 m) = (BIT1 n)) = F)
T c= c= cBIT0 f0 cBIT1 f1 cF
- |- (((!n. (((BIT0 n) * _0) = _0)) ==> ((\n. (((BIT0 n) * _0) = _0)) n)) = ((\n. (((BIT0 n) * _0) = _0)) n))
T c= c==> ! c= c* cBIT0 b0 c_0 c_0 * / c= c* cBIT0 b0 c_0 c_0 f0 * / c= c* cBIT0 b0 c_0 c_0 f0
- |- (((!n. ((BIT1 n) > _0)) ==> ((\n. ((BIT1 n) > _0)) n)) = ((\n. ((BIT1 n) > _0)) n))
T c= c==> ! c> cBIT1 b0 c_0 * / c> cBIT1 b0 c_0 f0 * / c> cBIT1 b0 c_0 f0
- |- (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n)))
T c= c+ cBIT0 f0 cBIT1 f1 cBIT1 c+ f0 f1
+ |- (((!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = p') ==> ((p' ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (p' ==> q'))))) ==> ((\q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = p') ==> ((p' ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (p' ==> q'))))) q')) = ((\q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = p') ==> ((p' ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 * / c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4 * / c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4
+ |- ((SUC _0) = (BIT1 _0))
T c= cSUC c_0 cBIT1 c_0
- |- (((!m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) ==> ((\m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) m)) = ((\m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) m))
T c= c==> ! ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 * / ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 f0 * / ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 f0
- |- ((_0 <= (BIT0 n)) = T)
T c= c<= c_0 cBIT0 f0 cT
- |- (((BIT1 m) = (BIT0 n)) = F)
T c= c= cBIT1 f0 cBIT0 f1 cF
- |- ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m)))))))
T c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
+ |- (((!x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) ==> ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x)) = ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x))
T c= c==> ! ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0 * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0
- |- (((PRE _0) = _0) /\ ((!n. ((PRE (BIT0 n)) = (((COND (n = _0)) _0) (BIT1 (PRE n))))) /\ (!n. ((PRE (BIT1 n)) = (BIT0 n)))))
T c/\ c= cPRE c_0 c_0 c/\ ! c= cPRE cBIT0 b0 cCOND c= b0 c_0 c_0 cBIT1 cPRE b0 ! c= cPRE cBIT1 b0 cBIT0 b0
- |- (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n))))
T c= c* cBIT0 f0 cBIT0 f1 cBIT0 cBIT0 c* f0 f1
- |- (((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e')))
T c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2
+ |- ((!n. (((BIT1 n) = _0) = F)) /\ ((!n. ((_0 = (BIT0 n)) = (_0 = n))) /\ ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n))))))))))
T c/\ ! c= c= cBIT1 b0 c_0 cF c/\ ! c= c= c_0 cBIT0 b0 c= c_0 b0 c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- (((BIT1 m) < (BIT0 n)) = (m < n))
T c= c< cBIT1 f0 cBIT0 f1 c< f0 f1
+ |- (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
- |- ((\m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) m)
T * / ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 f0
+ |- ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))
T c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- (((!m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) ==> ((\m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) m)) = ((\m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) m))
T c= c==> ! ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 * / ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 f0 * / ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 f0
- |- ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))
T c= cEXP c_0 cBIT0 f0 c* cEXP c_0 f0 cEXP c_0 f0
+ |- ((\p'. (!q'. ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p')
T * / ! c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3
- |- (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n)))
T c= cEXP cNUMERAL f0 cNUMERAL f1 cNUMERAL cEXP f0 f1
+ |- (((!n. ((SUC (BIT0 n)) = (BIT1 n))) ==> ((\n. ((SUC (BIT0 n)) = (BIT1 n))) n)) = ((\n. ((SUC (BIT0 n)) = (BIT1 n))) n))
T c= c==> ! c= cSUC cBIT0 b0 cBIT1 b0 * / c= cSUC cBIT0 b0 cBIT1 b0 f0 * / c= cSUC cBIT0 b0 cBIT1 b0 f0
- |- ((!n. ((EVEN (BIT0 n)) = T)) /\ (!n. ((EVEN (BIT1 n)) = F)))
T c/\ ! c= cEVEN cBIT0 b0 cT ! c= cEVEN cBIT1 b0 cF
- |- (((!n. ((ODD (BIT0 n)) = F)) ==> ((\n. ((ODD (BIT0 n)) = F)) n)) = ((\n. ((ODD (BIT0 n)) = F)) n))
T c= c==> ! c= cODD cBIT0 b0 cF * / c= cODD cBIT0 b0 cF f0 * / c= cODD cBIT0 b0 cF f0
- |- ((\m. (((BIT1 m) EXP _0) = (BIT1 _0))) m)
T * / c= cEXP cBIT1 b0 c_0 cBIT1 c_0 f0
- |- (((!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))) ==> ((\n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))) n)) = ((\n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))) n))
T c= c==> ! c= cEXP cBIT1 f0 cBIT0 b0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 * / c= cEXP cBIT1 f0 cBIT0 b0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 f1 * / c= cEXP cBIT1 f0 cBIT0 b0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 f1
+ |- ((\t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 f2
- |- (((!n. ((_0 * (BIT0 n)) = _0)) ==> ((\n. ((_0 * (BIT0 n)) = _0)) n)) = ((\n. ((_0 * (BIT0 n)) = _0)) n))
T c= c==> ! c= c* c_0 cBIT0 b0 c_0 * / c= c* c_0 cBIT0 b0 c_0 f0 * / c= c* c_0 cBIT0 b0 c_0 f0
- |- (((!n. ((EVEN (BIT1 n)) = F)) ==> ((\n. ((EVEN (BIT1 n)) = F)) n)) = ((\n. ((EVEN (BIT1 n)) = F)) n))
T c= c==> ! c= cEVEN cBIT1 b0 cF * / c= cEVEN cBIT1 b0 cF f0 * / c= cEVEN cBIT1 b0 cF f0
- |- (((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) ==> ((\m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) m)) = ((\m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) m))
T c= c==> ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 * / ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 f0 * / ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 f0
- |- (((!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))) ==> ((\m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))) m)) = ((\m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))) m))
T c= c==> ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 * / ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 f0 * / ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 f0
+ |- ((\b. (((b SUBSET UNIV) /\ (b HAS_SIZE (dim UNIV))) ==> ((independent b) = (UNIV SUBSET (span b))))) (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))
T * / c==> c/\ cSUBSET b0 part cUNIV cHAS_SIZE b0 cdim part cUNIV c= cindependent b0 cSUBSET part cUNIV * part cspan b0 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((\n. (((BIT0 m) < (BIT0 n)) = (m < n))) n)
T * / c= c< cBIT0 f0 cBIT0 b0 c< f0 b0 f1
- |- ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- (((orthonormal e1) e2) e3) |- (~ (e2 = e1))
T c==> corthonormal f0 f1 f2 c~ c= f1 f0
- |- ((\n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n)))) n)
T * / c= c* cNUMERAL f0 cNUMERAL b0 cNUMERAL c* f0 b0 f1
- |- ((\n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) n)
T * / c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 f0
- |- ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))
T c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
+ |- ((\e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4
- |- ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))
T c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((!n. ((_0 >= (BIT0 n)) = (_0 >= n))) /\ ((!n. (~ (_0 >= (BIT1 n)))) /\ ((!n. ((BIT0 n) >= _0)) /\ ((!n. ((BIT1 n) >= _0)) /\ ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m)))))))))))
T c/\ ! c= c>= c_0 cBIT0 b0 c>= c_0 b0 c/\ ! c~ c>= c_0 cBIT1 b0 c/\ ! c>= cBIT0 b0 c_0 c/\ ! c>= cBIT1 b0 c_0 c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
- |- ((_0 < _0) = F)
T c= c< c_0 c_0 cF
- |- (((!n. (((BIT1 n) < _0) = F)) ==> ((\n. (((BIT1 n) < _0) = F)) n)) = ((\n. (((BIT1 n) < _0) = F)) n))
T c= c==> ! c= c< cBIT1 b0 c_0 cF * / c= c< cBIT1 b0 c_0 cF f0 * / c= c< cBIT1 b0 c_0 cF f0
+ |- ((!e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))) = T)
T c= ! ! c==> corthonormal f0 b0 b1 c= * part cspan * * part cINSERT f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY part cUNIV cT
+ |- (((!s. (!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n))))) ==> ((\s. (!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n))))) s)) = ((\s. (!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n))))) s))
T c= c==> ! ! c= cHAS_SIZE b0 b1 c/\ cFINITE b0 c= cCARD b0 b1 * / ! c= cHAS_SIZE b0 b1 c/\ cFINITE b0 c= cCARD b0 b1 f0 * / ! c= cHAS_SIZE b0 b1 c/\ cFINITE b0 c= cCARD b0 b1 f0
- |- ((_0 + (BIT0 n)) = (BIT0 n))
T c= c+ c_0 cBIT0 f0 cBIT0 f0
- (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))), ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) |- (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))
T c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- (!b. (((b SUBSET UNIV) /\ (b HAS_SIZE (dim UNIV))) ==> ((independent b) = (UNIV SUBSET (span b)))))
T c==> c/\ cSUBSET f0 part cUNIV cHAS_SIZE f0 cdim part cUNIV c= cindependent f0 cSUBSET part cUNIV * part cspan f0
- |- (((!g'. (!t'. (!e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f2 * / ! ! c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f2
+ |- ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))))))
T c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))
T c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
- |- ((\n. ((BIT0 n) >= _0)) n)
T * / c>= cBIT0 b0 c_0 f0
- |- (((BIT1 n) - _0) = (BIT1 n))
T c= c- cBIT1 f0 c_0 cBIT1 f0
- |- (((!n. ((_0 - (BIT0 n)) = _0)) ==> ((\n. ((_0 - (BIT0 n)) = _0)) n)) = ((\n. ((_0 - (BIT0 n)) = _0)) n))
T c= c==> ! c= c- c_0 cBIT0 b0 c_0 * / c= c- c_0 cBIT0 b0 c_0 f0 * / c= c- c_0 cBIT0 b0 c_0 f0
- (~ (e3 IN EMPTY)) |- ((e3 IN EMPTY) = F)
T c==> c~ cIN f0 part cEMPTY c= cIN f0 part cEMPTY cF
+ |- (((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) ==> ((\n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) n)) = ((\n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) n))
T c= c==> ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 * / c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 f0 * / c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 f0
- |- ((\m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) m)
T * / ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
- |- ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))))))))))
T c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
+ (((orthonormal e1) e2) e3) |- (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c==> corthonormal f0 f1 f2 c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x)
T * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0
- |- (((!n. (((BIT1 n) <= _0) = F)) ==> ((\n. (((BIT1 n) <= _0) = F)) n)) = ((\n. (((BIT1 n) <= _0) = F)) n))
T c= c==> ! c= c<= cBIT1 b0 c_0 cF * / c= c<= cBIT1 b0 c_0 cF f0 * / c= c<= cBIT1 b0 c_0 cF f0
- |- ((\n. (((BIT1 n) >= (BIT1 m)) = (n >= m))) n)
T * / c= c>= cBIT1 b0 cBIT1 f0 c>= b0 f0 f1
+ |- ((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))))
T c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m)))))))
T c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
- |- ((\n. (~ (_0 >= (BIT1 n)))) n)
T * / c~ c>= c_0 cBIT1 b0 f0
- |- ((\e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))) e')
T * / c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 b0 f4
- |- (((!n. ((_0 + (BIT0 n)) = (BIT0 n))) ==> ((\n. ((_0 + (BIT0 n)) = (BIT0 n))) n)) = ((\n. ((_0 + (BIT0 n)) = (BIT0 n))) n))
T c= c==> ! c= c+ c_0 cBIT0 b0 cBIT0 b0 * / c= c+ c_0 cBIT0 b0 cBIT0 b0 f0 * / c= c+ c_0 cBIT0 b0 cBIT0 b0 f0
- |- (((!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0))) ==> ((\n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0))) n)) = ((\n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0))) n))
T c= c==> ! c= c- cBIT1 f0 cBIT0 b0 cCOND c<= b0 f0 cBIT1 c- f0 b0 c_0 * / c= c- cBIT1 f0 cBIT0 b0 cCOND c<= b0 f0 cBIT1 c- f0 b0 c_0 f1 * / c= c- cBIT1 f0 cBIT0 b0 cCOND c<= b0 f0 cBIT1 c- f0 b0 c_0 f1
- |- (((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) ==> ((\m. (!n. (((BIT1 m) = (BIT0 n)) = F))) m)) = ((\m. (!n. (((BIT1 m) = (BIT0 n)) = F))) m))
T c= c==> ! ! c= c= cBIT1 b0 cBIT0 b1 cF * / ! c= c= cBIT1 b0 cBIT0 b1 cF f0 * / ! c= c= cBIT1 b0 cBIT0 b1 cF f0
- |- ((\n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0))) n)
T * / c= c- cBIT1 f0 cBIT0 b0 cCOND c<= b0 f0 cBIT1 c- f0 b0 c_0 f1
+ |- ((SUC (BIT1 n)) = (BIT0 (SUC n)))
T c= cSUC cBIT1 f0 cBIT0 cSUC f0
+ |- ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> q')))) = (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> q'))))
T c= c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f3 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f3 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3
- |- (((BIT1 m) < (BIT1 n)) = (m < n))
T c= c< cBIT1 f0 cBIT1 f1 c< f0 f1
+ |- ((\p'. (!q'. ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q')))))) p')
T * / ! c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((\m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) m)
T * / ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 f0
+ |- (((!e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e')))))) ==> ((\e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e')))))) e')) = ((\e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 f5 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 f5
- |- (((!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))) ==> ((\m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))) m)) = ((\m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))) m))
T c= c==> ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 * / ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0 * / ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
- |- (((!g'. (!t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f1 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f1
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- |- ((NUMERAL (NUMERAL _0)) = (NUMERAL _0))
T c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0
- (e3 IN EMPTY) |- ((e3 IN EMPTY) /\ ((NUMERAL _0) = (NUMERAL _0)))
T c==> cIN f0 part cEMPTY c/\ cIN f0 part cEMPTY c= cNUMERAL c_0 cNUMERAL c_0
- |- (((!n. ((PRE (BIT1 n)) = (BIT0 n))) ==> ((\n. ((PRE (BIT1 n)) = (BIT0 n))) n)) = ((\n. ((PRE (BIT1 n)) = (BIT0 n))) n))
T c= c==> ! c= cPRE cBIT1 b0 cBIT0 b0 * / c= cPRE cBIT1 b0 cBIT0 b0 f0 * / c= cPRE cBIT1 b0 cBIT0 b0 f0
+ |- ((\p'. (!q'. (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p')
T * / ! c==> c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3
- |- (((!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n)))) ==> ((\n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n)))) n)) = ((\n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n)))) n))
T c= c==> ! c= c+ cNUMERAL f0 cNUMERAL b0 cNUMERAL c+ f0 b0 * / c= c+ cNUMERAL f0 cNUMERAL b0 cNUMERAL c+ f0 b0 f1 * / c= c+ cNUMERAL f0 cNUMERAL b0 cNUMERAL c+ f0 b0 f1
+ |- ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))
T c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f4 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 f4
- |- (((BIT1 m) <= (BIT1 n)) = (m <= n))
T c= c<= cBIT1 f0 cBIT1 f1 c<= f0 f1
- |- (((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) ==> (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))) = (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e'))))
T c= c==> c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
+ (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) |- ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) /\ (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
- |- (((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) ==> ((\m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) m)) = ((\m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) m))
T c= c==> ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 * / ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 f0 * / ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 f0
+ |- (((FINITE EMPTY) ==> ((CARD (e3 INSERT EMPTY)) = (((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))))) = ((CARD (e3 INSERT EMPTY)) = (((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY)))))
T c= c==> cFINITE part cEMPTY c= cCARD * * part cINSERT f0 part cEMPTY cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY c= cCARD * * part cINSERT f0 part cEMPTY cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY
- |- (((EVEN _0) = T) /\ ((!n. ((EVEN (BIT0 n)) = T)) /\ (!n. ((EVEN (BIT1 n)) = F))))
T c/\ c= cEVEN c_0 cT c/\ ! c= cEVEN cBIT0 b0 cT ! c= cEVEN cBIT1 b0 cF
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- |- (((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) ==> ((\m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) m)) = ((\m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) m))
T c= c==> ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 * / ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0 * / ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
+ |- (((!p'. (!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) ==> ((\p'. (!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 * / ! c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3 * / ! c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3
- |- ((\n. (((BIT0 m) <= (BIT0 n)) = (m <= n))) n)
T * / c= c<= cBIT0 f0 cBIT0 b0 c<= f0 b0 f1
+ |- ((FINITE EMPTY) = T)
T c= cFINITE part cEMPTY cT
- |- ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) t') e'))))
T c==> c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 f4
- |- ((((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c= c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((NUMERAL n) > (NUMERAL m)) = (n > m))
T c= c> cNUMERAL f0 cNUMERAL f1 c> f0 f1
+ |- (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 f4
- |- ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))
T c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
- |- (((BIT0 m) < (BIT0 n)) = (m < n))
T c= c< cBIT0 f0 cBIT0 f1 c< f0 f1
- ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) |- (((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) /\ ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c/\ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((PRE (NUMERAL n)) = (NUMERAL (PRE n)))
T c= cPRE cNUMERAL f0 cNUMERAL cPRE f0
+ (((orthonormal e1) e2) e3) |- (((~ (e2 = e3)) ==> ((e2 = e3) = F)) = ((e2 = e3) = F))
T c==> corthonormal f0 f1 f2 c= c==> c~ c= f1 f2 c= c= f1 f2 cF c= c= f1 f2 cF
+ |- ((!x. ((x IN UNIV) ==> (x IN (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> (!x. ((x IN (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (x IN UNIV))))
T c==> ! c==> cIN b0 part cUNIV cIN b0 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY ! c= cIN b0 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cIN b0 part cUNIV
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ |- (((!e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e')))))) ==> ((\e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e')))))) e')) = ((\e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4
- |- (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))
T c= c+ cBIT1 f0 cBIT1 f1 cBIT0 cSUC c+ f0 f1
- |- (((!n. ((_0 EXP (BIT1 n)) = _0)) ==> ((\n. ((_0 EXP (BIT1 n)) = _0)) n)) = ((\n. ((_0 EXP (BIT1 n)) = _0)) n))
T c= c==> ! c= cEXP c_0 cBIT1 b0 c_0 * / c= cEXP c_0 cBIT1 b0 c_0 f0 * / c= cEXP c_0 cBIT1 b0 c_0 f0
- |- ((!x. t) = t)
T c= ! f0 f0
- |- ((_0 >= (BIT0 n)) = (_0 >= n))
T c= c>= c_0 cBIT0 f0 c>= c_0 f0
+ |- (T = (FINITE EMPTY))
T c= cT cFINITE part cEMPTY
- |- ((((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))
T c= c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((_0 = _0) = T) /\ ((!n. (((BIT0 n) = _0) = (n = _0))) /\ ((!n. (((BIT1 n) = _0) = F)) /\ ((!n. ((_0 = (BIT0 n)) = (_0 = n))) /\ ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n))))))))))))
T c/\ c= c= c_0 c_0 cT c/\ ! c= c= cBIT0 b0 c_0 c= b0 c_0 c/\ ! c= c= cBIT1 b0 c_0 cF c/\ ! c= c= c_0 cBIT0 b0 c= c_0 b0 c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- (((BIT0 n) - _0) = (BIT0 n))
T c= c- cBIT0 f0 c_0 cBIT0 f0
- |- (((!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) ==> ((\n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) n)) = ((\n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) n))
T c= c==> ! c= cEXP cBIT0 f0 cBIT1 b0 c* cBIT0 f0 c* cEXP cBIT0 f0 b0 cEXP cBIT0 f0 b0 * / c= cEXP cBIT0 f0 cBIT1 b0 c* cBIT0 f0 c* cEXP cBIT0 f0 b0 cEXP cBIT0 f0 b0 f1 * / c= cEXP cBIT0 f0 cBIT1 b0 c* cBIT0 f0 c* cEXP cBIT0 f0 b0 cEXP cBIT0 f0 b0 f1
- |- ((\m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) m)
T * / ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 f0
- |- (((BIT1 n) <= _0) = F)
T c= c<= cBIT1 f0 c_0 cF
+ |- (FINITE (e2 INSERT (e3 INSERT EMPTY)))
T cFINITE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- (((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))))
T c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
+ |- ((\p'. (!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = p') ==> ((p' ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (p' ==> q')))))) p')
T * / ! c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV b0 c==> c==> b0 c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3
+ |- ((\n. (((NUMERAL m) = (NUMERAL n)) = (m = n))) n)
T * / c= c= cNUMERAL f0 cNUMERAL b0 c= f0 b0 f1
+ |- ((\n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))) n)
T * / c= cHAS_SIZE f0 b0 c/\ cFINITE f0 c= cCARD f0 b0 f1
- |- ((\n. (((NUMERAL m) <= (NUMERAL n)) = (m <= n))) n)
T * / c= c<= cNUMERAL f0 cNUMERAL b0 c<= f0 b0 f1
- |- ((\n. ((EVEN (BIT0 n)) = T)) n)
T * / c= cEVEN cBIT0 b0 cT f0
- |- ((_0 + _0) = _0)
T c= c+ c_0 c_0 c_0
- |- (((!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n)))) ==> ((\n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n)))) n)) = ((\n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n)))) n))
T c= c==> ! c= c+ cBIT0 f0 cBIT1 b0 cBIT1 c+ f0 b0 * / c= c+ cBIT0 f0 cBIT1 b0 cBIT1 c+ f0 b0 f1 * / c= c+ cBIT0 f0 cBIT1 b0 cBIT1 c+ f0 b0 f1
- |- ((!n. (~ (_0 >= (BIT1 n)))) /\ ((!n. ((BIT0 n) >= _0)) /\ ((!n. ((BIT1 n) >= _0)) /\ ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m))))))))))
T c/\ ! c~ c>= c_0 cBIT1 b0 c/\ ! c>= cBIT0 b0 c_0 c/\ ! c>= cBIT1 b0 c_0 c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
- |- ((_0 * (BIT0 n)) = _0)
T c= c* c_0 cBIT0 f0 c_0
- |- (((!n. (((BIT0 n) > (BIT1 m)) = (n > m))) ==> ((\n. (((BIT0 n) > (BIT1 m)) = (n > m))) n)) = ((\n. (((BIT0 n) > (BIT1 m)) = (n > m))) n))
T c= c==> ! c= c> cBIT0 b0 cBIT1 f0 c> b0 f0 * / c= c> cBIT0 b0 cBIT1 f0 c> b0 f0 f1 * / c= c> cBIT0 b0 cBIT1 f0 c> b0 f0 f1
- |- (((BIT0 n) >= (BIT0 m)) = (n >= m))
T c= c>= cBIT0 f0 cBIT0 f1 c>= f0 f1
- |- (((BIT0 m) <= (BIT1 n)) = (m <= n))
T c= c<= cBIT0 f0 cBIT1 f1 c<= f0 f1
- |- ((\m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) m)
T * / ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 f0
- |- (((!n. ((_0 * (BIT1 n)) = _0)) ==> ((\n. ((_0 * (BIT1 n)) = _0)) n)) = ((\n. ((_0 * (BIT1 n)) = _0)) n))
T c= c==> ! c= c* c_0 cBIT1 b0 c_0 * / c= c* c_0 cBIT1 b0 c_0 f0 * / c= c* c_0 cBIT1 b0 c_0 f0
- |- ((\m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) m)
T * / ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 f0
+ |- ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))) = (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))))
T c= c==> c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
- |- ((EVEN (BIT1 n)) = F)
T c= cEVEN cBIT1 f0 cF
+ |- ((\q'. ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))) q')
T * / c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4
- |- ((\m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) m)
T * / ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 f0
- |- ((PRE _0) = _0)
T c= cPRE c_0 c_0
- |- (((!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) ==> ((\e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) e')) = ((\e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 f3 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 f3
- |- ((\n. (((BIT0 m) < (BIT1 n)) = (m <= n))) n)
T * / c= c< cBIT0 f0 cBIT1 b0 c<= f0 b0 f1
- |- ((\n. ((BIT1 n) > _0)) n)
T * / c> cBIT1 b0 c_0 f0
- |- (((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) ==> ((\m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) m)) = ((\m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) m))
T c= c==> ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 * / ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 f0 * / ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 f0
- |- (((!n. ((BIT1 n) >= _0)) ==> ((\n. ((BIT1 n) >= _0)) n)) = ((\n. ((BIT1 n) >= _0)) n))
T c= c==> ! c>= cBIT1 b0 c_0 * / c>= cBIT1 b0 c_0 f0 * / c>= cBIT1 b0 c_0 f0
- |- (((!n. (((BIT1 n) > (BIT0 m)) = (n >= m))) ==> ((\n. (((BIT1 n) > (BIT0 m)) = (n >= m))) n)) = ((\n. (((BIT1 n) > (BIT0 m)) = (n >= m))) n))
T c= c==> ! c= c> cBIT1 b0 cBIT0 f0 c>= b0 f0 * / c= c> cBIT1 b0 cBIT0 f0 c>= b0 f0 f1 * / c= c> cBIT1 b0 cBIT0 f0 c>= b0 f0 f1
- |- (((~ (e3 IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) e')))
T c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
+ |- (((!t'. (!e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 f4 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 f4
- |- ((_0 > (BIT0 n)) = F)
T c= c> c_0 cBIT0 f0 cF
- |- (((!n. (((BIT1 n) - _0) = (BIT1 n))) ==> ((\n. (((BIT1 n) - _0) = (BIT1 n))) n)) = ((\n. (((BIT1 n) - _0) = (BIT1 n))) n))
T c= c==> ! c= c- cBIT1 b0 c_0 cBIT1 b0 * / c= c- cBIT1 b0 c_0 cBIT1 b0 f0 * / c= c- cBIT1 b0 c_0 cBIT1 b0 f0
- |- (((!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n)))))) ==> ((\n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n)))))) n)) = ((\n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n)))))) n))
T c= c==> ! c= c* cBIT1 f0 cBIT0 b0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 * / c= c* cBIT1 f0 cBIT0 b0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1 * / c= c* cBIT1 f0 cBIT0 b0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1
- |- ((EVEN _0) = T)
T c= cEVEN c_0 cT
- |- (((!m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) ==> ((\m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) m)) = ((\m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) m))
T c= c==> ! ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 * / ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 f0 * / ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 f0
- |- ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))))))
T c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
- |- ((\n. (((BIT1 n) > (BIT1 m)) = (n > m))) n)
T * / c= c> cBIT1 b0 cBIT1 f0 c> b0 f0 f1
- |- (((!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))) ==> ((\m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))) m)) = ((\m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))) m))
T c= c==> ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1 * / ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1 f0 * / ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1 f0
+ (((orthonormal e1) e2) e3) |- ((e1 = e2) = F)
T c==> corthonormal f0 f1 f2 c= c= f0 f1 cF
+ |- ((\p'. (!q'. (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p')
T * / ! c==> c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3
- |- (((!n. (((BIT0 n) > _0) = (n > _0))) ==> ((\n. (((BIT0 n) > _0) = (n > _0))) n)) = ((\n. (((BIT0 n) > _0) = (n > _0))) n))
T c= c==> ! c= c> cBIT0 b0 c_0 c> b0 c_0 * / c= c> cBIT0 b0 c_0 c> b0 c_0 f0 * / c= c> cBIT0 b0 c_0 c> b0 c_0 f0
- |- ((_0 = (BIT1 n)) = F)
T c= c= c_0 cBIT1 f0 cF
- |- (((!n. (~ (_0 > (BIT0 n)))) ==> ((\n. (~ (_0 > (BIT0 n)))) n)) = ((\n. (~ (_0 > (BIT0 n)))) n))
T c= c==> ! c~ c> c_0 cBIT0 b0 * / c~ c> c_0 cBIT0 b0 f0 * / c~ c> c_0 cBIT0 b0 f0
+ |- ((\p'. (!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p')
T * / ! c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3
+ |- (((!v. (!b. (((b SUBSET v) /\ (b HAS_SIZE (dim v))) ==> ((independent b) = (v SUBSET (span b)))))) ==> ((\v. (!b. (((b SUBSET v) /\ (b HAS_SIZE (dim v))) ==> ((independent b) = (v SUBSET (span b)))))) UNIV)) = ((\v. (!b. (((b SUBSET v) /\ (b HAS_SIZE (dim v))) ==> ((independent b) = (v SUBSET (span b)))))) UNIV))
T c= c==> ! ! c==> c/\ cSUBSET b1 b0 cHAS_SIZE b1 cdim b0 c= cindependent b1 cSUBSET b0 * part cspan b1 * / ! c==> c/\ cSUBSET b1 b0 cHAS_SIZE b1 cdim b0 c= cindependent b1 cSUBSET b0 * part cspan b1 part cUNIV * / ! c==> c/\ cSUBSET b1 b0 cHAS_SIZE b1 cdim b0 c= cindependent b1 cSUBSET b0 * part cspan b1 part cUNIV
+ |- ((SUC (BIT0 n)) = (BIT1 n))
T c= cSUC cBIT0 f0 cBIT1 f0
- (((orthonormal e1) e2) e3) |- ((e2 = e1) = F)
T c==> corthonormal f0 f1 f2 c= c= f1 f0 cF
- |- ((\n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m))) n)
T * / c= c>= cNUMERAL b0 cNUMERAL f0 c>= b0 f0 f1
- |- ((\n. ((_0 = (BIT1 n)) = F)) n)
T * / c= c= c_0 cBIT1 b0 cF f0
- |- ((\n. (((BIT1 n) - _0) = (BIT1 n))) n)
T * / c= c- cBIT1 b0 c_0 cBIT1 b0 f0
- |- (((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) ==> ((\m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) m)) = ((\m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) m))
T c= c==> ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 * / ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0 * / ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
- |- ((!n. (((BIT1 n) <= _0) = F)) /\ ((!n. ((_0 <= (BIT0 n)) = T)) /\ ((!n. ((_0 <= (BIT1 n)) = T)) /\ ((!m. (!n. (((BIT0 m) <= (BIT0 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT0 m) <= (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n))))))))))
T c/\ ! c= c<= cBIT1 b0 c_0 cF c/\ ! c= c<= c_0 cBIT0 b0 cT c/\ ! c= c<= c_0 cBIT1 b0 cT c/\ ! ! c= c<= cBIT0 b0 cBIT0 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1
- |- ((\n. ((BIT1 n) >= _0)) n)
T * / c>= cBIT1 b0 c_0 f0
+ |- (((!t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 f2 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 f2
- |- ((\m. (!n. (((BIT1 m) = (BIT0 n)) = F))) m)
T * / ! c= c= cBIT1 b0 cBIT0 b1 cF f0
- |- (((BIT0 n) > (BIT0 m)) = (n > m))
T c= c> cBIT0 f0 cBIT0 f1 c> f0 f1
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ |- ((((e2 = e3) \/ (e2 IN EMPTY)) ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) t') e'))))
T c==> c==> c\/ c= f0 f1 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY f2 c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND c\/ c= f0 f1 cIN f0 part cEMPTY f2 f3
+ |- ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> q')))
T c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3
- |- ((!m. (!n. (((BIT0 m) <= (BIT0 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT0 m) <= (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))))))
T c/\ ! ! c= c<= cBIT0 b0 cBIT0 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
- |- ((\n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) n)
T * / c= cEXP cBIT0 f0 cBIT1 b0 c* cBIT0 f0 c* cEXP cBIT0 f0 b0 cEXP cBIT0 f0 b0 f1
+ |- ((((e3 IN EMPTY) ==> ((CARD EMPTY) = (NUMERAL _0))) ==> (((~ (e3 IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) e')))) = (((~ (e3 IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) e'))))
T c= c==> c==> cIN f0 part cEMPTY c= cCARD part cEMPTY cNUMERAL c_0 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
- |- (((!m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) /\ (((_0 < _0) = F) /\ ((!n. (((BIT0 n) < _0) = F)) /\ ((!n. (((BIT1 n) < _0) = F)) /\ ((!n. ((_0 < (BIT0 n)) = (_0 < n))) /\ ((!n. ((_0 < (BIT1 n)) = T)) /\ ((!m. (!n. (((BIT0 m) < (BIT0 n)) = (m < n)))) /\ ((!m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) < (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) < (BIT1 n)) = (m < n))))))))))))) /\ (((!m. (!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m)))) /\ ((_0 >= _0) /\ ((!n. ((_0 >= (BIT0 n)) = (_0 >= n))) /\ ((!n. (~ (_0 >= (BIT1 n)))) /\ ((!n. ((BIT0 n) >= _0)) /\ ((!n. ((BIT1 n) >= _0)) /\ ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m))))))))))))) /\ (((!m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) /\ ((~ (_0 > _0)) /\ ((!n. (~ (_0 > (BIT0 n)))) /\ ((!n. (~ (_0 > (BIT1 n)))) /\ ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m))))))))))))) /\ ((!m. (!n. (((NUMERAL m) - (NUMERAL n)) = (NUMERAL (m - n))))) /\ (((_0 - _0) = _0) /\ ((!n. ((_0 - (BIT0 n)) = _0)) /\ ((!n. ((_0 - (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) - _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) - _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) /\ ((!m. (!n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n)))))) /\ ((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) /\ (!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))))))))))))))))
T c/\ c/\ ! ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 c/\ c= c< c_0 c_0 cF c/\ ! c= c< cBIT0 b0 c_0 cF c/\ ! c= c< cBIT1 b0 c_0 cF c/\ ! c= c< c_0 cBIT0 b0 c< c_0 b0 c/\ ! c= c< c_0 cBIT1 b0 cT c/\ ! ! c= c< cBIT0 b0 cBIT0 b1 c< b0 b1 c/\ ! ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c< cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c< cBIT1 b0 cBIT1 b1 c< b0 b1 c/\ c/\ ! ! c= c>= cNUMERAL b1 cNUMERAL b0 c>= b1 b0 c/\ c>= c_0 c_0 c/\ ! c= c>= c_0 cBIT0 b0 c>= c_0 b0 c/\ ! c~ c>= c_0 cBIT1 b0 c/\ ! c>= cBIT0 b0 c_0 c/\ ! c>= cBIT1 b0 c_0 c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0 c/\ c/\ ! ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 c/\ c~ c> c_0 c_0 c/\ ! c~ c> c_0 cBIT0 b0 c/\ ! c~ c> c_0 cBIT1 b0 c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0 c/\ ! ! c= c- cNUMERAL b0 cNUMERAL b1 cNUMERAL c- b0 b1 c/\ c= c- c_0 c_0 c_0 c/\ ! c= c- c_0 cBIT0 b0 c_0 c/\ ! c= c- c_0 cBIT1 b0 c_0 c/\ ! c= c- cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c- cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT0 b0 cBIT1 b1 cPRE cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1
- |- ((\n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n)))) n)
T * / c= cEXP cNUMERAL f0 cNUMERAL b0 cNUMERAL cEXP f0 b0 f1
+ |- ((\s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))) s)
T * / c==> cFINITE b0 c= cCARD * * part cINSERT f0 b0 cCOND cIN f0 b0 cCARD b0 cSUC cCARD b0 f1
+ |- ((\t'. (!e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 f4
- |- (((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) ==> ((\m. (!n. (((BIT0 m) = (BIT1 n)) = F))) m)) = ((\m. (!n. (((BIT0 m) = (BIT1 n)) = F))) m))
T c= c==> ! ! c= c= cBIT0 b0 cBIT1 b1 cF * / ! c= c= cBIT0 b0 cBIT1 b1 cF f0 * / ! c= c= cBIT0 b0 cBIT1 b1 cF f0
+ |- ((\e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3)))))))) e1)
T * / ! ! c==> corthonormal b0 b1 b2 c/\ c~ c= b0 b1 c/\ c~ c= b0 b2 c~ c= b1 b2 f0
- |- (((ODD _0) = F) /\ ((!n. ((ODD (BIT0 n)) = F)) /\ (!n. ((ODD (BIT1 n)) = T))))
T c/\ c= cODD c_0 cF c/\ ! c= cODD cBIT0 b0 cF ! c= cODD cBIT1 b0 cT
- |- (((!n. (((BIT1 n) > (BIT1 m)) = (n > m))) ==> ((\n. (((BIT1 n) > (BIT1 m)) = (n > m))) n)) = ((\n. (((BIT1 n) > (BIT1 m)) = (n > m))) n))
T c= c==> ! c= c> cBIT1 b0 cBIT1 f0 c> b0 f0 * / c= c> cBIT1 b0 cBIT1 f0 c> b0 f0 f1 * / c= c> cBIT1 b0 cBIT1 f0 c> b0 f0 f1
+ |- (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> q')))
T c==> c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f3 c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3
+ |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> q')))
T c==> c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f3 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3
+ |- ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))
T c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((~ (_0 > _0)) /\ ((!n. (~ (_0 > (BIT0 n)))) /\ ((!n. (~ (_0 > (BIT1 n)))) /\ ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m))))))))))))
T c/\ c~ c> c_0 c_0 c/\ ! c~ c> c_0 cBIT0 b0 c/\ ! c~ c> c_0 cBIT1 b0 c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0
- |- (((~ (_0 >= (BIT1 n))) ==> ((_0 >= (BIT1 n)) = F)) = ((_0 >= (BIT1 n)) = F))
T c= c==> c~ c>= c_0 cBIT1 f0 c= c>= c_0 cBIT1 f0 cF c= c>= c_0 cBIT1 f0 cF
+ |- ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))
T c= cSUC cNUMERAL f0 cNUMERAL cSUC f0
+ |- ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((BIT0 n) >= _0) = T)
T c= c>= cBIT0 f0 c_0 cT
+ |- (((!p'. (!q'. ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV b0 c==> c==> b0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 * / ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV b0 c==> c==> b0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3 * / ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV b0 c==> c==> b0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3
+ |- (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f5 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 f5
- |- ((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) /\ (!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))))
T c/\ ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1
+ |- ((\e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 f5
- |- (((!n. (((BIT1 n) = _0) = F)) ==> ((\n. (((BIT1 n) = _0) = F)) n)) = ((\n. (((BIT1 n) = _0) = F)) n))
T c= c==> ! c= c= cBIT1 b0 c_0 cF * / c= c= cBIT1 b0 c_0 cF f0 * / c= c= cBIT1 b0 c_0 cF f0
- |- (((((e2 = e3) \/ (e2 IN EMPTY)) = ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((((e2 = e3) \/ (e2 IN EMPTY)) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) t') e'))))) = ((((e2 = e3) \/ (e2 IN EMPTY)) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) t') e')))))
T c= c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY c\/ c= f0 f1 cIN f0 part cEMPTY c==> c==> c\/ c= f0 f1 cIN f0 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 cIN f0 part cEMPTY f2 f3 c==> c==> c\/ c= f0 f1 cIN f0 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 cIN f0 part cEMPTY f2 f3
+ |- ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((\m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) m)
T * / ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 f0
- |- (((!m. (!n. (((NUMERAL n) > (NUMERAL m)) = (n > m)))) /\ ((~ (_0 > _0)) /\ ((!n. (~ (_0 > (BIT0 n)))) /\ ((!n. (~ (_0 > (BIT1 n)))) /\ ((!n. (((BIT0 n) > _0) = (n > _0))) /\ ((!n. ((BIT1 n) > _0)) /\ ((!m. (!n. (((BIT0 n) > (BIT0 m)) = (n > m)))) /\ ((!m. (!n. (((BIT1 n) > (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) > (BIT1 m)) = (n > m))))))))))))) /\ ((!m. (!n. (((NUMERAL m) - (NUMERAL n)) = (NUMERAL (m - n))))) /\ (((_0 - _0) = _0) /\ ((!n. ((_0 - (BIT0 n)) = _0)) /\ ((!n. ((_0 - (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) - _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) - _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) /\ ((!m. (!n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n)))))) /\ ((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) /\ (!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))))))))))))))
T c/\ c/\ ! ! c= c> cNUMERAL b1 cNUMERAL b0 c> b1 b0 c/\ c~ c> c_0 c_0 c/\ ! c~ c> c_0 cBIT0 b0 c/\ ! c~ c> c_0 cBIT1 b0 c/\ ! c= c> cBIT0 b0 c_0 c> b0 c_0 c/\ ! c> cBIT1 b0 c_0 c/\ ! ! c= c> cBIT0 b1 cBIT0 b0 c> b1 b0 c/\ ! ! c= c> cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c> cBIT1 b1 cBIT1 b0 c> b1 b0 c/\ ! ! c= c- cNUMERAL b0 cNUMERAL b1 cNUMERAL c- b0 b1 c/\ c= c- c_0 c_0 c_0 c/\ ! c= c- c_0 cBIT0 b0 c_0 c/\ ! c= c- c_0 cBIT1 b0 c_0 c/\ ! c= c- cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c- cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT0 b0 cBIT1 b1 cPRE cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1
+ |- (((!x. (~ (x IN EMPTY))) ==> ((\x. (~ (x IN EMPTY))) x)) = ((\x. (~ (x IN EMPTY))) x))
T c= c==> ! c~ cIN b0 part cEMPTY * / c~ cIN b0 part cEMPTY f0 * / c~ cIN b0 part cEMPTY f0
- |- (((!n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m))) ==> ((\n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m))) n)) = ((\n. (((NUMERAL n) >= (NUMERAL m)) = (n >= m))) n))
T c= c==> ! c= c>= cNUMERAL b0 cNUMERAL f0 c>= b0 f0 * / c= c>= cNUMERAL b0 cNUMERAL f0 c>= b0 f0 f1 * / c= c>= cNUMERAL b0 cNUMERAL f0 c>= b0 f0 f1
- |- (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))))))))))))
T c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
- |- ((\e'. ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) = g') ==> ((g' ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))) e')
T * / c==> c= c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 c==> c==> f3 c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ f3 c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 f4 b0 f5
- |- (((!n. (((BIT0 n) = _0) = (n = _0))) ==> ((\n. (((BIT0 n) = _0) = (n = _0))) n)) = ((\n. (((BIT0 n) = _0) = (n = _0))) n))
T c= c==> ! c= c= cBIT0 b0 c_0 c= b0 c_0 * / c= c= cBIT0 b0 c_0 c= b0 c_0 f0 * / c= c= cBIT0 b0 c_0 c= b0 c_0 f0
- |- (((BIT0 n) > (BIT1 m)) = (n > m))
T c= c> cBIT0 f0 cBIT1 f1 c> f0 f1
+ (((orthonormal e1) e2) e3) |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))) = (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))))
T c==> corthonormal f0 f1 f2 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((\n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))) n)
T * / c= cSUC cBIT1 b0 cBIT0 cSUC b0 f0
- |- (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))))))))))))
T c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
- ((e2 = e3) \/ (e2 IN EMPTY)) |- (((e2 = e3) \/ (e2 IN EMPTY)) /\ ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> c\/ c= f0 f1 cIN f0 part cEMPTY c/\ c\/ c= f0 f1 cIN f0 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((\n. (((BIT1 n) >= (BIT0 m)) = (n >= m))) n)
T * / c= c>= cBIT1 b0 cBIT0 f0 c>= b0 f0 f1
- |- (((!n. (((BIT1 n) >= (BIT1 m)) = (n >= m))) ==> ((\n. (((BIT1 n) >= (BIT1 m)) = (n >= m))) n)) = ((\n. (((BIT1 n) >= (BIT1 m)) = (n >= m))) n))
T c= c==> ! c= c>= cBIT1 b0 cBIT1 f0 c>= b0 f0 * / c= c>= cBIT1 b0 cBIT1 f0 c>= b0 f0 f1 * / c= c>= cBIT1 b0 cBIT1 f0 c>= b0 f0 f1
- |- (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n)))
T c= c+ cBIT0 f0 cBIT0 f1 cBIT0 c+ f0 f1
- |- (((!n. ((_0 + (BIT1 n)) = (BIT1 n))) ==> ((\n. ((_0 + (BIT1 n)) = (BIT1 n))) n)) = ((\n. ((_0 + (BIT1 n)) = (BIT1 n))) n))
T c= c==> ! c= c+ c_0 cBIT1 b0 cBIT1 b0 * / c= c+ c_0 cBIT1 b0 cBIT1 b0 f0 * / c= c+ c_0 cBIT1 b0 cBIT1 b0 f0
- |- ((\n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) n)
T * / c= c* cBIT1 f0 cBIT1 b0 c+ cBIT1 f0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1
+ |- ((((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (CARD (e3 INSERT EMPTY))) = (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c= c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((!n. ((BIT0 n) >= _0)) /\ ((!n. ((BIT1 n) >= _0)) /\ ((!m. (!n. (((BIT0 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m)))))))))
T c/\ ! c>= cBIT0 b0 c_0 c/\ ! c>= cBIT1 b0 c_0 c/\ ! ! c= c>= cBIT0 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
- |- ((\n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n)))) n)
T * / c= c+ cNUMERAL f0 cNUMERAL b0 cNUMERAL c+ f0 b0 f1
+ |- (((!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3)))))) ==> ((\e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3)))))) e3)) = ((\e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3)))))) e3))
T c= c==> ! c==> corthonormal f0 f1 b0 c/\ c~ c= f0 f1 c/\ c~ c= f0 b0 c~ c= f1 b0 * / c==> corthonormal f0 f1 b0 c/\ c~ c= f0 f1 c/\ c~ c= f0 b0 c~ c= f1 b0 f2 * / c==> corthonormal f0 f1 b0 c/\ c~ c= f0 f1 c/\ c~ c= f0 b0 c~ c= f1 b0 f2
- |- (((!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) ==> ((\n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) n)) = ((\n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) n))
T c= c==> ! c= c* cBIT1 f0 cBIT1 b0 c+ cBIT1 f0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 * / c= c* cBIT1 f0 cBIT1 b0 c+ cBIT1 f0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1 * / c= c* cBIT1 f0 cBIT1 b0 c+ cBIT1 f0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1
+ |- ((\p'. (!q'. ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q')))))) p')
T * / ! c==> c= c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3
+ |- (((!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))) ==> ((\n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))) n)) = ((\n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))) n))
T c= c==> ! c= cSUC cBIT1 b0 cBIT0 cSUC b0 * / c= cSUC cBIT1 b0 cBIT0 cSUC b0 f0 * / c= cSUC cBIT1 b0 cBIT0 cSUC b0 f0
+ |- (((((e2 = e3) \/ (e2 IN EMPTY)) ==> ((CARD (e3 INSERT EMPTY)) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) ==> (((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e')))) = (((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e'))))
T c= c==> c==> c\/ c= f0 f1 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2
+ |- ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((!n. (((BIT0 n) - _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) - _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n))))) /\ ((!m. (!n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n)))))) /\ ((!m. (!n. (((BIT1 m) - (BIT0 n)) = (((COND (n <= m)) (BIT1 (m - n))) _0)))) /\ (!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))))))))
T c/\ ! c= c- cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c- cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c- cBIT0 b0 cBIT0 b1 cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT0 b0 cBIT1 b1 cPRE cBIT0 c- b0 b1 c/\ ! ! c= c- cBIT1 b0 cBIT0 b1 cCOND c<= b1 b0 cBIT1 c- b0 b1 c_0 ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1
+ |- ((!n. ((_0 = (BIT0 n)) = (_0 = n))) /\ ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))))))))
T c/\ ! c= c= c_0 cBIT0 b0 c= c_0 b0 c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- (((!n. (((BIT0 m) < (BIT0 n)) = (m < n))) ==> ((\n. (((BIT0 m) < (BIT0 n)) = (m < n))) n)) = ((\n. (((BIT0 m) < (BIT0 n)) = (m < n))) n))
T c= c==> ! c= c< cBIT0 f0 cBIT0 b0 c< f0 b0 * / c= c< cBIT0 f0 cBIT0 b0 c< f0 b0 f1 * / c= c< cBIT0 f0 cBIT0 b0 c< f0 b0 f1
+ |- ((\g'. (!t'. (!e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 f3
+ |- (((!b. (((b SUBSET UNIV) /\ (b HAS_SIZE (dim UNIV))) ==> ((independent b) = (UNIV SUBSET (span b))))) ==> ((\b. (((b SUBSET UNIV) /\ (b HAS_SIZE (dim UNIV))) ==> ((independent b) = (UNIV SUBSET (span b))))) (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = ((\b. (((b SUBSET UNIV) /\ (b HAS_SIZE (dim UNIV))) ==> ((independent b) = (UNIV SUBSET (span b))))) (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))
T c= c==> ! c==> c/\ cSUBSET b0 part cUNIV cHAS_SIZE b0 cdim part cUNIV c= cindependent b0 cSUBSET part cUNIV * part cspan b0 * / c==> c/\ cSUBSET b0 part cUNIV cHAS_SIZE b0 cdim part cUNIV c= cindependent b0 cSUBSET part cUNIV * part cspan b0 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY * / c==> c/\ cSUBSET b0 part cUNIV cHAS_SIZE b0 cdim part cUNIV c= cindependent b0 cSUBSET part cUNIV * part cspan b0 * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ ((e2 = e3) \/ (e2 IN EMPTY)) |- (((e2 = e3) \/ (e2 IN EMPTY)) /\ ((CARD (e3 INSERT EMPTY)) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> c\/ c= f0 f1 cIN f0 part cEMPTY c/\ c\/ c= f0 f1 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((\n. (((BIT0 n) = _0) = (n = _0))) n)
T * / c= c= cBIT0 b0 c_0 c= b0 c_0 f0
+ |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
- |- ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((\m. (!n. (((BIT0 n) > (BIT1 m)) = (n > m)))) m)
T * / ! c= c> cBIT0 b1 cBIT1 b0 c> b1 b0 f0
- |- (((NUMERAL n) >= (NUMERAL m)) = (n >= m))
T c= c>= cNUMERAL f0 cNUMERAL f1 c>= f0 f1
- |- (((BIT0 m) - (BIT0 n)) = (BIT0 (m - n)))
T c= c- cBIT0 f0 cBIT0 f1 cBIT0 c- f0 f1
- |- (((!n. (((BIT1 m) = (BIT0 n)) = F)) ==> ((\n. (((BIT1 m) = (BIT0 n)) = F)) n)) = ((\n. (((BIT1 m) = (BIT0 n)) = F)) n))
T c= c==> ! c= c= cBIT1 f0 cBIT0 b0 cF * / c= c= cBIT1 f0 cBIT0 b0 cF f1 * / c= c= cBIT1 f0 cBIT0 b0 cF f1
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- (((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) = ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) t') e'))))) = ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) t') e')))))
T c= c==> c= c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c==> c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 f4 c==> c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 f4
- (((orthonormal e1) e2) e3) |- ((((orthonormal e1) e2) e3) = T)
T c==> corthonormal f0 f1 f2 c= corthonormal f0 f1 f2 cT
+ |- (((!e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))) ==> ((\e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))) e1)) = ((\e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))) e1))
T c= c==> ! ! ! c==> corthonormal b0 b1 b2 cindependent * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY * / ! ! c==> corthonormal b0 b1 b2 cindependent * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY f0 * / ! ! c==> corthonormal b0 b1 b2 cindependent * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY f0
- |- ((\n. ((_0 EXP (BIT1 n)) = _0)) n)
T * / c= cEXP c_0 cBIT1 b0 c_0 f0
- ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))), (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) |- ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = T)
T c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT
- |- (((!n. (((BIT0 n) >= (BIT0 m)) = (n >= m))) ==> ((\n. (((BIT0 n) >= (BIT0 m)) = (n >= m))) n)) = ((\n. (((BIT0 n) >= (BIT0 m)) = (n >= m))) n))
T c= c==> ! c= c>= cBIT0 b0 cBIT0 f0 c>= b0 f0 * / c= c>= cBIT0 b0 cBIT0 f0 c>= b0 f0 f1 * / c= c>= cBIT0 b0 cBIT0 f0 c>= b0 f0 f1
- |- ((_0 EXP (BIT1 n)) = _0)
T c= cEXP c_0 cBIT1 f0 c_0
+ |- (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> q')))
T c==> c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f3 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3
+ |- ((!n. (((BIT0 n) = _0) = (n = _0))) /\ ((!n. (((BIT1 n) = _0) = F)) /\ ((!n. ((_0 = (BIT0 n)) = (_0 = n))) /\ ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))))))))))
T c/\ ! c= c= cBIT0 b0 c_0 c= b0 c_0 c/\ ! c= c= cBIT1 b0 c_0 cF c/\ ! c= c= c_0 cBIT0 b0 c= c_0 b0 c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- ((!m. (!n. (((BIT1 n) >= (BIT0 m)) = (n >= m)))) /\ ((!m. (!n. (((BIT0 n) >= (BIT1 m)) = (n > m)))) /\ (!m. (!n. (((BIT1 n) >= (BIT1 m)) = (n >= m))))))
T c/\ ! ! c= c>= cBIT1 b1 cBIT0 b0 c>= b1 b0 c/\ ! ! c= c>= cBIT0 b1 cBIT1 b0 c> b1 b0 ! ! c= c>= cBIT1 b1 cBIT1 b0 c>= b1 b0
- |- ((\n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n)))))) n)
T * / c= c* cBIT1 f0 cBIT0 b0 c+ cBIT0 b0 cBIT0 cBIT0 c* f0 b0 f1
+ |- (((!p'. (!q'. ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 * / ! c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3 * / ! c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3
- |- (((!t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 f2 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 f2
+ |- (((!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))) ==> ((\n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))) n)) = ((\n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))) n))
T c= c==> ! c= cHAS_SIZE f0 b0 c/\ cFINITE f0 c= cCARD f0 b0 * / c= cHAS_SIZE f0 b0 c/\ cFINITE f0 c= cCARD f0 b0 f1 * / c= cHAS_SIZE f0 b0 c/\ cFINITE f0 c= cCARD f0 b0 f1
- |- (((!t'. (!e'. ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) = g') ==> ((g' ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) = g') ==> ((g' ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) = g') ==> ((g' ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 c==> c==> f3 c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 * / ! c==> c= c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 c==> c==> f3 c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 f4 * / ! c==> c= c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 c==> c==> f3 c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 f4
- |- ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))
T c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
+ (((orthonormal e1) e2) e3) |- ((((orthonormal e1) e2) e3) /\ ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))
T c==> corthonormal f0 f1 f2 c/\ corthonormal f0 f1 f2 c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))
T c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 f4
- |- (((!m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))) ==> ((\m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))) m)) = ((\m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))) m))
T c= c==> ! ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1 * / ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1 f0 * / ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1 f0
- |- ((\n. (((NUMERAL m) - (NUMERAL n)) = (NUMERAL (m - n)))) n)
T * / c= c- cNUMERAL f0 cNUMERAL b0 cNUMERAL c- f0 b0 f1
- |- ((\n. ((PRE (NUMERAL n)) = (NUMERAL (PRE n)))) n)
T * / c= cPRE cNUMERAL b0 cNUMERAL cPRE b0 f0
- |- (((!n. ((_0 <= (BIT0 n)) = T)) ==> ((\n. ((_0 <= (BIT0 n)) = T)) n)) = ((\n. ((_0 <= (BIT0 n)) = T)) n))
T c= c==> ! c= c<= c_0 cBIT0 b0 cT * / c= c<= c_0 cBIT0 b0 cT f0 * / c= c<= c_0 cBIT0 b0 cT f0
- |- (((!n. ((_0 < (BIT0 n)) = (_0 < n))) ==> ((\n. ((_0 < (BIT0 n)) = (_0 < n))) n)) = ((\n. ((_0 < (BIT0 n)) = (_0 < n))) n))
T c= c==> ! c= c< c_0 cBIT0 b0 c< c_0 b0 * / c= c< c_0 cBIT0 b0 c< c_0 b0 f0 * / c= c< c_0 cBIT0 b0 c< c_0 b0 f0
- |- (((BIT1 n) = _0) = F)
T c= c= cBIT1 f0 c_0 cF
- |- ((\e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 f3
- |- (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n))))
T c= c- cBIT0 f0 cBIT1 f1 cPRE cBIT0 c- f0 f1
- |- (((!e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))) ==> ((\e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))) e')) = ((\e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 b0 * / c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 b0 f4 * / c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 b0 f4
+ |- (((!x. ((x IN UNIV) ==> (x IN (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> (!x. ((x IN (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (x IN UNIV)))) = ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c= c==> ! c==> cIN b0 part cUNIV cIN b0 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY ! c= cIN b0 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cIN b0 part cUNIV c==> cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((\e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3)))))) e3)
T * / c==> corthonormal f0 f1 b0 c/\ c~ c= f0 f1 c/\ c~ c= f0 b0 c~ c= f1 b0 f2
- |- ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n))))))))))
T c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
- |- ((\m. (!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n))))) m)
T * / ! c= c- cBIT1 b0 cBIT1 b1 cBIT0 c- b0 b1 f0
- |- (((e3 IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))
T c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 f3
- |- ((_0 < (BIT0 n)) = (_0 < n))
T c= c< c_0 cBIT0 f0 c< c_0 f0
- |- ((\m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) m)
T * / ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 f0
- |- (((!n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n))))) ==> ((\n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n))))) n)) = ((\n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n))))) n))
T c= c==> ! c= c- cBIT0 f0 cBIT1 b0 cPRE cBIT0 c- f0 b0 * / c= c- cBIT0 f0 cBIT1 b0 cPRE cBIT0 c- f0 b0 f1 * / c= c- cBIT0 f0 cBIT1 b0 cPRE cBIT0 c- f0 b0 f1
- |- (((!t'. (!e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((e2 = e3) \/ (e2 IN EMPTY)) = g') ==> ((g' ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 * / ! c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 f3 * / ! c==> c= c\/ c= f0 f1 cIN f0 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 f3
- (e3 IN EMPTY) |- ((e3 IN EMPTY) = T)
T c==> cIN f0 part cEMPTY c= cIN f0 part cEMPTY cT
+ (~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) |- ((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) /\ ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c/\ c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((\m. (!n. (((BIT0 m) < (BIT0 n)) = (m < n)))) m)
T * / ! c= c< cBIT0 b0 cBIT0 b1 c< b0 b1 f0
- |- (((BIT0 n) + _0) = (BIT0 n))
T c= c+ cBIT0 f0 c_0 cBIT0 f0
+ |- (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))) = ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))))
T c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((\n. (((NUMERAL m) < (NUMERAL n)) = (m < n))) n)
T * / c= c< cNUMERAL f0 cNUMERAL b0 c< f0 b0 f1
- |- (((BIT1 n) > _0) = T)
T c= c> cBIT1 f0 c_0 cT
- |- ((\n. ((_0 <= (BIT1 n)) = T)) n)
T * / c= c<= c_0 cBIT1 b0 cT f0
- |- ((((e3 IN EMPTY) ==> ((NUMERAL _0) = (NUMERAL _0))) ==> (((~ (e3 IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) e')))) = (((~ (e3 IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) e'))))
T c= c==> c==> cIN f0 part cEMPTY c= cNUMERAL c_0 cNUMERAL c_0 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
+ |- ((\e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 b0 f3
- |- (((!m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))) ==> ((\m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))) m)) = ((\m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))) m))
T c= c==> ! ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1 * / ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1 f0 * / ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1 f0
+ |- (((~ (x IN EMPTY)) ==> ((x IN EMPTY) = F)) = ((x IN EMPTY) = F))
T c= c==> c~ cIN f0 part cEMPTY c= cIN f0 part cEMPTY cF c= cIN f0 part cEMPTY cF
- |- ((\n. (((BIT1 n) < _0) = F)) n)
T * / c= c< cBIT1 b0 c_0 cF f0
+ |- (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n))))))
T c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((\n. ((_0 >= (BIT0 n)) = (_0 >= n))) n)
T * / c= c>= c_0 cBIT0 b0 c>= c_0 b0 f0
+ |- ((\x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))))) x)
T * / ! ! c= cIN b0 * * part cINSERT b1 b2 c\/ c= b0 b1 cIN b0 b2 f0
- |- ((\n. (((BIT1 n) * _0) = _0)) n)
T * / c= c* cBIT1 b0 c_0 c_0 f0
- |- ((_0 - _0) = _0)
T c= c- c_0 c_0 c_0
- |- (((!n. ((_0 = (BIT1 n)) = F)) ==> ((\n. ((_0 = (BIT1 n)) = F)) n)) = ((\n. ((_0 = (BIT1 n)) = F)) n))
T c= c==> ! c= c= c_0 cBIT1 b0 cF * / c= c= c_0 cBIT1 b0 cF f0 * / c= c= c_0 cBIT1 b0 cF f0
+ |- (((!n. (((BIT1 m) = (BIT1 n)) = (m = n))) ==> ((\n. (((BIT1 m) = (BIT1 n)) = (m = n))) n)) = ((\n. (((BIT1 m) = (BIT1 n)) = (m = n))) n))
T c= c==> ! c= c= cBIT1 f0 cBIT1 b0 c= f0 b0 * / c= c= cBIT1 f0 cBIT1 b0 c= f0 b0 f1 * / c= c= cBIT1 f0 cBIT1 b0 c= f0 b0 f1
- |- ((\m. (((BIT0 m) EXP _0) = (BIT1 _0))) m)
T * / c= cEXP cBIT0 b0 c_0 cBIT1 c_0 f0
- |- ((\n. (((BIT0 n) > (BIT1 m)) = (n > m))) n)
T * / c= c> cBIT0 b0 cBIT1 f0 c> b0 f0 f1
+ |- (((!p'. (!q'. (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) ==> ((\p'. (!q'. (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 * / ! c==> c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3 * / ! c==> c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b1 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> b0 b1 f3
- (((orthonormal e1) e2) e3) |- ((e3 = e2) = F)
T c==> corthonormal f0 f1 f2 c= c= f2 f1 cF
+ |- (((~ (e3 IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) e')))
T c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
- |- (((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) ==> ((\m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) m)) = ((\m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) m))
T c= c==> ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 * / ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 f0 * / ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 f0
- |- ((\n. ((_0 < (BIT0 n)) = (_0 < n))) n)
T * / c= c< c_0 cBIT0 b0 c< c_0 b0 f0
- |- (((!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) ==> ((\n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) n)) = ((\n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) n))
T c= c==> ! c= cEXP cBIT1 f0 cBIT1 b0 c* cBIT1 f0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 * / c= cEXP cBIT1 f0 cBIT1 b0 c* cBIT1 f0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 f1 * / c= cEXP cBIT1 f0 cBIT1 b0 c* cBIT1 f0 c* cEXP cBIT1 f0 b0 cEXP cBIT1 f0 b0 f1
+ (~ (e3 IN EMPTY)) |- ((~ (e3 IN EMPTY)) /\ ((SUC (CARD EMPTY)) = (SUC (NUMERAL _0))))
T c==> c~ cIN f0 part cEMPTY c/\ c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY cSUC cNUMERAL c_0
- |- ((_0 EXP _0) = (BIT1 _0))
T c= cEXP c_0 c_0 cBIT1 c_0
- |- ((\m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) m)
T * / ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 f0
- |- (((!n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))) ==> ((\n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))) n)) = ((\n. (((BIT1 m) - (BIT1 n)) = (BIT0 (m - n)))) n))
T c= c==> ! c= c- cBIT1 f0 cBIT1 b0 cBIT0 c- f0 b0 * / c= c- cBIT1 f0 cBIT1 b0 cBIT0 c- f0 b0 f1 * / c= c- cBIT1 f0 cBIT1 b0 cBIT0 c- f0 b0 f1
- |- (((!m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) ==> ((\m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) m)) = ((\m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) m))
T c= c==> ! ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 * / ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 f0 * / ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 f0
- |- ((\n. ((_0 + (BIT0 n)) = (BIT0 n))) n)
T * / c= c+ c_0 cBIT0 b0 cBIT0 b0 f0
- |- ((\m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n)))) m)
T * / ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1 f0
+ |- (((!g'. (!t'. (!e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 f2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 f2
- |- (((!n. (~ (_0 >= (BIT1 n)))) ==> ((\n. (~ (_0 >= (BIT1 n)))) n)) = ((\n. (~ (_0 >= (BIT1 n)))) n))
T c= c==> ! c~ c>= c_0 cBIT1 b0 * / c~ c>= c_0 cBIT1 b0 f0 * / c~ c>= c_0 cBIT1 b0 f0
+ |- ((((e2 IN (e3 INSERT EMPTY)) = ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((((e2 = e3) \/ (e2 IN EMPTY)) ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) t') e'))))) = ((((e2 = e3) \/ (e2 IN EMPTY)) ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) t') e')))))
T c= c==> c= cIN f0 * * part cINSERT f1 part cEMPTY c\/ c= f0 f1 cIN f0 part cEMPTY c==> c==> c\/ c= f0 f1 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY f2 c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND c\/ c= f0 f1 cIN f0 part cEMPTY f2 f3 c==> c==> c\/ c= f0 f1 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY f2 c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND c\/ c= f0 f1 cIN f0 part cEMPTY f2 f3
+ |- ((\q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = p') ==> ((p' ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (p' ==> q'))))) q')
T * / c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4
- |- ((\m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) m)
T * / ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 f0
- |- ((\g'. (!t'. (!e'. ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) = g') ==> ((g' ==> ((((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY b0 c==> c==> b0 c= cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f3
+ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) |- (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) /\ ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c/\ cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((x = x) = T)
T c= c= f0 f0 cT
- |- (((_0 <= _0) = T) /\ ((!n. (((BIT0 n) <= _0) = (n <= _0))) /\ ((!n. (((BIT1 n) <= _0) = F)) /\ ((!n. ((_0 <= (BIT0 n)) = T)) /\ ((!n. ((_0 <= (BIT1 n)) = T)) /\ ((!m. (!n. (((BIT0 m) <= (BIT0 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT0 m) <= (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) <= (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) <= (BIT1 n)) = (m <= n))))))))))))
T c/\ c= c<= c_0 c_0 cT c/\ ! c= c<= cBIT0 b0 c_0 c<= b0 c_0 c/\ ! c= c<= cBIT1 b0 c_0 cF c/\ ! c= c<= c_0 cBIT0 b0 cT c/\ ! c= c<= c_0 cBIT1 b0 cT c/\ ! ! c= c<= cBIT0 b0 cBIT0 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c<= cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c<= cBIT1 b0 cBIT1 b1 c<= b0 b1
+ |- ((!n. ((_0 = (BIT1 n)) = F)) /\ ((!m. (!n. (((BIT0 m) = (BIT0 n)) = (m = n)))) /\ ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n))))))))
T c/\ ! c= c= c_0 cBIT1 b0 cF c/\ ! ! c= c= cBIT0 b0 cBIT0 b1 c= b0 b1 c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
- |- ((~ (e3 IN EMPTY)) ==> ((SUC (NUMERAL _0)) = (SUC (NUMERAL _0))))
T c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((\n. ((ODD (BIT0 n)) = F)) n)
T * / c= cODD cBIT0 b0 cF f0
- |- ((_0 - (BIT1 n)) = _0)
T c= c- c_0 cBIT1 f0 c_0
- |- (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n)))))
T c= c* cBIT0 f0 cBIT1 f1 c+ cBIT0 f0 cBIT0 cBIT0 c* f0 f1
- |- ((!n. ((_0 < (BIT0 n)) = (_0 < n))) /\ ((!n. ((_0 < (BIT1 n)) = T)) /\ ((!m. (!n. (((BIT0 m) < (BIT0 n)) = (m < n)))) /\ ((!m. (!n. (((BIT0 m) < (BIT1 n)) = (m <= n)))) /\ ((!m. (!n. (((BIT1 m) < (BIT0 n)) = (m < n)))) /\ (!m. (!n. (((BIT1 m) < (BIT1 n)) = (m < n)))))))))
T c/\ ! c= c< c_0 cBIT0 b0 c< c_0 b0 c/\ ! c= c< c_0 cBIT1 b0 cT c/\ ! ! c= c< cBIT0 b0 cBIT0 b1 c< b0 b1 c/\ ! ! c= c< cBIT0 b0 cBIT1 b1 c<= b0 b1 c/\ ! ! c= c< cBIT1 b0 cBIT0 b1 c< b0 b1 ! ! c= c< cBIT1 b0 cBIT1 b1 c< b0 b1
- |- ((\m. (!n. (((NUMERAL m) < (NUMERAL n)) = (m < n)))) m)
T * / ! c= c< cNUMERAL b0 cNUMERAL b1 c< b0 b1 f0
- |- (((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) ==> ((\m. (((BIT0 m) EXP _0) = (BIT1 _0))) m)) = ((\m. (((BIT0 m) EXP _0) = (BIT1 _0))) m))
T c= c==> ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 * / c= cEXP cBIT0 b0 c_0 cBIT1 c_0 f0 * / c= cEXP cBIT0 b0 c_0 cBIT1 c_0 f0
- |- ((!n. ((ODD (BIT0 n)) = F)) /\ (!n. ((ODD (BIT1 n)) = T)))
T c/\ ! c= cODD cBIT0 b0 cF ! c= cODD cBIT1 b0 cT
- |- (((!n. ((EVEN (NUMERAL n)) = (EVEN n))) ==> ((\n. ((EVEN (NUMERAL n)) = (EVEN n))) n)) = ((\n. ((EVEN (NUMERAL n)) = (EVEN n))) n))
T c= c==> ! c= cEVEN cNUMERAL b0 cEVEN b0 * / c= cEVEN cNUMERAL b0 cEVEN b0 f0 * / c= cEVEN cNUMERAL b0 cEVEN b0 f0
+ |- ((\y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))) y)
T * / ! c= cIN f0 * * part cINSERT b0 b1 c\/ c= f0 b0 cIN f0 b1 f1
+ |- ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))
T c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 f4
- |- ((\n. ((ODD (BIT1 n)) = T)) n)
T * / c= cODD cBIT1 b0 cT f0
- ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) |- (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = T)
T c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cT
- |- ((\n. ((_0 = (BIT0 n)) = (_0 = n))) n)
T * / c= c= c_0 cBIT0 b0 c= c_0 b0 f0
+ |- (((!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((\e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) e3)) = ((\e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) e3))
T c= c==> ! c==> corthonormal f0 f1 b0 cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY * / c==> corthonormal f0 f1 b0 cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY f2 * / c==> corthonormal f0 f1 b0 cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY f2
- (e2 = e1) |- (e1 = e2)
T c==> c= f0 f1 c= f1 f0
+ |- ((_0 = _0) = T)
T c= c= c_0 c_0 cT
- |- ((\n. (((BIT0 n) * _0) = _0)) n)
T * / c= c* cBIT0 b0 c_0 c_0 f0
- |- (((BIT1 n) >= (BIT1 m)) = (n >= m))
T c= c>= cBIT1 f0 cBIT1 f1 c>= f0 f1
+ |- ((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (CARD (e3 INSERT EMPTY))) = (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n)))) ==> ((\n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n)))) n)) = ((\n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n)))) n))
T c= c==> ! c= c* cNUMERAL f0 cNUMERAL b0 cNUMERAL c* f0 b0 * / c= c* cNUMERAL f0 cNUMERAL b0 cNUMERAL c* f0 b0 f1 * / c= c* cNUMERAL f0 cNUMERAL b0 cNUMERAL c* f0 b0 f1
- (((orthonormal e1) e2) e3) |- (T = (((orthonormal e1) e2) e3))
T c==> corthonormal f0 f1 f2 c= cT corthonormal f0 f1 f2
- |- ((\m. (!n. (((BIT0 m) - (BIT1 n)) = (PRE (BIT0 (m - n)))))) m)
T * / ! c= c- cBIT0 b0 cBIT1 b1 cPRE cBIT0 c- b0 b1 f0
+ (((orthonormal e1) e2) e3) |- ((e2 = e3) = F)
T c==> corthonormal f0 f1 f2 c= c= f1 f2 cF
+ |- ((t = T) = t)
T c= c= f0 cT f0
- |- ((\n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n)))))) n)
T * / c= c* cBIT0 f0 cBIT1 b0 c+ cBIT0 f0 cBIT0 cBIT0 c* f0 b0 f1
+ |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))
T c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f4 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 f4
+ |- (T = ((!x. ((x IN UNIV) ==> (x IN (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> (!x. ((x IN (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (x IN UNIV)))))
T c= cT c==> ! c==> cIN b0 part cUNIV cIN b0 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY ! c= cIN b0 * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cIN b0 part cUNIV
+ |- ((x IN UNIV) = T)
T c= cIN f0 part cUNIV cT
+ |- ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))) = ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))))
T c= c==> c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((!g'. (!t'. (!e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((e1 IN (e2 INSERT (e3 INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 f3 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 f3
+ |- ((!m. (!n. (((BIT0 m) = (BIT1 n)) = F))) /\ ((!m. (!n. (((BIT1 m) = (BIT0 n)) = F))) /\ (!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n))))))
T c/\ ! ! c= c= cBIT0 b0 cBIT1 b1 cF c/\ ! ! c= c= cBIT1 b0 cBIT0 b1 cF ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1
+ |- (((BIT1 m) = (BIT1 n)) = (m = n))
T c= c= cBIT1 f0 cBIT1 f1 c= f0 f1
+ |- (((!q'. ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))) ==> ((\q'. ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))) q')) = ((\q'. ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 * / c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4 * / c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4
+ |- (!g'. (!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5
+ |- ((((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))
T c= c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))) ==> ((\s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))) s)) = ((\s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))) s))
T c= c==> ! c= cIN f0 * * part cINSERT f1 b0 c\/ c= f0 f1 cIN f0 b0 * / c= cIN f0 * * part cINSERT f1 b0 c\/ c= f0 f1 cIN f0 b0 f2 * / c= cIN f0 * * part cINSERT f1 b0 c\/ c= f0 f1 cIN f0 b0 f2
+ |- (((!q'. ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))) ==> ((\q'. ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))) q')) = ((\q'. ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 * / c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4 * / c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4
+ (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) |- ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) /\ (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((\x. (~ (x IN EMPTY))) x)
T * / c~ cIN b0 part cEMPTY f0
+ |- (((!q'. ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) ==> ((\q'. ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q')) = ((\q'. ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 * / c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4 * / c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4
+ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) |- (((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) /\ ((CARD (e2 INSERT (e3 INSERT EMPTY))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c/\ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))) = (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))))
T c= c==> c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- (((!t'. (!e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 f3 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 f3
+ |- ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> q')))
T c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3
+ |- ((\e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))) e1)
T * / ! ! c==> corthonormal b0 b1 b2 cindependent * * part cINSERT b0 * * part cINSERT b1 * * part cINSERT b2 part cEMPTY f0
+ |- ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> q')))
T c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 f3
+ |- ((\m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))) m)
T * / ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1 f0
+ |- (((!s. (s SUBSET UNIV)) ==> ((\s. (s SUBSET UNIV)) s)) = ((\s. (s SUBSET UNIV)) s))
T c= c==> ! cSUBSET b0 part cUNIV * / cSUBSET b0 part cUNIV f0 * / cSUBSET b0 part cUNIV f0
+ |- ((s SUBSET UNIV) = T)
T c= cSUBSET f0 part cUNIV cT
+ |- (((!e2. (!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((\e2. (!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) e2)) = ((\e2. (!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) e2))
T c= c==> ! ! c==> corthonormal f0 b0 b1 cindependent * * part cINSERT f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY * / ! c==> corthonormal f0 b0 b1 cindependent * * part cINSERT f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f1 * / ! c==> corthonormal f0 b0 b1 cindependent * * part cINSERT f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f1
+ |- ((\g'. (!t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cCARD part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD part cEMPTY b2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND b0 b1 b2 f1
+ (((orthonormal e1) e2) e3) |- (~ (e2 = e3))
T c==> corthonormal f0 f1 f2 c~ c= f1 f2
+ |- ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((\q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q')
T * / c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4
+ |- ((\s. (s SUBSET UNIV)) s)
T * / cSUBSET b0 part cUNIV f0
+ |- ((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((\e2. (!e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) e2)
T * / ! c==> corthonormal f0 b0 b1 cindependent * * part cINSERT f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f1
+ |- ((\m. (!n. (((NUMERAL m) = (NUMERAL n)) = (m = n)))) m)
T * / ! c= c= cNUMERAL b0 cNUMERAL b1 c= b0 b1 f0
+ |- (((FINITE (e2 INSERT (e3 INSERT EMPTY))) ==> ((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))))) = ((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))))))
T c= c==> cFINITE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCOND cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCOND cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((((COND F) t1) t2) = t2)
T c= cCOND cF f0 f1 f1
+ |- (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))
T c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY f3 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 f3
+ |- ((\t'. (!e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 f3
+ |- (((!s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) ==> ((\s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) s)) = ((\s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) s))
T c= c==> ! ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 * / ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 f0 * / ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 f0
+ (((orthonormal e1) e2) e3) |- ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))
T c==> corthonormal f0 f1 f2 c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- (T = (FINITE (e2 INSERT (e3 INSERT EMPTY))))
T c= cT cFINITE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- (((!p'. (!q'. ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 * / ! c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3 * / ! c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 b0 c==> c==> b0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3
+ (~ ((e2 = e3) \/ (e2 IN EMPTY))) |- ((~ ((e2 = e3) \/ (e2 IN EMPTY))) /\ ((SUC (CARD (e3 INSERT EMPTY))) = (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c/\ c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((FINITE (e3 INSERT EMPTY)) ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = (((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))))) = ((CARD (e2 INSERT (e3 INSERT EMPTY))) = (((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY))))))
T c= c==> cFINITE * * part cINSERT f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f0 part cEMPTY cCOND cIN f1 * * part cINSERT f0 part cEMPTY cCARD * * part cINSERT f0 part cEMPTY cSUC cCARD * * part cINSERT f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f0 part cEMPTY cCOND cIN f1 * * part cINSERT f0 part cEMPTY cCARD * * part cINSERT f0 part cEMPTY cSUC cCARD * * part cINSERT f0 part cEMPTY
+ |- ((((~ (e3 IN EMPTY)) ==> ((SUC (CARD EMPTY)) = (SUC (NUMERAL _0)))) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c= c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY cSUC cNUMERAL c_0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((!e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3)))))))) ==> ((\e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3)))))))) e1)) = ((\e1. (!e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3)))))))) e1))
T c= c==> ! ! ! c==> corthonormal b0 b1 b2 c/\ c~ c= b0 b1 c/\ c~ c= b0 b2 c~ c= b1 b2 * / ! ! c==> corthonormal b0 b1 b2 c/\ c~ c= b0 b1 c/\ c~ c= b0 b2 c~ c= b1 b2 f0 * / ! ! c==> corthonormal b0 b1 b2 c/\ c~ c= b0 b1 c/\ c~ c= b0 b2 c~ c= b1 b2 f0
+ |- ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((\q'. ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))) q')
T * / c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4
+ |- ((\s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))) s)
T * / c= cIN f0 * * part cINSERT f1 b0 c\/ c= f0 f1 cIN f0 b0 f2
+ |- (((!m. (!n. (((NUMERAL m) = (NUMERAL n)) = (m = n)))) ==> ((\m. (!n. (((NUMERAL m) = (NUMERAL n)) = (m = n)))) m)) = ((\m. (!n. (((NUMERAL m) = (NUMERAL n)) = (m = n)))) m))
T c= c==> ! ! c= c= cNUMERAL b0 cNUMERAL b1 c= b0 b1 * / ! c= c= cNUMERAL b0 cNUMERAL b1 c= b0 b1 f0 * / ! c= c= cNUMERAL b0 cNUMERAL b1 c= b0 b1 f0
+ |- (((!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) ==> ((\q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q')) = ((\q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 * / c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4 * / c==> c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4
+ |- ((!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e')))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 b0 c= cCOND f0 f2 f4 cCOND f1 f3 b0 cT
+ |- ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))
T c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
+ (((orthonormal e1) e2) e3) |- (((~ (e1 = e3)) ==> ((e1 = e3) = F)) = ((e1 = e3) = F))
T c==> corthonormal f0 f1 f2 c= c==> c~ c= f0 f2 c= c= f0 f2 cF c= c= f0 f2 cF
+ (((orthonormal e1) e2) e3) |- ((~ (e1 = e3)) /\ (~ (e2 = e3)))
T c==> corthonormal f0 f1 f2 c/\ c~ c= f0 f2 c~ c= f1 f2
+ (((orthonormal e1) e2) e3) |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> q')))
T c==> corthonormal f0 f1 f2 c==> c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f3 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3
+ |- ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((\q'. ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))) q')
T * / c==> c= c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 b0 f4
+ |- (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))
T c==> c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f4 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 f4
+ |- (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- (((NUMERAL m) = (NUMERAL n)) = (m = n))
T c= c= cNUMERAL f0 cNUMERAL f1 c= f0 f1
+ |- (((!n. (((NUMERAL m) = (NUMERAL n)) = (m = n))) ==> ((\n. (((NUMERAL m) = (NUMERAL n)) = (m = n))) n)) = ((\n. (((NUMERAL m) = (NUMERAL n)) = (m = n))) n))
T c= c==> ! c= c= cNUMERAL f0 cNUMERAL b0 c= f0 b0 * / c= c= cNUMERAL f0 cNUMERAL b0 c= f0 b0 f1 * / c= c= cNUMERAL f0 cNUMERAL b0 c= f0 b0 f1
+ |- (T = (FINITE (e3 INSERT EMPTY)))
T c= cT cFINITE * * part cINSERT f0 part cEMPTY
+ |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> q')))) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> q'))))
T c= c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3
+ |- ((e3 IN EMPTY) ==> ((CARD EMPTY) = (NUMERAL _0)))
T c==> cIN f0 part cEMPTY c= cCARD part cEMPTY cNUMERAL c_0
+ |- (((!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))) ==> ((\e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))) e')) = ((\e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 b0 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 b0 f3 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 b0 f3
+ |- (((!g'. (!t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((e3 IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cCARD part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD part cEMPTY b2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cCARD part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD part cEMPTY b2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND b0 b1 b2 f1 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cCARD part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD part cEMPTY b2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND b0 b1 b2 f1
+ |- (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((F \/ t) = t)
T c= c\/ cF f0 f0
+ |- (((!e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3))))))) ==> ((\e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3))))))) e2)) = ((\e2. (!e3. ((((orthonormal e1) e2) e3) ==> ((~ (e1 = e2)) /\ ((~ (e1 = e3)) /\ (~ (e2 = e3))))))) e2))
T c= c==> ! ! c==> corthonormal f0 b0 b1 c/\ c~ c= f0 b0 c/\ c~ c= f0 b1 c~ c= b0 b1 * / ! c==> corthonormal f0 b0 b1 c/\ c~ c= f0 b0 c/\ c~ c= f0 b1 c~ c= b0 b1 f1 * / ! c==> corthonormal f0 b0 b1 c/\ c~ c= f0 b0 c/\ c~ c= f0 b1 c~ c= b0 b1 f1
+ |- ((\n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) n)
T * / c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 f0
+ |- ((x IN EMPTY) = F)
T c= cIN f0 part cEMPTY cF
+ |- (((!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))) ==> ((\s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))) s)) = ((\s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))) s))
T c= c==> ! c==> cFINITE b0 c= cCARD * * part cINSERT f0 b0 cCOND cIN f0 b0 cCARD b0 cSUC cCARD b0 * / c==> cFINITE b0 c= cCARD * * part cINSERT f0 b0 cCOND cIN f0 b0 cCARD b0 cSUC cCARD b0 f1 * / c==> cFINITE b0 c= cCARD * * part cINSERT f0 b0 cCOND cIN f0 b0 cCARD b0 cSUC cCARD b0 f1
+ |- (((((orthonormal e1) e2) e3) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = T)
T c= c==> corthonormal f0 f1 f2 c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cT
+ |- ((\e3. ((((orthonormal e1) e2) e3) ==> (independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) e3)
T * / c==> corthonormal f0 f1 b0 cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY f2
+ |- (((!p'. (!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = p') ==> ((p' ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = p') ==> ((p' ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = p') ==> ((p' ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV b0 c==> c==> b0 c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 * / ! c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV b0 c==> c==> b0 c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3 * / ! c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV b0 c==> c==> b0 c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3
+ |- ((((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))) ==> (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))) = (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))))
T c= c==> c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))
T c==> c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f4 c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 f4
+ (((orthonormal e1) e2) e3) |- ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))
T c==> corthonormal f0 f1 f2 c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ (((orthonormal e1) e2) e3) |- (((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c==> corthonormal f0 f1 f2 c= c==> cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((\n. (((BIT1 m) = (BIT1 n)) = (m = n))) n)
T * / c= c= cBIT1 f0 cBIT1 b0 c= f0 b0 f1
+ |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))))
T c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- (((e2 = e3) \/ (e2 IN EMPTY)) ==> ((CARD (e3 INSERT EMPTY)) = (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> c\/ c= f0 f1 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ (((orthonormal e1) e2) e3) |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))
T c==> corthonormal f0 f1 f2 c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((\x. ((FINITE (x INSERT s)) = (FINITE s))) x)
T * / c= cFINITE * * part cINSERT b0 f0 cFINITE f0 f1
+ |- ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q'))))
T c==> c= c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 f3 c==> c==> f3 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 f4
+ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)), (((orthonormal e1) e2) e3) |- (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) /\ (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c==> corthonormal f0 f1 f2 c/\ cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ (((orthonormal e1) e2) e3) |- ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))
T c==> corthonormal f0 f1 f2 c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((\v. (!b. (((b SUBSET v) /\ (b HAS_SIZE (dim v))) ==> ((independent b) = (v SUBSET (span b)))))) UNIV)
T * / ! c==> c/\ cSUBSET b1 b0 cHAS_SIZE b1 cdim b0 c= cindependent b1 cSUBSET b0 * part cspan b1 part cUNIV
+ |- ((\q'. (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q')
T * / c==> c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4
+ |- (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) |- (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) /\ ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((CARD (e3 INSERT EMPTY)) = (((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))))
T c= cCARD * * part cINSERT f0 part cEMPTY cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY
+ |- ((!e3. ((((orthonormal e1) e2) e3) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))) = T)
T c= ! c==> corthonormal f0 f1 b0 c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY part cUNIV cT
+ |- (((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (FINITE (e3 INSERT EMPTY))
T cFINITE * * part cINSERT f0 part cEMPTY
+ |- (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))
T c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
+ |- ((((e3 IN EMPTY) = (e3 IN EMPTY)) ==> (((e3 IN EMPTY) ==> ((CARD EMPTY) = t')) ==> (((~ (e3 IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (e3 IN EMPTY)) t') e'))))) = (((e3 IN EMPTY) ==> ((CARD EMPTY) = t')) ==> (((~ (e3 IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (e3 IN EMPTY)) t') e')))))
T c= c==> c= cIN f0 part cEMPTY cIN f0 part cEMPTY c==> c==> cIN f0 part cEMPTY c= cCARD part cEMPTY f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY f1 f2 c==> c==> cIN f0 part cEMPTY c= cCARD part cEMPTY f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY f1 f2
+ |- ((\g'. (!t'. (!e'. (((e2 IN (e3 INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (e3 INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 f2
+ |- ((\q'. (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q')
T * / c==> c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4
+ |- ((\s. (!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n))))) s)
T * / ! c= cHAS_SIZE b0 b1 c/\ cFINITE b0 c= cCARD b0 b1 f0
+ (((orthonormal e1) e2) e3) |- (((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> q')))) = (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> q'))))
T c==> corthonormal f0 f1 f2 c= c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f3 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV f3 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3
+ (e3 IN EMPTY) |- ((e3 IN EMPTY) /\ ((CARD EMPTY) = (NUMERAL _0)))
T c==> cIN f0 part cEMPTY c/\ cIN f0 part cEMPTY c= cCARD part cEMPTY cNUMERAL c_0
+ |- ((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = t')) ==> (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) t') e'))))
T c==> c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY f3 f4
+ |- (((!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))) ==> ((\y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))) y)) = ((\y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))) y))
T c= c==> ! ! c= cIN f0 * * part cINSERT b0 b1 c\/ c= f0 b0 cIN f0 b1 * / ! c= cIN f0 * * part cINSERT b0 b1 c\/ c= f0 b0 cIN f0 b1 f1 * / ! c= cIN f0 * * part cINSERT b0 b1 c\/ c= f0 b0 cIN f0 b1 f1
+ |- (((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))))
T c= c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((T = t) = t)
T c= c= cT f0 f0
+ |- (!p'. (!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c= c==> f0 f2 c==> f1 f3
+ |- (((!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))))) ==> ((\x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))))) x)) = ((\x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s)))))) x))
T c= c==> ! ! ! c= cIN b0 * * part cINSERT b1 b2 c\/ c= b0 b1 cIN b0 b2 * / ! ! c= cIN b0 * * part cINSERT b1 b2 c\/ c= b0 b1 cIN b0 b2 f0 * / ! ! c= cIN b0 * * part cINSERT b1 b2 c\/ c= b0 b1 cIN b0 b2 f0
+ |- ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> q')))
T c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 f3
+ |- (((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q')))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c= c==> f0 f2 c==> f1 f3 cT
+ |- (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((\q'. ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q')
T * / c==> c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4
+ |- ((T /\ t) = t)
T c= c/\ cT f0 f0
+ |- (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) = ((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0))))) ==> ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> q')))) = ((((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (((((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> q'))))
T c= c==> c= c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 f3 c==> c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c= cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 f3
+ |- ((~ (e3 IN EMPTY)) ==> ((SUC (CARD EMPTY)) = (SUC (NUMERAL _0))))
T c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY cSUC cNUMERAL c_0
+ (((orthonormal e1) e2) e3) |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c==> corthonormal f0 f1 f2 c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- (((!q'. (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) ==> ((\q'. (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q')) = ((\q'. (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = p') ==> ((p' ==> (((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV) = q')) ==> (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 * / c==> c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4 * / c==> c= c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV b0 c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> f3 b0 f4
+ (((orthonormal e1) e2) e3) |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))))
T c==> corthonormal f0 f1 f2 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
+ |- ((\p'. (!q'. ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) = p') ==> ((p' ==> ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) = q')) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = (p' ==> q')))))) p')
T * / ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV b0 c==> c==> b0 c= cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> b0 b1 f3
+ (((orthonormal e1) e2) e3) |- (((~ (e1 = e2)) ==> ((e1 = e2) = F)) = ((e1 = e2) = F))
T c==> corthonormal f0 f1 f2 c= c==> c~ c= f0 f1 c= c= f0 f1 cF c= c= f0 f1 cF
+ (((orthonormal e1) e2) e3) |- ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c==> corthonormal f0 f1 f2 c= c==> c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV))
T c==> cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ (((orthonormal e1) e2) e3) |- ((e1 = e3) = F)
T c==> corthonormal f0 f1 f2 c= c= f0 f2 cF
+ |- ((\s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) s)
T * / ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 f0
+ |- (((!m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))) ==> ((\m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))) m)) = ((\m. (!n. (((BIT1 m) = (BIT1 n)) = (m = n)))) m))
T c= c==> ! ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1 * / ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1 f0 * / ! c= c= cBIT1 b0 cBIT1 b1 c= b0 b1 f0
+ |- (((((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY))) ==> ((CARD (e2 INSERT (e3 INSERT EMPTY))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) ==> (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))) = (((~ ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) ==> ((SUC (CARD (e2 INSERT (e3 INSERT EMPTY)))) = e')) ==> ((((COND (e1 IN (e2 INSERT (e3 INSERT EMPTY)))) (CARD (e2 INSERT (e3 INSERT EMPTY)))) (SUC (CARD (e2 INSERT (e3 INSERT EMPTY))))) = (((COND ((e1 = e2) \/ ((e1 = e3) \/ (e1 IN EMPTY)))) (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e'))))
T c= c==> c==> c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND c\/ c= f0 f1 c\/ c= f0 f2 cIN f0 part cEMPTY cCOND c\/ c= f1 f2 cIN f1 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
+ |- ((((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> q')))) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> q'))))
T c= c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3
+ (((orthonormal e1) e2) e3) |- (~ (e1 = e3))
T c==> corthonormal f0 f1 f2 c~ c= f0 f2
+ |- ((\n. ((SUC (BIT0 n)) = (BIT1 n))) n)
T * / c= cSUC cBIT0 b0 cBIT1 b0 f0
+ |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ (((orthonormal e1) e2) e3) |- (~ (e1 = e2))
T c==> corthonormal f0 f1 f2 c~ c= f0 f1
+ |- (((!x. ((FINITE (x INSERT s)) = (FINITE s))) ==> ((\x. ((FINITE (x INSERT s)) = (FINITE s))) x)) = ((\x. ((FINITE (x INSERT s)) = (FINITE s))) x))
T c= c==> ! c= cFINITE * * part cINSERT b0 f0 cFINITE f0 * / c= cFINITE * * part cINSERT b0 f0 cFINITE f0 f1 * / c= cFINITE * * part cINSERT b0 f0 cFINITE f0 f1
+ |- (((((CARD (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)) = ((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV)) ==> (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) ==> ((span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = UNIV)))
T c= c==> c==> c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT1 cBIT1 c_0 cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV
+ |- ((CARD (e2 INSERT (e3 INSERT EMPTY))) = (((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))))
T c= cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY
+ |- (((e3 IN EMPTY) ==> ((CARD EMPTY) = t')) ==> (((~ (e3 IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (e3 IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (e3 IN EMPTY)) t') e'))))
T c==> c==> cIN f0 part cEMPTY c= cCARD part cEMPTY f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY f1 f2
+ |- ((!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))) = T)
T c= ! ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c==> c==> c~ f1 c= f3 b1 c= cCOND f0 f2 f3 cCOND f1 b0 b1 cT
+ |- (((~ ((e2 = e3) \/ (e2 IN EMPTY))) ==> ((SUC (CARD (e3 INSERT EMPTY))) = e')) ==> ((((COND (e2 IN (e3 INSERT EMPTY))) (CARD (e3 INSERT EMPTY))) (SUC (CARD (e3 INSERT EMPTY)))) = (((COND ((e2 = e3) \/ (e2 IN EMPTY))) (((COND (e3 IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e')))
T c==> c==> c~ c\/ c= f0 f1 cIN f0 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND c\/ c= f0 f1 cIN f0 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2
+ |- (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) = p') ==> ((p' ==> (((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))))) = q')) ==> (((((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) SUBSET UNIV) /\ ((e1 INSERT (e2 INSERT (e3 INSERT EMPTY))) HAS_SIZE (dim UNIV))) ==> ((independent (e1 INSERT (e2 INSERT (e3 INSERT EMPTY)))) = (UNIV SUBSET (span (e1 INSERT (e2 INSERT (e3 INSERT EMPTY))))))) = (p' ==> q'))))
T c==> c= c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV f3 c==> c==> f3 c= c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= c==> c/\ cSUBSET * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY part cUNIV cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdim part cUNIV c= cindependent * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUBSET part cUNIV * part cspan * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> f3 f4
