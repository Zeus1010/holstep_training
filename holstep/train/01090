N CEXP_COMPLEX
C |- (!r. (!t. ((cexp (complex (r , t))) = ((complex_mul (Cx (exp r))) (complex ((cos t) , (sin t)))))))
T c= ccexp ccomplex c, f0 f1 ccomplex_mul cCx cexp f0 ccomplex c, ccos f1 csin f1
D TRUTH
A |- T
T cT
D RE
A |- ((Re (complex (x , y))) = x)
T c= cRe ccomplex c, f0 f1 f0
D IM
A |- ((Im (complex (x , y))) = y)
T c= cIm ccomplex c, f0 f1 f1
D COMPLEX_EXPAND
A |- (!z. (z = ((vector_add (Cx (Re z))) ((complex_mul ii) (Cx (Im z))))))
T c= f0 cvector_add cCx cRe f0 ccomplex_mul cii cCx cIm f0
D COMPLEX_TRAD
A |- (!x. (!y. ((complex (x , y)) = ((vector_add (Cx x)) ((complex_mul ii) (Cx y))))))
T c= ccomplex c, f0 f1 cvector_add cCx f0 ccomplex_mul cii cCx f1
D CEXP_ADD
A |- (!w. (!z. ((cexp ((vector_add w) z)) = ((complex_mul (cexp w)) (cexp z)))))
T c= ccexp cvector_add f0 f1 ccomplex_mul ccexp f0 ccexp f1
D CEXP_EULER
A |- (!z. ((cexp ((complex_mul ii) z)) = ((vector_add (ccos z)) ((complex_mul ii) (csin z)))))
T c= ccexp ccomplex_mul cii f0 cvector_add cccos f0 ccomplex_mul cii ccsin f0
D CX_EXP
A |- (!x. ((Cx (exp x)) = (cexp (Cx x))))
T c= cCx cexp f0 ccexp cCx f0
D CX_SIN
A |- (!x. ((Cx (sin x)) = (csin (Cx x))))
T c= cCx csin f0 ccsin cCx f0
D CX_COS
A |- (!x. ((Cx (cos x)) = (ccos (Cx x))))
T c= cCx ccos f0 cccos cCx f0
