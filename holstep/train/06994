N Seq.uniq_perm_eq
C |- (!s1. (!s2. ((uniq s1) ==> ((uniq s2) ==> ((!x. (((MEM x) s1) = ((MEM x) s2))) ==> ((perm_eq s1) s2))))))
T c==> cuniq f0 c==> cuniq f1 c==> ! c= cMEM b0 f0 cMEM b0 f1 cperm_eq f0 f1
D Seq.allP
A |- (!a. (!s. ((!x. (((MEM x) s) ==> (a x))) = ((all a) s))))
T c= ! c==> cMEM b0 f0 * f1 b0 call f1 f0
D Seq.count_uniq_mem
A |- (!s. (!x. ((uniq s) ==> (((count (pred1 x)) s) = (((COND ((MEM x) s)) (NUMERAL (BIT1 _0))) (NUMERAL _0))))))
T c==> cuniq f0 c= ccount * part cpred1 f1 f0 cCOND cMEM f1 f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0
D Seq.same_count1
A |- (!s1. (!x. (!s2. ((((same_count1 s1) s2) x) = (((count (pred1 x)) s1) = ((count (pred1 x)) s2))))))
T c= csame_count1 f0 f1 f2 c= ccount * part cpred1 f2 f0 ccount * part cpred1 f2 f1
D Seq.perm_eq
A |- (!s1. (!s2. (((perm_eq s1) s2) = ((all ((same_count1 s1) s2)) ((cat s1) s2)))))
T c= cperm_eq f0 f1 call * * part csame_count1 f0 f1 ccat f0 f1
+ (!x. (((MEM x) s1) = ((MEM x) s2))), (uniq s1), (uniq s2), ((MEM x) ((cat s1) s2)) |- (((MEM x) ((cat s1) s2)) /\ (((count (pred1 x)) s1) = ((count (pred1 x)) s2)))
T c==> ! c= cMEM b0 f0 cMEM b0 f1 c==> cuniq f0 c==> cuniq f1 c==> cMEM f2 ccat f0 f1 c/\ cMEM f2 ccat f0 f1 c= ccount * part cpred1 f2 f0 ccount * part cpred1 f2 f1
+ |- (((all a) s) = (!x. (((MEM x) s) ==> (a x))))
T c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0
+ |- ((\s1. (!x. (!s2. ((((same_count1 s1) s2) x) = (((count (pred1 x)) s1) = ((count (pred1 x)) s2)))))) s1)
T * / ! ! c= csame_count1 b0 b2 b1 c= ccount * part cpred1 b1 b0 ccount * part cpred1 b1 b2 f0
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ (((all a) s) = (!x. (((MEM x) s) ==> (a x)))) |- ((!x. (((MEM x) s) ==> (a x))) = ((all a) s))
T c==> c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0 c= ! c==> cMEM b0 f1 * f0 b0 call f0 f1
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ |- ((\x. (!s2. ((((same_count1 s1) s2) x) = (((count (pred1 x)) s1) = ((count (pred1 x)) s2))))) x)
T * / ! c= csame_count1 f0 b1 b0 c= ccount * part cpred1 b0 f0 ccount * part cpred1 b0 b1 f1
+ |- ((\x. ((uniq s) ==> (((count (pred1 x)) s) = (((COND ((MEM x) s)) (NUMERAL (BIT1 _0))) (NUMERAL _0))))) x)
T * / c==> cuniq f0 c= ccount * part cpred1 b0 f0 cCOND cMEM b0 f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 f1
+ |- ((!x. (((MEM x) ((cat s1) s2)) ==> (((count (pred1 x)) s1) = ((count (pred1 x)) s2)))) = (!x. (((MEM x) ((cat s1) s2)) ==> (((same_count1 s1) s2) x))))
T c= ! c==> cMEM b0 ccat f0 f1 c= ccount * part cpred1 b0 f0 ccount * part cpred1 b0 f1 ! c==> cMEM b0 ccat f0 f1 csame_count1 f0 f1 b0
+ |- (((!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) ==> ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)) = ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s))
T c= c==> ! c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
+ |- (((!x. (!s2. ((((same_count1 s1) s2) x) = (((count (pred1 x)) s1) = ((count (pred1 x)) s2))))) ==> ((\x. (!s2. ((((same_count1 s1) s2) x) = (((count (pred1 x)) s1) = ((count (pred1 x)) s2))))) x)) = ((\x. (!s2. ((((same_count1 s1) s2) x) = (((count (pred1 x)) s1) = ((count (pred1 x)) s2))))) x))
T c= c==> ! ! c= csame_count1 f0 b1 b0 c= ccount * part cpred1 b0 f0 ccount * part cpred1 b0 b1 * / ! c= csame_count1 f0 b1 b0 c= ccount * part cpred1 b0 f0 ccount * part cpred1 b0 b1 f1 * / ! c= csame_count1 f0 b1 b0 c= ccount * part cpred1 b0 f0 ccount * part cpred1 b0 b1 f1
+ (!x. (((MEM x) s1) = ((MEM x) s2))), (uniq s2) |- ((uniq s2) /\ ((((count (pred1 x)) s2) = (((COND ((MEM x) s2)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) ==> ((((COND ((MEM x) s1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = ((count (pred1 x)) s2))))
T c==> ! c= cMEM b0 f0 cMEM b0 f1 c==> cuniq f1 c/\ cuniq f1 c==> c= ccount * part cpred1 f2 f1 cCOND cMEM f2 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c= cCOND cMEM f2 f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount * part cpred1 f2 f1
+ (!x. (((MEM x) s1) = ((MEM x) s2))), (uniq s1), (uniq s2) |- ((((MEM x) ((cat s1) s2)) ==> (((count (pred1 x)) s1) = ((count (pred1 x)) s2))) = T)
T c==> ! c= cMEM b0 f0 cMEM b0 f1 c==> cuniq f0 c==> cuniq f1 c= c==> cMEM f2 ccat f0 f1 c= ccount * part cpred1 f2 f0 ccount * part cpred1 f2 f1 cT
+ (((count (pred1 x)) s2) = (((COND ((MEM x) s2)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) |- (((((COND ((MEM x) s1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND ((MEM x) s2)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) = ((((COND ((MEM x) s1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = ((count (pred1 x)) s2)))
T c==> c= ccount * part cpred1 f0 f1 cCOND cMEM f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c= c= cCOND cMEM f0 f2 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cMEM f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c= cCOND cMEM f0 f2 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount * part cpred1 f0 f1
+ |- ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)
T * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
- |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- (!x. (((MEM x) s1) = ((MEM x) s2))) |- (((((COND ((MEM x) s2)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND ((MEM x) s2)) (NUMERAL (BIT1 _0))) (NUMERAL _0))) = ((((COND ((MEM x) s1)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND ((MEM x) s2)) (NUMERAL (BIT1 _0))) (NUMERAL _0))))
T c==> ! c= cMEM b0 f0 cMEM b0 f1 c= c= cCOND cMEM f2 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cMEM f2 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c= cCOND cMEM f2 f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cMEM f2 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0
- |- (T = ((((COND ((MEM x) s2)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) = (((COND ((MEM x) s2)) (NUMERAL (BIT1 _0))) (NUMERAL _0))))
T c= cT c= cCOND cMEM f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cCOND cMEM f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0
- (uniq s2) |- (T = (uniq s2))
T c==> cuniq f0 c= cT cuniq f0
- (uniq s) |- ((uniq s) /\ (((count (pred1 x)) s) = (((COND ((MEM x) s)) (NUMERAL (BIT1 _0))) (NUMERAL _0))))
T c==> cuniq f0 c/\ cuniq f0 c= ccount * part cpred1 f1 f0 cCOND cMEM f1 f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- (uniq s2) |- ((uniq s2) = T)
T c==> cuniq f0 c= cuniq f0 cT
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
