N AFF_DIM_CONIC_HULL
C |- (!s. ((aff_dim ((hull conic) s)) = (((COND ((s = EMPTY) \/ ((vec (NUMERAL _0)) IN ((hull affine) s)))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0)))))))
T c= caff_dim * * part chull part cconic f0 cCOND c\/ c= f0 part cEMPTY cIN cvec cNUMERAL c_0 * * part chull part caffine f0 caff_dim f0 cint_add caff_dim f0 cint_of_num cNUMERAL cBIT1 c_0
D TRUTH
A |- T
T cT
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D NOT_IN_EMPTY
A |- (!x. (~ (x IN EMPTY)))
T c~ cIN f0 part cEMPTY
D AFFINE_HULL_EMPTY
A |- (((hull affine) EMPTY) = EMPTY)
T c= * * part chull part caffine part cEMPTY part cEMPTY
D AFF_DIM_AFFINE_HULL
A |- (!s. ((aff_dim ((hull affine) s)) = (aff_dim s)))
T c= caff_dim * * part chull part caffine f0 caff_dim f0
D AFFINE_HULL_CONIC_HULL
A |- (!s. (((hull affine) ((hull conic) s)) = (((COND (s = EMPTY)) EMPTY) ((hull affine) ((vec (NUMERAL _0)) INSERT s)))))
T c= * * part chull part caffine * * part chull part cconic f0 * * * part cCOND c= f0 part cEMPTY part cEMPTY * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0
D AFF_DIM_INSERT
A |- (!a. (!s. ((aff_dim (a INSERT s)) = (((COND (a IN ((hull affine) s))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0))))))))
T c= caff_dim * * part cINSERT f0 f1 cCOND cIN f0 * * part chull part caffine f1 caff_dim f1 cint_add caff_dim f1 cint_of_num cNUMERAL cBIT1 c_0
+ |- (((!s. ((aff_dim (a INSERT s)) = (((COND (a IN ((hull affine) s))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0))))))) ==> ((\s. ((aff_dim (a INSERT s)) = (((COND (a IN ((hull affine) s))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0))))))) s)) = ((\s. ((aff_dim (a INSERT s)) = (((COND (a IN ((hull affine) s))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0))))))) s))
T c= c==> ! c= caff_dim * * part cINSERT f0 b0 cCOND cIN f0 * * part chull part caffine b0 caff_dim b0 cint_add caff_dim b0 cint_of_num cNUMERAL cBIT1 c_0 * / c= caff_dim * * part cINSERT f0 b0 cCOND cIN f0 * * part chull part caffine b0 caff_dim b0 cint_add caff_dim b0 cint_of_num cNUMERAL cBIT1 c_0 f1 * / c= caff_dim * * part cINSERT f0 b0 cCOND cIN f0 * * part chull part caffine b0 caff_dim b0 cint_add caff_dim b0 cint_of_num cNUMERAL cBIT1 c_0 f1
+ ((~ (s = EMPTY)) ==> ((aff_dim (((COND (s = EMPTY)) EMPTY) ((hull affine) ((vec (NUMERAL _0)) INSERT s)))) = (((COND ((s = EMPTY) \/ ((vec (NUMERAL _0)) IN ((hull affine) s)))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0))))))), ((s = EMPTY) ==> ((aff_dim (((COND (s = EMPTY)) EMPTY) ((hull affine) ((vec (NUMERAL _0)) INSERT s)))) = (((COND ((s = EMPTY) \/ ((vec (NUMERAL _0)) IN ((hull affine) s)))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0))))))) |- ((aff_dim (((COND (s = EMPTY)) EMPTY) ((hull affine) ((vec (NUMERAL _0)) INSERT s)))) = (((COND ((s = EMPTY) \/ ((vec (NUMERAL _0)) IN ((hull affine) s)))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0))))))
T c==> c==> c~ c= f0 part cEMPTY c= caff_dim * * * part cCOND c= f0 part cEMPTY part cEMPTY * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0 cCOND c\/ c= f0 part cEMPTY cIN cvec cNUMERAL c_0 * * part chull part caffine f0 caff_dim f0 cint_add caff_dim f0 cint_of_num cNUMERAL cBIT1 c_0 c==> c==> c= f0 part cEMPTY c= caff_dim * * * part cCOND c= f0 part cEMPTY part cEMPTY * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0 cCOND c\/ c= f0 part cEMPTY cIN cvec cNUMERAL c_0 * * part chull part caffine f0 caff_dim f0 cint_add caff_dim f0 cint_of_num cNUMERAL cBIT1 c_0 c= caff_dim * * * part cCOND c= f0 part cEMPTY part cEMPTY * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0 cCOND c\/ c= f0 part cEMPTY cIN cvec cNUMERAL c_0 * * part chull part caffine f0 caff_dim f0 cint_add caff_dim f0 cint_of_num cNUMERAL cBIT1 c_0
+ |- ((aff_dim s) = (aff_dim ((hull affine) s)))
T c= caff_dim f0 caff_dim * * part chull part caffine f0
+ |- (((!t. (t \/ (~ t))) ==> ((\t. (t \/ (~ t))) (s = EMPTY))) = ((\t. (t \/ (~ t))) (s = EMPTY)))
T c= c==> ! c\/ b0 c~ b0 * / c\/ b0 c~ b0 c= f0 part cEMPTY * / c\/ b0 c~ b0 c= f0 part cEMPTY
- (EMPTY = s) |- (s = EMPTY)
T c==> c= part cEMPTY f0 c= f0 part cEMPTY
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ (~ (s = EMPTY)) |- (((aff_dim ((hull affine) ((vec (NUMERAL _0)) INSERT s))) = (((COND ((vec (NUMERAL _0)) IN ((hull affine) s))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0)))))) = ((aff_dim (((COND (s = EMPTY)) EMPTY) ((hull affine) ((vec (NUMERAL _0)) INSERT s)))) = (((COND ((s = EMPTY) \/ ((vec (NUMERAL _0)) IN ((hull affine) s)))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0)))))))
T c==> c~ c= f0 part cEMPTY c= c= caff_dim * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0 cCOND cIN cvec cNUMERAL c_0 * * part chull part caffine f0 caff_dim f0 cint_add caff_dim f0 cint_of_num cNUMERAL cBIT1 c_0 c= caff_dim * * * part cCOND c= f0 part cEMPTY part cEMPTY * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0 cCOND c\/ c= f0 part cEMPTY cIN cvec cNUMERAL c_0 * * part chull part caffine f0 caff_dim f0 cint_add caff_dim f0 cint_of_num cNUMERAL cBIT1 c_0
+ ((aff_dim ((hull affine) s)) = (aff_dim s)) |- ((aff_dim s) = (aff_dim ((hull affine) s)))
T c==> c= caff_dim * * part chull part caffine f0 caff_dim f0 c= caff_dim f0 caff_dim * * part chull part caffine f0
+ |- ((s = EMPTY) ==> ((aff_dim (((COND (s = EMPTY)) EMPTY) ((hull affine) ((vec (NUMERAL _0)) INSERT s)))) = (((COND ((s = EMPTY) \/ ((vec (NUMERAL _0)) IN ((hull affine) s)))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0)))))))
T c==> c= f0 part cEMPTY c= caff_dim * * * part cCOND c= f0 part cEMPTY part cEMPTY * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0 cCOND c\/ c= f0 part cEMPTY cIN cvec cNUMERAL c_0 * * part chull part caffine f0 caff_dim f0 cint_add caff_dim f0 cint_of_num cNUMERAL cBIT1 c_0
+ (s = EMPTY) |- (T = ((aff_dim (((COND (s = EMPTY)) EMPTY) ((hull affine) ((vec (NUMERAL _0)) INSERT s)))) = (((COND ((s = EMPTY) \/ ((vec (NUMERAL _0)) IN ((hull affine) s)))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0)))))))
T c==> c= f0 part cEMPTY c= cT c= caff_dim * * * part cCOND c= f0 part cEMPTY part cEMPTY * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0 cCOND c\/ c= f0 part cEMPTY cIN cvec cNUMERAL c_0 * * part chull part caffine f0 caff_dim f0 cint_add caff_dim f0 cint_of_num cNUMERAL cBIT1 c_0
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
- (~ (s = EMPTY)) |- (((~ (EMPTY = s)) ==> ((EMPTY = s) = F)) = ((EMPTY = s) = F))
T c==> c~ c= f0 part cEMPTY c= c==> c~ c= part cEMPTY f0 c= c= part cEMPTY f0 cF c= c= part cEMPTY f0 cF
- (~ (s = EMPTY)) |- (~ (EMPTY = s))
T c==> c~ c= f0 part cEMPTY c~ c= part cEMPTY f0
- |- (T = ((aff_dim ((hull affine) ((vec (NUMERAL _0)) INSERT s))) = (((COND ((vec (NUMERAL _0)) IN ((hull affine) s))) (aff_dim s)) ((int_add (aff_dim s)) (int_of_num (NUMERAL (BIT1 _0)))))))
T c= cT c= caff_dim * * part chull part caffine * * part cINSERT cvec cNUMERAL c_0 f0 cCOND cIN cvec cNUMERAL c_0 * * part chull part caffine f0 caff_dim f0 cint_add caff_dim f0 cint_of_num cNUMERAL cBIT1 c_0
- (s = EMPTY) |- (EMPTY = s)
T c==> c= f0 part cEMPTY c= part cEMPTY f0
- (~ (s = EMPTY)) |- ((EMPTY = s) = F)
T c==> c~ c= f0 part cEMPTY c= c= part cEMPTY f0 cF
