N Hypermap_and_fan.PAIR_IN_DART1_OF_FAN_IMP_NOT_EQ
C |- (!V. (!E. (!v. (!w. (((FAN ((vec (NUMERAL _0)) , (V , E))) /\ ((v , w) IN (dart1_of_fan (V , E)))) ==> (~ (v = w)))))))
T c==> c/\ cFAN c, cvec cNUMERAL c_0 c, f0 f1 cIN c, f2 f3 * part cdart1_of_fan c, f0 f1 c~ c= f2 f3
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D PAIR_EQ
A |- (!x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))))
T c= c= c, f0 f1 c, f2 f3 c/\ c= f0 f2 c= f1 f3
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D IN
A |- (!P. (!x. ((x IN P) = (P x))))
T c= cIN f0 f1 * f1 f0
D EXTENSION
A |- (!s. (!t. ((s = t) = (!x. ((x IN s) = (x IN t))))))
T c= c= f0 f1 ! c= cIN b0 f0 cIN b0 f1
D Misc_defs_and_lemmas.IN_ELIM_THM'
A |- ((!P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) /\ ((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x))))))))
T c/\ ! ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 c/\ ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
D NOT_IN_EMPTY
A |- (!x. (~ (x IN EMPTY)))
T c~ cIN f0 part cEMPTY
D IN_INSERT
A |- (!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))))
T c= cIN f0 * * part cINSERT f1 f2 c\/ c= f0 f1 cIN f0 f2
D HAS_SIZE
A |- (!s. (!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))))
T c= cHAS_SIZE f0 f1 c/\ cFINITE f0 c= cCARD f0 f1
D Hypermap.CARD_SINGLETON
A |- (!x. ((CARD (x INSERT EMPTY)) = (NUMERAL (BIT1 _0))))
T c= cCARD * * part cINSERT f0 part cEMPTY cNUMERAL cBIT1 c_0
D Fan.graph
A |- (!E. ((graph E) = (!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))))))
T c= cgraph f0 ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0
D Fan.FAN
A |- (!x. (!V. (!E. ((FAN (x , (V , E))) = (((UNIONS E) SUBSET V) /\ ((graph E) /\ ((fan1 (x , (V , E))) /\ ((fan2 (x , (V , E))) /\ ((fan6 (x , (V , E))) /\ (fan7 (x , (V , E))))))))))))
T c= cFAN c, f0 c, f1 f2 c/\ cSUBSET * part cUNIONS f2 f1 c/\ cgraph f2 c/\ cfan1 c, f0 c, f1 f2 c/\ cfan2 c, f0 c, f1 f2 c/\ cfan6 c, f0 c, f1 f2 cfan7 c, f0 c, f1 f2
D Fan_misc.dart1_of_fan
A |- (!V. (!E. ((dart1_of_fan (V , E)) = (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w)))))))))
T c= * part cdart1_of_fan c, f0 f1 * part cGSPEC / c? / c? / cSETSPEC b0 cIN * * part cINSERT b1 * * part cINSERT b2 part cEMPTY f1 c, b1 b2
+ |- ((F ==> (~ A)) ==> (A ==> (~ F)))
T c==> c==> cF c~ f0 c==> f0 c~ cF
+ |- ((t \/ F) = t)
T c= c\/ f0 cF f0
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ |- (((!q'. ((((v , w) = (v' , w')) = p') ==> ((p' ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = q')) ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (p' ==> q'))))) ==> ((\q'. ((((v , w) = (v' , w')) = p') ==> ((p' ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = q')) ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (p' ==> q'))))) q')) = ((\q'. ((((v , w) = (v' , w')) = p') ==> ((p' ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = q')) ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c= c, f0 f1 c, f2 f3 f4 c==> c==> f4 c= c==> c==> * f5 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 b0 c= c==> c= c, f0 f1 c, f2 f3 c==> c==> * f5 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> f4 b0 * / c==> c= c= c, f0 f1 c, f2 f3 f4 c==> c==> f4 c= c==> c==> * f5 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 b0 c= c==> c= c, f0 f1 c, f2 f3 c==> c==> * f5 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> f4 b0 f6 * / c==> c= c= c, f0 f1 c, f2 f3 f4 c==> c==> f4 c= c==> c==> * f5 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 b0 c= c==> c= c, f0 f1 c, f2 f3 c==> c==> * f5 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> f4 b0 f6
+ |- ((\x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) x)
T * / c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 f1
- |- (~ ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT1 _0)))))
T c~ c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- |- (((!q'. ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = p') ==> ((p' ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (p' ==> q'))))) ==> ((\q'. ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = p') ==> ((p' ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (p' ==> q'))))) q')) = ((\q'. ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = p') ==> ((p' ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f2 c==> c==> f2 c= c~ c= f0 f1 b0 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> f2 b0 * / c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f2 c==> c==> f2 c= c~ c= f0 f1 b0 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> f2 b0 f3 * / c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f2 c==> c==> f2 c= c~ c= f0 f1 b0 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> f2 b0 f3
- |- ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))
T c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3
+ |- (((!x. ((CARD (x INSERT EMPTY)) = (NUMERAL (BIT1 _0)))) ==> ((\x. ((CARD (x INSERT EMPTY)) = (NUMERAL (BIT1 _0)))) x)) = ((\x. ((CARD (x INSERT EMPTY)) = (NUMERAL (BIT1 _0)))) x))
T c= c==> ! c= cCARD * * part cINSERT b0 part cEMPTY cNUMERAL cBIT1 c_0 * / c= cCARD * * part cINSERT b0 part cEMPTY cNUMERAL cBIT1 c_0 f0 * / c= cCARD * * part cINSERT b0 part cEMPTY cNUMERAL cBIT1 c_0 f0
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ |- ((!E. (!v. (!w. (((FAN ((vec (NUMERAL _0)) , (V , E))) /\ ((v , w) IN (dart1_of_fan (V , E)))) ==> (~ (v = w)))))) = T)
T c= ! ! ! c==> c/\ cFAN c, cvec cNUMERAL c_0 c, f0 b0 cIN c, b1 b2 * part cdart1_of_fan c, f0 b0 c~ c= b1 b2 cT
+ (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))), (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))), ((v' INSERT (w' INSERT EMPTY)) IN E) |- (~ (v = w))
T c==> c/\ cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c= c, f3 f4 c, f0 f1 c==> c/\ cSUBSET * part cUNIONS f2 f5 c/\ ! c==> * f2 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f5 f2 c/\ cfan2 c, cvec cNUMERAL c_0 c, f5 f2 c/\ cfan6 c, cvec cNUMERAL c_0 c, f5 f2 cfan7 c, cvec cNUMERAL c_0 c, f5 f2 c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c~ c= f3 f4
- |- ((\x. ((x IN (\y. (p y))) = (p x))) x)
T * / c= cIN b0 / * f0 b1 * f0 b0 f1
- |- ((((v = v') /\ (w = w')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (((v = v') /\ (w = w')) ==> q')))
T c==> c==> c/\ c= f0 f1 c= f2 f3 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 f4 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> c/\ c= f0 f1 c= f2 f3 f4
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))), ((\v'. (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))))) v') |- (((\v'. (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))))) v') /\ (~ (v = w)))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 c==> * / c? / c/\ cIN * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0 c= c, f2 f3 c, b0 b1 f4 c/\ * / c? / c/\ cIN * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0 c= c, f2 f3 c, b0 b1 f4 c~ c= f2 f3
- |- (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> ((~ (v' = w')) = (~ (v' = w'))))
T c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= c~ c= f0 f1 c~ c= f0 f1
- |- ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x)))))
T c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
- |- (((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> ((~ (v' = w')) = (~ (v' = w')))) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))
T c= c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= c~ c= f0 f1 c~ c= f0 f1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1
+ |- (((!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))) ==> ((\y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))) y)) = ((\y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))) y))
T c= c==> ! ! ! c= c= c, f0 b0 c, b1 b2 c/\ c= f0 b1 c= b0 b2 * / ! ! c= c= c, f0 b0 c, b1 b2 c/\ c= f0 b1 c= b0 b2 f1 * / ! ! c= c= c, f0 b0 c, b1 b2 c/\ c= f0 b1 c= b0 b2 f1
- (?v'. (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))))), (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- ((?v'. (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))))) /\ (~ (v = w)))
T c==> c? / c? / c/\ cIN * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0 c= c, f1 f2 c, b0 b1 c==> c/\ cSUBSET * part cUNIONS f0 f3 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f3 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f3 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f3 f0 cfan7 c, cvec cNUMERAL c_0 c, f3 f0 c/\ c? / c? / c/\ cIN * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0 c= c, f1 f2 c, b0 b1 c~ c= f1 f2
- |- (((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> q')))) = ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> q'))))
T c= c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= c~ c= f0 f1 f2 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f2 c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= c~ c= f0 f1 f2 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f2
+ |- (((!s. (!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n))))) ==> ((\s. (!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n))))) s)) = ((\s. (!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n))))) s))
T c= c==> ! ! c= cHAS_SIZE b0 b1 c/\ cFINITE b0 c= cCARD b0 b1 * / ! c= cHAS_SIZE b0 b1 c/\ cFINITE b0 c= cCARD b0 b1 f0 * / ! c= cHAS_SIZE b0 b1 c/\ cFINITE b0 c= cCARD b0 b1 f0
- |- ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x)
T * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1
+ |- (((!E. ((dart1_of_fan (V , E)) = (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w)))))))) ==> ((\E. ((dart1_of_fan (V , E)) = (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w)))))))) E)) = ((\E. ((dart1_of_fan (V , E)) = (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w)))))))) E))
T c= c==> ! c= * part cdart1_of_fan c, f0 b0 * part cGSPEC / c? / c? / cSETSPEC b1 cIN * * part cINSERT b2 * * part cINSERT b3 part cEMPTY b0 c, b2 b3 * / c= * part cdart1_of_fan c, f0 b0 * part cGSPEC / c? / c? / cSETSPEC b1 cIN * * part cINSERT b2 * * part cINSERT b3 part cEMPTY b0 c, b2 b3 f1 * / c= * part cdart1_of_fan c, f0 b0 * part cGSPEC / c? / c? / cSETSPEC b1 cIN * * part cINSERT b2 * * part cINSERT b3 part cEMPTY b0 c, b2 b3 f1
- |- ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> q')))
T c==> c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= c~ c= f0 f1 f2 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f2
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- ((?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w')))) ==> (~ (v = w)))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 c==> c? / c/\ cIN * * part cINSERT f2 * * part cINSERT b0 part cEMPTY f0 c= c, f3 f4 c, f2 b0 c~ c= f3 f4
+ |- ((\p'. (!q'. ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = p') ==> ((p' ==> ((~ (v = w)) = q')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (p' ==> q')))))) p')
T * / ! c==> c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b0 c==> c==> b0 c= c~ c= f3 f4 b1 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> b0 b1 f5
+ |- (((!q'. ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = p') ==> ((p' ==> ((~ (v = w)) = q')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (p' ==> q'))))) ==> ((\q'. ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = p') ==> ((p' ==> ((~ (v = w)) = q')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (p' ==> q'))))) q')) = ((\q'. ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = p') ==> ((p' ==> ((~ (v = w)) = q')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f3 c==> c==> f3 c= c~ c= f4 f5 b0 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 b0 * / c==> c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f3 c==> c==> f3 c= c~ c= f4 f5 b0 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 b0 f6 * / c==> c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f3 c==> c==> f3 c= c~ c= f4 f5 b0 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 b0 f6
- |- (((!p'. (!q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 b1 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> b0 b1 * / ! c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 b1 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> b0 b1 f5 * / ! c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 b1 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> b0 b1 f5
+ |- (((!p'. (!q'. ((((v' INSERT (w' INSERT EMPTY)) IN E) = p') ==> ((p' ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((v' INSERT (w' INSERT EMPTY)) IN E) = p') ==> ((p' ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((v' INSERT (w' INSERT EMPTY)) IN E) = p') ==> ((p' ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 b0 c==> c==> b0 c= c==> c= c, f3 f4 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 b1 c= c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c==> c= c, f3 f4 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> b0 b1 * / ! c==> c= cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 b0 c==> c==> b0 c= c==> c= c, f3 f4 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 b1 c= c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c==> c= c, f3 f4 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> b0 b1 f5 * / ! c==> c= cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 b0 c==> c==> b0 c= c==> c= c, f3 f4 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 b1 c= c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c==> c= c, f3 f4 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> b0 b1 f5
- |- ((\q'. ((((v = v') /\ (w = w')) = p') ==> ((p' ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (p' ==> q'))))) q')
T * / c==> c= c/\ c= f0 f1 c= f2 f3 f4 c==> c==> f4 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 b0 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> f4 b0 f5
- |- ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x)
T * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1
- |- ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = p') ==> ((p' ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (p' ==> q'))))
T c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f2 c==> c==> f2 c= c~ c= f0 f1 f3 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> f2 f3
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- ((((\v'. (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))))) v') ==> (~ (v = w))) = T)
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 c= c==> * / c? / c/\ cIN * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0 c= c, f2 f3 c, b0 b1 f4 c~ c= f2 f3 cT
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((!x. (!V. (!E. ((FAN (x , (V , E))) = (((UNIONS E) SUBSET V) /\ ((graph E) /\ ((fan1 (x , (V , E))) /\ ((fan2 (x , (V , E))) /\ ((fan6 (x , (V , E))) /\ (fan7 (x , (V , E)))))))))))) ==> ((\x. (!V. (!E. ((FAN (x , (V , E))) = (((UNIONS E) SUBSET V) /\ ((graph E) /\ ((fan1 (x , (V , E))) /\ ((fan2 (x , (V , E))) /\ ((fan6 (x , (V , E))) /\ (fan7 (x , (V , E)))))))))))) x)) = ((\x. (!V. (!E. ((FAN (x , (V , E))) = (((UNIONS E) SUBSET V) /\ ((graph E) /\ ((fan1 (x , (V , E))) /\ ((fan2 (x , (V , E))) /\ ((fan6 (x , (V , E))) /\ (fan7 (x , (V , E)))))))))))) x))
T c= c==> ! ! ! c= cFAN c, b0 c, b1 b2 c/\ cSUBSET * part cUNIONS b2 b1 c/\ cgraph b2 c/\ cfan1 c, b0 c, b1 b2 c/\ cfan2 c, b0 c, b1 b2 c/\ cfan6 c, b0 c, b1 b2 cfan7 c, b0 c, b1 b2 * / ! ! c= cFAN c, b0 c, b1 b2 c/\ cSUBSET * part cUNIONS b2 b1 c/\ cgraph b2 c/\ cfan1 c, b0 c, b1 b2 c/\ cfan2 c, b0 c, b1 b2 c/\ cfan6 c, b0 c, b1 b2 cfan7 c, b0 c, b1 b2 f0 * / ! ! c= cFAN c, b0 c, b1 b2 c/\ cSUBSET * part cUNIONS b2 b1 c/\ cgraph b2 c/\ cfan1 c, b0 c, b1 b2 c/\ cfan2 c, b0 c, b1 b2 c/\ cfan6 c, b0 c, b1 b2 cfan7 c, b0 c, b1 b2 f0
+ |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ |- ((\p'. (!q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = (p' ==> q')))))) p')
T * / ! c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b1 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> b0 b1 f3
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- ((((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))) ==> (~ (v = w)))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 c==> c/\ cIN * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f0 c= c, f4 f5 c, f2 f3 c~ c= f4 f5
+ (v' = w') |- ((~ ((FINITE (w' INSERT EMPTY)) /\ ((CARD (w' INSERT EMPTY)) = (NUMERAL (BIT0 (BIT1 _0)))))) = (~ ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))))
T c==> c= f0 f1 c= c~ c/\ cFINITE * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w')))), (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- (~ (v = w))
T c==> c? / c/\ cIN * * part cINSERT f0 * * part cINSERT b0 part cEMPTY f1 c= c, f2 f3 c, f0 b0 c==> c/\ cSUBSET * part cUNIONS f1 f4 c/\ ! c==> * f1 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f4 f1 c/\ cfan2 c, cvec cNUMERAL c_0 c, f4 f1 c/\ cfan6 c, cvec cNUMERAL c_0 c, f4 f1 cfan7 c, cvec cNUMERAL c_0 c, f4 f1 c~ c= f2 f3
- (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w')))), (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- ((?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w')))) /\ (~ (v = w)))
T c==> c? / c/\ cIN * * part cINSERT f0 * * part cINSERT b0 part cEMPTY f1 c= c, f2 f3 c, f0 b0 c==> c/\ cSUBSET * part cUNIONS f1 f4 c/\ ! c==> * f1 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f4 f1 c/\ cfan2 c, cvec cNUMERAL c_0 c, f4 f1 c/\ cfan6 c, cvec cNUMERAL c_0 c, f4 f1 cfan7 c, cvec cNUMERAL c_0 c, f4 f1 c/\ c? / c/\ cIN * * part cINSERT f0 * * part cINSERT b0 part cEMPTY f1 c= c, f2 f3 c, f0 b0 c~ c= f2 f3
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
+ (E (v' INSERT (w' INSERT EMPTY))) |- (((v = v') /\ (w = w')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))
T c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
+ |- ((((v' INSERT (w' INSERT EMPTY)) IN E) = p') ==> ((p' ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = (p' ==> q'))))
T c==> c= cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 f3 c==> c==> f3 c= c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 f6 c= c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 f6
+ (B = T) |- (((T ==> (~ A)) ==> (A ==> (~ T))) = ((B ==> (~ A)) ==> (A ==> (~ B))))
T c==> c= f0 cT c= c==> c==> cT c~ f1 c==> f1 c~ cT c==> c==> f0 c~ f1 c==> f1 c~ f0
+ |- (((!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))) ==> ((\a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))) a)) = ((\a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))) a))
T c= c==> ! ! c= c= c, f0 f1 c, b0 b1 c/\ c= f0 b0 c= f1 b1 * / ! c= c= c, f0 f1 c, b0 b1 c/\ c= f0 b0 c= f1 b1 f2 * / ! c= c= c, f0 f1 c, b0 b1 c/\ c= f0 b0 c= f1 b1 f2
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ ((B = F) ==> ((B ==> (~ A)) ==> (A ==> (~ B)))) |- ((B ==> (~ A)) ==> (A ==> (~ B)))
T c==> c==> c= f0 cF c==> c==> f0 c~ f1 c==> f1 c~ f0 c==> c==> f0 c~ f1 c==> f1 c~ f0
+ ((v , w) = (v' , w')), ((v' INSERT (w' INSERT EMPTY)) IN E) |- (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))
T c==> c= c, f0 f1 c, f2 f3 c==> cIN * * part cINSERT f2 * * part cINSERT f3 part cEMPTY f4 c==> c==> * f4 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1
+ ((((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) /\ ((v , w) IN (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w)))))))), (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- (~ (v = w))
T c==> c/\ c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 cIN c, f2 f3 * part cGSPEC / c? / c? / cSETSPEC b0 cIN * * part cINSERT b1 * * part cINSERT b2 part cEMPTY f0 c, b1 b2 c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 c~ c= f2 f3
- |- (((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) ==> ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P)) = ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P))
T c= c==> ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0 * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0
+ |- ((((((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) /\ ((v , w) IN (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w)))))))) ==> (~ (v = w))) = (((FAN ((vec (NUMERAL _0)) , (V , E))) /\ ((v , w) IN (dart1_of_fan (V , E)))) ==> (~ (v = w))))
T c= c==> c/\ c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 cIN c, f2 f3 * part cGSPEC / c? / c? / cSETSPEC b0 cIN * * part cINSERT b1 * * part cINSERT b2 part cEMPTY f0 c, b1 b2 c~ c= f2 f3 c==> c/\ cFAN c, cvec cNUMERAL c_0 c, f1 f0 cIN c, f2 f3 * part cdart1_of_fan c, f1 f0 c~ c= f2 f3
+ |- (T = (~ ((FINITE (w' INSERT EMPTY)) /\ ((CARD (w' INSERT EMPTY)) = (NUMERAL (BIT0 (BIT1 _0)))))))
T c= cT c~ c/\ cFINITE * * part cINSERT f0 part cEMPTY c= cCARD * * part cINSERT f0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ |- (((!x. ((x IN P) = (P x))) ==> ((\x. ((x IN P) = (P x))) x)) = ((\x. ((x IN P) = (P x))) x))
T c= c==> ! c= cIN b0 f0 * f0 b0 * / c= cIN b0 f0 * f0 b0 f1 * / c= cIN b0 f0 * f0 b0 f1
+ |- ((\P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) P)
T * / ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 f0
+ |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ |- ((\n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))) n)
T * / c= cHAS_SIZE f0 b0 c/\ cFINITE f0 c= cCARD f0 b0 f1
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
- |- (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = ((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))))
T c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
- (?v'. (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))))), (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- (~ (v = w))
T c==> c? / c? / c/\ cIN * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0 c= c, f1 f2 c, b0 b1 c==> c/\ cSUBSET * part cUNIONS f0 f3 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f3 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f3 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f3 f0 cfan7 c, cvec cNUMERAL c_0 c, f3 f0 c~ c= f1 f2
- |- ((?w'. t) = t)
T c= c? / f0 f0
- |- (((!p'. (!q'. ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = p') ==> ((p' ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = p') ==> ((p' ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = p') ==> ((p' ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b0 c==> c==> b0 c= c~ c= f0 f1 b1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> b0 b1 * / ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b0 c==> c==> b0 c= c~ c= f0 f1 b1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> b0 b1 f2 * / ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b0 c==> c==> b0 c= c~ c= f0 f1 b1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> b0 b1 f2
+ |- ((\P. (!x. ((x IN P) = (P x)))) P)
T * / ! c= cIN b1 b0 * b0 b1 f0
- (B ==> (~ A)), ((B ==> (~ A)) ==> (A ==> (~ B))) |- (((B ==> (~ A)) ==> (A ==> (~ B))) /\ (A ==> (~ B)))
T c==> c==> f0 c~ f1 c==> c==> c==> f0 c~ f1 c==> f1 c~ f0 c/\ c==> c==> f0 c~ f1 c==> f1 c~ f0 c==> f1 c~ f0
+ |- ((\x. (!V. (!E. ((FAN (x , (V , E))) = (((UNIONS E) SUBSET V) /\ ((graph E) /\ ((fan1 (x , (V , E))) /\ ((fan2 (x , (V , E))) /\ ((fan6 (x , (V , E))) /\ (fan7 (x , (V , E)))))))))))) x)
T * / ! ! c= cFAN c, b0 c, b1 b2 c/\ cSUBSET * part cUNIONS b2 b1 c/\ cgraph b2 c/\ cfan1 c, b0 c, b1 b2 c/\ cfan2 c, b0 c, b1 b2 c/\ cfan6 c, b0 c, b1 b2 cfan7 c, b0 c, b1 b2 f0
- |- ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p)
T * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0
+ |- (((!x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))))) ==> ((\x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))))) x)) = ((\x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))))) x))
T c= c==> ! ! ! ! c= c= c, b0 b1 c, b2 b3 c/\ c= b0 b2 c= b1 b3 * / ! ! ! c= c= c, b0 b1 c, b2 b3 c/\ c= b0 b2 c= b1 b3 f0 * / ! ! ! c= c= c, b0 b1 c, b2 b3 c/\ c= b0 b2 c= b1 b3 f0
+ |- (((!p'. (!q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b1 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> b0 b1 * / ! c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b1 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> b0 b1 f3 * / ! c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b1 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> b0 b1 f3
+ |- (((v , w) IN (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w))))))) = (?v'. (?w'. (((\p. (\t. (p /\ ((v , w) = t)))) ((v' INSERT (w' INSERT EMPTY)) IN E)) (v' , w')))))
T c= cIN c, f0 f1 * part cGSPEC / c? / c? / cSETSPEC b0 cIN * * part cINSERT b1 * * part cINSERT b2 part cEMPTY f2 c, b1 b2 c? / c? / * * / / c/\ b2 c= c, f0 f1 b3 cIN * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f2 c, b0 b1
+ (E (v' INSERT (w' INSERT EMPTY))) |- ((E (v' INSERT (w' INSERT EMPTY))) /\ ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))))
T c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c= c, f3 f4 c, f1 f2 c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- ((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 c==> * f0 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ (E (v' INSERT (w' INSERT EMPTY))), ((v = v') /\ (w = w')) |- (((v = v') /\ (w = w')) /\ ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))
T c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c/\ c/\ c= f3 f1 c= f4 f2 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- |- (((((v = v') /\ (w = w')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))) = ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))))
T c= c==> c==> c/\ c= f0 f1 c= f2 f3 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3
+ |- ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))) ==> ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = ((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))))) = ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = ((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))))
T c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c= c, f3 f4 c, f1 f2 c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c= c==> cIN * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f0 c==> c= c, f3 f4 c, f1 f2 c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c= c==> cIN * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f0 c==> c= c, f3 f4 c, f1 f2 c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
+ |- ((B = T) ==> ((B ==> (~ A)) ==> (A ==> (~ B))))
T c==> c= f0 cT c==> c==> f0 c~ f1 c==> f1 c~ f0
+ (E (v' INSERT (w' INSERT EMPTY))) |- (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = (T ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))))
T c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> cT cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- T |- (T = T)
T c==> cT c= cT cT
+ |- ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = p') ==> ((p' ==> ((~ (v = w)) = q')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (p' ==> q'))))
T c==> c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f3 c==> c==> f3 c= c~ c= f4 f5 f6 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 f6
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
- |- (T = (~ ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT1 _0))))))
T c= cT c~ c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
+ |- ((!x. ((x IN (w' INSERT (w' INSERT EMPTY))) = (x IN (w' INSERT EMPTY)))) = ((w' INSERT (w' INSERT EMPTY)) = (w' INSERT EMPTY)))
T c= ! c= cIN b0 * * part cINSERT f0 * * part cINSERT f0 part cEMPTY cIN b0 * * part cINSERT f0 part cEMPTY c= * * part cINSERT f0 * * part cINSERT f0 part cEMPTY * * part cINSERT f0 part cEMPTY
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
- |- ((E (v' INSERT (w' INSERT EMPTY))) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))))
T c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
- |- ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = ((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))))) = (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = ((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))))
T c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
- |- ((\p'. (!q'. ((((v = v') /\ (w = w')) = p') ==> ((p' ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (p' ==> q')))))) p')
T * / ! c==> c= c/\ c= f0 f1 c= f2 f3 b0 c==> c==> b0 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 b1 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> b0 b1 f4
+ |- (~ ((FINITE (w' INSERT EMPTY)) /\ ((CARD (w' INSERT EMPTY)) = (NUMERAL (BIT0 (BIT1 _0))))))
T c~ c/\ cFINITE * * part cINSERT f0 part cEMPTY c= cCARD * * part cINSERT f0 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))
T c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- (!v'. (((\v'. (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))))) v') ==> (~ (v = w))))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 ! c==> * / c? / c/\ cIN * * part cINSERT b1 * * part cINSERT b1 part cEMPTY f0 c= c, f2 f3 c, b1 b1 b0 c~ c= f2 f3
- |- (((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT1 _0))) = F)
T c= c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cF
+ |- (((!q'. ((((v' INSERT (w' INSERT EMPTY)) IN E) = p') ==> ((p' ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = (p' ==> q'))))) ==> ((\q'. ((((v' INSERT (w' INSERT EMPTY)) IN E) = p') ==> ((p' ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = (p' ==> q'))))) q')) = ((\q'. ((((v' INSERT (w' INSERT EMPTY)) IN E) = p') ==> ((p' ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 f3 c==> c==> f3 c= c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 b0 c= c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 b0 * / c==> c= cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 f3 c==> c==> f3 c= c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 b0 c= c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 b0 f6 * / c==> c= cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 f3 c==> c==> f3 c= c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 b0 c= c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 b0 f6
+ |- ((\x. ((CARD (x INSERT EMPTY)) = (NUMERAL (BIT1 _0)))) x)
T * / c= cCARD * * part cINSERT b0 part cEMPTY cNUMERAL cBIT1 c_0 f0
+ |- ((((FAN ((vec (NUMERAL _0)) , (V , E))) /\ ((v , w) IN (dart1_of_fan (V , E)))) ==> (~ (v = w))) = T)
T c= c==> c/\ cFAN c, cvec cNUMERAL c_0 c, f0 f1 cIN c, f2 f3 * part cdart1_of_fan c, f0 f1 c~ c= f2 f3 cT
+ |- (((!n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))) ==> ((\n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))) n)) = ((\n. ((s HAS_SIZE n) = ((FINITE s) /\ ((CARD s) = n)))) n))
T c= c==> ! c= cHAS_SIZE f0 b0 c/\ cFINITE f0 c= cCARD f0 b0 * / c= cHAS_SIZE f0 b0 c/\ cFINITE f0 c= cCARD f0 b0 f1 * / c= cHAS_SIZE f0 b0 c/\ cFINITE f0 c= cCARD f0 b0 f1
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- ((?v'. (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))))) ==> (~ (v = w)))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 c==> c? / c? / c/\ cIN * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0 c= c, f2 f3 c, b0 b1 c~ c= f2 f3
+ |- (((!V. (!E. ((dart1_of_fan (V , E)) = (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w))))))))) ==> ((\V. (!E. ((dart1_of_fan (V , E)) = (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w))))))))) V)) = ((\V. (!E. ((dart1_of_fan (V , E)) = (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w))))))))) V))
T c= c==> ! ! c= * part cdart1_of_fan c, b0 b1 * part cGSPEC / c? / c? / cSETSPEC b2 cIN * * part cINSERT b3 * * part cINSERT b4 part cEMPTY b1 c, b3 b4 * / ! c= * part cdart1_of_fan c, b0 b1 * part cGSPEC / c? / c? / cSETSPEC b2 cIN * * part cINSERT b3 * * part cINSERT b4 part cEMPTY b1 c, b3 b4 f0 * / ! c= * part cdart1_of_fan c, b0 b1 * part cGSPEC / c? / c? / cSETSPEC b2 cIN * * part cINSERT b3 * * part cINSERT b4 part cEMPTY b1 c, b3 b4 f0
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- (((!x. (((\w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w')))) x) ==> (~ (v = w)))) ==> ((?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w')))) ==> (~ (v = w)))) = ((?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w')))) ==> (~ (v = w))))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 c= c==> ! c==> * / c/\ cIN * * part cINSERT f2 * * part cINSERT b1 part cEMPTY f0 c= c, f3 f4 c, f2 b1 b0 c~ c= f3 f4 c==> c? / c/\ cIN * * part cINSERT f2 * * part cINSERT b0 part cEMPTY f0 c= c, f3 f4 c, f2 b0 c~ c= f3 f4 c==> c? / c/\ cIN * * part cINSERT f2 * * part cINSERT b0 part cEMPTY f0 c= c, f3 f4 c, f2 b0 c~ c= f3 f4
+ ((\w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w')))) w') |- (((((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))) ==> (~ (v = w))) = (~ (v = w)))
T c==> * / c/\ cIN * * part cINSERT f0 * * part cINSERT b0 part cEMPTY f1 c= c, f2 f3 c, f0 b0 f4 c= c==> c/\ cIN * * part cINSERT f0 * * part cINSERT f4 part cEMPTY f1 c= c, f2 f3 c, f0 f4 c~ c= f2 f3 c~ c= f2 f3
+ |- (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))))
T c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> cIN * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f0 c==> c= c, f3 f4 c, f1 f2 c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4
+ |- (((?v'. (?w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))))) ==> (~ (v = w))) = (((v , w) IN (GSPEC (\GEN%PVAR%5545. (?v. (?w. (((SETSPEC GEN%PVAR%5545) ((v INSERT (w INSERT EMPTY)) IN E)) (v , w))))))) ==> (~ (v = w))))
T c= c==> c? / c? / c/\ cIN * * part cINSERT b0 * * part cINSERT b1 part cEMPTY f0 c= c, f1 f2 c, b0 b1 c~ c= f1 f2 c==> cIN c, f1 f2 * part cGSPEC / c? / c? / cSETSPEC b0 cIN * * part cINSERT b1 * * part cINSERT b2 part cEMPTY f0 c, b1 b2 c~ c= f1 f2
- |- ((\q'. ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = p') ==> ((p' ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (p' ==> q'))))) q')
T * / c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f2 c==> c==> f2 c= c~ c= f0 f1 b0 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> f2 b0 f3
- |- ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x)
T * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1
- |- (((~ ((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT1 _0)))) ==> (((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT1 _0))) = F)) = (((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT1 _0))) = F))
T c= c==> c~ c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 c= c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cF c= c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cF
- ((v = v') /\ (w = w')) |- (((v = v') /\ (w = w')) /\ ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))
T c==> c/\ c= f0 f1 c= f2 f3 c/\ c/\ c= f0 f1 c= f2 f3 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3
+ |- (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))
T c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1
+ |- ((\a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))) a)
T * / ! c= c= c, f0 f1 c, b0 b1 c/\ c= f0 b0 c= f1 b1 f2
- |- (((~ ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT1 _0))))) ==> (((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT1 _0)))) = F)) = (((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT1 _0)))) = F))
T c= c==> c~ c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c= c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cF c= c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cF
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))), (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- ((((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w'))) /\ (~ (v = w)))
T c==> c/\ cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c= c, f3 f4 c, f0 f1 c==> c/\ cSUBSET * part cUNIONS f2 f5 c/\ ! c==> * f2 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f5 f2 c/\ cfan2 c, cvec cNUMERAL c_0 c, f5 f2 c/\ cfan6 c, cvec cNUMERAL c_0 c, f5 f2 cfan7 c, cvec cNUMERAL c_0 c, f5 f2 c/\ c/\ cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c= c, f3 f4 c, f0 f1 c~ c= f3 f4
- |- ((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x))))))
T c/\ ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
+ |- ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = ((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))))
T c= c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c==> c= c, f3 f4 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c==> c/\ c= f3 f0 c= f4 f1 c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1
+ |- ((\E. ((FAN (x , (V , E))) = (((UNIONS E) SUBSET V) /\ ((graph E) /\ ((fan1 (x , (V , E))) /\ ((fan2 (x , (V , E))) /\ ((fan6 (x , (V , E))) /\ (fan7 (x , (V , E)))))))))) E)
T * / c= cFAN c, f0 c, f1 b0 c/\ cSUBSET * part cUNIONS b0 f1 c/\ cgraph b0 c/\ cfan1 c, f0 c, f1 b0 c/\ cfan2 c, f0 c, f1 b0 c/\ cfan6 c, f0 c, f1 b0 cfan7 c, f0 c, f1 b0 f2
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- (!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0
+ (B = T) |- (((B ==> (~ A)) ==> (A ==> (~ B))) = ((T ==> (~ A)) ==> (A ==> (~ T))))
T c==> c= f0 cT c= c==> c==> f0 c~ f1 c==> f1 c~ f0 c==> c==> cT c~ f1 c==> f1 c~ cT
+ |- ((B ==> (~ A)) ==> (A ==> (~ B)))
T c==> c==> f0 c~ f1 c==> f1 c~ f0
+ |- ((\p'. (!q'. ((((v , w) = (v' , w')) = p') ==> ((p' ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = q')) ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (p' ==> q')))))) p')
T * / ! c==> c= c= c, f0 f1 c, f2 f3 b0 c==> c==> b0 c= c==> c==> * f4 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 b1 c= c==> c= c, f0 f1 c, f2 f3 c==> c==> * f4 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> b0 b1 f5
+ |- ((x = x) = T)
T c= c= f0 f0 cT
- |- (((E (v' INSERT (w' INSERT EMPTY))) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = ((E (v' INSERT (w' INSERT EMPTY))) ==> q')))
T c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 f5 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f5
+ (E (v' INSERT (w' INSERT EMPTY))) |- (((((v = v') /\ (w = w')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))) = ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))))
T c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c==> c/\ c= f3 f1 c= f4 f2 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c= c==> c= c, f3 f4 c, f1 f2 c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c= c==> c= c, f3 f4 c, f1 f2 c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
- (B ==> (~ A)), ((B ==> (~ A)) ==> (A ==> (~ B))) |- ((B ==> (~ A)) /\ (A ==> (~ B)))
T c==> c==> f0 c~ f1 c==> c==> c==> f0 c~ f1 c==> f1 c~ f0 c/\ c==> f0 c~ f1 c==> f1 c~ f0
+ |- (T ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))))
T c==> cT c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
+ T |- (T /\ (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))))
T c==> cT c/\ cT c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0
- |- (((((v = v') /\ (w = w')) = ((v = v') /\ (w = w'))) ==> ((((v = v') /\ (w = w')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (((v = v') /\ (w = w')) ==> q')))) = ((((v = v') /\ (w = w')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (((v = v') /\ (w = w')) ==> q'))))
T c= c==> c= c/\ c= f0 f1 c= f2 f3 c/\ c= f0 f1 c= f2 f3 c==> c==> c/\ c= f0 f1 c= f2 f3 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 f4 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> c/\ c= f0 f1 c= f2 f3 f4 c==> c==> c/\ c= f0 f1 c= f2 f3 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 f4 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> c/\ c= f0 f1 c= f2 f3 f4
+ |- (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = (p' ==> q'))))
T c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f4 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> f3 f4
+ |- ((!v. (!w. (((FAN ((vec (NUMERAL _0)) , (V , E))) /\ ((v , w) IN (dart1_of_fan (V , E)))) ==> (~ (v = w))))) = T)
T c= ! ! c==> c/\ cFAN c, cvec cNUMERAL c_0 c, f0 f1 cIN c, b0 b1 * part cdart1_of_fan c, f0 f1 c~ c= b0 b1 cT
+ (E (v' INSERT (w' INSERT EMPTY))) |- ((E (v' INSERT (w' INSERT EMPTY))) /\ (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))
T c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
+ |- (((!P. (!x. ((x IN P) = (P x)))) ==> ((\P. (!x. ((x IN P) = (P x)))) P)) = ((\P. (!x. ((x IN P) = (P x)))) P))
T c= c==> ! ! c= cIN b1 b0 * b0 b1 * / ! c= cIN b1 b0 * b0 b1 f0 * / ! c= cIN b1 b0 * b0 b1 f0
- |- ((((E (v' INSERT (w' INSERT EMPTY))) = (E (v' INSERT (w' INSERT EMPTY)))) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = ((E (v' INSERT (w' INSERT EMPTY))) ==> q')))) = (((E (v' INSERT (w' INSERT EMPTY))) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = ((E (v' INSERT (w' INSERT EMPTY))) ==> q'))))
T c= c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 f5 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f5 c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 f5 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f5
+ |- ((\q'. ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = p') ==> ((p' ==> ((~ (v = w)) = q')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (p' ==> q'))))) q')
T * / c==> c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f3 c==> c==> f3 c= c~ c= f4 f5 b0 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 b0 f6
- |- ((\p'. (!q'. ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = p') ==> ((p' ==> ((~ (v' = w')) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (p' ==> q')))))) p')
T * / ! c==> c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b0 c==> c==> b0 c= c~ c= f0 f1 b1 c= c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> b0 b1 f2
+ ((v = v') /\ (w = w')) |- (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> ((~ (v = w)) = (~ (v' = w'))))
T c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= c~ c= f0 f2 c~ c= f1 f3
+ (E (v' INSERT (w' INSERT EMPTY))) |- ((((E (v' INSERT (w' INSERT EMPTY))) = T) ==> ((T ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = (T ==> q')))) = ((T ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = (T ==> q'))))
T c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT c==> c==> cT c= cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f3 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> cT f3 c==> c==> cT c= cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 f3 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> cT f3
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (~ (v = w)))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 c= c==> c==> * f0 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c~ c= f4 f5
+ |- (((!p'. (!q'. ((((v , w) = (v' , w')) = p') ==> ((p' ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = q')) ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((v , w) = (v' , w')) = p') ==> ((p' ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = q')) ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((v , w) = (v' , w')) = p') ==> ((p' ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = q')) ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c= c, f0 f1 c, f2 f3 b0 c==> c==> b0 c= c==> c==> * f4 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 b1 c= c==> c= c, f0 f1 c, f2 f3 c==> c==> * f4 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> b0 b1 * / ! c==> c= c= c, f0 f1 c, f2 f3 b0 c==> c==> b0 c= c==> c==> * f4 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 b1 c= c==> c= c, f0 f1 c, f2 f3 c==> c==> * f4 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> b0 b1 f5 * / ! c==> c= c= c, f0 f1 c, f2 f3 b0 c==> c==> b0 c= c==> c==> * f4 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 b1 c= c==> c= c, f0 f1 c, f2 f3 c==> c==> * f4 * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f2 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f1 c==> b0 b1 f5
+ |- (((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT1 _0)))) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cF
- |- (((!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) ==> ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x)) = ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x))
T c= c==> ! c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1 * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1
+ |- (T = (!x. ((x IN (w' INSERT (w' INSERT EMPTY))) = (x IN (w' INSERT EMPTY)))))
T c= cT ! c= cIN b0 * * part cINSERT f0 * * part cINSERT f0 part cEMPTY cIN b0 * * part cINSERT f0 part cEMPTY
- |- (((!p. (!x. ((x IN (\y. (p y))) = (p x)))) ==> ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p)) = ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p))
T c= c==> ! ! c= cIN b1 / * b0 b2 * b0 b1 * / ! c= cIN b1 / * b0 b2 * b0 b1 f0 * / ! c= cIN b1 / * b0 b2 * b0 b1 f0
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
+ |- ((\q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = (p' ==> q'))))) q')
T * / c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b0 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c==> f3 b0 f4
+ |- (((!p'. (!q'. ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = p') ==> ((p' ==> ((~ (v = w)) = q')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = p') ==> ((p' ==> ((~ (v = w)) = q')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) = p') ==> ((p' ==> ((~ (v = w)) = q')) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b0 c==> c==> b0 c= c~ c= f3 f4 b1 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> b0 b1 * / ! c==> c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b0 c==> c==> b0 c= c~ c= f3 f4 b1 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> b0 b1 f5 * / ! c==> c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 b0 c==> c==> b0 c= c~ c= f3 f4 b1 c= c==> c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f3 f4 c==> b0 b1 f5
+ |- (((!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) ==> ((\x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) x)) = ((\x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) x))
T c= c==> ! c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 * / c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 f1 * / c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 f1
+ |- (((!P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) ==> ((\P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) P)) = ((\P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) P))
T c= c==> ! ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 * / ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 f0 * / ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 f0
+ (((UNIONS E) SUBSET V) /\ ((!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))) /\ ((fan1 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan2 ((vec (NUMERAL _0)) , (V , E))) /\ ((fan6 ((vec (NUMERAL _0)) , (V , E))) /\ (fan7 ((vec (NUMERAL _0)) , (V , E)))))))) |- (!w'. (((\w'. (((v' INSERT (w' INSERT EMPTY)) IN E) /\ ((v , w) = (v' , w')))) w') ==> (~ (v = w))))
T c==> c/\ cSUBSET * part cUNIONS f0 f1 c/\ ! c==> * f0 b0 cHAS_SIZE b0 cNUMERAL cBIT0 cBIT1 c_0 c/\ cfan1 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan2 c, cvec cNUMERAL c_0 c, f1 f0 c/\ cfan6 c, cvec cNUMERAL c_0 c, f1 f0 cfan7 c, cvec cNUMERAL c_0 c, f1 f0 ! c==> * / c/\ cIN * * part cINSERT f2 * * part cINSERT b1 part cEMPTY f0 c= c, f3 f4 c, f2 b1 b0 c~ c= f3 f4
+ |- ((\q'. ((((v' INSERT (w' INSERT EMPTY)) IN E) = p') ==> ((p' ==> ((((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w)))) = q')) ==> ((((v' INSERT (w' INSERT EMPTY)) IN E) ==> (((v , w) = (v' , w')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))))) = (p' ==> q'))))) q')
T * / c==> c= cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 f3 c==> c==> f3 c= c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 b0 c= c==> cIN * * part cINSERT f0 * * part cINSERT f1 part cEMPTY f2 c==> c= c, f4 f5 c, f0 f1 c==> c==> * f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f4 f5 c==> f3 b0 f6
+ |- (((!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))) ==> ((\b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))) b)) = ((\b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))) b))
T c= c==> ! c= c= c, f0 f1 c, f2 b0 c/\ c= f0 f2 c= f1 b0 * / c= c= c, f0 f1 c, f2 b0 c/\ c= f0 f2 c= f1 b0 f3 * / c= c= c, f0 f1 c, f2 b0 c/\ c= f0 f2 c= f1 b0 f3
+ |- ((\E. ((graph E) = (!e. ((E e) ==> (e HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))))))) E)
T * / c= cgraph b0 ! c==> * b0 b1 cHAS_SIZE b1 cNUMERAL cBIT0 cBIT1 c_0 f0
- ((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT1 _0))) |- ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT1 _0))))
T c==> c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
+ ((v = v') /\ (w = w')) |- (((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> ((~ (v = w)) = (~ (v' = w')))) ==> ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = ((((E (v' INSERT (w' INSERT EMPTY))) ==> ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0))))) ==> (~ (v = w))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))
T c==> c/\ c= f0 f1 c= f2 f3 c= c==> c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= c~ c= f0 f2 c~ c= f1 f3 c= c==> c==> * f4 * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c= c==> c==> * f4 * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f0 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3
- (E (v' INSERT (w' INSERT EMPTY))) |- ((E (v' INSERT (w' INSERT EMPTY))) /\ ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))))
T c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2
- |- (F = (~ T))
T c= cF c~ cT
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- ((B ==> (~ A)) ==> (A ==> (~ B))) |- (((B ==> (~ A)) ==> (A ==> (~ B))) /\ ((B ==> (~ A)) ==> (A ==> (~ B))))
T c==> c==> c==> f0 c~ f1 c==> f1 c~ f0 c/\ c==> c==> f0 c~ f1 c==> f1 c~ f0 c==> c==> f0 c~ f1 c==> f1 c~ f0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- |- (~ ((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT1 _0))))
T c~ c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0
- ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) |- (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) = T)
T c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 cT
- |- (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (p' ==> q'))))
T c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 f6 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> f3 f6
- |- (((!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) ==> ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x)) = ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x))
T c= c==> ! c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1 * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1
- |- (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))
T c= cGSPEC / c? / cSETSPEC b0 * f0 b1 b1 f1 * f0 f1
- |- ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p)
T * / ! c= cIN b1 / * b0 b2 * b0 b1 f0
- |- (((!q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (p' ==> q'))))) ==> ((\q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (p' ==> q'))))) q')) = ((\q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 b0 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> f3 b0 * / c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 b0 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> f3 b0 f6 * / c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 b0 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> f3 b0 f6
- |- (((!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) ==> ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x)) = ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x))
T c= c==> ! c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1 * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1
- |- ((x IN (\y. (p y))) = (p x))
T c= cIN f0 / * f1 b0 * f1 f0
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- (((!p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) ==> ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p)) = ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p))
T c= c==> ! ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0 * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0
- T |- ((T = T) = T)
T c==> cT c= c= cT cT cT
- |- (((\t. (f t)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((((B ==> (~ A)) ==> (A ==> (~ B))) ==> ((B ==> (~ A)) ==> (A ==> (~ B)))) = ((B ==> (~ A)) ==> (A ==> (~ B))))
T c= c==> c==> c==> f0 c~ f1 c==> f1 c~ f0 c==> c==> f0 c~ f1 c==> f1 c~ f0 c==> c==> f0 c~ f1 c==> f1 c~ f0
- |- (((!q'. ((((v = v') /\ (w = w')) = p') ==> ((p' ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (p' ==> q'))))) ==> ((\q'. ((((v = v') /\ (w = w')) = p') ==> ((p' ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (p' ==> q'))))) q')) = ((\q'. ((((v = v') /\ (w = w')) = p') ==> ((p' ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c/\ c= f0 f1 c= f2 f3 f4 c==> c==> f4 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 b0 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> f4 b0 * / c==> c= c/\ c= f0 f1 c= f2 f3 f4 c==> c==> f4 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 b0 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> f4 b0 f5 * / c==> c= c/\ c= f0 f1 c= f2 f3 f4 c==> c==> f4 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 b0 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> f4 b0 f5
- ((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) |- (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) /\ ((~ (v' = w')) = (~ (v' = w'))))
T c==> cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c/\ cHAS_SIZE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c= c~ c= f0 f1 c~ c= f0 f1
- |- (((v = v') /\ (w = w')) ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))))
T c==> c/\ c= f0 f1 c= f2 f3 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3
- |- (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))
T c= cGSPEC / * f0 * part cSETSPEC b0 f1 * f0 / / c/\ b0 c= f1 b1
- |- (((!p'. (!q'. ((((v = v') /\ (w = w')) = p') ==> ((p' ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((v = v') /\ (w = w')) = p') ==> ((p' ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((v = v') /\ (w = w')) = p') ==> ((p' ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c/\ c= f0 f1 c= f2 f3 b0 c==> c==> b0 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 b1 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> b0 b1 * / ! c==> c= c/\ c= f0 f1 c= f2 f3 b0 c==> c==> b0 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 b1 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> b0 b1 f4 * / ! c==> c= c/\ c= f0 f1 c= f2 f3 b0 c==> c==> b0 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 b1 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> b0 b1 f4
- ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT1 _0)))) |- ((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT1 _0)))
T c==> c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0
- |- ((\p'. (!q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (p' ==> q')))))) p')
T * / ! c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 b1 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f3 f1 c= f4 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> b0 b1 f5
- (B ==> (~ A)) |- (((B ==> (~ A)) ==> (A ==> (~ B))) ==> (A ==> (~ B)))
T c==> c==> f0 c~ f1 c==> c==> c==> f0 c~ f1 c==> f1 c~ f0 c==> f1 c~ f0
- |- (((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) ==> ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p)) = ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p))
T c= c==> ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0 * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0
- |- ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p)
T * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0
- |- ((\q'. (((E (v' INSERT (w' INSERT EMPTY))) = p') ==> ((p' ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = q')) ==> (((E (v' INSERT (w' INSERT EMPTY))) ==> (((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))))) = (p' ==> q'))))) q')
T * / c==> c= * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 b0 c= c==> * f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c/\ c= f4 f1 c= f5 f2 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f2 c==> f3 b0 f6
- |- ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))
T c= cIN f0 * part cGSPEC / c? / cSETSPEC b0 * f1 b1 b1 * f1 f0
- |- (~ (~ T))
T c~ c~ cT
- |- ((((v = v') /\ (w = w')) = p') ==> ((p' ==> ((((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w'))) = q')) ==> ((((v = v') /\ (w = w')) ==> (((v' INSERT (w' INSERT EMPTY)) HAS_SIZE (NUMERAL (BIT0 (BIT1 _0)))) ==> (~ (v' = w')))) = (p' ==> q'))))
T c==> c= c/\ c= f0 f1 c= f2 f3 f4 c==> c==> f4 c= c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 f5 c= c==> c/\ c= f0 f1 c= f2 f3 c==> cHAS_SIZE * * part cINSERT f1 * * part cINSERT f3 part cEMPTY cNUMERAL cBIT0 cBIT1 c_0 c~ c= f1 f3 c==> f4 f5
- |- (((!x. ((x IN (\y. (p y))) = (p x))) ==> ((\x. ((x IN (\y. (p y))) = (p x))) x)) = ((\x. ((x IN (\y. (p y))) = (p x))) x))
T c= c==> ! c= cIN b0 / * f0 b1 * f0 b0 * / c= cIN b0 / * f0 b1 * f0 b0 f1 * / c= cIN b0 / * f0 b1 * f0 b0 f1
- |- ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P)
T * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0
- |- (((B ==> (~ A)) ==> (A ==> (~ B))) ==> ((B ==> (~ A)) ==> (A ==> (~ B))))
T c==> c==> c==> f0 c~ f1 c==> f1 c~ f0 c==> c==> f0 c~ f1 c==> f1 c~ f0
