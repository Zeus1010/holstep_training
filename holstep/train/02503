N Seq2.count_flatten
C |- (!s. (!a. (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))))
T c= ccount f0 cflatten f1 clist_sumn cmap * part ccount f0 f1 part cI
D TRUTH
A |- T
T cT
D I_THM
A |- (!x. ((I x) = x))
T c= cI f0 f0
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D Seq.count
A |- (!a. (!x. (!s'. ((((count a) NIL) = (NUMERAL _0)) /\ (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s')))))))
T c/\ c= ccount f0 cNIL cNUMERAL c_0 c= ccount f0 cCONS f1 f2 c+ cCOND * f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount f0 f2
D Seq.count_cat
A |- (!a. (!s1. (!s2. (((count a) ((cat s1) s2)) = (((count a) s1) + ((count a) s2))))))
T c= ccount f0 ccat f1 f2 c+ ccount f0 f1 ccount f0 f2
D Seq.map
A |- ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))
T c/\ c= cmap f0 cCONS f1 f2 cCONS * f0 f1 cmap f0 f2 c= cmap f0 cNIL cNIL
D Seq.foldr
A |- (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))
T c/\ c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3 c= cfoldr f0 f1 cNIL f1
D Seq.flatten
A |- (flatten = ((foldr cat) NIL))
T c= part cflatten * * part cfoldr part ccat cNIL
D Seq2.list_sumn_nil
A |- (!f. (((list_sumn NIL) f) = (NUMERAL _0)))
T c= clist_sumn cNIL f0 cNUMERAL c_0
D Seq2.list_sumn_cons
A |- (!h. (!t. (!f. (((list_sumn ((CONS h) t)) f) = ((f h) + ((list_sumn t) f))))))
T c= clist_sumn cCONS f0 f1 f2 c+ * f2 f0 clist_sumn f1 f2
+ |- (((!x. ((I x) = x)) ==> ((\x. ((I x) = x)) x)) = ((\x. ((I x) = x)) x))
T c= c==> ! c= cI b0 b0 * / c= cI b0 b0 f0 * / c= cI b0 b0 f0
+ (s = s1) |- ((((count a) (flatten s1)) = ((list_sumn ((map (count a)) s)) I)) = (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I)))
T c==> c= f0 f1 c= c= ccount f2 cflatten f1 clist_sumn cmap * part ccount f2 f0 part cI c= ccount f2 cflatten f0 clist_sumn cmap * part ccount f2 f0 part cI
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (((!a. (!x. (!s'. ((((count a) NIL) = (NUMERAL _0)) /\ (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s'))))))) ==> ((\a. (!x. (!s'. ((((count a) NIL) = (NUMERAL _0)) /\ (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s'))))))) a)) = ((\a. (!x. (!s'. ((((count a) NIL) = (NUMERAL _0)) /\ (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s'))))))) a))
T c= c==> ! ! ! c/\ c= ccount b0 cNIL cNUMERAL c_0 c= ccount b0 cCONS b1 b2 c+ cCOND * b0 b1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount b0 b2 * / ! ! c/\ c= ccount b0 cNIL cNUMERAL c_0 c= ccount b0 cCONS b1 b2 c+ cCOND * b0 b1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount b0 b2 f0 * / ! ! c/\ c= ccount b0 cNIL cNUMERAL c_0 c= ccount b0 cCONS b1 b2 c+ cCOND * b0 b1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount b0 b2 f0
+ (s = s1) |- ((s = s1) /\ (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I)))
T c==> c= f0 f1 c/\ c= f0 f1 c= ccount f2 cflatten f0 clist_sumn cmap * part ccount f2 f0 part cI
+ |- (((!x. (((\s1. (s = s1)) x) ==> (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I)))) ==> ((?s1. (s = s1)) ==> (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I)))) = ((?s1. (s = s1)) ==> (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))))
T c= c==> ! c==> * / c= f0 b1 b0 c= ccount f1 cflatten f0 clist_sumn cmap * part ccount f1 f0 part cI c==> c? / c= f0 b0 c= ccount f1 cflatten f0 clist_sumn cmap * part ccount f1 f0 part cI c==> c? / c= f0 b0 c= ccount f1 cflatten f0 clist_sumn cmap * part ccount f1 f0 part cI
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- |- ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)
T * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
+ |- (((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s)))
T c= cmap f0 cCONS f1 f2 cCONS * f0 f1 cmap f0 f2
+ |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
+ |- (((?s1. (s = s1)) ==> (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))) = (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I)))
T c= c==> c? / c= f0 b0 c= ccount f1 cflatten f0 clist_sumn cmap * part ccount f1 f0 part cI c= ccount f1 cflatten f0 clist_sumn cmap * part ccount f1 f0 part cI
+ (((count a) (flatten t)) = ((list_sumn ((map (count a)) t)) I)) |- (((count a) ((cat h) (flatten t))) = ((list_sumn ((CONS ((count a) h)) ((map (count a)) t))) I))
T c==> c= ccount f0 cflatten f1 clist_sumn cmap * part ccount f0 f1 part cI c= ccount f0 ccat f2 cflatten f1 clist_sumn cCONS ccount f0 f2 cmap * part ccount f0 f1 part cI
+ |- ((!a0. (!a1. ((((count a) (flatten a1)) = ((list_sumn ((map (count a)) a1)) I)) ==> (((count a) (flatten ((CONS a0) a1))) = ((list_sumn ((map (count a)) ((CONS a0) a1))) I))))) = ((((count a) (flatten NIL)) = ((list_sumn ((map (count a)) NIL)) I)) /\ (!a0. (!a1. ((((count a) (flatten a1)) = ((list_sumn ((map (count a)) a1)) I)) ==> (((count a) (flatten ((CONS a0) a1))) = ((list_sumn ((map (count a)) ((CONS a0) a1))) I)))))))
T c= ! ! c==> c= ccount f0 cflatten b1 clist_sumn cmap * part ccount f0 b1 part cI c= ccount f0 cflatten cCONS b0 b1 clist_sumn cmap * part ccount f0 cCONS b0 b1 part cI c/\ c= ccount f0 cflatten cNIL clist_sumn cmap * part ccount f0 cNIL part cI ! ! c==> c= ccount f0 cflatten b1 clist_sumn cmap * part ccount f0 b1 part cI c= ccount f0 cflatten cCONS b0 b1 clist_sumn cmap * part ccount f0 cCONS b0 b1 part cI
+ |- ((((foldr f) z0) NIL) = z0)
T c= cfoldr f0 f1 cNIL f1
+ |- ((\h. (!t. (!f. (((list_sumn ((CONS h) t)) f) = ((f h) + ((list_sumn t) f)))))) h)
T * / ! ! c= clist_sumn cCONS b0 b1 b2 c+ * b2 b0 clist_sumn b1 b2 f0
+ |- ((NUMERAL _0) = ((list_sumn ((map (count a)) NIL)) I))
T c= cNUMERAL c_0 clist_sumn cmap * part ccount f0 cNIL part cI
+ |- (((((count a) (flatten NIL)) = ((list_sumn ((map (count a)) NIL)) I)) /\ (!a0. (!a1. ((((count a) (flatten a1)) = ((list_sumn ((map (count a)) a1)) I)) ==> (((count a) (flatten ((CONS a0) a1))) = ((list_sumn ((map (count a)) ((CONS a0) a1))) I)))))) ==> (!s. (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))))
T c==> c/\ c= ccount f0 cflatten cNIL clist_sumn cmap * part ccount f0 cNIL part cI ! ! c==> c= ccount f0 cflatten b1 clist_sumn cmap * part ccount f0 b1 part cI c= ccount f0 cflatten cCONS b0 b1 clist_sumn cmap * part ccount f0 cCONS b0 b1 part cI ! c= ccount f0 cflatten b0 clist_sumn cmap * part ccount f0 b0 part cI
+ |- ((((count a) ((cat h) (flatten t))) = ((I ((count a) h)) + ((list_sumn ((map (count a)) t)) I))) = (((count a) ((cat h) (flatten t))) = ((list_sumn ((CONS ((count a) h)) ((map (count a)) t))) I)))
T c= c= ccount f0 ccat f1 cflatten f2 c+ cI ccount f0 f1 clist_sumn cmap * part ccount f0 f2 part cI c= ccount f0 ccat f1 cflatten f2 clist_sumn cCONS ccount f0 f1 cmap * part ccount f0 f2 part cI
+ |- (((!s1. (!s2. (((count a) ((cat s1) s2)) = (((count a) s1) + ((count a) s2))))) ==> ((\s1. (!s2. (((count a) ((cat s1) s2)) = (((count a) s1) + ((count a) s2))))) s1)) = ((\s1. (!s2. (((count a) ((cat s1) s2)) = (((count a) s1) + ((count a) s2))))) s1))
T c= c==> ! ! c= ccount f0 ccat b0 b1 c+ ccount f0 b0 ccount f0 b1 * / ! c= ccount f0 ccat b0 b1 c+ ccount f0 b0 ccount f0 b1 f1 * / ! c= ccount f0 ccat b0 b1 c+ ccount f0 b0 ccount f0 b1 f1
- |- (!s1. (((\s1. (s = s1)) s1) ==> (?s1. (s = s1))))
T c==> * / c= f0 b0 f1 c? / c= f0 b0
+ (((count a) (flatten t)) = ((list_sumn ((map (count a)) t)) I)) |- (((count a) ((cat h) (flatten t))) = ((I ((count a) h)) + ((list_sumn ((map (count a)) t)) I)))
T c==> c= ccount f0 cflatten f1 clist_sumn cmap * part ccount f0 f1 part cI c= ccount f0 ccat f2 cflatten f1 c+ cI ccount f0 f2 clist_sumn cmap * part ccount f0 f1 part cI
+ |- ((\s1. (s = s1)) s)
T * / c= f0 b0 f0
+ |- (((count a) (((foldr cat) NIL) NIL)) = ((list_sumn ((map (count a)) NIL)) I))
T c= ccount f0 cfoldr part ccat cNIL cNIL clist_sumn cmap * part ccount f0 cNIL part cI
+ |- ((\s'. ((((count a) NIL) = (NUMERAL _0)) /\ (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s'))))) s')
T * / c/\ c= ccount f0 cNIL cNUMERAL c_0 c= ccount f0 cCONS f1 b0 c+ cCOND * f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount f0 b0 f2
+ |- ((((count a) h) + ((count a) (flatten t))) = ((I ((count a) h)) + ((count a) (flatten t))))
T c= c+ ccount f0 f1 ccount f0 cflatten f2 c+ cI ccount f0 f1 ccount f0 cflatten f2
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ |- (!s1. (((\s1. (s = s1)) s1) ==> (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))))
T c==> * / c= f0 b0 f1 c= ccount f2 cflatten f0 clist_sumn cmap * part ccount f2 f0 part cI
+ |- ((\s. (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))) s1)
T * / c= ccount f0 cflatten b0 clist_sumn cmap * part ccount f0 b0 part cI f1
+ |- ((\s2. (((count a) ((cat s1) s2)) = (((count a) s1) + ((count a) s2)))) s2)
T * / c= ccount f0 ccat f1 b0 c+ ccount f0 f1 ccount f0 b0 f2
+ |- (((!x. (!s'. ((((count a) NIL) = (NUMERAL _0)) /\ (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s')))))) ==> ((\x. (!s'. ((((count a) NIL) = (NUMERAL _0)) /\ (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s')))))) x)) = ((\x. (!s'. ((((count a) NIL) = (NUMERAL _0)) /\ (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s')))))) x))
T c= c==> ! ! c/\ c= ccount f0 cNIL cNUMERAL c_0 c= ccount f0 cCONS b0 b1 c+ cCOND * f0 b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount f0 b1 * / ! c/\ c= ccount f0 cNIL cNUMERAL c_0 c= ccount f0 cCONS b0 b1 c+ cCOND * f0 b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount f0 b1 f1 * / ! c/\ c= ccount f0 cNIL cNUMERAL c_0 c= ccount f0 cCONS b0 b1 c+ cCOND * f0 b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount f0 b1 f1
- |- ((\s. (!f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL)))) s)
T * / ! c/\ c= cmap b1 cCONS f0 b0 cCONS * b1 f0 cmap b1 b0 c= cmap b1 cNIL cNIL f1
+ |- (((!s2. (((count a) ((cat s1) s2)) = (((count a) s1) + ((count a) s2)))) ==> ((\s2. (((count a) ((cat s1) s2)) = (((count a) s1) + ((count a) s2)))) s2)) = ((\s2. (((count a) ((cat s1) s2)) = (((count a) s1) + ((count a) s2)))) s2))
T c= c==> ! c= ccount f0 ccat f1 b0 c+ ccount f0 f1 ccount f0 b0 * / c= ccount f0 ccat f1 b0 c+ ccount f0 f1 ccount f0 b0 f2 * / c= ccount f0 ccat f1 b0 c+ ccount f0 f1 ccount f0 b0 f2
+ |- ((\f. (((list_sumn ((CONS h) t)) f) = ((f h) + ((list_sumn t) f)))) f)
T * / c= clist_sumn cCONS f0 f1 b0 c+ * b0 f0 clist_sumn f1 b0 f2
+ |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)) = ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
+ |- (((NUMERAL _0) = ((list_sumn NIL) I)) = ((NUMERAL _0) = ((list_sumn ((map (count a)) NIL)) I)))
T c= c= cNUMERAL c_0 clist_sumn cNIL part cI c= cNUMERAL c_0 clist_sumn cmap * part ccount f0 cNIL part cI
+ |- ((\x. ((I x) = x)) x)
T * / c= cI b0 b0 f0
+ |- ((\t. (!f. (((list_sumn ((CONS h) t)) f) = ((f h) + ((list_sumn t) f))))) t)
T * / ! c= clist_sumn cCONS f0 b0 b1 c+ * b1 f0 clist_sumn b0 b1 f1
+ |- (((!s. (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))) ==> ((\s. (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))) s1)) = ((\s. (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))) s1))
T c= c==> ! c= ccount f0 cflatten b0 clist_sumn cmap * part ccount f0 b0 part cI * / c= ccount f0 cflatten b0 clist_sumn cmap * part ccount f0 b0 part cI f1 * / c= ccount f0 cflatten b0 clist_sumn cmap * part ccount f0 b0 part cI f1
+ (s = s1) |- (((count a) (flatten s1)) = ((list_sumn ((map (count a)) s)) I))
T c==> c= f0 f1 c= ccount f2 cflatten f1 clist_sumn cmap * part ccount f2 f0 part cI
+ (flatten = ((foldr cat) NIL)) |- (((foldr cat) NIL) = flatten)
T c==> c= part cflatten * * part cfoldr part ccat cNIL c= * * part cfoldr part ccat cNIL part cflatten
+ (((count a) (flatten t)) = ((list_sumn ((map (count a)) t)) I)) |- ((((count a) (flatten t)) = ((list_sumn ((map (count a)) t)) I)) /\ (((count a) (flatten ((CONS h) t))) = ((list_sumn ((map (count a)) ((CONS h) t))) I)))
T c==> c= ccount f0 cflatten f1 clist_sumn cmap * part ccount f0 f1 part cI c/\ c= ccount f0 cflatten f1 clist_sumn cmap * part ccount f0 f1 part cI c= ccount f0 cflatten cCONS f2 f1 clist_sumn cmap * part ccount f0 cCONS f2 f1 part cI
+ (((count a) (flatten t)) = ((list_sumn ((map (count a)) t)) I)) |- ((((count a) ((cat h) (flatten t))) = ((I ((count a) h)) + ((count a) (flatten t)))) = (((count a) ((cat h) (flatten t))) = ((I ((count a) h)) + ((list_sumn ((map (count a)) t)) I))))
T c==> c= ccount f0 cflatten f1 clist_sumn cmap * part ccount f0 f1 part cI c= c= ccount f0 ccat f2 cflatten f1 c+ cI ccount f0 f2 ccount f0 cflatten f1 c= ccount f0 ccat f2 cflatten f1 c+ cI ccount f0 f2 clist_sumn cmap * part ccount f0 f1 part cI
+ |- ((((count a) ((cat h) (flatten t))) = ((list_sumn ((map (count a)) ((CONS h) t))) I)) = (((count a) ((cat h) (((foldr cat) NIL) t))) = ((list_sumn ((map (count a)) ((CONS h) t))) I)))
T c= c= ccount f0 ccat f1 cflatten f2 clist_sumn cmap * part ccount f0 cCONS f1 f2 part cI c= ccount f0 ccat f1 cfoldr part ccat cNIL f2 clist_sumn cmap * part ccount f0 cCONS f1 f2 part cI
- |- ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)
T * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
+ |- ((\x. (!s'. ((((count a) NIL) = (NUMERAL _0)) /\ (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s')))))) x)
T * / ! c/\ c= ccount f0 cNIL cNUMERAL c_0 c= ccount f0 cCONS b0 b1 c+ cCOND * f0 b0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount f0 b1 f1
- |- ((s = s1) = ((\s1. (s = s1)) s1))
T c= c= f0 f1 * / c= f0 b0 f1
+ ((\s1. (s = s1)) s1) |- (((s = s1) ==> (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I))) = (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I)))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c= ccount f2 cflatten f0 clist_sumn cmap * part ccount f2 f0 part cI c= ccount f2 cflatten f0 clist_sumn cmap * part ccount f2 f0 part cI
- |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))) = (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)
T * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
+ (((count a) (flatten t)) = ((list_sumn ((map (count a)) t)) I)) |- (((count a) ((cat h) (((foldr cat) NIL) t))) = ((list_sumn ((map (count a)) ((CONS h) t))) I))
T c==> c= ccount f0 cflatten f1 clist_sumn cmap * part ccount f0 f1 part cI c= ccount f0 ccat f2 cfoldr part ccat cNIL f1 clist_sumn cmap * part ccount f0 cCONS f2 f1 part cI
+ |- (((count a) ((cat h) (flatten t))) = ((I ((count a) h)) + ((count a) (flatten t))))
T c= ccount f0 ccat f1 cflatten f2 c+ cI ccount f0 f1 ccount f0 cflatten f2
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
+ |- ((s = s1) ==> (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I)))
T c==> c= f0 f1 c= ccount f2 cflatten f0 clist_sumn cmap * part ccount f2 f0 part cI
+ |- (((!h. (!t. (!f. (((list_sumn ((CONS h) t)) f) = ((f h) + ((list_sumn t) f)))))) ==> ((\h. (!t. (!f. (((list_sumn ((CONS h) t)) f) = ((f h) + ((list_sumn t) f)))))) h)) = ((\h. (!t. (!f. (((list_sumn ((CONS h) t)) f) = ((f h) + ((list_sumn t) f)))))) h))
T c= c==> ! ! ! c= clist_sumn cCONS b0 b1 b2 c+ * b2 b0 clist_sumn b1 b2 * / ! ! c= clist_sumn cCONS b0 b1 b2 c+ * b2 b0 clist_sumn b1 b2 f0 * / ! ! c= clist_sumn cCONS b0 b1 b2 c+ * b2 b0 clist_sumn b1 b2 f0
+ |- ((NUMERAL _0) = (NUMERAL _0))
T c= cNUMERAL c_0 cNUMERAL c_0
- ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ ((\s1. (s = s1)) s1) |- (((\s1. (s = s1)) s1) /\ (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I)))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c= ccount f2 cflatten f0 clist_sumn cmap * part ccount f2 f0 part cI
- |- ((?s1. (s = s1)) ==> (?s1. (s = s1)))
T c==> c? / c= f0 b0 c? / c= f0 b0
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- |- ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)
T * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
- (s = s1) |- (s1 = s)
T c==> c= f0 f1 c= f1 f0
- ((\s1. (s = s1)) s1) |- (((s = s1) ==> (?s1. (s = s1))) = (?s1. (s = s1)))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c? / c= f0 b0 c? / c= f0 b0
- |- (((!x. (!s. (!f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))))) ==> ((\x. (!s. (!f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))))) x)) = ((\x. (!s. (!f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))))) x))
T c= c==> ! ! ! c/\ c= cmap b2 cCONS b0 b1 cCONS * b2 b0 cmap b2 b1 c= cmap b2 cNIL cNIL * / ! ! c/\ c= cmap b2 cCONS b0 b1 cCONS * b2 b0 cmap b2 b1 c= cmap b2 cNIL cNIL f0 * / ! ! c/\ c= cmap b2 cCONS b0 b1 cCONS * b2 b0 cmap b2 b1 c= cmap b2 cNIL cNIL f0
- |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- (s = s1) |- ((s = s1) /\ (?s1. (s = s1)))
T c==> c= f0 f1 c/\ c= f0 f1 c? / c= f0 b0
- ((\s1. (s = s1)) s1) |- (((\s1. (s = s1)) s1) /\ (?s1. (s = s1)))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c? / c= f0 b0
- |- (((!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) ==> ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)) = ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0))
T c= c==> ! c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
- |- (((!x. (((\s1. (s = s1)) x) ==> (?s1. (s = s1)))) ==> ((?s1. (s = s1)) ==> (?s1. (s = s1)))) = ((?s1. (s = s1)) ==> (?s1. (s = s1))))
T c= c==> ! c==> * / c= f0 b1 b0 c? / c= f0 b1 c==> c? / c= f0 b0 c? / c= f0 b0 c==> c? / c= f0 b0 c? / c= f0 b0
- |- ((\x. (!s. (!f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))))) x)
T * / ! ! c/\ c= cmap b2 cCONS b0 b1 cCONS * b2 b0 cmap b2 b1 c= cmap b2 cNIL cNIL f0
- |- ((s = s1) ==> (?s1. (s = s1)))
T c==> c= f0 f1 c? / c= f0 b0
- |- (((!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) ==> ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)) = ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s))
T c= c==> ! ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- (((!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) ==> ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)) = ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f))
T c= c==> ! ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
- |- (((!f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))) ==> ((\f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))) f)) = ((\f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))) f))
T c= c==> ! c/\ c= cmap b0 cCONS f0 f1 cCONS * b0 f0 cmap b0 f1 c= cmap b0 cNIL cNIL * / c/\ c= cmap b0 cCONS f0 f1 cCONS * b0 f0 cmap b0 f1 c= cmap b0 cNIL cNIL f2 * / c/\ c= cmap b0 cCONS f0 f1 cCONS * b0 f0 cmap b0 f1 c= cmap b0 cNIL cNIL f2
- |- (((!x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) ==> ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)) = ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x))
T c= c==> ! ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c= c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0 cT
- |- (((count a) ((CONS x) s')) = ((((COND (a x)) (NUMERAL (BIT1 _0))) (NUMERAL _0)) + ((count a) s')))
T c= ccount f0 cCONS f1 f2 c+ cCOND * f0 f1 cNUMERAL cBIT1 c_0 cNUMERAL c_0 ccount f0 f2
- (s = s1) |- ((\s1. (s = s1)) s1)
T c==> c= f0 f1 * / c= f0 b0 f1
- |- (((!s. (!f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL)))) ==> ((\s. (!f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL)))) s)) = ((\s. (!f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL)))) s))
T c= c==> ! ! c/\ c= cmap b1 cCONS f0 b0 cCONS * b1 f0 cmap b1 b0 c= cmap b1 cNIL cNIL * / ! c/\ c= cmap b1 cCONS f0 b0 cCONS * b1 f0 cmap b1 b0 c= cmap b1 cNIL cNIL f1 * / ! c/\ c= cmap b1 cCONS f0 b0 cCONS * b1 f0 cmap b1 b0 c= cmap b1 cNIL cNIL f1
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- ((\f. ((((map f) ((CONS x) s)) = ((CONS (f x)) ((map f) s))) /\ (((map f) NIL) = NIL))) f)
T * / c/\ c= cmap b0 cCONS f0 f1 cCONS * b0 f0 cmap b0 f1 c= cmap b0 cNIL cNIL f2
- (s = s1) |- ((((count a) (flatten s1)) = ((list_sumn ((map (count a)) s1)) I)) = (((count a) (flatten s)) = ((list_sumn ((map (count a)) s)) I)))
T c==> c= f0 f1 c= c= ccount f2 cflatten f1 clist_sumn cmap * part ccount f2 f1 part cI c= ccount f2 cflatten f0 clist_sumn cmap * part ccount f2 f0 part cI
- (((list_sumn ((map (count a)) t)) I) = ((count a) (flatten t))) |- (((count a) (flatten t)) = ((list_sumn ((map (count a)) t)) I))
T c==> c= clist_sumn cmap * part ccount f0 f1 part cI ccount f0 cflatten f1 c= ccount f0 cflatten f1 clist_sumn cmap * part ccount f0 f1 part cI
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- ((((\s1. (s = s1)) s1) ==> (?s1. (s = s1))) = T)
T c= c==> * / c= f0 b0 f1 c? / c= f0 b0 cT
- (s = s1) |- (((count a) (flatten s1)) = ((list_sumn ((map (count a)) s1)) I))
T c==> c= f0 f1 c= ccount f2 cflatten f1 clist_sumn cmap * part ccount f2 f1 part cI
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
