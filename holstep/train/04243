N Aq8.fst_mem_rtran1
C |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0
D TRUTH
A |- T
T cT
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D o_DEF
A |- (!f. (!g. ((f o g) = (\x. (f (g x))))))
T c= * * part co f0 f1 / * f0 * f1 b0
D I_DEF
A |- (I = (\x. x))
T c= part cI / b0
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D ADD_CLAUSES
A |- ((!n. (((NUMERAL _0) + n) = n)) /\ ((!m. ((m + (NUMERAL _0)) = m)) /\ ((!m. (!n. (((SUC m) + n) = (SUC (m + n))))) /\ (!m. (!n. ((m + (SUC n)) = (SUC (m + n))))))))
T c/\ ! c= c+ cNUMERAL c_0 b0 b0 c/\ ! c= c+ b0 cNUMERAL c_0 b0 c/\ ! ! c= c+ cSUC b0 b1 cSUC c+ b0 b1 ! ! c= c+ b0 cSUC b1 cSUC c+ b0 b1
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D MEM_APPEND
A |- (!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))))
T c= cMEM f0 cAPPEND f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
D Fan.POWER
A |- ((!f. (((POWER f) (NUMERAL _0)) = I)) /\ (!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))))
T c/\ ! c= * * part cPOWER b0 cNUMERAL c_0 part cI ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D Seq.mem_seq1
A |- (!x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y))))
T c= cMEM f0 cCONS f1 cNIL c= f0 f1
D Seq2.next_prev_id
A |- (!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x))))
T c==> cuniq f0 c= cnext_el f0 cprev_el f0 f1 f1
D List_hypermap.uniq_find_face
A |- (!d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1
D List_hypermap.mem_find_face_imp_faces_eq
A |- (!d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2))))))
T c==> c/\ cuniq clist_of_darts f0 cMEM f1 cfind_face f0 f2 c= cfind_face f0 f1 cfind_face f0 f2
D Tame_defs2.good_list
A |- (!L. ((good_list L) = ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))))))))
T c= cgood_list f0 c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0
D Tame_defs2.normal_list
A |- (!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))))))
T c= cnormal_list f0 f1 c/\ cuniq cflatten f1 c/\ call / c~ c= b0 cNIL f1 c/\ call * part cf_last f0 f1 c/\ call * part cloop_list f0 f1 ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1
D Tame_defs2.split_normal_list
A |- (!L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))))
T c= csplit_normal_list f0 f1 f2 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b5 b6 cAPPEND b7 b4 cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 f3 cCONS f3 cNIL cAPPEND cCONS b0 cNIL cAPPEND cbetwn f1 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f2 f3 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f4 cnext_el f1 f3
D Tame_defs2.transform_list
A |- (!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))))
T c= ctransform_list f0 f1 c, f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f3 c, f2 f3 c, b5 cSND b4 cAPPEND creplace f3 cCONS cSND b4 cNIL f2 cCONS cFST b4 cNIL csplit_normal_list f0 f3 b3 b0 b2 cfind_face f0 b0 cprev_el f3 b1 cl'z f0 f2 f3 f1 cl'y f0 f3 f1
D Tame_defs2.ntrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= cntrans f0 f1 f2 f3 f4 cFST cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.rtrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= crtrans f0 f1 f2 f3 f4 cSND cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.ytrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x)))))))
T c= cytrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.ztrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))
T c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.marked_list
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))))))
T c= cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3
D Tame_list.uniq_flatten_uniq
A |- (!L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s))))
T c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1
D Pplhulj.marked_list_of_dart
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))))
T c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0
D Hojodcm.ytrans_mem_rtrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
D Hojodcm.mem_ztrans_rtrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2
D Hojodcm.PPLHULJ_v0
A |- (!L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 c/\ cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f4 c/\ cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c< cindexf f5 cytrans f0 f1 f2 f3 cNUMERAL c_0 f4 cindexf f5 cztrans f0 f1 f2 f3 cNUMERAL c_0 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c? / c= cztrans f0 f3 f1 f2 cNUMERAL c_0 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL
+ |- ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)
T * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ |- (((!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) ==> ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i)) = ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i))
T c= c==> ! c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
+ ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((((next_el ((find_face L) x)) x) = w) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c= c==> c= cnext_el cfind_face f0 f1 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f4 cAPPEND cCONS cnext_el f5 f3 cNIL cAPPEND cbetwn f5 cnext_el f5 f3 f6 cCONS f6 cNIL cAPPEND creplace f5 cCONS cSND csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL f7 cCONS cFST csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f4 cAPPEND cCONS cnext_el f5 f3 cNIL cAPPEND cbetwn f5 cnext_el f5 f3 f6 cCONS f6 cNIL cAPPEND creplace f5 cCONS cSND csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL f7 cCONS cFST csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL
+ |- ((((uniq r) ==> (((next_el r) ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0)))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c= c==> c==> cuniq f0 c= cnext_el f0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f4 cnext_el f0 cprev_el f0 cl'z f1 f2 f0 f3 cAPPEND cCONS cnext_el f0 f4 cNIL cAPPEND cbetwn f0 cnext_el f0 f4 cprev_el f0 cl'z f1 f2 f0 f3 cCONS cprev_el f0 cl'z f1 f2 f0 f3 cNIL cAPPEND creplace f0 cCONS cSND csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3 cNIL f2 cCONS cFST csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f4 cnext_el f0 cprev_el f0 cl'z f1 f2 f0 f3 cAPPEND cCONS cnext_el f0 f4 cNIL cAPPEND cbetwn f0 cnext_el f0 f4 cprev_el f0 cl'z f1 f2 f0 f3 cCONS cprev_el f0 cl'z f1 f2 f0 f3 cNIL cAPPEND creplace f0 cCONS cSND csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3 cNIL f2 cCONS cFST csplit_normal_list f1 f0 cfind_face f1 f4 f4 cprev_el f0 cl'z f1 f2 f0 f3 cNIL
+ |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ztrans L) N) r) x) (NUMERAL _0))) = ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) (((((ztrans L) N) r) x) (NUMERAL _0))))
T c= c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f4 f5 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c= cnext_el f2 f5 f4 c==> cMEM f4 f2 c==> cMEM f6 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
- |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) /\ (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f3 f2 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f3 c==> cmarked_list f0 f6 f1 f4 c/\ c= cnext_el f1 f2 f3 c==> cMEM f3 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ |- (((!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) ==> ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)) = ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x))
T c= c==> ! ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- |- (((all a) s) = (!x. (((MEM x) s) ==> (a x))))
T c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ c= cnext_el f1 f2 cf_list f0 f2 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 cs_flag_list f0 f3 f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 cMEM cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ |- (((!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) ==> ((\N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) N)) = ((\N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) N))
T c= c==> ! ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 * / ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 f1 * / ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 f1
- |- (((!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))) ==> ((\r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))) r)) = ((\r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))) r))
T c= c==> ! c= ccore f0 b0 cMAP * * part co part cFST part cHD cparts f0 b0 * / c= ccore f0 b0 cMAP * * part co part cFST part cHD cparts f0 b0 f1 * / c= ccore f0 b0 cMAP * * part co part cFST part cHD cparts f0 b0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
- |- ((\L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))) L)
T * / c= cMEM f0 cflatten b0 c? / c/\ cMEM b1 b0 cMEM f0 b1 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> cMEM f3 f1 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
- |- ((\L. (!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s)))))) L)
T * / ! c= cf_last b0 b1 c= cnext_el b1 cLAST b1 cf_list b0 cLAST b1 f0
+ |- (((!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) ==> ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)) = ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L))
T c= c==> ! ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
- (good_list L), (good_list_nodes L) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))) = (\r. (!x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0 / ! c==> c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) /\ (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c/\ cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
- |- ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y)))
T c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- (((all a) s) = (!x. (((MEM x) s) ==> (a x)))) |- ((!x. (((MEM x) s) ==> (a x))) = ((all a) s))
T c==> c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0 c= ! c==> cMEM b0 f1 * f0 b0 call f0 f1
+ |- ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)
T * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L))
T c= c==> ! ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0
- |- ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)
T * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) = T)
T c==> cmarked_list f0 f1 f2 f3 c= cmarked_list f0 f1 f2 f3 cT
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2 cT
- |- ((((find_face L) x) = f) = ((\f. (((find_face L) x) = f)) f))
T c= c= cfind_face f0 f1 f2 * / c= cfind_face f0 f1 b0 f2
- |- (((!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) ==> ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)) = ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2))
T c= c==> ! c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
- |- (((!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))) ==> ((\s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))) s)) = ((\s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))) s))
T c= c==> ! c= cf_last f0 b0 c= cnext_el b0 cLAST b0 cf_list f0 cLAST b0 * / c= cf_last f0 b0 c= cnext_el b0 cLAST b0 cf_list f0 cLAST b0 f1 * / c= cf_last f0 b0 c= cnext_el b0 cLAST b0 cf_list f0 cLAST b0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
- ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((\w. (((next_el ((find_face L) x)) x) = w)) w) /\ (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c/\ * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (((!x'. (((\w. (((next_el ((find_face L) x)) x) = w)) x') ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))) ==> ((?w. (((next_el ((find_face L) x)) x) = w)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))) = ((?w. (((next_el ((find_face L) x)) x) = w)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 c= c==> ! c==> * / c= cnext_el cfind_face f0 f4 f4 b1 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b1 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL c==> c? / c= cnext_el cfind_face f0 f4 f4 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL c==> c? / c= cnext_el cfind_face f0 f4 f4 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x), ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c==> * / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 f5 c/\ * / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (((!x. (((\f. (((find_face L) x) = f)) x) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))) ==> ((?f. (((find_face L) x) = f)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))) = ((?f. (((find_face L) x) = f)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el cfind_face f0 f4 f4 f5 c==> c= cl'y f0 f1 f4 f6 c==> c= cl'z f0 f7 f1 f4 f3 c==> cmarked_list f0 f7 f1 f4 c= c==> ! c==> * / c= cfind_face f0 f4 b1 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b1 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 cbetwn cfind_face f0 f6 f6 f3 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL f7 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL c==> c? / c= cfind_face f0 f4 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 f3 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL f7 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL c==> c? / c= cfind_face f0 f4 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 f3 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL f7 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL
- (is_restricted (hypermap_of_list L)) |- ((is_restricted (hypermap_of_list L)) = T)
T c==> cis_restricted chypermap_of_list f0 c= cis_restricted chypermap_of_list f0 cT
- |- (((!x'. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) x') ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))) ==> ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))) = ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))))
T c= c==> ! c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b1 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b1 c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ |- (((!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) ==> ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)) = ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x))
T c= c==> ! c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 cMEM cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cntrans f0 f2 f1 f3 cNUMERAL cBIT1 c_0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ ((((l'y L) r) x) = y) |- (((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c= cl'y f0 f1 f2 f3 c= cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
+ |- (((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))) = ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c= cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0 cMEM cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f3 f2 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 c/\ c= cl'z f0 f6 f1 f4 f3 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2
- (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) ==> ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 cMEM cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((uniq (flatten N)) /\ ((MEM r) N)) ==> (uniq r)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f4 f5 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f1 c==> cMEM f2 f0 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c==> c/\ cuniq cflatten f0 cMEM f2 f0 cuniq f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
- |- (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))
T c= cf_last f0 f1 c= cnext_el f1 cLAST f1 cf_list f0 cLAST f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))))))), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cnormal_list f0 f2 c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 cMEM cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cntrans f0 f2 f1 f3 cNUMERAL cBIT1 c_0
+ (good_list L), (good_list_nodes L), (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))), ((((marked_list L) N) r) x) |- ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c==> cmarked_list f0 f1 f2 f3 cMEM cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (!w. (((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 ! c==> * / c= cnext_el cfind_face f0 f4 f4 b1 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b1 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
+ |- (((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c= c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f1 cnext_el f2 cprev_el f2 cl'z f0 f3 f2 f4 cAPPEND cCONS cnext_el f2 f1 cNIL cAPPEND cbetwn f2 cnext_el f2 f1 cprev_el f2 cl'z f0 f3 f2 f4 cCONS cprev_el f2 cl'z f0 f3 f2 f4 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f1 f1 cprev_el f2 cl'z f0 f3 f2 f4 cNIL f3 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f1 f1 cprev_el f2 cl'z f0 f3 f2 f4 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f1 cnext_el f2 cprev_el f2 cl'z f0 f3 f2 f4 cAPPEND cCONS cnext_el f2 f1 cNIL cAPPEND cbetwn f2 cnext_el f2 f1 cprev_el f2 cl'z f0 f3 f2 f4 cCONS cprev_el f2 cl'z f0 f3 f2 f4 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f1 f1 cprev_el f2 cl'z f0 f3 f2 f4 cNIL f3 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f1 f1 cprev_el f2 cl'z f0 f3 f2 f4 cNIL
+ |- ((\d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))) x)
T * / ! c==> cuniq clist_of_darts b1 cuniq cfind_face b1 b0 f0
- |- (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))
T c= cMEM f0 ccat f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0
+ |- (((!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
+ |- (((!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) ==> ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)) = ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L))
T c= c==> ! ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x), ((\f. (((find_face L) x) = f)) f) |- (((\f. (((find_face L) x) = f)) f) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el cfind_face f0 f4 f4 f5 c==> c= cl'y f0 f1 f4 f6 c==> c= cl'z f0 f7 f1 f4 f3 c==> cmarked_list f0 f7 f1 f4 c==> * / c= cfind_face f0 f4 b0 f8 c/\ * / c= cfind_face f0 f4 b0 f8 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 f3 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL f7 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL
- |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) = ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1))
T c= c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c/\ cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cMEM f2 clist_of_darts f0 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
+ (uniq (list_of_darts L)) |- (((uniq ((find_face L) x)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))) = (((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))
T c==> cuniq clist_of_darts f0 c= c==> cuniq cfind_face f0 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f2 cnext_el f3 cprev_el f3 cl'z f0 f4 f3 f1 cAPPEND cCONS cnext_el f3 f2 cNIL cAPPEND cbetwn f3 cnext_el f3 f2 cprev_el f3 cl'z f0 f4 f3 f1 cCONS cprev_el f3 cl'z f0 f4 f3 f1 cNIL cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 f2 f2 cprev_el f3 cl'z f0 f4 f3 f1 cNIL f4 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 f2 f2 cprev_el f3 cl'z f0 f4 f3 f1 cNIL c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f2 cnext_el f3 cprev_el f3 cl'z f0 f4 f3 f1 cAPPEND cCONS cnext_el f3 f2 cNIL cAPPEND cbetwn f3 cnext_el f3 f2 cprev_el f3 cl'z f0 f4 f3 f1 cCONS cprev_el f3 cl'z f0 f4 f3 f1 cNIL cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 f2 f2 cprev_el f3 cl'z f0 f4 f3 f1 cNIL f4 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 f2 f2 cprev_el f3 cl'z f0 f4 f3 f1 cNIL
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f3 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> c/\ call * part cf_last f0 f2 c/\ call * part cloop_list f0 f2 ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cMEM f3 clist_of_darts f0 c==> cMEM f1 f2 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f3 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f3 cNIL
- |- ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)
T * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) /\ (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cmarked_list f0 f6 f1 f2 c/\ cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f4 f3 c==> cMEM f3 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
+ |- ((t \/ T) = T)
T c= c\/ f0 cT cT
+ (uniq (flatten N)) |- ((uniq (flatten N)) = T)
T c==> cuniq cflatten f0 c= cuniq cflatten f0 cT
+ |- ((\x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) x)
T * / ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 f3
- |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- ((((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))) = T)
T c= c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cT
- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) |- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1)
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4
+ |- (((!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) ==> ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)) = ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1))
T c= c==> ! ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- |- ((\r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))) r)
T * / c= ccore f0 b0 cMAP * * part co part cFST part cHD cparts f0 b0 f1
+ ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (!z. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 ! c==> * / c= cztrans f0 f3 f1 f2 cNUMERAL c_0 b1 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ |- (((((((l'z L) N) r) x) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))) = (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))
T c= c==> c= cl'z f0 f1 f2 f3 f4 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 cAPPEND cCONS cnext_el f2 f5 cNIL cAPPEND cbetwn f2 cnext_el f2 f5 cprev_el f2 cl'z f0 f1 f2 f3 cCONS cprev_el f2 cl'z f0 f1 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f1 f2 f3 cNIL c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 cAPPEND cCONS cnext_el f2 f5 cNIL cAPPEND cbetwn f2 cnext_el f2 f5 cprev_el f2 cl'z f0 f1 f2 f3 cCONS cprev_el f2 cl'z f0 f1 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f5 f5 cprev_el f2 cl'z f0 f1 f2 f3 cNIL
+ |- ((\s. (((uniq (flatten N)) /\ ((MEM s) N)) ==> (uniq s))) r)
T * / c==> c/\ cuniq cflatten f0 cMEM b0 f0 cuniq b0 f1
+ |- (((!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) d2))) ==> (((find_face L) y) = ((find_face L) d2))))) ==> ((\d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) d2))) ==> (((find_face L) y) = ((find_face L) d2))))) x)) = ((\d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) d2))) ==> (((find_face L) y) = ((find_face L) d2))))) x))
T c= c==> ! ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 * / ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 f1 * / ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 f1
+ |- ((((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))) ==> ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))) = (((((marked_list L) N) r) x) ==> ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c= c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3 cMEM cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0 c==> cmarked_list f0 f1 f2 f3 cMEM cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0
+ |- ((\L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s)))) N)
T * / ! c==> c/\ cuniq cflatten b0 cMEM b1 b0 cuniq b1 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((!x'. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) x') ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))) ==> ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))) = ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c= c==> ! c==> * / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b1 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0 c==> c? / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0 c==> c? / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
+ |- ((\N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))) N)
T * / ! ! ! c= cztrans f0 b0 b1 b2 b3 cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
- (good_list L) |- ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((~ ((final_list L) r)) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 cAPPEND cCONS cnext_el f2 f4 cNIL cAPPEND cbetwn f2 cnext_el f2 f4 cprev_el f2 cl'z f0 f1 f2 f3 cCONS cprev_el f2 cl'z f0 f1 f2 f3 cNIL cFST cCOND cfinal_list f0 f2 c, f1 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((next_el ((find_face L) x)) x) = w), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((next_el ((find_face L) x)) x) = w) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el cfind_face f0 f4 f4 f5 c==> c= cl'y f0 f1 f4 f6 c==> c= cl'z f0 f7 f1 f4 f3 c==> cmarked_list f0 f7 f1 f4 c/\ c= cnext_el cfind_face f0 f4 f4 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 f3 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL f7 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 f2 cNIL
+ |- (((!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) ==> ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) (NUMERAL _0)))) = ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) (NUMERAL _0))))
T c= c==> ! ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
- |- (((!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) ==> ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)) = ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s))
T c= c==> ! c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
- |- (((!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) ==> ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)) = ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i))
T c= c==> ! c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x), ((\y. ((((l'y L) r) x) = y)) y) |- (((\y. ((((l'y L) r) x) = y)) y) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> * / c= cl'y f0 f1 f2 b0 f4 c/\ * / c= cl'y f0 f1 f2 b0 f4 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))) = (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c/\ cMEM f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((all (\l. (~ (l = NIL)))) L), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) /\ ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f0 f6 f1 f4 c/\ call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ |- (((?f. (((find_face L) x) = f)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c= c==> c? / c= cfind_face f0 f1 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f2 f3 cAPPEND cCONS cnext_el f4 f2 cNIL cAPPEND cbetwn f4 cnext_el f4 f2 f5 cCONS f5 cNIL cAPPEND creplace f4 cCONS cSND csplit_normal_list f0 f4 cfind_face f0 f2 f2 f5 cNIL f6 cCONS cFST csplit_normal_list f0 f4 cfind_face f0 f2 f2 f5 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f2 f3 cAPPEND cCONS cnext_el f4 f2 cNIL cAPPEND cbetwn f4 cnext_el f4 f2 f5 cCONS f5 cNIL cAPPEND creplace f4 cCONS cSND csplit_normal_list f0 f4 cfind_face f0 f2 f2 f5 cNIL f6 cCONS cFST csplit_normal_list f0 f4 cfind_face f0 f2 f2 f5 cNIL
+ |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- |- (((!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) ==> ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)) = ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1))
T c= c==> ! ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- (((find_face L) x) = f) |- ((((find_face L) x) = f) /\ (?f. (((find_face L) x) = f)))
T c==> c= cfind_face f0 f1 f2 c/\ c= cfind_face f0 f1 f2 c? / c= cfind_face f0 f1 b0
- (good_list L), (good_list_nodes L) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) = (\r. (!x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 / ! c==> c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0
+ |- (((!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) ==> ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N)) = ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N))
T c= c==> ! ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1
- |- (((!x'. (((\y. ((((l'y L) r) x) = y)) x') ==> (?y. ((((l'y L) r) x) = y)))) ==> ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y)))) = ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y))))
T c= c==> ! c==> * / c= cl'y f0 f1 f2 b1 b0 c? / c= cl'y f0 f1 f2 b1 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- ((((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))) = (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c= c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)) |- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))
T c==> c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4 c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
+ |- (((!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) ==> ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)) = ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f))
T c= c==> ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ |- (((!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ==> ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)) = ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1))
T c= c==> ! ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> cnormal_list f0 f2 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> cMEM f5 f2 c==> cMEM f6 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (((~ (z = y)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> cmarked_list f0 f4 f1 f2 c= c==> c~ c= f5 f3 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f5 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 f6 cCONS f6 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 f6 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 f6 cNIL c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f4 f1 f2 c~ cfinal_list f0 f1 c~ c= cztrans f0 f4 f1 f2 cNUMERAL c_0 cytrans f0 f4 f1 f2 cNUMERAL c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f5 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 f6 cCONS f6 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 f6 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 f6 cNIL
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))) = T)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c= c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0 cT
+ |- (((!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) ==> ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)) = ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r))
T c= c==> ! ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ |- (?y. ((((l'y L) r) x) = y))
T c? / c= cl'y f0 f1 f2 b0
- |- ((\l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))) l)
T * / c= cMEM f0 cMAP f1 b0 c? / c/\ cMEM b1 b0 c= f0 * f1 b1 f2
- |- (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))
T c= cMEM f0 cMAP f1 f2 c? / c/\ cMEM b0 f2 c= f0 * f1 b0
- |- ((!d. t) = t)
T c= ! f0 f0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))) = T)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c= c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
+ |- ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 cAPPEND cCONS cnext_el f2 f4 cNIL cAPPEND cbetwn f2 cnext_el f2 f4 cprev_el f2 cl'z f0 f1 f2 f3 cCONS cprev_el f2 cl'z f0 f1 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 cAPPEND cCONS cnext_el f2 f4 cNIL cAPPEND cbetwn f2 cnext_el f2 f4 cprev_el f2 cl'z f0 f1 f2 f3 cCONS cprev_el f2 cl'z f0 f1 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f4 f4 cprev_el f2 cl'z f0 f1 f2 f3 cNIL
+ |- ((\r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) r)
T * / ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 f2
+ |- ((\f. (!x. (((LET f) x) = (f x)))) f)
T * / ! c= cLET b0 b1 * b0 b1 f0
+ (((next_el ((find_face L) x)) x) = w), (((find_face L) x) = f) |- (((next_el f) x) = w)
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c==> c= cfind_face f0 f1 f3 c= cnext_el f3 f1 f2
+ |- (((!L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) ==> ((\L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) L)) = ((\L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) L))
T c= c==> ! ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 * / ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 f0 * / ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 f0
- |- (((!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) ==> ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)) = ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N))
T c= c==> ! ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
+ |- (((!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) ==> ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)) = ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N))
T c= c==> ! ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
+ |- ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)
T * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f6 f2 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c==> c/\ cgood_list f1 c/\ cgood_list_nodes f1 c/\ cmarked_list f1 f0 f2 f3 c~ cfinal_list f1 f2 cMEM cytrans f1 f0 f2 f3 cNUMERAL c_0 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((MEM y) r) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f6 f2 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c/\ cMEM f6 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
+ |- ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)
T * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) /\ (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f2 c/\ cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f3 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f2 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f3 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f1 c==> c= cnext_el f1 f5 f4 c==> cMEM f4 f1 c==> cMEM f6 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f3 cNIL
+ |- ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L)
T * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
+ (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- (((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))) = (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c==> c= cztrans f1 f2 f0 f3 cNUMERAL c_0 f5 c= c==> c= cprev_el f0 f5 f4 c==> c= cztrans f1 f2 f0 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f0 cprev_el f0 cl'z f1 f2 f0 f3 cAPPEND cCONS cnext_el f0 f6 cNIL cAPPEND cbetwn f0 cnext_el f0 f6 cprev_el f0 cl'z f1 f2 f0 f3 cCONS cprev_el f0 cl'z f1 f2 f0 f3 cNIL cFST cCOND cfinal_list f1 f0 c, f2 f0 c, cAPPEND creplace f0 cCONS cSND csplit_normal_list f1 f0 cfind_face f1 cl'y f1 f0 f3 cl'y f1 f0 f3 cprev_el f0 cl'z f1 f2 f0 f3 cNIL f2 cCONS cFST csplit_normal_list f1 f0 cfind_face f1 cl'y f1 f0 f3 cl'y f1 f0 f3 cprev_el f0 cl'z f1 f2 f0 f3 cNIL cSND csplit_normal_list f1 f0 cfind_face f1 cl'y f1 f0 f3 cl'y f1 f0 f3 cprev_el f0 cl'z f1 f2 f0 f3 c==> c= cztrans f1 f2 f0 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f0 cprev_el f0 cl'z f1 f2 f0 f3 cAPPEND cCONS cnext_el f0 f6 cNIL cAPPEND cbetwn f0 cnext_el f0 f6 cprev_el f0 cl'z f1 f2 f0 f3 cCONS cprev_el f0 cl'z f1 f2 f0 f3 cNIL cFST cCOND cfinal_list f1 f0 c, f2 f0 c, cAPPEND creplace f0 cCONS cSND csplit_normal_list f1 f0 cfind_face f1 cl'y f1 f0 f3 cl'y f1 f0 f3 cprev_el f0 cl'z f1 f2 f0 f3 cNIL f2 cCONS cFST csplit_normal_list f1 f0 cfind_face f1 cl'y f1 f0 f3 cl'y f1 f0 f3 cprev_el f0 cl'z f1 f2 f0 f3 cNIL cSND csplit_normal_list f1 f0 cfind_face f1 cl'y f1 f0 f3 cl'y f1 f0 f3 cprev_el f0 cl'z f1 f2 f0 f3
+ |- (((!t. ((LET_END t) = t)) ==> ((\t. ((LET_END t) = t)) t)) = ((\t. ((LET_END t) = t)) t))
T c= c==> ! c= cLET_END b0 b0 * / c= cLET_END b0 b0 f0 * / c= cLET_END b0 b0 f0
- |- ((?f. (((find_face L) x) = f)) ==> (?f. (((find_face L) x) = f)))
T c==> c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0
+ |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))) = ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))))
T c= c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM y) r), ((((marked_list L) N) r) x) |- (((MEM y) r) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f3 f2 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f3 c==> cMEM f5 f1 c==> cmarked_list f0 f6 f1 f4 c/\ cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ |- (((!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) ==> ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i)) = ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i))
T c= c==> ! c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))) = T)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c= c==> * / c= cztrans f0 f3 f1 f2 cNUMERAL c_0 b0 f6 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0 cT
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
+ ((\y. ((((l'y L) r) x) = y)) y) |- ((((((l'y L) r) x) = y) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c= c==> c= cl'y f0 f1 f2 f3 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
- |- ((\y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))) y)
T * / ! c= cMEM b0 cMAP f0 b1 c? / c/\ cMEM b2 b1 c= b0 * f0 b2 f1
+ |- ((((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))) = ((good_list L) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))
T c= c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f1 cnext_el f2 cprev_el f2 cl'z f0 f3 f2 f4 cAPPEND cCONS cnext_el f2 f1 cNIL cAPPEND cbetwn f2 cnext_el f2 f1 cprev_el f2 cl'z f0 f3 f2 f4 cCONS cprev_el f2 cl'z f0 f3 f2 f4 cNIL cFST cCOND cfinal_list f0 f2 c, f3 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f4 cl'y f0 f2 f4 cprev_el f2 cl'z f0 f3 f2 f4 cNIL f3 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f4 cl'y f0 f2 f4 cprev_el f2 cl'z f0 f3 f2 f4 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f4 cl'y f0 f2 f4 cprev_el f2 cl'z f0 f3 f2 f4 c==> cgood_list f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f1 cnext_el f2 cprev_el f2 cl'z f0 f3 f2 f4 cAPPEND cCONS cnext_el f2 f1 cNIL cAPPEND cbetwn f2 cnext_el f2 f1 cprev_el f2 cl'z f0 f3 f2 f4 cCONS cprev_el f2 cl'z f0 f3 f2 f4 cNIL cFST cCOND cfinal_list f0 f2 c, f3 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f4 cl'y f0 f2 f4 cprev_el f2 cl'z f0 f3 f2 f4 cNIL f3 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f4 cl'y f0 f2 f4 cprev_el f2 cl'z f0 f3 f2 f4 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f4 cl'y f0 f2 f4 cprev_el f2 cl'z f0 f3 f2 f4
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((all (f_last L)) N), ((((marked_list L) N) r) x) |- (((all (f_last L)) N) /\ (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> call * part cf_last f0 f6 c==> cmarked_list f0 f6 f1 f4 c/\ call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f5 f6 c==> c= cztrans f0 f2 f1 f5 cNUMERAL c_0 f3 c==> cmarked_list f0 f2 f1 f5 c/\ cuniq cflatten f2 c==> call / c~ c= b0 cNIL f2 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f1 c==> c= cnext_el f1 f4 f3 c==> cMEM f3 f1 c==> cMEM f6 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f5 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f5 cCONS cprev_el f1 cl'z f0 f2 f1 f5 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f5 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f5 cNIL
+ |- ((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))) = T)
T c= ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 b0 cl'y f0 f2 b0 cprev_el f2 cl'z f0 f1 f2 b0 cntrans f0 f1 f2 b0 cNUMERAL cBIT1 c_0 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f4 f5 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c= cnext_el f2 f5 f4 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
+ |- ((\r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))))) r)
T * / ! ! c= cytrans f0 f1 b0 b1 b2 cl'y f0 crtrans f0 f1 b0 b1 b2 b1 f2
+ |- ((\f. (((find_face L) x) = f)) ((find_face L) x))
T * / c= cfind_face f0 f1 b0 cfind_face f0 f1
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1
- |- ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)
T * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
- |- ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)
T * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ |- ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)
T * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
- ((all (loop_list L)) N) |- (((all (loop_list L)) N) = T)
T c==> call * part cloop_list f0 f1 c= call * part cloop_list f0 f1 cT
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
+ |- ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x)
T * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) /\ ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f4 clist_of_darts f0 c==> cmarked_list f0 f6 f1 f4 c/\ cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c= c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cytrans f0 f1 f2 f3 cNUMERAL c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 f5 cAPPEND cCONS cnext_el f2 f4 cNIL cAPPEND cbetwn f2 cnext_el f2 f4 f6 cCONS f6 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 f6 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f4 f4 f6 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 f5 cAPPEND cCONS cnext_el f2 f4 cNIL cAPPEND cbetwn f2 cnext_el f2 f4 f6 cCONS f6 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 f4 f4 f6 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 f4 f4 f6 cNIL
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3
+ |- (((!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) ==> ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x)) = ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x))
T c= c==> ! ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 b0 cNUMERAL c_0 cytrans f0 f1 f2 b0 cNUMERAL c_0
- ((all (\s. (~ (s = NIL)))) N) |- (((all (\s. (~ (s = NIL)))) N) = T)
T c==> call / c~ c= b0 cNIL f0 c= call / c~ c= b0 cNIL f0 cT
+ |- (((!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) ==> ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L)) = ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L))
T c= c==> ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((all (loop_list L)) N), ((((marked_list L) N) r) x) |- (((all (loop_list L)) N) /\ ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> call * part cloop_list f0 f6 c==> cmarked_list f0 f6 f1 f4 c/\ call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ |- (((!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) ==> ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)) = ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x))
T c= c==> ! c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f3 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f3 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f1 c==> c= cnext_el f1 f5 f4 c==> cMEM f4 f1 c==> cMEM f6 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f3 cNIL
- ((normal_list L) N) |- (((normal_list L) N) = T)
T c==> cnormal_list f0 f1 c= cnormal_list f0 f1 cT
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L))
T c= c==> ! ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0
+ |- ((\x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))) x)
T * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= b1 cfind_face f0 b0 c= b2 cnext_el b1 b0 c/\ cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 b1 c/\ cMEM cztrans f0 f1 f2 b0 cNUMERAL c_0 b1 c< cindexf b2 cytrans f0 f1 f2 b0 cNUMERAL c_0 b1 cindexf b2 cztrans f0 f1 f2 b0 cNUMERAL c_0 b1 f3
- |- ((((\f. (((find_face L) x) = f)) f) ==> (?f. (((find_face L) x) = f))) = T)
T c= c==> * / c= cfind_face f0 f1 b0 f2 c? / c= cfind_face f0 f1 b0 cT
- |- ((\s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s))))) s)
T * / c= cf_last f0 b0 c= cnext_el b0 cLAST b0 cf_list f0 cLAST b0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> cMEM f6 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) ==> ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r)) = ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
- |- ((\N. (((quotient_list L) N) = ((MAP (core L)) N))) N)
T * / c= cquotient_list f0 b0 cMAP * part ccore f0 b0 f1
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))) = (\x. (((((marked_list L) N) r) x) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 b0 c~ cfinal_list f0 f1 cMEM cztrans f0 f2 f1 b0 cNUMERAL c_0 f1 / c==> cmarked_list f0 f2 f1 b0 cMEM cztrans f0 f2 f1 b0 cNUMERAL c_0 f1
+ |- ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)
T * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 c==> * / c= cnext_el cfind_face f0 f4 f4 b0 f7 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f3 f2 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f3 c==> cmarked_list f0 f6 f1 f4 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f3 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> c/\ call * part cf_last f0 f2 c/\ call * part cloop_list f0 f2 ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cMEM f3 clist_of_darts f0 c==> cMEM f1 f2 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f2 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f3 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f6 cNIL cAPPEND cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f6 f6 cprev_el f1 cl'z f0 f2 f1 f3 cNIL
- ((MEM x) (list_of_darts L)) |- (((MEM x) (list_of_darts L)) = T)
T c==> cMEM f0 clist_of_darts f1 c= cMEM f0 clist_of_darts f1 cT
+ |- ((\L. (((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) x))) ==> (((find_face L) y) = ((find_face L) x)))) L)
T * / c==> c/\ cuniq clist_of_darts b0 cMEM f0 cfind_face b0 f1 c= cfind_face b0 f0 cfind_face b0 f1 f2
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- |- (!z. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ |- ((\L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) L)
T * / ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 f0
+ |- (((!d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) ==> ((\d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) y)) = ((\d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) y))
T c= c==> ! ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 * / ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 f0 * / ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 f0
+ (((next_el r) z1) = z), (((find_face L) y) = f) |- ((((find_face L) y) = f) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> c= cnext_el f0 f1 f2 c==> c= cfind_face f3 f4 f5 c/\ c= cfind_face f3 f4 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn cfind_face f3 f4 f4 f2 cAPPEND cCONS cnext_el f0 f4 cNIL cAPPEND cbetwn f0 cnext_el f0 f4 f1 cCONS f1 cNIL cAPPEND creplace f0 cCONS cSND csplit_normal_list f3 f0 cfind_face f3 f4 f4 f1 cNIL f6 cCONS cFST csplit_normal_list f3 f0 cfind_face f3 f4 f4 f1 cNIL
+ |- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) (((((ztrans L) N) r) x) (NUMERAL _0)))
T * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
- |- (((((l'y L) r) x) = y) = ((\y. ((((l'y L) r) x) = y)) y))
T c= c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f6 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f6 f1 f2
+ |- ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)
T * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))) = (\x. (((((marked_list L) N) r) x) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 b0 c~ cfinal_list f0 f1 c~ c= cztrans f0 f2 f1 b0 cNUMERAL c_0 cytrans f0 f2 f1 b0 cNUMERAL c_0 / c==> cmarked_list f0 f2 f1 b0 c~ c= cztrans f0 f2 f1 b0 cNUMERAL c_0 cytrans f0 f2 f1 b0 cNUMERAL c_0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 cs_flag_list f0 f3 f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 cMEM cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
- |- ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)
T * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f4 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((all (\l. (~ (l = NIL)))) L), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f0 f6 f1 f4 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
- |- ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
+ (~ ((final_list L) r)), (uniq r), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq r) /\ ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c/\ cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ |- ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)
T * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 f2
- |- (((!x'. (((\w. (((next_el ((find_face L) x)) x) = w)) x') ==> (?w. (((next_el ((find_face L) x)) x) = w)))) ==> ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (?w. (((next_el ((find_face L) x)) x) = w)))) = ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (?w. (((next_el ((find_face L) x)) x) = w))))
T c= c==> ! c==> * / c= cnext_el cfind_face f0 f1 f1 b1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b1 c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0 c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> cuniq cfind_face f0 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
- ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) /\ (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c/\ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- (!y. (((\y. ((((l'y L) r) x) = y)) y) ==> (?y. ((((l'y L) r) x) = y))))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((~ (z = y)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 c==> c~ c= f3 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL
- ((!x. (((MEM x) s) ==> (a x))) = ((all a) s)) |- (((all a) s) = (!x. (((MEM x) s) ==> (a x))))
T c==> c= ! c==> cMEM b0 f0 * f1 b0 call f1 f0 c= call f1 f0 ! c==> cMEM b0 f0 * f1 b0
+ |- (((?w. (((next_el ((find_face L) x)) x) = w)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c= c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f2 f3 cAPPEND cCONS cnext_el f4 f2 cNIL cAPPEND cbetwn f4 cnext_el f4 f2 f5 cCONS f5 cNIL cAPPEND creplace f4 cCONS cSND csplit_normal_list f0 f4 cfind_face f0 f2 f2 f5 cNIL f6 cCONS cFST csplit_normal_list f0 f4 cfind_face f0 f2 f2 f5 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f2 f2 f3 cAPPEND cCONS cnext_el f4 f2 cNIL cAPPEND cbetwn f4 cnext_el f4 f2 f5 cCONS f5 cNIL cAPPEND creplace f4 cCONS cSND csplit_normal_list f0 f4 cfind_face f0 f2 f2 f5 cNIL f6 cCONS cFST csplit_normal_list f0 f4 cfind_face f0 f2 f2 f5 cNIL
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c/\ c= cnext_el f2 f4 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
- |- ((\s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))) s)
T * / c= cMEM f0 cfilter f1 b0 c/\ * f1 f0 cMEM f0 b0 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
- |- (((!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) ==> ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)) = ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x))
T c= c==> ! ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c==> c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
+ |- ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)
T * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
- |- ((((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))) = T)
T c= c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 cT
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c==> c? / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
- (~ (z = y)) |- (((~ (y = z)) ==> ((y = z) = F)) = ((y = z) = F))
T c==> c~ c= f0 f1 c= c==> c~ c= f1 f0 c= c= f1 f0 cF c= c= f1 f0 cF
- (good_list L), (good_list_nodes L) |- ((good_list_nodes L) /\ (((((marked_list L) N) r) x) ==> ((~ ((final_list L) r)) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 cAPPEND cCONS cnext_el f2 f4 cNIL cAPPEND cbetwn f2 cnext_el f2 f4 cprev_el f2 cl'z f0 f1 f2 f3 cCONS cprev_el f2 cl'z f0 f1 f2 f3 cNIL cFST cCOND cfinal_list f0 f2 c, f1 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3
- |- ((\x. (!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l)))))) x)
T * / ! c= cMEM b0 cflatten b1 c? / c/\ cMEM b2 b1 cMEM b0 b2 f0
+ (uniq (flatten N)), ((MEM r) N) |- (((uniq r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))) = ((((uniq (flatten N)) /\ ((MEM r) N)) ==> (uniq r)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))
T c==> cuniq cflatten f0 c==> cMEM f1 f0 c= c==> cuniq f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f3 f3 cnext_el f1 cprev_el f1 cl'z f2 f0 f1 f4 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f2 f0 f1 f4 cCONS cprev_el f1 cl'z f2 f0 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4 cNIL f0 cCONS cFST csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4 cNIL c==> c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f3 f3 cnext_el f1 cprev_el f1 cl'z f2 f0 f1 f4 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f2 f0 f1 f4 cCONS cprev_el f1 cl'z f2 f0 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4 cNIL f0 cCONS cFST csplit_normal_list f2 f1 cfind_face f2 f3 f3 cprev_el f1 cl'z f2 f0 f1 f4 cNIL
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
- (~ (z = y)) |- ((z = y) = F)
T c==> c~ c= f0 f1 c= c= f0 f1 cF
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM z) r), ((((marked_list L) N) r) x) |- (((MEM z) r) /\ (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f3 f2 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f3 c==> cMEM f3 f1 c==> cmarked_list f0 f6 f1 f4 c/\ cMEM f3 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ |- (((!f. (((POWER f) (NUMERAL _0)) = I)) ==> ((\f. (((POWER f) (NUMERAL _0)) = I)) f)) = ((\f. (((POWER f) (NUMERAL _0)) = I)) f))
T c= c==> ! c= * * part cPOWER b0 cNUMERAL c_0 part cI * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0 * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0
+ |- ((\i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))) i)
T * / c= crtrans f0 f1 f2 f3 b0 cSND cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
- ((((l'y L) r) x) = y) |- ((\y. ((((l'y L) r) x) = y)) y)
T c==> c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
+ |- ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)
T * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
- |- ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ |- (T = (((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) (((replace r) ((CONS ((APPEND ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL)))) (((betwn f) y) z))) NIL)) N)) \/ (((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL)))) = ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL)))))))
T c= cT c\/ cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 cAPPEND cCONS cnext_el f4 f2 cNIL cAPPEND cbetwn f4 cnext_el f4 f2 f5 cCONS f5 cNIL creplace f4 cCONS cAPPEND cAPPEND cCONS f3 cNIL cAPPEND cbetwn f4 f3 f2 cCONS f2 cNIL cbetwn f1 f2 f3 cNIL f6 c= cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 cAPPEND cCONS cnext_el f4 f2 cNIL cAPPEND cbetwn f4 cnext_el f4 f2 f5 cCONS f5 cNIL cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f1 f2 f3 cAPPEND cCONS cnext_el f4 f2 cNIL cAPPEND cbetwn f4 cnext_el f4 f2 f5 cCONS f5 cNIL
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f3 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2
+ |- ((SUC (NUMERAL _0)) = (NUMERAL (BIT1 _0)))
T c= cSUC cNUMERAL c_0 cNUMERAL cBIT1 c_0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> cMEM f3 f1 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 cMEM cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cntrans f0 f2 f1 f3 cNUMERAL cBIT1 c_0
+ |- (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))
T c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
+ (((find_face L) y) = f) |- (((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) f) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) f) y) z1))) NIL))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> c= cfind_face f0 f1 f2 c= cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f1 f3 cAPPEND cCONS cnext_el f4 f1 cNIL cAPPEND cbetwn f4 cnext_el f4 f1 f5 cCONS f5 cNIL cAPPEND creplace f4 cCONS cSND csplit_normal_list f0 f4 f2 f1 f5 cNIL f6 cCONS cFST csplit_normal_list f0 f4 f2 f1 f5 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f1 f3 cAPPEND cCONS cnext_el f4 f1 cNIL cAPPEND cbetwn f4 cnext_el f4 f1 f5 cCONS f5 cNIL cAPPEND creplace f4 cCONS cSND csplit_normal_list f0 f4 cfind_face f0 f1 f1 f5 cNIL f6 cCONS cFST csplit_normal_list f0 f4 cfind_face f0 f1 f1 f5 cNIL
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
+ ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f5 f5 cnext_el f0 cprev_el f0 cl'z f1 f2 f0 f3 cAPPEND cCONS cnext_el f0 f5 cNIL cAPPEND cbetwn f0 cnext_el f0 f5 cprev_el f0 cl'z f1 f2 f0 f3 cCONS cprev_el f0 cl'z f1 f2 f0 f3 cNIL cntrans f1 f2 f0 f3 cNUMERAL cBIT1 c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f5 f5 cnext_el f0 cprev_el f0 cl'z f1 f2 f0 f3 cAPPEND cCONS cnext_el f0 f5 cNIL cAPPEND cbetwn f0 cnext_el f0 f5 cprev_el f0 cl'z f1 f2 f0 f3 cCONS cprev_el f0 cl'z f1 f2 f0 f3 cNIL cntrans f1 f2 f0 f3 cNUMERAL cBIT1 c_0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = T)
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 c= c==> * / c= cnext_el cfind_face f0 f4 f4 b0 f7 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL cT
+ (uniq (list_of_darts L)), (((find_face L) x) = f), ((MEM y) f) |- (((((find_face L) y) = f) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = ((((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) x))) ==> (((find_face L) y) = ((find_face L) x))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))))
T c==> cuniq clist_of_darts f0 c==> c= cfind_face f0 f1 f2 c==> cMEM f3 f2 c= c==> c= cfind_face f0 f3 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f4 cAPPEND cCONS cnext_el f5 f3 cNIL cAPPEND cbetwn f5 cnext_el f5 f3 f6 cCONS f6 cNIL cAPPEND creplace f5 cCONS cSND csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL f7 cCONS cFST csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL c==> c==> c/\ cuniq clist_of_darts f0 cMEM f3 cfind_face f0 f1 c= cfind_face f0 f3 cfind_face f0 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f4 cAPPEND cCONS cnext_el f5 f3 cNIL cAPPEND cbetwn f5 cnext_el f5 f3 f6 cCONS f6 cNIL cAPPEND creplace f5 cCONS cSND csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL f7 cCONS cFST csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))) = (\x. (((((marked_list L) N) r) x) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 b0 c~ cfinal_list f0 f1 cMEM cytrans f0 f2 f1 b0 cNUMERAL c_0 f1 / c==> cmarked_list f0 f2 f1 b0 cMEM cytrans f0 f2 f1 b0 cNUMERAL c_0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c==> * / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) /\ ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c/\ c~ cfinal_list f0 f1 cMEM cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cntrans f0 f2 f1 f3 cNUMERAL cBIT1 c_0
- ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((((next_el ((find_face L) x)) x) = w) ==> (?w. (((next_el ((find_face L) x)) x) = w))) = (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c= c==> c= cnext_el cfind_face f0 f1 f1 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- (((!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))) ==> ((\l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))) l)) = ((\l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))) l))
T c= c==> ! c= cMEM f0 cMAP f1 b0 c? / c/\ cMEM b1 b0 c= f0 * f1 b1 * / c= cMEM f0 cMAP f1 b0 c? / c/\ cMEM b1 b0 c= f0 * f1 b1 f2 * / c= cMEM f0 cMAP f1 b0 c? / c/\ cMEM b1 b0 c= f0 * f1 b1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cntrans f0 f4 f1 f2 cNUMERAL cBIT1 c_0
+ |- (((!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) ==> ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L)) = ((\L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))))) L))
T c= c==> ! ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0 * / ! ! ! ! c= crtrans b0 b1 b2 b3 b4 cSND cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((MEM z) r) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c/\ cMEM f5 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
+ |- ((\N. (!r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x)))))) N)
T * / ! ! ! c= cytrans f0 b0 b1 b2 b3 cl'y f0 crtrans f0 b0 b1 b2 b3 b2 f1
- |- ((\f. (!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))))) f)
T * / ! ! c= cMEM b1 cMAP b0 b2 c? / c/\ cMEM b3 b2 c= b1 * b0 b3 f0
- (uniq ((find_face L) x)), (((find_face L) x) = f) |- ((uniq f) = T)
T c==> cuniq cfind_face f0 f1 c==> c= cfind_face f0 f1 f2 c= cuniq f2 cT
- |- (((((l'y L) r) x) = y) ==> (?y. ((((l'y L) r) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f3 f3 cprev_el f1 cl'z f0 f4 f1 f2 cNIL
+ |- ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)
T * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ |- (((((l'y L) r) x) = (((l'y L) r) x)) = ((\y. ((((l'y L) r) x) = y)) (((l'y L) r) x)))
T c= c= cl'y f0 f1 f2 cl'y f0 f1 f2 * / c= cl'y f0 f1 f2 b0 cl'y f0 f1 f2
+ |- (((!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) ==> ((\x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) x)) = ((\x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) x))
T c= c==> ! ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 * / ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 f3 * / ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 f3
+ |- (((!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) ==> ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)) = ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r))
T c= c==> ! ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f3 f2 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f3 c==> cmarked_list f0 f6 f1 f4 c==> cMEM f3 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ |- (((!f. (!x. (((LET f) x) = (f x)))) ==> ((\f. (!x. (((LET f) x) = (f x)))) f)) = ((\f. (!x. (((LET f) x) = (f x)))) f))
T c= c==> ! ! c= cLET b0 b1 * b0 b1 * / ! c= cLET b0 b1 * b0 b1 f0 * / ! c= cLET b0 b1 * b0 b1 f0
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cytrans f0 f1 f2 f3 cNUMERAL c_0 cT
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 cMEM cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cntrans f0 f2 f1 f3 cNUMERAL cBIT1 c_0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
- |- ((\p. (!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q))))) p)
T * / ! c= cLAST cAPPEND b0 b1 cCOND c= b1 cNIL cLAST b0 cLAST b1 f0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f4 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ |- ((((next_el ((find_face L) x)) x) = ((next_el ((find_face L) x)) x)) = ((\w. (((next_el ((find_face L) x)) x) = w)) ((next_el ((find_face L) x)) x)))
T c= c= cnext_el cfind_face f0 f1 f1 cnext_el cfind_face f0 f1 f1 * / c= cnext_el cfind_face f0 f1 f1 b0 cnext_el cfind_face f0 f1 f1
+ |- (((!L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) ==> ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L)) = ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L))
T c= c==> ! ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0 * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) /\ ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c/\ c= cl'y f0 f1 f2 f3 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL cFST cCOND cfinal_list f0 f1 c, f4 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL f4 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f4 f1 f2
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))) r)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
- |- ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)
T * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL
+ |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))) = T)
T c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cntrans f0 f1 f2 f3 cNUMERAL cBIT1 c_0 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 cAPPEND cCONS cnext_el f2 f6 cNIL cAPPEND cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 cCONS cprev_el f2 cl'z f1 f0 f2 f3 cNIL cAPPEND creplace f2 cCONS cSND csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL f0 cCONS cFST csplit_normal_list f1 f2 cfind_face f1 f6 f6 cprev_el f2 cl'z f1 f0 f2 f3 cNIL
- |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
+ |- (((!y. (((MEM x) ((CONS y) NIL)) = (x = y))) ==> ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y)) = ((\y. (((MEM x) ((CONS y) NIL)) = (x = y))) y))
T c= c==> ! c= cMEM f0 cCONS b0 cNIL c= f0 b0 * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1 * / c= cMEM f0 cCONS b0 cNIL c= f0 b0 f1
- ((\f. (((find_face L) x) = f)) f) |- (((((find_face L) x) = f) ==> (?f. (((find_face L) x) = f))) = (?f. (((find_face L) x) = f)))
T c==> * / c= cfind_face f0 f1 b0 f2 c= c==> c= cfind_face f0 f1 f2 c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0
+ |- ((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))))) = T)
T c= ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cFST csplit_normal_list f0 b0 cfind_face f0 cl'y f0 b0 b1 cl'y f0 b0 b1 cprev_el b0 cl'z f0 f1 b0 b1 cntrans f0 f1 b0 b1 cNUMERAL cBIT1 c_0 cT
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
+ (((next_el r) z1) = z) |- ((((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) (((replace r) ((CONS ((APPEND ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL)))) (((betwn f) y) z))) NIL)) N)) \/ (((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL)))) = ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL)))))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) f) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) f) y) z1))) NIL))))
T c==> c= cnext_el f0 f1 f2 c= c\/ cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f4 f5 f2 cAPPEND cCONS cnext_el f0 f5 cNIL cAPPEND cbetwn f0 cnext_el f0 f5 f1 cCONS f1 cNIL creplace f0 cCONS cAPPEND cAPPEND cCONS f2 cNIL cAPPEND cbetwn f0 f2 f5 cCONS f5 cNIL cbetwn f4 f5 f2 cNIL f6 c= cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f4 f5 f2 cAPPEND cCONS cnext_el f0 f5 cNIL cAPPEND cbetwn f0 cnext_el f0 f5 f1 cCONS f1 cNIL cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f4 f5 f2 cAPPEND cCONS cnext_el f0 f5 cNIL cAPPEND cbetwn f0 cnext_el f0 f5 f1 cCONS f1 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn f4 f5 f2 cAPPEND cCONS cnext_el f0 f5 cNIL cAPPEND cbetwn f0 cnext_el f0 f5 f1 cCONS f1 cNIL cAPPEND creplace f0 cCONS cSND csplit_normal_list f3 f0 f4 f5 f1 cNIL f6 cCONS cFST csplit_normal_list f3 f0 f4 f5 f1 cNIL
- |- (((!s. ((~ (s = NIL)) = (?x. ((MEM x) s)))) ==> ((\s. ((~ (s = NIL)) = (?x. ((MEM x) s)))) s)) = ((\s. ((~ (s = NIL)) = (?x. ((MEM x) s)))) s))
T c= c==> ! c= c~ c= b0 cNIL c? / cMEM b1 b0 * / c= c~ c= b0 cNIL c? / cMEM b1 b0 f0 * / c= c~ c= b0 cNIL c? / cMEM b1 b0 f0
- |- (((!a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) ==> ((\a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) a)) = ((\a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) a))
T c= c==> ! ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 * / ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 f0 * / ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 f0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))))), ((((marked_list L) N) r) x) |- (((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))))) /\ ((MEM (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f2 c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cmarked_list f0 f2 f1 f3 c/\ c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f2 c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 cMEM cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cntrans f0 f2 f1 f3 cNUMERAL cBIT1 c_0
+ |- (((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0))))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c= c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f4 cnext_el f0 cprev_el f0 cl'z f1 f2 f0 f3 cAPPEND cCONS cnext_el f0 f4 cNIL cAPPEND cbetwn f0 cnext_el f0 f4 cprev_el f0 cl'z f1 f2 f0 f3 cCONS cprev_el f0 cl'z f1 f2 f0 f3 cNIL cntrans f1 f2 f0 f3 cNUMERAL cBIT1 c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f4 f4 cnext_el f0 cprev_el f0 cl'z f1 f2 f0 f3 cAPPEND cCONS cnext_el f0 f4 cNIL cAPPEND cbetwn f0 cnext_el f0 f4 cprev_el f0 cl'z f1 f2 f0 f3 cCONS cprev_el f0 cl'z f1 f2 f0 f3 cNIL cntrans f1 f2 f0 f3 cNUMERAL cBIT1 c_0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2
+ (good_list_nodes L) |- ((good_list_nodes L) = T)
T c==> cgood_list_nodes f0 c= cgood_list_nodes f0 cT
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c/\ c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL f3 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f3 f1 f2 cNIL
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((?y. ((((l'y L) r) x) = y)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (((((ntrans L) N) r) x) (NUMERAL (BIT1 _0)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c? / c= cl'y f0 f1 f2 b0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL cntrans f0 f3 f1 f2 cNUMERAL cBIT1 c_0
+ ((\f. (((find_face L) x) = f)) f) |- (((((find_face L) x) = f) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> * / c= cfind_face f0 f1 b0 f2 c= c==> c= cfind_face f0 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f4 cAPPEND cCONS cnext_el f5 f3 cNIL cAPPEND cbetwn f5 cnext_el f5 f3 f6 cCONS f6 cNIL cAPPEND creplace f5 cCONS cSND csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL f7 cCONS cFST csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f4 cAPPEND cCONS cnext_el f5 f3 cNIL cAPPEND cbetwn f5 cnext_el f5 f3 f6 cCONS f6 cNIL cAPPEND creplace f5 cCONS cSND csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL f7 cCONS cFST csplit_normal_list f0 f5 cfind_face f0 f3 f3 f6 cNIL
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) /\ (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c/\ c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
+ |- (((!s. ((uniq s) ==> (((next_el s) ((prev_el s) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0))))) ==> ((\s. ((uniq s) ==> (((next_el s) ((prev_el s) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0))))) r)) = ((\s. ((uniq s) ==> (((next_el s) ((prev_el s) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0))))) r))
T c= c==> ! c==> cuniq b0 c= cnext_el b0 cprev_el b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / c==> cuniq b0 c= cnext_el b0 cprev_el b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 f2 * / c==> cuniq b0 c= cnext_el b0 cprev_el b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 f2
+ |- ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i)
T * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4
- |- (((!p. (!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q))))) ==> ((\p. (!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q))))) p)) = ((\p. (!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q))))) p))
T c= c==> ! ! c= cLAST cAPPEND b0 b1 cCOND c= b1 cNIL cLAST b0 cLAST b1 * / ! c= cLAST cAPPEND b0 b1 cCOND c= b1 cNIL cLAST b0 cLAST b1 f0 * / ! c= cLAST cAPPEND b0 b1 cCOND c= b1 cNIL cLAST b0 cLAST b1 f0
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ c= cztrans f0 b0 b1 b2 cNUMERAL c_0 cytrans f0 b0 b1 b2 cNUMERAL c_0
- (y = z) |- (z = y)
T c==> c= f0 f1 c= f1 f0
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))) N))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ c= cztrans f0 b0 b1 b2 cNUMERAL c_0 cytrans f0 b0 b1 b2 cNUMERAL c_0 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ c= cztrans f0 b0 b1 b2 cNUMERAL c_0 cytrans f0 b0 b1 b2 cNUMERAL c_0 f1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ c= cztrans f0 b0 b1 b2 cNUMERAL c_0 cytrans f0 b0 b1 b2 cNUMERAL c_0 f1
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) L)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 f0
- |- (!f. (((\f. (((find_face L) x) = f)) f) ==> (?f. (((find_face L) x) = f))))
T c==> * / c= cfind_face f0 f1 b0 f2 c? / c= cfind_face f0 f1 b0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0
- ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z)
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))) x)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 b0 cNUMERAL c_0 cytrans f0 f1 f2 b0 cNUMERAL c_0 f3
- |- (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))
T c= cMEM f0 cfilter f1 f2 c/\ * f1 f0 cMEM f0 f2
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((\d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) d)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 * / c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 f1
- (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c/\ cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
- |- ((\l. (((APPEND l) NIL) = l)) l)
T * / c= cAPPEND b0 cNIL b0 f0
- |- ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)
T * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
- |- (((!x'. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) x') ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))) ==> ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))) = ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))))
T c= c==> ! c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b1 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b1 c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- (((!x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) ==> ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x)) = ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x))
T c= c==> ! ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- |- (((!L. (!N. (((quotient_list L) N) = ((MAP (core L)) N)))) ==> ((\L. (!N. (((quotient_list L) N) = ((MAP (core L)) N)))) L)) = ((\L. (!N. (((quotient_list L) N) = ((MAP (core L)) N)))) L))
T c= c==> ! ! c= cquotient_list b0 b1 cMAP * part ccore b0 b1 * / ! c= cquotient_list b0 b1 cMAP * part ccore b0 b1 f0 * / ! c= cquotient_list b0 b1 cMAP * part ccore b0 b1 f0
- |- (((core L) r) = ((MAP (FST o HD)) ((parts L) r)))
T c= ccore f0 f1 cMAP * * part co part cFST part cHD cparts f0 f1
- |- (((!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))) ==> ((\s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))) s)) = ((\s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))) s))
T c= c==> ! c= cMEM f0 cfilter f1 b0 c/\ * f1 f0 cMEM f0 b0 * / c= cMEM f0 cfilter f1 b0 c/\ * f1 f0 cMEM f0 b0 f2 * / c= cMEM f0 cfilter f1 b0 c/\ * f1 f0 cMEM f0 b0 f2
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((\d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) d)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 * / c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 f2
- |- (((!a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))))) ==> ((\a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))))) a)) = ((\a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))))) a))
T c= c==> ! ! ! c= cMEM b1 cfilter b0 b2 c/\ * b0 b1 cMEM b1 b2 * / ! ! c= cMEM b1 cfilter b0 b2 c/\ * b0 b1 cMEM b1 b2 f0 * / ! ! c= cMEM b1 cfilter b0 b2 c/\ * b0 b1 cMEM b1 b2 f0
- |- ((\a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) a)
T * / ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 f0
- |- ((\x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))) x)
T * / ! c= cMEM b0 cfilter f0 b1 c/\ * f0 b0 cMEM b0 b1 f1
- ((((s_flag_list L) N) r) x) |- (((((s_flag_list L) N) r) x) = T)
T c==> cs_flag_list f0 f1 f2 f3 c= cs_flag_list f0 f1 f2 f3 cT
- |- (((!L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) ==> ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)) = ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L))
T c= c==> ! ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f2 clist_of_darts f0 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c/\ cMEM f2 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
- |- ((((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> (?w. (((next_el ((find_face L) x)) x) = w))) = T)
T c= c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0 cT
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c/\ cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f4 f4 cprev_el f1 cl'z f0 f2 f1 f3 cNIL
- |- ((\q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))) q)
T * / c= cLAST cAPPEND f0 b0 cCOND c= b0 cNIL cLAST f0 cLAST b0 f1
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))) r)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0 f2
- ((\y. ((((l'y L) r) x) = y)) y) |- ((((((l'y L) r) x) = y) ==> (?y. ((((l'y L) r) x) = y))) = (?y. ((((l'y L) r) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c= c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 cCONS cprev_el f1 cl'z f0 f6 f1 f4 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f4 cNIL
- |- (F = (~ T))
T c= cF c~ cT
- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) /\ (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c/\ * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- (((!N. (((quotient_list L) N) = ((MAP (core L)) N))) ==> ((\N. (((quotient_list L) N) = ((MAP (core L)) N))) N)) = ((\N. (((quotient_list L) N) = ((MAP (core L)) N))) N))
T c= c==> ! c= cquotient_list f0 b0 cMAP * part ccore f0 b0 * / c= cquotient_list f0 b0 cMAP * part ccore f0 b0 f1 * / c= cquotient_list f0 b0 cMAP * part ccore f0 b0 f1
- |- ((((\y. ((((l'y L) r) x) = y)) y) ==> (?y. ((((l'y L) r) x) = y))) = T)
T c= c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0 cT
- |- (((!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))) ==> ((\x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))) x)) = ((\x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))) x))
T c= c==> ! ! c= cMEM b0 cfilter f0 b1 c/\ * f0 b0 cMEM b0 b1 * / ! c= cMEM b0 cfilter f0 b1 c/\ * f0 b0 cMEM b0 b1 f1 * / ! c= cMEM b0 cfilter f0 b1 c/\ * f0 b0 cMEM b0 b1 f1
- |- ((((find_face L) x) = f) ==> (?f. (((find_face L) x) = f)))
T c==> c= cfind_face f0 f1 f2 c? / c= cfind_face f0 f1 b0
- (good_list L), (good_list_nodes L) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))) = (\r. (!x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0 / ! c==> c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- |- (T = ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0))))
T c= cT c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
- |- ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))
T c= cLAST cAPPEND f0 f1 cCOND c= f1 cNIL cLAST f0 cLAST f1
- (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f6 f1 f4 c~ cfinal_list f0 f1 c~ c= cztrans f0 f6 f1 f4 cNUMERAL c_0 cytrans f0 f6 f1 f4 cNUMERAL c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL
- |- ((\s. ((~ (s = NIL)) = (?x. ((MEM x) s)))) s)
T * / c= c~ c= b0 cNIL c? / cMEM b1 b0 f0
- |- ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)
T * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 c/\ ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL
- (~ (z = y)) |- (~ (y = z))
T c==> c~ c= f0 f1 c~ c= f1 f0
- |- ((~ T) = F)
T c= c~ cT cF
- |- (!z1. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- (((!f. (!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))))) ==> ((\f. (!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))))) f)) = ((\f. (!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))))) f))
T c= c==> ! ! ! c= cMEM b1 cMAP b0 b2 c? / c/\ cMEM b3 b2 c= b1 * b0 b3 * / ! ! c= cMEM b1 cMAP b0 b2 c? / c/\ cMEM b3 b2 c= b1 * b0 b3 f0 * / ! ! c= cMEM b1 cMAP b0 b2 c? / c/\ cMEM b3 b2 c= b1 * b0 b3 f0
- |- ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x)
T * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) ((prev_el r) ((((l'z L) N) r) x))))) NIL)))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f2 clist_of_darts f0 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 cCONS cprev_el f1 cl'z f0 f6 f1 f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 cprev_el f1 cl'z f0 f6 f1 f2 cNIL
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) /\ ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c/\ c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f2 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 cAPPEND cCONS cnext_el f1 f4 cNIL cAPPEND cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 cCONS cprev_el f1 cl'z f0 f2 f1 f3 cNIL cFST cCOND cfinal_list f0 f1 c, f2 f1 c, cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL f2 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 cNIL cSND csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3
- (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL
- |- ((((next_el ((find_face L) x)) x) = w) ==> (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- (~ (z = y)) |- ((y = z) = F)
T c==> c~ c= f0 f1 c= c= f1 f0 cF
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0
- |- (!w. (((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> (?w. (((next_el ((find_face L) x)) x) = w))))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- (((!q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))) ==> ((\q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))) q)) = ((\q. ((LAST ((APPEND p) q)) = (((COND (q = NIL)) (LAST p)) (LAST q)))) q))
T c= c==> ! c= cLAST cAPPEND f0 b0 cCOND c= b0 cNIL cLAST f0 cLAST b0 * / c= cLAST cAPPEND f0 b0 cCOND c= b0 cNIL cLAST f0 cLAST b0 f1 * / c= cLAST cAPPEND f0 b0 cCOND c= b0 cNIL cLAST f0 cLAST b0 f1
- |- (((!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))) ==> ((\y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))) y)) = ((\y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))) y))
T c= c==> ! ! c= cMEM b0 cMAP f0 b1 c? / c/\ cMEM b2 b1 c= b0 * f0 b2 * / ! c= cMEM b0 cMAP f0 b1 c? / c/\ cMEM b2 b1 c= b0 * f0 b2 f1 * / ! c= cMEM b0 cMAP f0 b1 c? / c/\ cMEM b2 b1 c= b0 * f0 b2 f1
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))) ==> ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))) r)) = ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))) r))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0 f2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0 f2
- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) /\ (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c/\ * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) (FST (((COND ((final_list L) r)) (N , r)) (((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) NIL)) , (SND (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x)))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c/\ cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 cAPPEND cCONS cnext_el f2 f4 cNIL cAPPEND cbetwn f2 cnext_el f2 f4 cprev_el f2 cl'z f0 f1 f2 f3 cCONS cprev_el f2 cl'z f0 f1 f2 f3 cNIL cFST cCOND cfinal_list f0 f2 c, f1 f2 c, cAPPEND creplace f2 cCONS cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL f1 cCONS cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cNIL cSND csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3
- |- (((!L. (!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s)))))) ==> ((\L. (!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s)))))) L)) = ((\L. (!s. (((f_last L) s) = (((next_el s) (LAST s)) = ((f_list L) (LAST s)))))) L))
T c= c==> ! ! c= cf_last b0 b1 c= cnext_el b1 cLAST b1 cf_list b0 cLAST b1 * / ! c= cf_last b0 b1 c= cnext_el b1 cLAST b1 cf_list b0 cLAST b1 f0 * / ! c= cf_last b0 b1 c= cnext_el b1 cLAST b1 cf_list b0 cLAST b1 f0
- |- (((!l. (((APPEND l) NIL) = l)) ==> ((\l. (((APPEND l) NIL) = l)) l)) = ((\l. (((APPEND l) NIL) = l)) l))
T c= c==> ! c= cAPPEND b0 cNIL b0 * / c= cAPPEND b0 cNIL b0 f0 * / c= cAPPEND b0 cNIL b0 f0
- ((\f. (((find_face L) x) = f)) f) |- (((\f. (((find_face L) x) = f)) f) /\ (?f. (((find_face L) x) = f)))
T c==> * / c= cfind_face f0 f1 b0 f2 c/\ * / c= cfind_face f0 f1 b0 f2 c? / c= cfind_face f0 f1 b0
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- ((~ (s = NIL)) = (?x. ((MEM x) s)))
T c= c~ c= f0 cNIL c? / cMEM b0 f0
- |- (((quotient_list L) N) = ((MAP (core L)) N))
T c= cquotient_list f0 f1 cMAP * part ccore f0 f1
- |- (T = ((SUC (NUMERAL _0)) = (NUMERAL (BIT1 _0))))
T c= cT c= cSUC cNUMERAL c_0 cNUMERAL cBIT1 c_0
- |- ((((next_el ((find_face L) x)) x) = w) = ((\w. (((next_el ((find_face L) x)) x) = w)) w))
T c= c= cnext_el cfind_face f0 f1 f1 f2 * / c= cnext_el cfind_face f0 f1 f1 b0 f2
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))) ==> ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))) x)) = ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))) x))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c= c==> ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 b0 cNUMERAL c_0 cytrans f0 f1 f2 b0 cNUMERAL c_0 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 b0 cNUMERAL c_0 cytrans f0 f1 f2 b0 cNUMERAL c_0 f3 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 b0 cNUMERAL c_0 cytrans f0 f1 f2 b0 cNUMERAL c_0 f3
- ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) = T)
T c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c= cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 cT
- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)) |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c==> c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) = ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z))
T c= c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4
- (uniq ((find_face L) x)), (((find_face L) x) = f) |- (uniq f)
T c==> cuniq cfind_face f0 f1 c==> c= cfind_face f0 f1 f2 cuniq f2
- (uniq ((find_face L) x)) |- ((uniq ((find_face L) x)) = T)
T c==> cuniq cfind_face f0 f1 c= cuniq cfind_face f0 f1 cT
- ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) = T)
T c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c= cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 cT
- |- (((\N'. (f N')) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (((!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) ==> ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)) = ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r))
T c= c==> ! ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
- |- (((!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))) ==> ((\L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))) L)) = ((\L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))) L))
T c= c==> ! c= cMEM f0 cflatten b0 c? / c/\ cMEM b1 b0 cMEM f0 b1 * / c= cMEM f0 cflatten b0 c? / c/\ cMEM b1 b0 cMEM f0 b1 f1 * / c= cMEM f0 cflatten b0 c? / c/\ cMEM b1 b0 cMEM f0 b1 f1
- |- (((!x. (((\f. (((find_face L) x) = f)) x) ==> (?f. (((find_face L) x) = f)))) ==> ((?f. (((find_face L) x) = f)) ==> (?f. (((find_face L) x) = f)))) = ((?f. (((find_face L) x) = f)) ==> (?f. (((find_face L) x) = f))))
T c= c==> ! c==> * / c= cfind_face f0 f1 b1 b0 c? / c= cfind_face f0 f1 b1 c==> c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0 c==> c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0
- |- (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l))))
T c= cMEM f0 cflatten f1 c? / c/\ cMEM b0 f1 cMEM f0 b0
- ((all (f_last L)) N) |- (((all (f_last L)) N) = T)
T c==> call * part cf_last f0 f1 c= call * part cf_last f0 f1 cT
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f3 c==> cmarked_list f0 f6 f1 f4 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f3 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 f2 cCONS f2 cNIL cAPPEND creplace f1 cCONS cSND csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL f6 cCONS cFST csplit_normal_list f0 f1 cfind_face f0 f5 f5 f2 cNIL
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))) N)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 c~ c= cztrans f0 b0 b1 b2 cNUMERAL c_0 cytrans f0 b0 b1 b2 cNUMERAL c_0 f1
- |- ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- (((APPEND l) NIL) = l)
T c= cAPPEND f0 cNIL f0
- ((((indexf w) y) f) < (((indexf w) z) f)) |- (((((indexf w) y) f) < (((indexf w) z) f)) = T)
T c==> c< cindexf f0 f1 f2 cindexf f0 f3 f2 c= c< cindexf f0 f1 f2 cindexf f0 f3 f2 cT
- (((find_face L) x) = f) |- ((\f. (((find_face L) x) = f)) f)
T c==> c= cfind_face f0 f1 f2 * / c= cfind_face f0 f1 b0 f2
- (((next_el ((find_face L) x)) x) = w) |- ((\w. (((next_el ((find_face L) x)) x) = w)) w)
T c==> c= cnext_el cfind_face f0 f1 f1 f2 * / c= cnext_el cfind_face f0 f1 f1 b0 f2
- |- (((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) ==> ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)))) = ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c= c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f1 f2 cAPPEND cCONS cnext_el f3 f1 cNIL cAPPEND cbetwn f3 cnext_el f3 f1 f4 cCONS f4 cNIL cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 f1 f1 f4 cNIL f5 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 f1 f1 f4 cNIL cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f1 f2 cAPPEND cCONS cnext_el f3 f1 cNIL cAPPEND cbetwn f3 cnext_el f3 f1 f4 cCONS f4 cNIL cAPPEND creplace f3 cCONS cSND csplit_normal_list f0 f3 cfind_face f0 f1 f1 f4 cNIL f5 cCONS cFST csplit_normal_list f0 f3 cfind_face f0 f1 f1 f4 cNIL
- (~ (z = y)), (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((~ (z = y)) /\ ((MEM ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) z1)) ((CONS z1) NIL))))) ((APPEND (((replace r) ((CONS (SND (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL)) N)) ((CONS (FST (((((split_normal_list L) r) ((find_face L) y)) y) z1))) NIL))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq clist_of_darts f2 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el f3 f4 f0 c==> c= cl'y f2 f3 f5 f1 c==> c= cl'z f2 f6 f3 f5 f0 c==> cmarked_list f2 f6 f3 f5 c/\ c~ c= f0 f1 cMEM cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 cAPPEND cCONS cnext_el f3 f1 cNIL cAPPEND cbetwn f3 cnext_el f3 f1 f4 cCONS f4 cNIL cAPPEND creplace f3 cCONS cSND csplit_normal_list f2 f3 cfind_face f2 f1 f1 f4 cNIL f6 cCONS cFST csplit_normal_list f2 f3 cfind_face f2 f1 f1 f4 cNIL
- |- (((!x. (!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l)))))) ==> ((\x. (!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l)))))) x)) = ((\x. (!L. (((MEM x) (flatten L)) = (?l. (((MEM l) L) /\ ((MEM x) l)))))) x))
T c= c==> ! ! c= cMEM b0 cflatten b1 c? / c/\ cMEM b2 b1 cMEM b0 b2 * / ! c= cMEM b0 cflatten b1 c? / c/\ cMEM b2 b1 cMEM b0 b2 f0 * / ! c= cMEM b0 cflatten b1 c? / c/\ cMEM b2 b1 cMEM b0 b2 f0
- |- ((\L. (!N. (((quotient_list L) N) = ((MAP (core L)) N)))) L)
T * / ! c= cquotient_list b0 b1 cMAP * part ccore b0 b1 f0
- |- ((\a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s)))))) a)
T * / ! ! c= cMEM b1 cfilter b0 b2 c/\ * b0 b1 cMEM b1 b2 f0
- |- (((!L. (!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r))))) ==> ((\L. (!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r))))) L)) = ((\L. (!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r))))) L))
T c= c==> ! ! c= ccore b0 b1 cMAP * * part co part cFST part cHD cparts b0 b1 * / ! c= ccore b0 b1 cMAP * * part co part cFST part cHD cparts b0 b1 f0 * / ! c= ccore b0 b1 cMAP * * part co part cFST part cHD cparts b0 b1 f0
- ((\y. ((((l'y L) r) x) = y)) y) |- (((\y. ((((l'y L) r) x) = y)) y) /\ (?y. ((((l'y L) r) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c/\ * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- |- (~ (~ T))
T c~ c~ cT
- ((((l'y L) r) x) = y) |- (((((l'y L) r) x) = y) /\ (?y. ((((l'y L) r) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c/\ c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- (((next_el ((find_face L) x)) x) = w) |- ((((next_el ((find_face L) x)) x) = w) /\ (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c/\ c= cnext_el cfind_face f0 f1 f1 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- ((\L. (!r. (((core L) r) = ((MAP (FST o HD)) ((parts L) r))))) L)
T * / ! c= ccore b0 b1 cMAP * * part co part cFST part cHD cparts b0 b1 f0
- |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cytrans f0 f1 f2 f3 cNUMERAL c_0
