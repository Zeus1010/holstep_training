N List_hypermap_iso.list_eq_cat_find_pair_list
C |- (!L. (!d. (((MEM d) (list_of_darts L)) ==> (((LET (\f. (\n. (LET_END (L = ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))) ((find_pair_list L) d)) ((indexl ((find_pair_list L) d)) L)))))
T c==> cMEM f0 clist_of_darts f1 cLET / / cLET_END c= f1 ccat ctake b1 f1 ccat cCONS b0 cNIL cdropl c+ b1 cNUMERAL cBIT1 c_0 f1 cfind_pair_list f1 f0 cindexl cfind_pair_list f1 f0 f1
D TRUTH
A |- T
T cT
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D Ssrnat.add0n
A |- (!n. (((NUMERAL _0) + n) = n))
T c= c+ cNUMERAL c_0 f0 f0
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D MEM
A |- ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))
T c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 f2 c\/ c= f0 f1 cMEM f0 f2
D ssreflect_eq_def
A |- (!v. (!P. (((ssreflect_eq v) P) = P)))
T c= cssreflect_eq f0 f1 f1
D bool_elim
A |- (!P. (((P T) /\ (P F)) ==> (!x. (P x))))
T c==> c/\ * f0 cT * f0 cF ! * f0 b0
D Seq.behead
A |- (!h. (!t. (((behead NIL) = NIL) /\ ((behead ((CONS h) t)) = t))))
T c/\ c= cbehead cNIL cNIL c= cbehead cCONS f0 f1 f1
D Seq.cat
A |- (!x. (!t. (!s2. ((((cat NIL) s2) = s2) /\ (((cat ((CONS x) t)) s2) = ((CONS x) ((cat t) s2)))))))
T c/\ c= ccat cNIL f0 f0 c= ccat cCONS f1 f2 f0 cCONS f1 ccat f2 f0
D Seq.cat1s
A |- (!x. (!s. (((cat ((CONS x) NIL)) s) = ((CONS x) s))))
T c= ccat cCONS f0 cNIL f1 cCONS f0 f1
D Seq.drop
A |- (!n. (!x. (!s. ((((dropl (SUC n)) ((CONS x) s)) = ((dropl n) s)) /\ ((((dropl n) NIL) = NIL) /\ (((dropl (NUMERAL _0)) s) = s))))))
T c/\ c= cdropl cSUC f0 cCONS f1 f2 cdropl f0 f2 c/\ c= cdropl f0 cNIL cNIL c= cdropl cNUMERAL c_0 f2 f2
D Seq.drop1
A |- (!s. (((dropl (NUMERAL (BIT1 _0))) s) = (behead s)))
T c= cdropl cNUMERAL cBIT1 c_0 f0 cbehead f0
D Seq2.take
A |- (!x. (!s. (!n. ((((take (SUC n)) ((CONS x) s)) = ((CONS x) ((take n) s))) /\ ((((take (NUMERAL _0)) s) = NIL) /\ (((take n) NIL) = NIL))))))
T c/\ c= ctake cSUC f0 cCONS f1 f2 cCONS f1 ctake f0 f2 c/\ c= ctake cNUMERAL c_0 f2 cNIL c= ctake f0 cNIL cNIL
D Seq.mem_cat
A |- (!x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))))
T c= cMEM f0 ccat f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
D Seq.index_head
A |- (!x. (!s. (((indexl x) ((CONS x) s)) = (NUMERAL _0))))
T c= cindexl f0 cCONS f0 f1 cNUMERAL c_0
D Seq2.index_cons
A |- (!x. (!h. (!t. (((indexl x) ((CONS h) t)) = (((COND (x = h)) (NUMERAL _0)) (SUC ((indexl x) t)))))))
T c= cindexl f0 cCONS f1 f2 cCOND c= f0 f1 cNUMERAL c_0 cSUC cindexl f0 f2
D List_hypermap.find_pair_list
A |- (!h. (!t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))))
T c/\ c= cfind_pair_list cNIL f0 cNIL c= cfind_pair_list cCONS f1 f2 f0 cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0
D List_hypermap.dart_in_find_pair_list
A |- (!d. (!L. (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))))
T c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0
D List_hypermap.list_of_darts_nil
A |- ((list_of_darts NIL) = NIL)
T c= clist_of_darts cNIL cNIL
D List_hypermap.list_of_darts_cons
A |- (!h. (!t. ((list_of_darts ((CONS h) t)) = ((cat (list_pairs h)) (list_of_darts t)))))
T c= clist_of_darts cCONS f0 f1 ccat clist_pairs f0 clist_of_darts f1
+ (L = L1) |- (((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L1) d)) L1)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))
T c==> c= f0 f1 c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f2 f1 f0 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0
- (((indexl ((find_pair_list t) d)) t) = n), (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))))
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c==> c==> cMEM f1 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c==> cMEM f1 clist_of_darts f0 c= f0 ccat ctake f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f2 cNUMERAL cBIT1 c_0 f0
- (m = (SUC n)) |- ((m = (SUC n)) /\ (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take m) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (m + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c= f0 cSUC f1 c/\ c= f0 cSUC f1 c= cCONS f2 ccat ctake f1 f3 ccat cCONS cfind_pair_list f3 f4 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f3 ccat ctake f0 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f4 cNIL cdropl c+ f0 cNUMERAL cBIT1 c_0 cCONS f2 f3
+ (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) |- ((((CONS h) ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c= f0 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c= c= cCONS f2 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f2 f0 cCONS f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f2 f0 cNUMERAL cBIT1 c_0 cCONS f2 f0 c= cCONS f2 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f2 f0 cCONS f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f2 f0 cNUMERAL cBIT1 c_0 cCONS f2 f0
- (((MEM d) (list_pairs h)) = x) |- ((((MEM d) (list_pairs h)) = x) /\ (?x. (((MEM d) (list_pairs h)) = x)))
T c==> c= cMEM f0 clist_pairs f1 f2 c/\ c= cMEM f0 clist_pairs f1 f2 c? / c= cMEM f0 clist_pairs f1 b0
+ |- ((t = F) = (~ t))
T c= c= f0 cF c~ f0
+ (L = L1) |- ((((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L1) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = (((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))
T c==> c= f0 f1 c= c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f2 f0 f0 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0 c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f0 f2 f0 f0 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0
+ (((indexl ((find_pair_list t) d)) t) = n), ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (!m. (((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) ==> (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c==> cMEM f1 clist_of_darts f0 c==> cssreflect_eq f3 c~ cMEM f1 clist_pairs f4 ! c==> * / c= cindexl cfind_pair_list f0 f1 cCONS f4 f0 b1 b0 c= cCONS f4 ccat ctake f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f2 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f4 f0 cCONS f4 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f4 f0 cNUMERAL cBIT1 c_0 cCONS f4 f0
+ |- (((MEM d) NIL) ==> (NIL = ((cat ((take ((indexl ((find_pair_list NIL) d)) NIL)) NIL)) ((cat ((CONS ((find_pair_list NIL) d)) NIL)) ((dropl (((indexl ((find_pair_list NIL) d)) NIL) + (NUMERAL (BIT1 _0)))) NIL)))))
T c==> cMEM f0 cNIL c= cNIL ccat ctake cindexl cfind_pair_list cNIL f0 cNIL cNIL ccat cCONS cfind_pair_list cNIL f0 cNIL cdropl c+ cindexl cfind_pair_list cNIL f0 cNIL cNUMERAL cBIT1 c_0 cNIL
+ |- (((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) = ((ssreflect_eq eq) (((find_pair_list t) d) = h))) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> (((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) ==> ((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> q')))) = ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> (((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) ==> ((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> q'))))
T c= c==> c= cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cT cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c==> c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 f5 c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cT c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f5 c==> c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 f5 c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cT c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f5
+ |- ((\s2. ((((cat NIL) s2) = s2) /\ (((cat ((CONS x) t)) s2) = ((CONS x) ((cat t) s2))))) s2)
T * / c/\ c= ccat cNIL b0 b0 c= ccat cCONS f0 f1 b0 cCONS f0 ccat f1 b0 f2
- (((indexl ((find_pair_list t) d)) t) = n) |- ((\n. (((indexl ((find_pair_list t) d)) t) = n)) n)
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 * / c= cindexl cfind_pair_list f0 f1 f0 b0 f2
+ |- (((?L1. (L = L1)) ==> (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))) = (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))
T c= c==> c? / c= f0 b0 c==> cMEM f1 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c==> cMEM f1 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0
- |- ((((indexl ((find_pair_list t) d)) t) = n) ==> (?n. (((indexl ((find_pair_list t) d)) t) = n)))
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c? / c= cindexl cfind_pair_list f0 f1 f0 b0
+ |- ((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) ((indexl ((find_pair_list t) d)) ((CONS h) t)))
T * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 cindexl cfind_pair_list f0 f1 cCONS f2 f0
+ |- (((MEM d) (list_of_darts t)) ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> cMEM f0 clist_of_darts f1 c= c= cCONS f2 f1 ccat ctake cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cF f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1
- |- (((find_pair_list NIL) d) = NIL)
T c= cfind_pair_list cNIL f0 cNIL
- |- ((((MEM d) (list_pairs h)) = x) ==> (?x. (((MEM d) (list_pairs h)) = x)))
T c==> c= cMEM f0 clist_pairs f1 f2 c? / c= cMEM f0 clist_pairs f1 b0
- ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cT * f0 cF c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
+ (((MEM d) (list_pairs h)) = x), (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- ((x \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> cMEM f0 clist_of_darts f3 c= f3 ccat ctake cindexl cfind_pair_list f3 f0 f3 f3 ccat cCONS cfind_pair_list f3 f0 cNIL cdropl c+ cindexl cfind_pair_list f3 f0 f3 cNUMERAL cBIT1 c_0 f3 c==> c\/ f2 cMEM f0 clist_of_darts f3 c= cCONS f1 f3 ccat ctake cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cCONS f1 f3 cCONS f1 f3 ccat cCONS cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cCONS f1 f3 cNUMERAL cBIT1 c_0 cCONS f1 f3
- |- (((!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))) ==> ((\t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))) t)) = ((\t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))) t))
T c= c==> ! c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 b0 c\/ c= f0 f1 cMEM f0 b0 * / c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 b0 c\/ c= f0 f1 cMEM f0 b0 f2 * / c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 b0 c\/ c= f0 f1 cMEM f0 b0 f2
+ |- ((\t. (!s2. ((((cat NIL) s2) = s2) /\ (((cat ((CONS x) t)) s2) = ((CONS x) ((cat t) s2)))))) t)
T * / ! c/\ c= ccat cNIL b1 b1 c= ccat cCONS f0 b0 b1 cCONS f0 ccat b0 b1 f1
+ |- (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take (SUC n)) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl ((SUC n) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))
T c= cCONS f0 ccat ctake f1 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 ccat ctake cSUC f1 cCONS f0 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl c+ cSUC f1 cNUMERAL cBIT1 c_0 cCONS f0 f2
+ (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))), ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((MEM d) (list_of_darts t)) /\ (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c/\ cMEM f0 clist_of_darts f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- ((((T \/ ((MEM d) (list_of_darts t))) = T) ==> ((T ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (T ==> q')))) = ((T ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (T ==> q'))))
T c= c==> c= c\/ cT cMEM f0 clist_of_darts f1 cT c==> c==> cT c= c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 f3 c= c==> c\/ cT cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cT f3 c==> c==> cT c= c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 f3 c= c==> c\/ cT cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cT f3
+ |- (P = ((ssreflect_eq eq) P))
T c= f0 cssreflect_eq f1 f0
+ |- ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)
T * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) /\ ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c/\ cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((\x. (((ssreflect_eq eq) ((((find_pair_list t) d) = h) = x)) ==> ((((COND x) (NUMERAL _0)) (SUC n)) = (SUC n)))) x)
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 * / c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 b0 c= cCOND b0 cNUMERAL c_0 cSUC f5 cSUC f5 f6
+ |- (((!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) ==> ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)) = ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2))
T c= c==> ! c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
- (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))), ((MEM d) (list_of_darts t)) |- (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1
+ |- ((((CONS h) t) = ((cat ((CONS h) NIL)) ((dropl (NUMERAL (BIT1 _0))) ((CONS h) t)))) = (((CONS h) t) = ((cat ((CONS h) NIL)) ((dropl ((NUMERAL _0) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))
T c= c= cCONS f0 f1 ccat cCONS f0 cNIL cdropl cNUMERAL cBIT1 c_0 cCONS f0 f1 c= cCONS f0 f1 ccat cCONS f0 cNIL cdropl c+ cNUMERAL c_0 cNUMERAL cBIT1 c_0 cCONS f0 f1
- (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) |- ((((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) /\ (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)))
T c==> c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 f3 c/\ c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 f3 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0
+ (((indexl ((find_pair_list t) d)) t) = n), ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) ==> (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c==> cMEM f1 clist_of_darts f0 c==> cssreflect_eq f3 c~ cMEM f1 clist_pairs f4 c==> * / c= cindexl cfind_pair_list f0 f1 cCONS f4 f0 b0 f5 c= cCONS f4 ccat ctake f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f2 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f4 f0 cCONS f4 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f4 f0 cNUMERAL cBIT1 c_0 cCONS f4 f0
+ |- ((!d. (((MEM d) (list_of_darts L)) ==> (((LET (\f. (\n. (LET_END (L = ((cat ((take n) L)) ((cat ((CONS f) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) L)))))))) ((find_pair_list L) d)) ((indexl ((find_pair_list L) d)) L)))) = T)
T c= ! c==> cMEM b0 clist_of_darts f0 cLET / / cLET_END c= f0 ccat ctake b2 f0 ccat cCONS b1 cNIL cdropl c+ b2 cNUMERAL cBIT1 c_0 f0 cfind_pair_list f0 b0 cindexl cfind_pair_list f0 b0 f0 cT
+ (m = (SUC n)) |- ((((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take (SUC n)) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (m + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take m) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (m + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c= f0 cSUC f1 c= c= cCONS f2 ccat ctake f1 f3 ccat cCONS cfind_pair_list f3 f4 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f3 ccat ctake cSUC f1 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f4 cNIL cdropl c+ f0 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= cCONS f2 ccat ctake f1 f3 ccat cCONS cfind_pair_list f3 f4 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f3 ccat ctake f0 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f4 cNIL cdropl c+ f0 cNUMERAL cBIT1 c_0 cCONS f2 f3
- |- (((!p'. (!q'. ((((MEM d) (list_of_darts t)) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((MEM d) (list_of_darts t)) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((MEM d) (list_of_darts t)) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cMEM f0 clist_of_darts f1 b0 c==> c==> b0 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 b1 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> b0 b1 * / ! c==> c= cMEM f0 clist_of_darts f1 b0 c==> c==> b0 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 b1 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> b0 b1 f3 * / ! c==> c= cMEM f0 clist_of_darts f1 b0 c==> c==> b0 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 b1 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> b0 b1 f3
+ |- (((!n. (!x. (!s. ((((dropl (SUC n)) ((CONS x) s)) = ((dropl n) s)) /\ ((((dropl n) NIL) = NIL) /\ (((dropl (NUMERAL _0)) s) = s)))))) ==> ((\n. (!x. (!s. ((((dropl (SUC n)) ((CONS x) s)) = ((dropl n) s)) /\ ((((dropl n) NIL) = NIL) /\ (((dropl (NUMERAL _0)) s) = s)))))) n)) = ((\n. (!x. (!s. ((((dropl (SUC n)) ((CONS x) s)) = ((dropl n) s)) /\ ((((dropl n) NIL) = NIL) /\ (((dropl (NUMERAL _0)) s) = s)))))) n))
T c= c==> ! ! ! c/\ c= cdropl cSUC b0 cCONS b1 b2 cdropl b0 b2 c/\ c= cdropl b0 cNIL cNIL c= cdropl cNUMERAL c_0 b2 b2 * / ! ! c/\ c= cdropl cSUC b0 cCONS b1 b2 cdropl b0 b2 c/\ c= cdropl b0 cNIL cNIL c= cdropl cNUMERAL c_0 b2 b2 f0 * / ! ! c/\ c= cdropl cSUC b0 cCONS b1 b2 cdropl b0 b2 c/\ c= cdropl b0 cNIL cNIL c= cdropl cNUMERAL c_0 b2 b2 f0
+ (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) |- ((((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take m) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (m + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 f3 c= c= cCONS f2 ccat ctake f4 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f4 cNUMERAL cBIT1 c_0 f0 ccat ctake f3 cCONS f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f3 cNUMERAL cBIT1 c_0 cCONS f2 f0 c= cCONS f2 ccat ctake f4 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f4 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f2 f0 cCONS f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f2 f0 cNUMERAL cBIT1 c_0 cCONS f2 f0
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((((indexl ((find_pair_list t) d)) t) = n) ==> (((CONS h) ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c==> c= cindexl cfind_pair_list f1 f0 f1 f4 c= cCONS f3 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((ssreflect_eq eq) ((((find_pair_list t) d) = h) = x)) ==> ((((COND x) (NUMERAL _0)) (SUC n)) = (SUC n)))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 f5 c= cCOND f5 cNUMERAL c_0 cSUC f6 cSUC f6
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ |- ((((indexl ((find_pair_list t) d)) ((CONS h) t)) = ((indexl ((find_pair_list t) d)) ((CONS h) t))) = ((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) ((indexl ((find_pair_list t) d)) ((CONS h) t))))
T c= c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 cindexl cfind_pair_list f0 f1 cCONS f2 f0 * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 cindexl cfind_pair_list f0 f1 cCONS f2 f0
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n))) = ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) ==> ((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n))) /\ (((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n)))))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c= c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f5 cSUC f5 c/\ c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 cT c= cCOND cT cNUMERAL c_0 cSUC f5 cSUC f5 c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f5 cSUC f5
+ |- (((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list ((CONS h) t)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list ((CONS h) t)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c= c==> c\/ cMEM f0 clist_pairs f1 cMEM f0 clist_of_darts f2 c= cCONS f1 f2 ccat ctake cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0 cCONS f1 f2 cCONS f1 f2 ccat cCONS cfind_pair_list cCONS f1 f2 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS f1 f2 f0 cCONS f1 f2 cNUMERAL cBIT1 c_0 cCONS f1 f2 c==> c\/ cMEM f0 clist_pairs f1 cMEM f0 clist_of_darts f2 c= cCONS f1 f2 ccat ctake cindexl cfind_pair_list cCONS f1 f2 f0 cCONS f1 f2 cCONS f1 f2 ccat cCONS cfind_pair_list cCONS f1 f2 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS f1 f2 f0 cCONS f1 f2 cNUMERAL cBIT1 c_0 cCONS f1 f2
- |- ((((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (?x. (((MEM d) (list_pairs h)) = x))) = T)
T c= c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c? / c= cMEM f0 clist_pairs f1 b0 cT
+ |- (((?n. (((indexl ((find_pair_list t) d)) t) = n)) ==> (((CONS h) ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((CONS h) ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c= c==> c? / c= cindexl cfind_pair_list f0 f1 f0 b0 c= cCONS f2 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f2 f0 cCONS f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f2 f0 cNUMERAL cBIT1 c_0 cCONS f2 f0 c= cCONS f2 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f2 f0 cCONS f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f2 f0 cNUMERAL cBIT1 c_0 cCONS f2 f0
+ |- (((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n)))
T c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4
+ |- ((\d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) d)
T * / c/\ c= cfind_pair_list cNIL b0 cNIL c= cfind_pair_list cCONS f0 f1 b0 cCOND cMEM b0 clist_pairs f0 f0 cfind_pair_list f1 b0 f2
- |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
+ |- (((!x. (!s. (!n. ((((take (SUC n)) ((CONS x) s)) = ((CONS x) ((take n) s))) /\ ((((take (NUMERAL _0)) s) = NIL) /\ (((take n) NIL) = NIL)))))) ==> ((\x. (!s. (!n. ((((take (SUC n)) ((CONS x) s)) = ((CONS x) ((take n) s))) /\ ((((take (NUMERAL _0)) s) = NIL) /\ (((take n) NIL) = NIL)))))) x)) = ((\x. (!s. (!n. ((((take (SUC n)) ((CONS x) s)) = ((CONS x) ((take n) s))) /\ ((((take (NUMERAL _0)) s) = NIL) /\ (((take n) NIL) = NIL)))))) x))
T c= c==> ! ! ! c/\ c= ctake cSUC b2 cCONS b0 b1 cCONS b0 ctake b2 b1 c/\ c= ctake cNUMERAL c_0 b1 cNIL c= ctake b2 cNIL cNIL * / ! ! c/\ c= ctake cSUC b2 cCONS b0 b1 cCONS b0 ctake b2 b1 c/\ c= ctake cNUMERAL c_0 b1 cNIL c= ctake b2 cNIL cNIL f0 * / ! ! c/\ c= ctake cSUC b2 cCONS b0 b1 cCONS b0 ctake b2 b1 c/\ c= ctake cNUMERAL c_0 b1 cNIL c= ctake b2 cNIL cNIL f0
- |- ((\p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> b0 b1 f4
- |- ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> q')))
T c==> c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cNUMERAL c_0 cSUC f4 f5 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f5
+ |- ((\q'. ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) = p') ==> ((p' ==> (((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cF f4 c==> c==> f4 c= c= cCOND cF cNUMERAL c_0 cSUC f5 cSUC f5 b0 c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f5 cSUC f5 c==> f4 b0 f6
- |- (!x. (((\x. ((((find_pair_list t) d) = h) = x)) x) ==> (?x. ((((find_pair_list t) d) = h) = x))))
T c==> * / c= c= cfind_pair_list f0 f1 f2 b0 f3 c? / c= c= cfind_pair_list f0 f1 f2 b0
+ |- (((!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) ==> ((\d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) d)) = ((\d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) d))
T c= c==> ! c/\ c= cfind_pair_list cNIL b0 cNIL c= cfind_pair_list cCONS f0 f1 b0 cCOND cMEM b0 clist_pairs f0 f0 cfind_pair_list f1 b0 * / c/\ c= cfind_pair_list cNIL b0 cNIL c= cfind_pair_list cCONS f0 f1 b0 cCOND cMEM b0 clist_pairs f0 f0 cfind_pair_list f1 b0 f2 * / c/\ c= cfind_pair_list cNIL b0 cNIL c= cfind_pair_list cCONS f0 f1 b0 cCOND cMEM b0 clist_pairs f0 f0 cfind_pair_list f1 b0 f2
+ (((indexl ((find_pair_list t) d)) t) = n), ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((CONS h) ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c==> cMEM f1 clist_of_darts f0 c==> cssreflect_eq f3 c~ cMEM f1 clist_pairs f4 c= cCONS f4 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f4 f0 cCONS f4 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f4 f0 cNUMERAL cBIT1 c_0 cCONS f4 f0
+ |- ((((MEM d) ((cat (list_pairs h)) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list ((CONS h) t)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts ((CONS h) t))) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list ((CONS h) t)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c= c==> cMEM f0 ccat clist_pairs f1 clist_of_darts f2 c= cCONS f1 f2 ccat ctake cindexl cfind_pair_list cCONS f1 f2 f0 cCONS f1 f2 cCONS f1 f2 ccat cCONS cfind_pair_list cCONS f1 f2 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS f1 f2 f0 cCONS f1 f2 cNUMERAL cBIT1 c_0 cCONS f1 f2 c==> cMEM f0 clist_of_darts cCONS f1 f2 c= cCONS f1 f2 ccat ctake cindexl cfind_pair_list cCONS f1 f2 f0 cCONS f1 f2 cCONS f1 f2 ccat cCONS cfind_pair_list cCONS f1 f2 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS f1 f2 f0 cCONS f1 f2 cNUMERAL cBIT1 c_0 cCONS f1 f2
+ (((MEM d) (list_pairs h)) = x), (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- ((x \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND x) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND x) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c= cMEM f0 clist_pairs f1 f2 c==> c==> cMEM f0 clist_of_darts f3 c= f3 ccat ctake cindexl cfind_pair_list f3 f0 f3 f3 ccat cCONS cfind_pair_list f3 f0 cNIL cdropl c+ cindexl cfind_pair_list f3 f0 f3 cNUMERAL cBIT1 c_0 f3 c==> c\/ f2 cMEM f0 clist_of_darts f3 c= cCONS f1 f3 ccat ctake cindexl cCOND f2 f1 cfind_pair_list f3 f0 cCONS f1 f3 cCONS f1 f3 ccat cCONS cCOND f2 f1 cfind_pair_list f3 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cCONS f1 f3 cNUMERAL cBIT1 c_0 cCONS f1 f3
+ |- (((CONS h) t) = ((cat ((CONS h) NIL)) ((dropl (NUMERAL (BIT1 _0))) ((CONS h) t))))
T c= cCONS f0 f1 ccat cCONS f0 cNIL cdropl cNUMERAL cBIT1 c_0 cCONS f0 f1
- ((\x. ((((find_pair_list t) d) = h) = x)) x) |- (((\x. ((((find_pair_list t) d) = h) = x)) x) /\ (?x. ((((find_pair_list t) d) = h) = x)))
T c==> * / c= c= cfind_pair_list f0 f1 f2 b0 f3 c/\ * / c= c= cfind_pair_list f0 f1 f2 b0 f3 c? / c= c= cfind_pair_list f0 f1 f2 b0
+ |- ((\v. (!P. (((ssreflect_eq v) P) = P))) eq)
T * / ! c= cssreflect_eq b0 b1 b1 f0
+ ((ssreflect_eq eq) (((find_pair_list t) d) = h)) |- (((ssreflect_eq eq) (((find_pair_list t) d) = h)) /\ (((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n)) = ((NUMERAL _0) = (SUC n))))
T c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c/\ cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 c= cNUMERAL c_0 cSUC f4
+ ((ssreflect_eq eq) (((find_pair_list t) d) = h)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((MEM d) (list_of_darts t)) ==> ((NUMERAL _0) = (SUC n)))
T c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c==> cssreflect_eq f4 c~ cMEM f2 clist_pairs f3 c==> cMEM f2 clist_of_darts f1 c= cNUMERAL c_0 cSUC f5
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
+ |- ((\p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> (((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> ((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF b0 c==> c==> b0 c= c==> c\/ cF cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cF f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c==> c\/ cF cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cF f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> b0 b1 f4
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1
+ |- ((\t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))) t)
T * / ! c/\ c= cfind_pair_list cNIL b1 cNIL c= cfind_pair_list cCONS f0 b0 b1 cCOND cMEM b1 clist_pairs f0 f0 cfind_pair_list b0 b1 f1
+ |- (((cat ((CONS x) t)) s2) = ((CONS x) ((cat t) s2)))
T c= ccat cCONS f0 f1 f2 cCONS f0 ccat f1 f2
+ (L = L1) |- (((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L1) d)) L1)) L1)) ((cat ((CONS ((find_pair_list L1) d)) NIL)) ((dropl (((indexl ((find_pair_list L1) d)) L1) + (NUMERAL (BIT1 _0)))) L)))))
T c==> c= f0 f1 c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f2 f1 f1 ccat cCONS cfind_pair_list f1 f2 cNIL cdropl c+ cindexl cfind_pair_list f1 f2 f1 cNUMERAL cBIT1 c_0 f0
+ ((\x. ((((find_pair_list t) d) = h) = x)) x) |- ((((find_pair_list t) d) = h) = x)
T c==> * / c= c= cfind_pair_list f0 f1 f2 b0 f3 c= c= cfind_pair_list f0 f1 f2 f3
- |- (((dropl (NUMERAL _0)) s) = s)
T c= cdropl cNUMERAL c_0 f0 f0
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- |- (((((MEM d) (list_of_darts t)) = ((MEM d) (list_of_darts t))) ==> ((((MEM d) (list_of_darts t)) ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> q')))) = ((((MEM d) (list_of_darts t)) ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> q'))))
T c= c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_of_darts f1 c==> c==> cMEM f0 clist_of_darts f1 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 f3 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cMEM f0 clist_of_darts f1 f3 c==> c==> cMEM f0 clist_of_darts f1 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 f3 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cMEM f0 clist_of_darts f1 f3
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) ==> ((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n))) /\ (((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n))))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c/\ c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 cT c= cCOND cT cNUMERAL c_0 cSUC f5 cSUC f5 c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f5 cSUC f5
+ |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
+ ((((find_pair_list t) d) = h) = x) |- ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = x)) ==> ((((COND x) (NUMERAL _0)) (SUC n)) = (SUC n))) = ((((COND x) (NUMERAL _0)) (SUC n)) = (SUC n)))
T c==> c= c= cfind_pair_list f0 f1 f2 f3 c= c==> cssreflect_eq f4 c= c= cfind_pair_list f0 f1 f2 f3 c= cCOND f3 cNUMERAL c_0 cSUC f5 cSUC f5 c= cCOND f3 cNUMERAL c_0 cSUC f5 cSUC f5
+ ((\L1. (L = L1)) L1) |- (((\L1. (L = L1)) L1) /\ (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c==> cMEM f2 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f2 f0 f0 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) ==> ((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n))) /\ (((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n)))) ==> (!x. (((ssreflect_eq eq) ((((find_pair_list t) d) = h) = x)) ==> ((((COND x) (NUMERAL _0)) (SUC n)) = (SUC n))))) = (!x. (((ssreflect_eq eq) ((((find_pair_list t) d) = h) = x)) ==> ((((COND x) (NUMERAL _0)) (SUC n)) = (SUC n)))))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c= c==> c/\ c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 cT c= cCOND cT cNUMERAL c_0 cSUC f5 cSUC f5 c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f5 cSUC f5 ! c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 b0 c= cCOND b0 cNUMERAL c_0 cSUC f5 cSUC f5 ! c==> cssreflect_eq f4 c= c= cfind_pair_list f1 f0 f3 b0 c= cCOND b0 cNUMERAL c_0 cSUC f5 cSUC f5
+ |- (((!n. (((NUMERAL _0) + n) = n)) ==> ((\n. (((NUMERAL _0) + n) = n)) n)) = ((\n. (((NUMERAL _0) + n) = n)) n))
T c= c==> ! c= c+ cNUMERAL c_0 b0 b0 * / c= c+ cNUMERAL c_0 b0 b0 f0 * / c= c+ cNUMERAL c_0 b0 b0 f0
+ |- (T = (((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((dropl (n + (NUMERAL (BIT1 _0)))) t))))))
T c= cT c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- (((take (SUC n)) ((CONS x) s)) = ((CONS x) ((take n) s)))
T c= ctake cSUC f0 cCONS f1 f2 cCONS f1 ctake f0 f2
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT f3 c==> c==> f3 c= c==> c\/ cT cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cT f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 f5 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cT f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 f5
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))))
T c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- (((!t. ((list_of_darts ((CONS h) t)) = ((cat (list_pairs h)) (list_of_darts t)))) ==> ((\t. ((list_of_darts ((CONS h) t)) = ((cat (list_pairs h)) (list_of_darts t)))) t)) = ((\t. ((list_of_darts ((CONS h) t)) = ((cat (list_pairs h)) (list_of_darts t)))) t))
T c= c==> ! c= clist_of_darts cCONS f0 b0 ccat clist_pairs f0 clist_of_darts b0 * / c= clist_of_darts cCONS f0 b0 ccat clist_pairs f0 clist_of_darts b0 f1 * / c= clist_of_darts cCONS f0 b0 ccat clist_pairs f0 clist_of_darts b0 f1
- ((\n. (((indexl ((find_pair_list t) d)) t) = n)) n) |- (((((indexl ((find_pair_list t) d)) t) = n) ==> (?n. (((indexl ((find_pair_list t) d)) t) = n))) = (?n. (((indexl ((find_pair_list t) d)) t) = n)))
T c==> * / c= cindexl cfind_pair_list f0 f1 f0 b0 f2 c= c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c? / c= cindexl cfind_pair_list f0 f1 f0 b0 c? / c= cindexl cfind_pair_list f0 f1 f0 b0
+ |- (((!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) ==> ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)) = ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1))
T c= c==> ! ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ |- ((\s. (!n. ((((take (SUC n)) ((CONS x) s)) = ((CONS x) ((take n) s))) /\ ((((take (NUMERAL _0)) s) = NIL) /\ (((take n) NIL) = NIL))))) s)
T * / ! c/\ c= ctake cSUC b1 cCONS f0 b0 cCONS f0 ctake b1 b0 c/\ c= ctake cNUMERAL c_0 b0 cNIL c= ctake b1 cNIL cNIL f1
+ ((\n. (((indexl ((find_pair_list t) d)) t) = n)) n) |- (((((indexl ((find_pair_list t) d)) t) = n) ==> (((CONS h) ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((CONS h) ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> * / c= cindexl cfind_pair_list f0 f1 f0 b0 f2 c= c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c= cCONS f3 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f3 f0 cCONS f3 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f3 f0 cNUMERAL cBIT1 c_0 cCONS f3 f0 c= cCONS f3 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f3 f0 cCONS f3 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f3 f0 cNUMERAL cBIT1 c_0 cCONS f3 f0
+ |- ((((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((cat NIL) ((dropl (n + (NUMERAL (BIT1 _0)))) t))))) = ((cat ((CONS h) ((take n) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = (((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((cat NIL) ((dropl (n + (NUMERAL (BIT1 _0)))) t))))) = ((cat ((CONS h) ((take n) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (SUC (n + (NUMERAL (BIT1 _0))))) ((CONS h) t))))))
T c= c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 ccat cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 ccat cCONS f0 ctake f1 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 ccat cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 ccat cCONS f0 ctake f1 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl cSUC c+ f1 cNUMERAL cBIT1 c_0 cCONS f0 f2
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> (((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> ((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF f3 c==> c==> f3 c= c==> c\/ cF cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cF f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 f5 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c==> c\/ cF cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cF f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 f5
+ |- ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) ==> ((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))))
T c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cT c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4
- ((MEM d) (list_of_darts t)) |- (((MEM d) (list_of_darts t)) /\ ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> cMEM f0 clist_of_darts f1 c/\ cMEM f0 clist_of_darts f1 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1
- |- ((\x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))))) x)
T * / ! c/\ c= cMEM b0 cNIL cF c= cMEM b0 cCONS f0 b1 c\/ c= b0 f0 cMEM b0 b1 f1
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
+ |- ((!a0. (!a1. ((((MEM d) (list_of_darts a1)) ==> (a1 = ((cat ((take ((indexl ((find_pair_list a1) d)) a1)) a1)) ((cat ((CONS ((find_pair_list a1) d)) NIL)) ((dropl (((indexl ((find_pair_list a1) d)) a1) + (NUMERAL (BIT1 _0)))) a1))))) ==> (((MEM d) (list_of_darts ((CONS a0) a1))) ==> (((CONS a0) a1) = ((cat ((take ((indexl ((find_pair_list ((CONS a0) a1)) d)) ((CONS a0) a1))) ((CONS a0) a1))) ((cat ((CONS ((find_pair_list ((CONS a0) a1)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS a0) a1)) d)) ((CONS a0) a1)) + (NUMERAL (BIT1 _0)))) ((CONS a0) a1))))))))) = ((((MEM d) (list_of_darts NIL)) ==> (NIL = ((cat ((take ((indexl ((find_pair_list NIL) d)) NIL)) NIL)) ((cat ((CONS ((find_pair_list NIL) d)) NIL)) ((dropl (((indexl ((find_pair_list NIL) d)) NIL) + (NUMERAL (BIT1 _0)))) NIL))))) /\ (!a0. (!a1. ((((MEM d) (list_of_darts a1)) ==> (a1 = ((cat ((take ((indexl ((find_pair_list a1) d)) a1)) a1)) ((cat ((CONS ((find_pair_list a1) d)) NIL)) ((dropl (((indexl ((find_pair_list a1) d)) a1) + (NUMERAL (BIT1 _0)))) a1))))) ==> (((MEM d) (list_of_darts ((CONS a0) a1))) ==> (((CONS a0) a1) = ((cat ((take ((indexl ((find_pair_list ((CONS a0) a1)) d)) ((CONS a0) a1))) ((CONS a0) a1))) ((cat ((CONS ((find_pair_list ((CONS a0) a1)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS a0) a1)) d)) ((CONS a0) a1)) + (NUMERAL (BIT1 _0)))) ((CONS a0) a1)))))))))))
T c= ! ! c==> c==> cMEM f0 clist_of_darts b1 c= b1 ccat ctake cindexl cfind_pair_list b1 f0 b1 b1 ccat cCONS cfind_pair_list b1 f0 cNIL cdropl c+ cindexl cfind_pair_list b1 f0 b1 cNUMERAL cBIT1 c_0 b1 c==> cMEM f0 clist_of_darts cCONS b0 b1 c= cCONS b0 b1 ccat ctake cindexl cfind_pair_list cCONS b0 b1 f0 cCONS b0 b1 cCONS b0 b1 ccat cCONS cfind_pair_list cCONS b0 b1 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS b0 b1 f0 cCONS b0 b1 cNUMERAL cBIT1 c_0 cCONS b0 b1 c/\ c==> cMEM f0 clist_of_darts cNIL c= cNIL ccat ctake cindexl cfind_pair_list cNIL f0 cNIL cNIL ccat cCONS cfind_pair_list cNIL f0 cNIL cdropl c+ cindexl cfind_pair_list cNIL f0 cNIL cNUMERAL cBIT1 c_0 cNIL ! ! c==> c==> cMEM f0 clist_of_darts b1 c= b1 ccat ctake cindexl cfind_pair_list b1 f0 b1 b1 ccat cCONS cfind_pair_list b1 f0 cNIL cdropl c+ cindexl cfind_pair_list b1 f0 b1 cNUMERAL cBIT1 c_0 b1 c==> cMEM f0 clist_of_darts cCONS b0 b1 c= cCONS b0 b1 ccat ctake cindexl cfind_pair_list cCONS b0 b1 f0 cCONS b0 b1 cCONS b0 b1 ccat cCONS cfind_pair_list cCONS b0 b1 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS b0 b1 f0 cCONS b0 b1 cNUMERAL cBIT1 c_0 cCONS b0 b1
+ |- (((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list ((CONS h) t)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c= c==> c\/ cMEM f0 clist_pairs f1 cMEM f0 clist_of_darts f2 c= cCONS f1 f2 ccat ctake cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0 cCONS f1 f2 cCONS f1 f2 ccat cCONS cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS f1 f2 f0 cCONS f1 f2 cNUMERAL cBIT1 c_0 cCONS f1 f2 c==> c\/ cMEM f0 clist_pairs f1 cMEM f0 clist_of_darts f2 c= cCONS f1 f2 ccat ctake cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0 cCONS f1 f2 cCONS f1 f2 ccat cCONS cfind_pair_list cCONS f1 f2 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS f1 f2 f0 cCONS f1 f2 cNUMERAL cBIT1 c_0 cCONS f1 f2
- |- (((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = ((ssreflect_eq eq) (((find_pair_list t) d) = h))) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> q')))) = ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> q'))))
T c= c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c==> c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cNUMERAL c_0 cSUC f4 f5 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f5 c==> c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cNUMERAL c_0 cSUC f4 f5 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f5
+ |- (((!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> (((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> ((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> (((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> ((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> (((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> ((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF f3 c==> c==> f3 c= c==> c\/ cF cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cF f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c==> c\/ cF cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cF f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 * / c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF f3 c==> c==> f3 c= c==> c\/ cF cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cF f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c==> c\/ cF cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cF f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF f3 c==> c==> f3 c= c==> c\/ cF cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cF f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c==> c\/ cF cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cF f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5
+ |- (((?x. ((((find_pair_list t) d) = h) = x)) ==> ((((COND (((find_pair_list t) d) = h)) (NUMERAL _0)) (SUC n)) = (SUC n))) = ((((COND (((find_pair_list t) d) = h)) (NUMERAL _0)) (SUC n)) = (SUC n)))
T c= c==> c? / c= c= cfind_pair_list f0 f1 f2 b0 c= cCOND c= cfind_pair_list f0 f1 f2 cNUMERAL c_0 cSUC f3 cSUC f3 c= cCOND c= cfind_pair_list f0 f1 f2 cNUMERAL c_0 cSUC f3 cSUC f3
+ |- ((((CONS h) t) = ((cat ((take (NUMERAL _0)) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl ((NUMERAL _0) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take (NUMERAL _0)) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c= c= cCONS f0 f1 ccat ctake cNUMERAL c_0 cCONS f0 f1 ccat cCONS f0 cNIL cdropl c+ cNUMERAL c_0 cNUMERAL cBIT1 c_0 cCONS f0 f1 c= cCONS f0 f1 ccat ctake cNUMERAL c_0 cCONS f0 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 cCONS f0 f1 cNUMERAL cBIT1 c_0 cCONS f0 f1
+ ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((((MEM d) (list_pairs h)) = x) ==> ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c= c==> c= cMEM f0 clist_pairs f1 f2 c==> c\/ cMEM f0 clist_pairs f1 cMEM f0 clist_of_darts f3 c= cCONS f1 f3 ccat ctake cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cCONS f1 f3 cCONS f1 f3 ccat cCONS cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cCONS f1 f3 cNUMERAL cBIT1 c_0 cCONS f1 f3 c==> c\/ cMEM f0 clist_pairs f1 cMEM f0 clist_of_darts f3 c= cCONS f1 f3 ccat ctake cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cCONS f1 f3 cCONS f1 f3 ccat cCONS cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cCONS f1 f3 cNUMERAL cBIT1 c_0 cCONS f1 f3
- |- ((((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) ==> (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)))
T c==> c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 f3 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0
+ (L = L1) |- (((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L1) d)) L1)) L1)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))
T c==> c= f0 f1 c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f2 f1 f1 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0
+ |- ((\P. (P = ((ssreflect_eq eq) P))) P)
T * / c= b0 cssreflect_eq f0 b0 f1
+ |- ((F ==> (NIL = ((cat ((take ((indexl ((find_pair_list NIL) d)) NIL)) NIL)) ((cat ((CONS ((find_pair_list NIL) d)) NIL)) ((dropl (((indexl ((find_pair_list NIL) d)) NIL) + (NUMERAL (BIT1 _0)))) NIL))))) = (((MEM d) NIL) ==> (NIL = ((cat ((take ((indexl ((find_pair_list NIL) d)) NIL)) NIL)) ((cat ((CONS ((find_pair_list NIL) d)) NIL)) ((dropl (((indexl ((find_pair_list NIL) d)) NIL) + (NUMERAL (BIT1 _0)))) NIL))))))
T c= c==> cF c= cNIL ccat ctake cindexl cfind_pair_list cNIL f0 cNIL cNIL ccat cCONS cfind_pair_list cNIL f0 cNIL cdropl c+ cindexl cfind_pair_list cNIL f0 cNIL cNUMERAL cBIT1 c_0 cNIL c==> cMEM f0 cNIL c= cNIL ccat ctake cindexl cfind_pair_list cNIL f0 cNIL cNIL ccat cCONS cfind_pair_list cNIL f0 cNIL cdropl c+ cindexl cfind_pair_list cNIL f0 cNIL cNUMERAL cBIT1 c_0 cNIL
- |- (!L1. (((\L1. (L = L1)) L1) ==> (?L1. (L = L1))))
T c==> * / c= f0 b0 f1 c? / c= f0 b0
+ |- (((!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT f3 c==> c==> f3 c= c==> c\/ cT cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cT f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cT f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 * / c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT f3 c==> c==> f3 c= c==> c\/ cT cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cT f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cT f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT f3 c==> c==> f3 c= c==> c\/ cT cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cT f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cCOND cT f2 cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5
+ |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> ((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c==> c\/ cF cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cF f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- |- ((behead NIL) = NIL)
T c= cbehead cNIL cNIL
+ (((indexl ((find_pair_list t) d)) t) = n), ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))), ((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) |- (((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) /\ (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c==> cMEM f1 clist_of_darts f0 c==> cssreflect_eq f3 c~ cMEM f1 clist_pairs f4 c==> * / c= cindexl cfind_pair_list f0 f1 cCONS f4 f0 b0 f5 c/\ * / c= cindexl cfind_pair_list f0 f1 cCONS f4 f0 b0 f5 c= cCONS f4 ccat ctake f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f2 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f4 f0 cCONS f4 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f4 f0 cNUMERAL cBIT1 c_0 cCONS f4 f0
- |- ((((\n. (((indexl ((find_pair_list t) d)) t) = n)) n) ==> (?n. (((indexl ((find_pair_list t) d)) t) = n))) = T)
T c= c==> * / c= cindexl cfind_pair_list f0 f1 f0 b0 f2 c? / c= cindexl cfind_pair_list f0 f1 f0 b0 cT
+ |- (((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> (((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n)) = ((NUMERAL _0) = (SUC n)))) ==> ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) ==> ((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))))) = ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) ==> ((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n)))))
T c= c==> c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 c= cNUMERAL c_0 cSUC f4 c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cT c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cT c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4
+ (L = L1) |- ((((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L1) d)) L1)) L1)) ((cat ((CONS ((find_pair_list L1) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = (((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L1) d)) L1)) L1)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))
T c==> c= f0 f1 c= c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f2 f1 f1 ccat cCONS cfind_pair_list f1 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0 c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f2 f1 f1 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0
+ |- (F ==> (NIL = ((cat ((take ((indexl ((find_pair_list NIL) d)) NIL)) NIL)) ((cat ((CONS ((find_pair_list NIL) d)) NIL)) ((dropl (((indexl ((find_pair_list NIL) d)) NIL) + (NUMERAL (BIT1 _0)))) NIL)))))
T c==> cF c= cNIL ccat ctake cindexl cfind_pair_list cNIL f0 cNIL cNIL ccat cCONS cfind_pair_list cNIL f0 cNIL cdropl c+ cindexl cfind_pair_list cNIL f0 cNIL cNUMERAL cBIT1 c_0 cNIL
+ |- ((\L1. (L = L1)) L)
T * / c= f0 b0 f0
+ |- ((((MEM d) (list_pairs h)) = ((MEM d) (list_pairs h))) = ((\x. (((MEM d) (list_pairs h)) = x)) ((MEM d) (list_pairs h))))
T c= c= cMEM f0 clist_pairs f1 cMEM f0 clist_pairs f1 * / c= cMEM f0 clist_pairs f1 b0 cMEM f0 clist_pairs f1
+ |- ((\s. (((cat ((CONS x) NIL)) s) = ((CONS x) s))) s)
T * / c= ccat cCONS f0 cNIL b0 cCONS f0 b0 f1
- |- ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1
+ |- (F ==> ((NUMERAL _0) = (SUC n)))
T c==> cF c= cNUMERAL c_0 cSUC f0
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> ((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c==> c\/ cF cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cF f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
+ ((\n. (((indexl ((find_pair_list t) d)) t) = n)) n) |- (((indexl ((find_pair_list t) d)) t) = n)
T c==> * / c= cindexl cfind_pair_list f0 f1 f0 b0 f2 c= cindexl cfind_pair_list f0 f1 f0 f2
- |- ((((MEM d) (list_of_darts t)) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))
T c==> c= cMEM f0 clist_of_darts f1 f2 c==> c==> f2 c= c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 f4 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 c==> f2 f4
+ |- (((!x. (!s. (((cat ((CONS x) NIL)) s) = ((CONS x) s)))) ==> ((\x. (!s. (((cat ((CONS x) NIL)) s) = ((CONS x) s)))) x)) = ((\x. (!s. (((cat ((CONS x) NIL)) s) = ((CONS x) s)))) x))
T c= c==> ! ! c= ccat cCONS b0 cNIL b1 cCONS b0 b1 * / ! c= ccat cCONS b0 cNIL b1 cCONS b0 b1 f0 * / ! c= ccat cCONS b0 cNIL b1 cCONS b0 b1 f0
+ (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c==> cMEM f0 clist_of_darts f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1
+ |- (((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((cat NIL) ((dropl (n + (NUMERAL (BIT1 _0)))) t))))))
T c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 ccat cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
+ |- (((!P. (((ssreflect_eq v) P) = P)) ==> ((\P. (((ssreflect_eq v) P) = P)) P)) = ((\P. (((ssreflect_eq v) P) = P)) P))
T c= c==> ! c= cssreflect_eq f0 b0 b0 * / c= cssreflect_eq f0 b0 b0 f1 * / c= cssreflect_eq f0 b0 b0 f1
+ ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((MEM d) (list_pairs h)) = x)
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c= cMEM f0 clist_pairs f1 f2
- |- ((\t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))) t)
T * / c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 b0 c\/ c= f0 f1 cMEM f0 b0 f2
- ((ssreflect_eq eq) (((find_pair_list t) d) = h)) |- (((ssreflect_eq eq) (((find_pair_list t) d) = h)) /\ (((NUMERAL _0) = (SUC n)) = ((NUMERAL _0) = (SUC n))))
T c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c/\ cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cNUMERAL c_0 cSUC f4 c= cNUMERAL c_0 cSUC f4
+ |- (?x. (((MEM d) (list_pairs h)) = x))
T c? / c= cMEM f0 clist_pairs f1 b0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((((\x. ((((find_pair_list t) d) = h) = x)) x) ==> ((((COND (((find_pair_list t) d) = h)) (NUMERAL _0)) (SUC n)) = (SUC n))) = T)
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c= c==> * / c= c= cfind_pair_list f1 f0 f3 b0 f4 c= cCOND c= cfind_pair_list f1 f0 f3 cNUMERAL c_0 cSUC f5 cSUC f5 cT
+ |- ((\P. (((ssreflect_eq v) P) = P)) P)
T * / c= cssreflect_eq f0 b0 b0 f1
+ |- (?x. ((((find_pair_list t) d) = h) = x))
T c? / c= c= cfind_pair_list f0 f1 f2 b0
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((((find_pair_list t) d) = h) = x) ==> ((((COND (((find_pair_list t) d) = h)) (NUMERAL _0)) (SUC n)) = (SUC n)))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c==> c= c= cfind_pair_list f1 f0 f3 f4 c= cCOND c= cfind_pair_list f1 f0 f3 cNUMERAL c_0 cSUC f5 cSUC f5
- (m = ((indexl ((find_pair_list t) d)) ((CONS h) t))) |- (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)
T c==> c= f0 cindexl cfind_pair_list f1 f2 cCONS f3 f1 c= cindexl cfind_pair_list f1 f2 cCONS f3 f1 f0
+ |- ((\s. (((indexl x) ((CONS x) s)) = (NUMERAL _0))) s)
T * / c= cindexl f0 cCONS f0 b0 cNUMERAL c_0 f1
+ |- ((((CONS h) t) = ((cat ((take (NUMERAL _0)) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c= c= cCONS f0 f1 ccat ctake cNUMERAL c_0 cCONS f0 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 cCONS f0 f1 cNUMERAL cBIT1 c_0 cCONS f0 f1 c= cCONS f0 f1 ccat ctake cindexl f0 cCONS f0 f1 cCONS f0 f1 ccat cCONS f0 cNIL cdropl c+ cindexl f0 cCONS f0 f1 cNUMERAL cBIT1 c_0 cCONS f0 f1
- (L = L1) |- ((((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L1) d)) L1)) L1)) ((cat ((CONS ((find_pair_list L1) d)) NIL)) ((dropl (((indexl ((find_pair_list L1) d)) L1) + (NUMERAL (BIT1 _0)))) L1))))) = (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))
T c==> c= f0 f1 c= c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f2 f1 f1 ccat cCONS cfind_pair_list f1 f2 cNIL cdropl c+ cindexl cfind_pair_list f1 f2 f1 cNUMERAL cBIT1 c_0 f1 c==> cMEM f2 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f2 f0 f0 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((MEM d) (list_of_darts t)) /\ ((t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c/\ cMEM f0 clist_of_darts f1 c==> c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1
- |- ((\q'. ((((MEM d) (list_of_darts t)) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))) q')
T * / c==> c= cMEM f0 clist_of_darts f1 f2 c==> c==> f2 c= c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 b0 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 c==> f2 b0 f4
+ (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c==> c\/ cMEM f0 clist_pairs f2 cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1
+ |- (((CONS h) t) = ((cat ((take (NUMERAL _0)) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl ((NUMERAL _0) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))
T c= cCONS f0 f1 ccat ctake cNUMERAL c_0 cCONS f0 f1 ccat cCONS f0 cNIL cdropl c+ cNUMERAL c_0 cNUMERAL cBIT1 c_0 cCONS f0 f1
+ |- ((((F \/ ((MEM d) (list_of_darts t))) = ((MEM d) (list_of_darts t))) ==> ((((MEM d) (list_of_darts t)) ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> q')))) = ((((MEM d) (list_of_darts t)) ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> q'))))
T c= c==> c= c\/ cF cMEM f0 clist_of_darts f1 cMEM f0 clist_of_darts f1 c==> c==> cMEM f0 clist_of_darts f1 c= c= cCONS f2 f1 ccat ctake cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cF f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 f3 c= c==> c\/ cF cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cF f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cMEM f0 clist_of_darts f1 f3 c==> c==> cMEM f0 clist_of_darts f1 c= c= cCONS f2 f1 ccat ctake cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cF f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 f3 c= c==> c\/ cF cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cF f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cMEM f0 clist_of_darts f1 f3
+ |- ((\n. (((NUMERAL _0) + n) = n)) n)
T * / c= c+ cNUMERAL c_0 b0 b0 f0
+ ((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) |- (((((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) ==> (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 f3 c= c==> c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 f3 c= cCONS f2 ccat ctake f4 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f4 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f2 f0 cCONS f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f2 f0 cNUMERAL cBIT1 c_0 cCONS f2 f0 c= cCONS f2 ccat ctake f4 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f4 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f2 f0 cCONS f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f2 f0 cNUMERAL cBIT1 c_0 cCONS f2 f0
+ |- ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
+ ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (~ ((MEM d) (list_pairs h)))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c~ cMEM f1 clist_pairs f2
- |- (!m. (((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) ==> (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m))))
T c==> * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 f3 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0
+ (L = L1) |- ((((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))) = (((MEM d) (list_of_darts L1)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))
T c==> c= f0 f1 c= c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f0 f2 f0 f0 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0 c==> cMEM f2 clist_of_darts f1 c= f0 ccat ctake cindexl cfind_pair_list f0 f2 f0 f0 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0
+ (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- (!x. (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = x)) ==> ((x \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND x) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND x) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND x) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 ! c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 b0 c==> c\/ b0 cMEM f0 clist_of_darts f1 c= cCONS f3 f1 ccat ctake cindexl cCOND b0 f3 cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cCOND b0 f3 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND b0 f3 cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1
+ |- ((((MEM d) (list_pairs ((find_pair_list t) d))) ==> ((NUMERAL _0) = (SUC n))) = (((MEM d) (list_of_darts t)) ==> ((NUMERAL _0) = (SUC n))))
T c= c==> cMEM f0 clist_pairs cfind_pair_list f1 f0 c= cNUMERAL c_0 cSUC f2 c==> cMEM f0 clist_of_darts f1 c= cNUMERAL c_0 cSUC f2
- |- (((!q'. ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = p') ==> ((p' ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = p') ==> ((p' ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = p') ==> ((p' ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f4 c==> c==> f4 c= c= cNUMERAL c_0 cSUC f5 b0 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f5 c==> f4 b0 * / c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f4 c==> c==> f4 c= c= cNUMERAL c_0 cSUC f5 b0 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f5 c==> f4 b0 f6 * / c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f4 c==> c==> f4 c= c= cNUMERAL c_0 cSUC f5 b0 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f5 c==> f4 b0 f6
+ |- (((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) ==> (((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n)) = T))
T c==> cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 c= c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4 cT
+ |- (((!p'. (!q'. (((T \/ ((MEM d) (list_of_darts t))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. (((T \/ ((MEM d) (list_of_darts t))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. (((T \/ ((MEM d) (list_of_darts t))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c\/ cT cMEM f0 clist_of_darts f1 b0 c==> c==> b0 c= c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 b1 c= c==> c\/ cT cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> b0 b1 * / ! c==> c= c\/ cT cMEM f0 clist_of_darts f1 b0 c==> c==> b0 c= c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 b1 c= c==> c\/ cT cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> b0 b1 f3 * / ! c==> c= c\/ cT cMEM f0 clist_of_darts f1 b0 c==> c==> b0 c= c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 b1 c= c==> c\/ cT cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> b0 b1 f3
+ |- (?n. (((indexl ((find_pair_list t) d)) t) = n))
T c? / c= cindexl cfind_pair_list f0 f1 f0 b0
+ |- (((!x. (((\L1. (L = L1)) x) ==> (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) ==> ((?L1. (L = L1)) ==> (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) = ((?L1. (L = L1)) ==> (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c= c==> ! c==> * / c= f0 b1 b0 c==> cMEM f1 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c==> c? / c= f0 b0 c==> cMEM f1 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c==> c? / c= f0 b0 c==> cMEM f1 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0
- |- (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))
T c= cMEM f0 cCONS f1 f2 c\/ c= f0 f1 cMEM f0 f2
+ |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)) = ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- ((MEM d) (list_of_darts t)) |- (((MEM d) (list_of_darts t)) = T)
T c==> cMEM f0 clist_of_darts f1 c= cMEM f0 clist_of_darts f1 cT
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ |- ((\p'. (!q'. ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) = p') ==> ((p' ==> (((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = T)) ==> ((((COND T) (NUMERAL _0)) (SUC n)) = (SUC n))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cT b0 c==> c==> b0 c= c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 b1 c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cT c= cCOND cT cNUMERAL c_0 cSUC f4 cSUC f4 c==> b0 b1 f5
- |- (((((find_pair_list t) d) = h) = x) ==> (?x. ((((find_pair_list t) d) = h) = x)))
T c==> c= c= cfind_pair_list f0 f1 f2 f3 c? / c= c= cfind_pair_list f0 f1 f2 b0
+ |- (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> ((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) /\ (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> ((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))))
T c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c==> c\/ cF cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cF f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c/\ c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c==> c\/ cF cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cF f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- |- ((((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) = ((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m))
T c= c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 f3 * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 f3
+ |- (((F \/ ((MEM d) (list_of_darts t))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))
T c==> c= c\/ cF cMEM f0 clist_of_darts f1 f2 c==> c==> f2 c= c= cCONS f3 f1 ccat ctake cindexl cCOND cF f3 cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cCOND cF f3 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cF f3 cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 f4 c= c==> c\/ cF cMEM f0 clist_of_darts f1 c= cCONS f3 f1 ccat ctake cindexl cCOND cF f3 cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cCOND cF f3 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cF f3 cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 c==> f2 f4
- (((MEM d) (list_pairs h)) = x) |- ((\x. (((MEM d) (list_pairs h)) = x)) x)
T c==> c= cMEM f0 clist_pairs f1 f2 * / c= cMEM f0 clist_pairs f1 b0 f2
+ ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) /\ (((F \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND F) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND F) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c/\ cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c==> c\/ cF cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cF f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cF f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- |- (T = (((CONS h) t) = ((CONS h) t)))
T c= cT c= cCONS f0 f1 cCONS f0 f1
+ |- ((((\L1. (L = L1)) L1) ==> (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))) = T)
T c= c==> * / c= f0 b0 f1 c==> cMEM f2 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f2 f0 f0 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0 cT
+ |- (T = (((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n))))
T c= cT c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4
- T |- (T = T)
T c==> cT c= cT cT
+ |- ((T ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (T ==> q')))
T c==> c==> cT c= c= cCONS f0 f1 ccat ctake cindexl cCOND cT f0 cfind_pair_list f1 f2 cCONS f0 f1 cCONS f0 f1 ccat cCONS cCOND cT f0 cfind_pair_list f1 f2 cNIL cdropl c+ cindexl cCOND cT f0 cfind_pair_list f1 f2 cCONS f0 f1 cNUMERAL cBIT1 c_0 cCONS f0 f1 f3 c= c==> c\/ cT cMEM f2 clist_of_darts f1 c= cCONS f0 f1 ccat ctake cindexl cCOND cT f0 cfind_pair_list f1 f2 cCONS f0 f1 cCONS f0 f1 ccat cCONS cCOND cT f0 cfind_pair_list f1 f2 cNIL cdropl c+ cindexl cCOND cT f0 cfind_pair_list f1 f2 cCONS f0 f1 cNUMERAL cBIT1 c_0 cCONS f0 f1 c==> cT f3
- ((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) |- (((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) /\ (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)))
T c==> * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 f3 c/\ * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 f3 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0
+ (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- (!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 ! c==> * / c= cMEM f0 clist_pairs f2 b1 b0 c==> c\/ cMEM f0 clist_pairs f2 cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1
- |- ((?x. ((((find_pair_list t) d) = h) = x)) ==> (?x. ((((find_pair_list t) d) = h) = x)))
T c==> c? / c= c= cfind_pair_list f0 f1 f2 b0 c? / c= c= cfind_pair_list f0 f1 f2 b0
+ |- (((((COND (((find_pair_list t) d) = h)) (NUMERAL _0)) (SUC ((indexl ((find_pair_list t) d)) t))) = (SUC n)) = (((indexl ((find_pair_list t) d)) ((CONS h) t)) = (SUC n)))
T c= c= cCOND c= cfind_pair_list f0 f1 f2 cNUMERAL c_0 cSUC cindexl cfind_pair_list f0 f1 f0 cSUC f3 c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 cSUC f3
+ |- ((((((MEM d) (list_of_darts NIL)) ==> (NIL = ((cat ((take ((indexl ((find_pair_list NIL) d)) NIL)) NIL)) ((cat ((CONS ((find_pair_list NIL) d)) NIL)) ((dropl (((indexl ((find_pair_list NIL) d)) NIL) + (NUMERAL (BIT1 _0)))) NIL))))) /\ (!a0. (!a1. ((((MEM d) (list_of_darts a1)) ==> (a1 = ((cat ((take ((indexl ((find_pair_list a1) d)) a1)) a1)) ((cat ((CONS ((find_pair_list a1) d)) NIL)) ((dropl (((indexl ((find_pair_list a1) d)) a1) + (NUMERAL (BIT1 _0)))) a1))))) ==> (((MEM d) (list_of_darts ((CONS a0) a1))) ==> (((CONS a0) a1) = ((cat ((take ((indexl ((find_pair_list ((CONS a0) a1)) d)) ((CONS a0) a1))) ((CONS a0) a1))) ((cat ((CONS ((find_pair_list ((CONS a0) a1)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS a0) a1)) d)) ((CONS a0) a1)) + (NUMERAL (BIT1 _0)))) ((CONS a0) a1)))))))))) ==> (!L. (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))) = (!L. (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L)))))))
T c= c==> c/\ c==> cMEM f0 clist_of_darts cNIL c= cNIL ccat ctake cindexl cfind_pair_list cNIL f0 cNIL cNIL ccat cCONS cfind_pair_list cNIL f0 cNIL cdropl c+ cindexl cfind_pair_list cNIL f0 cNIL cNUMERAL cBIT1 c_0 cNIL ! ! c==> c==> cMEM f0 clist_of_darts b1 c= b1 ccat ctake cindexl cfind_pair_list b1 f0 b1 b1 ccat cCONS cfind_pair_list b1 f0 cNIL cdropl c+ cindexl cfind_pair_list b1 f0 b1 cNUMERAL cBIT1 c_0 b1 c==> cMEM f0 clist_of_darts cCONS b0 b1 c= cCONS b0 b1 ccat ctake cindexl cfind_pair_list cCONS b0 b1 f0 cCONS b0 b1 cCONS b0 b1 ccat cCONS cfind_pair_list cCONS b0 b1 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS b0 b1 f0 cCONS b0 b1 cNUMERAL cBIT1 c_0 cCONS b0 b1 ! c==> cMEM f0 clist_of_darts b0 c= b0 ccat ctake cindexl cfind_pair_list b0 f0 b0 b0 ccat cCONS cfind_pair_list b0 f0 cNIL cdropl c+ cindexl cfind_pair_list b0 f0 b0 cNUMERAL cBIT1 c_0 b0 ! c==> cMEM f0 clist_of_darts b0 c= b0 ccat ctake cindexl cfind_pair_list b0 f0 b0 b0 ccat cCONS cfind_pair_list b0 f0 cNIL cdropl c+ cindexl cfind_pair_list b0 f0 b0 cNUMERAL cBIT1 c_0 b0
- |- (((!h. (!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))))) ==> ((\h. (!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))))) h)) = ((\h. (!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))))) h))
T c= c==> ! ! ! c/\ c= cMEM b1 cNIL cF c= cMEM b1 cCONS b0 b2 c\/ c= b1 b0 cMEM b1 b2 * / ! ! c/\ c= cMEM b1 cNIL cF c= cMEM b1 cCONS b0 b2 c\/ c= b1 b0 cMEM b1 b2 f0 * / ! ! c/\ c= cMEM b1 cNIL cF c= cMEM b1 cCONS b0 b2 c\/ c= b1 b0 cMEM b1 b2 f0
+ (L = L1) |- ((L = L1) /\ (((MEM d) (list_of_darts L)) ==> (L = ((cat ((take ((indexl ((find_pair_list L) d)) L)) L)) ((cat ((CONS ((find_pair_list L) d)) NIL)) ((dropl (((indexl ((find_pair_list L) d)) L) + (NUMERAL (BIT1 _0)))) L))))))
T c==> c= f0 f1 c/\ c= f0 f1 c==> cMEM f2 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f2 f0 f0 ccat cCONS cfind_pair_list f0 f2 cNIL cdropl c+ cindexl cfind_pair_list f0 f2 f0 cNUMERAL cBIT1 c_0 f0
+ |- (((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) = ((ssreflect_eq eq) (~ (((find_pair_list t) d) = h)))) ==> ((((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) ==> (((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n))) = (((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) ==> q')))) = ((((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) ==> (((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n))) = (((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) ==> q'))))
T c= c==> c= cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cF cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 c==> c==> cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 c= c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4 f5 c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4 c==> cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 f5 c==> c==> cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 c= c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4 f5 c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4 c==> cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 f5
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF ! * f0 b0
+ |- (((((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) ==> (((MEM d) (list_of_darts ((CONS h) t))) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list ((CONS h) t)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS h) t)) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = T)
T c= c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c==> cMEM f0 clist_of_darts cCONS f2 f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list cCONS f2 f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list cCONS f2 f1 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS f2 f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 cT
+ |- (((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))) = ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c= c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((((MEM d) (list_of_darts t)) /\ ((t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) ==> ((((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = ((((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c= c==> c/\ cMEM f0 clist_of_darts f1 c==> c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1
+ |- ((\h. (!t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))) h)
T * / ! ! c/\ c= cfind_pair_list cNIL b2 cNIL c= cfind_pair_list cCONS b0 b1 b2 cCOND cMEM b2 clist_pairs b0 b0 cfind_pair_list b1 b2 f0
+ |- ((\t. (((indexl x) ((CONS h) t)) = (((COND (x = h)) (NUMERAL _0)) (SUC ((indexl x) t))))) t)
T * / c= cindexl f0 cCONS f1 b0 cCOND c= f0 f1 cNUMERAL c_0 cSUC cindexl f0 b0 f2
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq eq) (((find_pair_list t) d) = h)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((NUMERAL _0) = (SUC n))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c= cfind_pair_list f1 f0 f3 c==> cssreflect_eq f4 c~ cMEM f0 clist_pairs f3 c= cNUMERAL c_0 cSUC f5
+ (((MEM d) (list_pairs h)) = x) |- ((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = x))
T c==> c= cMEM f0 clist_pairs f1 f2 cssreflect_eq f3 c= cMEM f0 clist_pairs f1 f2
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
+ |- (((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = ((ssreflect_eq mem_d) ((MEM d) (list_pairs h)))) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> q')))) = ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> ((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> q'))))
T c= c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT cssreflect_eq f0 cMEM f1 clist_pairs f2 c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 f4 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 f4 c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 f4 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 f4
- |- (T = ((~ P) = (P = F)))
T c= cT c= c~ f0 c= f0 cF
+ |- ((\t. ((list_of_darts ((CONS h) t)) = ((cat (list_pairs h)) (list_of_darts t)))) t)
T * / c= clist_of_darts cCONS f0 b0 ccat clist_pairs f0 clist_of_darts b0 f1
+ |- ((\h. (!t. (((behead NIL) = NIL) /\ ((behead ((CONS h) t)) = t)))) h)
T * / ! c/\ c= cbehead cNIL cNIL c= cbehead cCONS b0 b1 b1 f0
+ |- ((\x. (!s. (((cat ((CONS x) NIL)) s) = ((CONS x) s)))) x)
T * / ! c= ccat cCONS b0 cNIL b1 cCONS b0 b1 f0
+ (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- ((?x. (((MEM d) (list_pairs h)) = x)) ==> ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c==> c? / c= cMEM f0 clist_pairs f2 b0 c==> c\/ cMEM f0 clist_pairs f2 cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1
+ ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) /\ (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c/\ cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c==> c\/ cT cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cCOND cT f2 cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- |- ((L = L1) = ((\L1. (L = L1)) L1))
T c= c= f0 f1 * / c= f0 b0 f1
- |- ((\p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> b0 b1 f4
+ ((MEM d) (list_of_darts t)), ((ssreflect_eq eq) (((find_pair_list t) d) = h)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((ssreflect_eq eq) (((find_pair_list t) d) = h)) /\ ((NUMERAL _0) = (SUC n)))
T c==> cMEM f0 clist_of_darts f1 c==> cssreflect_eq f2 c= cfind_pair_list f1 f0 f3 c==> cssreflect_eq f4 c~ cMEM f0 clist_pairs f3 c/\ cssreflect_eq f2 c= cfind_pair_list f1 f0 f3 c= cNUMERAL c_0 cSUC f5
+ |- (((((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) ==> (((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n)) = T)) ==> ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n))) = (((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) ==> T))) = ((((ssreflect_eq eq) ((((find_pair_list t) d) = h) = F)) ==> ((((COND F) (NUMERAL _0)) (SUC n)) = (SUC n))) = (((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) ==> T)))
T c= c==> c==> cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 c= c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4 cT c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4 c==> cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 cT c= c==> cssreflect_eq f0 c= c= cfind_pair_list f1 f2 f3 cF c= cCOND cF cNUMERAL c_0 cSUC f4 cSUC f4 c==> cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 cT
+ ((ssreflect_eq eq) (((find_pair_list t) d) = h)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((MEM d) (list_pairs ((find_pair_list t) d))) ==> ((NUMERAL _0) = (SUC n)))
T c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c==> cssreflect_eq f4 c~ cMEM f2 clist_pairs f3 c==> cMEM f2 clist_pairs cfind_pair_list f1 f2 c= cNUMERAL c_0 cSUC f5
+ (((indexl ((find_pair_list t) d)) t) = n), (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m), ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) /\ (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c==> c= cindexl cfind_pair_list f0 f1 cCONS f3 f0 f4 c==> cMEM f1 clist_of_darts f0 c==> cssreflect_eq f5 c~ cMEM f1 clist_pairs f3 c/\ c= cindexl cfind_pair_list f0 f1 cCONS f3 f0 f4 c= cCONS f3 ccat ctake f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f2 cNUMERAL cBIT1 c_0 f0 ccat ctake cindexl cfind_pair_list f0 f1 cCONS f3 f0 cCONS f3 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 cCONS f3 f0 cNUMERAL cBIT1 c_0 cCONS f3 f0
- |- ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> q')))
T c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 f4 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 f4
+ ((((find_pair_list t) d) = h) = x), ((MEM d) (list_of_darts t)), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- ((((COND x) (NUMERAL _0)) (SUC n)) = (SUC n))
T c==> c= c= cfind_pair_list f0 f1 f2 f3 c==> cMEM f1 clist_of_darts f0 c==> cssreflect_eq f4 c~ cMEM f1 clist_pairs f2 c= cCOND f3 cNUMERAL c_0 cSUC f5 cSUC f5
+ (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) |- ((((indexl ((find_pair_list t) d)) ((CONS h) t)) = (SUC n)) = (m = (SUC n)))
T c==> c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 f3 c= c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 cSUC f4 c= f3 cSUC f4
+ |- ((((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((cat NIL) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))))) = (((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t))))))
T c= c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 ccat cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cCONS f0 ccat ctake f1 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- (((MEM d) (list_pairs h)) = x) |- (((x \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND x) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND x) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND x) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> c= cMEM f0 clist_pairs f1 f2 c= c==> c\/ f2 cMEM f0 clist_of_darts f3 c= cCONS f1 f3 ccat ctake cindexl cCOND f2 f1 cfind_pair_list f3 f0 cCONS f1 f3 cCONS f1 f3 ccat cCONS cCOND f2 f1 cfind_pair_list f3 f0 cNIL cdropl c+ cindexl cCOND f2 f1 cfind_pair_list f3 f0 cCONS f1 f3 cNUMERAL cBIT1 c_0 cCONS f1 f3 c==> c\/ cMEM f0 clist_pairs f1 cMEM f0 clist_of_darts f3 c= cCONS f1 f3 ccat ctake cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cCONS f1 f3 cCONS f1 f3 ccat cCONS cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 cCONS f1 f3 cNUMERAL cBIT1 c_0 cCONS f1 f3
+ |- ((\p'. (!q'. (((T \/ ((MEM d) (list_of_darts t))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> (((T \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND T) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND T) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) p')
T * / ! c==> c= c\/ cT cMEM f0 clist_of_darts f1 b0 c==> c==> b0 c= c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 b1 c= c==> c\/ cT cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cT f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cT f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> b0 b1 f3
+ |- ((((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((cat NIL) ((dropl (n + (NUMERAL (BIT1 _0)))) t))))) = ((cat ((CONS h) ((take n) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl ((SUC n) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((CONS h) ((take n) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl ((SUC n) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))
T c= c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 ccat cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 ccat cCONS f0 ctake f1 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl c+ cSUC f1 cNUMERAL cBIT1 c_0 cCONS f0 f2 c= cCONS f0 ccat ctake f1 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 ccat cCONS f0 ctake f1 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl c+ cSUC f1 cNUMERAL cBIT1 c_0 cCONS f0 f2
+ |- ((((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((CONS h) ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t))))) = (((CONS h) ((cat ((take n) t)) ((CONS ((find_pair_list t) d)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))) = ((cat ((CONS h) ((take n) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t)))))
T c= c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 cCONS f0 ccat ctake f1 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 c= cCONS f0 ccat ctake f1 f2 cCONS cfind_pair_list f2 f3 cdropl c+ f1 cNUMERAL cBIT1 c_0 f2 ccat cCONS f0 ctake f1 f2 ccat cCONS cfind_pair_list f2 f3 cNIL cdropl c+ f1 cNUMERAL cBIT1 c_0 f2
- (((indexl ((find_pair_list t) d)) t) = n) |- ((((indexl ((find_pair_list t) d)) t) = n) /\ (?n. (((indexl ((find_pair_list t) d)) t) = n)))
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c/\ c= cindexl cfind_pair_list f0 f1 f0 f2 c? / c= cindexl cfind_pair_list f0 f1 f0 b0
+ |- ((\n. (((indexl ((find_pair_list t) d)) t) = n)) ((indexl ((find_pair_list t) d)) t))
T * / c= cindexl cfind_pair_list f0 f1 f0 b0 cindexl cfind_pair_list f0 f1 f0
+ |- ((!a1. ((((MEM d) (list_of_darts a1)) ==> (a1 = ((cat ((take ((indexl ((find_pair_list a1) d)) a1)) a1)) ((cat ((CONS ((find_pair_list a1) d)) NIL)) ((dropl (((indexl ((find_pair_list a1) d)) a1) + (NUMERAL (BIT1 _0)))) a1))))) ==> (((MEM d) (list_of_darts ((CONS h) a1))) ==> (((CONS h) a1) = ((cat ((take ((indexl ((find_pair_list ((CONS h) a1)) d)) ((CONS h) a1))) ((CONS h) a1))) ((cat ((CONS ((find_pair_list ((CONS h) a1)) d)) NIL)) ((dropl (((indexl ((find_pair_list ((CONS h) a1)) d)) ((CONS h) a1)) + (NUMERAL (BIT1 _0)))) ((CONS h) a1)))))))) = T)
T c= ! c==> c==> cMEM f0 clist_of_darts b0 c= b0 ccat ctake cindexl cfind_pair_list b0 f0 b0 b0 ccat cCONS cfind_pair_list b0 f0 cNIL cdropl c+ cindexl cfind_pair_list b0 f0 b0 cNUMERAL cBIT1 c_0 b0 c==> cMEM f0 clist_of_darts cCONS f1 b0 c= cCONS f1 b0 ccat ctake cindexl cfind_pair_list cCONS f1 b0 f0 cCONS f1 b0 cCONS f1 b0 ccat cCONS cfind_pair_list cCONS f1 b0 f0 cNIL cdropl c+ cindexl cfind_pair_list cCONS f1 b0 f0 cCONS f1 b0 cNUMERAL cBIT1 c_0 cCONS f1 b0 cT
+ (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- (((!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))) ==> ((?x. (((MEM d) (list_pairs h)) = x)) ==> ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))) = ((?x. (((MEM d) (list_pairs h)) = x)) ==> ((((MEM d) (list_pairs h)) \/ ((MEM d) (list_of_darts t))) ==> (((CONS h) t) = ((cat ((take ((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) NIL)) ((dropl (((indexl (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c= c==> ! c==> * / c= cMEM f0 clist_pairs f2 b1 b0 c==> c\/ cMEM f0 clist_pairs f2 cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> c? / c= cMEM f0 clist_pairs f2 b0 c==> c\/ cMEM f0 clist_pairs f2 cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> c? / c= cMEM f0 clist_pairs f2 b0 c==> c\/ cMEM f0 clist_pairs f2 cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1
- |- ((\q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5
- |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))) = (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- (((take n) NIL) = NIL)
T c= ctake f0 cNIL cNIL
- |- (((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))) = ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))))
T c= c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((MEM d) (list_pairs h)) = T)
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 clist_pairs f2 cT
- |- (((!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (?x. (((MEM d) (list_pairs h)) = x)))) ==> ((?x. (((MEM d) (list_pairs h)) = x)) ==> (?x. (((MEM d) (list_pairs h)) = x)))) = ((?x. (((MEM d) (list_pairs h)) = x)) ==> (?x. (((MEM d) (list_pairs h)) = x))))
T c= c==> ! c==> * / c= cMEM f0 clist_pairs f1 b1 b0 c? / c= cMEM f0 clist_pairs f1 b1 c==> c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0 c==> c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
- (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- ((((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) = T)
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c= c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 cT
- ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
- |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 f5 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 f5
- |- ((\q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5
- |- ((~ P) = (P = F))
T c= c~ f0 c= f0 cF
- (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) |- ((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m)
T c==> c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 f3 * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 f3
- |- ((?L1. (L = L1)) ==> (?L1. (L = L1)))
T c==> c? / c= f0 b0 c? / c= f0 b0
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- (L = L1) |- (L1 = L)
T c==> c= f0 f1 c= f1 f0
- |- (((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> (((NUMERAL _0) = (SUC n)) = ((NUMERAL _0) = (SUC n)))) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))))) = ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n)))))
T c= c==> c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cNUMERAL c_0 cSUC f4 c= cNUMERAL c_0 cSUC f4 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4
- (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))), ((MEM d) (list_of_darts t)) |- (((MEM d) (list_of_darts t)) /\ (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t)))))
T c==> c==> cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1 c==> cMEM f0 clist_of_darts f1 c/\ cMEM f0 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f0 f1 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 f1 cNUMERAL cBIT1 c_0 f1
- ((\L1. (L = L1)) L1) |- (((L = L1) ==> (?L1. (L = L1))) = (?L1. (L = L1)))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c? / c= f0 b0 c? / c= f0 b0
- ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((((MEM d) (list_pairs h)) = x) ==> (?x. (((MEM d) (list_pairs h)) = x))) = (?x. (((MEM d) (list_pairs h)) = x)))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c= c==> c= cMEM f0 clist_pairs f1 f2 c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0
- |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) ==> (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m))) = T)
T c= c==> * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 f3 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 cT
- |- ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 f5 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 f5
- (((indexl ((find_pair_list t) d)) t) = n), (((MEM d) (list_of_darts t)) ==> (t = ((cat ((take ((indexl ((find_pair_list t) d)) t)) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) t) + (NUMERAL (BIT1 _0)))) t))))) |- ((((MEM d) (list_of_darts t)) ==> (t = ((cat ((take n) t)) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (n + (NUMERAL (BIT1 _0)))) t))))) = T)
T c==> c= cindexl cfind_pair_list f0 f1 f0 f2 c==> c==> cMEM f1 clist_of_darts f0 c= f0 ccat ctake cindexl cfind_pair_list f0 f1 f0 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ cindexl cfind_pair_list f0 f1 f0 cNUMERAL cBIT1 c_0 f0 c= c==> cMEM f1 clist_of_darts f0 c= f0 ccat ctake f2 f0 ccat cCONS cfind_pair_list f0 f1 cNIL cdropl c+ f2 cNUMERAL cBIT1 c_0 f0 cT
- ((ssreflect_eq eq) (((find_pair_list t) d) = h)) |- (((ssreflect_eq eq) (((find_pair_list t) d) = h)) = T)
T c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 cT
- |- (((!p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> b0 b1 f4
- |- ((\q'. ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = p') ==> ((p' ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f4 c==> c==> f4 c= c= cNUMERAL c_0 cSUC f5 b0 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f5 c==> f4 b0 f6
- |- ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = T)
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 cT
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((((P T) /\ (P F)) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c= c==> c/\ * f0 cT * f0 cF ! * f0 b0 cT
- ((((find_pair_list t) d) = h) = x) |- (((((find_pair_list t) d) = h) = x) /\ (?x. ((((find_pair_list t) d) = h) = x)))
T c==> c= c= cfind_pair_list f0 f1 f2 f3 c/\ c= c= cfind_pair_list f0 f1 f2 f3 c? / c= c= cfind_pair_list f0 f1 f2 b0
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- |- (((!p'. (!q'. ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = p') ==> ((p' ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = p') ==> ((p' ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = p') ==> ((p' ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 b0 c==> c==> b0 c= c= cNUMERAL c_0 cSUC f4 b1 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 b0 c==> c==> b0 c= c= cNUMERAL c_0 cSUC f4 b1 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> b0 b1 f5 * / ! c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 b0 c==> c==> b0 c= c= cNUMERAL c_0 cSUC f4 b1 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> b0 b1 f5
- ((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) |- (((ssreflect_eq eq) (~ (((find_pair_list t) d) = h))) = T)
T c==> cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 c= cssreflect_eq f0 c~ c= cfind_pair_list f1 f2 f3 cT
- (L = L1) |- ((L = L1) /\ (?L1. (L = L1)))
T c==> c= f0 f1 c/\ c= f0 f1 c? / c= f0 b0
- ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) /\ ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c/\ cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- ((\L1. (L = L1)) L1) |- (((\L1. (L = L1)) L1) /\ (?L1. (L = L1)))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c? / c= f0 b0
- ((((find_pair_list t) d) = h) = x) |- ((\x. ((((find_pair_list t) d) = h) = x)) x)
T c==> c= c= cfind_pair_list f0 f1 f2 f3 * / c= c= cfind_pair_list f0 f1 f2 b0 f3
- |- ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = p') ==> ((p' ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 f4 c==> c==> f4 c= c= cNUMERAL c_0 cSUC f5 f6 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f5 c==> f4 f6
- ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((\x. (((MEM d) (list_pairs h)) = x)) x) /\ (?x. (((MEM d) (list_pairs h)) = x)))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c/\ * / c= cMEM f0 clist_pairs f1 b0 f2 c? / c= cMEM f0 clist_pairs f1 b0
- |- (((!q'. ((((MEM d) (list_of_darts t)) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))) ==> ((\q'. ((((MEM d) (list_of_darts t)) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))) q')) = ((\q'. ((((MEM d) (list_of_darts t)) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cMEM f0 clist_of_darts f1 f2 c==> c==> f2 c= c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 b0 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 c==> f2 b0 * / c==> c= cMEM f0 clist_of_darts f1 f2 c==> c==> f2 c= c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 b0 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 c==> f2 b0 f4 * / c==> c= cMEM f0 clist_of_darts f1 f2 c==> c==> f2 c= c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 b0 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f3 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f3 f1 cCONS f3 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f3 f1 cNUMERAL cBIT1 c_0 cCONS f3 f1 c==> f2 b0 f4
- |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> q')))
T c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 f4 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f4
- (((MEM d) (list_pairs h)) = x) |- (x = ((MEM d) (list_pairs h)))
T c==> c= cMEM f0 clist_pairs f1 f2 c= f2 cMEM f0 clist_pairs f1
- |- (((!x. (((\n. (((indexl ((find_pair_list t) d)) t) = n)) x) ==> (?n. (((indexl ((find_pair_list t) d)) t) = n)))) ==> ((?n. (((indexl ((find_pair_list t) d)) t) = n)) ==> (?n. (((indexl ((find_pair_list t) d)) t) = n)))) = ((?n. (((indexl ((find_pair_list t) d)) t) = n)) ==> (?n. (((indexl ((find_pair_list t) d)) t) = n))))
T c= c==> ! c==> * / c= cindexl cfind_pair_list f0 f1 f0 b1 b0 c? / c= cindexl cfind_pair_list f0 f1 f0 b1 c==> c? / c= cindexl cfind_pair_list f0 f1 f0 b0 c? / c= cindexl cfind_pair_list f0 f1 f0 b0 c==> c? / c= cindexl cfind_pair_list f0 f1 f0 b0 c? / c= cindexl cfind_pair_list f0 f1 f0 b0
- |- (((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x))))) = (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- ((((\x. ((((find_pair_list t) d) = h) = x)) x) ==> (?x. ((((find_pair_list t) d) = h) = x))) = T)
T c= c==> * / c= c= cfind_pair_list f0 f1 f2 b0 f3 c? / c= c= cfind_pair_list f0 f1 f2 b0 cT
- |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- |- (((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = ((ssreflect_eq mem_d) ((MEM d) (list_pairs h)))) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> q')))) = ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> q'))))
T c= c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 cssreflect_eq f0 cMEM f1 clist_pairs f2 c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 f4 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 f4 c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 f4 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 f4
- |- (((!p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> b0 b1 * / ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> b0 b1 f4
- |- (((!x. (((\L1. (L = L1)) x) ==> (?L1. (L = L1)))) ==> ((?L1. (L = L1)) ==> (?L1. (L = L1)))) = ((?L1. (L = L1)) ==> (?L1. (L = L1))))
T c= c==> ! c==> * / c= f0 b1 b0 c? / c= f0 b1 c==> c? / c= f0 b0 c? / c= f0 b0 c==> c? / c= f0 b0 c? / c= f0 b0
- ((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) m) |- (((((indexl ((find_pair_list t) d)) ((CONS h) t)) = m) ==> (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m))) = (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)))
T c==> * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 f3 c= c==> c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 f3 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0
- ((MEM d) (list_of_darts t)) |- (T = ((MEM d) (list_of_darts t)))
T c==> cMEM f0 clist_of_darts f1 c= cT cMEM f0 clist_of_darts f1
- (L = L1) |- (((MEM d) (list_of_darts L1)) ==> (L1 = ((cat ((take ((indexl ((find_pair_list L1) d)) L1)) L1)) ((cat ((CONS ((find_pair_list L1) d)) NIL)) ((dropl (((indexl ((find_pair_list L1) d)) L1) + (NUMERAL (BIT1 _0)))) L1)))))
T c==> c= f0 f1 c==> cMEM f2 clist_of_darts f1 c= f1 ccat ctake cindexl cfind_pair_list f1 f2 f1 f1 ccat cCONS cfind_pair_list f1 f2 cNIL cdropl c+ cindexl cfind_pair_list f1 f2 f1 cNUMERAL cBIT1 c_0 f1
- |- (((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h))))) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> q')))) = ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> q'))))
T c= c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 f4 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f4 c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 f4 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f3 c= cCONS f2 f3 ccat ctake cindexl cfind_pair_list f3 f1 cCONS f2 f3 cCONS f2 f3 ccat cCONS cfind_pair_list f3 f1 cNIL cdropl c+ cindexl cfind_pair_list f3 f1 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f4
- |- (((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))) = ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c= c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- |- ((L = L1) ==> (?L1. (L = L1)))
T c==> c= f0 f1 c? / c= f0 b0
- |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- ((?x. (((MEM d) (list_pairs h)) = x)) ==> (?x. (((MEM d) (list_pairs h)) = x)))
T c==> c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0
- |- ((\h. (!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))))) h)
T * / ! ! c/\ c= cMEM b1 cNIL cF c= cMEM b1 cCONS b0 b2 c\/ c= b1 b0 cMEM b1 b2 f0
- |- (((!x. (((\x. ((((find_pair_list t) d) = h) = x)) x) ==> (?x. ((((find_pair_list t) d) = h) = x)))) ==> ((?x. ((((find_pair_list t) d) = h) = x)) ==> (?x. ((((find_pair_list t) d) = h) = x)))) = ((?x. ((((find_pair_list t) d) = h) = x)) ==> (?x. ((((find_pair_list t) d) = h) = x))))
T c= c==> ! c==> * / c= c= cfind_pair_list f0 f1 f2 b1 b0 c? / c= c= cfind_pair_list f0 f1 f2 b1 c==> c? / c= c= cfind_pair_list f0 f1 f2 b0 c? / c= c= cfind_pair_list f0 f1 f2 b0 c==> c? / c= c= cfind_pair_list f0 f1 f2 b0 c? / c= c= cfind_pair_list f0 f1 f2 b0
- |- (!n. (((\n. (((indexl ((find_pair_list t) d)) t) = n)) n) ==> (?n. (((indexl ((find_pair_list t) d)) t) = n))))
T c==> * / c= cindexl cfind_pair_list f0 f1 f0 b0 f2 c? / c= cindexl cfind_pair_list f0 f1 f0 b0
- |- (((!x. (((\m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) x) ==> (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)))) ==> ((?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) ==> (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)))) = ((?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) ==> (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m))))
T c= c==> ! c==> * / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b1 b0 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b1 c==> c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 c==> c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0
- |- (((MEM d) (list_of_darts t)) ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> cMEM f0 clist_of_darts f1 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (((P T) /\ (P F)) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ c/\ * f0 cT * f0 cF ! * f0 b0
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- (!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (?x. (((MEM d) (list_pairs h)) = x))))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c? / c= cMEM f0 clist_pairs f1 b0
- |- (((!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 * / c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cCONS f2 f4 ccat ctake cindexl f2 cCONS f2 f4 cCONS f2 f4 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5
- ((\n. (((indexl ((find_pair_list t) d)) t) = n)) n) |- (((\n. (((indexl ((find_pair_list t) d)) t) = n)) n) /\ (?n. (((indexl ((find_pair_list t) d)) t) = n)))
T c==> * / c= cindexl cfind_pair_list f0 f1 f0 b0 f2 c/\ * / c= cindexl cfind_pair_list f0 f1 f0 b0 f2 c? / c= cindexl cfind_pair_list f0 f1 f0 b0
- |- ((((dropl n) NIL) = NIL) /\ (((dropl (NUMERAL _0)) s) = s))
T c/\ c= cdropl f0 cNIL cNIL c= cdropl cNUMERAL c_0 f1 f1
- ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = T)
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cssreflect_eq f0 cMEM f1 clist_pairs f2 cT
- |- (((((MEM d) (list_of_darts t)) ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))) = ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))))
T c= c==> c==> cMEM f0 clist_of_darts f1 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c= c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0 cT
- |- ((((MEM d) (list_of_darts t)) ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (((MEM d) (list_of_darts t)) ==> q')))
T c==> c==> cMEM f0 clist_of_darts f1 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 f3 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> cMEM f0 clist_of_darts f1 f3
- |- ((((MEM d) (list_pairs h)) = x) = ((\x. (((MEM d) (list_pairs h)) = x)) x))
T c= c= cMEM f0 clist_pairs f1 f2 * / c= cMEM f0 clist_pairs f1 b0 f2
- (L = L1) |- ((\L1. (L = L1)) L1)
T c==> c= f0 f1 * / c= f0 b0 f1
- |- (((dropl n) NIL) = NIL)
T c= cdropl f0 cNIL cNIL
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- ((\x. ((((find_pair_list t) d) = h) = x)) x) |- ((((((find_pair_list t) d) = h) = x) ==> (?x. ((((find_pair_list t) d) = h) = x))) = (?x. ((((find_pair_list t) d) = h) = x)))
T c==> * / c= c= cfind_pair_list f0 f1 f2 b0 f3 c= c==> c= c= cfind_pair_list f0 f1 f2 f3 c? / c= c= cfind_pair_list f0 f1 f2 b0 c? / c= c= cfind_pair_list f0 f1 f2 b0
- |- (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> (((NUMERAL _0) = (SUC n)) = ((NUMERAL _0) = (SUC n))))
T c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= c= cNUMERAL c_0 cSUC f4 c= cNUMERAL c_0 cSUC f4
- T |- ((T = T) = T)
T c==> cT c= c= cT cT cT
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
- |- (((((find_pair_list t) d) = h) = x) = ((\x. ((((find_pair_list t) d) = h) = x)) x))
T c= c= c= cfind_pair_list f0 f1 f2 f3 * / c= c= cfind_pair_list f0 f1 f2 b0 f3
- |- (((!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 * / c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> cMEM f1 clist_of_darts f4 c= cCONS f2 f4 ccat ctake cindexl cfind_pair_list f4 f1 cCONS f2 f4 cCONS f2 f4 ccat cCONS cfind_pair_list f4 f1 cNIL cdropl c+ cindexl cfind_pair_list f4 f1 cCONS f2 f4 cNUMERAL cBIT1 c_0 cCONS f2 f4 c==> f3 b0 f5
- |- ((?n. (((indexl ((find_pair_list t) d)) t) = n)) ==> (?n. (((indexl ((find_pair_list t) d)) t) = n)))
T c==> c? / c= cindexl cfind_pair_list f0 f1 f0 b0 c? / c= cindexl cfind_pair_list f0 f1 f0 b0
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- ((?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)) ==> (?m. (((indexl ((find_pair_list t) d)) ((CONS h) t)) = m)))
T c==> c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0 c? / c= cindexl cfind_pair_list f0 f1 cCONS f2 f0 b0
- |- ((((\L1. (L = L1)) L1) ==> (?L1. (L = L1))) = T)
T c= c==> * / c= f0 b0 f1 c? / c= f0 b0 cT
- ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- ((MEM d) (list_pairs h))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 cMEM f1 clist_pairs f2
- |- (((!x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))))) ==> ((\x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))))) x)) = ((\x. (!t. ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t)))))) x))
T c= c==> ! ! c/\ c= cMEM b0 cNIL cF c= cMEM b0 cCONS f0 b1 c\/ c= b0 f0 cMEM b0 b1 * / ! c/\ c= cMEM b0 cNIL cF c= cMEM b0 cCONS f0 b1 c\/ c= b0 f0 cMEM b0 b1 f1 * / ! c/\ c= cMEM b0 cNIL cF c= cMEM b0 cCONS f0 b1 c\/ c= b0 f0 cMEM b0 b1 f1
- ((((find_pair_list t) d) = h) = x) |- (x = (((find_pair_list t) d) = h))
T c==> c= c= cfind_pair_list f0 f1 f2 f3 c= f3 c= cfind_pair_list f0 f1 f2
- |- ((\p'. (!q'. ((((MEM d) (list_of_darts t)) = p') ==> ((p' ==> ((((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = q')) ==> ((((MEM d) (list_of_darts t)) ==> (((CONS h) t) = ((cat ((take ((indexl ((find_pair_list t) d)) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS ((find_pair_list t) d)) NIL)) ((dropl (((indexl ((find_pair_list t) d)) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))) = (p' ==> q')))))) p')
T * / ! c==> c= cMEM f0 clist_of_darts f1 b0 c==> c==> b0 c= c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 b1 c= c==> cMEM f0 clist_of_darts f1 c= cCONS f2 f1 ccat ctake cindexl cfind_pair_list f1 f0 cCONS f2 f1 cCONS f2 f1 ccat cCONS cfind_pair_list f1 f0 cNIL cdropl c+ cindexl cfind_pair_list f1 f0 cCONS f2 f1 cNUMERAL cBIT1 c_0 cCONS f2 f1 c==> b0 b1 f3
- |- ((((indexl ((find_pair_list t) d)) t) = n) = ((\n. (((indexl ((find_pair_list t) d)) t) = n)) n))
T c= c= cindexl cfind_pair_list f0 f1 f0 f2 * / c= cindexl cfind_pair_list f0 f1 f0 b0 f2
- |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t))))) = (((CONS h) t) = ((cat ((take ((indexl h) ((CONS h) t))) ((CONS h) t))) ((cat ((CONS h) NIL)) ((dropl (((indexl h) ((CONS h) t)) + (NUMERAL (BIT1 _0)))) ((CONS h) t)))))))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3 c= cCONS f2 f3 ccat ctake cindexl f2 cCONS f2 f3 cCONS f2 f3 ccat cCONS f2 cNIL cdropl c+ cindexl f2 cCONS f2 f3 cNUMERAL cBIT1 c_0 cCONS f2 f3
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((\p'. (!q'. ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) = p') ==> ((p' ==> (((NUMERAL _0) = (SUC n)) = q')) ==> ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 b0 c==> c==> b0 c= c= cNUMERAL c_0 cSUC f4 b1 c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> b0 b1 f5
- |- ((((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))) = (((ssreflect_eq eq) (((find_pair_list t) d) = h)) ==> ((NUMERAL _0) = (SUC n))))
T c= c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4 c==> cssreflect_eq f0 c= cfind_pair_list f1 f2 f3 c= cNUMERAL c_0 cSUC f4
