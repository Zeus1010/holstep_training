N Hypermap.lemma_edge_split
C |- (!H. (!x. (((x IN (dart H)) /\ ((is_edge_split H) x)) ==> ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)))))))))
T c==> c/\ cIN f0 * part cdart f1 cis_edge_split f1 f0 c/\ c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c= * * part cedge f1 f0 * * part cUNION * * part cINSERT f0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0
D TRUTH
A |- T
T cT
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D o_THM
A |- (!f. (!g. (!x. (((f o g) x) = (f (g x))))))
T c= co f0 f1 f2 * f0 * f1 f2
D I_THM
A |- (!x. ((I x) = x))
T c= cI f0 f0
D Hypermap.NON_ZERO
A |- (!n. (~ ((SUC n) = (NUMERAL _0))))
T c~ c= cSUC f0 cNUMERAL c_0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.add0n
A |- (!n. (((NUMERAL _0) + n) = n))
T c= c+ cNUMERAL c_0 f0 f0
D LE_SUC_LT
A |- (!m. (!n. (((SUC m) <= n) = (m < n))))
T c= c<= cSUC f0 f1 c< f0 f1
D LT_SUC_LE
A |- (!m. (!n. ((m < (SUC n)) = (m <= n))))
T c= c< f0 cSUC f1 c<= f0 f1
D LT_SUC
A |- (!m. (!n. (((SUC m) < (SUC n)) = (m < n))))
T c= c< cSUC f0 cSUC f1 c< f0 f1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D Seq.gtS0
A |- (!n. ((NUMERAL _0) < (SUC n)))
T c< cNUMERAL c_0 cSUC f0
D LE_REFL
A |- (!n. (n <= n))
T c<= f0 f0
D LE_TRANS
A |- (!m. (!n. (!p. (((m <= n) /\ (n <= p)) ==> (m <= p)))))
T c==> c/\ c<= f0 f1 c<= f1 f2 c<= f0 f2
D LT_TRANS
A |- (!m. (!n. (!p. (((m < n) /\ (n < p)) ==> (m < p)))))
T c==> c/\ c< f0 f1 c< f1 f2 c< f0 f2
D LE_LT
A |- (!m. (!n. ((m <= n) = ((m < n) \/ (m = n)))))
T c= c<= f0 f1 c\/ c< f0 f1 c= f0 f1
D LT_NZ
A |- (!n. (((NUMERAL _0) < n) = (~ (n = (NUMERAL _0)))))
T c= c< cNUMERAL c_0 f0 c~ c= f0 cNUMERAL c_0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D IN
A |- (!P. (!x. ((x IN P) = (P x))))
T c= cIN f0 f1 * f1 f0
D EXTENSION
A |- (!s. (!t. ((s = t) = (!x. ((x IN s) = (x IN t))))))
T c= c= f0 f1 ! c= cIN b0 f0 cIN b0 f1
D Misc_defs_and_lemmas.IN_ELIM_THM'
A |- ((!P. (!x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) /\ ((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x))))))))
T c/\ ! ! c= cIN b1 * part cGSPEC / * b0 * part cSETSPEC b2 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 c/\ ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
D IN_UNION
A |- (!s. (!t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t))))))
T c= cIN f0 * * part cUNION f1 f2 c\/ cIN f0 f1 cIN f0 f2
D Hypermap.LT_PLUS
A |- (!n. (n < (SUC n)))
T c< f0 cSUC f0
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D Fan.POWER_1
A |- (!f. (((POWER f) (NUMERAL (BIT1 _0))) = f))
T c= * * part cPOWER f0 cNUMERAL cBIT1 c_0 f0
D Hypermap.edge_map_and_darts
A |- (!H. ((FINITE (dart H)) /\ ((permutes (edge_map H)) (dart H))))
T c/\ cFINITE * part cdart f0 cpermutes * part cedge_map f0 * part cdart f0
D Hypermap.edge
A |- (!H. (!x. (((edge H) x) = ((orbit_map (edge_map H)) x))))
T c= * * part cedge f0 f1 * * part corbit_map * part cedge_map f0 f1
D Hypermap.dart_nondegenerate
A |- (!H. (!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))))
T c= cdart_nondegenerate f0 f1 c/\ c~ c= cedge_map f0 f1 f1 c/\ c~ c= cnode_map f0 f1 f1 c~ c= cface_map f0 f1 f1
D Hypermap.COM_POWER_FUNCTION
A |- (!f. (!x. (!n. ((f (((POWER f) n) x)) = (((POWER f) (SUC n)) x)))))
T c= * f0 cPOWER f0 f1 f2 cPOWER f0 cSUC f1 f2
D Hypermap.POWER_FUNCTION
A |- (!f. (!x. (!n. ((((POWER f) n) (f x)) = (((POWER f) (SUC n)) x)))))
T c= cPOWER f0 f1 * f0 f2 cPOWER f0 cSUC f1 f2
D Hypermap.orbit_cyclic
A |- (!f. (!m. (!x. (((~ (m = (NUMERAL _0))) /\ ((((POWER f) m) x) = x)) ==> (((orbit_map f) x) = (GSPEC (\GEN%PVAR%5396. (?k. (((SETSPEC GEN%PVAR%5396) (k < m)) (((POWER f) k) x))))))))))
T c==> c/\ c~ c= f0 cNUMERAL c_0 c= cPOWER f1 f0 f2 f2 c= * * part corbit_map f1 f2 * part cGSPEC / c? / cSETSPEC b0 c< b1 f0 cPOWER f1 b1 f2
D Hypermap.edge_map_inverse_representation
A |- (!H. (!x. (!y. ((y = ((edge_map H) x)) = (x = ((inverse (edge_map H)) y))))))
T c= c= f0 cedge_map f1 f2 c= f2 cinverse * part cedge_map f1 f0
D Ssrnat.leqnSn
A |- (!n. (n <= (SUC n)))
T c<= f0 cSUC f0
D Hypermap.inverse_hypermap_maps
A |- (!H. (((inverse (edge_map H)) = ((node_map H) o (face_map H))) /\ (((inverse (node_map H)) = ((face_map H) o (edge_map H))) /\ ((inverse (face_map H)) = ((edge_map H) o (node_map H))))))
T c/\ c= * part cinverse * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 c/\ c= * part cinverse * part cnode_map f0 * * part co * part cface_map f0 * part cedge_map f0 c= * part cinverse * part cface_map f0 * * part co * part cedge_map f0 * part cnode_map f0
D Hypermap.lemma_inverse_maps_at_nondegenerate_dart
A |- (!H. (!x. (((dart_nondegenerate H) x) ==> ((~ (((inverse (edge_map H)) x) = x)) /\ ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x)))))))
T c==> cdart_nondegenerate f0 f1 c/\ c~ c= cinverse * part cedge_map f0 f1 f1 c/\ c~ c= cinverse * part cnode_map f0 f1 f1 c~ c= cinverse * part cface_map f0 f1 f1
D Hypermap.edge_map_walkup
A |- (!H. (!x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))))
T c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= f2 f1 c/\ c~ c= f2 cinverse * part cedge_map f0 f1 c~ c= f2 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f2
D Hypermap.lemma_def_inj_orbit
A |- (!p. (!x. (!n. ((((inj_orbit p) x) n) = (!i. (!j. (((i <= n) /\ (j < i)) ==> (~ ((((POWER p) i) x) = (((POWER p) j) x))))))))))
T c= cinj_orbit f0 f1 f2 ! ! c==> c/\ c<= b0 f2 c< b1 b0 c~ c= cPOWER f0 b0 f1 cPOWER f0 b1 f1
D Hypermap.lemma_segment_orbit
A |- (!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> (!m. ((m < (CARD ((orbit_map p) x))) ==> (((inj_orbit p) x) m)))))))
T c==> c/\ cFINITE f0 cpermutes f1 f0 ! c==> c< b0 cCARD * * part corbit_map f1 f2 cinj_orbit f1 f2 b0
D Hypermap.lemma_index_on_orbit
A |- (!s. (!p. (!x. (!y. (((FINITE s) /\ (((permutes p) s) /\ (y IN ((orbit_map p) x)))) ==> (?n. ((n < (CARD ((orbit_map p) x))) /\ (y = (((POWER p) n) x)))))))))
T c==> c/\ cFINITE f0 c/\ cpermutes f1 f0 cIN f2 * * part corbit_map f1 f3 c? / c/\ c< b0 cCARD * * part corbit_map f1 f3 c= f2 cPOWER f1 b0 f3
D Hypermap.is_edge_split
A |- (!H. (!x. (((is_edge_split H) x) = (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x))))))
T c= cis_edge_split f0 f1 c/\ cdart_nondegenerate f0 f1 cIN cnode_map f0 f1 * * part cedge f0 f1
D Hypermap.lemma_edge_identity
A |- (!H. (!x. (!y. ((y IN ((edge H) x)) ==> (((edge H) x) = ((edge H) y))))))
T c==> cIN f0 * * part cedge f1 f2 c= * * part cedge f1 f2 * * part cedge f1 f0
D Hypermap.lemma_walkup_support_edges
A |- (!H. (!x. (((x IN (dart H)) /\ ((dart_nondegenerate H) x)) ==> ((((edge H) x) UNION ((edge H) ((node_map H) x))) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))))))))
T c==> c/\ cIN f0 * part cdart f1 cdart_nondegenerate f1 f0 c= * * part cUNION * * part cedge f1 f0 * * part cedge f1 cnode_map f1 f0 * * part cUNION * * part cINSERT f0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0
D Hypermap.lemma_in_edge2
A |- (!H. (!x. (!n. ((((POWER (edge_map H)) n) x) IN ((edge H) x)))))
T cIN cPOWER * part cedge_map f0 f1 f2 * * part cedge f0 f2
D Hypermap.lemma_edge_cycle
A |- (!H. (!x. ((((POWER (edge_map H)) (CARD ((edge H) x))) x) = x)))
T c= cPOWER * part cedge_map f0 cCARD * * part cedge f0 f1 f1 f1
+ |- ((\s. (!p. (((FINITE s) /\ ((permutes p) s)) ==> (!x. (!m. ((m < (CARD ((orbit_map p) x))) ==> (((inj_orbit p) x) m))))))) s)
T * / ! c==> c/\ cFINITE b0 cpermutes b1 b0 ! ! c==> c< b3 cCARD * * part corbit_map b1 b2 cinj_orbit b1 b2 b3 f0
+ |- (((!x. ((I x) = x)) ==> ((\x. ((I x) = x)) x)) = ((\x. ((I x) = x)) x))
T c= c==> ! c= cI b0 b0 * / c= cI b0 b0 f0 * / c= cI b0 b0 f0
+ |- ((\H. (!x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))))) H)
T * / ! ! c/\ c= cedge_map cedge_walkup b0 b1 b1 b1 c/\ c==> c/\ c~ c= cnode_map b0 b1 b1 c~ c= cedge_map b0 b1 b1 c= cedge_map cedge_walkup b0 b1 cnode_map b0 b1 cedge_map b0 b1 c/\ c==> c/\ c~ c= cinverse * part cface_map b0 b1 b1 c~ c= cinverse * part cedge_map b0 b1 b1 c= cedge_map cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 cinverse * part cface_map b0 b1 c==> c/\ c~ c= b2 b1 c/\ c~ c= b2 cinverse * part cedge_map b0 b1 c~ c= b2 cnode_map b0 b1 c= cedge_map cedge_walkup b0 b1 b2 cedge_map b0 b2 f0
+ ((((POWER (edge_map H)) i) ((edge_map H) x)) = y) |- ((~ ((((POWER (edge_map H)) i) ((edge_map H) x)) = x)) = (~ (y = x)))
T c==> c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f3 c= c~ c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f2 c~ c= f3 f2
+ (~ (~ (k < (SUC d)))), (n = (SUC d)), ((SUC n) < (CARD ((edge H) x))) |- (~ ((((POWER (edge_map H)) (SUC (SUC d))) x) = (((POWER (edge_map H)) k) ((edge_map H) x))))
T c==> c~ c~ c< f0 cSUC f1 c==> c= f2 cSUC f1 c==> c< cSUC f2 cCARD * * part cedge f3 f4 c~ c= cPOWER * part cedge_map f3 cSUC cSUC f1 f4 cPOWER * part cedge_map f3 f0 cedge_map f3 f4
+ |- (((!H. (!x. (((x IN (dart H)) /\ ((dart_nondegenerate H) x)) ==> ((((edge H) x) UNION ((edge H) ((node_map H) x))) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)))))))) ==> ((\H. (!x. (((x IN (dart H)) /\ ((dart_nondegenerate H) x)) ==> ((((edge H) x) UNION ((edge H) ((node_map H) x))) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)))))))) H)) = ((\H. (!x. (((x IN (dart H)) /\ ((dart_nondegenerate H) x)) ==> ((((edge H) x) UNION ((edge H) ((node_map H) x))) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)))))))) H))
T c= c==> ! ! c==> c/\ cIN b1 * part cdart b0 cdart_nondegenerate b0 b1 c= * * part cUNION * * part cedge b0 b1 * * part cedge b0 cnode_map b0 b1 * * part cUNION * * part cINSERT b1 part cEMPTY * * part cUNION * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cedge cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 * / ! c==> c/\ cIN b1 * part cdart b0 cdart_nondegenerate b0 b1 c= * * part cUNION * * part cedge b0 b1 * * part cedge b0 cnode_map b0 b1 * * part cUNION * * part cINSERT b1 part cEMPTY * * part cUNION * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cedge cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 f0 * / ! c==> c/\ cIN b1 * part cdart b0 cdart_nondegenerate b0 b1 c= * * part cUNION * * part cedge b0 b1 * * part cedge b0 cnode_map b0 b1 * * part cUNION * * part cINSERT b1 part cEMPTY * * part cUNION * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cedge cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 f0
+ ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x))) |- ((((edge_map ((edge_walkup H) x)) (((POWER (edge_map H)) i) ((edge_map H) x))) = ((edge_map H) (((POWER (edge_map H)) i) ((edge_map H) x)))) = (((edge_map ((edge_walkup H) x)) (((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x))) = ((edge_map H) (((POWER (edge_map H)) i) ((edge_map H) x)))))
T c==> c= cPOWER * part cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f1 cPOWER * part cedge_map f0 f2 cedge_map f0 f1 c= c= cedge_map cedge_walkup f0 f1 cPOWER * part cedge_map f0 f2 cedge_map f0 f1 cedge_map f0 cPOWER * part cedge_map f0 f2 cedge_map f0 f1 c= cedge_map cedge_walkup f0 f1 cPOWER * part cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f1 cedge_map f0 cPOWER * part cedge_map f0 f2 cedge_map f0 f1
+ ((((POWER (edge_map H)) i) ((edge_map H) x)) = y) |- ((~ (y = (((POWER (edge_map H)) (SUC d)) x))) = (~ ((((POWER (edge_map H)) i) ((edge_map H) x)) = (((POWER (edge_map H)) (SUC d)) x))))
T c==> c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f3 c= c~ c= f3 cPOWER * part cedge_map f0 cSUC f4 f2 c~ c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 cPOWER * part cedge_map f0 cSUC f4 f2
+ |- (((!q'. (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) = p') ==> ((p' ==> ((~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x))) = q')) ==> (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x)))) = (p' ==> q'))))) ==> ((\q'. (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) = p') ==> ((p' ==> ((~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x))) = q')) ==> (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x)))) = (p' ==> q'))))) q')) = ((\q'. (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) = p') ==> ((p' ==> ((~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x))) = q')) ==> (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 f4 c==> c==> f4 c= c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 b0 c= c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 c==> f4 b0 * / c==> c= c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 f4 c==> c==> f4 c= c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 b0 c= c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 c==> f4 b0 f5 * / c==> c= c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 f4 c==> c==> f4 c= c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 b0 c= c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 c==> f4 b0 f5
+ |- (((!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))) ==> ((\x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))) x)) = ((\x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))) x))
T c= c==> ! c= cdart_nondegenerate f0 b0 c/\ c~ c= cedge_map f0 b0 b0 c/\ c~ c= cnode_map f0 b0 b0 c~ c= cface_map f0 b0 b0 * / c= cdart_nondegenerate f0 b0 c/\ c~ c= cedge_map f0 b0 b0 c/\ c~ c= cnode_map f0 b0 b0 c~ c= cface_map f0 b0 b0 f1 * / c= cdart_nondegenerate f0 b0 c/\ c~ c= cedge_map f0 b0 b0 c/\ c~ c= cnode_map f0 b0 b0 c~ c= cface_map f0 b0 b0 f1
+ |- ((\m. (!n. (!p. (((m < n) /\ (n < p)) ==> (m < p))))) m)
T * / ! ! c==> c/\ c< b0 b1 c< b1 b2 c< b0 b2 f0
+ |- ((t \/ F) = t)
T c= c\/ f0 cF f0
+ ((x IN (dart H)) /\ (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x)))), (x IN (dart H)) |- ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))))
T c==> c/\ cIN f0 * part cdart f1 c/\ cdart_nondegenerate f1 f0 cIN cnode_map f1 f0 * * part cedge f1 f0 c==> cIN f0 * part cdart f1 c/\ c~ cIN cinverse * part cface_map f1 f0 * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 c= * * part cedge f1 f0 * * part cUNION * * part cINSERT f0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cface_map f1 f0
+ |- ((\H. (!x. (((x IN (dart H)) /\ ((dart_nondegenerate H) x)) ==> ((((edge H) x) UNION ((edge H) ((node_map H) x))) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)))))))) H)
T * / ! c==> c/\ cIN b1 * part cdart b0 cdart_nondegenerate b0 b1 c= * * part cUNION * * part cedge b0 b1 * * part cedge b0 cnode_map b0 b1 * * part cUNION * * part cINSERT b1 part cEMPTY * * part cUNION * * part cedge cedge_walkup b0 b1 cnode_map b0 b1 * * part cedge cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 f0
+ (((node_map H) x) = (((POWER (edge_map H)) n) x)), (n = (SUC d)), ((SUC n) < (CARD ((edge H) x))) |- (!i. ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x)))))
T c==> c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c==> c= f2 cSUC f3 c==> c< cSUC f2 cCARD * * part cedge f0 f1 ! c==> c<= b0 f3 c= cPOWER * part cedge_map cedge_walkup f0 f1 b0 cedge_map f0 f1 cPOWER * part cedge_map f0 b0 cedge_map f0 f1
+ ((((edge_map H) o (node_map H)) x) = ((edge_map H) ((node_map H) x))) |- (((edge_map H) ((node_map H) x)) = (((edge_map H) o (node_map H)) x))
T c==> c= co * part cedge_map f0 * part cnode_map f0 f1 cedge_map f0 cnode_map f0 f1 c= cedge_map f0 cnode_map f0 f1 co * part cedge_map f0 * part cnode_map f0 f1
+ (!i. ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x))))), (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (n = (SUC d)), (((edge_walkup H) x) = G), ((SUC n) < (CARD ((edge H) x))) |- ((((edge_walkup H) x) = G) /\ ((((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)) ==> (((((POWER (edge_map ((edge_walkup H) x))) (SUC d)) ((edge_map H) x)) = ((edge_map ((edge_walkup H) x)) ((node_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))))
T c==> ! c==> c<= b0 f0 c= cPOWER * part cedge_map cedge_walkup f1 f2 b0 cedge_map f1 f2 cPOWER * part cedge_map f1 b0 cedge_map f1 f2 c==> c= cinverse * part cface_map f1 f2 cPOWER * part cedge_map f1 cSUC f3 f2 c==> c= f3 cSUC f0 c==> c= cedge_walkup f1 f2 f4 c==> c< cSUC f3 cCARD * * part cedge f1 f2 c/\ c= cedge_walkup f1 f2 f4 c==> c= cedge_map cedge_walkup f1 f2 cnode_map f1 f2 cedge_map f1 f2 c==> c= cPOWER * part cedge_map cedge_walkup f1 f2 cSUC f0 cedge_map f1 f2 cedge_map cedge_walkup f1 f2 cnode_map f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
+ (((node_map H) x) = (((POWER (edge_map H)) n) x)), (n = (SUC d)), ((SUC n) < (CARD ((edge H) x))) |- ((((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x)))) ==> (((SUC i) <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) (SUC i)) ((edge_map H) x)) = (((POWER (edge_map H)) (SUC i)) ((edge_map H) x))))) = T)
T c==> c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c==> c= f2 cSUC f3 c==> c< cSUC f2 cCARD * * part cedge f0 f1 c= c==> c==> c<= f4 f3 c= cPOWER * part cedge_map cedge_walkup f0 f1 f4 cedge_map f0 f1 cPOWER * part cedge_map f0 f4 cedge_map f0 f1 c==> c<= cSUC f4 f3 c= cPOWER * part cedge_map cedge_walkup f0 f1 cSUC f4 cedge_map f0 f1 cPOWER * part cedge_map f0 cSUC f4 cedge_map f0 f1 cT
+ |- (((!x. ((((POWER (edge_map H)) (CARD ((edge H) x))) x) = x)) ==> ((\x. ((((POWER (edge_map H)) (CARD ((edge H) x))) x) = x)) x)) = ((\x. ((((POWER (edge_map H)) (CARD ((edge H) x))) x) = x)) x))
T c= c==> ! c= cPOWER * part cedge_map f0 cCARD * * part cedge f0 b0 b0 b0 * / c= cPOWER * part cedge_map f0 cCARD * * part cedge f0 b0 b0 b0 f1 * / c= cPOWER * part cedge_map f0 cCARD * * part cedge f0 b0 b0 b0 f1
+ |- ((\x. ((x IN (GSPEC (\v. (P (SETSPEC v))))) = (P (\p. (\t. (p /\ (x = t))))))) x)
T * / c= cIN b0 * part cGSPEC / * f0 * part cSETSPEC b1 * f0 / / c/\ b1 c= b0 b2 f1
+ ((SUC i) <= d) |- ((((SUC i) < (SUC d)) ==> ((((SUC i) < (CARD ((edge H) x))) ==> (((inj_orbit (edge_map H)) x) (SUC i))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = x)))) = ((((SUC i) < (CARD ((edge H) x))) ==> (((inj_orbit (edge_map H)) x) (SUC i))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = x))))
T c==> c<= cSUC f0 f1 c= c==> c< cSUC f0 cSUC f1 c==> c==> c< cSUC f0 cCARD * * part cedge f2 f3 cinj_orbit * part cedge_map f2 f3 cSUC f0 c~ c= cPOWER * part cedge_map f2 cSUC f0 f3 f3 c==> c==> c< cSUC f0 cCARD * * part cedge f2 f3 cinj_orbit * part cedge_map f2 f3 cSUC f0 c~ c= cPOWER * part cedge_map f2 cSUC f0 f3 f3
+ |- ((\x. (((orbit_map (edge_map H)) x) = ((edge H) x))) x)
T * / c= * * part corbit_map * part cedge_map f0 b0 * * part cedge f0 b0 f1
+ |- (((((edge_map H) ((node_map H) x)) = (((POWER (edge_map H)) (SUC n)) x)) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))) = ((((edge_map H) ((node_map H) x)) = ((edge_map H) (((POWER (edge_map H)) n) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))))
T c= c==> c= cedge_map f0 cnode_map f0 f1 cPOWER * part cedge_map f0 cSUC f2 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c==> c= cedge_map f0 cnode_map f0 f1 cedge_map f0 cPOWER * part cedge_map f0 f2 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- (~ (x = y))
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c~ c= f1 f0
+ (((inj_orbit (edge_map H)) x) (SUC (SUC i))) |- ((((inj_orbit (edge_map H)) x) (SUC (SUC i))) /\ (~ (x = (((POWER (edge_map H)) (SUC (SUC i))) x))))
T c==> cinj_orbit * part cedge_map f0 f1 cSUC cSUC f2 c/\ cinj_orbit * part cedge_map f0 f1 cSUC cSUC f2 c~ c= f1 cPOWER * part cedge_map f0 cSUC cSUC f2 f1
+ |- (T = (!x'. ((x' IN ((edge H) x)) = (x' IN (((edge H) x) UNION ((edge H) x))))))
T c= cT ! c= cIN b0 * * part cedge f0 f1 cIN b0 * * part cUNION * * part cedge f0 f1 * * part cedge f0 f1
+ |- ((\x. (!y. ((y IN ((edge H) x)) ==> (((edge H) x) = ((edge H) y))))) x)
T * / ! c==> cIN b1 * * part cedge f0 b0 c= * * part cedge f0 b0 * * part cedge f0 b1 f1
+ (!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> (!m. ((m < (CARD ((orbit_map p) x))) ==> (((inj_orbit p) x) m))))))) |- ((\p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> (!m. ((m < (CARD ((orbit_map p) x))) ==> (((inj_orbit p) x) m)))))) p)
T c==> ! ! ! c==> c/\ cFINITE b0 cpermutes b1 b0 ! c==> c< b3 cCARD * * part corbit_map b1 b2 cinj_orbit b1 b2 b3 * / ! c==> c/\ cFINITE f0 cpermutes b0 f0 ! c==> c< b2 cCARD * * part corbit_map b0 b1 cinj_orbit b0 b1 b2 f1
+ ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x))) |- ((((edge_map ((edge_walkup H) x)) (((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x))) = ((edge_map H) (((POWER (edge_map H)) i) ((edge_map H) x)))) = (((edge_map ((edge_walkup H) x)) (((POWER (edge_map H)) i) ((edge_map H) x))) = ((edge_map H) (((POWER (edge_map H)) i) ((edge_map H) x)))))
T c==> c= cPOWER * part cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f1 cPOWER * part cedge_map f0 f2 cedge_map f0 f1 c= c= cedge_map cedge_walkup f0 f1 cPOWER * part cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f1 cedge_map f0 cPOWER * part cedge_map f0 f2 cedge_map f0 f1 c= cedge_map cedge_walkup f0 f1 cPOWER * part cedge_map f0 f2 cedge_map f0 f1 cedge_map f0 cPOWER * part cedge_map f0 f2 cedge_map f0 f1
+ |- ((\n. ((m <= n) = (m < (SUC n)))) n)
T * / c= c<= f0 b0 c< f0 cSUC b0 f1
+ ((((POWER (edge_map G)) (SUC d)) ((edge_map H) x)) = ((edge_map H) x)) |- (((((orbit_map (edge_map G)) ((edge_map H) x)) = (GSPEC (\GEN%PVAR%5396. (?k. (((SETSPEC GEN%PVAR%5396) (k < (SUC d))) (((POWER (edge_map G)) k) ((edge_map H) x))))))) ==> (~ (((inverse (face_map H)) x) IN ((edge G) ((edge_map H) x))))) = (~ (((inverse (face_map H)) x) IN ((edge G) ((edge_map H) x)))))
T c==> c= cPOWER * part cedge_map f0 cSUC f1 cedge_map f2 f3 cedge_map f2 f3 c= c==> c= * * part corbit_map * part cedge_map f0 cedge_map f2 f3 * part cGSPEC / c? / cSETSPEC b0 c< b1 cSUC f1 cPOWER * part cedge_map f0 b1 cedge_map f2 f3 c~ cIN cinverse * part cface_map f2 f3 * * part cedge f0 cedge_map f2 f3 c~ cIN cinverse * part cface_map f2 f3 * * part cedge f0 cedge_map f2 f3
+ ((dart_nondegenerate H) x) |- (((~ (((inverse (face_map H)) x) = x)) ==> ((((inverse (face_map H)) x) = x) = F)) = ((((inverse (face_map H)) x) = x) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= cinverse * part cface_map f0 f1 f1 c= c= cinverse * part cface_map f0 f1 f1 cF c= c= cinverse * part cface_map f0 f1 f1 cF
+ |- ((((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) = (~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x)))) ==> (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> ((~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x))) = q')) ==> (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x)))) = ((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> q')))) = (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> ((~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x))) = q')) ==> (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x)))) = ((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> q'))))
T c= c==> c= c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c==> c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c= c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 f4 c= c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 f4 c==> c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c= c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 f4 c= c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 f4
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ |- (((~ ((((POWER (edge_map H)) (SUC (SUC i))) x) = x)) = p') ==> ((p' ==> ((~ (x = (((POWER (edge_map H)) (SUC (SUC i))) x))) = q')) ==> (((~ ((((POWER (edge_map H)) (SUC (SUC i))) x) = x)) ==> (~ (x = (((POWER (edge_map H)) (SUC (SUC i))) x)))) = (p' ==> q'))))
T c==> c= c~ c= cPOWER * part cedge_map f0 cSUC cSUC f1 f2 f2 f3 c==> c==> f3 c= c~ c= f2 cPOWER * part cedge_map f0 cSUC cSUC f1 f2 f4 c= c==> c~ c= cPOWER * part cedge_map f0 cSUC cSUC f1 f2 f2 c~ c= f2 cPOWER * part cedge_map f0 cSUC cSUC f1 f2 c==> f3 f4
- ((dart_nondegenerate H) x) |- (((~ (x = ((edge_map H) x))) ==> ((x = ((edge_map H) x)) = F)) = ((x = ((edge_map H) x)) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= f1 cedge_map f0 f1 c= c= f1 cedge_map f0 f1 cF c= c= f1 cedge_map f0 f1 cF
+ (!i. ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x))))), (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), ((((POWER (edge_map ((edge_walkup H) x))) d) ((edge_map H) x)) = ((node_map H) x)), (n = (SUC d)), ((SUC n) < (CARD ((edge H) x))), ((dart_nondegenerate H) x) |- (((((POWER (edge_map ((edge_walkup H) x))) d) ((edge_map H) x)) = ((node_map H) x)) /\ (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> ! c==> c<= b0 f0 c= cPOWER * part cedge_map cedge_walkup f1 f2 b0 cedge_map f1 f2 cPOWER * part cedge_map f1 b0 cedge_map f1 f2 c==> c= cinverse * part cface_map f1 f2 cPOWER * part cedge_map f1 cSUC f3 f2 c==> c= cPOWER * part cedge_map cedge_walkup f1 f2 f0 cedge_map f1 f2 cnode_map f1 f2 c==> c= f3 cSUC f0 c==> c< cSUC f3 cCARD * * part cedge f1 f2 c==> cdart_nondegenerate f1 f2 c/\ c= cPOWER * part cedge_map cedge_walkup f1 f2 f0 cedge_map f1 f2 cnode_map f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
- |- ((\x. ((x IN (\y. (p y))) = (p x))) x)
T * / c= cIN b0 / * f0 b1 * f0 b0 f1
+ |- (((!x. (((x IN (dart H)) /\ ((dart_nondegenerate H) x)) ==> ((((edge H) x) UNION ((edge H) ((node_map H) x))) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))))))) ==> ((\x. (((x IN (dart H)) /\ ((dart_nondegenerate H) x)) ==> ((((edge H) x) UNION ((edge H) ((node_map H) x))) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))))))) x)) = ((\x. (((x IN (dart H)) /\ ((dart_nondegenerate H) x)) ==> ((((edge H) x) UNION ((edge H) ((node_map H) x))) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))))))) x))
T c= c==> ! c==> c/\ cIN b0 * part cdart f0 cdart_nondegenerate f0 b0 c= * * part cUNION * * part cedge f0 b0 * * part cedge f0 cnode_map f0 b0 * * part cUNION * * part cINSERT b0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 b0 cnode_map f0 b0 * * part cedge cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 * / c==> c/\ cIN b0 * part cdart f0 cdart_nondegenerate f0 b0 c= * * part cUNION * * part cedge f0 b0 * * part cedge f0 cnode_map f0 b0 * * part cUNION * * part cINSERT b0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 b0 cnode_map f0 b0 * * part cedge cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 f1 * / c==> c/\ cIN b0 * part cdart f0 cdart_nondegenerate f0 b0 c= * * part cUNION * * part cedge f0 b0 * * part cedge f0 cnode_map f0 b0 * * part cUNION * * part cINSERT b0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 b0 cnode_map f0 b0 * * part cedge cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 f1
+ |- ((\p. (((m <= n) /\ (n <= p)) ==> (m <= p))) p)
T * / c==> c/\ c<= f0 f1 c<= f1 b0 c<= f0 b0 f2
+ (!i. ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x))))) |- ((((((POWER (edge_map ((edge_walkup H) x))) d) ((edge_map H) x)) = (((POWER (edge_map H)) d) ((edge_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))) = (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> ! c==> c<= b0 f0 c= cPOWER * part cedge_map cedge_walkup f1 f2 b0 cedge_map f1 f2 cPOWER * part cedge_map f1 b0 cedge_map f1 f2 c= c==> c= cPOWER * part cedge_map cedge_walkup f1 f2 f0 cedge_map f1 f2 cPOWER * part cedge_map f1 f0 cedge_map f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
+ |- (((NUMERAL _0) < (SUC n)) = T)
T c= c< cNUMERAL c_0 cSUC f0 cT
+ |- (((((SUC i) < (CARD ((orbit_map (edge_map H)) x))) ==> (((inj_orbit (edge_map H)) x) (SUC i))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = x))) = (~ ((((POWER (edge_map H)) (SUC i)) x) = x)))
T c= c==> c==> c< cSUC f0 cCARD * * part corbit_map * part cedge_map f1 f2 cinj_orbit * part cedge_map f1 f2 cSUC f0 c~ c= cPOWER * part cedge_map f1 cSUC f0 f2 f2 c~ c= cPOWER * part cedge_map f1 cSUC f0 f2 f2
+ (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), ((SUC n) = (CARD ((edge H) x))), ((dart_nondegenerate H) x) |- (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))
T c==> c= cinverse * part cface_map f0 f1 cPOWER * part cedge_map f0 cSUC f2 f1 c==> c= cSUC f2 cCARD * * part cedge f0 f1 c==> cdart_nondegenerate f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ |- (T = (((((SUC i) <= (SUC i)) /\ ((NUMERAL _0) < (SUC i))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (NUMERAL _0)) x)))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = x))))
T c= cT c==> c==> c/\ c<= cSUC f0 cSUC f0 c< cNUMERAL c_0 cSUC f0 c~ c= cPOWER * part cedge_map f1 cSUC f0 f2 cPOWER * part cedge_map f1 cNUMERAL c_0 f2 c~ c= cPOWER * part cedge_map f1 cSUC f0 f2 f2
- (~ ((SUC n) = (CARD ((edge H) x)))) |- (((CARD ((edge H) x)) = (SUC n)) = F)
T c==> c~ c= cSUC f0 cCARD * * part cedge f1 f2 c= c= cCARD * * part cedge f1 f2 cSUC f0 cF
+ (~ ((SUC n) = (CARD ((edge H) x)))), (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (((node_map H) x) = (((POWER (edge_map H)) n) x)), ((dart_nondegenerate H) x) |- (((SUC n) <= (CARD ((edge H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> c~ c= cSUC f0 cCARD * * part cedge f1 f2 c==> c= cinverse * part cface_map f1 f2 cPOWER * part cedge_map f1 cSUC f0 f2 c==> c= cnode_map f1 f2 cPOWER * part cedge_map f1 f0 f2 c==> cdart_nondegenerate f1 f2 c==> c<= cSUC f0 cCARD * * part cedge f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
+ (~ (y = ((node_map H) x))), ((((POWER (edge_map H)) i) ((edge_map H) x)) = y), (n = (SUC d)), ((SUC i) <= d), ((SUC n) < (CARD ((edge H) x))) |- (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))
T c==> c~ c= f0 cnode_map f1 f2 c==> c= cPOWER * part cedge_map f1 f3 cedge_map f1 f2 f0 c==> c= f4 cSUC f5 c==> c<= cSUC f3 f5 c==> c< cSUC f4 cCARD * * part cedge f1 f2 c= cedge_map cedge_walkup f1 f2 f0 cedge_map f1 f0
+ ((dart_nondegenerate H) x) |- (((n < (CARD ((orbit_map (edge_map H)) x))) /\ (((node_map H) x) = (((POWER (edge_map H)) n) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> cdart_nondegenerate f0 f1 c==> c/\ c< f2 cCARD * * part corbit_map * part cedge_map f0 f1 c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ |- ((\P. ((~ (?x. (P x))) = (!x. (~ (P x))))) P)
T * / c= c~ c? / * b0 b1 ! c~ * b0 b1 f0
+ |- ((((FINITE (dart H)) /\ ((permutes (edge_map H)) (dart H))) ==> ((((node_map H) x) IN ((orbit_map (edge_map H)) x)) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))) = ((((node_map H) x) IN ((orbit_map (edge_map H)) x)) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))))
T c= c==> c/\ cFINITE * part cdart f0 cpermutes * part cedge_map f0 * part cdart f0 c==> cIN cnode_map f0 f1 * * part corbit_map * part cedge_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c==> cIN cnode_map f0 f1 * * part corbit_map * part cedge_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)), (x IN (dart H)), (((node_map H) x) IN ((edge H) x)), ((dart_nondegenerate H) x) |- ((((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) IN ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))) ==> (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))))
T c==> c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> cIN f1 * part cdart f0 c==> cIN cnode_map f0 f1 * * part cedge f0 f1 c==> cdart_nondegenerate f0 f1 c==> cIN cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 c= * * part cedge f0 f1 * * part cUNION * * part cINSERT f1 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1
- |- ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x)))))
T c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
+ ((t1 /\ (t2 /\ t3)) = ((t1 /\ t2) /\ t3)) |- (((t1 /\ t2) /\ t3) = (t1 /\ (t2 /\ t3)))
T c==> c= c/\ f0 c/\ f1 f2 c/\ c/\ f0 f1 f2 c= c/\ c/\ f0 f1 f2 c/\ f0 c/\ f1 f2
+ |- ((((node_map H) o (face_map H)) = (inverse (edge_map H))) /\ ((((face_map H) o (edge_map H)) = (inverse (node_map H))) /\ (((edge_map H) o (node_map H)) = (inverse (face_map H)))))
T c/\ c= * * part co * part cnode_map f0 * part cface_map f0 * part cinverse * part cedge_map f0 c/\ c= * * part co * part cface_map f0 * part cedge_map f0 * part cinverse * part cnode_map f0 c= * * part co * part cedge_map f0 * part cnode_map f0 * part cinverse * part cface_map f0
+ (((node_map H) x) = (((POWER (edge_map H)) n) x)), (n = (SUC d)), ((SUC i) <= d), ((SUC n) < (CARD ((edge H) x))) |- ((?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) ==> (((edge_map ((edge_walkup H) x)) (((POWER (edge_map H)) i) ((edge_map H) x))) = ((edge_map H) (((POWER (edge_map H)) i) ((edge_map H) x)))))
T c==> c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c==> c= f2 cSUC f3 c==> c<= cSUC f4 f3 c==> c< cSUC f2 cCARD * * part cedge f0 f1 c==> c? / c= cPOWER * part cedge_map f0 f4 cedge_map f0 f1 b0 c= cedge_map cedge_walkup f0 f1 cPOWER * part cedge_map f0 f4 cedge_map f0 f1 cedge_map f0 cPOWER * part cedge_map f0 f4 cedge_map f0 f1
+ (((node_map H) x) = (((POWER (edge_map H)) n) x)), (n = (SUC d)), ((SUC i) <= d), ((SUC n) < (CARD ((edge H) x))) |- (((edge_map ((edge_walkup H) x)) (((POWER (edge_map H)) i) ((edge_map H) x))) = ((edge_map H) (((POWER (edge_map H)) i) ((edge_map H) x))))
T c==> c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c==> c= f2 cSUC f3 c==> c<= cSUC f4 f3 c==> c< cSUC f2 cCARD * * part cedge f0 f1 c= cedge_map cedge_walkup f0 f1 cPOWER * part cedge_map f0 f4 cedge_map f0 f1 cedge_map f0 cPOWER * part cedge_map f0 f4 cedge_map f0 f1
+ ((dart_nondegenerate H) x) |- (((FINITE (dart H)) /\ ((permutes (edge_map H)) (dart H))) ==> ((((node_map H) x) IN ((orbit_map (edge_map H)) x)) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))))
T c==> cdart_nondegenerate f0 f1 c==> c/\ cFINITE * part cdart f0 cpermutes * part cedge_map f0 * part cdart f0 c==> cIN cnode_map f0 f1 * * part corbit_map * part cedge_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ (((node_map H) x) = (((POWER (edge_map H)) n) x)), (n = (SUC d)), ((SUC i) <= d), ((SUC n) < (CARD ((edge H) x))), ((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) y) |- (((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) y) /\ (((edge_map ((edge_walkup H) x)) (((POWER (edge_map H)) i) ((edge_map H) x))) = ((edge_map H) (((POWER (edge_map H)) i) ((edge_map H) x)))))
T c==> c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c==> c= f2 cSUC f3 c==> c<= cSUC f4 f3 c==> c< cSUC f2 cCARD * * part cedge f0 f1 c==> * / c= cPOWER * part cedge_map f0 f4 cedge_map f0 f1 b0 f5 c/\ * / c= cPOWER * part cedge_map f0 f4 cedge_map f0 f1 b0 f5 c= cedge_map cedge_walkup f0 f1 cPOWER * part cedge_map f0 f4 cedge_map f0 f1 cedge_map f0 cPOWER * part cedge_map f0 f4 cedge_map f0 f1
+ |- ((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x))))
T c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2
+ (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (((node_map H) x) = (((POWER (edge_map H)) n) x)), (n < (CARD ((orbit_map (edge_map H)) x))), ((dart_nondegenerate H) x) |- (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))
T c==> c= cinverse * part cface_map f0 f1 cPOWER * part cedge_map f0 cSUC f2 f1 c==> c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c==> c< f2 cCARD * * part corbit_map * part cedge_map f0 f1 c==> cdart_nondegenerate f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ |- ((~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x))) = (~ ((((POWER (edge_map H)) i) ((edge_map H) x)) = (((POWER (edge_map H)) (SUC d)) x))))
T c= c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c~ c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 cPOWER * part cedge_map f0 cSUC f3 f2
+ |- ((SUC d) < (SUC (SUC d)))
T c< cSUC f0 cSUC cSUC f0
+ (((inj_orbit (edge_map H)) x) (SUC (SUC d))) |- ((((SUC (SUC d)) <= (SUC (SUC d))) /\ ((SUC k) < (SUC (SUC d)))) ==> (~ ((((POWER (edge_map H)) (SUC (SUC d))) x) = (((POWER (edge_map H)) (SUC k)) x))))
T c==> cinj_orbit * part cedge_map f0 f1 cSUC cSUC f2 c==> c/\ c<= cSUC cSUC f2 cSUC cSUC f2 c< cSUC f3 cSUC cSUC f2 c~ c= cPOWER * part cedge_map f0 cSUC cSUC f2 f1 cPOWER * part cedge_map f0 cSUC f3 f1
+ ((\n. ((n < (CARD ((orbit_map (edge_map H)) x))) /\ (((node_map H) x) = (((POWER (edge_map H)) n) x)))) n) |- ((((n < (CARD ((orbit_map (edge_map H)) x))) /\ (((node_map H) x) = (((POWER (edge_map H)) n) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))) = (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> * / c/\ c< b0 cCARD * * part corbit_map * part cedge_map f0 f1 c= cnode_map f0 f1 cPOWER * part cedge_map f0 b0 f1 f2 c= c==> c/\ c< f2 cCARD * * part corbit_map * part cedge_map f0 f1 c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ ((dart_nondegenerate H) x) |- (((~ (((inverse (edge_map H)) x) = x)) ==> ((((inverse (edge_map H)) x) = x) = F)) = ((((inverse (edge_map H)) x) = x) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= cinverse * part cedge_map f0 f1 f1 c= c= cinverse * part cedge_map f0 f1 f1 cF c= c= cinverse * part cedge_map f0 f1 f1 cF
+ (((node_map H) x) IN ((edge H) x)) |- (((edge H) ((node_map H) x)) = ((edge H) x))
T c==> cIN cnode_map f0 f1 * * part cedge f0 f1 c= * * part cedge f0 cnode_map f0 f1 * * part cedge f0 f1
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- ((((node_map H) x) = y) = F)
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c= c= cnode_map f2 f1 f0 cF
- (x = ((inverse (edge_map H)) x)) |- (((inverse (edge_map H)) x) = x)
T c==> c= f0 cinverse * part cedge_map f1 f0 c= cinverse * part cedge_map f1 f0 f0
- ((((POWER (edge_map H)) i) ((edge_map H) x)) = y) |- ((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) y)
T c==> c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f3 * / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 f3
+ |- (((!x. (!n. ((((POWER f) (SUC n)) x) = (f (((POWER f) n) x))))) ==> ((\x. (!n. ((((POWER f) (SUC n)) x) = (f (((POWER f) n) x))))) x)) = ((\x. (!n. ((((POWER f) (SUC n)) x) = (f (((POWER f) n) x))))) x))
T c= c==> ! ! c= cPOWER f0 cSUC b1 b0 * f0 cPOWER f0 b1 b0 * / ! c= cPOWER f0 cSUC b1 b0 * f0 cPOWER f0 b1 b0 f1 * / ! c= cPOWER f0 cSUC b1 b0 * f0 cPOWER f0 b1 b0 f1
+ |- (((!H. ((((node_map H) o (face_map H)) = (inverse (edge_map H))) /\ ((((face_map H) o (edge_map H)) = (inverse (node_map H))) /\ (((edge_map H) o (node_map H)) = (inverse (face_map H)))))) ==> ((\H. ((((node_map H) o (face_map H)) = (inverse (edge_map H))) /\ ((((face_map H) o (edge_map H)) = (inverse (node_map H))) /\ (((edge_map H) o (node_map H)) = (inverse (face_map H)))))) H)) = ((\H. ((((node_map H) o (face_map H)) = (inverse (edge_map H))) /\ ((((face_map H) o (edge_map H)) = (inverse (node_map H))) /\ (((edge_map H) o (node_map H)) = (inverse (face_map H)))))) H))
T c= c==> ! c/\ c= * * part co * part cnode_map b0 * part cface_map b0 * part cinverse * part cedge_map b0 c/\ c= * * part co * part cface_map b0 * part cedge_map b0 * part cinverse * part cnode_map b0 c= * * part co * part cedge_map b0 * part cnode_map b0 * part cinverse * part cface_map b0 * / c/\ c= * * part co * part cnode_map b0 * part cface_map b0 * part cinverse * part cedge_map b0 c/\ c= * * part co * part cface_map b0 * part cedge_map b0 * part cinverse * part cnode_map b0 c= * * part co * part cedge_map b0 * part cnode_map b0 * part cinverse * part cface_map b0 f0 * / c/\ c= * * part co * part cnode_map b0 * part cface_map b0 * part cinverse * part cedge_map b0 c/\ c= * * part co * part cface_map b0 * part cedge_map b0 * part cinverse * part cnode_map b0 c= * * part co * part cedge_map b0 * part cnode_map b0 * part cinverse * part cface_map b0 f0
+ (((node_map H) x) = (((POWER (edge_map H)) n) x)), ((((POWER (edge_map H)) i) ((edge_map H) x)) = y), (n = (SUC d)), ((SUC i) <= d), ((SUC n) < (CARD ((edge H) x))) |- (((((POWER (edge_map H)) i) ((edge_map H) x)) = y) /\ (((edge_map ((edge_walkup H) x)) (((POWER (edge_map H)) i) ((edge_map H) x))) = ((edge_map H) (((POWER (edge_map H)) i) ((edge_map H) x)))))
T c==> c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c==> c= cPOWER * part cedge_map f0 f3 cedge_map f0 f1 f4 c==> c= f2 cSUC f5 c==> c<= cSUC f3 f5 c==> c< cSUC f2 cCARD * * part cedge f0 f1 c/\ c= cPOWER * part cedge_map f0 f3 cedge_map f0 f1 f4 c= cedge_map cedge_walkup f0 f1 cPOWER * part cedge_map f0 f3 cedge_map f0 f1 cedge_map f0 cPOWER * part cedge_map f0 f3 cedge_map f0 f1
+ (!i. ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x))))), (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (n = (SUC d)), ((SUC n) < (CARD ((edge H) x))), ((\G. (((edge_walkup H) x) = G)) G) |- (((\G. (((edge_walkup H) x) = G)) G) /\ ((((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)) ==> (((((POWER (edge_map ((edge_walkup H) x))) (SUC d)) ((edge_map H) x)) = ((edge_map ((edge_walkup H) x)) ((node_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))))
T c==> ! c==> c<= b0 f0 c= cPOWER * part cedge_map cedge_walkup f1 f2 b0 cedge_map f1 f2 cPOWER * part cedge_map f1 b0 cedge_map f1 f2 c==> c= cinverse * part cface_map f1 f2 cPOWER * part cedge_map f1 cSUC f3 f2 c==> c= f3 cSUC f0 c==> c< cSUC f3 cCARD * * part cedge f1 f2 c==> * / c= cedge_walkup f1 f2 b0 f4 c/\ * / c= cedge_walkup f1 f2 b0 f4 c==> c= cedge_map cedge_walkup f1 f2 cnode_map f1 f2 cedge_map f1 f2 c==> c= cPOWER * part cedge_map cedge_walkup f1 f2 cSUC f0 cedge_map f1 f2 cedge_map cedge_walkup f1 f2 cnode_map f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
+ (((inj_orbit (edge_map H)) x) (SUC (SUC i))) |- ((((SUC (SUC i)) <= (SUC (SUC i))) /\ ((NUMERAL _0) < (SUC (SUC i)))) ==> (~ ((((POWER (edge_map H)) (SUC (SUC i))) x) = (((POWER (edge_map H)) (NUMERAL _0)) x))))
T c==> cinj_orbit * part cedge_map f0 f1 cSUC cSUC f2 c==> c/\ c<= cSUC cSUC f2 cSUC cSUC f2 c< cNUMERAL c_0 cSUC cSUC f2 c~ c= cPOWER * part cedge_map f0 cSUC cSUC f2 f1 cPOWER * part cedge_map f0 cNUMERAL c_0 f1
+ |- (((!x. (((edge_map H) ((node_map H) x)) = (((edge_map H) o (node_map H)) x))) ==> ((\x. (((edge_map H) ((node_map H) x)) = (((edge_map H) o (node_map H)) x))) x)) = ((\x. (((edge_map H) ((node_map H) x)) = (((edge_map H) o (node_map H)) x))) x))
T c= c==> ! c= cedge_map f0 cnode_map f0 b0 co * part cedge_map f0 * part cnode_map f0 b0 * / c= cedge_map f0 cnode_map f0 b0 co * part cedge_map f0 * part cnode_map f0 b0 f1 * / c= cedge_map f0 cnode_map f0 b0 co * part cedge_map f0 * part cnode_map f0 b0 f1
- |- ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x)
T * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1
+ (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), ((SUC n) = (CARD ((edge H) x))) |- (((inverse (face_map H)) x) = x)
T c==> c= cinverse * part cface_map f0 f1 cPOWER * part cedge_map f0 cSUC f2 f1 c==> c= cSUC f2 cCARD * * part cedge f0 f1 c= cinverse * part cface_map f0 f1 f1
+ |- ((\x. (((dart_nondegenerate H) x) ==> ((~ (((inverse (edge_map H)) x) = x)) /\ ((~ (((inverse (node_map H)) x) = x)) /\ (~ (((inverse (face_map H)) x) = x)))))) x)
T * / c==> cdart_nondegenerate f0 b0 c/\ c~ c= cinverse * part cedge_map f0 b0 b0 c/\ c~ c= cinverse * part cnode_map f0 b0 b0 c~ c= cinverse * part cface_map f0 b0 b0 f1
+ (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (((node_map H) x) = (((POWER (edge_map H)) n) x)), (n = (SUC d)), ((SUC n) < (CARD ((edge H) x))), ((dart_nondegenerate H) x) |- (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))
T c==> c= cinverse * part cface_map f0 f1 cPOWER * part cedge_map f0 cSUC f2 f1 c==> c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c==> c= f2 cSUC f3 c==> c< cSUC f2 cCARD * * part cedge f0 f1 c==> cdart_nondegenerate f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (((node_map H) x) = (((POWER (edge_map H)) n) x)), ((SUC n) < (CARD ((edge H) x))), ((dart_nondegenerate H) x) |- ((n = (SUC d)) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> c= cinverse * part cface_map f0 f1 cPOWER * part cedge_map f0 cSUC f2 f1 c==> c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1 c==> c< cSUC f2 cCARD * * part cedge f0 f1 c==> cdart_nondegenerate f0 f1 c==> c= f2 cSUC f3 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ |- ((\x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))) x)
T * / ! c/\ c= cedge_map cedge_walkup f0 b0 b0 b0 c/\ c==> c/\ c~ c= cnode_map f0 b0 b0 c~ c= cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cnode_map f0 b0 cedge_map f0 b0 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 b0 b0 c~ c= cinverse * part cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 cinverse * part cface_map f0 b0 c==> c/\ c~ c= b1 b0 c/\ c~ c= b1 cinverse * part cedge_map f0 b0 c~ c= b1 cnode_map f0 b0 c= cedge_map cedge_walkup f0 b0 b1 cedge_map f0 b1 f1
+ ((dart_nondegenerate H) x) |- (((((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)) ==> (((((POWER (edge_map ((edge_walkup H) x))) (SUC d)) ((edge_map H) x)) = ((edge_map ((edge_walkup H) x)) ((node_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))) = ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) ==> (((((POWER (edge_map ((edge_walkup H) x))) (SUC d)) ((edge_map H) x)) = ((edge_map ((edge_walkup H) x)) ((node_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))))
T c==> cdart_nondegenerate f0 f1 c= c==> c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c==> c= cPOWER * part cedge_map cedge_walkup f0 f1 cSUC f2 cedge_map f0 f1 cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c==> c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c==> c= cPOWER * part cedge_map cedge_walkup f0 f1 cSUC f2 cedge_map f0 f1 cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ (((inj_orbit (edge_map H)) x) (SUC d)) |- (((!j. ((((SUC d) <= (SUC d)) /\ (j < (SUC d))) ==> (~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) j) x))))) ==> ((\j. ((((SUC d) <= (SUC d)) /\ (j < (SUC d))) ==> (~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) j) x))))) (SUC i))) = ((\j. ((((SUC d) <= (SUC d)) /\ (j < (SUC d))) ==> (~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) j) x))))) (SUC i)))
T c==> cinj_orbit * part cedge_map f0 f1 cSUC f2 c= c==> ! c==> c/\ c<= cSUC f2 cSUC f2 c< b0 cSUC f2 c~ c= cPOWER * part cedge_map f0 cSUC f2 f1 cPOWER * part cedge_map f0 b0 f1 * / c==> c/\ c<= cSUC f2 cSUC f2 c< b0 cSUC f2 c~ c= cPOWER * part cedge_map f0 cSUC f2 f1 cPOWER * part cedge_map f0 b0 f1 cSUC f3 * / c==> c/\ c<= cSUC f2 cSUC f2 c< b0 cSUC f2 c~ c= cPOWER * part cedge_map f0 cSUC f2 f1 cPOWER * part cedge_map f0 b0 f1 cSUC f3
- (((edge_walkup H) x) = G) |- ((\G. (((edge_walkup H) x) = G)) G)
T c==> c= cedge_walkup f0 f1 f2 * / c= cedge_walkup f0 f1 b0 f2
+ |- ((\f. (!x. (!n. ((((POWER f) (SUC n)) x) = (f (((POWER f) n) x)))))) f)
T * / ! ! c= cPOWER b0 cSUC b2 b1 * b0 cPOWER b0 b2 b1 f0
- |- ((((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))
T c==> c= cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f2 c= cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f2
+ (((inj_orbit (edge_map H)) x) (SUC (SUC d))) |- ((((((SUC (SUC d)) <= (SUC (SUC d))) /\ ((SUC k) < (SUC (SUC d)))) ==> (~ ((((POWER (edge_map H)) (SUC (SUC d))) x) = (((POWER (edge_map H)) (SUC k)) x)))) ==> (~ ((((POWER (edge_map H)) (SUC (SUC d))) x) = (((POWER (edge_map H)) (SUC k)) x)))) = (~ ((((POWER (edge_map H)) (SUC (SUC d))) x) = (((POWER (edge_map H)) (SUC k)) x))))
T c==> cinj_orbit * part cedge_map f0 f1 cSUC cSUC f2 c= c==> c==> c/\ c<= cSUC cSUC f2 cSUC cSUC f2 c< cSUC f3 cSUC cSUC f2 c~ c= cPOWER * part cedge_map f0 cSUC cSUC f2 f1 cPOWER * part cedge_map f0 cSUC f3 f1 c~ c= cPOWER * part cedge_map f0 cSUC cSUC f2 f1 cPOWER * part cedge_map f0 cSUC f3 f1 c~ c= cPOWER * part cedge_map f0 cSUC cSUC f2 f1 cPOWER * part cedge_map f0 cSUC f3 f1
+ (n = (SUC d)), ((SUC i) < (SUC (SUC d))), ((SUC n) < (CARD ((edge H) x))) |- (((SUC i) < (SUC (SUC d))) /\ ((((SUC i) < (CARD ((edge H) x))) ==> (((inj_orbit (edge_map H)) x) (SUC i))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = x))))
T c==> c= f0 cSUC f1 c==> c< cSUC f2 cSUC cSUC f1 c==> c< cSUC f0 cCARD * * part cedge f3 f4 c/\ c< cSUC f2 cSUC cSUC f1 c==> c==> c< cSUC f2 cCARD * * part cedge f3 f4 cinj_orbit * part cedge_map f3 f4 cSUC f2 c~ c= cPOWER * part cedge_map f3 cSUC f2 f4 f4
+ |- ((\n. ((((POWER f) (SUC n)) x) = (f (((POWER f) n) x)))) n)
T * / c= cPOWER f0 cSUC b0 f1 * f0 cPOWER f0 b0 f1 f2
+ |- ((\x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))))) x)
T * / c= cdart_nondegenerate f0 b0 c/\ c~ c= cedge_map f0 b0 b0 c/\ c~ c= cnode_map f0 b0 b0 c~ c= cface_map f0 b0 b0 f1
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
+ (~ (~ (k < (SUC d)))), (n = (SUC d)), ((SUC n) < (CARD ((edge H) x))) |- ((((SUC (SUC d)) < (CARD ((edge H) x))) ==> (((inj_orbit (edge_map H)) x) (SUC (SUC d)))) ==> (~ ((((POWER (edge_map H)) (SUC (SUC d))) x) = (((POWER (edge_map H)) (SUC k)) x))))
T c==> c~ c~ c< f0 cSUC f1 c==> c= f2 cSUC f1 c==> c< cSUC f2 cCARD * * part cedge f3 f4 c==> c==> c< cSUC cSUC f1 cCARD * * part cedge f3 f4 cinj_orbit * part cedge_map f3 f4 cSUC cSUC f1 c~ c= cPOWER * part cedge_map f3 cSUC cSUC f1 f4 cPOWER * part cedge_map f3 cSUC f0 f4
+ ((dart_nondegenerate H) x) |- (((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((node_map H) x) IN ((orbit_map (edge_map H)) x)))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> cdart_nondegenerate f0 f1 c==> c/\ cFINITE * part cdart f0 c/\ cpermutes * part cedge_map f0 * part cdart f0 cIN cnode_map f0 f1 * * part corbit_map * part cedge_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ |- ((\m. (!n. (!p. (((m <= n) /\ (n <= p)) ==> (m <= p))))) m)
T * / ! ! c==> c/\ c<= b0 b1 c<= b1 b2 c<= b0 b2 f0
+ ((dart_nondegenerate H) x) |- (((((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)) ==> (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)))))) = ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) ==> (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)))))))
T c==> cdart_nondegenerate f0 f1 c= c==> c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= * * part cedge f0 f1 * * part cUNION * * part cINSERT f1 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 c==> c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= * * part cedge f0 f1 * * part cUNION * * part cINSERT f1 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- (((((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))) = (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c= c==> c= cedge_map cedge_walkup f2 f1 f0 cedge_map f2 f0 c= cedge_map cedge_walkup f2 f1 f0 cedge_map f2 f0 c= cedge_map cedge_walkup f2 f1 f0 cedge_map f2 f0
+ (~ ((((POWER (edge_map H)) (SUC (SUC i))) x) = x)) |- (((~ (x = (((POWER (edge_map H)) (SUC (SUC i))) x))) ==> ((x = (((POWER (edge_map H)) (SUC (SUC i))) x)) = F)) = ((x = (((POWER (edge_map H)) (SUC (SUC i))) x)) = F))
T c==> c~ c= cPOWER * part cedge_map f0 cSUC cSUC f1 f2 f2 c= c==> c~ c= f2 cPOWER * part cedge_map f0 cSUC cSUC f1 f2 c= c= f2 cPOWER * part cedge_map f0 cSUC cSUC f1 f2 cF c= c= f2 cPOWER * part cedge_map f0 cSUC cSUC f1 f2 cF
+ (!i. ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x))))), (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (n = (SUC d)), (((edge_walkup H) x) = G), ((SUC n) < (CARD ((edge H) x))) |- (~ (((inverse (face_map H)) x) IN (GSPEC (\GEN%PVAR%5396. (?k. (((SETSPEC GEN%PVAR%5396) (k < (SUC d))) (((POWER (edge_map G)) k) ((edge_map H) x))))))))
T c==> ! c==> c<= b0 f0 c= cPOWER * part cedge_map cedge_walkup f1 f2 b0 cedge_map f1 f2 cPOWER * part cedge_map f1 b0 cedge_map f1 f2 c==> c= cinverse * part cface_map f1 f2 cPOWER * part cedge_map f1 cSUC f3 f2 c==> c= f3 cSUC f0 c==> c= cedge_walkup f1 f2 f4 c==> c< cSUC f3 cCARD * * part cedge f1 f2 c~ cIN cinverse * part cface_map f1 f2 * part cGSPEC / c? / cSETSPEC b0 c< b1 cSUC f0 cPOWER * part cedge_map f4 b1 cedge_map f1 f2
+ |- ((((((POWER (edge_map ((edge_walkup H) x))) d) ((edge_map H) x)) = (((POWER (edge_map H)) (SUC d)) x)) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))) = (((((POWER (edge_map ((edge_walkup H) x))) d) ((edge_map H) x)) = (((POWER (edge_map H)) d) ((edge_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))))
T c= c==> c= cPOWER * part cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f1 cPOWER * part cedge_map f0 cSUC f2 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c==> c= cPOWER * part cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f1 cPOWER * part cedge_map f0 f2 cedge_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ |- ((\n. (n < (SUC n))) (SUC d))
T * / c< b0 cSUC b0 cSUC f0
+ (x IN (dart H)), ((dart_nondegenerate H) x) |- ((((edge H) x) UNION ((edge H) ((node_map H) x))) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x)))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c= * * part cUNION * * part cedge f1 f0 * * part cedge f1 cnode_map f1 f0 * * part cUNION * * part cINSERT f0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0
- (?d. (n = (SUC d))), (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (((node_map H) x) = (((POWER (edge_map H)) n) x)), ((SUC n) < (CARD ((edge H) x))), ((dart_nondegenerate H) x) |- (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))
T c==> c? / c= f0 cSUC b0 c==> c= cinverse * part cface_map f1 f2 cPOWER * part cedge_map f1 cSUC f0 f2 c==> c= cnode_map f1 f2 cPOWER * part cedge_map f1 f0 f2 c==> c< cSUC f0 cCARD * * part cedge f1 f2 c==> cdart_nondegenerate f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
+ |- (((!m. (!x. (((~ (m = (NUMERAL _0))) /\ ((((POWER f) m) x) = x)) ==> (((orbit_map f) x) = (GSPEC (\GEN%PVAR%5396. (?k. (((SETSPEC GEN%PVAR%5396) (k < m)) (((POWER f) k) x))))))))) ==> ((\m. (!x. (((~ (m = (NUMERAL _0))) /\ ((((POWER f) m) x) = x)) ==> (((orbit_map f) x) = (GSPEC (\GEN%PVAR%5396. (?k. (((SETSPEC GEN%PVAR%5396) (k < m)) (((POWER f) k) x))))))))) m)) = ((\m. (!x. (((~ (m = (NUMERAL _0))) /\ ((((POWER f) m) x) = x)) ==> (((orbit_map f) x) = (GSPEC (\GEN%PVAR%5396. (?k. (((SETSPEC GEN%PVAR%5396) (k < m)) (((POWER f) k) x))))))))) m))
T c= c==> ! ! c==> c/\ c~ c= b0 cNUMERAL c_0 c= cPOWER f0 b0 b1 b1 c= * * part corbit_map f0 b1 * part cGSPEC / c? / cSETSPEC b2 c< b3 b0 cPOWER f0 b3 b1 * / ! c==> c/\ c~ c= b0 cNUMERAL c_0 c= cPOWER f0 b0 b1 b1 c= * * part corbit_map f0 b1 * part cGSPEC / c? / cSETSPEC b2 c< b3 b0 cPOWER f0 b3 b1 f1 * / ! c==> c/\ c~ c= b0 cNUMERAL c_0 c= cPOWER f0 b0 b1 b1 c= * * part corbit_map f0 b1 * part cGSPEC / c? / cSETSPEC b2 c< b3 b0 cPOWER f0 b3 b1 f1
+ ((y = ((edge_map H) x)) = (x = ((inverse (edge_map H)) y))) |- ((x = ((inverse (edge_map H)) y)) = (y = ((edge_map H) x)))
T c==> c= c= f0 cedge_map f1 f2 c= f2 cinverse * part cedge_map f1 f0 c= c= f2 cinverse * part cedge_map f1 f0 c= f0 cedge_map f1 f2
+ |- ((\H. (!x. (((orbit_map (edge_map H)) x) = ((edge H) x)))) H)
T * / ! c= * * part corbit_map * part cedge_map b0 b1 * * part cedge b0 b1 f0
+ ((dart_nondegenerate H) x) |- ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x)))
T c==> cdart_nondegenerate f0 f1 c/\ c~ c= cnode_map f0 f1 f1 c~ c= cface_map f0 f1 f1
+ |- (((!n. (((NUMERAL _0) + n) = n)) ==> ((\n. (((NUMERAL _0) + n) = n)) n)) = ((\n. (((NUMERAL _0) + n) = n)) n))
T c= c==> ! c= c+ cNUMERAL c_0 b0 b0 * / c= c+ cNUMERAL c_0 b0 b0 f0 * / c= c+ cNUMERAL c_0 b0 b0 f0
+ |- ((~ ((((POWER (edge_map H)) (SUC (SUC i))) x) = x)) ==> ((~ (x = (((POWER (edge_map H)) (SUC (SUC i))) x))) = T))
T c==> c~ c= cPOWER * part cedge_map f0 cSUC cSUC f1 f2 f2 c= c~ c= f2 cPOWER * part cedge_map f0 cSUC cSUC f1 f2 cT
+ |- ((\x. (!n. ((((POWER f) n) (f x)) = (((POWER f) (SUC n)) x)))) x)
T * / ! c= cPOWER f0 b1 * f0 b0 cPOWER f0 cSUC b1 b0 f1
+ (!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> (!m. ((m < (CARD ((orbit_map p) x))) ==> (((inj_orbit p) x) m))))))) |- ((((FINITE s) /\ ((permutes p) s)) ==> (!x. (!m. ((m < (CARD ((orbit_map p) x))) ==> (((inj_orbit p) x) m))))) = T)
T c==> ! ! ! c==> c/\ cFINITE b0 cpermutes b1 b0 ! c==> c< b3 cCARD * * part corbit_map b1 b2 cinj_orbit b1 b2 b3 c= c==> c/\ cFINITE f0 cpermutes f1 f0 ! ! c==> c< b1 cCARD * * part corbit_map f1 b0 cinj_orbit f1 b0 b1 cT
+ |- ((\x'. (!n. ((((POWER (edge_map ((edge_walkup H) x))) n) x') IN ((edge ((edge_walkup H) x)) x')))) ((inverse (edge_map H)) x))
T * / ! cIN cPOWER * part cedge_map cedge_walkup f0 f1 b1 b0 * * part cedge cedge_walkup f0 f1 b0 cinverse * part cedge_map f0 f1
- |- ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x)
T * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1
+ ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((node_map H) x) IN ((orbit_map (edge_map H)) x)))) |- (((?n. ((n < (CARD ((orbit_map (edge_map H)) x))) /\ (((node_map H) x) = (((POWER (edge_map H)) n) x)))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))) = (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> c/\ cFINITE * part cdart f0 c/\ cpermutes * part cedge_map f0 * part cdart f0 cIN cnode_map f0 f1 * * part corbit_map * part cedge_map f0 f1 c= c==> c? / c/\ c< b0 cCARD * * part corbit_map * part cedge_map f0 f1 c= cnode_map f0 f1 cPOWER * part cedge_map f0 b0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ |- ((\p'. (!q'. (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) = p') ==> ((p' ==> ((~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x))) = q')) ==> (((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x)))) = (p' ==> q')))))) p')
T * / ! c==> c= c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 b0 c==> c==> b0 c= c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 b1 c= c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 c==> b0 b1 f4
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (((dart_nondegenerate H) x) /\ (((node_map H) x) IN ((edge H) x))), (x IN (dart H)), ((dart_nondegenerate H) x) |- ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))))
T c==> c/\ cdart_nondegenerate f0 f1 cIN cnode_map f0 f1 * * part cedge f0 f1 c==> cIN f1 * part cdart f0 c==> cdart_nondegenerate f0 f1 c/\ c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c= * * part cedge f0 f1 * * part cUNION * * part cINSERT f1 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1
+ |- (((!H. (!x. (!n. ((((POWER (edge_map H)) n) x) IN ((edge H) x))))) ==> ((\H. (!x. (!n. ((((POWER (edge_map H)) n) x) IN ((edge H) x))))) ((edge_walkup H) x))) = ((\H. (!x. (!n. ((((POWER (edge_map H)) n) x) IN ((edge H) x))))) ((edge_walkup H) x)))
T c= c==> ! ! ! cIN cPOWER * part cedge_map b0 b2 b1 * * part cedge b0 b1 * / ! ! cIN cPOWER * part cedge_map b0 b2 b1 * * part cedge b0 b1 cedge_walkup f0 f1 * / ! ! cIN cPOWER * part cedge_map b0 b2 b1 * * part cedge b0 b1 cedge_walkup f0 f1
+ |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ (n = (SUC d)), ((SUC i) <= d), ((SUC n) < (CARD ((edge H) x))) |- ((((SUC (SUC i)) < (CARD ((edge H) x))) ==> (((inj_orbit (edge_map H)) x) (SUC (SUC i)))) ==> (~ (x = (((POWER (edge_map H)) (SUC (SUC i))) x))))
T c==> c= f0 cSUC f1 c==> c<= cSUC f2 f1 c==> c< cSUC f0 cCARD * * part cedge f3 f4 c==> c==> c< cSUC cSUC f2 cCARD * * part cedge f3 f4 cinj_orbit * part cedge_map f3 f4 cSUC cSUC f2 c~ c= f4 cPOWER * part cedge_map f3 cSUC cSUC f2 f4
+ ((\G. (((edge_walkup H) x) = G)) G) |- (((((edge_walkup H) x) = G) ==> ((((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)) ==> (((((POWER (edge_map ((edge_walkup H) x))) (SUC d)) ((edge_map H) x)) = ((edge_map ((edge_walkup H) x)) ((node_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))))) = ((((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)) ==> (((((POWER (edge_map ((edge_walkup H) x))) (SUC d)) ((edge_map H) x)) = ((edge_map ((edge_walkup H) x)) ((node_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))))
T c==> * / c= cedge_walkup f0 f1 b0 f2 c= c==> c= cedge_walkup f0 f1 f2 c==> c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c==> c= cPOWER * part cedge_map cedge_walkup f0 f1 cSUC f3 cedge_map f0 f1 cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c==> c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c==> c= cPOWER * part cedge_map cedge_walkup f0 f1 cSUC f3 cedge_map f0 f1 cedge_map cedge_walkup f0 f1 cnode_map f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
+ |- ((((inj_orbit (edge_map H)) x) (SUC i)) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = x)))
T c==> cinj_orbit * part cedge_map f0 f1 cSUC f2 c~ c= cPOWER * part cedge_map f0 cSUC f2 f1 f1
+ (!i. ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x))))), (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (n = (SUC d)), ((SUC n) < (CARD ((edge H) x))) |- ((((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)) ==> (((((POWER (edge_map ((edge_walkup H) x))) (SUC d)) ((edge_map H) x)) = ((edge_map ((edge_walkup H) x)) ((node_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))))
T c==> ! c==> c<= b0 f0 c= cPOWER * part cedge_map cedge_walkup f1 f2 b0 cedge_map f1 f2 cPOWER * part cedge_map f1 b0 cedge_map f1 f2 c==> c= cinverse * part cface_map f1 f2 cPOWER * part cedge_map f1 cSUC f3 f2 c==> c= f3 cSUC f0 c==> c< cSUC f3 cCARD * * part cedge f1 f2 c==> c= cedge_map cedge_walkup f1 f2 cnode_map f1 f2 cedge_map f1 f2 c==> c= cPOWER * part cedge_map cedge_walkup f1 f2 cSUC f0 cedge_map f1 f2 cedge_map cedge_walkup f1 f2 cnode_map f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
- (~ ((SUC n) = (CARD ((edge H) x)))) |- (((~ ((CARD ((edge H) x)) = (SUC n))) ==> (((CARD ((edge H) x)) = (SUC n)) = F)) = (((CARD ((edge H) x)) = (SUC n)) = F))
T c==> c~ c= cSUC f0 cCARD * * part cedge f1 f2 c= c==> c~ c= cCARD * * part cedge f1 f2 cSUC f0 c= c= cCARD * * part cedge f1 f2 cSUC f0 cF c= c= cCARD * * part cedge f1 f2 cSUC f0 cF
+ (~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) |- ((~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) /\ ((~ ((((POWER (edge_map H)) (SUC i)) x) = (((POWER (edge_map H)) (SUC d)) x))) = T))
T c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c/\ c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c= c~ c= cPOWER * part cedge_map f0 cSUC f3 f2 cPOWER * part cedge_map f0 cSUC f1 f2 cT
+ (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)) |- (((((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) IN ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))) ==> (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)))))) = ((((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))) ==> (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)))))))
T c==> c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c= c==> cIN cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 c= * * part cedge f0 f1 * * part cUNION * * part cINSERT f1 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 c==> cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 c= * * part cedge f0 f1 * * part cUNION * * part cINSERT f1 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- (((~ (((inverse (edge_map H)) x) = y)) ==> ((((inverse (edge_map H)) x) = y) = F)) = ((((inverse (edge_map H)) x) = y) = F))
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c= c==> c~ c= cinverse * part cedge_map f2 f1 f0 c= c= cinverse * part cedge_map f2 f1 f0 cF c= c= cinverse * part cedge_map f2 f1 f0 cF
+ ((SUC i) <= d) |- (((SUC i) < (SUC d)) = T)
T c==> c<= cSUC f0 f1 c= c< cSUC f0 cSUC f1 cT
+ ((\n. ((n < (CARD ((orbit_map (edge_map H)) x))) /\ (((node_map H) x) = (((POWER (edge_map H)) n) x)))) n) |- ((n < (CARD ((orbit_map (edge_map H)) x))) /\ (((node_map H) x) = (((POWER (edge_map H)) n) x)))
T c==> * / c/\ c< b0 cCARD * * part corbit_map * part cedge_map f0 f1 c= cnode_map f0 f1 cPOWER * part cedge_map f0 b0 f1 f2 c/\ c< f2 cCARD * * part corbit_map * part cedge_map f0 f1 c= cnode_map f0 f1 cPOWER * part cedge_map f0 f2 f1
+ (((node_map H) x) IN ((edge H) x)), ((dart_nondegenerate H) x) |- ((((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x))))) = ((~ (((inverse (face_map H)) x) IN ((edge ((edge_walkup H) x)) ((node_map H) x)))) /\ (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (face_map H)) x)))))))
T c==> cIN cnode_map f0 f1 * * part cedge f0 f1 c==> cdart_nondegenerate f0 f1 c= c= * * part cedge f0 f1 * * part cUNION * * part cINSERT f1 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1 c/\ c~ cIN cinverse * part cface_map f0 f1 * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 c= * * part cedge f0 f1 * * part cUNION * * part cINSERT f1 part cEMPTY * * part cUNION * * part cedge cedge_walkup f0 f1 cnode_map f0 f1 * * part cedge cedge_walkup f0 f1 cinverse * part cface_map f0 f1
- ((((POWER (edge_map H)) i) ((edge_map H) x)) = y) |- (((((POWER (edge_map H)) i) ((edge_map H) x)) = y) /\ (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)))
T c==> c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f3 c/\ c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f3 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0
+ |- ((\n. ((((POWER f) n) (f x)) = (((POWER f) (SUC n)) x))) n)
T * / c= cPOWER f0 b0 * f0 f1 cPOWER f0 cSUC b0 f1 f2
+ (n = (SUC d)), ((SUC i) < (SUC d)), ((SUC n) < (CARD ((edge H) x))) |- (((SUC i) < (SUC d)) /\ ((((SUC i) < (CARD ((edge H) x))) ==> (((inj_orbit (edge_map H)) x) (SUC i))) ==> (~ ((((POWER (edge_map H)) (SUC i)) x) = x))))
T c==> c= f0 cSUC f1 c==> c< cSUC f2 cSUC f1 c==> c< cSUC f0 cCARD * * part cedge f3 f4 c/\ c< cSUC f2 cSUC f1 c==> c==> c< cSUC f2 cCARD * * part cedge f3 f4 cinj_orbit * part cedge_map f3 f4 cSUC f2 c~ c= cPOWER * part cedge_map f3 cSUC f2 f4 f4
+ |- ((\x. (((edge_map H) ((node_map H) x)) = (((edge_map H) o (node_map H)) x))) x)
T * / c= cedge_map f0 cnode_map f0 b0 co * part cedge_map f0 * part cnode_map f0 b0 f1
+ |- ((\x. (!m. ((m < (CARD ((orbit_map (edge_map H)) x))) ==> (((inj_orbit (edge_map H)) x) m)))) x)
T * / ! c==> c< b1 cCARD * * part corbit_map * part cedge_map f0 b0 cinj_orbit * part cedge_map f0 b0 b1 f1
+ ((m < n) = ((SUC m) < (SUC n))) |- (((SUC m) < (SUC n)) = (m < n))
T c==> c= c< f0 f1 c< cSUC f0 cSUC f1 c= c< cSUC f0 cSUC f1 c< f0 f1
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ |- (((!x. (!y. (((FINITE s) /\ (((permutes p) s) /\ (y IN ((orbit_map p) x)))) ==> (?n. ((n < (CARD ((orbit_map p) x))) /\ (y = (((POWER p) n) x))))))) ==> ((\x. (!y. (((FINITE s) /\ (((permutes p) s) /\ (y IN ((orbit_map p) x)))) ==> (?n. ((n < (CARD ((orbit_map p) x))) /\ (y = (((POWER p) n) x))))))) x)) = ((\x. (!y. (((FINITE s) /\ (((permutes p) s) /\ (y IN ((orbit_map p) x)))) ==> (?n. ((n < (CARD ((orbit_map p) x))) /\ (y = (((POWER p) n) x))))))) x))
T c= c==> ! ! c==> c/\ cFINITE f0 c/\ cpermutes f1 f0 cIN b1 * * part corbit_map f1 b0 c? / c/\ c< b2 cCARD * * part corbit_map f1 b0 c= b1 cPOWER f1 b2 b0 * / ! c==> c/\ cFINITE f0 c/\ cpermutes f1 f0 cIN b1 * * part corbit_map f1 b0 c? / c/\ c< b2 cCARD * * part corbit_map f1 b0 c= b1 cPOWER f1 b2 b0 f2 * / ! c==> c/\ cFINITE f0 c/\ cpermutes f1 f0 cIN b1 * * part corbit_map f1 b0 c? / c/\ c< b2 cCARD * * part corbit_map f1 b0 c= b1 cPOWER f1 b2 b0 f2
+ (!i. ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x))))), (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (n = (SUC d)), ((SUC n) < (CARD ((edge H) x))), ((dart_nondegenerate H) x) |- (((((POWER (edge_map ((edge_walkup H) x))) (SUC d)) ((edge_map H) x)) = ((edge_map ((edge_walkup H) x)) ((node_map H) x))) ==> (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> ! c==> c<= b0 f0 c= cPOWER * part cedge_map cedge_walkup f1 f2 b0 cedge_map f1 f2 cPOWER * part cedge_map f1 b0 cedge_map f1 f2 c==> c= cinverse * part cface_map f1 f2 cPOWER * part cedge_map f1 cSUC f3 f2 c==> c= f3 cSUC f0 c==> c< cSUC f3 cCARD * * part cedge f1 f2 c==> cdart_nondegenerate f1 f2 c==> c= cPOWER * part cedge_map cedge_walkup f1 f2 cSUC f0 cedge_map f1 f2 cedge_map cedge_walkup f1 f2 cnode_map f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
+ |- ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) (edge_map H))
T * / ! ! c= co b0 b1 b2 * b0 * b1 b2 * part cedge_map f0
+ |- (((((edge G) ((edge_map H) x)) = (GSPEC (\GEN%PVAR%5396. (?k. (((SETSPEC GEN%PVAR%5396) (k < (SUC d))) (((POWER (edge_map G)) k) ((edge_map H) x))))))) ==> (~ (((inverse (face_map H)) x) IN ((edge G) ((edge_map H) x))))) = ((((orbit_map (edge_map G)) ((edge_map H) x)) = (GSPEC (\GEN%PVAR%5396. (?k. (((SETSPEC GEN%PVAR%5396) (k < (SUC d))) (((POWER (edge_map G)) k) ((edge_map H) x))))))) ==> (~ (((inverse (face_map H)) x) IN ((edge G) ((edge_map H) x))))))
T c= c==> c= * * part cedge f0 cedge_map f1 f2 * part cGSPEC / c? / cSETSPEC b0 c< b1 cSUC f3 cPOWER * part cedge_map f0 b1 cedge_map f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part cedge f0 cedge_map f1 f2 c==> c= * * part corbit_map * part cedge_map f0 cedge_map f1 f2 * part cGSPEC / c? / cSETSPEC b0 c< b1 cSUC f3 cPOWER * part cedge_map f0 b1 cedge_map f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part cedge f0 cedge_map f1 f2
+ |- (((edge_map H) o (node_map H)) = (inverse (face_map H)))
T c= * * part co * part cedge_map f0 * part cnode_map f0 * part cinverse * part cface_map f0
+ |- (((!H. (!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x))))))) ==> ((\H. (!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x))))))) H)) = ((\H. (!x. (((dart_nondegenerate H) x) = ((~ (((edge_map H) x) = x)) /\ ((~ (((node_map H) x) = x)) /\ (~ (((face_map H) x) = x))))))) H))
T c= c==> ! ! c= cdart_nondegenerate b0 b1 c/\ c~ c= cedge_map b0 b1 b1 c/\ c~ c= cnode_map b0 b1 b1 c~ c= cface_map b0 b1 b1 * / ! c= cdart_nondegenerate b0 b1 c/\ c~ c= cedge_map b0 b1 b1 c/\ c~ c= cnode_map b0 b1 b1 c~ c= cface_map b0 b1 b1 f0 * / ! c= cdart_nondegenerate b0 b1 c/\ c~ c= cedge_map b0 b1 b1 c/\ c~ c= cnode_map b0 b1 b1 c~ c= cface_map b0 b1 b1 f0
+ (~ ((NUMERAL _0) < n)), (((node_map H) x) = (((POWER (edge_map H)) n) x)), ((dart_nondegenerate H) x) |- (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))
T c==> c~ c< cNUMERAL c_0 f0 c==> c= cnode_map f1 f2 cPOWER * part cedge_map f1 f0 f2 c==> cdart_nondegenerate f1 f2 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
+ (x IN (dart H)), ((dart_nondegenerate H) x) |- ((((edge H) x) = (((edge H) x) UNION ((edge H) ((node_map H) x)))) = (((edge H) x) = ((x INSERT EMPTY) UNION (((edge ((edge_walkup H) x)) ((node_map H) x)) UNION ((edge ((edge_walkup H) x)) ((inverse (edge_map H)) x))))))
T c==> cIN f0 * part cdart f1 c==> cdart_nondegenerate f1 f0 c= c= * * part cedge f1 f0 * * part cUNION * * part cedge f1 f0 * * part cedge f1 cnode_map f1 f0 c= * * part cedge f1 f0 * * part cUNION * * part cINSERT f0 part cEMPTY * * part cUNION * * part cedge cedge_walkup f1 f0 cnode_map f1 f0 * * part cedge cedge_walkup f1 f0 cinverse * part cedge_map f1 f0
+ |- (((!y. ((x = ((inverse (edge_map H)) y)) = (y = ((edge_map H) x)))) ==> ((\y. ((x = ((inverse (edge_map H)) y)) = (y = ((edge_map H) x)))) y)) = ((\y. ((x = ((inverse (edge_map H)) y)) = (y = ((edge_map H) x)))) y))
T c= c==> ! c= c= f0 cinverse * part cedge_map f1 b0 c= b0 cedge_map f1 f0 * / c= c= f0 cinverse * part cedge_map f1 b0 c= b0 cedge_map f1 f0 f2 * / c= c= f0 cinverse * part cedge_map f1 b0 c= b0 cedge_map f1 f0 f2
+ |- (((!n. ((((inj_orbit p) x) n) = (!i. (!j. (((i <= n) /\ (j < i)) ==> (~ ((((POWER p) i) x) = (((POWER p) j) x)))))))) ==> ((\n. ((((inj_orbit p) x) n) = (!i. (!j. (((i <= n) /\ (j < i)) ==> (~ ((((POWER p) i) x) = (((POWER p) j) x)))))))) n)) = ((\n. ((((inj_orbit p) x) n) = (!i. (!j. (((i <= n) /\ (j < i)) ==> (~ ((((POWER p) i) x) = (((POWER p) j) x)))))))) n))
T c= c==> ! c= cinj_orbit f0 f1 b0 ! ! c==> c/\ c<= b1 b0 c< b2 b1 c~ c= cPOWER f0 b1 f1 cPOWER f0 b2 f1 * / c= cinj_orbit f0 f1 b0 ! ! c==> c/\ c<= b1 b0 c< b2 b1 c~ c= cPOWER f0 b1 f1 cPOWER f0 b2 f1 f2 * / c= cinj_orbit f0 f1 b0 ! ! c==> c/\ c<= b1 b0 c< b2 b1 c~ c= cPOWER f0 b1 f1 cPOWER f0 b2 f1 f2
- (((edge_map H) x) = x) |- (x = ((edge_map H) x))
T c==> c= cedge_map f0 f1 f1 c= f1 cedge_map f0 f1
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- ((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) y) |- (((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) y) /\ (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)))
T c==> * / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 f3 c/\ * / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 f3 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0
- |- (((!x. (((\G. (((edge_walkup H) x) = G)) x) ==> (?G. (((edge_walkup H) x) = G)))) ==> ((?G. (((edge_walkup H) x) = G)) ==> (?G. (((edge_walkup H) x) = G)))) = ((?G. (((edge_walkup H) x) = G)) ==> (?G. (((edge_walkup H) x) = G))))
T c= c==> ! c==> * / c= cedge_walkup f0 f1 b1 b0 c? / c= cedge_walkup f0 f1 b1 c==> c? / c= cedge_walkup f0 f1 b0 c? / c= cedge_walkup f0 f1 b0 c==> c? / c= cedge_walkup f0 f1 b0 c? / c= cedge_walkup f0 f1 b0
- |- ((((edge_walkup H) x) = G) = ((\G. (((edge_walkup H) x) = G)) G))
T c= c= cedge_walkup f0 f1 f2 * / c= cedge_walkup f0 f1 b0 f2
- |- (((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) ==> ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P)) = ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P))
T c= c==> ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0 * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0
- |- (((((POWER (edge_map H)) i) ((edge_map H) x)) = y) = ((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) y))
T c= c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f3 * / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 f3
- ((dart_nondegenerate H) x) |- (~ (((face_map H) x) = x))
T c==> cdart_nondegenerate f0 f1 c~ c= cface_map f0 f1 f1
- (?n. ((n < (CARD ((orbit_map (edge_map H)) x))) /\ (((node_map H) x) = (((POWER (edge_map H)) n) x)))), ((dart_nondegenerate H) x) |- ((?n. ((n < (CARD ((orbit_map (edge_map H)) x))) /\ (((node_map H) x) = (((POWER (edge_map H)) n) x)))) /\ (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> c? / c/\ c< b0 cCARD * * part corbit_map * part cedge_map f0 f1 c= cnode_map f0 f1 cPOWER * part cedge_map f0 b0 f1 c==> cdart_nondegenerate f0 f1 c/\ c? / c/\ c< b0 cCARD * * part corbit_map * part cedge_map f0 f1 c= cnode_map f0 f1 cPOWER * part cedge_map f0 b0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
- |- ((?k. t) = t)
T c= c? / f0 f0
- (n = (SUC d)) |- ((((node_map H) x) IN ((edge H) x)) = (((node_map H) x) IN ((edge H) x)))
T c==> c= f0 cSUC f1 c= cIN cnode_map f2 f3 * * part cedge f2 f3 cIN cnode_map f2 f3 * * part cedge f2 f3
- |- ((((\G. (((edge_walkup H) x) = G)) G) ==> (?G. (((edge_walkup H) x) = G))) = T)
T c= c==> * / c= cedge_walkup f0 f1 b0 f2 c? / c= cedge_walkup f0 f1 b0 cT
- ((dart_nondegenerate H) x) |- (((~ (x = ((inverse (edge_map H)) x))) ==> ((x = ((inverse (edge_map H)) x)) = F)) = ((x = ((inverse (edge_map H)) x)) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= f1 cinverse * part cedge_map f0 f1 c= c= f1 cinverse * part cedge_map f0 f1 cF c= c= f1 cinverse * part cedge_map f0 f1 cF
- |- ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p)
T * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0
- ((dart_nondegenerate H) x) |- ((x = ((edge_map H) x)) = F)
T c==> cdart_nondegenerate f0 f1 c= c= f1 cedge_map f0 f1 cF
- (((inverse (edge_map H)) x) = y) |- (y = ((inverse (edge_map H)) x))
T c==> c= cinverse * part cedge_map f0 f1 f2 c= f2 cinverse * part cedge_map f0 f1
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- ((((inverse (edge_map H)) x) = y) = F)
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c= c= cinverse * part cedge_map f2 f1 f0 cF
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
- ((dart_nondegenerate H) x) |- (((~ (((inverse (node_map H)) x) = x)) ==> ((((inverse (node_map H)) x) = x) = F)) = ((((inverse (node_map H)) x) = x) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= cinverse * part cnode_map f0 f1 f1 c= c= cinverse * part cnode_map f0 f1 f1 cF c= c= cinverse * part cnode_map f0 f1 f1 cF
- ((SUC n) = (CARD ((edge H) x))) |- ((CARD ((edge H) x)) = (SUC n))
T c==> c= cSUC f0 cCARD * * part cedge f1 f2 c= cCARD * * part cedge f1 f2 cSUC f0
- ((\G. (((edge_walkup H) x) = G)) G) |- (((\G. (((edge_walkup H) x) = G)) G) /\ (?G. (((edge_walkup H) x) = G)))
T c==> * / c= cedge_walkup f0 f1 b0 f2 c/\ * / c= cedge_walkup f0 f1 b0 f2 c? / c= cedge_walkup f0 f1 b0
- |- (!y. (((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) y) ==> (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y))))
T c==> * / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 f3 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0
- ((dart_nondegenerate H) x) |- ((x = ((inverse (face_map H)) x)) = F)
T c==> cdart_nondegenerate f0 f1 c= c= f1 cinverse * part cface_map f0 f1 cF
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- ((dart_nondegenerate H) x) |- (~ (x = ((inverse (edge_map H)) x)))
T c==> cdart_nondegenerate f0 f1 c~ c= f1 cinverse * part cedge_map f0 f1
- (x = ((edge_map H) x)) |- (((edge_map H) x) = x)
T c==> c= f0 cedge_map f1 f0 c= cedge_map f1 f0 f0
- (~ ((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x))) |- (((((POWER (edge_map H)) (SUC d)) x) = (((POWER (edge_map H)) (SUC i)) x)) = F)
T c==> c~ c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 c= c= cPOWER * part cedge_map f0 cSUC f1 f2 cPOWER * part cedge_map f0 cSUC f3 f2 cF
- ((dart_nondegenerate H) x) |- (((~ (x = ((inverse (face_map H)) x))) ==> ((x = ((inverse (face_map H)) x)) = F)) = ((x = ((inverse (face_map H)) x)) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= f1 cinverse * part cface_map f0 f1 c= c= f1 cinverse * part cface_map f0 f1 cF c= c= f1 cinverse * part cface_map f0 f1 cF
- ((dart_nondegenerate H) x) |- (((~ (x = ((inverse (node_map H)) x))) ==> ((x = ((inverse (node_map H)) x)) = F)) = ((x = ((inverse (node_map H)) x)) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= f1 cinverse * part cnode_map f0 f1 c= c= f1 cinverse * part cnode_map f0 f1 cF c= c= f1 cinverse * part cnode_map f0 f1 cF
- |- ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x)
T * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1
- |- (T = ((((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))
T c= cT c==> c= cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f2 c= cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f2
- |- ((((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) y) ==> (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y))) = T)
T c= c==> * / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 f3 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 cT
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
- |- ((!P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) /\ ((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) /\ (!p. (!x. ((x IN (\y. (p y))) = (p x))))))
T c/\ ! ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 c/\ ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 ! ! c= cIN b1 / * b0 b2 * b0 b1
- (((node_map H) x) = y) |- (y = ((node_map H) x))
T c==> c= cnode_map f0 f1 f2 c= f2 cnode_map f0 f1
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- ((x = y) = F)
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c= c= f1 f0 cF
- (x = ((face_map H) x)) |- (((face_map H) x) = x)
T c==> c= f0 cface_map f1 f0 c= cface_map f1 f0 f0
- ((\G. (((edge_walkup H) x) = G)) G) |- (((((edge_walkup H) x) = G) ==> (?G. (((edge_walkup H) x) = G))) = (?G. (((edge_walkup H) x) = G)))
T c==> * / c= cedge_walkup f0 f1 b0 f2 c= c==> c= cedge_walkup f0 f1 f2 c? / c= cedge_walkup f0 f1 b0 c? / c= cedge_walkup f0 f1 b0
- (n = (SUC d)) |- (((dart_nondegenerate H) x) = ((dart_nondegenerate H) x))
T c==> c= f0 cSUC f1 c= cdart_nondegenerate f2 f3 cdart_nondegenerate f2 f3
- (x = y) |- (y = x)
T c==> c= f0 f1 c= f1 f0
- ((dart_nondegenerate H) x) |- (~ (x = ((inverse (node_map H)) x)))
T c==> cdart_nondegenerate f0 f1 c~ c= f1 cinverse * part cnode_map f0 f1
- |- (((((POWER (edge_map H)) i) ((edge_map H) x)) = y) ==> (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)))
T c==> c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f3 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0
- ((dart_nondegenerate H) x) |- ((x = ((inverse (edge_map H)) x)) = F)
T c==> cdart_nondegenerate f0 f1 c= c= f1 cinverse * part cedge_map f0 f1 cF
- ((dart_nondegenerate H) x) |- (((~ (x = ((node_map H) x))) ==> ((x = ((node_map H) x)) = F)) = ((x = ((node_map H) x)) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= f1 cnode_map f0 f1 c= c= f1 cnode_map f0 f1 cF c= c= f1 cnode_map f0 f1 cF
- ((dart_nondegenerate H) x) |- (((~ (x = ((face_map H) x))) ==> ((x = ((face_map H) x)) = F)) = ((x = ((face_map H) x)) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= f1 cface_map f0 f1 c= c= f1 cface_map f0 f1 cF c= c= f1 cface_map f0 f1 cF
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- (((~ (x = y)) ==> ((x = y) = F)) = ((x = y) = F))
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c= c==> c~ c= f1 f0 c= c= f1 f0 cF c= c= f1 f0 cF
- ((dart_nondegenerate H) x) |- (~ (x = ((face_map H) x)))
T c==> cdart_nondegenerate f0 f1 c~ c= f1 cface_map f0 f1
- |- (((!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) ==> ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x)) = ((\x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x))) x))
T c= c==> ! c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1 * / c= cIN b0 * part cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 * f0 b0 f1
- ((dart_nondegenerate H) x) |- ((((inverse (node_map H)) x) = x) = F)
T c==> cdart_nondegenerate f0 f1 c= c= cinverse * part cnode_map f0 f1 f1 cF
- |- (((!p. (!x. ((x IN (\y. (p y))) = (p x)))) ==> ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p)) = ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p))
T c= c==> ! ! c= cIN b1 / * b0 b2 * b0 b1 * / ! c= cIN b1 / * b0 b2 * b0 b1 f0 * / ! c= cIN b1 / * b0 b2 * b0 b1 f0
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
- |- ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2)))
T c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
- ((dart_nondegenerate H) x) |- (~ (x = ((inverse (face_map H)) x)))
T c==> cdart_nondegenerate f0 f1 c~ c= f1 cinverse * part cface_map f0 f1
- |- (((!x'. (((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) x') ==> (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)))) ==> ((?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) ==> (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)))) = ((?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) ==> (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y))))
T c= c==> ! c==> * / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b1 b0 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b1 c==> c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 c==> c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0
- ((\y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) y) |- ((((((POWER (edge_map H)) i) ((edge_map H) x)) = y) ==> (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y))) = (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)))
T c==> * / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 f3 c= c==> c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f3 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0
- (x = ((node_map H) x)) |- (((node_map H) x) = x)
T c==> c= f0 cnode_map f1 f0 c= cnode_map f1 f0 f0
- ((dart_nondegenerate H) x) |- (~ (x = ((node_map H) x)))
T c==> cdart_nondegenerate f0 f1 c~ c= f1 cnode_map f0 f1
- (?n. ((n < (CARD ((orbit_map (edge_map H)) x))) /\ (((node_map H) x) = (((POWER (edge_map H)) n) x)))), ((dart_nondegenerate H) x) |- (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x))))
T c==> c? / c/\ c< b0 cCARD * * part corbit_map * part cedge_map f0 f1 c= cnode_map f0 f1 cPOWER * part cedge_map f0 b0 f1 c==> cdart_nondegenerate f0 f1 c~ cIN cinverse * part cface_map f0 f1 * * part corbit_map * part cedge_map cedge_walkup f0 f1 cnode_map f0 f1
- |- ((?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)) ==> (?y. ((((POWER (edge_map H)) i) ((edge_map H) x)) = y)))
T c==> c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0 c? / c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 b0
- (((node_map H) x) = x) |- (x = ((node_map H) x))
T c==> c= cnode_map f0 f1 f1 c= f1 cnode_map f0 f1
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- (((face_map H) x) = x) |- (x = ((face_map H) x))
T c==> c= cface_map f0 f1 f1 c= f1 cface_map f0 f1
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- ((dart_nondegenerate H) x) |- (~ (x = ((edge_map H) x)))
T c==> cdart_nondegenerate f0 f1 c~ c= f1 cedge_map f0 f1
- ((dart_nondegenerate H) x) |- (~ (((inverse (node_map H)) x) = x))
T c==> cdart_nondegenerate f0 f1 c~ c= cinverse * part cnode_map f0 f1 f1
- (n = (SUC d)) |- ((x IN (dart H)) = (x IN (dart H)))
T c==> c= f0 cSUC f1 c= cIN f2 * part cdart f3 cIN f2 * part cdart f3
- (x = ((inverse (face_map H)) x)) |- (((inverse (face_map H)) x) = x)
T c==> c= f0 cinverse * part cface_map f1 f0 c= cinverse * part cface_map f1 f0 f0
- (n = (SUC d)) |- ((n < (CARD ((edge H) x))) = ((SUC d) < (CARD ((edge H) x))))
T c==> c= f0 cSUC f1 c= c< f0 cCARD * * part cedge f2 f3 c< cSUC f1 cCARD * * part cedge f2 f3
- |- ((((edge_walkup H) x) = G) ==> (?G. (((edge_walkup H) x) = G)))
T c==> c= cedge_walkup f0 f1 f2 c? / c= cedge_walkup f0 f1 b0
- |- (((!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) ==> ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x)) = ((\x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))) x))
T c= c==> ! c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1 * / c= cGSPEC / * f0 * part cSETSPEC b1 b0 * f0 / / c/\ b1 c= b0 b2 f1
- (~ ((((POWER (edge_map H)) (SUC (SUC i))) x) = x)) |- (((((POWER (edge_map H)) (SUC (SUC i))) x) = x) = F)
T c==> c~ c= cPOWER * part cedge_map f0 cSUC cSUC f1 f2 f2 c= c= cPOWER * part cedge_map f0 cSUC cSUC f1 f2 f2 cF
- (?d. (n = (SUC d))), (((inverse (face_map H)) x) = (((POWER (edge_map H)) (SUC n)) x)), (((node_map H) x) = (((POWER (edge_map H)) n) x)), ((SUC n) < (CARD ((edge H) x))), ((dart_nondegenerate H) x) |- ((?d. (n = (SUC d))) /\ (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> c? / c= f0 cSUC b0 c==> c= cinverse * part cface_map f1 f2 cPOWER * part cedge_map f1 cSUC f0 f2 c==> c= cnode_map f1 f2 cPOWER * part cedge_map f1 f0 f2 c==> c< cSUC f0 cCARD * * part cedge f1 f2 c==> cdart_nondegenerate f1 f2 c/\ c? / c= f0 cSUC b0 c~ cIN cinverse * part cface_map f1 f2 * * part corbit_map * part cedge_map cedge_walkup f1 f2 cnode_map f1 f2
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- (~ (((node_map H) x) = y))
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c~ c= cnode_map f2 f1 f0
- |- (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))
T c= cGSPEC / c? / cSETSPEC b0 * f0 b1 b1 f1 * f0 f1
- |- ((\p. (!x. ((x IN (\y. (p y))) = (p x)))) p)
T * / ! c= cIN b1 / * b0 b2 * b0 b1 f0
- ((((POWER (edge_map H)) i) ((edge_map H) x)) = y), ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = (((POWER (edge_map H)) i) ((edge_map H) x)))) |- ((i <= d) ==> ((((POWER (edge_map ((edge_walkup H) x))) i) ((edge_map H) x)) = y))
T c==> c= cPOWER * part cedge_map f0 f1 cedge_map f0 f2 f3 c==> c==> c<= f1 f4 c= cPOWER * part cedge_map cedge_walkup f0 f2 f1 cedge_map f0 f2 cPOWER * part cedge_map f0 f1 cedge_map f0 f2 c==> c<= f1 f4 c= cPOWER * part cedge_map cedge_walkup f0 f2 f1 cedge_map f0 f2 f3
- (((inverse (node_map H)) x) = x) |- (x = ((inverse (node_map H)) x))
T c==> c= cinverse * part cnode_map f0 f1 f1 c= f1 cinverse * part cnode_map f0 f1
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- (((~ (((node_map H) x) = y)) ==> ((((node_map H) x) = y) = F)) = ((((node_map H) x) = y) = F))
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c= c==> c~ c= cnode_map f2 f1 f0 c= c= cnode_map f2 f1 f0 cF c= c= cnode_map f2 f1 f0 cF
- (((inverse (face_map H)) x) = x) |- (x = ((inverse (face_map H)) x))
T c==> c= cinverse * part cface_map f0 f1 f1 c= f1 cinverse * part cface_map f0 f1
- ((dart_nondegenerate H) x) |- ((x = ((inverse (node_map H)) x)) = F)
T c==> cdart_nondegenerate f0 f1 c= c= f1 cinverse * part cnode_map f0 f1 cF
- |- (((!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) ==> ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x)) = ((\x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x))) x))
T c= c==> ! c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1 * / c= cGSPEC / c? / cSETSPEC b1 * f0 b2 b2 b0 * f0 b0 f1
- (n = (SUC d)) |- ((~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))) = (~ (((inverse (face_map H)) x) IN ((orbit_map (edge_map ((edge_walkup H) x))) ((node_map H) x)))))
T c==> c= f0 cSUC f1 c= c~ cIN cinverse * part cface_map f2 f3 * * part corbit_map * part cedge_map cedge_walkup f2 f3 cnode_map f2 f3 c~ cIN cinverse * part cface_map f2 f3 * * part corbit_map * part cedge_map cedge_walkup f2 f3 cnode_map f2 f3
- (x = ((inverse (node_map H)) x)) |- (((inverse (node_map H)) x) = x)
T c==> c= f0 cinverse * part cnode_map f1 f0 c= cinverse * part cnode_map f1 f0 f0
- |- ((x IN (\y. (p y))) = (p x))
T c= cIN f0 / * f1 b0 * f1 f0
- ((dart_nondegenerate H) x) |- ((x = ((node_map H) x)) = F)
T c==> cdart_nondegenerate f0 f1 c= c= f1 cnode_map f0 f1 cF
- (y = ((node_map H) x)) |- (((node_map H) x) = y)
T c==> c= f0 cnode_map f1 f2 c= cnode_map f1 f2 f0
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- ((dart_nondegenerate H) x) |- ((x = ((face_map H) x)) = F)
T c==> cdart_nondegenerate f0 f1 c= c= f1 cface_map f0 f1 cF
- (((edge_walkup H) x) = G) |- ((((edge_walkup H) x) = G) /\ (?G. (((edge_walkup H) x) = G)))
T c==> c= cedge_walkup f0 f1 f2 c/\ c= cedge_walkup f0 f1 f2 c? / c= cedge_walkup f0 f1 b0
- |- (((face_map H) o (edge_map H)) = (inverse (node_map H)))
T c= * * part co * part cface_map f0 * part cedge_map f0 * part cinverse * part cnode_map f0
- (~ ((SUC n) = (CARD ((edge H) x)))) |- (~ ((CARD ((edge H) x)) = (SUC n)))
T c==> c~ c= cSUC f0 cCARD * * part cedge f1 f2 c~ c= cCARD * * part cedge f1 f2 cSUC f0
- ((CARD ((edge H) x)) = (SUC n)) |- ((SUC n) = (CARD ((edge H) x)))
T c==> c= cCARD * * part cedge f0 f1 cSUC f2 c= cSUC f2 cCARD * * part cedge f0 f1
- |- (((!p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) ==> ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p)) = ((\p. (!x. ((x IN (GSPEC (\v. (?y. (((SETSPEC v) (p y)) y))))) = (p x)))) p))
T c= c==> ! ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0 * / ! c= cIN b1 * part cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 * b0 b1 f0
- |- (((\t. (f t)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t))))))
T c= cGSPEC / * f0 * part cSETSPEC b0 f1 * f0 / / c/\ b0 c= f1 b1
- |- (((node_map H) o (face_map H)) = (inverse (edge_map H)))
T c= * * part co * part cnode_map f0 * part cface_map f0 * part cinverse * part cedge_map f0
- (y = ((inverse (edge_map H)) x)) |- (((inverse (edge_map H)) x) = y)
T c==> c= f0 cinverse * part cedge_map f1 f2 c= cinverse * part cedge_map f1 f2 f0
- (((inverse (edge_map H)) x) = x) |- (x = ((inverse (edge_map H)) x))
T c==> c= cinverse * part cedge_map f0 f1 f1 c= f1 cinverse * part cedge_map f0 f1
- |- (!G. (((\G. (((edge_walkup H) x) = G)) G) ==> (?G. (((edge_walkup H) x) = G))))
T c==> * / c= cedge_walkup f0 f1 b0 f2 c? / c= cedge_walkup f0 f1 b0
- |- (((!p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) ==> ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p)) = ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p))
T c= c==> ! ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0 * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0
- |- ((?G. (((edge_walkup H) x) = G)) ==> (?G. (((edge_walkup H) x) = G)))
T c==> c? / c= cedge_walkup f0 f1 b0 c? / c= cedge_walkup f0 f1 b0
- |- ((\p. (!x. (((GSPEC (\v. (?y. (((SETSPEC v) (p y)) y)))) x) = (p x)))) p)
T * / ! c= cGSPEC / c? / cSETSPEC b2 * b0 b3 b3 b1 * b0 b1 f0
- ((dart_nondegenerate H) x) |- ((((face_map H) x) = x) = F)
T c==> cdart_nondegenerate f0 f1 c= c= cface_map f0 f1 f1 cF
- |- ((x IN (GSPEC (\GEN%PVAR%5396. (?k. (((SETSPEC GEN%PVAR%5396) (p k)) k))))) = (p x))
T c= cIN f0 * part cGSPEC / c? / cSETSPEC b0 * f1 b1 b1 * f1 f0
- ((dart_nondegenerate H) x) |- (((~ (((face_map H) x) = x)) ==> ((((face_map H) x) = x) = F)) = ((((face_map H) x) = x) = F))
T c==> cdart_nondegenerate f0 f1 c= c==> c~ c= cface_map f0 f1 f1 c= c= cface_map f0 f1 f1 cF c= c= cface_map f0 f1 f1 cF
- (n = (SUC d)), (n < (CARD ((orbit_map (edge_map H)) x))) |- ((SUC d) < (CARD ((edge H) x)))
T c==> c= f0 cSUC f1 c==> c< f0 cCARD * * part corbit_map * part cedge_map f2 f3 c< cSUC f1 cCARD * * part cedge f2 f3
- |- (((!x. ((x IN (\y. (p y))) = (p x))) ==> ((\x. ((x IN (\y. (p y))) = (p x))) x)) = ((\x. ((x IN (\y. (p y))) = (p x))) x))
T c= c==> ! c= cIN b0 / * f0 b1 * f0 b0 * / c= cIN b0 / * f0 b1 * f0 b0 f1 * / c= cIN b0 / * f0 b1 * f0 b0 f1
- |- ((\P. (!x. (((GSPEC (\v. (P (SETSPEC v)))) x) = (P (\p. (\t. (p /\ (x = t)))))))) P)
T * / ! c= cGSPEC / * b0 * part cSETSPEC b2 b1 * b0 / / c/\ b2 c= b1 b3 f0
- (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) /\ (~ (y = ((node_map H) x)))) |- (~ (((inverse (edge_map H)) x) = y))
T c==> c/\ c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c~ c= cinverse * part cedge_map f2 f1 f0
