N Hypermap_and_fan.ORBIT_MAP_INV_3
C |- (!s. (!f. (!x. (((FINITE s) /\ (((permutes f) s) /\ ((CARD ((orbit_map f) x)) = (NUMERAL (BIT1 (BIT1 _0)))))) ==> (((f x) = ((inverse f) ((inverse f) x))) /\ (((f (f x)) = ((inverse f) x)) /\ (((inverse f) ((inverse f) ((inverse f) x))) = x)))))))
T c==> c/\ cFINITE f0 c/\ cpermutes f1 f0 c= cCARD * * part corbit_map f1 f2 cNUMERAL cBIT1 cBIT1 c_0 c/\ c= * f1 f2 cinverse f1 cinverse f1 f2 c/\ c= * f1 * f1 f2 cinverse f1 f2 c= cinverse f1 cinverse f1 cinverse f1 f2 f2
D TRUTH
A |- T
T cT
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D o_THM
A |- (!f. (!g. (!x. (((f o g) x) = (f (g x))))))
T c= co f0 f1 f2 * f0 * f1 f2
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D LE_ADD
A |- (!m. (!n. (m <= (m + n))))
T c<= f0 c+ f0 f1
D ADD_SUB
A |- (!m. (!n. (((m + n) - n) = m)))
T c= c- c+ f0 f1 f1 f0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D Hypermap.THREE
A |- ((NUMERAL (BIT1 (BIT1 _0))) = (SUC (NUMERAL (BIT0 (BIT1 _0)))))
T c= cNUMERAL cBIT1 cBIT1 c_0 cSUC cNUMERAL cBIT0 cBIT1 c_0
D PERMUTES_INVERSE
A |- (!p. (!s. (((permutes p) s) ==> ((permutes (inverse p)) s))))
T c==> cpermutes f0 f1 cpermutes * part cinverse f0 f1
D Fan.POWER
A |- ((!f. (((POWER f) (NUMERAL _0)) = I)) /\ (!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))))
T c/\ ! c= * * part cPOWER b0 cNUMERAL c_0 part cI ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0
D Fan.POWER_1
A |- (!f. (((POWER f) (NUMERAL (BIT1 _0))) = f))
T c= * * part cPOWER f0 cNUMERAL cBIT1 c_0 f0
D Fan.POWER_2
A |- (!f. (((POWER f) (NUMERAL (BIT0 (BIT1 _0)))) = (f o f)))
T c= * * part cPOWER f0 cNUMERAL cBIT0 cBIT1 c_0 * * part co f0 f0
D Hypermap.lemma_cycle_orbit
A |- (!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x)))))
T c==> c/\ cFINITE f0 cpermutes f1 f0 c= cPOWER f1 cCARD * * part corbit_map f1 f2 f2 f2
D Hypermap.lemma_orbit_inverse_map_eq
A |- (!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> (((orbit_map (inverse p)) x) = ((orbit_map p) x))))))
T c==> c/\ cFINITE f0 cpermutes f1 f0 c= * * part corbit_map * part cinverse f1 f2 * * part corbit_map f1 f2
D Hypermap_and_fan.FINITE_ORBIT_MAP_INVERSE
A |- (!f. (!s. (!x. (!n. (!k. (((FINITE s) /\ (((permutes f) s) /\ (((CARD ((orbit_map f) x)) = n) /\ (k <= n)))) ==> ((((POWER (inverse f)) k) x) = (((POWER f) (n - k)) x))))))))
T c==> c/\ cFINITE f0 c/\ cpermutes f1 f0 c/\ c= cCARD * * part corbit_map f1 f2 f3 c<= f4 f3 c= cPOWER * part cinverse f1 f4 f2 cPOWER f1 c- f3 f4 f2
+ |- ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)
T * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ |- (((((NUMERAL (BIT1 _0)) + (NUMERAL (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0)))) = (((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0))))
T c= c==> c= c+ cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 c= c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0
+ (FINITE s) |- ((FINITE s) = T)
T c==> cFINITE f0 c= cFINITE f0 cT
+ |- (((!n. (!f. (!k. (!x. ((?s. ((FINITE s) /\ (((permutes f) s) /\ ((n = (CARD ((orbit_map f) x))) /\ (k <= n))))) ==> ((((POWER f) (n - k)) x) = (((POWER (inverse f)) k) x))))))) ==> ((\n. (!f. (!k. (!x. ((?s. ((FINITE s) /\ (((permutes f) s) /\ ((n = (CARD ((orbit_map f) x))) /\ (k <= n))))) ==> ((((POWER f) (n - k)) x) = (((POWER (inverse f)) k) x))))))) n)) = ((\n. (!f. (!k. (!x. ((?s. ((FINITE s) /\ (((permutes f) s) /\ ((n = (CARD ((orbit_map f) x))) /\ (k <= n))))) ==> ((((POWER f) (n - k)) x) = (((POWER (inverse f)) k) x))))))) n))
T c= c==> ! ! ! ! c==> c? / c/\ cFINITE b4 c/\ cpermutes b1 b4 c/\ c= b0 cCARD * * part corbit_map b1 b3 c<= b2 b0 c= cPOWER b1 c- b0 b2 b3 cPOWER * part cinverse b1 b2 b3 * / ! ! ! c==> c? / c/\ cFINITE b4 c/\ cpermutes b1 b4 c/\ c= b0 cCARD * * part corbit_map b1 b3 c<= b2 b0 c= cPOWER b1 c- b0 b2 b3 cPOWER * part cinverse b1 b2 b3 f0 * / ! ! ! c==> c? / c/\ cFINITE b4 c/\ cpermutes b1 b4 c/\ c= b0 cCARD * * part corbit_map b1 b3 c<= b2 b0 c= cPOWER b1 c- b0 b2 b3 cPOWER * part cinverse b1 b2 b3 f0
+ (((orbit_map (inverse f)) x) = ((orbit_map f) x)) |- ((((CARD ((orbit_map (inverse f)) x)) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (((inverse f) ((inverse f) ((inverse f) x))) = x)) = (((CARD ((orbit_map f) x)) = (NUMERAL (BIT1 (BIT1 _0)))) ==> (((inverse f) ((inverse f) ((inverse f) x))) = x)))
T c==> c= * * part corbit_map * part cinverse f0 f1 * * part corbit_map f0 f1 c= c==> c= cCARD * * part corbit_map * part cinverse f0 f1 cNUMERAL cBIT1 cBIT1 c_0 c= cinverse f0 cinverse f0 cinverse f0 f1 f1 c==> c= cCARD * * part corbit_map f0 f1 cNUMERAL cBIT1 cBIT1 c_0 c= cinverse f0 cinverse f0 cinverse f0 f1 f1
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ (FINITE s), (((inverse f) ((inverse f) x)) = (((POWER (inverse f)) (NUMERAL (BIT0 (BIT1 _0)))) x)), ((CARD ((orbit_map f) x)) = (NUMERAL (BIT1 (BIT1 _0)))), ((permutes f) s) |- ((f x) = ((inverse f) ((inverse f) x)))
T c==> cFINITE f0 c==> c= cinverse f1 cinverse f1 f2 cPOWER * part cinverse f1 cNUMERAL cBIT0 cBIT1 c_0 f2 c==> c= cCARD * * part corbit_map f1 f2 cNUMERAL cBIT1 cBIT1 c_0 c==> cpermutes f1 f0 c= * f1 f2 cinverse f1 cinverse f1 f2
+ ((CARD ((orbit_map (inverse f)) x)) = (NUMERAL (BIT1 (BIT1 _0)))) |- (((((POWER (inverse f)) (CARD ((orbit_map (inverse f)) x))) x) = x) = ((((POWER (inverse f)) (NUMERAL (BIT1 (BIT1 _0)))) x) = x))
T c==> c= cCARD * * part corbit_map * part cinverse f0 f1 cNUMERAL cBIT1 cBIT1 c_0 c= c= cPOWER * part cinverse f0 cCARD * * part corbit_map * part cinverse f0 f1 f1 f1 c= cPOWER * part cinverse f0 cNUMERAL cBIT1 cBIT1 c_0 f1 f1
+ (!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))))) |- (((!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x)))) ==> ((\p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x)))) p)) = ((\p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x)))) p))
T c==> ! ! ! c==> c/\ cFINITE b0 cpermutes b1 b0 c= cPOWER b1 cCARD * * part corbit_map b1 b2 b2 b2 c= c==> ! ! c==> c/\ cFINITE f0 cpermutes b0 f0 c= cPOWER b0 cCARD * * part corbit_map b0 b1 b1 b1 * / ! c==> c/\ cFINITE f0 cpermutes b0 f0 c= cPOWER b0 cCARD * * part corbit_map b0 b1 b1 b1 f1 * / ! c==> c/\ cFINITE f0 cpermutes b0 f0 c= cPOWER b0 cCARD * * part corbit_map b0 b1 b1 b1 f1
+ (FINITE s), ((permutes f) s) |- (((?s. ((FINITE s) /\ ((permutes (inverse f)) s))) ==> ((((POWER (inverse f)) (CARD ((orbit_map (inverse f)) x))) x) = x)) = ((((POWER (inverse f)) (CARD ((orbit_map (inverse f)) x))) x) = x))
T c==> cFINITE f0 c==> cpermutes f1 f0 c= c==> c? / c/\ cFINITE b0 cpermutes * part cinverse f1 b0 c= cPOWER * part cinverse f1 cCARD * * part corbit_map * part cinverse f1 f2 f2 f2 c= cPOWER * part cinverse f1 cCARD * * part corbit_map * part cinverse f1 f2 f2 f2
+ (!f. (!s. (!x. (!n. (!k. (((FINITE s) /\ (((permutes f) s) /\ ((n = (CARD ((orbit_map f) x))) /\ (k <= n)))) ==> ((((POWER f) (n - k)) x) = (((POWER (inverse f)) k) x)))))))) |- (!n. (!k. (((FINITE s) /\ (((permutes f) s) /\ ((n = (CARD ((orbit_map f) x))) /\ (k <= n)))) ==> ((((POWER f) (n - k)) x) = (((POWER (inverse f)) k) x)))))
T c==> ! ! ! ! ! c==> c/\ cFINITE b1 c/\ cpermutes b0 b1 c/\ c= b3 cCARD * * part corbit_map b0 b2 c<= b4 b3 c= cPOWER b0 c- b3 b4 b2 cPOWER * part cinverse b0 b4 b2 ! ! c==> c/\ cFINITE f0 c/\ cpermutes f1 f0 c/\ c= b0 cCARD * * part corbit_map f1 f2 c<= b1 b0 c= cPOWER f1 c- b0 b1 f2 cPOWER * part cinverse f1 b1 f2
+ (FINITE s), ((f x) = (((POWER f) ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT0 (BIT1 _0))))) x)), ((CARD ((orbit_map f) x)) = (NUMERAL (BIT1 (BIT1 _0)))), ((permutes f) s) |- ((f x) = (((POWER (inverse f)) (NUMERAL (BIT0 (BIT1 _0)))) x))
T c==> cFINITE f0 c==> c= * f1 f2 cPOWER f1 c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 f2 c==> c= cCARD * * part corbit_map f1 f2 cNUMERAL cBIT1 cBIT1 c_0 c==> cpermutes f1 f0 c= * f1 f2 cPOWER * part cinverse f1 cNUMERAL cBIT0 cBIT1 c_0 f2
+ ((permutes p) s) |- (((permutes p) s) /\ (((permutes (inverse p)) s) = T))
T c==> cpermutes f0 f1 c/\ cpermutes f0 f1 c= cpermutes * part cinverse f0 f1 cT
+ ((permutes f) s) |- (((permutes f) s) = T)
T c==> cpermutes f0 f1 c= cpermutes f0 f1 cT
+ |- (((inverse f) ((inverse f) ((inverse f) x))) = (((POWER (inverse f)) (NUMERAL (BIT1 (BIT1 _0)))) x))
T c= cinverse f0 cinverse f0 cinverse f0 f1 cPOWER * part cinverse f0 cNUMERAL cBIT1 cBIT1 c_0 f1
+ (FINITE s), ((CARD ((orbit_map f) x)) = (NUMERAL (BIT1 (BIT1 _0)))), ((permutes f) s) |- (T = ((FINITE s) /\ (((permutes f) s) /\ (((NUMERAL (BIT1 (BIT1 _0))) = (CARD ((orbit_map f) x))) /\ ((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))))
T c==> cFINITE f0 c==> c= cCARD * * part corbit_map f1 f2 cNUMERAL cBIT1 cBIT1 c_0 c==> cpermutes f1 f0 c= cT c/\ cFINITE f0 c/\ cpermutes f1 f0 c/\ c= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part corbit_map f1 f2 c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((!x. ((?s. ((FINITE s) /\ (((permutes f) s) /\ ((n = (CARD ((orbit_map f) x))) /\ (k <= n))))) ==> ((((POWER f) (n - k)) x) = (((POWER (inverse f)) k) x)))) ==> ((\x. ((?s. ((FINITE s) /\ (((permutes f) s) /\ ((n = (CARD ((orbit_map f) x))) /\ (k <= n))))) ==> ((((POWER f) (n - k)) x) = (((POWER (inverse f)) k) x)))) x)) = ((\x. ((?s. ((FINITE s) /\ (((permutes f) s) /\ ((n = (CARD ((orbit_map f) x))) /\ (k <= n))))) ==> ((((POWER f) (n - k)) x) = (((POWER (inverse f)) k) x)))) x))
T c= c==> ! c==> c? / c/\ cFINITE b1 c/\ cpermutes f0 b1 c/\ c= f1 cCARD * * part corbit_map f0 b0 c<= f2 f1 c= cPOWER f0 c- f1 f2 b0 cPOWER * part cinverse f0 f2 b0 * / c==> c? / c/\ cFINITE b1 c/\ cpermutes f0 b1 c/\ c= f1 cCARD * * part corbit_map f0 b0 c<= f2 f1 c= cPOWER f0 c- f1 f2 b0 cPOWER * part cinverse f0 f2 b0 f3 * / c==> c? / c/\ cFINITE b1 c/\ cpermutes f0 b1 c/\ c= f1 cCARD * * part corbit_map f0 b0 c<= f2 f1 c= cPOWER f0 c- f1 f2 b0 cPOWER * part cinverse f0 f2 b0 f3
+ |- ((\p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> (((orbit_map (inverse p)) x) = ((orbit_map p) x))))) f)
T * / ! c==> c/\ cFINITE f0 cpermutes b0 f0 c= * * part corbit_map * part cinverse b0 b1 * * part corbit_map b0 b1 f1
+ |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c= c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
+ (!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))))), ((FINITE s) /\ ((permutes p) s)) |- ((!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))))) /\ ((((POWER p) (CARD ((orbit_map p) x))) x) = x))
T c==> ! ! ! c==> c/\ cFINITE b0 cpermutes b1 b0 c= cPOWER b1 cCARD * * part corbit_map b1 b2 b2 b2 c==> c/\ cFINITE f0 cpermutes f1 f0 c/\ ! ! ! c==> c/\ cFINITE b0 cpermutes b1 b0 c= cPOWER b1 cCARD * * part corbit_map b1 b2 b2 b2 c= cPOWER f1 cCARD * * part corbit_map f1 f2 f2 f2
+ ((f x) = (((POWER f) ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT0 (BIT1 _0))))) x)) |- (((((POWER f) ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT0 (BIT1 _0))))) x) = (((POWER (inverse f)) (NUMERAL (BIT0 (BIT1 _0)))) x)) = ((f x) = (((POWER (inverse f)) (NUMERAL (BIT0 (BIT1 _0)))) x)))
T c==> c= * f0 f1 cPOWER f0 c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 f1 c= c= cPOWER f0 c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 f1 cPOWER * part cinverse f0 cNUMERAL cBIT0 cBIT1 c_0 f1 c= * f0 f1 cPOWER * part cinverse f0 cNUMERAL cBIT0 cBIT1 c_0 f1
+ (FINITE s), ((CARD ((orbit_map f) x)) = (NUMERAL (BIT1 (BIT1 _0)))), ((permutes f) s) |- (((?s. ((FINITE s) /\ (((permutes f) s) /\ (((NUMERAL (BIT1 (BIT1 _0))) = (CARD ((orbit_map f) x))) /\ ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))))))) ==> ((((POWER f) ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0)))) x) = (((POWER (inverse f)) (NUMERAL (BIT1 _0))) x))) = ((((POWER f) ((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0)))) x) = (((POWER (inverse f)) (NUMERAL (BIT1 _0))) x)))
T c==> cFINITE f0 c==> c= cCARD * * part corbit_map f1 f2 cNUMERAL cBIT1 cBIT1 c_0 c==> cpermutes f1 f0 c= c==> c? / c/\ cFINITE b0 c/\ cpermutes f1 b0 c/\ c= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part corbit_map f1 f2 c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cPOWER f1 c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 f2 cPOWER * part cinverse f1 cNUMERAL cBIT1 c_0 f2 c= cPOWER f1 c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 f2 cPOWER * part cinverse f1 cNUMERAL cBIT1 c_0 f2
+ ((FINITE s) /\ (((permutes f) s) /\ ((CARD ((orbit_map f) x)) = (NUMERAL (BIT1 (BIT1 _0)))))) |- (((FINITE s) /\ (((permutes f) s) /\ ((CARD ((orbit_map f) x)) = (NUMERAL (BIT1 (BIT1 _0)))))) /\ (((f x) = ((inverse f) ((inverse f) x))) /\ (((f (f x)) = ((inverse f) x)) /\ (((inverse f) ((inverse f) ((inverse f) x))) = x))))
T c==> c/\ cFINITE f0 c/\ cpermutes f1 f0 c= cCARD * * part corbit_map f1 f2 cNUMERAL cBIT1 cBIT1 c_0 c/\ c/\ cFINITE f0 c/\ cpermutes f1 f0 c= cCARD * * part corbit_map f1 f2 cNUMERAL cBIT1 cBIT1 c_0 c/\ c= * f1 f2 cinverse f1 cinverse f1 f2 c/\ c= * f1 * f1 f2 cinverse f1 f2 c= cinverse f1 cinverse f1 cinverse f1 f2 f2
+ |- (((!x. (((\s. ((FINITE s) /\ ((permutes p) s))) x) ==> ((!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))))) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x)))) ==> ((?s. ((FINITE s) /\ ((permutes p) s))) ==> ((!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))))) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x)))) = ((?s. ((FINITE s) /\ ((permutes p) s))) ==> ((!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))))) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))))
T c= c==> ! c==> * / c/\ cFINITE b1 cpermutes f0 b1 b0 c==> ! ! ! c==> c/\ cFINITE b1 cpermutes b2 b1 c= cPOWER b2 cCARD * * part corbit_map b2 b3 b3 b3 c= cPOWER f0 cCARD * * part corbit_map f0 f1 f1 f1 c==> c? / c/\ cFINITE b0 cpermutes f0 b0 c==> ! ! ! c==> c/\ cFINITE b0 cpermutes b1 b0 c= cPOWER b1 cCARD * * part corbit_map b1 b2 b2 b2 c= cPOWER f0 cCARD * * part corbit_map f0 f1 f1 f1 c==> c? / c/\ cFINITE b0 cpermutes f0 b0 c==> ! ! ! c==> c/\ cFINITE b0 cpermutes b1 b0 c= cPOWER b1 cCARD * * part corbit_map b1 b2 b2 b2 c= cPOWER f0 cCARD * * part corbit_map f0 f1 f1 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (!s. (!p. (!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))))) |- (((!x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))) ==> ((\x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))) x)) = ((\x. (((FINITE s) /\ ((permutes p) s)) ==> ((((POWER p) (CARD ((orbit_map p) x))) x) = x))) x))
T c==> ! ! ! c==> c/\ cFINITE b0 cpermutes b1 b0 c= cPOWER b1 cCARD * * part corbit_map b1 b2 b2 b2 c= c==> ! c==> c/\ cFINITE f0 cpermutes f1 f0 c= cPOWER f1 cCARD * * part corbit_map f1 b0 b0 b0 * / c==> c/\ cFINITE f0 cpermutes f1 f0 c= cPOWER f1 cCARD * * part corbit_map f1 b0 b0 b0 f2 * / c==> c/\ cFINITE f0 cpermutes f1 f0 c= cPOWER f1 cCARD * * part corbit_map f1 b0 b0 b0 f2
- ((permutes f) s) |- (T = ((permutes f) s))
T c==> cpermutes f0 f1 c= cT cpermutes f0 f1
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
- |- (T = (((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0))))
T c= cT c= c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0
- |- (((!f. (((POWER f) (NUMERAL _0)) = I)) ==> ((\f. (((POWER f) (NUMERAL _0)) = I)) f)) = ((\f. (((POWER f) (NUMERAL _0)) = I)) f))
T c= c==> ! c= * * part cPOWER b0 cNUMERAL c_0 part cI * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0 * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0
- |- (T = ((NUMERAL (BIT1 (BIT1 _0))) = (SUC (NUMERAL (BIT0 (BIT1 _0))))))
T c= cT c= cNUMERAL cBIT1 cBIT1 c_0 cSUC cNUMERAL cBIT0 cBIT1 c_0
- |- (F = (~ T))
T c= cF c~ cT
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- |- ((~ T) = F)
T c= c~ cT cF
- |- ((SUC (NUMERAL (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 (BIT1 _0))))
T c= cSUC cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (T = (((NUMERAL (BIT1 (BIT1 _0))) - (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT1 _0)))))
T c= cT c= c- cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- |- ((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))
T c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- (((POWER f) (NUMERAL _0)) = I)
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
- |- ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0))))
T c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (T = ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))))
T c= cT c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((\f. (((POWER f) (NUMERAL _0)) = I)) f)
T * / c= * * part cPOWER b0 cNUMERAL c_0 part cI f0
- |- (T = ((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))))
T c= cT c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (~ (~ T))
T c~ c~ cT
