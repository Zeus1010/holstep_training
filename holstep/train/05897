N Reduction3.subdiv_single_step_paired
C |- (!p. (!vo. (((subdiv_single_step p) vo) = (((COND ((FST (FST p)) = NONE)) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) (((COND (vo = NONE)) (((FST (FST p)) , (SUC (SND (FST p)))) , ((FST (SND p)) , (SND (SND p))))) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex (FST (SND p))) u) = v) /\ ((SND (FST p)) = (NUMERAL _0)))) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END ((vo , (NUMERAL _0)) , (f2 , g')))))))))) (((((splitFace (SND (SND p))) u) v) (FST (SND p))) ws))))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))) (the (FST (FST p))))))) (the vo)))))))
T c= csubdiv_single_step f0 f1 cCOND c= cFST cFST f0 cNONE c, c, f1 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cCOND c= f1 cNONE c, c, cFST cFST f0 cSUC cSND cFST f0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex cFST cSND f0 b1 b0 c= cSND cFST f0 cNUMERAL c_0 c, c, f1 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b3 c, b4 c, b5 b6 cLET_END c, c, f1 cNUMERAL c_0 c, b5 b6 csplitFace cSND cSND f0 b1 b0 cFST cSND f0 b2 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cthe cFST cFST f0 cthe f1
D TRUTH
A |- T
T cT
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D PAIR
A |- (!x. (((FST x) , (SND x)) = x))
T c= c, cFST f0 cSND f0 f0
D FORALL_PAIR_THM
A |- (!P. ((!p. (P p)) = (!p1. (!p2. (P (p1 , p2))))))
T c= ! * f0 b0 ! ! * f0 c, b0 b1
D Reduction3.subdiv_single_step
A |- (!f. (!g. (!n. (!uo. (!vo. (((subdiv_single_step ((uo , n) , (f , g))) vo) = (((COND (uo = NONE)) ((vo , (NUMERAL _0)) , (f , g))) (((COND (vo = NONE)) ((uo , (SUC n)) , (f , g))) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex f) u) = v) /\ (n = (NUMERAL _0)))) ((vo , (NUMERAL _0)) , (f , g))) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END ((vo , (NUMERAL _0)) , (f2 , g')))))))))) (((((splitFace g) u) v) f) ws))))) ((upt (countVertices g)) ((countVertices g) + n))))))) (the uo))))) (the vo))))))))))
T c= csubdiv_single_step c, c, f0 f1 c, f2 f3 f4 cCOND c= f0 cNONE c, c, f4 cNUMERAL c_0 c, f2 f3 cCOND c= f4 cNONE c, c, f0 cSUC f1 c, f2 f3 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex f2 b1 b0 c= f1 cNUMERAL c_0 c, c, f4 cNUMERAL c_0 c, f2 f3 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b3 c, b4 c, b5 b6 cLET_END c, c, f4 cNUMERAL c_0 c, b5 b6 csplitFace f3 b1 b0 f2 b2 cupt ccountVertices f3 c+ ccountVertices f3 f1 cthe f0 cthe f4
+ |- ((!p2. ((GEQ (f ((p1 , p2) , ((p1' , p2') , (p1 , p2))))) (LET_END ((vo , (NUMERAL _0)) , ((p1' , p2') , (p1 , p2)))))) = (!p1. (!p2. ((GEQ (f ((p1 , p2) , ((p1' , p2') , (p1 , (p1 , p2)))))) (LET_END ((vo , (NUMERAL _0)) , ((p1' , p2') , (p1 , (p1 , p2)))))))))
T c= ! cGEQ * f0 c, c, f1 f2 c, c, f3 f4 c, f5 b0 cLET_END c, c, f6 cNUMERAL c_0 c, c, f3 f4 c, f5 b0 ! ! cGEQ * f0 c, c, f1 f2 c, c, f3 f4 c, f5 c, b0 b1 cLET_END c, c, f6 cNUMERAL c_0 c, c, f3 f4 c, f5 c, b0 b1
+ |- ((\vo. (((subdiv_single_step ((uo , n) , (f , g))) vo) = (((COND (uo = NONE)) ((vo , (NUMERAL _0)) , (f , g))) (((COND (vo = NONE)) ((uo , (SUC n)) , (f , g))) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex f) u) = v) /\ (n = (NUMERAL _0)))) ((vo , (NUMERAL _0)) , (f , g))) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END ((vo , (NUMERAL _0)) , (f2 , g')))))))))) (((((splitFace g) u) v) f) ws))))) ((upt (countVertices g)) ((countVertices g) + n))))))) (the uo))))) (the vo)))))) vo)
T * / c= csubdiv_single_step c, c, f0 f1 c, f2 f3 b0 cCOND c= f0 cNONE c, c, b0 cNUMERAL c_0 c, f2 f3 cCOND c= b0 cNONE c, c, f0 cSUC f1 c, f2 f3 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex f2 b2 b1 c= f1 cNUMERAL c_0 c, c, b0 cNUMERAL c_0 c, f2 f3 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b4 c, b5 c, b6 b7 cLET_END c, c, b0 cNUMERAL c_0 c, b6 b7 csplitFace f3 b2 b1 f2 b3 cupt ccountVertices f3 c+ ccountVertices f3 f1 cthe f0 cthe b0 f4
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
