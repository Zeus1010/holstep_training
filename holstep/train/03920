N Hypermap.inverse_hypermap_maps
C |- (!H. (((inverse (edge_map H)) = ((node_map H) o (face_map H))) /\ (((inverse (node_map H)) = ((face_map H) o (edge_map H))) /\ ((inverse (face_map H)) = ((edge_map H) o (node_map H))))))
T c/\ c= * part cinverse * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 c/\ c= * part cinverse * part cnode_map f0 * * part co * part cface_map f0 * part cedge_map f0 c= * part cinverse * part cface_map f0 * * part co * part cedge_map f0 * part cnode_map f0
D TRUTH
A |- T
T cT
D I_O_ID
A |- (!f. (((I o f) = f) /\ ((f o I) = f)))
T c/\ c= * * part co part cI f0 f0 c= * * part co f0 part cI f0
D Hypermap.hypermap_lemma
A |- (!H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I))))))
T c/\ cFINITE * part cdart f0 c/\ cpermutes * part cedge_map f0 * part cdart f0 c/\ cpermutes * part cnode_map f0 * part cdart f0 c/\ cpermutes * part cface_map f0 * part cdart f0 c= * * part co * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 part cI
D Hypermap.edge_map_and_darts
A |- (!H. ((FINITE (dart H)) /\ ((permutes (edge_map H)) (dart H))))
T c/\ cFINITE * part cdart f0 cpermutes * part cedge_map f0 * part cdart f0
D Hypermap.node_map_and_darts
A |- (!H. ((FINITE (dart H)) /\ ((permutes (node_map H)) (dart H))))
T c/\ cFINITE * part cdart f0 cpermutes * part cnode_map f0 * part cdart f0
D Hypermap.face_map_and_darts
A |- (!H. ((FINITE (dart H)) /\ ((permutes (face_map H)) (dart H))))
T c/\ cFINITE * part cdart f0 cpermutes * part cface_map f0 * part cdart f0
D Hypermap.LEFT_INVERSE_EQUATION
A |- (!s. (!u. (!v. (!w. ((((permutes u) s) /\ ((u o v) = w)) ==> (v = ((inverse u) o w)))))))
T c==> c/\ cpermutes f0 f1 c= * * part co f0 f2 f3 c= f2 * * part co * part cinverse f0 f3
D Hypermap.hypermap_cyclic
A |- (!H. ((((node_map H) o ((face_map H) o (edge_map H))) = I) /\ (((face_map H) o ((edge_map H) o (node_map H))) = I)))
T c/\ c= * * part co * part cnode_map f0 * * part co * part cface_map f0 * part cedge_map f0 part cI c= * * part co * part cface_map f0 * * part co * part cedge_map f0 * part cnode_map f0 part cI
+ |- ((((inverse (node_map H)) o I) = ((face_map H) o (edge_map H))) ==> ((inverse (node_map H)) = ((face_map H) o (edge_map H))))
T c==> c= * * part co * part cinverse * part cnode_map f0 part cI * * part co * part cface_map f0 * part cedge_map f0 c= * part cinverse * part cnode_map f0 * * part co * part cface_map f0 * part cedge_map f0
+ |- (((!u. (!v. (!w. ((((permutes u) s) /\ ((u o v) = w)) ==> (v = ((inverse u) o w)))))) ==> ((\u. (!v. (!w. ((((permutes u) s) /\ ((u o v) = w)) ==> (v = ((inverse u) o w)))))) u)) = ((\u. (!v. (!w. ((((permutes u) s) /\ ((u o v) = w)) ==> (v = ((inverse u) o w)))))) u))
T c= c==> ! ! ! c==> c/\ cpermutes b0 f0 c= * * part co b0 b1 b2 c= b1 * * part co * part cinverse b0 b2 * / ! ! c==> c/\ cpermutes b0 f0 c= * * part co b0 b1 b2 c= b1 * * part co * part cinverse b0 b2 f1 * / ! ! c==> c/\ cpermutes b0 f0 c= * * part co b0 b1 b2 c= b1 * * part co * part cinverse b0 b2 f1
+ |- ((((node_map H) o ((face_map H) o (edge_map H))) = I) ==> ((inverse (node_map H)) = ((face_map H) o (edge_map H))))
T c==> c= * * part co * part cnode_map f0 * * part co * part cface_map f0 * part cedge_map f0 part cI c= * part cinverse * part cnode_map f0 * * part co * part cface_map f0 * part cedge_map f0
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- |- ((I o f) = f)
T c= * * part co part cI f0 f0
- |- ((x = x) = T)
T c= c= f0 f0 cT
