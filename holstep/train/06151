N List_hypermap.dart_in_find_pair_list
C |- (!d. (!L. (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))))
T c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0
D TRUTH
A |- T
T cT
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D ssreflect_eq_def
A |- (!v. (!P. (((ssreflect_eq v) P) = P)))
T c= cssreflect_eq f0 f1 f1
D bool_elim
A |- (!P. (((P T) /\ (P F)) ==> (!x. (P x))))
T c==> c/\ * f0 cT * f0 cF ! * f0 b0
D Seq.mem_cat
A |- (!x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))))
T c= cMEM f0 ccat f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
D Seq.foldr
A |- (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))
T c/\ c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3 c= cfoldr f0 f1 cNIL f1
D Seq.zip
A |- ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL)))
T c/\ c= czip cCONS f0 f1 cCONS f2 f3 cCONS c, f0 f2 czip f1 f3 c/\ c= czip cNIL f3 cNIL c= czip f1 cNIL cNIL
D List_hypermap.list_pairs
A |- (!list. ((list_pairs list) = ((zip list) ((rot (NUMERAL (BIT1 _0))) list))))
T c= clist_pairs f0 czip f0 crot cNUMERAL cBIT1 c_0 f0
D List_hypermap.list_of_darts
A |- (!L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L)))
T c= clist_of_darts f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f0
D List_hypermap.find_pair_list
A |- (!h. (!t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))))
T c/\ c= cfind_pair_list cNIL f0 cNIL c= cfind_pair_list cCONS f1 f2 f0 cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0
+ |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))))
T c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1
- (((MEM d) (list_pairs h)) = x) |- ((((MEM d) (list_pairs h)) = x) /\ (?x. (((MEM d) (list_pairs h)) = x)))
T c==> c= cMEM f0 clist_pairs f1 f2 c/\ c= cMEM f0 clist_pairs f1 f2 c? / c= cMEM f0 clist_pairs f1 b0
+ |- ((t = F) = (~ t))
T c= c= f0 cF c~ f0
+ |- ((((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = (((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))))
T c= c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cfind_pair_list f1 f0
+ |- (((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) /\ (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))))) ==> (!x. (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = x)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND x) h) ((find_pair_list t) d))))))))
T c==> c/\ c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f3 f1 c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 ! c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 b0 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f3 cMEM f1 clist_pairs cCOND b0 f2 cfind_pair_list f3 f1
+ |- (((find_pair_list NIL) d) = NIL)
T c= cfind_pair_list cNIL f0 cNIL
- |- ((((MEM d) (list_pairs h)) = x) ==> (?x. (((MEM d) (list_pairs h)) = x)))
T c==> c= cMEM f0 clist_pairs f1 f2 c? / c= cMEM f0 clist_pairs f1 b0
- ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cT * f0 cF c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- ((((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) /\ (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))))) ==> (!x. (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = x)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND x) h) ((find_pair_list t) d)))))))) = (!x. (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = x)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND x) h) ((find_pair_list t) d))))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= c==> c/\ c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 cT c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cT f3 cfind_pair_list f1 f0 c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 cF c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cF f3 cfind_pair_list f1 f0 ! c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 b0 c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cMEM f0 clist_pairs cCOND b0 f3 cfind_pair_list f1 f0 ! c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 b0 c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cMEM f0 clist_pairs cCOND b0 f3 cfind_pair_list f1 f0
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (((MEM d) NIL) = ((MEM d) (list_pairs NIL)))
T c= cMEM f0 cNIL cMEM f0 clist_pairs cNIL
+ ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) /\ ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d))))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c/\ cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f3 f1 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
+ |- (P = ((ssreflect_eq mem_d) P))
T c= f0 cssreflect_eq f1 f0
+ |- ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)
T * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- |- ((\s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL)))) s)
T * / c/\ c= czip cCONS f0 b0 cCONS f1 f2 cCONS c, f0 f1 czip b0 f2 c/\ c= czip cNIL f2 cNIL c= czip b0 cNIL cNIL f3
+ |- (((!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) ==> ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)) = ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2))
T c= c==> ! c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
+ |- ((((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL)) = ((MEM d) (list_pairs ((find_pair_list NIL) d)))) = (((MEM d) (list_of_darts NIL)) = ((MEM d) (list_pairs ((find_pair_list NIL) d)))))
T c= c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cMEM f0 clist_pairs cfind_pair_list cNIL f0 c= cMEM f0 clist_of_darts cNIL cMEM f0 clist_pairs cfind_pair_list cNIL f0
- ((\L1. (L = L1)) L1) |- (((\L1. (L = L1)) L1) /\ (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c= cMEM f2 clist_of_darts f0 cMEM f2 clist_pairs cfind_pair_list f0 f2
+ |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- |- ((((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (?x. (((MEM d) (list_pairs h)) = x))) = T)
T c= c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c? / c= cMEM f0 clist_pairs f1 b0 cT
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c==> * / c= cMEM f0 clist_pairs f2 b0 f3 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0
- (((MEM d) (list_pairs h)) = x), (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND x) h) ((find_pair_list t) d)))))
T c==> c= cMEM f0 clist_pairs f1 f2 c==> c= cMEM f0 clist_of_darts f3 cMEM f0 clist_pairs cfind_pair_list f3 f0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f0 clist_pairs cCOND f2 f1 cfind_pair_list f3 f0
+ |- ((\d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) d)
T * / c/\ c= cfind_pair_list cNIL b0 cNIL c= cfind_pair_list cCONS f0 f1 b0 cCOND cMEM b0 clist_pairs f0 f0 cfind_pair_list f1 b0 f2
+ ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L)) |- ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))
T c==> c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 clist_of_darts f0 c= clist_of_darts f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f0
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f4 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f4 f1 f5 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f4 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f4 f1 c==> f3 f5
+ |- (((!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) ==> ((\d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) d)) = ((\d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) d))
T c= c==> ! c/\ c= cfind_pair_list cNIL b0 cNIL c= cfind_pair_list cCONS f0 f1 b0 cCOND cMEM b0 clist_pairs f0 f0 cfind_pair_list f1 b0 * / c/\ c= cfind_pair_list cNIL b0 cNIL c= cfind_pair_list cCONS f0 f1 b0 cCOND cMEM b0 clist_pairs f0 f0 cfind_pair_list f1 b0 f2 * / c/\ c= cfind_pair_list cNIL b0 cNIL c= cfind_pair_list cCONS f0 f1 b0 cCOND cMEM b0 clist_pairs f0 f0 cfind_pair_list f1 b0 f2
- |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> q')))
T c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 f4 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f4
+ |- ((\v. (!P. (((ssreflect_eq v) P) = P))) v)
T * / ! c= cssreflect_eq b0 b1 b1 f0
- |- ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)
T * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
- |- ((((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))) = T)
T c= c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 cT
+ ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((T \/ ((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = T) = ((T \/ ((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= c\/ cT cMEM f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cT c= c\/ cT cMEM f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
+ |- ((\t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))) t)
T * / ! c/\ c= cfind_pair_list cNIL b1 cNIL c= cfind_pair_list cCONS f0 b0 b1 cCOND cMEM b1 clist_pairs f0 f0 cfind_pair_list b0 b1 f1
- |- ((L = L1) ==> (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))
T c==> c= f0 f1 c= cMEM f2 clist_of_darts f0 cMEM f2 clist_pairs cfind_pair_list f0 f2
+ |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) ==> ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1)) = ((\s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2))))) s1))
T c= c==> ! ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 ccat b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ |- ((\list. ((list_pairs list) = ((zip list) ((rot (NUMERAL (BIT1 _0))) list)))) list)
T * / c= clist_pairs b0 czip b0 crot cNUMERAL cBIT1 c_0 b0 f0
+ |- ((((foldr f) z0) NIL) = z0)
T c= cfoldr f0 f1 cNIL f1
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))) = ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) /\ (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))))))
T c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c/\ c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f3 f1 c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
- (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- ((((MEM d) (list_pairs ((find_pair_list t) d))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= c= cMEM f0 clist_pairs cfind_pair_list f1 f0 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- ((((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))) = T)
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= c==> * / c= cMEM f0 clist_pairs f2 b0 f3 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 cT
+ |- ((((MEM d) (list_of_darts NIL)) = ((MEM d) (list_pairs ((find_pair_list NIL) d)))) /\ (!a0. (!a1. ((((MEM d) (list_of_darts a1)) = ((MEM d) (list_pairs ((find_pair_list a1) d)))) ==> (((MEM d) (list_of_darts ((CONS a0) a1))) = ((MEM d) (list_pairs ((find_pair_list ((CONS a0) a1)) d))))))))
T c/\ c= cMEM f0 clist_of_darts cNIL cMEM f0 clist_pairs cfind_pair_list cNIL f0 ! ! c==> c= cMEM f0 clist_of_darts b1 cMEM f0 clist_pairs cfind_pair_list b1 f0 c= cMEM f0 clist_of_darts cCONS b0 b1 cMEM f0 clist_pairs cfind_pair_list cCONS b0 b1 f0
- |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))))
T c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f3 f1 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
+ |- ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> q')))
T c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f3 f1 f4 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f3 f1 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 f4
+ |- ((\P. (P = ((ssreflect_eq mem_d) P))) P)
T * / c= b0 cssreflect_eq f0 b0 f1
- |- (!L1. (((\L1. (L = L1)) L1) ==> (?L1. (L = L1))))
T c==> * / c= f0 b0 f1 c? / c= f0 b0
- |- ((\t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL))))) t)
T * / ! c/\ c= czip cCONS f0 b1 cCONS f1 b0 cCONS c, f0 f1 czip b1 b0 c/\ c= czip cNIL b0 cNIL c= czip b1 cNIL cNIL f2
- ((\L1. (L = L1)) L1) |- (((L = L1) ==> (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))) = (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c= cMEM f2 clist_of_darts f0 cMEM f2 clist_pairs cfind_pair_list f0 f2 c= cMEM f2 clist_of_darts f0 cMEM f2 clist_pairs cfind_pair_list f0 f2
- |- ((\L1. (L = L1)) L)
T * / c= f0 b0 f0
+ |- ((((MEM d) (list_pairs h)) = ((MEM d) (list_pairs h))) = ((\x. (((MEM d) (list_pairs h)) = x)) ((MEM d) (list_pairs h))))
T c= c= cMEM f0 clist_pairs f1 cMEM f0 clist_pairs f1 * / c= cMEM f0 clist_pairs f1 b0 cMEM f0 clist_pairs f1
- |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- ((\x. (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = x)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND x) h) ((find_pair_list t) d))))))) x)
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 * / c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 b0 c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cMEM f0 clist_pairs cCOND b0 f3 cfind_pair_list f1 f0 f4
+ |- (((!P. (((ssreflect_eq v) P) = P)) ==> ((\P. (((ssreflect_eq v) P) = P)) P)) = ((\P. (((ssreflect_eq v) P) = P)) P))
T c= c==> ! c= cssreflect_eq f0 b0 b0 * / c= cssreflect_eq f0 b0 b0 f1 * / c= cssreflect_eq f0 b0 b0 f1
+ ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((MEM d) (list_pairs h)) = x)
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c= cMEM f0 clist_pairs f1 f2
- |- (((!x. (((\L1. (L = L1)) x) ==> (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))) ==> ((?L1. (L = L1)) ==> (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))) = ((?L1. (L = L1)) ==> (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))))
T c= c==> ! c==> * / c= f0 b1 b0 c= cMEM f1 clist_of_darts f0 cMEM f1 clist_pairs cfind_pair_list f0 f1 c==> c? / c= f0 b0 c= cMEM f1 clist_of_darts f0 cMEM f1 clist_pairs cfind_pair_list f0 f1 c==> c? / c= f0 b0 c= cMEM f1 clist_of_darts f0 cMEM f1 clist_pairs cfind_pair_list f0 f1
+ |- (?x. (((MEM d) (list_pairs h)) = x))
T c? / c= cMEM f0 clist_pairs f1 b0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ |- ((\P. (((ssreflect_eq v) P) = P)) P)
T * / c= cssreflect_eq f0 b0 b0 f1
+ |- (((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h))))) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> q')))) = ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> q'))))
T c= c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 f4 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f4 c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 f4 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f4
- (L = L1) |- (((MEM d) (list_of_darts L1)) = ((MEM d) (list_pairs ((find_pair_list L) d))))
T c==> c= f0 f1 c= cMEM f2 clist_of_darts f1 cMEM f2 clist_pairs cfind_pair_list f0 f2
- |- ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> q')))
T c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 f4 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 f4
- (L = L1) |- ((((MEM d) (list_of_darts L1)) = ((MEM d) (list_pairs ((find_pair_list L1) d)))) = (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))
T c==> c= f0 f1 c= c= cMEM f2 clist_of_darts f1 cMEM f2 clist_pairs cfind_pair_list f1 f2 c= cMEM f2 clist_of_darts f0 cMEM f2 clist_pairs cfind_pair_list f0 f2
+ ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (~ ((MEM d) (list_pairs h)))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c~ cMEM f1 clist_pairs f2
- (L = L1) |- ((((MEM d) (list_of_darts L1)) = ((MEM d) (list_pairs ((find_pair_list L1) d)))) = (((MEM d) (list_of_darts L1)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))
T c==> c= f0 f1 c= c= cMEM f2 clist_of_darts f1 cMEM f2 clist_pairs cfind_pair_list f1 f2 c= cMEM f2 clist_of_darts f1 cMEM f2 clist_pairs cfind_pair_list f0 f2
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 cF c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cF f3 cfind_pair_list f1 f0
- (L = L1) |- ((L = L1) /\ (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))
T c==> c= f0 f1 c/\ c= f0 f1 c= cMEM f2 clist_of_darts f0 cMEM f2 clist_pairs cfind_pair_list f0 f2
+ |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)) = ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- |- (((!x. (!y. (!t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL))))))) ==> ((\x. (!y. (!t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL))))))) x)) = ((\x. (!y. (!t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL))))))) x))
T c= c==> ! ! ! ! c/\ c= czip cCONS b0 b3 cCONS b1 b2 cCONS c, b0 b1 czip b3 b2 c/\ c= czip cNIL b2 cNIL c= czip b3 cNIL cNIL * / ! ! ! c/\ c= czip cCONS b0 b3 cCONS b1 b2 cCONS c, b0 b1 czip b3 b2 c/\ c= czip cNIL b2 cNIL c= czip b3 cNIL cNIL f0 * / ! ! ! c/\ c= czip cCONS b0 b3 cCONS b1 b2 cCONS c, b0 b1 czip b3 b2 c/\ c= czip cNIL b2 cNIL c= czip b3 cNIL cNIL f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
- (((MEM d) (list_pairs h)) = x) |- ((\x. (((MEM d) (list_pairs h)) = x)) x)
T c==> c= cMEM f0 clist_pairs f1 f2 * / c= cMEM f0 clist_pairs f1 b0 f2
+ (((MEM d) (list_pairs h)) = x), (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))
T c==> c= cMEM f0 clist_pairs f1 f2 c==> c= cMEM f0 clist_of_darts f3 cMEM f0 clist_pairs cfind_pair_list f3 f0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0
+ |- ((\q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 c==> f3 b0 f5
+ |- ((((MEM d) NIL) = ((MEM d) NIL)) = (((MEM d) NIL) = ((MEM d) ((zip NIL) ((rot (NUMERAL (BIT1 _0))) NIL)))))
T c= c= cMEM f0 cNIL cMEM f0 cNIL c= cMEM f0 cNIL cMEM f0 czip cNIL crot cNUMERAL cBIT1 c_0 cNIL
- |- (((!p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs f2 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs f2 c==> b0 b1 * / ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs f2 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs f2 c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs f2 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs f2 c==> b0 b1 f4
+ |- ((!a0. (!a1. ((((MEM d) (list_of_darts a1)) = ((MEM d) (list_pairs ((find_pair_list a1) d)))) ==> (((MEM d) (list_of_darts ((CONS a0) a1))) = ((MEM d) (list_pairs ((find_pair_list ((CONS a0) a1)) d))))))) = ((((MEM d) (list_of_darts NIL)) = ((MEM d) (list_pairs ((find_pair_list NIL) d)))) /\ (!a0. (!a1. ((((MEM d) (list_of_darts a1)) = ((MEM d) (list_pairs ((find_pair_list a1) d)))) ==> (((MEM d) (list_of_darts ((CONS a0) a1))) = ((MEM d) (list_pairs ((find_pair_list ((CONS a0) a1)) d)))))))))
T c= ! ! c==> c= cMEM f0 clist_of_darts b1 cMEM f0 clist_pairs cfind_pair_list b1 f0 c= cMEM f0 clist_of_darts cCONS b0 b1 cMEM f0 clist_pairs cfind_pair_list cCONS b0 b1 f0 c/\ c= cMEM f0 clist_of_darts cNIL cMEM f0 clist_pairs cfind_pair_list cNIL f0 ! ! c==> c= cMEM f0 clist_of_darts b1 cMEM f0 clist_pairs cfind_pair_list b1 f0 c= cMEM f0 clist_of_darts cCONS b0 b1 cMEM f0 clist_pairs cfind_pair_list cCONS b0 b1 f0
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (!x. (P x))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF ! * f0 b0
+ |- ((\h. (!t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))) h)
T * / ! ! c/\ c= cfind_pair_list cNIL b2 cNIL c= cfind_pair_list cCONS b0 b1 b2 cCOND cMEM b2 clist_pairs b0 b0 cfind_pair_list b1 b2 f0
+ (((MEM d) (list_pairs h)) = x) |- ((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = x))
T c==> c= cMEM f0 clist_pairs f1 f2 cssreflect_eq f3 c= cMEM f0 clist_pairs f1 f2
+ |- ((\L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) L)
T * / c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 f0
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
+ |- (T = ((~ P) = (P = F)))
T c= cT c= c~ f0 c= f0 cF
- |- ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)
T * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
- |- ((L = L1) = ((\L1. (L = L1)) L1))
T c= c= f0 f1 * / c= f0 b0 f1
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) /\ (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c/\ c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 cT c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cT f3 cfind_pair_list f1 f0 c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 cF c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cF f3 cfind_pair_list f1 f0
- (((MEM d) (list_pairs h)) = x) |- ((((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND x) h) ((find_pair_list t) d))))) = (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))
T c==> c= cMEM f0 clist_pairs f1 f2 c= c= cMEM f0 * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f0 clist_pairs cCOND f2 f1 cfind_pair_list f3 f0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0
- |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 f5 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 c==> f3 f5
+ |- ((\p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c==> b0 b1 f4
+ |- (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d))))))
T c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f3 f1
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 ! c==> * / c= cMEM f0 clist_pairs f2 b1 b0 c= cMEM f0 * * / / ccat clist_pairs b1 b2 f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0
+ |- ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))
T c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 clist_of_darts f0
- |- (((!t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL))))) ==> ((\t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL))))) t)) = ((\t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL))))) t))
T c= c==> ! ! c/\ c= czip cCONS f0 b1 cCONS f1 b0 cCONS c, f0 f1 czip b1 b0 c/\ c= czip cNIL b0 cNIL c= czip b1 cNIL cNIL * / ! c/\ c= czip cCONS f0 b1 cCONS f1 b0 cCONS c, f0 f1 czip b1 b0 c/\ c= czip cNIL b0 cNIL c= czip b1 cNIL cNIL f2 * / ! c/\ c= czip cCONS f0 b1 cCONS f1 b0 cCONS c, f0 f1 czip b1 b0 c/\ c= czip cNIL b0 cNIL c= czip b1 cNIL cNIL f2
+ |- (((!L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) ==> ((\L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) L)) = ((\L. ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L))) L))
T c= c==> ! c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 * / c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 f0 * / c= clist_of_darts b0 cfoldr / / ccat clist_pairs b1 b2 cNIL b0 f0
- |- (((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))) = (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)
T * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
+ ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) /\ (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c/\ cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
+ |- (!a0. (!a1. ((((MEM d) (list_of_darts a1)) = ((MEM d) (list_pairs ((find_pair_list a1) d)))) ==> (((MEM d) (list_of_darts ((CONS a0) a1))) = ((MEM d) (list_pairs ((find_pair_list ((CONS a0) a1)) d)))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= cMEM f0 clist_of_darts cCONS f2 f1 cMEM f0 clist_pairs cfind_pair_list cCONS f2 f1 f0
+ |- (((MEM d) (list_of_darts NIL)) = ((MEM d) (list_pairs ((find_pair_list NIL) d))))
T c= cMEM f0 clist_of_darts cNIL cMEM f0 clist_pairs cfind_pair_list cNIL f0
+ |- ((((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) = (((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))
T c= c= cMEM f0 * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f2 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0 c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f1 f2 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0
+ ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((MEM d) (list_pairs h)) = T)
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 clist_pairs f2 cT
- |- (((!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (?x. (((MEM d) (list_pairs h)) = x)))) ==> ((?x. (((MEM d) (list_pairs h)) = x)) ==> (?x. (((MEM d) (list_pairs h)) = x)))) = ((?x. (((MEM d) (list_pairs h)) = x)) ==> (?x. (((MEM d) (list_pairs h)) = x))))
T c= c==> ! c==> * / c= cMEM f0 clist_pairs f1 b1 b0 c? / c= cMEM f0 clist_pairs f1 b1 c==> c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0 c==> c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0
+ |- ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 f5 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 c==> f3 f5
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))), ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c/\ c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
- |- (((?L1. (L = L1)) ==> (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))) = (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))
T c= c==> c? / c= f0 b0 c= cMEM f1 clist_of_darts f0 cMEM f1 clist_pairs cfind_pair_list f0 f1 c= cMEM f1 clist_of_darts f0 cMEM f1 clist_pairs cfind_pair_list f0 f1
+ |- ((!a1. ((((MEM d) (list_of_darts a1)) = ((MEM d) (list_pairs ((find_pair_list a1) d)))) ==> (((MEM d) (list_of_darts ((CONS h) a1))) = ((MEM d) (list_pairs ((find_pair_list ((CONS h) a1)) d)))))) = T)
T c= ! c==> c= cMEM f0 clist_of_darts b0 cMEM f0 clist_pairs cfind_pair_list b0 f0 c= cMEM f0 clist_of_darts cCONS f1 b0 cMEM f0 clist_pairs cfind_pair_list cCONS f1 b0 f0 cT
+ |- (((!p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c==> b0 b1 f4
- ((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!x. (P x)))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! * f0 b0
+ |- ((((MEM d) NIL) = ((MEM d) (list_pairs NIL))) = (((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL)) = ((MEM d) (list_pairs NIL))))
T c= c= cMEM f0 cNIL cMEM f0 clist_pairs cNIL c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cMEM f0 clist_pairs cNIL
+ |- ((~ P) = (P = F))
T c= c~ f0 c= f0 cF
+ |- ((\x. (((MEM d) (list_pairs h)) = x)) ((MEM d) (list_pairs h)))
T * / c= cMEM f0 clist_pairs f1 b0 cMEM f0 clist_pairs f1
+ |- (((!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 c==> f3 b0 * / c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 b0 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f4 f1 c==> f3 b0 f5
+ |- ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)
T * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
+ |- (((!L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))) ==> ((\L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))) L)) = ((\L. ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))) L))
T c= c==> ! c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 clist_of_darts b0 * / c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 clist_of_darts b0 f0 * / c= cfoldr / / ccat clist_pairs b1 b2 cNIL b0 clist_of_darts b0 f0
+ |- ((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s)))
T c= cfoldr f0 f1 cCONS f2 f3 * * f0 f2 cfoldr f0 f1 f3
- |- ((?L1. (L = L1)) ==> (?L1. (L = L1)))
T c==> c? / c= f0 b0 c? / c= f0 b0
- ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) /\ ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c/\ cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1
+ |- (((?x. (((MEM d) (list_pairs h)) = x)) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))) = (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))
T c= c==> c? / c= cMEM f0 clist_pairs f1 b0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f2 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f2 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0
+ |- ((x = x) = T)
T c= c= f0 f0 cT
+ ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((((MEM d) (list_pairs h)) = x) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))) = (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c= c==> c= cMEM f0 clist_pairs f1 f2 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((\P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) P)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 * / c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 f0
- |- ((\y. (!t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL)))))) y)
T * / ! ! c/\ c= czip cCONS f0 b2 cCONS b0 b1 cCONS c, f0 b0 czip b2 b1 c/\ c= czip cNIL b1 cNIL c= czip b2 cNIL cNIL f1
- |- ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)
T * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
+ (((ssreflect_eq mem_d) P) = P) |- (P = ((ssreflect_eq mem_d) P))
T c==> c= cssreflect_eq f0 f1 f1 c= f1 cssreflect_eq f0 f1
- (L = L1) |- (L1 = L)
T c==> c= f0 f1 c= f1 f0
+ |- ((t = T) = t)
T c= c= f0 cT f0
+ ((list_of_darts L) = (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L)) |- ((((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) L) = (list_of_darts L))
T c==> c= clist_of_darts f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f0 c= cfoldr / / ccat clist_pairs b0 b1 cNIL f0 clist_of_darts f0
+ |- (T = (((MEM d) NIL) = ((MEM d) NIL)))
T c= cT c= cMEM f0 cNIL cMEM f0 cNIL
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))), ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((\x. (((MEM d) (list_pairs h)) = x)) x) /\ (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c==> * / c= cMEM f0 clist_pairs f2 b0 f3 c/\ * / c= cMEM f0 clist_pairs f2 b0 f3 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0
- ((\L1. (L = L1)) L1) |- (((L = L1) ==> (?L1. (L = L1))) = (?L1. (L = L1)))
T c==> * / c= f0 b0 f1 c= c==> c= f0 f1 c? / c= f0 b0 c? / c= f0 b0
- ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((((MEM d) (list_pairs h)) = x) ==> (?x. (((MEM d) (list_pairs h)) = x))) = (?x. (((MEM d) (list_pairs h)) = x)))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c= c==> c= cMEM f0 clist_pairs f1 f2 c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0
- |- (((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t)))
T c= czip cCONS f0 f1 cCONS f2 f3 cCONS c, f0 f2 czip f1 f3
- |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))))
T c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1
- |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) ==> (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- ((L = L) = ((\L1. (L = L1)) L))
T c= c= f0 f0 * / c= f0 b0 f0
- |- (((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))))) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))))) = ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))))))
T c= c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
+ |- ((\p'. (!q'. ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = T)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND T) h) ((find_pair_list t) d)))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f3 f1 b1 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cT c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cCOND cT f2 cfind_pair_list f3 f1 c==> b0 b1 f4
+ |- ((((((MEM d) (list_of_darts NIL)) = ((MEM d) (list_pairs ((find_pair_list NIL) d)))) /\ (!a0. (!a1. ((((MEM d) (list_of_darts a1)) = ((MEM d) (list_pairs ((find_pair_list a1) d)))) ==> (((MEM d) (list_of_darts ((CONS a0) a1))) = ((MEM d) (list_pairs ((find_pair_list ((CONS a0) a1)) d)))))))) ==> (!L. (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))) = (!L. (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))))
T c= c==> c/\ c= cMEM f0 clist_of_darts cNIL cMEM f0 clist_pairs cfind_pair_list cNIL f0 ! ! c==> c= cMEM f0 clist_of_darts b1 cMEM f0 clist_pairs cfind_pair_list b1 f0 c= cMEM f0 clist_of_darts cCONS b0 b1 cMEM f0 clist_pairs cfind_pair_list cCONS b0 b1 f0 ! c= cMEM f0 clist_of_darts b0 cMEM f0 clist_pairs cfind_pair_list b0 f0 ! c= cMEM f0 clist_of_darts b0 cMEM f0 clist_pairs cfind_pair_list b0 f0
+ |- (((((MEM d) (list_pairs h)) \/ ((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))))
T c= c= c\/ cMEM f0 clist_pairs f1 cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f2 cMEM f0 clist_pairs cfind_pair_list f2 f0 c= cMEM f0 ccat clist_pairs f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f2 cMEM f0 clist_pairs cfind_pair_list f2 f0
+ |- (((!t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))) ==> ((\t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))) t)) = ((\t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))) t))
T c= c==> ! ! c/\ c= cfind_pair_list cNIL b1 cNIL c= cfind_pair_list cCONS f0 b0 b1 cCOND cMEM b1 clist_pairs f0 f0 cfind_pair_list b0 b1 * / ! c/\ c= cfind_pair_list cNIL b1 cNIL c= cfind_pair_list cCONS f0 b0 b1 cCOND cMEM b1 clist_pairs f0 f0 cfind_pair_list b0 b1 f1 * / ! c/\ c= cfind_pair_list cNIL b1 cNIL c= cfind_pair_list cCONS f0 b0 b1 cCOND cMEM b1 clist_pairs f0 f0 cfind_pair_list b0 b1 f1
+ |- (((((MEM d) (list_pairs h)) \/ ((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))))
T c= c= c\/ cMEM f0 clist_pairs f1 cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f2 cMEM f0 clist_pairs f1 c= cMEM f0 ccat clist_pairs f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f2 cMEM f0 clist_pairs f1
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t))) = ((MEM d) (list_pairs ((find_pair_list ((CONS h) t)) d))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f2 f1 cMEM f0 clist_pairs cfind_pair_list cCONS f2 f1 f0
+ |- (((((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) ==> (((MEM d) (list_of_darts ((CONS h) t))) = ((MEM d) (list_pairs ((find_pair_list ((CONS h) t)) d))))) = T)
T c= c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= cMEM f0 clist_of_darts cCONS f2 f1 cMEM f0 clist_pairs cfind_pair_list cCONS f2 f1 f0 cT
+ ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((MEM d) (list_pairs h)) = F)
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 clist_pairs f2 cF
+ |- ((\s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))) s2)
T * / c= cMEM f0 ccat f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cfind_pair_list f1 f0
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- ((F \/ ((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= c\/ cF cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cfind_pair_list f1 f0
- ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = T)
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 cT
- |- ((\q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs f2 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs f2 c==> f3 b0 f5
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((((P T) /\ (P F)) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c= c==> c/\ * f0 cT * f0 cF ! * f0 b0 cT
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ |- (((!x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) ==> ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x)) = ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x))
T c= c==> ! ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
- ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) /\ ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c/\ cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
- ((\L1. (L = L1)) L1) |- (L = L1)
T c==> * / c= f0 b0 f1 c= f0 f1
- (L = L1) |- ((L = L1) /\ (?L1. (L = L1)))
T c==> c= f0 f1 c/\ c= f0 f1 c? / c= f0 b0
- |- ((?L1. (L = L1)) ==> (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))
T c==> c? / c= f0 b0 c= cMEM f1 clist_of_darts f0 cMEM f1 clist_pairs cfind_pair_list f0 f1
- |- ((\p'. (!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs f2 b1 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs f2 c==> b0 b1 f4
- ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((~ ((MEM d) (list_pairs h))) ==> (((MEM d) (list_pairs h)) = F)) = (((MEM d) (list_pairs h)) = F))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c==> c~ cMEM f1 clist_pairs f2 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 clist_pairs f2 cF
+ |- (((!h. (!t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))) ==> ((\h. (!t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))) h)) = ((\h. (!t. (!d. ((((find_pair_list NIL) d) = NIL) /\ (((find_pair_list ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))) h))
T c= c==> ! ! ! c/\ c= cfind_pair_list cNIL b2 cNIL c= cfind_pair_list cCONS b0 b1 b2 cCOND cMEM b2 clist_pairs b0 b0 cfind_pair_list b1 b2 * / ! ! c/\ c= cfind_pair_list cNIL b2 cNIL c= cfind_pair_list cCONS b0 b1 b2 cCOND cMEM b2 clist_pairs b0 b0 cfind_pair_list b1 b2 f0 * / ! ! c/\ c= cfind_pair_list cNIL b2 cNIL c= cfind_pair_list cCONS b0 b1 b2 cCOND cMEM b2 clist_pairs b0 b0 cfind_pair_list b1 b2 f0
- ((\L1. (L = L1)) L1) |- (((\L1. (L = L1)) L1) /\ (?L1. (L = L1)))
T c==> * / c= f0 b0 f1 c/\ * / c= f0 b0 f1 c? / c= f0 b0
- |- ((\x. (!y. (!t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL))))))) x)
T * / ! ! ! c/\ c= czip cCONS b0 b3 cCONS b1 b2 cCONS c, b0 b1 czip b3 b2 c/\ c= czip cNIL b2 cNIL c= czip b3 cNIL cNIL f0
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t)) = ((MEM d) (list_pairs ((find_pair_list t) d))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cfind_pair_list f1 f0
+ |- (((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P)) = ((\P. (((P T) /\ (P F)) ==> (!x. (P x)))) P))
T c= c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0 * / c==> c/\ * b0 cT * b0 cF ! * b0 b1 f0
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0
- ((\x. (((MEM d) (list_pairs h)) = x)) x) |- (((\x. (((MEM d) (list_pairs h)) = x)) x) /\ (?x. (((MEM d) (list_pairs h)) = x)))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c/\ * / c= cMEM f0 clist_pairs f1 b0 f2 c? / c= cMEM f0 clist_pairs f1 b0
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = x)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND x) h) ((find_pair_list t) d))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c==> cssreflect_eq f2 c= cMEM f0 clist_pairs f3 f4 c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND f4 f3 cfind_pair_list f1 f0
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- ((((MEM d) (list_pairs h)) = x) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c==> c= cMEM f0 clist_pairs f2 f3 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0
+ ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- ((T \/ ((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c\/ cT cMEM f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
- (((MEM d) (list_pairs h)) = x) |- (x = ((MEM d) (list_pairs h)))
T c==> c= cMEM f0 clist_pairs f1 f2 c= f2 cMEM f0 clist_pairs f1
+ |- ((((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))) = (((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t))) = ((MEM d) (list_pairs ((find_pair_list ((CONS h) t)) d)))))
T c= c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f1 f2 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f2 f0 c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f1 f2 cMEM f0 clist_pairs cfind_pair_list cCONS f1 f2 f0
+ |- ((((COND F) t1) t2) = t2)
T c= cCOND cF f0 f1 f1
- |- ((((\L1. (L = L1)) L1) ==> (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))) = T)
T c= c==> * / c= f0 b0 f1 c= cMEM f2 clist_of_darts f0 cMEM f2 clist_pairs cfind_pair_list f0 f2 cT
- |- (((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x))))) = (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c= c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- (T = (((MEM d) (list_pairs ((find_pair_list t) d))) = ((MEM d) (list_pairs ((find_pair_list t) d)))))
T c= cT c= cMEM f0 clist_pairs cfind_pair_list f1 f0 cMEM f0 clist_pairs cfind_pair_list f1 f0
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- (((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = ((ssreflect_eq mem_d) ((MEM d) (list_pairs h)))) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> q')))) = ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> q'))))
T c= c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 cssreflect_eq f0 cMEM f1 clist_pairs f2 c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 f4 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 f4 c==> c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 f4 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 f4
- |- (((!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) ==> ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0)) = ((\z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))) z0))
T c= c==> ! c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3 * / c/\ c= cfoldr f0 b0 cCONS f1 f2 * * f0 f1 cfoldr f0 b0 f2 c= cfoldr f0 b0 cNIL b0 f3
- |- (((!y. (!t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL)))))) ==> ((\y. (!t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL)))))) y)) = ((\y. (!t. (!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL)))))) y))
T c= c==> ! ! ! c/\ c= czip cCONS f0 b2 cCONS b0 b1 cCONS c, f0 b0 czip b2 b1 c/\ c= czip cNIL b1 cNIL c= czip b2 cNIL cNIL * / ! ! c/\ c= czip cCONS f0 b2 cCONS b0 b1 cCONS c, f0 b0 czip b2 b1 c/\ c= czip cNIL b1 cNIL c= czip b2 cNIL cNIL f1 * / ! ! c/\ c= czip cCONS f0 b2 cCONS b0 b1 cCONS c, f0 b0 czip b2 b1 c/\ c= czip cNIL b1 cNIL c= czip b2 cNIL cNIL f1
+ |- ((T \/ t) = T)
T c= c\/ cT f0 cT
+ (((MEM d) (list_pairs h)) = x) |- ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND x) h) ((find_pair_list t) d))))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))
T c==> c= cMEM f0 clist_pairs f1 f2 c= c= cMEM f0 ccat clist_pairs f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f0 clist_pairs cCOND f2 f1 cfind_pair_list f3 f0 c= cMEM f0 ccat clist_pairs f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0
- |- (((!L. (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))) ==> ((\L. (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))) L1)) = ((\L. (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))) L1))
T c= c==> ! c= cMEM f0 clist_of_darts b0 cMEM f0 clist_pairs cfind_pair_list b0 f0 * / c= cMEM f0 clist_of_darts b0 cMEM f0 clist_pairs cfind_pair_list b0 f0 f1 * / c= cMEM f0 clist_of_darts b0 cMEM f0 clist_pairs cfind_pair_list b0 f0 f1
- |- (((!x. (((\L1. (L = L1)) x) ==> (?L1. (L = L1)))) ==> ((?L1. (L = L1)) ==> (?L1. (L = L1)))) = ((?L1. (L = L1)) ==> (?L1. (L = L1))))
T c= c==> ! c==> * / c= f0 b1 b0 c? / c= f0 b1 c==> c? / c= f0 b0 c? / c= f0 b0 c==> c? / c= f0 b0 c? / c= f0 b0
+ |- ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL))
T c/\ c= czip cNIL f0 cNIL c= czip f1 cNIL cNIL
+ |- (((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) NIL)) = ((MEM d) (list_pairs NIL)))
T c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL cNIL cMEM f0 clist_pairs cNIL
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- ((?x. (((MEM d) (list_pairs h)) = x)) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c==> c? / c= cMEM f0 clist_pairs f2 b0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0
+ |- (((!list. ((list_pairs list) = ((zip list) ((rot (NUMERAL (BIT1 _0))) list)))) ==> ((\list. ((list_pairs list) = ((zip list) ((rot (NUMERAL (BIT1 _0))) list)))) list)) = ((\list. ((list_pairs list) = ((zip list) ((rot (NUMERAL (BIT1 _0))) list)))) list))
T c= c==> ! c= clist_pairs b0 czip b0 crot cNUMERAL cBIT1 c_0 b0 * / c= clist_pairs b0 czip b0 crot cNUMERAL cBIT1 c_0 b0 f0 * / c= clist_pairs b0 czip b0 crot cNUMERAL cBIT1 c_0 b0 f0
+ ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) /\ ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))))
T c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c/\ cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1
+ |- (((((MEM d) (list_of_darts NIL)) = ((MEM d) (list_pairs ((find_pair_list NIL) d)))) /\ (!a0. (!a1. ((((MEM d) (list_of_darts a1)) = ((MEM d) (list_pairs ((find_pair_list a1) d)))) ==> (((MEM d) (list_of_darts ((CONS a0) a1))) = ((MEM d) (list_pairs ((find_pair_list ((CONS a0) a1)) d)))))))) ==> (!L. (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))))
T c==> c/\ c= cMEM f0 clist_of_darts cNIL cMEM f0 clist_pairs cfind_pair_list cNIL f0 ! ! c==> c= cMEM f0 clist_of_darts b1 cMEM f0 clist_pairs cfind_pair_list b1 f0 c= cMEM f0 clist_of_darts cCONS b0 b1 cMEM f0 clist_pairs cfind_pair_list cCONS b0 b1 f0 ! c= cMEM f0 clist_of_darts b0 cMEM f0 clist_pairs cfind_pair_list b0 f0
- |- (((!b. ((F \/ b) = b)) ==> ((\b. ((F \/ b) = b)) b)) = ((\b. ((F \/ b) = b)) b))
T c= c==> ! c= c\/ cF b0 b0 * / c= c\/ cF b0 b0 f0 * / c= c\/ cF b0 b0 f0
+ |- ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d))))) = q')) ==> ((((ssreflect_eq mem_d) (((MEM d) (list_pairs h)) = F)) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND F) h) ((find_pair_list t) d)))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> q')))
T c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 f4 c= c==> cssreflect_eq f0 c= cMEM f1 clist_pairs f2 cF c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cCOND cF f2 cfind_pair_list f3 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f4
- |- ((\p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (p' ==> q')))))) p')
T * / ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> b0 b1 f4
- |- (((!q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs f2 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs f2 c==> f3 b0 * / c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs f2 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs f2 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs f2 b0 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs f2 c==> f3 b0 f5
- |- ((L = L1) ==> (?L1. (L = L1)))
T c==> c= f0 f1 c? / c= f0 b0
+ |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))))
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
+ (P = ((ssreflect_eq mem_d) P)) |- (((ssreflect_eq mem_d) P) = P)
T c==> c= f0 cssreflect_eq f1 f0 c= cssreflect_eq f1 f0 f0
- |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) ==> (!P. (((P T) /\ (P F)) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! c==> c/\ * b0 cT * b0 cF ! * b0 b1
- |- ((?x. (((MEM d) (list_pairs h)) = x)) ==> (?x. (((MEM d) (list_pairs h)) = x)))
T c==> c? / c= cMEM f0 clist_pairs f1 b0 c? / c= cMEM f0 clist_pairs f1 b0
- |- (((!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) ==> ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s)) = ((\s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0))))) s))
T c= c==> ! ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1 * / ! ! c/\ c= cfoldr b1 b2 cCONS f0 b0 * * b1 f0 cfoldr b1 b2 b0 c= cfoldr b1 b2 cNIL b2 f1
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- (((P T) /\ (P F)) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ c/\ * f0 cT * f0 cF ! * f0 b0
+ |- (((MEM d) NIL) = ((MEM d) ((zip NIL) ((rot (NUMERAL (BIT1 _0))) NIL))))
T c= cMEM f0 cNIL cMEM f0 czip cNIL crot cNUMERAL cBIT1 c_0 cNIL
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))), ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) |- (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) /\ (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c==> cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c/\ cssreflect_eq f2 c~ cMEM f0 clist_pairs f3 c= cMEM f0 ccat clist_pairs f3 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cfind_pair_list f1 f0
+ |- ((\x. (!s1. (!s2. (((MEM x) ((cat s1) s2)) = (((MEM x) s1) \/ ((MEM x) s2)))))) x)
T * / ! ! c= cMEM b0 ccat b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
+ (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))) ==> ((?x. (((MEM d) (list_pairs h)) = x)) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d))))))) = ((?x. (((MEM d) (list_pairs h)) = x)) ==> (((MEM d) (((\list. (\a. ((cat (list_pairs list)) a))) h) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))))
T c==> c= cMEM f0 clist_of_darts f1 cMEM f0 clist_pairs cfind_pair_list f1 f0 c= c==> ! c==> * / c= cMEM f0 clist_pairs f2 b1 b0 c= cMEM f0 * * / / ccat clist_pairs b1 b2 f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 c==> c? / c= cMEM f0 clist_pairs f2 b0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0 c==> c? / c= cMEM f0 clist_pairs f2 b0 c= cMEM f0 * * / / ccat clist_pairs b0 b1 f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f2 f2 cfind_pair_list f1 f0
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- (!x. (((\x. (((MEM d) (list_pairs h)) = x)) x) ==> (?x. (((MEM d) (list_pairs h)) = x))))
T c==> * / c= cMEM f0 clist_pairs f1 b0 f2 c? / c= cMEM f0 clist_pairs f1 b0
- |- (((!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) ==> ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f)) = ((\f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))) f))
T c= c==> ! ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2 * / ! c/\ c= cfoldr b0 b1 cCONS f0 f1 * * b0 f0 cfoldr b0 b1 f1 c= cfoldr b0 b1 cNIL b1 f2
+ |- (((!P. (P = ((ssreflect_eq mem_d) P))) ==> ((\P. (P = ((ssreflect_eq mem_d) P))) P)) = ((\P. (P = ((ssreflect_eq mem_d) P))) P))
T c= c==> ! c= b0 cssreflect_eq f0 b0 * / c= b0 cssreflect_eq f0 b0 f1 * / c= b0 cssreflect_eq f0 b0 f1
- ((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) |- (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = T)
T c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cssreflect_eq f0 cMEM f1 clist_pairs f2 cT
+ (((MEM d) (list_pairs h)) = x), (((MEM d) (list_of_darts t)) = ((MEM d) (list_pairs ((find_pair_list t) d)))) |- (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs (((COND ((MEM d) (list_pairs h))) h) ((find_pair_list t) d)))))
T c==> c= cMEM f0 clist_pairs f1 f2 c==> c= cMEM f0 clist_of_darts f3 cMEM f0 clist_pairs cfind_pair_list f3 f0 c= cMEM f0 ccat clist_pairs f1 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f0 clist_pairs cCOND cMEM f0 clist_pairs f1 f1 cfind_pair_list f3 f0
+ |- (((zip NIL) t) = NIL)
T c= czip cNIL f0 cNIL
- |- ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h))) = q')) ==> ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (p' ==> q'))))
T c==> c= cssreflect_eq f0 cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f4 cMEM f1 clist_pairs f2 f5 c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f4 cMEM f1 clist_pairs f2 c==> f3 f5
- |- (((!x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) ==> ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x)) = ((\x. (!s. (!f. (!z0. (((((foldr f) z0) ((CONS x) s)) = ((f x) (((foldr f) z0) s))) /\ ((((foldr f) z0) NIL) = z0)))))) x))
T c= c==> ! ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0 * / ! ! ! c/\ c= cfoldr b2 b3 cCONS b0 b1 * * b2 b0 cfoldr b2 b3 b1 c= cfoldr b2 b3 cNIL b3 f0
+ |- ((((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) ((CONS h) t))) = ((MEM d) (list_pairs ((find_pair_list ((CONS h) t)) d)))) = (((MEM d) (list_of_darts ((CONS h) t))) = ((MEM d) (list_pairs ((find_pair_list ((CONS h) t)) d)))))
T c= c= cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL cCONS f1 f2 cMEM f0 clist_pairs cfind_pair_list cCONS f1 f2 f0 c= cMEM f0 clist_of_darts cCONS f1 f2 cMEM f0 clist_pairs cfind_pair_list cCONS f1 f2 f0
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))) = T)
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c= c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0 cT
- |- (!L1. (((\L1. (L = L1)) L1) ==> (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))))
T c==> * / c= f0 b0 f1 c= cMEM f2 clist_of_darts f0 cMEM f2 clist_pairs cfind_pair_list f0 f2
- |- ((\b. ((F \/ b) = b)) b)
T * / c= c\/ cF b0 b0 f0
- (L = L1) |- ((((MEM d) (list_of_darts L1)) = ((MEM d) (list_pairs ((find_pair_list L) d)))) = (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d)))))
T c==> c= f0 f1 c= c= cMEM f2 clist_of_darts f1 cMEM f2 clist_pairs cfind_pair_list f0 f2 c= cMEM f2 clist_of_darts f0 cMEM f2 clist_pairs cfind_pair_list f0 f2
- |- ((\L. (((MEM d) (list_of_darts L)) = ((MEM d) (list_pairs ((find_pair_list L) d))))) L1)
T * / c= cMEM f0 clist_of_darts b0 cMEM f0 clist_pairs cfind_pair_list b0 f0 f1
- |- (((zip s) NIL) = NIL)
T c= czip f0 cNIL cNIL
- |- ((((MEM d) (list_pairs h)) = x) = ((\x. (((MEM d) (list_pairs h)) = x)) x))
T c= c= cMEM f0 clist_pairs f1 f2 * / c= cMEM f0 clist_pairs f1 b0 f2
- (L = L1) |- ((\L1. (L = L1)) L1)
T c==> c= f0 f1 * / c= f0 b0 f1
- |- (((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = ((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h))))) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> q')))) = ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> q'))))
T c= c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 f4 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f4 c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 f4 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f4
- |- (T = ((T \/ ((MEM d) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = T))
T c= cT c= c\/ cT cMEM f0 cfoldr / / ccat clist_pairs b0 b1 cNIL f1 cT
- |- (((!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (p' ==> q'))))) ==> ((\q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (p' ==> q'))))) q')) = ((\q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 c==> f3 b0 * / c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 c==> f3 b0 f5 * / c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 c==> f3 b0 f5
- |- ((((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))) = (((ssreflect_eq mem_d) ((MEM d) (list_pairs h))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs h)))))
T c= c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2 c==> cssreflect_eq f0 cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs f2
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- (!P. (((P T) /\ (P F)) ==> (!x. (P x)))), ((P T) /\ (P F)) |- ((!P. (((P T) /\ (P F)) ==> (!x. (P x)))) /\ (!x. (P x)))
T c==> ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 c==> c/\ * f0 cT * f0 cF c/\ ! c==> c/\ * b0 cT * b0 cF ! * b0 b1 ! * f0 b0
- |- (?L1. (L = L1))
T c? / c= f0 b0
- |- ((\q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (p' ==> q'))))) q')
T * / c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 f3 c==> c==> f3 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 b0 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b1 b2 cNIL f4 cMEM f1 clist_pairs cfind_pair_list f4 f1 c==> f3 b0 f5
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- ((((\L1. (L = L1)) L1) ==> (?L1. (L = L1))) = T)
T c= c==> * / c= f0 b0 f1 c? / c= f0 b0 cT
- (L = L1) |- (((MEM d) (list_of_darts L1)) = ((MEM d) (list_pairs ((find_pair_list L1) d))))
T c==> c= f0 f1 c= cMEM f2 clist_of_darts f1 cMEM f2 clist_pairs cfind_pair_list f1 f2
- |- (((!p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) = p') ==> ((p' ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = q')) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> b0 b1 * / ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> b0 b1 f4 * / ! c==> c= cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 b0 c==> c==> b0 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 b1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b2 b3 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> b0 b1 f4
- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) |- ((!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))) /\ (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x)))))
T c==> ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 c/\ ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1 ! c==> c/\ * b0 cNIL ! ! c==> * b0 b2 * b0 cCONS b1 b2 ! * b0 b1
- |- (((!s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL)))) ==> ((\s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL)))) s)) = ((\s. ((((zip ((CONS x) s)) ((CONS y) t)) = ((CONS (x , y)) ((zip s) t))) /\ ((((zip NIL) t) = NIL) /\ (((zip s) NIL) = NIL)))) s))
T c= c==> ! c/\ c= czip cCONS f0 b0 cCONS f1 f2 cCONS c, f0 f1 czip b0 f2 c/\ c= czip cNIL f2 cNIL c= czip b0 cNIL cNIL * / c/\ c= czip cCONS f0 b0 cCONS f1 f2 cCONS c, f0 f1 czip b0 f2 c/\ c= czip cNIL f2 cNIL c= czip b0 cNIL cNIL f3 * / c/\ c= czip cCONS f0 b0 cCONS f1 f2 cCONS c, f0 f1 czip b0 f2 c/\ c= czip cNIL f2 cNIL c= czip b0 cNIL cNIL f3
- |- (((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> ((((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))) = (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))))) ==> ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))))) = ((((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d))))) = (((ssreflect_eq mem_d) (~ ((MEM d) (list_pairs h)))) ==> (((MEM d) ((cat (list_pairs h)) (((foldr (\list. (\a. ((cat (list_pairs list)) a)))) NIL) t))) = ((MEM d) (list_pairs ((find_pair_list t) d)))))))
T c= c==> c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c= c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1 c==> cssreflect_eq f0 c~ cMEM f1 clist_pairs f2 c= cMEM f1 ccat clist_pairs f2 cfoldr / / ccat clist_pairs b0 b1 cNIL f3 cMEM f1 clist_pairs cfind_pair_list f3 f1
