N Tame_list.inj_on_list_of_faces
C |- (!L. (!phi. (((inj_on phi) (elements_of_list L)) ==> ((list_of_faces ((MAP (MAP phi)) L)) = ((MAP (MAP (\u. ((phi (FST u)) , (phi (SND u)))))) (list_of_faces L))))))
T c==> cinj_on f0 * part celements_of_list f1 c= clist_of_faces cMAP * part cMAP f0 f1 cMAP * part cMAP / c, * f0 cFST b0 * f0 cSND b0 clist_of_faces f1
D TRUTH
A |- T
T cT
D o_THM
A |- (!f. (!g. (!x. (((f o g) x) = (f (g x))))))
T c= co f0 f1 f2 * f0 * f1 f2
D MAP_o
A |- (!f. (!g. (!l. (((MAP (g o f)) l) = ((MAP g) ((MAP f) l))))))
T c= cMAP * * part co f0 f1 f2 cMAP f0 cMAP f1 f2
D MAP_EQ
A |- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))))
T c==> cALL / c= * f0 b0 * f1 b0 f2 c= cMAP f0 f2 cMAP f1 f2
D Seq.allP
A |- (!a. (!s. ((!x. (((MEM x) s) ==> (a x))) = ((all a) s))))
T c= ! c==> cMEM b0 f0 * f1 b0 call f1 f0
D Seq.map_MAP
A |- (map = MAP)
T c= part cmap part cMAP
D Seq2.ALL_all
A |- (ALL = all)
T c= part cALL part call
D List_hypermap.list_of_faces
A |- (!L. ((list_of_faces L) = ((MAP list_pairs) L)))
T c= clist_of_faces f0 cMAP part clist_pairs f0
D Tame_list.map_list_pairs
A |- (!phi. (!x. ((list_pairs ((MAP phi) x)) = ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x)))))
T c= clist_pairs cMAP f0 f1 cMAP / c, * f0 cFST b0 * f0 cSND b0 clist_pairs f1
D Tame_list.lower_case
A |- ((MAP = map) /\ ((LENGTH = sizel) /\ ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))))
T c/\ c= part cMAP part cmap c/\ c= part cLENGTH part csizel c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- |- ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))
T c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ |- (((all a) s) = (!x. (((MEM x) s) ==> (a x))))
T c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- ((\f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) f)
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 * / ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 f0
+ (((all a) s) = (!x. (((MEM x) s) ==> (a x)))) |- ((!x. (((MEM x) s) ==> (a x))) = ((all a) s))
T c==> c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0 c= ! c==> cMEM b0 f1 * f0 b0 call f0 f1
- |- ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))
T c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- ((!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))) = T)
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c= ! c==> cALL / c= * f0 b1 * f1 b1 b0 c= cMAP f0 b0 cMAP f1 b0 cT
- |- ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))
T c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- |- ((\x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) x0)
T * / c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 f1
- |- ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL)))
T c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
+ |- (MAP = map)
T c= part cMAP part cmap
- |- (LENGTH = sizel)
T c= part cLENGTH part csizel
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
+ |- (((!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) ==> ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)) = ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s))
T c= c==> ! c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
+ |- (((!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))) ==> ((\g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))) g)) = ((\g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))) g))
T c= c==> ! ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1 * / ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1 f1 * / ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)
T * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- |- (((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) ==> ((\s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) s)) = ((\s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) s))
T c= c==> ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 * / ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 f0 * / ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 f0
- |- ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))
T c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0
+ |- (((!L. ((list_of_faces L) = ((MAP list_pairs) L))) ==> ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L)) = ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L))
T c= c==> ! c= clist_of_faces b0 cMAP part clist_pairs b0 * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0 * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0
+ |- ((\g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)))) g)
T * / ! c= cMAP b0 cMAP f0 b1 cMAP * * part co b0 f0 b1 f1
- |- (((!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) ==> (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))))) = (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))))
T c= c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2
+ |- ((\l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))) l)
T * / c= cMAP f0 cMAP f1 b0 cMAP * * part co f0 f1 b0 f2
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- ((\g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))) g)
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 * / ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1 f1
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- ((!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))) = T)
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c= ! ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1 cT
+ (((MAP (g o f)) l) = ((MAP g) ((MAP f) l))) |- (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))
T c==> c= cMAP * * part co f0 f1 f2 cMAP f0 cMAP f1 f2 c= cMAP f0 cMAP f1 f2 cMAP * * part co f0 f1 f2
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- ((\l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))) l)
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 * / c==> cALL / c= * f0 b1 * f1 b1 b0 c= cMAP f0 b0 cMAP f1 b0 f2
- |- ((filter = FILTER) /\ ((rev = REVERSE) /\ ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL)))))
T c/\ c= part cfilter part cFILTER c/\ c= part crev part cREVERSE c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- ((!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) /\ (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))))
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c/\ ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2
+ |- ((!phi. (((inj_on phi) (elements_of_list L)) ==> (((MAP (list_pairs o (MAP phi))) L) = ((MAP ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs)) L)))) = T)
T c= ! c==> cinj_on b0 * part celements_of_list f0 c= cMAP * * part co part clist_pairs * part cMAP b0 f0 cMAP * * part co * part cMAP / c, * b0 cFST b1 * b0 cSND b1 part clist_pairs f0 cT
- |- ((\s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) s)
T * / ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 f0
+ |- (((!g. (!x. (((f o g) x) = (f (g x))))) ==> ((\g. (!x. (((f o g) x) = (f (g x))))) g)) = ((\g. (!x. (((f o g) x) = (f (g x))))) g))
T c= c==> ! ! c= co f0 b0 b1 * f0 * b0 b1 * / ! c= co f0 b0 b1 * f0 * b0 b1 f1 * / ! c= co f0 b0 b1 * f0 * b0 b1 f1
+ |- ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)
T * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
+ |- (!L. (!phi. (((inj_on phi) (elements_of_list L)) ==> (((MAP (list_pairs o (MAP phi))) L) = ((MAP ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs)) L)))))
T c==> cinj_on f0 * part celements_of_list f1 c= cMAP * * part co part clist_pairs * part cMAP f0 f1 cMAP * * part co * part cMAP / c, * f0 cFST b0 * f0 cSND b0 part clist_pairs f1
- |- (all = ALL)
T c= part call part cALL
+ |- (((!f. (!g. (!x. (((f o g) x) = (f (g x)))))) ==> ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) f)) = ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) f))
T c= c==> ! ! ! c= co b0 b1 b2 * b0 * b1 b2 * / ! ! c= co b0 b1 b2 * b0 * b1 b2 f0 * / ! ! c= co b0 b1 b2 * b0 * b1 b2 f0
- ((ALL (\x. ((f x) = (g x)))) l) |- ((!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) ==> (((MAP f) l) = ((MAP g) l)))
T c==> cALL / c= * f0 b0 * f1 b0 f2 c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c= cMAP f0 f2 cMAP f1 f2
+ |- ((((ALL (\x. (((list_pairs o (MAP phi)) x) = (((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs) x)))) L) ==> (((MAP (list_pairs o (MAP phi))) L) = ((MAP ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs)) L))) = (((MAP (list_pairs o (MAP phi))) L) = ((MAP ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs)) L)))
T c= c==> cALL / c= co part clist_pairs * part cMAP f0 b0 co * part cMAP / c, * f0 cFST b1 * f0 cSND b1 part clist_pairs b0 f1 c= cMAP * * part co part clist_pairs * part cMAP f0 f1 cMAP * * part co * part cMAP / c, * f0 cFST b0 * f0 cSND b0 part clist_pairs f1 c= cMAP * * part co part clist_pairs * part cMAP f0 f1 cMAP * * part co * part cMAP / c, * f0 cFST b0 * f0 cSND b0 part clist_pairs f1
- |- ((rev = REVERSE) /\ ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL))))
T c/\ c= part crev part cREVERSE c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
+ ((!x. (((MEM x) s) ==> (a x))) = ((all a) s)) |- (((all a) s) = (!x. (((MEM x) s) ==> (a x))))
T c==> c= ! c==> cMEM b0 f0 * f1 b0 call f1 f0 c= call f1 f0 ! c==> cMEM b0 f0 * f1 b0
+ |- (!L. (!phi. (((inj_on phi) (elements_of_list L)) ==> (((MAP list_pairs) ((MAP (MAP phi)) L)) = ((MAP (MAP (\u. ((phi (FST u)) , (phi (SND u)))))) ((MAP list_pairs) L))))))
T c==> cinj_on f0 * part celements_of_list f1 c= cMAP part clist_pairs cMAP * part cMAP f0 f1 cMAP * part cMAP / c, * f0 cFST b0 * f0 cSND b0 cMAP part clist_pairs f1
- |- (((~ (s = NIL)) ==> (((last x0) s) = (LAST s))) = T)
T c= c==> c~ c= f0 cNIL c= clast f1 f0 cLAST f0 cT
+ |- (((!x. ((list_pairs ((MAP phi) x)) = ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x)))) ==> ((\x. ((list_pairs ((MAP phi) x)) = ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x)))) x)) = ((\x. ((list_pairs ((MAP phi) x)) = ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x)))) x))
T c= c==> ! c= clist_pairs cMAP f0 b0 cMAP / c, * f0 cFST b1 * f0 cSND b1 clist_pairs b0 * / c= clist_pairs cMAP f0 b0 cMAP / c, * f0 cFST b1 * f0 cSND b1 clist_pairs b0 f1 * / c= clist_pairs cMAP f0 b0 cMAP / c, * f0 cFST b1 * f0 cSND b1 clist_pairs b0 f1
+ |- (((!a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) ==> ((\a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) a)) = ((\a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) a))
T c= c==> ! ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 * / ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 f0 * / ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 f0
+ |- ((\phi. (!x. ((list_pairs ((MAP phi) x)) = ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x))))) phi)
T * / ! c= clist_pairs cMAP b0 b1 cMAP / c, * b0 cFST b2 * b0 cSND b2 clist_pairs b1 f0
+ |- ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L)
T * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0
+ |- ((x = x) = T)
T c= c= f0 f0 cT
+ |- ((\l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))) l)
T * / c==> cALL / c= * f0 b1 * f1 b1 b0 c= cMAP f0 b0 cMAP f1 b0 f2
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- (((!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))) ==> ((\l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))) l)) = ((\l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))) l))
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c= c==> ! c==> cALL / c= * f0 b1 * f1 b1 b0 c= cMAP f0 b0 cMAP f1 b0 * / c==> cALL / c= * f0 b1 * f1 b1 b0 c= cMAP f0 b0 cMAP f1 b0 f2 * / c==> cALL / c= * f0 b1 * f1 b1 b0 c= cMAP f0 b0 cMAP f1 b0 f2
+ |- ((\x. ((list_pairs ((MAP phi) x)) = ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x)))) x)
T * / c= clist_pairs cMAP f0 b0 cMAP / c, * f0 cFST b1 * f0 cSND b1 clist_pairs b0 f1
+ |- (((!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))) ==> ((\l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))) l)) = ((\l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))) l))
T c= c==> ! c= cMAP f0 cMAP f1 b0 cMAP * * part co f0 f1 b0 * / c= cMAP f0 cMAP f1 b0 cMAP * * part co f0 f1 b0 f2 * / c= cMAP f0 cMAP f1 b0 cMAP * * part co f0 f1 b0 f2
+ |- (((!x. (((f o g) x) = (f (g x)))) ==> ((\x. (((f o g) x) = (f (g x)))) x)) = ((\x. (((f o g) x) = (f (g x)))) x))
T c= c==> ! c= co f0 f1 b0 * f0 * f1 b0 * / c= co f0 f1 b0 * f0 * f1 b0 f2 * / c= co f0 f1 b0 * f0 * f1 b0 f2
+ |- ((\g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))) g)
T * / ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1 f1
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))), ((ALL (\x. ((f x) = (g x)))) l) |- ((!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) /\ (((MAP f) l) = ((MAP g) l)))
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c==> cALL / c= * f0 b0 * f1 b0 f2 c/\ ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c= cMAP f0 f2 cMAP f1 f2
- |- (((!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) ==> ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)) = ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0))
T c= c==> ! c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- |- ((cat = APPEND) /\ (all = ALL))
T c/\ c= part ccat part cAPPEND c= part call part cALL
+ |- (((!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) ==> ((\f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) f)) = ((\f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) f))
T c= c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 * / ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 f0 * / ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 f0
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 ! ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1
+ ((inj_on phi) (elements_of_list L)) |- (((inj_on phi) (elements_of_list L)) /\ (((MAP (list_pairs o (MAP phi))) L) = ((MAP ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs)) L)))
T c==> cinj_on f0 * part celements_of_list f1 c/\ cinj_on f0 * part celements_of_list f1 c= cMAP * * part co part clist_pairs * part cMAP f0 f1 cMAP * * part co * part cMAP / c, * f0 cFST b0 * f0 cSND b0 part clist_pairs f1
+ |- ((((inj_on phi) (elements_of_list L)) ==> (((MAP (list_pairs o (MAP phi))) L) = ((MAP ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs)) L))) = T)
T c= c==> cinj_on f0 * part celements_of_list f1 c= cMAP * * part co part clist_pairs * part cMAP f0 f1 cMAP * * part co * part cMAP / c, * f0 cFST b0 * f0 cSND b0 part clist_pairs f1 cT
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- ((((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))) = T)
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c= c==> cALL / c= * f0 b0 * f1 b0 f2 c= cMAP f0 f2 cMAP f1 f2 cT
+ (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)) |- (((MAP (g o f)) l) = ((MAP g) ((MAP f) l)))
T c==> c= cMAP f0 cMAP f1 f2 cMAP * * part co f0 f1 f2 c= cMAP * * part co f0 f1 f2 cMAP f0 cMAP f1 f2
+ |- ((!L. (!phi. (((inj_on phi) (elements_of_list L)) ==> (((MAP (list_pairs o (MAP phi))) L) = ((MAP ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs)) L))))) = (!L. (!phi. (((inj_on phi) (elements_of_list L)) ==> (((MAP list_pairs) ((MAP (MAP phi)) L)) = ((MAP (MAP (\u. ((phi (FST u)) , (phi (SND u)))))) ((MAP list_pairs) L)))))))
T c= ! ! c==> cinj_on b1 * part celements_of_list b0 c= cMAP * * part co part clist_pairs * part cMAP b1 b0 cMAP * * part co * part cMAP / c, * b1 cFST b2 * b1 cSND b2 part clist_pairs b0 ! ! c==> cinj_on b1 * part celements_of_list b0 c= cMAP part clist_pairs cMAP * part cMAP b1 b0 cMAP * part cMAP / c, * b1 cFST b2 * b1 cSND b2 cMAP part clist_pairs b0
- |- (((!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) ==> ((\x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) x0)) = ((\x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))) x0))
T c= c==> ! c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 * / c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 f1 * / c==> c~ c= f0 cNIL c= clast b0 f0 cLAST f0 f1
+ |- (((!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)))) ==> ((\g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)))) g)) = ((\g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l)))) g))
T c= c==> ! ! c= cMAP b0 cMAP f0 b1 cMAP * * part co b0 f0 b1 * / ! c= cMAP b0 cMAP f0 b1 cMAP * * part co b0 f0 b1 f1 * / ! c= cMAP b0 cMAP f0 b1 cMAP * * part co b0 f0 b1 f1
+ |- ((\a. (!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x)))))) a)
T * / ! c= call b0 b1 ! c==> cMEM b2 b1 * b0 b2 f0
+ |- (((!phi. (!x. ((list_pairs ((MAP phi) x)) = ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x))))) ==> ((\phi. (!x. ((list_pairs ((MAP phi) x)) = ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x))))) phi)) = ((\phi. (!x. ((list_pairs ((MAP phi) x)) = ((MAP (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x))))) phi))
T c= c==> ! ! c= clist_pairs cMAP b0 b1 cMAP / c, * b0 cFST b2 * b0 cSND b2 clist_pairs b1 * / ! c= clist_pairs cMAP b0 b1 cMAP / c, * b0 cFST b2 * b0 cSND b2 clist_pairs b1 f0 * / ! c= clist_pairs cMAP b0 b1 cMAP / c, * b0 cFST b2 * b0 cSND b2 clist_pairs b1 f0
- |- (((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) ==> ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)) = ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s))
T c= c==> ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
+ |- ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) f)
T * / ! ! c= co b0 b1 b2 * b0 * b1 b2 f0
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))), ((ALL (\x. ((f x) = (g x)))) l) |- (((ALL (\x. ((f x) = (g x)))) l) /\ (((MAP f) l) = ((MAP g) l)))
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c==> cALL / c= * f0 b0 * f1 b0 f2 c/\ cALL / c= * f0 b0 * f1 b0 f2 c= cMAP f0 f2 cMAP f1 f2
+ |- ((!x. (((MEM x) L) ==> ((list_pairs ((map phi) x)) = ((map (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x))))) = ((ALL (\x. (((list_pairs o (MAP phi)) x) = (((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs) x)))) L))
T c= ! c==> cMEM b0 f0 c= clist_pairs cmap f1 b0 cmap / c, * f1 cFST b1 * f1 cSND b1 clist_pairs b0 cALL / c= co part clist_pairs * part cMAP f1 b0 co * part cMAP / c, * f1 cFST b1 * f1 cSND b1 part clist_pairs b0 f0
- |- (((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))) = T)
T c= c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0 cT
- |- ((sizel = LENGTH) /\ ((filter = FILTER) /\ ((rev = REVERSE) /\ ((!s. (!x0. ((~ (s = NIL)) ==> (((last x0) s) = (LAST s))))) /\ ((cat = APPEND) /\ (all = ALL))))))
T c/\ c= part csizel part cLENGTH c/\ c= part cfilter part cFILTER c/\ c= part crev part cREVERSE c/\ ! ! c==> c~ c= b0 cNIL c= clast b1 b0 cLAST b0 c/\ c= part ccat part cAPPEND c= part call part cALL
- |- ((LENGTH = sizel) /\ ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))))
T c/\ c= part cLENGTH part csizel c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- |- (cat = APPEND)
T c= part ccat part cAPPEND
- |- (rev = REVERSE)
T c= part crev part cREVERSE
+ |- (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))
T c= cMAP f0 cMAP f1 f2 cMAP * * part co f0 f1 f2
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- (((!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))) ==> ((\g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))) g)) = ((\g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))) g))
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c= c==> ! ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1 * / ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1 f1 * / ! c==> cALL / c= * f0 b2 * b0 b2 b1 c= cMAP f0 b1 cMAP b0 b1 f1
- |- ((APPEND = cat) /\ (ALL = all))
T c/\ c= part cAPPEND part ccat c= part cALL part call
- |- (FILTER = filter)
T c= part cFILTER part cfilter
- |- ((~ (s = NIL)) ==> (((last x0) s) = (LAST s)))
T c==> c~ c= f0 cNIL c= clast f1 f0 cLAST f0
+ |- (((!f. (!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))))) ==> ((\f. (!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))))) f)) = ((\f. (!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))))) f))
T c= c==> ! ! ! c= cMAP b1 cMAP b0 b2 cMAP * * part co b1 b0 b2 * / ! ! c= cMAP b1 cMAP b0 b2 cMAP * * part co b1 b0 b2 f0 * / ! ! c= cMAP b1 cMAP b0 b2 cMAP * * part co b1 b0 b2 f0
+ |- ((ALL (\x. (((list_pairs o (MAP phi)) x) = (((MAP (\u. ((phi (FST u)) , (phi (SND u))))) o list_pairs) x)))) L)
T cALL / c= co part clist_pairs * part cMAP f0 b0 co * part cMAP / c, * f0 cFST b1 * f0 cSND b1 part clist_pairs b0 f1
- |- (((\x. (f x)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
+ |- ((\x. (((f o g) x) = (f (g x)))) x)
T * / c= co f0 f1 b0 * f0 * f1 b0 f2
+ |- (!x. (((MEM x) L) ==> ((list_pairs ((map phi) x)) = ((map (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x)))))
T c==> cMEM f0 f1 c= clist_pairs cmap f2 f0 cmap / c, * f2 cFST b0 * f2 cSND b0 clist_pairs f0
+ |- ((\f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) f)
T * / ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 f0
+ |- (T = (!x. (((MEM x) L) ==> ((list_pairs ((map phi) x)) = ((map (\u. ((phi (FST u)) , (phi (SND u))))) (list_pairs x))))))
T c= cT ! c==> cMEM b0 f0 c= clist_pairs cmap f1 b0 cmap / c, * f1 cFST b1 * f1 cSND b1 clist_pairs b0
+ |- ((\f. (!g. (!l. (((MAP g) ((MAP f) l)) = ((MAP (g o f)) l))))) f)
T * / ! ! c= cMAP b1 cMAP b0 b2 cMAP * * part co b1 b0 b2 f0
- |- ((!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) ==> (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))))
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))), ((ALL (\x. ((f x) = (g x)))) l) |- (((MAP f) l) = ((MAP g) l))
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 c==> cALL / c= * f0 b0 * f1 b0 f2 c= cMAP f0 f2 cMAP f1 f2
- (!f. (!g. (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l)))))) |- (!l. (((ALL (\x. ((f x) = (g x)))) l) ==> (((MAP f) l) = ((MAP g) l))))
T c==> ! ! ! c==> cALL / c= * b0 b3 * b1 b3 b2 c= cMAP b0 b2 cMAP b1 b2 ! c==> cALL / c= * f0 b1 * f1 b1 b0 c= cMAP f0 b0 cMAP f1 b0
- |- ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)
T * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
