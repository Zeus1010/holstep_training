N Tame_list.not_betwn1
C |- (!x. (!z. (!s. (((uniq s) /\ ((MEM z) s)) ==> (~ ((MEM x) (((betwn s) x) z)))))))
T c==> c/\ cuniq f0 cMEM f1 f0 c~ cMEM f2 cbetwn f0 f2 f1
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D COND_ELIM_THM
A |- ((P (((COND c) x) y)) = ((c ==> (P x)) /\ ((~ c) ==> (P y))))
T c= * f0 cCOND f1 f2 f3 c/\ c==> f1 * f0 f2 c==> c~ f1 * f0 f3
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D ADD1
A |- (!m. ((SUC m) = (m + (NUMERAL (BIT1 _0)))))
T c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D EXP_2
A |- (!n. ((n EXP (NUMERAL (BIT0 (BIT1 _0)))) = (n * n)))
T c= cEXP f0 cNUMERAL cBIT0 cBIT1 c_0 c* f0 f0
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_ZERO
A |- (((NUMERAL (NUMERAL _0)) = (NUMERAL _0)) /\ ((BIT0 _0) = _0))
T c/\ c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0 c= cBIT0 c_0 c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D ARITH_MULT
A |- ((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) /\ (((_0 * _0) = _0) /\ ((!n. ((_0 * (BIT0 n)) = _0)) /\ ((!n. ((_0 * (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))))))
T c/\ ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 c/\ c= c* c_0 c_0 c_0 c/\ ! c= c* c_0 cBIT0 b0 c_0 c/\ ! c= c* c_0 cBIT1 b0 c_0 c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
D ARITH_EXP
A |- ((!m. (!n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n))))) /\ (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))))))
T c/\ ! ! c= cEXP cNUMERAL b0 cNUMERAL b1 cNUMERAL cEXP b0 b1 c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
D MEM_APPEND
A |- (!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))))
T c= cMEM f0 cAPPEND f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_MUL_RZERO
A |- (!x. (((real_mul x) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0))))
T c= creal_mul f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D int_le
A |- (!x. (!y. (((int_le x) y) = ((real_le (real_of_int x)) (real_of_int y)))))
T c= cint_le f0 f1 creal_le creal_of_int f0 creal_of_int f1
D int_of_num_th
A |- (!n. ((real_of_int (int_of_num n)) = (real_of_num n)))
T c= creal_of_int cint_of_num f0 creal_of_num f0
D int_add_th
A |- (!x. (!y. ((real_of_int ((int_add x) y)) = ((real_add (real_of_int x)) (real_of_int y)))))
T c= creal_of_int cint_add f0 f1 creal_add creal_of_int f0 creal_of_int f1
D INT_OF_NUM_ADD
A |- (!m. (!n. (((int_add (int_of_num m)) (int_of_num n)) = (int_of_num (m + n)))))
T c= cint_add cint_of_num f0 cint_of_num f1 cint_of_num c+ f0 f1
D INT_OF_NUM_LE
A |- (!m. (!n. (((int_le (int_of_num m)) (int_of_num n)) = (m <= n))))
T c= cint_le cint_of_num f0 cint_of_num f1 c<= f0 f1
D INT_POS
A |- (!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n)))
T cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
D Seq.mem_take
A |- (!n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))))
T c==> cMEM f0 ctake f1 f2 cMEM f0 f2
D Seq.mem_drop
A |- (!n0. (!s. (!x. (((MEM x) ((dropl n0) s)) ==> ((MEM x) s)))))
T c==> cMEM f0 cdropl f1 f2 cMEM f0 f2
D Tame_list.mem_drop_index
A |- (!k. (!v. (!s. (((uniq s) /\ ((MEM v) s)) ==> (((MEM v) ((dropl k) s)) = (k <= ((indexl v) s)))))))
T c==> c/\ cuniq f0 cMEM f1 f0 c= cMEM f1 cdropl f2 f0 c<= f2 cindexl f1 f0
D Tame_list.mem_take_index
A |- (!k. (!v. (!s. (((uniq s) /\ ((MEM v) s)) ==> (((MEM v) ((take k) s)) = (((indexl v) s) < k))))))
T c==> c/\ cuniq f0 cMEM f1 f0 c= cMEM f1 ctake f2 f0 c< cindexl f1 f0 f2
D Tame_list.betwn_take_drop
A |- (!f. (!u. (!v. ((((MEM v) f) /\ (uniq f)) ==> ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f))))))))
T c==> c/\ cMEM f0 f1 cuniq f1 c= cbetwn f1 f2 f0 cCOND c< cindexl f2 f1 cindexl f0 f1 ctake cPRE c- cindexl f0 f1 cindexl f2 f1 cdropl cSUC cindexl f2 f1 f1 cAPPEND cdropl cSUC cindexl f2 f1 f1 ctake cindexl f0 f1 f1
- ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) |- (((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) = T)
T c==> cMEM f0 ctake cPRE c- cindexl f1 f2 cindexl f0 f2 cdropl cSUC cindexl f0 f2 f2 c= cMEM f0 ctake cPRE c- cindexl f1 f2 cindexl f0 f2 cdropl cSUC cindexl f0 f2 f2 cT
+ |- (((!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) ==> ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)) = ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x))
T c= c==> ! ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
+ |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num ((indexl x) s))) ==> (~ ((int_le ((int_add (int_of_num ((indexl x) s))) (int_of_num (NUMERAL (BIT1 _0))))) (int_of_num ((indexl x) s))))) = (~ ((int_le ((int_add (int_of_num ((indexl x) s))) (int_of_num (NUMERAL (BIT1 _0))))) (int_of_num ((indexl x) s)))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num cindexl f0 f1 c~ cint_le cint_add cint_of_num cindexl f0 f1 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cindexl f0 f1 c~ cint_le cint_add cint_of_num cindexl f0 f1 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cindexl f0 f1
+ (uniq s), ((MEM x) ((dropl (SUC ((indexl x) s))) s)) |- ((uniq s) /\ ((MEM x) s))
T c==> cuniq f0 c==> cMEM f1 cdropl cSUC cindexl f1 f0 f0 c/\ cuniq f0 cMEM f1 f0
+ (~ (((indexl x) s) < ((indexl z) s))), (uniq s), ((MEM x) ((take ((indexl z) s)) s)) |- (((MEM x) ((take ((indexl z) s)) s)) ==> F)
T c==> c~ c< cindexl f0 f1 cindexl f2 f1 c==> cuniq f1 c==> cMEM f0 ctake cindexl f2 f1 f1 c==> cMEM f0 ctake cindexl f2 f1 f1 cF
+ |- (~ ((int_le ((int_add (int_of_num ((indexl x) s))) (int_of_num (NUMERAL (BIT1 _0))))) (int_of_num ((indexl x) s))))
T c~ cint_le cint_add cint_of_num cindexl f0 f1 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cindexl f0 f1
+ |- ((\s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))) s)
T * / ! c==> cMEM b1 ctake f0 b0 cMEM b1 b0 f1
+ (~ (((indexl x) s) < ((indexl z) s))), (uniq s), ((MEM x) ((take ((indexl z) s)) s)) |- (T = (((MEM x) ((take ((indexl z) s)) s)) ==> F))
T c==> c~ c< cindexl f0 f1 cindexl f2 f1 c==> cuniq f1 c==> cMEM f0 ctake cindexl f2 f1 f1 c= cT c==> cMEM f0 ctake cindexl f2 f1 f1 cF
+ |- ((T /\ F) = F)
T c= c/\ cT cF cF
- |- ((\g'. (!t'. (!e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c< cindexl f0 f1 cindexl f2 f1 b0 c==> c==> b0 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 b1 c==> c==> c~ b0 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b2 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND b0 b1 b2 f3
+ |- (((!n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s))))) ==> ((\n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s))))) n0)) = ((\n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s))))) n0))
T c= c==> ! ! ! c==> cMEM b2 ctake b0 b1 cMEM b2 b1 * / ! ! c==> cMEM b2 ctake b0 b1 cMEM b2 b1 f0 * / ! ! c==> cMEM b2 ctake b0 b1 cMEM b2 b1 f0
+ |- (((!u. (!v. ((((MEM v) f) /\ (uniq f)) ==> ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f))))))) ==> ((\u. (!v. ((((MEM v) f) /\ (uniq f)) ==> ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f))))))) u)) = ((\u. (!v. ((((MEM v) f) /\ (uniq f)) ==> ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f))))))) u))
T c= c==> ! ! c==> c/\ cMEM b1 f0 cuniq f0 c= cbetwn f0 b0 b1 cCOND c< cindexl b0 f0 cindexl b1 f0 ctake cPRE c- cindexl b1 f0 cindexl b0 f0 cdropl cSUC cindexl b0 f0 f0 cAPPEND cdropl cSUC cindexl b0 f0 f0 ctake cindexl b1 f0 f0 * / ! c==> c/\ cMEM b1 f0 cuniq f0 c= cbetwn f0 b0 b1 cCOND c< cindexl b0 f0 cindexl b1 f0 ctake cPRE c- cindexl b1 f0 cindexl b0 f0 cdropl cSUC cindexl b0 f0 f0 cAPPEND cdropl cSUC cindexl b0 f0 f0 ctake cindexl b1 f0 f0 f1 * / ! c==> c/\ cMEM b1 f0 cuniq f0 c= cbetwn f0 b0 b1 cCOND c< cindexl b0 f0 cindexl b1 f0 ctake cPRE c- cindexl b1 f0 cindexl b0 f0 cdropl cSUC cindexl b0 f0 f0 cAPPEND cdropl cSUC cindexl b0 f0 f0 ctake cindexl b1 f0 f0 f1
+ (uniq s), ((MEM z) s) |- (~ ((MEM x) (((betwn s) x) z)))
T c==> cuniq f0 c==> cMEM f1 f0 c~ cMEM f2 cbetwn f0 f2 f1
+ |- (((!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) ==> ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)) = ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1))
T c= c==> ! ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((uniq s) /\ ((MEM z) s)) |- (((uniq s) /\ ((MEM z) s)) /\ (~ ((MEM x) (((betwn s) x) z))))
T c==> c/\ cuniq f0 cMEM f1 f0 c/\ c/\ cuniq f0 cMEM f1 f0 c~ cMEM f2 cbetwn f0 f2 f1
+ (uniq s), ((MEM x) ((take ((indexl z) s)) s)) |- ((((uniq s) /\ ((MEM x) s)) ==> (((MEM x) ((take ((indexl z) s)) s)) = (((indexl x) s) < ((indexl z) s)))) = (((MEM x) ((take ((indexl z) s)) s)) = (((indexl x) s) < ((indexl z) s))))
T c==> cuniq f0 c==> cMEM f1 ctake cindexl f2 f0 f0 c= c==> c/\ cuniq f0 cMEM f1 f0 c= cMEM f1 ctake cindexl f2 f0 f0 c< cindexl f1 f0 cindexl f2 f0 c= cMEM f1 ctake cindexl f2 f0 f0 c< cindexl f1 f0 cindexl f2 f0
+ |- ((\v. (!s. (((uniq s) /\ ((MEM v) s)) ==> (((MEM v) ((take k) s)) = (((indexl v) s) < k))))) v)
T * / ! c==> c/\ cuniq b1 cMEM b0 b1 c= cMEM b0 ctake f0 b1 c< cindexl b0 b1 f0 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ |- ((!s. (((uniq s) /\ ((MEM z) s)) ==> (~ ((MEM x) (((betwn s) x) z))))) = T)
T c= ! c==> c/\ cuniq b0 cMEM f0 b0 c~ cMEM f1 cbetwn b0 f1 f0 cT
+ |- (((!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) ==> ((\n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) ((indexl x) s))) = ((\n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) ((indexl x) s)))
T c= c==> ! cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 * / cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 cindexl f0 f1 * / cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 cindexl f0 f1
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (~ (((indexl x) s) < ((indexl z) s))), (uniq s) |- (((MEM x) ((take ((indexl z) s)) s)) ==> F)
T c==> c~ c< cindexl f0 f1 cindexl f2 f1 c==> cuniq f1 c==> cMEM f0 ctake cindexl f2 f1 f1 cF
+ (uniq s), ((MEM x) ((dropl (SUC ((indexl x) s))) s)) |- ((((uniq s) /\ ((MEM x) s)) ==> (((MEM x) ((dropl (SUC ((indexl x) s))) s)) = ((SUC ((indexl x) s)) <= ((indexl x) s)))) = (((MEM x) ((dropl (SUC ((indexl x) s))) s)) = ((SUC ((indexl x) s)) <= ((indexl x) s))))
T c==> cuniq f0 c==> cMEM f1 cdropl cSUC cindexl f1 f0 f0 c= c==> c/\ cuniq f0 cMEM f1 f0 c= cMEM f1 cdropl cSUC cindexl f1 f0 f0 c<= cSUC cindexl f1 f0 cindexl f1 f0 c= cMEM f1 cdropl cSUC cindexl f1 f0 f0 c<= cSUC cindexl f1 f0 cindexl f1 f0
+ |- (((NUMERAL (BIT1 _0)) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
+ (uniq s) |- (~ ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))))
T c==> cuniq f0 c~ cMEM f1 ctake cPRE c- cindexl f2 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0
+ (uniq s) |- (((((indexl x) s) < ((indexl z) s)) ==> (~ ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))))) /\ ((~ (((indexl x) s) < ((indexl z) s))) ==> (~ ((MEM x) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))))))
T c==> cuniq f0 c/\ c==> c< cindexl f1 f0 cindexl f2 f0 c~ cMEM f1 ctake cPRE c- cindexl f2 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0 c==> c~ c< cindexl f1 f0 cindexl f2 f0 c~ cMEM f1 cAPPEND cdropl cSUC cindexl f1 f0 f0 ctake cindexl f2 f0 f0
+ |- (((!f. (!u. (!v. ((((MEM v) f) /\ (uniq f)) ==> ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f)))))))) ==> ((\f. (!u. (!v. ((((MEM v) f) /\ (uniq f)) ==> ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f)))))))) f)) = ((\f. (!u. (!v. ((((MEM v) f) /\ (uniq f)) ==> ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f)))))))) f))
T c= c==> ! ! ! c==> c/\ cMEM b2 b0 cuniq b0 c= cbetwn b0 b1 b2 cCOND c< cindexl b1 b0 cindexl b2 b0 ctake cPRE c- cindexl b2 b0 cindexl b1 b0 cdropl cSUC cindexl b1 b0 b0 cAPPEND cdropl cSUC cindexl b1 b0 b0 ctake cindexl b2 b0 b0 * / ! ! c==> c/\ cMEM b2 b0 cuniq b0 c= cbetwn b0 b1 b2 cCOND c< cindexl b1 b0 cindexl b2 b0 ctake cPRE c- cindexl b2 b0 cindexl b1 b0 cdropl cSUC cindexl b1 b0 b0 cAPPEND cdropl cSUC cindexl b1 b0 b0 ctake cindexl b2 b0 b0 f0 * / ! ! c==> c/\ cMEM b2 b0 cuniq b0 c= cbetwn b0 b1 b2 cCOND c< cindexl b1 b0 cindexl b2 b0 ctake cPRE c- cindexl b2 b0 cindexl b1 b0 cdropl cSUC cindexl b1 b0 b0 cAPPEND cdropl cSUC cindexl b1 b0 b0 ctake cindexl b2 b0 b0 f0
+ |- ((\f. (!u. (!v. ((((MEM v) f) /\ (uniq f)) ==> ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f)))))))) f)
T * / ! ! c==> c/\ cMEM b2 b0 cuniq b0 c= cbetwn b0 b1 b2 cCOND c< cindexl b1 b0 cindexl b2 b0 ctake cPRE c- cindexl b2 b0 cindexl b1 b0 cdropl cSUC cindexl b1 b0 b0 cAPPEND cdropl cSUC cindexl b1 b0 b0 ctake cindexl b2 b0 b0 f0
+ |- ((int_of_num (m + n)) = ((int_add (int_of_num m)) (int_of_num n)))
T c= cint_of_num c+ f0 f1 cint_add cint_of_num f0 cint_of_num f1
+ |- (((!s. (((uniq s) /\ ((MEM v) s)) ==> (((MEM v) ((dropl k) s)) = (k <= ((indexl v) s))))) ==> ((\s. (((uniq s) /\ ((MEM v) s)) ==> (((MEM v) ((dropl k) s)) = (k <= ((indexl v) s))))) s)) = ((\s. (((uniq s) /\ ((MEM v) s)) ==> (((MEM v) ((dropl k) s)) = (k <= ((indexl v) s))))) s))
T c= c==> ! c==> c/\ cuniq b0 cMEM f0 b0 c= cMEM f0 cdropl f1 b0 c<= f1 cindexl f0 b0 * / c==> c/\ cuniq b0 cMEM f0 b0 c= cMEM f0 cdropl f1 b0 c<= f1 cindexl f0 b0 f2 * / c==> c/\ cuniq b0 cMEM f0 b0 c= cMEM f0 cdropl f1 b0 c<= f1 cindexl f0 b0 f2
+ |- ((\n0. (!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s))))) n0)
T * / ! ! c==> cMEM b2 ctake b0 b1 cMEM b2 b1 f0
+ |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ |- ((\n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n))) ((indexl x) s))
T * / cint_le cint_of_num cNUMERAL c_0 cint_of_num b0 cindexl f0 f1
+ (uniq s), ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) |- ((uniq s) /\ ((MEM x) s))
T c==> cuniq f0 c==> cMEM f1 ctake cPRE c- cindexl f2 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0 c/\ cuniq f0 cMEM f1 f0
+ (uniq s), (((indexl x) s) < ((indexl z) s)) |- ((((indexl x) s) < ((indexl z) s)) /\ (~ ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)))))
T c==> cuniq f0 c==> c< cindexl f1 f0 cindexl f2 f0 c/\ c< cindexl f1 f0 cindexl f2 f0 c~ cMEM f1 ctake cPRE c- cindexl f2 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0
+ |- ((\v. ((((MEM v) f) /\ (uniq f)) ==> ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f)))))) v)
T * / c==> c/\ cMEM b0 f0 cuniq f0 c= cbetwn f0 f1 b0 cCOND c< cindexl f1 f0 cindexl b0 f0 ctake cPRE c- cindexl b0 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0 cAPPEND cdropl cSUC cindexl f1 f0 f0 ctake cindexl b0 f0 f0 f2
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (uniq s), ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) |- ((~ ((SUC ((indexl x) s)) <= ((indexl x) s))) = (((MEM x) ((dropl (SUC ((indexl x) s))) s)) ==> F))
T c==> cuniq f0 c==> cMEM f1 ctake cPRE c- cindexl f2 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0 c= c~ c<= cSUC cindexl f1 f0 cindexl f1 f0 c==> cMEM f1 cdropl cSUC cindexl f1 f0 f0 cF
+ |- ((~ ((int_le ((int_add (int_of_num ((indexl x) s))) (int_of_num (NUMERAL (BIT1 _0))))) (int_of_num ((indexl x) s)))) = (~ ((SUC ((indexl x) s)) <= ((indexl x) s))))
T c= c~ cint_le cint_add cint_of_num cindexl f0 f1 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num cindexl f0 f1 c~ c<= cSUC cindexl f0 f1 cindexl f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((indexl x) s) < ((indexl z) s)) |- ((((indexl x) s) < ((indexl z) s)) = T)
T c==> c< cindexl f0 f1 cindexl f2 f1 c= c< cindexl f0 f1 cindexl f2 f1 cT
+ |- ((\x. (((MEM x) ((dropl n0) s)) ==> ((MEM x) s))) x)
T * / c==> cMEM b0 cdropl f0 f1 cMEM b0 f1 f2
+ (uniq s) |- (~ ((MEM x) (((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)))))
T c==> cuniq f0 c~ cMEM f1 cCOND c< cindexl f1 f0 cindexl f2 f0 ctake cPRE c- cindexl f2 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0 cAPPEND cdropl cSUC cindexl f1 f0 f0 ctake cindexl f2 f0 f0
+ (uniq s), ((MEM z) s) |- ((~ ((MEM x) (((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))))) = (((MEM x) (((betwn s) x) z)) ==> F))
T c==> cuniq f0 c==> cMEM f1 f0 c= c~ cMEM f2 cCOND c< cindexl f2 f0 cindexl f1 f0 ctake cPRE c- cindexl f1 f0 cindexl f2 f0 cdropl cSUC cindexl f2 f0 f0 cAPPEND cdropl cSUC cindexl f2 f0 f0 ctake cindexl f1 f0 f0 c==> cMEM f2 cbetwn f0 f2 f1 cF
+ ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) |- ((MEM x) s)
T c==> cMEM f0 ctake cPRE c- cindexl f1 f2 cindexl f0 f2 cdropl cSUC cindexl f0 f2 f2 cMEM f0 f2
+ |- (((real_mul (real_neg (real_of_num x))) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
+ (uniq s), ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) |- (((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) /\ F)
T c==> cuniq f0 c==> cMEM f1 ctake cPRE c- cindexl f2 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0 c/\ cMEM f1 ctake cPRE c- cindexl f2 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0 cF
+ (uniq s), ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) |- (((MEM x) ((dropl (SUC ((indexl x) s))) s)) = ((SUC ((indexl x) s)) <= ((indexl x) s)))
T c==> cuniq f0 c==> cMEM f1 ctake cPRE c- cindexl f2 f0 cindexl f1 f0 cdropl cSUC cindexl f1 f0 f0 c= cMEM f1 cdropl cSUC cindexl f1 f0 f0 c<= cSUC cindexl f1 f0 cindexl f1 f0
- |- ((((((indexl x) s) < ((indexl z) s)) = (((indexl x) s) < ((indexl z) s))) ==> (((((indexl x) s) < ((indexl z) s)) ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ (((indexl x) s) < ((indexl z) s))) ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND (((indexl x) s) < ((indexl z) s))) t') e'))))) = (((((indexl x) s) < ((indexl z) s)) ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ (((indexl x) s) < ((indexl z) s))) ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND (((indexl x) s) < ((indexl z) s))) t') e')))))
T c= c==> c= c< cindexl f0 f1 cindexl f2 f1 c< cindexl f0 f1 cindexl f2 f1 c==> c==> c< cindexl f0 f1 cindexl f2 f1 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f3 c==> c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 f4 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND c< cindexl f0 f1 cindexl f2 f1 f3 f4 c==> c==> c< cindexl f0 f1 cindexl f2 f1 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f3 c==> c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 f4 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND c< cindexl f0 f1 cindexl f2 f1 f3 f4
- |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
- (((indexl x) s) < ((indexl z) s)) |- ((((indexl x) s) < ((indexl z) s)) /\ (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))))
T c==> c< cindexl f0 f1 cindexl f2 f1 c/\ c< cindexl f0 f1 cindexl f2 f1 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1
- |- ((((((indexl x) s) < ((indexl z) s)) ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)))) ==> (((~ (((indexl x) s) < ((indexl z) s))) ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) e')))) = (((~ (((indexl x) s) < ((indexl z) s))) ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) e'))))
T c= c==> c==> c< cindexl f0 f1 cindexl f2 f1 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 c==> c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 f3 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f3 c==> c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 f3 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f3
- |- (((((indexl x) s) < ((indexl z) s)) ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ (((indexl x) s) < ((indexl z) s))) ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND (((indexl x) s) < ((indexl z) s))) t') e'))))
T c==> c==> c< cindexl f0 f1 cindexl f2 f1 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f3 c==> c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 f4 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND c< cindexl f0 f1 cindexl f2 f1 f3 f4
+ (~ (((indexl x) s) < ((indexl z) s))) |- ((((indexl x) s) < ((indexl z) s)) = F)
T c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= c< cindexl f0 f1 cindexl f2 f1 cF
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)
T * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ |- ((!z. (!s. (((uniq s) /\ ((MEM z) s)) ==> (~ ((MEM x) (((betwn s) x) z)))))) = T)
T c= ! ! c==> c/\ cuniq b1 cMEM b0 b1 c~ cMEM f0 cbetwn b1 f0 b0 cT
+ (uniq s), ((MEM z) s) |- (T = (((MEM z) s) /\ (uniq s)))
T c==> cuniq f0 c==> cMEM f1 f0 c= cT c/\ cMEM f1 f0 cuniq f0
+ |- (((real_add (real_neg (real_of_num m))) (real_of_num m)) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_neg creal_of_num f0 creal_of_num f0 creal_of_num cNUMERAL c_0
+ (uniq s), ((MEM x) ((take ((indexl z) s)) s)) |- ((uniq s) /\ ((MEM x) s))
T c==> cuniq f0 c==> cMEM f1 ctake cindexl f2 f0 f0 c/\ cuniq f0 cMEM f1 f0
+ |- ((m <= n) = ((int_le (int_of_num m)) (int_of_num n)))
T c= c<= f0 f1 cint_le cint_of_num f0 cint_of_num f1
+ ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) |- (((MEM x) s) = T)
T c==> cMEM f0 ctake cPRE c- cindexl f1 f2 cindexl f0 f2 cdropl cSUC cindexl f0 f2 f2 c= cMEM f0 f2 cT
- ((uniq s) /\ ((MEM v) s)) |- (((uniq s) /\ ((MEM v) s)) /\ (((MEM v) ((take k) s)) = (((indexl v) s) < k)))
T c==> c/\ cuniq f0 cMEM f1 f0 c/\ c/\ cuniq f0 cMEM f1 f0 c= cMEM f1 ctake f2 f0 c< cindexl f1 f0 f2
+ |- ((\n0. (!s. (!x. (((MEM x) ((dropl n0) s)) ==> ((MEM x) s))))) n0)
T * / ! ! c==> cMEM b2 cdropl b0 b1 cMEM b2 b1 f0
+ |- (((!s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))) ==> ((\s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))) s)) = ((\s. (!x. (((MEM x) ((take n0) s)) ==> ((MEM x) s)))) s))
T c= c==> ! ! c==> cMEM b1 ctake f0 b0 cMEM b1 b0 * / ! c==> cMEM b1 ctake f0 b0 cMEM b1 b0 f1 * / ! c==> cMEM b1 ctake f0 b0 cMEM b1 b0 f1
- (uniq s), ((MEM x) (((betwn s) x) z)), ((MEM z) s) |- F
T c==> cuniq f0 c==> cMEM f1 cbetwn f0 f1 f2 c==> cMEM f2 f0 cF
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (~ (((indexl x) s) < ((indexl z) s))), (uniq s) |- ((((MEM x) ((dropl (SUC ((indexl x) s))) s)) \/ ((MEM x) ((take ((indexl z) s)) s))) ==> F)
T c==> c~ c< cindexl f0 f1 cindexl f2 f1 c==> cuniq f1 c==> c\/ cMEM f0 cdropl cSUC cindexl f0 f1 f1 cMEM f0 ctake cindexl f2 f1 f1 cF
+ (~ (((indexl x) s) < ((indexl z) s))), (uniq s) |- (~ (((MEM x) ((dropl (SUC ((indexl x) s))) s)) \/ ((MEM x) ((take ((indexl z) s)) s))))
T c==> c~ c< cindexl f0 f1 cindexl f2 f1 c==> cuniq f1 c~ c\/ cMEM f0 cdropl cSUC cindexl f0 f1 f1 cMEM f0 ctake cindexl f2 f1 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) ==> ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2)) = ((\l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))) l2))
T c= c==> ! c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2 * / c= cMEM f0 cAPPEND f1 b0 c\/ cMEM f0 f1 cMEM f0 b0 f2
+ (uniq s), ((MEM x) ((take ((indexl z) s)) s)) |- (T = ((uniq s) /\ ((MEM x) s)))
T c==> cuniq f0 c==> cMEM f1 ctake cindexl f2 f0 f0 c= cT c/\ cuniq f0 cMEM f1 f0
- |- (!g'. (!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5
- (~ (((indexl x) s) < ((indexl z) s))) |- ((~ (((indexl x) s) < ((indexl z) s))) /\ (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))))
T c==> c~ c< cindexl f0 f1 cindexl f2 f1 c/\ c~ c< cindexl f0 f1 cindexl f2 f1 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1
- |- ((~ ((SUC ((indexl x) s)) <= ((indexl x) s))) = T)
T c= c~ c<= cSUC cindexl f0 f1 cindexl f0 f1 cT
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))))
T c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1
- (~ (((indexl x) s) < ((indexl z) s))) |- ((~ ((MEM x) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)))) = (~ ((MEM x) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)))))
T c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= c~ cMEM f0 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 c~ cMEM f0 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1
- |- ((\e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e')))))) e')
T * / c==> c= c< cindexl f0 f1 cindexl f2 f1 f3 c==> c==> f3 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f4 c==> c==> c~ f3 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b0 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND f3 f4 b0 f5
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e')))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 b0 c= cCOND f0 f2 f4 cCOND f1 f3 b0 cT
- |- (T = (~ ((SUC ((indexl x) s)) <= ((indexl x) s))))
T c= cT c~ c<= cSUC cindexl f0 f1 cindexl f0 f1
- ((uniq s) /\ ((MEM v) s)) |- (((uniq s) /\ ((MEM v) s)) /\ (((MEM v) ((dropl k) s)) = (k <= ((indexl v) s))))
T c==> c/\ cuniq f0 cMEM f1 f0 c/\ c/\ cuniq f0 cMEM f1 f0 c= cMEM f1 cdropl f2 f0 c<= f2 cindexl f1 f0
- (uniq s), ((MEM x) (((betwn s) x) z)), ((MEM z) s) |- (((MEM x) (((betwn s) x) z)) /\ F)
T c==> cuniq f0 c==> cMEM f1 cbetwn f0 f1 f2 c==> cMEM f2 f0 c/\ cMEM f1 cbetwn f0 f1 f2 cF
- |- (((!g'. (!t'. (!e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c< cindexl f0 f1 cindexl f2 f1 b0 c==> c==> b0 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 b1 c==> c==> c~ b0 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b2 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND b0 b1 b2 * / ! ! c==> c= c< cindexl f0 f1 cindexl f2 f1 b0 c==> c==> b0 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 b1 c==> c==> c~ b0 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b2 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND b0 b1 b2 f3 * / ! ! c==> c= c< cindexl f0 f1 cindexl f2 f1 b0 c==> c==> b0 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 b1 c==> c==> c~ b0 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b2 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND b0 b1 b2 f3
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!t'. (!e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c< cindexl f0 f1 cindexl f2 f1 f3 c==> c==> f3 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 b0 c==> c==> c~ f3 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b1 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND f3 b0 b1 * / ! c==> c= c< cindexl f0 f1 cindexl f2 f1 f3 c==> c==> f3 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 b0 c==> c==> c~ f3 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b1 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND f3 b0 b1 f4 * / ! c==> c= c< cindexl f0 f1 cindexl f2 f1 f3 c==> c==> f3 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 b0 c==> c==> c~ f3 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b1 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND f3 b0 b1 f4
- (((MEM v) f) /\ (uniq f)) |- ((((MEM v) f) /\ (uniq f)) /\ ((((betwn f) u) v) = (((COND (((indexl u) f) < ((indexl v) f))) ((take (PRE (((indexl v) f) - ((indexl u) f)))) ((dropl (SUC ((indexl u) f))) f))) ((APPEND ((dropl (SUC ((indexl u) f))) f)) ((take ((indexl v) f)) f)))))
T c==> c/\ cMEM f0 f1 cuniq f1 c/\ c/\ cMEM f0 f1 cuniq f1 c= cbetwn f1 f2 f0 cCOND c< cindexl f2 f1 cindexl f0 f1 ctake cPRE c- cindexl f0 f1 cindexl f2 f1 cdropl cSUC cindexl f2 f1 f1 cAPPEND cdropl cSUC cindexl f2 f1 f1 ctake cindexl f0 f1 f1
- (((indexl x) s) < ((indexl z) s)) |- ((~ ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)))) = (~ ((MEM x) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)))))
T c==> c< cindexl f0 f1 cindexl f2 f1 c= c~ cMEM f0 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 c~ cMEM f0 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((~ (((indexl x) s) < ((indexl z) s))) ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)))) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))))) = ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)))))
T c= c==> c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1
- |- ((~ (((indexl x) s) < ((indexl z) s))) ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))))
T c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((~ (((indexl x) s) < ((indexl z) s))) ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) e')))
T c==> c==> c~ c< cindexl f0 f1 cindexl f2 f1 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 f3 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f3
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e')))))
T c==> c= c< cindexl f0 f1 cindexl f2 f1 f3 c==> c==> f3 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f4 c==> c==> c~ f3 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 f5 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND f3 f4 f5
- |- (((!e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e')))))) ==> ((\e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e')))))) e')) = ((\e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c< cindexl f0 f1 cindexl f2 f1 f3 c==> c==> f3 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f4 c==> c==> c~ f3 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b0 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND f3 f4 b0 * / c==> c= c< cindexl f0 f1 cindexl f2 f1 f3 c==> c==> f3 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f4 c==> c==> c~ f3 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b0 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND f3 f4 b0 f5 * / c==> c= c< cindexl f0 f1 cindexl f2 f1 f3 c==> c==> f3 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 f4 c==> c==> c~ f3 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b0 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND f3 f4 b0 f5
- |- (((real_lt (real_of_num m)) (real_of_num n)) = (m < n))
T c= creal_lt creal_of_num f0 creal_of_num f1 c< f0 f1
- |- ((((indexl x) s) < ((indexl z) s)) ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))))
T c==> c< cindexl f0 f1 cindexl f2 f1 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1
- |- ((\t'. (!e'. (((((indexl x) s) < ((indexl z) s)) = g') ==> ((g' ==> (((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s)) = t')) ==> (((~ g') ==> (((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s)) = e')) ==> ((((COND (((indexl x) s) < ((indexl z) s))) ((take (PRE (((indexl z) s) - ((indexl x) s)))) ((dropl (SUC ((indexl x) s))) s))) ((APPEND ((dropl (SUC ((indexl x) s))) s)) ((take ((indexl z) s)) s))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c< cindexl f0 f1 cindexl f2 f1 f3 c==> c==> f3 c= ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 b0 c==> c==> c~ f3 c= cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 b1 c= cCOND c< cindexl f0 f1 cindexl f2 f1 ctake cPRE c- cindexl f2 f1 cindexl f0 f1 cdropl cSUC cindexl f0 f1 f1 cAPPEND cdropl cSUC cindexl f0 f1 f1 ctake cindexl f2 f1 f1 cCOND f3 b0 b1 f4
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))) = T)
T c= ! ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c==> c==> c~ f1 c= f3 b1 c= cCOND f0 f2 f3 cCOND f1 b0 b1 cT
