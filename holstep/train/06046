N List_hypermap.list_pairs_inj
C |- (!s1. (!s2. (((list_pairs s1) = (list_pairs s2)) ==> (s1 = s2))))
T c==> c= clist_pairs f0 clist_pairs f1 c= f0 f1
D TRUTH
A |- T
T cT
D LE_REFL
A |- (!n. (n <= n))
T c<= f0 f0
D Seq.congr1
A |- (!f. (!x. (!y. ((x = y) ==> ((f x) = (f y))))))
T c==> c= f0 f1 c= * f2 f0 * f2 f1
D Seq.size_rot
A |- (!n0. (!s. ((sizel ((rot n0) s)) = (sizel s))))
T c= csizel crot f0 f1 csizel f1
D Seq.unzip1_zip
A |- (!s. (!t. (((sizel s) <= (sizel t)) ==> ((unzip1 ((zip s) t)) = s))))
T c==> c<= csizel f0 csizel f1 c= cunzip1 czip f0 f1 f0
D List_hypermap.list_pairs
A |- (!list. ((list_pairs list) = ((zip list) ((rot (NUMERAL (BIT1 _0))) list))))
T c= clist_pairs f0 czip f0 crot cNUMERAL cBIT1 c_0 f0
+ |- (((sizel s2) <= (sizel s2)) = ((sizel s2) <= (sizel ((rot (NUMERAL (BIT1 _0))) s2))))
T c= c<= csizel f0 csizel f0 c<= csizel f0 csizel crot cNUMERAL cBIT1 c_0 f0
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- ((((sizel s2) <= (sizel ((rot (NUMERAL (BIT1 _0))) s2))) ==> ((unzip1 ((zip s2) ((rot (NUMERAL (BIT1 _0))) s2))) = s2)) ==> ((s1 = (unzip1 ((zip s2) ((rot (NUMERAL (BIT1 _0))) s2)))) ==> (s1 = s2)))
T c==> c==> c<= csizel f0 csizel crot cNUMERAL cBIT1 c_0 f0 c= cunzip1 czip f0 crot cNUMERAL cBIT1 c_0 f0 f0 c==> c= f1 cunzip1 czip f0 crot cNUMERAL cBIT1 c_0 f0 c= f1 f0
+ |- ((x = y) ==> ((unzip1 x) = (unzip1 y)))
T c==> c= f0 f1 c= cunzip1 f0 cunzip1 f1
+ |- ((\n0. (!s. ((sizel ((rot n0) s)) = (sizel s)))) n0)
T * / ! c= csizel crot b0 b1 csizel b1 f0
+ ((unzip1 ((zip s1) ((rot (NUMERAL (BIT1 _0))) s1))) = s1) |- (((unzip1 ((zip s1) ((rot (NUMERAL (BIT1 _0))) s1))) = s1) /\ (((unzip1 ((zip s1) ((rot (NUMERAL (BIT1 _0))) s1))) = (unzip1 ((zip s2) ((rot (NUMERAL (BIT1 _0))) s2)))) ==> (s1 = s2)))
T c==> c= cunzip1 czip f0 crot cNUMERAL cBIT1 c_0 f0 f0 c/\ c= cunzip1 czip f0 crot cNUMERAL cBIT1 c_0 f0 f0 c==> c= cunzip1 czip f0 crot cNUMERAL cBIT1 c_0 f0 cunzip1 czip f1 crot cNUMERAL cBIT1 c_0 f1 c= f0 f1
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
+ |- (((((zip s1) ((rot (NUMERAL (BIT1 _0))) s1)) = (list_pairs s2)) ==> (s1 = s2)) = (((list_pairs s1) = (list_pairs s2)) ==> (s1 = s2)))
T c= c==> c= czip f0 crot cNUMERAL cBIT1 c_0 f0 clist_pairs f1 c= f0 f1 c==> c= clist_pairs f0 clist_pairs f1 c= f0 f1
+ |- ((\x. (!y. ((x = y) ==> ((unzip1 x) = (unzip1 y))))) x)
T * / ! c==> c= b0 b1 c= cunzip1 b0 cunzip1 b1 f0
+ |- ((\s. ((sizel ((rot n0) s)) = (sizel s))) s)
T * / c= csizel crot f0 b0 csizel b0 f1
+ |- (((((zip s1) ((rot (NUMERAL (BIT1 _0))) s1)) = ((zip s2) ((rot (NUMERAL (BIT1 _0))) s2))) ==> (s1 = s2)) = ((((zip s1) ((rot (NUMERAL (BIT1 _0))) s1)) = (list_pairs s2)) ==> (s1 = s2)))
T c= c==> c= czip f0 crot cNUMERAL cBIT1 c_0 f0 czip f1 crot cNUMERAL cBIT1 c_0 f1 c= f0 f1 c==> c= czip f0 crot cNUMERAL cBIT1 c_0 f0 clist_pairs f1 c= f0 f1
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- ((sizel s) <= (sizel t)) |- (((sizel s) <= (sizel t)) /\ ((unzip1 ((zip s) t)) = s))
T c==> c<= csizel f0 csizel f1 c/\ c<= csizel f0 csizel f1 c= cunzip1 czip f0 f1 f0
