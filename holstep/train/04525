N Reduction3.subdivFaceFinal2_finals
C |- (!vs. (!g. (!f. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((set_of_list (finals (((subdivFaceFinal2 g) f) vs))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))))))
T c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 cSUBSET * part cset_of_list cfinals csubdivFaceFinal2 f1 f0 f2 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 part cEMPTY
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D SELECT_AX
A |- (!P. (!x. ((P x) ==> (P (@ P)))))
T c==> * f0 f1 * f0 c@ f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D GABS_DEF
A |- (!P. ((GABS P) = (@ P)))
T c= cGABS f0 c@ f0
D GEQ_DEF
A |- (!a. (!b. (((GEQ a) b) = (a = b))))
T c= cGEQ f0 f1 c= f0 f1
D PAIR_EQ
A |- (!x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))))
T c= c= c, f0 f1 c, f2 f3 c/\ c= f0 f2 c= f1 f3
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D PAIR
A |- (!x. (((FST x) , (SND x)) = x))
T c= c, cFST f0 cSND f0 f0
D pair_RECURSION
A |- (!PAIR'. (?fn. (!a0. (!a1. ((fn (a0 , a1)) = ((PAIR' a0) a1))))))
T c? / ! ! c= * b0 c, b1 b2 * * f0 b1 b2
D SUBSET
A |- (!s. (!t. ((s SUBSET t) = (!x. ((x IN s) ==> (x IN t))))))
T c= cSUBSET f0 f1 ! c==> cIN b0 f0 cIN b0 f1
D IN_UNION
A |- (!s. (!t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t))))))
T c= cIN f0 * * part cUNION f1 f2 c\/ cIN f0 f1 cIN f0 f2
D IN_SING
A |- (!x. (!y. ((x IN (y INSERT EMPTY)) = (x = y))))
T c= cIN f0 * * part cINSERT f1 part cEMPTY c= f0 f1
D IN_SET_OF_LIST
A |- (!x. (!l. ((x IN (set_of_list l)) = ((MEM x) l))))
T c= cIN f0 * part cset_of_list f1 cMEM f0 f1
D Wrgcvdr_cizmrrh.PAIR_EQ2
A |- ((a = b) = (((FST a) = (FST b)) /\ ((SND a) = (SND b))))
T c= c= f0 f1 c/\ c= cFST f0 cFST f1 c= cSND f0 cSND f1
D Tame_defs.finals
A |- (!g. ((finals g) = ((FILTER SND) (faces g))))
T c= cfinals f0 cFILTER part cSND cfaces f0
D Tame_defs2.subdivFaceFinal2
A |- (!f. (!g. (!uvns. ((((subdivFaceFinal2 g) f) uvns) = ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) uvns))))))
T c= csubdivFaceFinal2 f0 f1 f2 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f0 f1 ccountVertices f0 f2
D Tame_list.lower_case
A |- ((MAP = map) /\ ((LENGTH = sizel) /\ ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))))
T c/\ c= part cMAP part cmap c/\ c= part cLENGTH part csizel c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
D Reduction1.mem_faces_makeFaceFinal
A |- (!g. (!f. (!f'. (((MEM f') ((filter SND) (faces ((makeFaceFinal f) g)))) ==> ((f' = (setFinal f)) \/ ((MEM f') ((filter SND) (faces g))))))))
T c==> cMEM f0 cfilter part cSND cfaces cmakeFaceFinal f1 f2 c\/ c= f0 csetFinal f1 cMEM f0 cfilter part cSND cfaces f2
D Reduction3.subdivFace0_alt2_finals
A |- (!vs. (!g. (!f. (!n. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) n) vs)))))))))
T c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 f2 f3
- |- ((\g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) g')
T * / c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals b0 c\/ cMEM f0 cfinals b0 c= f0 csetFinal f1 cF f2
- |- ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))
T c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- |- ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))))
T c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY
+ |- (?f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))
T c? / c? / c= c, b0 b1 csubdivFace0_alt2 f0 f1 ccountVertices f0 f2
+ |- ((a /\ T) = a)
T c= c/\ f0 cT f0
- |- (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) = (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f')))))
T c= c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1
+ (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))) |- ((x = (setFinal f')) ==> F)
T c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> c= f0 csetFinal f2 cF
+ (((FILTER SND) (faces g)) = (finals g)) |- ((finals g) = ((FILTER SND) (faces g)))
T c==> c= cFILTER part cSND cfaces f0 cfinals f0 c= cfinals f0 cFILTER part cSND cfaces f0
+ |- (((!l. ((x IN (set_of_list l)) = ((MEM x) l))) ==> ((\l. ((x IN (set_of_list l)) = ((MEM x) l))) l)) = ((\l. ((x IN (set_of_list l)) = ((MEM x) l))) l))
T c= c==> ! c= cIN f0 * part cset_of_list b0 cMEM f0 b0 * / c= cIN f0 * part cset_of_list b0 cMEM f0 b0 f1 * / c= cIN f0 * part cset_of_list b0 cMEM f0 b0 f1
+ |- (((!s. (!t. ((s SUBSET t) = (!x. ((x IN s) ==> (x IN t)))))) ==> ((\s. (!t. ((s SUBSET t) = (!x. ((x IN s) ==> (x IN t)))))) s)) = ((\s. (!t. ((s SUBSET t) = (!x. ((x IN s) ==> (x IN t)))))) s))
T c= c==> ! ! c= cSUBSET b0 b1 ! c==> cIN b2 b0 cIN b2 b1 * / ! c= cSUBSET b0 b1 ! c==> cIN b2 b0 cIN b2 b1 f0 * / ! c= cSUBSET b0 b1 ! c==> cIN b2 b0 cIN b2 b1 f0
+ |- ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))
T c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- |- ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)
T * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
+ |- (((!y. ((x IN (y INSERT EMPTY)) = (x = y))) ==> ((\y. ((x IN (y INSERT EMPTY)) = (x = y))) y)) = ((\y. ((x IN (y INSERT EMPTY)) = (x = y))) y))
T c= c==> ! c= cIN f0 * * part cINSERT b0 part cEMPTY c= f0 b0 * / c= cIN f0 * * part cINSERT b0 part cEMPTY c= f0 b0 f1 * / c= cIN f0 * * part cINSERT b0 part cEMPTY c= f0 b0 f1
- (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))), (x = (setFinal f')) |- (~ ((MEM (setFinal f')) (finals g')))
T c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> c= f0 csetFinal f2 c~ cMEM csetFinal f2 cfinals f1
+ (~ (SND f)), ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)), ((MEM f) (faces g)) |- (((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) /\ ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))
T c==> c~ cSND f0 c==> c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cMEM f0 cfaces f3 c/\ c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 part cEMPTY
+ (x = (setFinal f')) |- ((~ (x = (setFinal f'))) = (~ ((setFinal f') = (setFinal f'))))
T c==> c= f0 csetFinal f1 c= c~ c= f0 csetFinal f1 c~ c= csetFinal f1 csetFinal f1
- |- ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))
T c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- |- ((\f'. (!x. (!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)))) f')
T * / ! ! c==> c~ c==> c\/ c= b1 csetFinal b0 cMEM b1 cfinals b2 c\/ cMEM b1 cfinals b2 c= b1 csetFinal b0 cF f0
+ |- (?_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g))))))
T c? / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2
- (~ ((setFinal f') = (setFinal f'))) |- ((~ ((setFinal f') = (setFinal f'))) /\ ((setFinal f') = (setFinal f')))
T c==> c~ c= csetFinal f0 csetFinal f0 c/\ c~ c= csetFinal f0 csetFinal f0 c= csetFinal f0 csetFinal f0
+ ((f' = (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) /\ (g' = (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) |- (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))
T c==> c/\ c= f0 cFST csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 c= f4 cSND csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 c? / c= c, f0 b0 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3
+ ((MEM x) (finals ((makeFaceFinal f') g'))) |- (((MEM x) (finals ((makeFaceFinal f') g'))) /\ (((MEM x) (finals g')) \/ (x = (setFinal f'))))
T c==> cMEM f0 cfinals cmakeFaceFinal f1 f2 c/\ cMEM f0 cfinals cmakeFaceFinal f1 f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1
+ |- ((\g. (!f. (!f'. (((MEM f') ((filter SND) (faces ((makeFaceFinal f) g)))) ==> ((f' = (setFinal f)) \/ ((MEM f') ((filter SND) (faces g)))))))) g')
T * / ! ! c==> cMEM b2 cfilter part cSND cfaces cmakeFaceFinal b1 b0 c\/ c= b2 csetFinal b1 cMEM b2 cfilter part cSND cfaces b0 f0
- |- (((((finals g) = (finals g')) = ((finals g) = (finals g'))) ==> ((((finals g) = (finals g')) ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> q')))) = ((((finals g) = (finals g')) ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> q'))))
T c= c==> c= c= cfinals f0 cfinals f1 c= cfinals f0 cfinals f1 c==> c==> c= cfinals f0 cfinals f1 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY f3 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> c= cfinals f0 cfinals f1 f3 c==> c==> c= cfinals f0 cfinals f1 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY f3 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> c= cfinals f0 cfinals f1 f3
- (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))), (~ (SND f)), ((MEM f) (faces g)) |- ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))
T c==> c? / c= c, f0 b0 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 c==> c~ cSND f2 c==> cMEM f2 cfaces f1 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 part cEMPTY
- (~ ((MEM x) (finals g'))), ((MEM x) (finals g')) |- ((~ ((MEM x) (finals g'))) /\ ((MEM x) (finals g')))
T c==> c~ cMEM f0 cfinals f1 c==> cMEM f0 cfinals f1 c/\ c~ cMEM f0 cfinals f1 cMEM f0 cfinals f1
+ ((MEM x) (finals ((makeFaceFinal f') g'))) |- (((MEM x) (finals ((makeFaceFinal f') g'))) = T)
T c==> cMEM f0 cfinals cmakeFaceFinal f1 f2 c= cMEM f0 cfinals cmakeFaceFinal f1 f2 cT
- |- (MAP = map)
T c= part cMAP part cmap
- |- (LENGTH = sizel)
T c= part cLENGTH part csizel
+ (~ (SND f)), ((MEM f) (faces g)), ((\g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) g') |- (((\g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) g') /\ ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))
T c==> c~ cSND f0 c==> cMEM f0 cfaces f1 c==> * / c= c, f2 b0 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 f4 c/\ * / c= c, f2 b0 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 f4 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 part cEMPTY
+ |- ((!f. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))) = T)
T c= ! c==> c/\ cMEM b0 cfaces f0 c~ cSND b0 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b1 c, b2 b2 cLET_END cmakeFaceFinal b2 b2 csubdivFace0_alt2 f0 b0 ccountVertices f0 f1 * * part cUNION * part cset_of_list cfinals f0 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f0 b0 ccountVertices f0 f1 part cEMPTY cT
+ ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- (((FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) = f') /\ ((SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) = g'))
T c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c/\ c= cFST csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 f0 c= cSND csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 f1
+ (~ (SND f)), ((MEM f) (faces g)) |- (((\f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) f') ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))
T c==> c~ cSND f0 c==> cMEM f0 cfaces f1 c==> * / c? / c= c, b0 b1 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 f3 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 part cEMPTY
+ (~ (SND f)), ((MEM f) (faces g)) |- (!g'. (((\g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) g') ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))))
T c==> c~ cSND f0 c==> cMEM f0 cfaces f1 ! c==> * / c= c, f2 b1 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 b0 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cmakeFaceFinal b2 b3 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 part cEMPTY
+ (~ (SND f)), ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)), ((MEM f) (faces g)) |- ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST (f' , g'))) INSERT EMPTY)))
T c==> c~ cSND f0 c==> c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cMEM f0 cfaces f3 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal cFST c, f1 f2 part cEMPTY
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))), (x = (setFinal f')) |- ((x = (setFinal f')) /\ F)
T c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> c= f0 csetFinal f2 c/\ c= f0 csetFinal f2 cF
- |- ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)
T * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ (~ (SND f)), ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)), ((MEM f) (faces g)) |- (((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))))
T c==> c~ cSND f0 c==> c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cMEM f0 cfaces f3 c==> c==> c/\ cMEM f0 cfaces f3 c~ cSND f0 c= cfinals f3 cfinals cSND csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal f1 part cEMPTY
- |- ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))
T c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0
- ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- (((MEM f) (faces g)) = ((MEM f) (faces g)))
T c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c= cMEM f3 cfaces f2 cMEM f3 cfaces f2
- |- ((\x. (!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))) x)
T * / ! c==> c~ c==> c\/ c= b0 csetFinal f0 cMEM b0 cfinals b1 c\/ cMEM b0 cfinals b1 c= b0 csetFinal f0 cF f1
+ |- ((\q'. ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))) q')
T * / c==> c= c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 f3 c==> c==> f3 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY b0 c= c==> c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY c==> f3 b0 f6
+ |- ((\p'. (!q'. ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q')))))) p')
T * / ! c==> c= c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 b0 c==> c==> b0 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f4 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY b1 c= c==> c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f4 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY c==> b0 b1 f5
+ |- ((\g. (!uvns. ((((subdivFaceFinal2 g) f) uvns) = ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) uvns))))) g)
T * / ! c= csubdivFaceFinal2 b0 f0 b1 cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cmakeFaceFinal b3 b4 csubdivFace0_alt2 b0 f0 ccountVertices b0 b1 f1
+ (~ (SND f)), ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)), ((MEM f) (faces g)) |- ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) (f' , g')))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST (f' , g'))) INSERT EMPTY)))
T c==> c~ cSND f0 c==> c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cMEM f0 cfaces f3 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 c, f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal cFST c, f1 f2 part cEMPTY
- |- ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)
T * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
+ |- (!f. (!g. (((\_10531238. (LET_END ((makeFaceFinal ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10531238)) ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10531238)))) (f , g)) = (LET_END ((makeFaceFinal f) g)))))
T c= * / cLET_END cmakeFaceFinal c@ / ! ! c= * b1 c, b2 b3 b2 b0 c@ / ! ! c= * b1 c, b2 b3 b3 b0 c, f0 f1 cLET_END cmakeFaceFinal f0 f1
+ ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- ((SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) = g')
T c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c= cSND csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 f1
+ |- (((!uvns. ((((subdivFaceFinal2 g) f) uvns) = ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) uvns)))) ==> ((\uvns. ((((subdivFaceFinal2 g) f) uvns) = ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) uvns)))) uvns)) = ((\uvns. ((((subdivFaceFinal2 g) f) uvns) = ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) uvns)))) uvns))
T c= c==> ! c= csubdivFaceFinal2 f0 f1 b0 cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cmakeFaceFinal b2 b3 csubdivFace0_alt2 f0 f1 ccountVertices f0 b0 * / c= csubdivFaceFinal2 f0 f1 b0 cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cmakeFaceFinal b2 b3 csubdivFace0_alt2 f0 f1 ccountVertices f0 b0 f2 * / c= csubdivFaceFinal2 f0 f1 b0 cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cmakeFaceFinal b2 b3 csubdivFace0_alt2 f0 f1 ccountVertices f0 b0 f2
- |- (((~ p) ==> p) = p)
T c= c==> c~ f0 f0 f0
- |- (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))
T c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- |- (((!p'. (!q'. ((((finals g) = (finals g')) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q')))))) ==> ((\p'. (!q'. ((((finals g) = (finals g')) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q')))))) p')) = ((\p'. (!q'. ((((finals g) = (finals g')) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q')))))) p'))
T c= c==> ! ! c==> c= c= cfinals f0 cfinals f1 b0 c==> c==> b0 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY b1 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> b0 b1 * / ! c==> c= c= cfinals f0 cfinals f1 b0 c==> c==> b0 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY b1 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> b0 b1 f3 * / ! c==> c= c= cfinals f0 cfinals f1 b0 c==> c==> b0 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY b1 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> b0 b1 f3
+ (~ (SND f)), ((MEM f) (faces g)) |- ((((\f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) f') ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))) = T)
T c==> c~ cSND f0 c==> cMEM f0 cfaces f1 c= c==> * / c? / c= c, b0 b1 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 f3 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 part cEMPTY cT
- |- ((!g'. t) = t)
T c= ! f0 f0
- |- ((_10531257 = _10531259) ==> ((~ (_10531256 = _10531258)) \/ (((MEM _10531258) _10531259) \/ (~ ((MEM _10531256) _10531257)))))
T c==> c= f0 f1 c\/ c~ c= f2 f3 c\/ cMEM f3 f1 c~ cMEM f2 f0
+ |- (((!f. (!g. ((GEQ ((GABS (\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g))))))) (f , g))) (LET_END ((makeFaceFinal f) g))))) ==> ((\f. (!g. ((GEQ ((GABS (\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g))))))) (f , g))) (LET_END ((makeFaceFinal f) g))))) f)) = ((\f. (!g. ((GEQ ((GABS (\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g))))))) (f , g))) (LET_END ((makeFaceFinal f) g))))) f))
T c= c==> ! ! cGEQ cGABS / ! ! cGEQ * b2 c, b3 b3 cLET_END cmakeFaceFinal b3 b3 c, b0 b1 cLET_END cmakeFaceFinal b0 b1 * / ! cGEQ cGABS / ! ! cGEQ * b2 c, b3 b3 cLET_END cmakeFaceFinal b3 b3 c, b0 b1 cLET_END cmakeFaceFinal b0 b1 f0 * / ! cGEQ cGABS / ! ! cGEQ * b2 c, b3 b3 cLET_END cmakeFaceFinal b3 b3 c, b0 b1 cLET_END cmakeFaceFinal b0 b1 f0
+ (~ (SND f)), ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)), ((MEM f) (faces g)) |- ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))))
T c==> c~ cSND f0 c==> c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cMEM f0 cfaces f3 c= c==> c= cfinals f3 cfinals f2 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f2 * * part cINSERT csetFinal f1 part cEMPTY c==> c==> c/\ cMEM f0 cfaces f3 c~ cSND f0 c= cfinals f3 cfinals cSND csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal f1 part cEMPTY
- |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ |- ((\g. (((filter SND) (faces g)) = (finals g))) g)
T * / c= cfilter part cSND cfaces b0 cfinals b0 f0
+ |- (((!x. (!y. ((x IN (y INSERT EMPTY)) = (x = y)))) ==> ((\x. (!y. ((x IN (y INSERT EMPTY)) = (x = y)))) x)) = ((\x. (!y. ((x IN (y INSERT EMPTY)) = (x = y)))) x))
T c= c==> ! ! c= cIN b0 * * part cINSERT b1 part cEMPTY c= b0 b1 * / ! c= cIN b0 * * part cINSERT b1 part cEMPTY c= b0 b1 f0 * / ! c= cIN b0 * * part cINSERT b1 part cEMPTY c= b0 b1 f0
+ |- ((a = b) = ((GEQ a) b))
T c= c= f0 f1 cGEQ f0 f1
+ |- (p = ((~ p) ==> F))
T c= f0 c==> c~ f0 cF
+ (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))), ((x = (setFinal f')) \/ ((MEM x) (finals g'))) |- ((~ (((MEM x) (finals g')) \/ (x = (setFinal f')))) /\ F)
T c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> c\/ c= f0 csetFinal f2 cMEM f0 cfinals f1 c/\ c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 cF
+ |- (((((MEM f) (faces g)) /\ (~ (SND f))) = p') ==> ((p' ==> (((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) = q')) ==> (((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = (p' ==> q'))))
T c==> c= c/\ cMEM f0 cfaces f1 c~ cSND f0 f2 c==> c==> f2 c= c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 f4 c= c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 c==> f2 f4
+ |- (((!s. (!t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t)))))) ==> ((\s. (!t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t)))))) s)) = ((\s. (!t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t)))))) s))
T c= c==> ! ! ! c= cIN b2 * * part cUNION b0 b1 c\/ cIN b2 b0 cIN b2 b1 * / ! ! c= cIN b2 * * part cUNION b0 b1 c\/ cIN b2 b0 cIN b2 b1 f0 * / ! ! c= cIN b2 * * part cUNION b0 b1 c\/ cIN b2 b0 cIN b2 b1 f0
- (_10531260 = _10531261) |- ((_10531260 = _10531261) /\ ((setFinal _10531260) = (setFinal _10531261)))
T c==> c= f0 f1 c/\ c= f0 f1 c= csetFinal f0 csetFinal f1
+ |- ((!g. (!f. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))))) = T)
T c= ! ! c==> c/\ cMEM b1 cfaces b0 c~ cSND b1 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b2 c, b3 b3 cLET_END cmakeFaceFinal b3 b3 csubdivFace0_alt2 b0 b1 ccountVertices b0 f0 * * part cUNION * part cset_of_list cfinals b0 * * part cINSERT csetFinal cFST csubdivFace0_alt2 b0 b1 ccountVertices b0 f0 part cEMPTY cT
+ |- (((!f. (!f'. (((MEM f') ((filter SND) (faces ((makeFaceFinal f) g')))) ==> ((f' = (setFinal f)) \/ ((MEM f') ((filter SND) (faces g'))))))) ==> ((\f. (!f'. (((MEM f') ((filter SND) (faces ((makeFaceFinal f) g')))) ==> ((f' = (setFinal f)) \/ ((MEM f') ((filter SND) (faces g'))))))) f')) = ((\f. (!f'. (((MEM f') ((filter SND) (faces ((makeFaceFinal f) g')))) ==> ((f' = (setFinal f)) \/ ((MEM f') ((filter SND) (faces g'))))))) f'))
T c= c==> ! ! c==> cMEM b1 cfilter part cSND cfaces cmakeFaceFinal b0 f0 c\/ c= b1 csetFinal b0 cMEM b1 cfilter part cSND cfaces f0 * / ! c==> cMEM b1 cfilter part cSND cfaces cmakeFaceFinal b0 f0 c\/ c= b1 csetFinal b0 cMEM b1 cfilter part cSND cfaces f0 f1 * / ! c==> cMEM b1 cfilter part cSND cfaces cmakeFaceFinal b0 f0 c\/ c= b1 csetFinal b0 cMEM b1 cfilter part cSND cfaces f0 f1
+ (~ (SND f)), ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)), ((MEM f) (faces g)) |- (((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = (T ==> ((finals g) = (finals g'))))
T c==> c~ cSND f0 c==> c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cMEM f0 cfaces f3 c= c==> c/\ cMEM f0 cfaces f3 c~ cSND f0 c= cfinals f3 cfinals cSND csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cT c= cfinals f3 cfinals f2
+ |- (((!x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) ==> ((\x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) x)) = ((\x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) x))
T c= c==> ! ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 * / ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 f0 * / ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 f0
+ (~ (SND f)), ((MEM f) (faces g)) |- ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))
T c==> c~ cSND f0 c==> cMEM f0 cfaces f1 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 part cEMPTY
+ |- ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))
T c==> c= c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 f3 c==> c==> f3 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY f6 c= c==> c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY c==> f3 f6
- |- (((!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) ==> ((\g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) g')) = ((\g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) g'))
T c= c==> ! c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals b0 c\/ cMEM f0 cfinals b0 c= f0 csetFinal f1 cF * / c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals b0 c\/ cMEM f0 cfinals b0 c= f0 csetFinal f1 cF f2 * / c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals b0 c\/ cMEM f0 cfinals b0 c= f0 csetFinal f1 cF f2
+ (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))), (((MEM x) (finals g')) ==> F), ((x = (setFinal f')) \/ ((MEM x) (finals g'))) |- F
T c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> c==> cMEM f0 cfinals f1 cF c==> c\/ c= f0 csetFinal f2 cMEM f0 cfinals f1 cF
- ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F), (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) |- ((((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) /\ ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))
T c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c/\ c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
+ |- (((f' = (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) /\ (g' = (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) = ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))
T c= c/\ c= f0 cFST csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 c= f4 cSND csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 c= c, f0 f4 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3
+ ((x = (setFinal f')) \/ ((MEM x) (finals g'))) |- ((~ (((MEM x) (finals g')) \/ (x = (setFinal f')))) ==> F)
T c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c==> c~ c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
+ |- ((LET_END ((makeFaceFinal f) g)) = (LET_END ((makeFaceFinal ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) (f , g))) ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) (f , g)))))
T c= cLET_END cmakeFaceFinal f0 f1 cLET_END cmakeFaceFinal c@ / ! ! c= * b0 c, b1 b2 b1 c, f0 f1 c@ / ! ! c= * b0 c, b1 b2 b2 c, f0 f1
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- |- ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))
T c= c\/ f0 c\/ f1 f2 c\/ c\/ f0 f1 f2
- |- ((~ (_10531262 = _10531263)) \/ ((finals _10531262) = (finals _10531263)))
T c\/ c~ c= f0 f1 c= cfinals f0 cfinals f1
- T |- (T = T)
T c==> cT c= cT cT
+ |- (((!n. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) n) vs)))))) ==> ((\n. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) n) vs)))))) (countVertices g))) = ((\n. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) n) vs)))))) (countVertices g)))
T c= c==> ! c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 b0 f2 * / c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 b0 f2 ccountVertices f1 * / c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 b0 f2 ccountVertices f1
- (_10531257 = _10531259) |- ((_10531256 = _10531258) ==> (((MEM _10531258) _10531259) \/ (~ ((MEM _10531256) _10531257))))
T c==> c= f0 f1 c==> c= f2 f3 c\/ cMEM f3 f1 c~ cMEM f2 f0
+ |- (((!t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t))))) ==> ((\t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t))))) t)) = ((\t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t))))) t))
T c= c==> ! ! c= cIN b1 * * part cUNION f0 b0 c\/ cIN b1 f0 cIN b1 b0 * / ! c= cIN b1 * * part cUNION f0 b0 c\/ cIN b1 f0 cIN b1 b0 f1 * / ! c= cIN b1 * * part cUNION f0 b0 c\/ cIN b1 f0 cIN b1 b0 f1
+ (~ (SND f)), ((MEM f) (faces g)) |- (!f'. (((\f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) f') ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))))
T c==> c~ cSND f0 c==> cMEM f0 cfaces f1 ! c==> * / c? / c= c, b1 b1 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 b0 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cmakeFaceFinal b2 b3 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 part cEMPTY
+ |- ((\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g)))))) (GABS (\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g))))))))
T * / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2
- |- ((((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f')))) = T)
T c= c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cT
+ |- ((GEQ ((GABS (\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g))))))) (f , g))) (LET_END ((makeFaceFinal f) g)))
T cGEQ cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 c, f0 f1 cLET_END cmakeFaceFinal f0 f1
- (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))), (~ (SND f)), ((MEM f) (faces g)) |- ((?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) /\ ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))
T c==> c? / c= c, f0 b0 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 c==> c~ cSND f2 c==> cMEM f2 cfaces f1 c/\ c? / c= c, f0 b0 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 part cEMPTY
+ |- ((\s. (!t. ((s SUBSET t) = (!x. ((x IN s) ==> (x IN t)))))) s)
T * / ! c= cSUBSET b0 b1 ! c==> cIN b2 b0 cIN b2 b1 f0
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
+ |- ((\t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t))))) t)
T * / ! c= cIN b1 * * part cUNION f0 b0 c\/ cIN b1 f0 cIN b1 b0 f1
+ ((MEM f) (faces g)) |- (((MEM f) (faces g)) = T)
T c==> cMEM f0 cfaces f1 c= cMEM f0 cfaces f1 cT
+ (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))) |- ((~ ((MEM x) (finals g'))) /\ (~ (x = (setFinal f'))))
T c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c/\ c~ cMEM f0 cfinals f1 c~ c= f0 csetFinal f2
+ |- ((\x. (!l. ((x IN (set_of_list l)) = ((MEM x) l)))) x)
T * / ! c= cIN b0 * part cset_of_list b1 cMEM b0 b1 f0
+ |- (!x. (((MEM x) (finals ((makeFaceFinal f') g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f')))))
T c==> cMEM f0 cfinals cmakeFaceFinal f1 f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1
- (~ F), (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))), (x = (setFinal f')) |- ((~ F) /\ F)
T c==> c~ cF c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> c= f0 csetFinal f2 c/\ c~ cF cF
- ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- ((~ (SND f)) = (~ (SND f)))
T c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c= c~ cSND f3 c~ cSND f3
- |- ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)
T * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- (((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))) = ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) (f' , g')))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST (f' , g'))) INSERT EMPTY))))
T c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c= cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 * * part cUNION * part cset_of_list cfinals f2 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 part cEMPTY cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 c, f0 f1 * * part cUNION * part cset_of_list cfinals f2 * * part cINSERT csetFinal cFST c, f0 f1 part cEMPTY
- (_10531256 = _10531258), (_10531257 = _10531259) |- ((_10531256 = _10531258) /\ (((MEM _10531258) _10531259) \/ (~ ((MEM _10531256) _10531257))))
T c==> c= f0 f1 c==> c= f2 f3 c/\ c= f0 f1 c\/ cMEM f1 f3 c~ cMEM f0 f2
+ (~ (SND f)), ((MEM f) (faces g)) |- (((!x. (((\f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) x) ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))) ==> ((?f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))) = ((?f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))))
T c==> c~ cSND f0 c==> cMEM f0 cfaces f1 c= c==> ! c==> * / c? / c= c, b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 b0 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cmakeFaceFinal b2 b3 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 part cEMPTY c==> c? / c? / c= c, b0 b1 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 part cEMPTY c==> c? / c? / c= c, b0 b1 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 part cEMPTY
+ ((x = (setFinal f')) \/ ((MEM x) (finals g'))) |- (((x = (setFinal f')) \/ ((MEM x) (finals g'))) /\ (((MEM x) (finals g')) \/ (x = (setFinal f'))))
T c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c/\ c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1
+ |- (((!f. (!n. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) n) vs))))))) ==> ((\f. (!n. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) n) vs))))))) f)) = ((\f. (!n. ((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) n) vs))))))) f))
T c= c==> ! ! c==> c/\ cMEM b0 cfaces f0 c~ cSND b0 c= cfinals f0 cfinals cSND csubdivFace0_alt2 f0 b0 b1 f1 * / ! c==> c/\ cMEM b0 cfaces f0 c~ cSND b0 c= cfinals f0 cfinals cSND csubdivFace0_alt2 f0 b0 b1 f1 f2 * / ! c==> c/\ cMEM b0 cfaces f0 c~ cSND b0 c= cfinals f0 cfinals cSND csubdivFace0_alt2 f0 b0 b1 f1 f2
+ |- ((?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) = ((\f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) f'))
T c= c? / c= c, f0 b0 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 * / c? / c= c, b0 b1 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 f0
+ |- (((((finals g) = (finals g')) ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))))) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))))) = ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))))))
T c= c==> c==> c= cfinals f0 cfinals f1 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f0 * * part cINSERT csetFinal f2 part cEMPTY cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c= c==> c==> c/\ cMEM f3 cfaces f0 c~ cSND f3 c= cfinals f0 cfinals cSND csubdivFace0_alt2 f0 f3 ccountVertices f0 f4 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f0 * * part cINSERT csetFinal f2 part cEMPTY c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c= c==> c==> c/\ cMEM f3 cfaces f0 c~ cSND f3 c= cfinals f0 cfinals cSND csubdivFace0_alt2 f0 f3 ccountVertices f0 f4 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f0 * * part cINSERT csetFinal f2 part cEMPTY c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY
- |- (((!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) ==> ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2)) = ((\t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3)))) t2))
T c= c==> ! ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1 * / ! c= c\/ f0 c\/ b0 b1 c\/ c\/ f0 b0 b1 f1
+ ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- (((FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) = (FST (f' , g'))) /\ ((SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) = (SND (f' , g'))))
T c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c/\ c= cFST csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 cFST c, f0 f1 c= cSND csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 cSND c, f0 f1
+ (~ (SND f)), ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)), ((MEM f) (faces g)) |- ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))
T c==> c~ cSND f0 c==> c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cMEM f0 cfaces f3 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal f1 part cEMPTY
+ |- ((? P) ==> (P (GABS P)))
T c==> c? f0 * f0 cGABS f0
- |- (((finals g) = (finals g')) ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))))
T c==> c= cfinals f0 cfinals f1 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY
+ (~ (SND f)), ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)), ((MEM f) (faces g)) |- ((((finals g) = (finals g')) ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> q')))
T c==> c~ cSND f0 c==> c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cMEM f0 cfaces f3 c==> c==> c= cfinals f3 cfinals f2 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal f1 part cEMPTY f5 c= c==> c==> c/\ cMEM f0 cfaces f3 c~ cSND f0 c= cfinals f3 cfinals cSND csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal f1 part cEMPTY c==> c= cfinals f3 cfinals f2 f5
+ |- ((\f. (!g. ((GEQ ((GABS (\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g))))))) (f , g))) (LET_END ((makeFaceFinal f) g))))) f)
T * / ! cGEQ cGABS / ! ! cGEQ * b2 c, b3 b3 cLET_END cmakeFaceFinal b3 b3 c, b0 b1 cLET_END cmakeFaceFinal b0 b1 f0
+ |- (((!f. (!g. (!uvns. ((((subdivFaceFinal2 g) f) uvns) = ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) uvns)))))) ==> ((\f. (!g. (!uvns. ((((subdivFaceFinal2 g) f) uvns) = ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) uvns)))))) f)) = ((\f. (!g. (!uvns. ((((subdivFaceFinal2 g) f) uvns) = ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) uvns)))))) f))
T c= c==> ! ! ! c= csubdivFaceFinal2 b1 b0 b2 cLET * part cGABS / ! ! cGEQ * b3 c, b4 b4 cLET_END cmakeFaceFinal b4 b4 csubdivFace0_alt2 b1 b0 ccountVertices b1 b2 * / ! ! c= csubdivFaceFinal2 b1 b0 b2 cLET * part cGABS / ! ! cGEQ * b3 c, b4 b4 cLET_END cmakeFaceFinal b4 b4 csubdivFace0_alt2 b1 b0 ccountVertices b1 b2 f0 * / ! ! c= csubdivFaceFinal2 b1 b0 b2 cLET * part cGABS / ! ! cGEQ * b3 c, b4 b4 cLET_END cmakeFaceFinal b4 b4 csubdivFace0_alt2 b1 b0 ccountVertices b1 b2 f0
+ |- ((\f''. (((MEM f'') ((filter SND) (faces ((makeFaceFinal f') g')))) ==> ((f'' = (setFinal f')) \/ ((MEM f'') ((filter SND) (faces g')))))) x)
T * / c==> cMEM b0 cfilter part cSND cfaces cmakeFaceFinal f0 f1 c\/ c= b0 csetFinal f0 cMEM b0 cfilter part cSND cfaces f1 f2
+ |- ((\x. (!y. ((x IN (y INSERT EMPTY)) = (x = y)))) x)
T * / ! c= cIN b0 * * part cINSERT b1 part cEMPTY c= b0 b1 f0
+ |- (((!q'. ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))) ==> ((\q'. ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))) q')) = ((\q'. ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 f3 c==> c==> f3 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY b0 c= c==> c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY c==> f3 b0 * / c==> c= c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 f3 c==> c==> f3 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY b0 c= c==> c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY c==> f3 b0 f6 * / c==> c= c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 f3 c==> c==> f3 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY b0 c= c==> c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f4 f5 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f4 part cEMPTY c==> f3 b0 f6
+ (((MEM f) (faces g)) /\ (~ (SND f))), ((MEM f) (faces g)) |- ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))
T c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c==> cMEM f0 cfaces f1 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 part cEMPTY
+ T, ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- (T /\ (((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) = ((finals g) = (finals g'))))
T c==> cT c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c/\ cT c= c= cfinals f2 cfinals cSND csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c= cfinals f2 cfinals f1
+ |- ((\p'. (!q'. (((((MEM f) (faces g)) /\ (~ (SND f))) = p') ==> ((p' ==> (((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) = q')) ==> (((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = (p' ==> q')))))) p')
T * / ! c==> c= c/\ cMEM f0 cfaces f1 c~ cSND f0 b0 c==> c==> b0 c= c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 b1 c= c==> c/\ cMEM f0 cfaces f1 c~ cSND f0 c= cfinals f1 cfinals cSND csubdivFace0_alt2 f1 f0 ccountVertices f1 f2 c==> b0 b1 f3
- |- ((a ==> b) = ((~ a) \/ b))
T c= c==> f0 f1 c\/ c~ f0 f1
+ (~ (SND f)), ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)), ((MEM f) (faces g)) |- (((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) = ((finals g) = (finals g'))) ==> ((((finals g) = (finals g')) ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> q')))) = ((((finals g) = (finals g')) ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((((MEM f) (faces g)) /\ (~ (SND f))) ==> ((finals g) = (finals (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs))))) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g)) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> q'))))
T c==> c~ cSND f0 c==> c= c, f1 f2 csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c==> cMEM f0 cfaces f3 c= c==> c= c==> c/\ cMEM f0 cfaces f3 c~ cSND f0 c= cfinals f3 cfinals cSND csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 c= cfinals f3 cfinals f2 c==> c==> c= cfinals f3 cfinals f2 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal f1 part cEMPTY f5 c= c==> c==> c/\ cMEM f0 cfaces f3 c~ cSND f0 c= cfinals f3 cfinals cSND csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal f1 part cEMPTY c==> c= cfinals f3 cfinals f2 f5 c==> c==> c= cfinals f3 cfinals f2 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal f1 part cEMPTY f5 c= c==> c==> c/\ cMEM f0 cfaces f3 c~ cSND f0 c= cfinals f3 cfinals cSND csubdivFace0_alt2 f3 f0 ccountVertices f3 f4 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f1 f2 * * part cUNION * part cset_of_list cfinals f3 * * part cINSERT csetFinal f1 part cEMPTY c==> c= cfinals f3 cfinals f2 f5
+ |- ((\g. ((GEQ ((GABS (\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g))))))) (f , g))) (LET_END ((makeFaceFinal f) g)))) g)
T * / cGEQ cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cmakeFaceFinal b2 b3 c, f0 b0 cLET_END cmakeFaceFinal f0 b0 f1
+ |- (((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))))
T c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY
- |- ((~ ((setFinal f') = (setFinal f'))) ==> ((setFinal f') = (setFinal f')))
T c==> c~ c= csetFinal f0 csetFinal f0 c= csetFinal f0 csetFinal f0
+ |- (((?_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g)))))) ==> ((\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g)))))) (GABS (\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g))))))))) = ((\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g)))))) (GABS (\_10531240. (!f. (!g. ((GEQ (_10531240 (f , g))) (LET_END ((makeFaceFinal f) g)))))))))
T c= c==> c? / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 * / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 * / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2
+ ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- (((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) (f' , g')))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST (f' , g'))) INSERT EMPTY))) = ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))
T c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c= cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 c, f0 f1 * * part cUNION * part cset_of_list cfinals f2 * * part cINSERT csetFinal cFST c, f0 f1 part cEMPTY cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 * * part cUNION * part cset_of_list cfinals f2 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 part cEMPTY
+ |- (?_10531240. (!f. (!g. ((_10531240 (f , g)) = (LET_END ((makeFaceFinal f) g))))))
T c? / ! ! c= * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2
+ ((f' = (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) /\ (g' = (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) |- ((\g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) g')
T c==> c/\ c= f0 cFST csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 c= f4 cSND csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 * / c= c, f0 b0 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 f4
+ ((f' = (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) /\ (g' = (SND ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) |- ((\f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) f')
T c==> c/\ c= f0 cFST csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 c= f4 cSND csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 * / c? / c= c, b0 b1 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 f0
+ ((\g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) g') |- ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))
T c==> * / c= c, f0 b0 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3 f4 c= c, f0 f4 csubdivFace0_alt2 f1 f2 ccountVertices f1 f3
+ |- (T ==> (?f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))))
T c==> cT c? / c? / c= c, b0 b1 csubdivFace0_alt2 f0 f1 ccountVertices f0 f2
- |- ((((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) ==> (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)))
T c==> c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- |- (((((finals g) = (finals g')) ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))))) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))))) = ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))))))
T c= c==> c==> c= cfinals f0 cfinals f1 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY
- |- ((((finals g) = (finals g')) ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (((finals g) = (finals g')) ==> q')))
T c==> c==> c= cfinals f0 cfinals f1 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY f3 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> c= cfinals f0 cfinals f1 f3
- |- (((!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) ==> ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)) = ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0))
T c= c==> ! c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
+ |- ((\f. (!f'. (((MEM f') ((filter SND) (faces ((makeFaceFinal f) g')))) ==> ((f' = (setFinal f)) \/ ((MEM f') ((filter SND) (faces g'))))))) f')
T * / ! c==> cMEM b1 cfilter part cSND cfaces cmakeFaceFinal b0 f0 c\/ c= b1 csetFinal b0 cMEM b1 cfilter part cSND cfaces f0 f1
+ ((\f'. (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) f') |- (?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))
T c==> * / c? / c= c, b0 b1 csubdivFace0_alt2 f0 f1 ccountVertices f0 f2 f3 c? / c= c, f3 b0 csubdivFace0_alt2 f0 f1 ccountVertices f0 f2
+ (~ (SND f)), ((MEM f) (faces g)) |- (((!x. (((\g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) x) ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))) ==> ((?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))) = ((?g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY)))))
T c==> c~ cSND f0 c==> cMEM f0 cfaces f1 c= c==> ! c==> * / c= c, f2 b1 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 b0 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cmakeFaceFinal b2 b3 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 part cEMPTY c==> c? / c= c, f2 b0 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 part cEMPTY c==> c? / c= c, f2 b0 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 part cEMPTY
+ (~ (SND f)), ((MEM f) (faces g)) |- (((\g'. ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) g') ==> ((set_of_list (finals ((LET (GABS (\f. (!f. (!g. ((GEQ (f (f , g))) (LET_END ((makeFaceFinal f) g)))))))) ((((subdivFace0_alt2 g) f) (countVertices g)) vs)))) SUBSET ((set_of_list (finals g)) UNION ((setFinal (FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs))) INSERT EMPTY))))
T c==> c~ cSND f0 c==> cMEM f0 cfaces f1 c==> * / c= c, f2 b0 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 f4 cSUBSET * part cset_of_list cfinals cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cmakeFaceFinal b1 b2 csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal cFST csubdivFace0_alt2 f1 f0 ccountVertices f1 f3 part cEMPTY
+ ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- (((((subdivFace0_alt2 g) f) (countVertices g)) vs) = (f' , g'))
T c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c= csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c, f0 f1
- |- ((!g'. (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) = T)
T c= ! c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals b0 c\/ cMEM f0 cfinals b0 c= f0 csetFinal f1 cT
- ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) |- (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) /\ ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))
T c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c/\ c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- |- (((t1 \/ t2) \/ t3) = (t1 \/ (t2 \/ t3)))
T c= c\/ c\/ f0 f1 f2 c\/ f0 c\/ f1 f2
- |- ((\q'. ((((finals g) = (finals g')) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))) q')
T * / c==> c= c= cfinals f0 cfinals f1 f2 c==> c==> f2 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY b0 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY c==> f2 b0 f4
- (~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) |- ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) /\ F)
T c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 c/\ c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- |- ((\p'. (!q'. ((((finals g) = (finals g')) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q')))))) p')
T * / ! c==> c= c= cfinals f0 cfinals f1 b0 c==> c==> b0 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY b1 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY c==> b0 b1 f3
- |- ((!x. (!g'. (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f')))))) = T)
T c= ! ! c==> c\/ c= b0 csetFinal f0 cMEM b0 cfinals b1 c\/ cMEM b0 cfinals b1 c= b0 csetFinal f0 cT
- |- ((!f'. (!x. (!g'. (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))))) = (!f'. (!x. (!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)))))
T c= ! ! ! c==> c\/ c= b1 csetFinal b0 cMEM b1 cfinals b2 c\/ cMEM b1 cfinals b2 c= b1 csetFinal b0 ! ! ! c==> c~ c==> c\/ c= b1 csetFinal b0 cMEM b1 cfinals b2 c\/ cMEM b1 cfinals b2 c= b1 csetFinal b0 cF
- |- (((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) ==> ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)) = ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s))
T c= c==> ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
- (_10531257 = _10531259) |- ((_10531257 = _10531259) /\ ((~ (_10531256 = _10531258)) \/ (((MEM _10531258) _10531259) \/ (~ ((MEM _10531256) _10531257)))))
T c==> c= f0 f1 c/\ c= f0 f1 c\/ c~ c= f2 f3 c\/ cMEM f3 f1 c~ cMEM f2 f0
- ((finals g) = (finals g')) |- (((finals g) = (finals g')) /\ (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))))
T c==> c= cfinals f0 cfinals f1 c/\ c= cfinals f0 cfinals f1 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY cSUBSET * part cset_of_list cfinals cmakeFaceFinal f2 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f2 part cEMPTY
- ((f' , g') = ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) |- ((FST ((((subdivFace0_alt2 g) f) (countVertices g)) vs)) = f')
T c==> c= c, f0 f1 csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 c= cFST csubdivFace0_alt2 f2 f3 ccountVertices f2 f4 f0
- (~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) |- F
T c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- |- (((!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) ==> ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3)) = ((\t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))) t3))
T c= c==> ! c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2 * / c= c\/ f0 c\/ f1 b0 c\/ c\/ f0 f1 b0 f2
- (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) |- ((((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) /\ (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)))
T c==> c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c/\ c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((a = b) ==> (b \/ (~ a)))
T c==> c= f0 f1 c\/ f1 c~ f0
- |- (((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))) = T)
T c= c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0 cT
- (_10531256 = _10531258), (_10531257 = _10531259) |- (((((MEM _10531256) _10531257) = ((MEM _10531258) _10531259)) ==> (((MEM _10531258) _10531259) \/ (~ ((MEM _10531256) _10531257)))) = (((MEM _10531258) _10531259) \/ (~ ((MEM _10531256) _10531257))))
T c==> c= f0 f1 c==> c= f2 f3 c= c==> c= cMEM f0 f2 cMEM f1 f3 c\/ cMEM f1 f3 c~ cMEM f0 f2 c\/ cMEM f1 f3 c~ cMEM f0 f2
- |- (((!x. (!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))) ==> ((\x. (!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))) x)) = ((\x. (!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))) x))
T c= c==> ! ! c==> c~ c==> c\/ c= b0 csetFinal f0 cMEM b0 cfinals b1 c\/ cMEM b0 cfinals b1 c= b0 csetFinal f0 cF * / ! c==> c~ c==> c\/ c= b0 csetFinal f0 cMEM b0 cfinals b1 c\/ cMEM b0 cfinals b1 c= b0 csetFinal f0 cF f1 * / ! c==> c~ c==> c\/ c= b0 csetFinal f0 cMEM b0 cfinals b1 c\/ cMEM b0 cfinals b1 c= b0 csetFinal f0 cF f1
- ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F), (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) |- (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) /\ ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))
T c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c/\ c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- (_10531256 = _10531258), (_10531257 = _10531259) |- (((MEM _10531258) _10531259) \/ (~ ((MEM _10531256) _10531257)))
T c==> c= f0 f1 c==> c= f2 f3 c\/ cMEM f1 f3 c~ cMEM f0 f2
- |- ((((finals g) = (finals g')) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))
T c==> c= c= cfinals f0 cfinals f1 f2 c==> c==> f2 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY f4 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY c==> f2 f4
- |- (((!q'. ((((finals g) = (finals g')) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))) ==> ((\q'. ((((finals g) = (finals g')) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))) q')) = ((\q'. ((((finals g) = (finals g')) = p') ==> ((p' ==> (((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY))) = q')) ==> ((((finals g) = (finals g')) ==> ((set_of_list (finals ((makeFaceFinal f') g'))) SUBSET ((set_of_list (finals g')) UNION ((setFinal f') INSERT EMPTY)))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c= cfinals f0 cfinals f1 f2 c==> c==> f2 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY b0 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY c==> f2 b0 * / c==> c= c= cfinals f0 cfinals f1 f2 c==> c==> f2 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY b0 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY c==> f2 b0 f4 * / c==> c= c= cfinals f0 cfinals f1 f2 c==> c==> f2 c= cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY b0 c= c==> c= cfinals f0 cfinals f1 cSUBSET * part cset_of_list cfinals cmakeFaceFinal f3 f1 * * part cUNION * part cset_of_list cfinals f1 * * part cINSERT csetFinal f3 part cEMPTY c==> f2 b0 f4
- |- ((_10531262 = _10531263) ==> ((finals _10531262) = (finals _10531263)))
T c==> c= f0 f1 c= cfinals f0 cfinals f1
- ((MEM x) (finals g')) |- ((~ ((MEM x) (finals g'))) ==> ((MEM x) (finals g')))
T c==> cMEM f0 cfinals f1 c==> c~ cMEM f0 cfinals f1 cMEM f0 cfinals f1
- |- ((!g'. (P g')) = ((P T) /\ (P F)))
T c= ! * f0 b0 c/\ * f0 cT * f0 cF
- (x = (setFinal f')) |- (F = F)
T c==> c= f0 csetFinal f1 c= cF cF
- |- (((!t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) ==> ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1)) = ((\t1. (!t2. (!t3. ((t1 \/ (t2 \/ t3)) = ((t1 \/ t2) \/ t3))))) t1))
T c= c==> ! ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0 * / ! ! c= c\/ b0 c\/ b1 b2 c\/ c\/ b0 b1 b2 f0
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- ((APPEND = cat) /\ (ALL = all))
T c/\ c= part cAPPEND part ccat c= part cALL part call
- (_10531262 = _10531263) |- ((_10531262 = _10531263) /\ ((finals _10531262) = (finals _10531263)))
T c==> c= f0 f1 c/\ c= f0 f1 c= cfinals f0 cfinals f1
- (x = (setFinal f')) |- ((~ ((MEM x) (finals g'))) = (~ ((MEM (setFinal f')) (finals g'))))
T c==> c= f0 csetFinal f1 c= c~ cMEM f0 cfinals f2 c~ cMEM csetFinal f1 cfinals f2
- T |- ((T = T) = T)
T c==> cT c= c= cT cT cT
- |- (((!f'. (!x. (!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)))) ==> ((\f'. (!x. (!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)))) f')) = ((\f'. (!x. (!g'. ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)))) f'))
T c= c==> ! ! ! c==> c~ c==> c\/ c= b1 csetFinal b0 cMEM b1 cfinals b2 c\/ cMEM b1 cfinals b2 c= b1 csetFinal b0 cF * / ! ! c==> c~ c==> c\/ c= b1 csetFinal b0 cMEM b1 cfinals b2 c\/ cMEM b1 cfinals b2 c= b1 csetFinal b0 cF f0 * / ! ! c==> c~ c==> c\/ c= b1 csetFinal b0 cMEM b1 cfinals b2 c\/ cMEM b1 cfinals b2 c= b1 csetFinal b0 cF f0
- |- ((((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) = ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))
T c= c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- |- (((((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) ==> (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))) = (((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)))
T c= c==> c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))), (x = (setFinal f')) |- ((~ F) ==> F)
T c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> c= f0 csetFinal f2 c==> c~ cF cF
- |- ((T /\ t) = t)
T c= c/\ cT f0 f0
- (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))), ((MEM x) (finals g')) |- ((~ F) ==> F)
T c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> cMEM f0 cfinals f1 c==> c~ cF cF
- (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))), ((MEM x) (finals g')) |- (((MEM x) (finals g')) /\ F)
T c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> cMEM f0 cfinals f1 c/\ cMEM f0 cfinals f1 cF
- (~ F), (~ (((MEM x) (finals g')) \/ (x = (setFinal f')))), ((MEM x) (finals g')) |- ((~ F) /\ F)
T c==> c~ cF c==> c~ c\/ cMEM f0 cfinals f1 c= f0 csetFinal f2 c==> cMEM f0 cfinals f1 c/\ c~ cF cF
- |- ((~ (_10531257 = _10531259)) \/ ((~ (_10531256 = _10531258)) \/ (((MEM _10531258) _10531259) \/ (~ ((MEM _10531256) _10531257)))))
T c\/ c~ c= f0 f1 c\/ c~ c= f2 f3 c\/ cMEM f3 f1 c~ cMEM f2 f0
- |- ((_10531260 = _10531261) ==> ((setFinal _10531260) = (setFinal _10531261)))
T c==> c= f0 f1 c= csetFinal f0 csetFinal f1
- ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) |- ((((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F)) ==> ((~ (((x = (setFinal f')) \/ ((MEM x) (finals g'))) ==> (((MEM x) (finals g')) \/ (x = (setFinal f'))))) ==> F))
T c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c==> c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF c==> c~ c==> c\/ c= f0 csetFinal f1 cMEM f0 cfinals f2 c\/ cMEM f0 cfinals f2 c= f0 csetFinal f1 cF
- |- ((~ (_10531260 = _10531261)) \/ ((setFinal _10531260) = (setFinal _10531261)))
T c\/ c~ c= f0 f1 c= csetFinal f0 csetFinal f1
- |- ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)
T * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
