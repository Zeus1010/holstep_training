N OPEN_SLICE
C |- (!k. (!t. (!s. (((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ ((k <= (dimindex UNIV)) /\ (open s)))) ==> (open (((slice k) t) s))))))
T c==> c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c/\ c<= f0 cdimindex part cUNIV copen f1 copen * * * part cslice f0 f2 f1
D TRUTH
A |- T
T cT
D OPEN_CLOSED
A |- (!s. ((open s) = (closed (UNIV DIFF s))))
T c= copen f0 cclosed * * part cDIFF part cUNIV f0
D SLICE_DIFF
A |- (!k. (!a. (!s. (!t. (((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ (k <= (dimindex UNIV)))) ==> ((((slice k) a) (s DIFF t)) = ((((slice k) a) s) DIFF (((slice k) a) t))))))))
T c==> c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= * * * part cslice f0 f1 * * part cDIFF f2 f3 * * part cDIFF * * * part cslice f0 f1 f2 * * * part cslice f0 f1 f3
D SLICE_UNIV
A |- (!k. (!a. (((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ (k <= (dimindex UNIV)))) ==> ((((slice k) a) UNIV) = UNIV))))
T c==> c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= * * * part cslice f0 f1 part cUNIV part cUNIV
D CLOSED_SLICE
A |- (!k. (!t. (!s. (((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ ((k <= (dimindex UNIV)) /\ (closed s)))) ==> (closed (((slice k) t) s))))))
T c==> c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c/\ c<= f0 cdimindex part cUNIV cclosed f1 cclosed * * * part cslice f0 f2 f1
+ |- ((\t. (((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ (k <= (dimindex UNIV)))) ==> ((((slice k) a) (s DIFF t)) = ((((slice k) a) s) DIFF (((slice k) a) t))))) t)
T * / c==> c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= * * * part cslice f0 f1 * * part cDIFF f2 b0 * * part cDIFF * * * part cslice f0 f1 f2 * * * part cslice f0 f1 b0 f3
+ (closed (UNIV DIFF (((slice k) t) s))) |- ((closed (UNIV DIFF (((slice k) t) s))) /\ ((closed (UNIV DIFF (((slice k) t) s))) = T))
T c==> cclosed * * part cDIFF part cUNIV * * * part cslice f0 f1 f2 c/\ cclosed * * part cDIFF part cUNIV * * * part cslice f0 f1 f2 c= cclosed * * part cDIFF part cUNIV * * * part cslice f0 f1 f2 cT
+ ((NUMERAL (BIT1 _0)) <= k) |- (((NUMERAL (BIT1 _0)) <= k) = T)
T c==> c<= cNUMERAL cBIT1 c_0 f0 c= c<= cNUMERAL cBIT1 c_0 f0 cT
+ ((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ ((k <= (dimindex UNIV)) /\ (closed s)))) |- (((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ ((k <= (dimindex UNIV)) /\ (closed s)))) /\ ((closed (((slice k) t) s)) = T))
T c==> c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c/\ c<= f0 cdimindex part cUNIV cclosed f1 c/\ c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c/\ c<= f0 cdimindex part cUNIV cclosed f1 c= cclosed * * * part cslice f0 f2 f1 cT
+ (((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)), (((NUMERAL (BIT1 _0)) <= k) /\ ((k <= (dimindex UNIV)) /\ (closed (UNIV DIFF s)))), ((NUMERAL (BIT1 _0)) <= k) |- (closed (UNIV DIFF (((slice k) t) s)))
T c==> c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c==> c/\ c<= cNUMERAL cBIT1 c_0 f0 c/\ c<= f0 cdimindex part cUNIV cclosed * * part cDIFF part cUNIV f1 c==> c<= cNUMERAL cBIT1 c_0 f0 cclosed * * part cDIFF part cUNIV * * * part cslice f0 f2 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((!s. t) = t)
T c= ! f0 f0
- ((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ (k <= (dimindex UNIV)))) |- (((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ (k <= (dimindex UNIV)))) /\ ((((slice k) a) (s DIFF t)) = ((((slice k) a) s) DIFF (((slice k) a) t))))
T c==> c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c/\ c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= * * * part cslice f0 f1 * * part cDIFF f2 f3 * * part cDIFF * * * part cslice f0 f1 f2 * * * part cslice f0 f1 f3
- ((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ (k <= (dimindex UNIV)))) |- (((((dimindex UNIV) + (NUMERAL (BIT1 _0))) = (dimindex UNIV)) /\ (((NUMERAL (BIT1 _0)) <= k) /\ (k <= (dimindex UNIV)))) /\ ((((slice k) a) UNIV) = UNIV))
T c==> c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c/\ c/\ c= c+ cdimindex part cUNIV cNUMERAL cBIT1 c_0 cdimindex part cUNIV c/\ c<= cNUMERAL cBIT1 c_0 f0 c<= f0 cdimindex part cUNIV c= * * * part cslice f0 f1 part cUNIV part cUNIV
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
