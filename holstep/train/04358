N Hypermap.face_degenerate_walkup_edge_map
C |- (!H. (!x. (((x IN (dart H)) /\ (((face_map H) x) = x)) ==> ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((edge_map H) x)) /\ (!y. (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))))
T c==> c/\ cIN f0 * part cdart f1 c= cface_map f1 f0 f0 c/\ c= cedge_map cedge_walkup f1 f0 f0 f0 c/\ c= cedge_map cedge_walkup f1 f0 cinverse * part cedge_map f1 f0 cedge_map f1 f0 ! c==> c/\ c~ c= b0 f0 c~ c= b0 cinverse * part cedge_map f1 f0 c= cedge_map cedge_walkup f1 f0 b0 cedge_map f1 b0
D TRUTH
A |- T
T cT
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D CONTRAPOS_THM
A |- (!t1. (!t2. (((~ t1) ==> (~ t2)) = (t2 ==> t1))))
T c= c==> c~ f0 c~ f1 c==> f1 f0
D o_THM
A |- (!f. (!g. (!x. (((f o g) x) = (f (g x))))))
T c= co f0 f1 f2 * f0 * f1 f2
D Hypermap.hypermap_lemma
A |- (!H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I))))))
T c/\ cFINITE * part cdart f0 c/\ cpermutes * part cedge_map f0 * part cdart f0 c/\ cpermutes * part cnode_map f0 * part cdart f0 c/\ cpermutes * part cface_map f0 * part cdart f0 c= * * part co * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 part cI
D Hypermap.inverse_hypermap_maps
A |- (!H. (((inverse (edge_map H)) = ((node_map H) o (face_map H))) /\ (((inverse (node_map H)) = ((face_map H) o (edge_map H))) /\ ((inverse (face_map H)) = ((edge_map H) o (node_map H))))))
T c/\ c= * part cinverse * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 c/\ c= * part cinverse * part cnode_map f0 * * part co * part cface_map f0 * part cedge_map f0 c= * part cinverse * part cface_map f0 * * part co * part cedge_map f0 * part cnode_map f0
D Hypermap.inverse2_hypermap_maps
A |- (!H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))))
T c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0
D Hypermap.node_map_walkup
A |- (!H. (!x. (!y. ((((node_map ((edge_walkup H) x)) x) = x) /\ ((((node_map ((edge_walkup H) x)) ((inverse (node_map H)) x)) = ((node_map H) x)) /\ (((~ (y = x)) /\ (~ (y = ((inverse (node_map H)) x)))) ==> (((node_map ((edge_walkup H) x)) y) = ((node_map H) y))))))))
T c/\ c= cnode_map cedge_walkup f0 f1 f1 f1 c/\ c= cnode_map cedge_walkup f0 f1 cinverse * part cnode_map f0 f1 cnode_map f0 f1 c==> c/\ c~ c= f2 f1 c~ c= f2 cinverse * part cnode_map f0 f1 c= cnode_map cedge_walkup f0 f1 f2 cnode_map f0 f2
D Hypermap.face_map_walkup
A |- (!H. (!x. (!y. ((((face_map ((edge_walkup H) x)) x) = x) /\ ((((face_map ((edge_walkup H) x)) ((inverse (face_map H)) x)) = ((face_map H) x)) /\ (((~ (y = x)) /\ (~ (y = ((inverse (face_map H)) x)))) ==> (((face_map ((edge_walkup H) x)) y) = ((face_map H) y))))))))
T c/\ c= cface_map cedge_walkup f0 f1 f1 f1 c/\ c= cface_map cedge_walkup f0 f1 cinverse * part cface_map f0 f1 cface_map f0 f1 c==> c/\ c~ c= f2 f1 c~ c= f2 cinverse * part cface_map f0 f1 c= cface_map cedge_walkup f0 f1 f2 cface_map f0 f2
D Hypermap.lemma_face_degenerate
A |- (!H. (!x. ((((face_map H) x) = x) = (((node_map H) x) = ((inverse (edge_map H)) x)))))
T c= c= cface_map f0 f1 f1 c= cnode_map f0 f1 cinverse * part cedge_map f0 f1
D Hypermap.fixed_point_lemma
A |- (!D. (!p. (((permutes p) D) ==> (!x. (((p x) = x) = (((inverse p) x) = x))))))
T c==> cpermutes f0 f1 ! c= c= * f0 b0 b0 c= cinverse f0 b0 b0
D Hypermap.aux_permutes_conversion
A |- (!D. (!p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))))))
T c==> c/\ cpermutes f0 f1 cpermutes f2 f1 c= c= cinverse f0 cinverse f2 f3 f4 c= * f2 * f0 f4 f3
D Hypermap.edge_map_walkup
A |- (!H. (!x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))))
T c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= f2 f1 c/\ c~ c= f2 cinverse * part cedge_map f0 f1 c~ c= f2 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 f2 cedge_map f0 f2
+ (~ (((node_map H) x) = x)), (((node_map H) x) = ((inverse (edge_map H)) x)) |- (~ (((edge_map H) x) = x))
T c==> c~ c= cnode_map f0 f1 f1 c==> c= cnode_map f0 f1 cinverse * part cedge_map f0 f1 c~ c= cedge_map f0 f1 f1
+ |- ((\H. (!x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))))) H)
T * / ! ! c/\ c= cedge_map cedge_walkup b0 b1 b1 b1 c/\ c==> c/\ c~ c= cnode_map b0 b1 b1 c~ c= cedge_map b0 b1 b1 c= cedge_map cedge_walkup b0 b1 cnode_map b0 b1 cedge_map b0 b1 c/\ c==> c/\ c~ c= cinverse * part cface_map b0 b1 b1 c~ c= cinverse * part cedge_map b0 b1 b1 c= cedge_map cedge_walkup b0 b1 cinverse * part cedge_map b0 b1 cinverse * part cface_map b0 b1 c==> c/\ c~ c= b2 b1 c/\ c~ c= b2 cinverse * part cedge_map b0 b1 c~ c= b2 cnode_map b0 b1 c= cedge_map cedge_walkup b0 b1 b2 cedge_map b0 b2 f0
+ (((node_map H) x) = ((inverse (edge_map H)) x)) |- ((((inverse (edge_map H)) x) = x) ==> (((node_map H) x) = x))
T c==> c= cnode_map f0 f1 cinverse * part cedge_map f0 f1 c==> c= cinverse * part cedge_map f0 f1 f1 c= cnode_map f0 f1 f1
+ (((node_map H) x) = ((inverse (edge_map H)) x)), (((face_map H) x) = x), (((permutes (node_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) /\ (((permutes (face_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) /\ (((edge_map ((edge_walkup H) x)) o ((node_map ((edge_walkup H) x)) o (face_map ((edge_walkup H) x)))) = I))) |- (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((edge_map H) x))
T c==> c= cnode_map f0 f1 cinverse * part cedge_map f0 f1 c==> c= cface_map f0 f1 f1 c==> c/\ cpermutes * part cnode_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c/\ cpermutes * part cface_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= * * part co * part cedge_map cedge_walkup f0 f1 * * part co * part cnode_map cedge_walkup f0 f1 * part cface_map cedge_walkup f0 f1 part cI c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cedge_map f0 f1
+ |- (((((~ (((edge_map H) x) = x)) /\ (~ (((edge_map H) x) = ((inverse (face_map H)) x)))) ==> (((face_map ((edge_walkup H) x)) ((edge_map H) x)) = ((face_map H) ((edge_map H) x)))) ==> (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) ((edge_map H) x))) = ((node_map H) x))) = (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) ((edge_map H) x))) = ((node_map H) x)))
T c= c==> c==> c/\ c~ c= cedge_map f0 f1 f1 c~ c= cedge_map f0 f1 cinverse * part cface_map f0 f1 c= cface_map cedge_walkup f0 f1 cedge_map f0 f1 cface_map f0 cedge_map f0 f1 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 cedge_map f0 f1 cnode_map f0 f1 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 cedge_map f0 f1 cnode_map f0 f1
+ (((face_map H) x) = x) |- ((((face_map H) x) = x) ==> ((((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((edge_map H) x)) /\ (!y. (((~ (y = x)) /\ (~ (y = ((inverse (edge_map H)) x)))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))
T c==> c= cface_map f0 f1 f1 c==> c= cface_map f0 f1 f1 c/\ c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cedge_map f0 f1 ! c==> c/\ c~ c= b0 f1 c~ c= b0 cinverse * part cedge_map f0 f1 c= cedge_map cedge_walkup f0 f1 b0 cedge_map f0 b0
- (FINITE (dart ((edge_walkup H) x))) |- ((FINITE (dart ((edge_walkup H) x))) = T)
T c==> cFINITE * part cdart cedge_walkup f0 f1 c= cFINITE * part cdart cedge_walkup f0 f1 cT
- (~ (y = ((inverse (edge_map H)) x))) |- ((((inverse (edge_map H)) x) = y) = F)
T c==> c~ c= f0 cinverse * part cedge_map f1 f2 c= c= cinverse * part cedge_map f1 f2 f0 cF
+ (((node_map H) x) = x) |- (((((inverse (edge_map H)) x) = x) ==> (((edge_map ((edge_walkup H) x)) x) = ((edge_map H) x))) = ((((inverse (edge_map H)) x) = ((node_map H) x)) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))))
T c==> c= cnode_map f0 f1 f1 c= c==> c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 f1 cedge_map f0 f1 c==> c= cinverse * part cedge_map f0 f1 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1
+ |- ((((node_map ((edge_walkup H) x)) ((inverse (node_map H)) x)) = ((node_map H) x)) /\ (((~ (y = x)) /\ (~ (y = ((inverse (node_map H)) x)))) ==> (((node_map ((edge_walkup H) x)) y) = ((node_map H) y))))
T c/\ c= cnode_map cedge_walkup f0 f1 cinverse * part cnode_map f0 f1 cnode_map f0 f1 c==> c/\ c~ c= f2 f1 c~ c= f2 cinverse * part cnode_map f0 f1 c= cnode_map cedge_walkup f0 f1 f2 cnode_map f0 f2
+ (((permutes (face_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) /\ (((edge_map ((edge_walkup H) x)) o ((node_map ((edge_walkup H) x)) o (face_map ((edge_walkup H) x)))) = I)), ((permutes (node_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) |- (((!y. ((((inverse (face_map ((edge_walkup H) x))) ((inverse (node_map ((edge_walkup H) x))) ((node_map H) x))) = y) = (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) y)) = ((node_map H) x)))) ==> ((\y. ((((inverse (face_map ((edge_walkup H) x))) ((inverse (node_map ((edge_walkup H) x))) ((node_map H) x))) = y) = (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) y)) = ((node_map H) x)))) ((edge_map H) x))) = ((\y. ((((inverse (face_map ((edge_walkup H) x))) ((inverse (node_map ((edge_walkup H) x))) ((node_map H) x))) = y) = (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) y)) = ((node_map H) x)))) ((edge_map H) x)))
T c==> c/\ cpermutes * part cface_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= * * part co * part cedge_map cedge_walkup f0 f1 * * part co * part cnode_map cedge_walkup f0 f1 * part cface_map cedge_walkup f0 f1 part cI c==> cpermutes * part cnode_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= c==> ! c= c= cinverse * part cface_map cedge_walkup f0 f1 cinverse * part cnode_map cedge_walkup f0 f1 cnode_map f0 f1 b0 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 b0 cnode_map f0 f1 * / c= c= cinverse * part cface_map cedge_walkup f0 f1 cinverse * part cnode_map cedge_walkup f0 f1 cnode_map f0 f1 b0 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 b0 cnode_map f0 f1 cedge_map f0 f1 * / c= c= cinverse * part cface_map cedge_walkup f0 f1 cinverse * part cnode_map cedge_walkup f0 f1 cnode_map f0 f1 b0 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 b0 cnode_map f0 f1 cedge_map f0 f1
+ |- ((\H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H))))))) ((edge_walkup H) x))
T * / c/\ c= * part cedge_map b0 * * part co * part cinverse * part cface_map b0 * part cinverse * part cnode_map b0 c/\ c= * part cnode_map b0 * * part co * part cinverse * part cedge_map b0 * part cinverse * part cface_map b0 c= * part cface_map b0 * * part co * part cinverse * part cnode_map b0 * part cinverse * part cedge_map b0 cedge_walkup f0 f1
+ |- ((\p. (!q. ((((permutes p) D) /\ ((permutes q) D)) ==> (!x. (!y. ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))))) p)
T * / ! c==> c/\ cpermutes b0 f0 cpermutes b1 f0 ! ! c= c= cinverse b0 cinverse b1 b2 b3 c= * b1 * b0 b3 b2 f1
+ |- ((\x. ((((face_map H) x) = x) = (((node_map H) x) = ((inverse (edge_map H)) x)))) x)
T * / c= c= cface_map f0 b0 b0 c= cnode_map f0 b0 cinverse * part cedge_map f0 b0 f1
+ (!D. (!p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x)))))))) |- (!p. (!q. ((((permutes p) D) /\ ((permutes q) D)) ==> (!x. (!y. ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x)))))))
T c==> ! ! ! ! ! c==> c/\ cpermutes b1 b0 cpermutes b2 b0 c= c= cinverse b1 cinverse b2 b3 b4 c= * b2 * b1 b4 b3 ! ! c==> c/\ cpermutes b0 f0 cpermutes b1 f0 ! ! c= c= cinverse b0 cinverse b1 b2 b3 c= * b1 * b0 b3 b2
+ |- ((((node_map H) o (face_map H)) = (inverse (edge_map H))) /\ ((((face_map H) o (edge_map H)) = (inverse (node_map H))) /\ (((edge_map H) o (node_map H)) = (inverse (face_map H)))))
T c/\ c= * * part co * part cnode_map f0 * part cface_map f0 * part cinverse * part cedge_map f0 c/\ c= * * part co * part cface_map f0 * part cedge_map f0 * part cinverse * part cnode_map f0 c= * * part co * part cedge_map f0 * part cnode_map f0 * part cinverse * part cface_map f0
- (~ (y = ((inverse (edge_map H)) x))) |- (~ (((inverse (edge_map H)) x) = y))
T c==> c~ c= f0 cinverse * part cedge_map f1 f2 c~ c= cinverse * part cedge_map f1 f2 f0
+ (!D. (!p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x)))))))) |- ((\q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x)))))) q)
T c==> ! ! ! ! ! c==> c/\ cpermutes b1 b0 cpermutes b2 b0 c= c= cinverse b1 cinverse b2 b3 b4 c= * b2 * b1 b4 b3 * / ! ! c==> c/\ cpermutes f0 f1 cpermutes b0 f1 c= c= cinverse f0 cinverse b0 b1 b2 c= * b0 * f0 b2 b1 f2
- (~ (((node_map H) x) = x)) |- (~ (x = ((node_map H) x)))
T c==> c~ c= cnode_map f0 f1 f1 c~ c= f1 cnode_map f0 f1
+ |- ((((node_map H) x) = x) \/ (~ (((node_map H) x) = x)))
T c\/ c= cnode_map f0 f1 f1 c~ c= cnode_map f0 f1 f1
+ |- (((!H. ((((node_map H) o (face_map H)) = (inverse (edge_map H))) /\ ((((face_map H) o (edge_map H)) = (inverse (node_map H))) /\ (((edge_map H) o (node_map H)) = (inverse (face_map H)))))) ==> ((\H. ((((node_map H) o (face_map H)) = (inverse (edge_map H))) /\ ((((face_map H) o (edge_map H)) = (inverse (node_map H))) /\ (((edge_map H) o (node_map H)) = (inverse (face_map H)))))) H)) = ((\H. ((((node_map H) o (face_map H)) = (inverse (edge_map H))) /\ ((((face_map H) o (edge_map H)) = (inverse (node_map H))) /\ (((edge_map H) o (node_map H)) = (inverse (face_map H)))))) H))
T c= c==> ! c/\ c= * * part co * part cnode_map b0 * part cface_map b0 * part cinverse * part cedge_map b0 c/\ c= * * part co * part cface_map b0 * part cedge_map b0 * part cinverse * part cnode_map b0 c= * * part co * part cedge_map b0 * part cnode_map b0 * part cinverse * part cface_map b0 * / c/\ c= * * part co * part cnode_map b0 * part cface_map b0 * part cinverse * part cedge_map b0 c/\ c= * * part co * part cface_map b0 * part cedge_map b0 * part cinverse * part cnode_map b0 c= * * part co * part cedge_map b0 * part cnode_map b0 * part cinverse * part cface_map b0 f0 * / c/\ c= * * part co * part cnode_map b0 * part cface_map b0 * part cinverse * part cedge_map b0 c/\ c= * * part co * part cface_map b0 * part cedge_map b0 * part cinverse * part cnode_map b0 c= * * part co * part cedge_map b0 * part cnode_map b0 * part cinverse * part cface_map b0 f0
+ (!D. (!p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x)))))))) |- (((!p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))))) ==> ((\p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))))) p)) = ((\p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))))) p))
T c==> ! ! ! ! ! c==> c/\ cpermutes b1 b0 cpermutes b2 b0 c= c= cinverse b1 cinverse b2 b3 b4 c= * b2 * b1 b4 b3 c= c==> ! ! ! ! c==> c/\ cpermutes b0 f0 cpermutes b1 f0 c= c= cinverse b0 cinverse b1 b2 b3 c= * b1 * b0 b3 b2 * / ! ! ! c==> c/\ cpermutes b0 f0 cpermutes b1 f0 c= c= cinverse b0 cinverse b1 b2 b3 c= * b1 * b0 b3 b2 f1 * / ! ! ! c==> c/\ cpermutes b0 f0 cpermutes b1 f0 c= c= cinverse b0 cinverse b1 b2 b3 c= * b1 * b0 b3 b2 f1
+ (((permutes (face_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) /\ (((edge_map ((edge_walkup H) x)) o ((node_map ((edge_walkup H) x)) o (face_map ((edge_walkup H) x)))) = I)), ((permutes (node_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) |- (((!x'. (!y. ((((inverse (face_map ((edge_walkup H) x))) ((inverse (node_map ((edge_walkup H) x))) x')) = y) = (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) y)) = x')))) ==> ((\x'. (!y. ((((inverse (face_map ((edge_walkup H) x))) ((inverse (node_map ((edge_walkup H) x))) x')) = y) = (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) y)) = x')))) ((node_map H) x))) = ((\x'. (!y. ((((inverse (face_map ((edge_walkup H) x))) ((inverse (node_map ((edge_walkup H) x))) x')) = y) = (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) y)) = x')))) ((node_map H) x)))
T c==> c/\ cpermutes * part cface_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= * * part co * part cedge_map cedge_walkup f0 f1 * * part co * part cnode_map cedge_walkup f0 f1 * part cface_map cedge_walkup f0 f1 part cI c==> cpermutes * part cnode_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= c==> ! ! c= c= cinverse * part cface_map cedge_walkup f0 f1 cinverse * part cnode_map cedge_walkup f0 f1 b0 b1 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 b1 b0 * / ! c= c= cinverse * part cface_map cedge_walkup f0 f1 cinverse * part cnode_map cedge_walkup f0 f1 b0 b1 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 b1 b0 cnode_map f0 f1 * / ! c= c= cinverse * part cface_map cedge_walkup f0 f1 cinverse * part cnode_map cedge_walkup f0 f1 b0 b1 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 b1 b0 cnode_map f0 f1
+ |- ((\x. (!y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y)))))))) x)
T * / ! c/\ c= cedge_map cedge_walkup f0 b0 b0 b0 c/\ c==> c/\ c~ c= cnode_map f0 b0 b0 c~ c= cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cnode_map f0 b0 cedge_map f0 b0 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 b0 b0 c~ c= cinverse * part cedge_map f0 b0 b0 c= cedge_map cedge_walkup f0 b0 cinverse * part cedge_map f0 b0 cinverse * part cface_map f0 b0 c==> c/\ c~ c= b1 b0 c/\ c~ c= b1 cinverse * part cedge_map f0 b0 c~ c= b1 cnode_map f0 b0 c= cedge_map cedge_walkup f0 b0 b1 cedge_map f0 b1 f1
+ (((inverse (edge_map H)) x) = x) |- (((((edge_map H) x) = x) = (((inverse (edge_map H)) x) = x)) ==> (((edge_map ((edge_walkup H) x)) x) = ((edge_map H) x)))
T c==> c= cinverse * part cedge_map f0 f1 f1 c==> c= c= cedge_map f0 f1 f1 c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 f1 cedge_map f0 f1
+ (((node_map H) x) = ((inverse (edge_map H)) x)) |- ((((node_map H) x) = x) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)))
T c==> c= cnode_map f0 f1 cinverse * part cedge_map f0 f1 c==> c= cnode_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1
+ |- (((!y. ((((node_map ((edge_walkup H) x)) x) = x) /\ ((((node_map ((edge_walkup H) x)) ((inverse (node_map H)) x)) = ((node_map H) x)) /\ (((~ (y = x)) /\ (~ (y = ((inverse (node_map H)) x)))) ==> (((node_map ((edge_walkup H) x)) y) = ((node_map H) y)))))) ==> ((\y. ((((node_map ((edge_walkup H) x)) x) = x) /\ ((((node_map ((edge_walkup H) x)) ((inverse (node_map H)) x)) = ((node_map H) x)) /\ (((~ (y = x)) /\ (~ (y = ((inverse (node_map H)) x)))) ==> (((node_map ((edge_walkup H) x)) y) = ((node_map H) y)))))) y)) = ((\y. ((((node_map ((edge_walkup H) x)) x) = x) /\ ((((node_map ((edge_walkup H) x)) ((inverse (node_map H)) x)) = ((node_map H) x)) /\ (((~ (y = x)) /\ (~ (y = ((inverse (node_map H)) x)))) ==> (((node_map ((edge_walkup H) x)) y) = ((node_map H) y)))))) y))
T c= c==> ! c/\ c= cnode_map cedge_walkup f0 f1 f1 f1 c/\ c= cnode_map cedge_walkup f0 f1 cinverse * part cnode_map f0 f1 cnode_map f0 f1 c==> c/\ c~ c= b0 f1 c~ c= b0 cinverse * part cnode_map f0 f1 c= cnode_map cedge_walkup f0 f1 b0 cnode_map f0 b0 * / c/\ c= cnode_map cedge_walkup f0 f1 f1 f1 c/\ c= cnode_map cedge_walkup f0 f1 cinverse * part cnode_map f0 f1 cnode_map f0 f1 c==> c/\ c~ c= b0 f1 c~ c= b0 cinverse * part cnode_map f0 f1 c= cnode_map cedge_walkup f0 f1 b0 cnode_map f0 b0 f2 * / c/\ c= cnode_map cedge_walkup f0 f1 f1 f1 c/\ c= cnode_map cedge_walkup f0 f1 cinverse * part cnode_map f0 f1 cnode_map f0 f1 c==> c/\ c~ c= b0 f1 c~ c= b0 cinverse * part cnode_map f0 f1 c= cnode_map cedge_walkup f0 f1 b0 cnode_map f0 b0 f2
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (!D. (!p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x)))))))) |- (((((permutes p) D) /\ ((permutes q) D)) ==> (!x. (!y. ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))) = T)
T c==> ! ! ! ! ! c==> c/\ cpermutes b1 b0 cpermutes b2 b0 c= c= cinverse b1 cinverse b2 b3 b4 c= * b2 * b1 b4 b3 c= c==> c/\ cpermutes f0 f1 cpermutes f2 f1 ! ! c= c= cinverse f0 cinverse f2 b0 b1 c= * f2 * f0 b1 b0 cT
+ |- (((!p. (!q. ((((permutes p) D) /\ ((permutes q) D)) ==> (!x. (!y. ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))))) ==> ((\p. (!q. ((((permutes p) D) /\ ((permutes q) D)) ==> (!x. (!y. ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))))) p)) = ((\p. (!q. ((((permutes p) D) /\ ((permutes q) D)) ==> (!x. (!y. ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))))) p))
T c= c==> ! ! c==> c/\ cpermutes b0 f0 cpermutes b1 f0 ! ! c= c= cinverse b0 cinverse b1 b2 b3 c= * b1 * b0 b3 b2 * / ! c==> c/\ cpermutes b0 f0 cpermutes b1 f0 ! ! c= c= cinverse b0 cinverse b1 b2 b3 c= * b1 * b0 b3 b2 f1 * / ! c==> c/\ cpermutes b0 f0 cpermutes b1 f0 ! ! c= c= cinverse b0 cinverse b1 b2 b3 c= * b1 * b0 b3 b2 f1
+ (!D. (!p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x)))))))) |- ((\x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))) x)
T c==> ! ! ! ! ! c==> c/\ cpermutes b1 b0 cpermutes b2 b0 c= c= cinverse b1 cinverse b2 b3 b4 c= * b2 * b1 b4 b3 * / ! c==> c/\ cpermutes f0 f1 cpermutes f2 f1 c= c= cinverse f0 cinverse f2 b0 b1 c= * f2 * f0 b1 b0 f3
+ (!x. ((((face_map H) x) = x) = (((inverse (face_map H)) x) = x))), (((node_map H) x) = ((inverse (edge_map H)) x)), (((face_map H) x) = x), (((permutes (face_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) /\ (((edge_map ((edge_walkup H) x)) o ((node_map ((edge_walkup H) x)) o (face_map ((edge_walkup H) x)))) = I)), ((permutes (node_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) |- ((((face_map H) x) = x) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)))
T c==> ! c= c= cface_map f0 b0 b0 c= cinverse * part cface_map f0 b0 b0 c==> c= cnode_map f0 f1 cinverse * part cedge_map f0 f1 c==> c= cface_map f0 f1 f1 c==> c/\ cpermutes * part cface_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= * * part co * part cedge_map cedge_walkup f0 f1 * * part co * part cnode_map cedge_walkup f0 f1 * part cface_map cedge_walkup f0 f1 part cI c==> cpermutes * part cnode_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c==> c= cface_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1
- (~ (((node_map H) x) = x)) |- (((~ (x = ((node_map H) x))) ==> ((x = ((node_map H) x)) = F)) = ((x = ((node_map H) x)) = F))
T c==> c~ c= cnode_map f0 f1 f1 c= c==> c~ c= f1 cnode_map f0 f1 c= c= f1 cnode_map f0 f1 cF c= c= f1 cnode_map f0 f1 cF
+ |- ((\y. ((((face_map ((edge_walkup H) x)) x) = x) /\ ((((face_map ((edge_walkup H) x)) ((inverse (face_map H)) x)) = ((face_map H) x)) /\ (((~ (y = x)) /\ (~ (y = ((inverse (face_map H)) x)))) ==> (((face_map ((edge_walkup H) x)) y) = ((face_map H) y)))))) ((edge_map H) x))
T * / c/\ c= cface_map cedge_walkup f0 f1 f1 f1 c/\ c= cface_map cedge_walkup f0 f1 cinverse * part cface_map f0 f1 cface_map f0 f1 c==> c/\ c~ c= b0 f1 c~ c= b0 cinverse * part cface_map f0 f1 c= cface_map cedge_walkup f0 f1 b0 cface_map f0 b0 cedge_map f0 f1
+ |- ((\t2. (((~ t1) ==> (~ t2)) = (t2 ==> t1))) t2)
T * / c= c==> c~ f0 c~ b0 c==> b0 f0 f1
+ |- (((permutes (face_map H)) (dart H)) = T)
T c= cpermutes * part cface_map f0 * part cdart f0 cT
- |- (((edge_map H) o (node_map H)) = (inverse (face_map H)))
T c= * * part co * part cedge_map f0 * part cnode_map f0 * part cinverse * part cface_map f0
- (((edge_map H) x) = x) |- (x = ((edge_map H) x))
T c==> c= cedge_map f0 f1 f1 c= f1 cedge_map f0 f1
- |- ((permutes (node_map H)) (dart H))
T cpermutes * part cnode_map f0 * part cdart f0
+ |- ((\y. ((((node_map ((edge_walkup H) x)) x) = x) /\ ((((node_map ((edge_walkup H) x)) ((inverse (node_map H)) x)) = ((node_map H) x)) /\ (((~ (y = x)) /\ (~ (y = ((inverse (node_map H)) x)))) ==> (((node_map ((edge_walkup H) x)) y) = ((node_map H) y)))))) y)
T * / c/\ c= cnode_map cedge_walkup f0 f1 f1 f1 c/\ c= cnode_map cedge_walkup f0 f1 cinverse * part cnode_map f0 f1 cnode_map f0 f1 c==> c/\ c~ c= b0 f1 c~ c= b0 cinverse * part cnode_map f0 f1 c= cnode_map cedge_walkup f0 f1 b0 cnode_map f0 b0 f2
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ |- ((\t1. (!t2. (((~ t1) ==> (~ t2)) = (t2 ==> t1)))) t1)
T * / ! c= c==> c~ b0 c~ b1 c==> b1 b0 f0
- |- ((!x. t) = t)
T c= ! f0 f0
+ |- (((!H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H))))))) ==> ((\H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H))))))) ((edge_walkup H) x))) = ((\H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H))))))) ((edge_walkup H) x)))
T c= c==> ! c/\ c= * part cedge_map b0 * * part co * part cinverse * part cface_map b0 * part cinverse * part cnode_map b0 c/\ c= * part cnode_map b0 * * part co * part cinverse * part cedge_map b0 * part cinverse * part cface_map b0 c= * part cface_map b0 * * part co * part cinverse * part cnode_map b0 * part cinverse * part cedge_map b0 * / c/\ c= * part cedge_map b0 * * part co * part cinverse * part cface_map b0 * part cinverse * part cnode_map b0 c/\ c= * part cnode_map b0 * * part co * part cinverse * part cedge_map b0 * part cinverse * part cface_map b0 c= * part cface_map b0 * * part co * part cinverse * part cnode_map b0 * part cinverse * part cedge_map b0 cedge_walkup f0 f1 * / c/\ c= * part cedge_map b0 * * part co * part cinverse * part cface_map b0 * part cinverse * part cnode_map b0 c/\ c= * part cnode_map b0 * * part co * part cinverse * part cedge_map b0 * part cinverse * part cface_map b0 c= * part cface_map b0 * * part co * part cinverse * part cnode_map b0 * part cinverse * part cedge_map b0 cedge_walkup f0 f1
+ (!D. (!p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x)))))))) |- ((\p. (!q. (!x. (!y. ((((permutes p) D) /\ ((permutes q) D)) ==> ((((inverse p) ((inverse q) x)) = y) = ((q (p y)) = x))))))) p)
T c==> ! ! ! ! ! c==> c/\ cpermutes b1 b0 cpermutes b2 b0 c= c= cinverse b1 cinverse b2 b3 b4 c= * b2 * b1 b4 b3 * / ! ! ! c==> c/\ cpermutes b0 f0 cpermutes b1 f0 c= c= cinverse b0 cinverse b1 b2 b3 c= * b1 * b0 b3 b2 f1
+ |- ((\x. ((f (g x)) = ((f o g) x))) x)
T * / c= * f0 * f1 b0 co f0 f1 b0 f2
+ (((node_map H) x) = ((inverse (edge_map H)) x)), (((face_map H) x) = x) |- (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((edge_map H) x))
T c==> c= cnode_map f0 f1 cinverse * part cedge_map f0 f1 c==> c= cface_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cedge_map f0 f1
+ |- ((\y. ((((edge_map ((edge_walkup H) x)) x) = x) /\ ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) /\ ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) /\ (((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))))))) y)
T * / c/\ c= cedge_map cedge_walkup f0 f1 f1 f1 c/\ c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c/\ c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 c==> c/\ c~ c= b0 f1 c/\ c~ c= b0 cinverse * part cedge_map f0 f1 c~ c= b0 cnode_map f0 f1 c= cedge_map cedge_walkup f0 f1 b0 cedge_map f0 b0 f2
+ |- (((!H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I)))))) ==> ((\H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I)))))) H)) = ((\H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I)))))) H))
T c= c==> ! c/\ cFINITE * part cdart b0 c/\ cpermutes * part cedge_map b0 * part cdart b0 c/\ cpermutes * part cnode_map b0 * part cdart b0 c/\ cpermutes * part cface_map b0 * part cdart b0 c= * * part co * part cedge_map b0 * * part co * part cnode_map b0 * part cface_map b0 part cI * / c/\ cFINITE * part cdart b0 c/\ cpermutes * part cedge_map b0 * part cdart b0 c/\ cpermutes * part cnode_map b0 * part cdart b0 c/\ cpermutes * part cface_map b0 * part cdart b0 c= * * part co * part cedge_map b0 * * part co * part cnode_map b0 * part cface_map b0 part cI f0 * / c/\ cFINITE * part cdart b0 c/\ cpermutes * part cedge_map b0 * part cdart b0 c/\ cpermutes * part cnode_map b0 * part cdart b0 c/\ cpermutes * part cface_map b0 * part cdart b0 c= * * part co * part cedge_map b0 * * part co * part cnode_map b0 * part cface_map b0 part cI f0
+ (((permutes (face_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) /\ (((edge_map ((edge_walkup H) x)) o ((node_map ((edge_walkup H) x)) o (face_map ((edge_walkup H) x)))) = I)), ((permutes (node_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) |- (((((permutes (face_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) /\ ((permutes (node_map ((edge_walkup H) x))) (dart ((edge_walkup H) x)))) ==> (!x'. (!y. ((((inverse (face_map ((edge_walkup H) x))) ((inverse (node_map ((edge_walkup H) x))) x')) = y) = (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) y)) = x'))))) = (!x'. (!y. ((((inverse (face_map ((edge_walkup H) x))) ((inverse (node_map ((edge_walkup H) x))) x')) = y) = (((node_map ((edge_walkup H) x)) ((face_map ((edge_walkup H) x)) y)) = x')))))
T c==> c/\ cpermutes * part cface_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= * * part co * part cedge_map cedge_walkup f0 f1 * * part co * part cnode_map cedge_walkup f0 f1 * part cface_map cedge_walkup f0 f1 part cI c==> cpermutes * part cnode_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= c==> c/\ cpermutes * part cface_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 cpermutes * part cnode_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 ! ! c= c= cinverse * part cface_map cedge_walkup f0 f1 cinverse * part cnode_map cedge_walkup f0 f1 b0 b1 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 b1 b0 ! ! c= c= cinverse * part cface_map cedge_walkup f0 f1 cinverse * part cnode_map cedge_walkup f0 f1 b0 b1 c= cnode_map cedge_walkup f0 f1 cface_map cedge_walkup f0 f1 b1 b0
+ |- ((((inverse (face_map ((edge_walkup H) x))) ((inverse (node_map ((edge_walkup H) x))) ((node_map H) x))) = ((edge_map H) x)) = (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)))
T c= c= cinverse * part cface_map cedge_walkup f0 f1 cinverse * part cnode_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1
+ |- ((\t. (t \/ (~ t))) (((node_map H) x) = x))
T * / c\/ b0 c~ b0 c= cnode_map f0 f1 f1
+ |- ((edge_map ((edge_walkup H) x)) = ((inverse (face_map ((edge_walkup H) x))) o (inverse (node_map ((edge_walkup H) x)))))
T c= * part cedge_map cedge_walkup f0 f1 * * part co * part cinverse * part cface_map cedge_walkup f0 f1 * part cinverse * part cnode_map cedge_walkup f0 f1
+ (((edge_map H) x) = x), (((node_map H) x) = ((inverse (edge_map H)) x)) |- ((((permutes (edge_map H)) (dart H)) ==> (!x. ((((edge_map H) x) = x) = (((inverse (edge_map H)) x) = x)))) ==> (((node_map H) x) = x))
T c==> c= cedge_map f0 f1 f1 c==> c= cnode_map f0 f1 cinverse * part cedge_map f0 f1 c==> c==> cpermutes * part cedge_map f0 * part cdart f0 ! c= c= cedge_map f0 b0 b0 c= cinverse * part cedge_map f0 b0 b0 c= cnode_map f0 f1 f1
+ |- (((permutes (edge_map H)) (dart H)) = T)
T c= cpermutes * part cedge_map f0 * part cdart f0 cT
+ |- (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I))))
T c/\ cpermutes * part cedge_map f0 * part cdart f0 c/\ cpermutes * part cnode_map f0 * part cdart f0 c/\ cpermutes * part cface_map f0 * part cdart f0 c= * * part co * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 part cI
- (((inverse (edge_map H)) x) = y) |- (y = ((inverse (edge_map H)) x))
T c==> c= cinverse * part cedge_map f0 f1 f2 c= f2 cinverse * part cedge_map f0 f1
- |- (FINITE (dart H))
T cFINITE * part cdart f0
- |- (((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x)))
T c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1
- (~ (((edge_map H) x) = x)) |- ((x = ((edge_map H) x)) = F)
T c==> c~ c= cedge_map f0 f1 f1 c= c= f1 cedge_map f0 f1 cF
- |- ((((~ (y = x)) /\ ((~ (y = ((inverse (edge_map H)) x))) /\ (~ (y = ((node_map H) x))))) ==> (((edge_map ((edge_walkup H) x)) y) = ((edge_map H) y))) = T)
T c= c==> c/\ c~ c= f0 f1 c/\ c~ c= f0 cinverse * part cedge_map f2 f1 c~ c= f0 cnode_map f2 f1 c= cedge_map cedge_walkup f2 f1 f0 cedge_map f2 f0 cT
- (~ (((node_map H) x) = x)) |- ((((node_map H) x) = x) = F)
T c==> c~ c= cnode_map f0 f1 f1 c= c= cnode_map f0 f1 f1 cF
- (~ (y = x)) |- (((~ (x = y)) ==> ((x = y) = F)) = ((x = y) = F))
T c==> c~ c= f0 f1 c= c==> c~ c= f1 f0 c= c= f1 f0 cF c= c= f1 f0 cF
- |- ((((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x))) = T)
T c= c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1 cT
- (x = ((edge_map H) x)) |- (((edge_map H) x) = x)
T c==> c= f0 cedge_map f1 f0 c= cedge_map f1 f0 f0
- |- (((node_map ((edge_walkup H) x)) x) = x)
T c= cnode_map cedge_walkup f0 f1 f1 f1
- ((permutes (node_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) |- (((permutes (node_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) = T)
T c==> cpermutes * part cnode_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= cpermutes * part cnode_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 cT
- |- ((((~ (((inverse (face_map H)) x) = x)) /\ (~ (((inverse (edge_map H)) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((inverse (edge_map H)) x)) = ((inverse (face_map H)) x))) = T)
T c= c==> c/\ c~ c= cinverse * part cface_map f0 f1 f1 c~ c= cinverse * part cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cinverse * part cedge_map f0 f1 cinverse * part cface_map f0 f1 cT
- (x = y) |- (y = x)
T c==> c= f0 f1 c= f1 f0
- |- (((permutes (node_map H)) (dart H)) = T)
T c= cpermutes * part cnode_map f0 * part cdart f0 cT
- |- (((edge_map H) o ((node_map H) o (face_map H))) = I)
T c= * * part co * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 part cI
- |- (((~ (y = x)) /\ (~ (y = ((inverse (node_map H)) x)))) ==> (((node_map ((edge_walkup H) x)) y) = ((node_map H) y)))
T c==> c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cnode_map f2 f1 c= cnode_map cedge_walkup f2 f1 f0 cnode_map f2 f0
- ((permutes (edge_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) |- (((permutes (edge_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) = T)
T c==> cpermutes * part cedge_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= cpermutes * part cedge_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 cT
- (~ (y = ((inverse (edge_map H)) x))) |- (((~ (((inverse (edge_map H)) x) = y)) ==> ((((inverse (edge_map H)) x) = y) = F)) = ((((inverse (edge_map H)) x) = y) = F))
T c==> c~ c= f0 cinverse * part cedge_map f1 f2 c= c==> c~ c= cinverse * part cedge_map f1 f2 f0 c= c= cinverse * part cedge_map f1 f2 f0 cF c= c= cinverse * part cedge_map f1 f2 f0 cF
- |- ((FINITE (dart H)) = T)
T c= cFINITE * part cdart f0 cT
- (x = ((node_map H) x)) |- (((node_map H) x) = x)
T c==> c= f0 cnode_map f1 f0 c= cnode_map f1 f0 f0
- (((node_map H) x) = ((inverse (edge_map H)) x)) |- (T = (((node_map ((edge_walkup H) x)) ((inverse (node_map H)) x)) = ((inverse (edge_map H)) x)))
T c==> c= cnode_map f0 f1 cinverse * part cedge_map f0 f1 c= cT c= cnode_map cedge_walkup f0 f1 cinverse * part cnode_map f0 f1 cinverse * part cedge_map f0 f1
- |- (((~ (((node_map H) x) = x)) /\ (~ (((edge_map H) x) = x))) ==> (((edge_map ((edge_walkup H) x)) ((node_map H) x)) = ((edge_map H) x)))
T c==> c/\ c~ c= cnode_map f0 f1 f1 c~ c= cedge_map f0 f1 f1 c= cedge_map cedge_walkup f0 f1 cnode_map f0 f1 cedge_map f0 f1
- |- (T = (((edge_map ((edge_walkup H) x)) x) = x))
T c= cT c= cedge_map cedge_walkup f0 f1 f1 f1
- (~ (((edge_map H) x) = x)) |- (((~ (x = ((edge_map H) x))) ==> ((x = ((edge_map H) x)) = F)) = ((x = ((edge_map H) x)) = F))
T c==> c~ c= cedge_map f0 f1 f1 c= c==> c~ c= f1 cedge_map f0 f1 c= c= f1 cedge_map f0 f1 cF c= c= f1 cedge_map f0 f1 cF
- (((node_map H) x) = x) |- (x = ((node_map H) x))
T c==> c= cnode_map f0 f1 f1 c= f1 cnode_map f0 f1
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- (FINITE (dart ((edge_walkup H) x)))
T cFINITE * part cdart cedge_walkup f0 f1
- (~ (y = x)) |- (~ (x = y))
T c==> c~ c= f0 f1 c~ c= f1 f0
- (~ (((edge_map H) x) = x)) |- (~ (x = ((edge_map H) x)))
T c==> c~ c= cedge_map f0 f1 f1 c~ c= f1 cedge_map f0 f1
- (~ (y = x)) |- ((x = y) = F)
T c==> c~ c= f0 f1 c= c= f1 f0 cF
- (~ (((node_map H) x) = x)) |- ((x = ((node_map H) x)) = F)
T c==> c~ c= cnode_map f0 f1 f1 c= c= f1 cnode_map f0 f1 cF
- |- ((((~ (y = x)) /\ (~ (y = ((inverse (node_map H)) x)))) ==> (((node_map ((edge_walkup H) x)) y) = ((node_map H) y))) = T)
T c= c==> c/\ c~ c= f0 f1 c~ c= f0 cinverse * part cnode_map f2 f1 c= cnode_map cedge_walkup f2 f1 f0 cnode_map f2 f0 cT
- (((permutes (face_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) /\ (((edge_map ((edge_walkup H) x)) o ((node_map ((edge_walkup H) x)) o (face_map ((edge_walkup H) x)))) = I)) |- (((permutes (face_map ((edge_walkup H) x))) (dart ((edge_walkup H) x))) = T)
T c==> c/\ cpermutes * part cface_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 c= * * part co * part cedge_map cedge_walkup f0 f1 * * part co * part cnode_map cedge_walkup f0 f1 * part cface_map cedge_walkup f0 f1 part cI c= cpermutes * part cface_map cedge_walkup f0 f1 * part cdart cedge_walkup f0 f1 cT
- |- (((node_map H) o (face_map H)) = (inverse (edge_map H)))
T c= * * part co * part cnode_map f0 * part cface_map f0 * part cinverse * part cedge_map f0
- (y = ((inverse (edge_map H)) x)) |- (((inverse (edge_map H)) x) = y)
T c==> c= f0 cinverse * part cedge_map f1 f2 c= cinverse * part cedge_map f1 f2 f0
- (x IN (dart H)) |- ((x IN (dart H)) = T)
T c==> cIN f0 * part cdart f1 c= cIN f0 * part cdart f1 cT
