N Aq4.betwn_cat_ex
C |- (!a. ((~ ((MEM y) a)) ==> ((((betwn ((APPEND ((APPEND ((CONS z) NIL)) ((APPEND a) ((CONS y) NIL)))) b)) z) y) = a)))
T c==> c~ cMEM f0 f1 c= cbetwn cAPPEND cAPPEND cCONS f2 cNIL cAPPEND f1 cCONS f0 cNIL f3 f2 f0 f1
D TRUTH
A |- T
T cT
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D APPEND
A |- ((!l. (((APPEND NIL) l) = l)) /\ (!h. (!t. (!l. (((APPEND ((CONS h) t)) l) = ((CONS h) ((APPEND t) l)))))))
T c/\ ! c= cAPPEND cNIL b0 b0 ! ! ! c= cAPPEND cCONS b0 b1 b2 cCONS b0 cAPPEND b1 b2
D MEM
A |- ((((MEM x) NIL) = F) /\ (((MEM x) ((CONS h) t)) = ((x = h) \/ ((MEM x) t))))
T c/\ c= cMEM f0 cNIL cF c= cMEM f0 cCONS f1 f2 c\/ c= f0 f1 cMEM f0 f2
D MEM_APPEND
A |- (!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))))
T c= cMEM f0 cAPPEND f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
D IN_SET_OF_LIST
A |- (!x. (!l. ((x IN (set_of_list l)) = ((MEM x) l))))
T c= cIN f0 * part cset_of_list f1 cMEM f0 f1
D Tame_defs.split_at_rec
A |- (((((split_at_rec c) bs) NIL) = (bs , NIL)) /\ ((((split_at_rec c) bs) ((CONS a) xs)) = (((COND (a = c)) (bs , xs)) (((split_at_rec c) ((APPEND bs) ((CONS a) NIL))) xs))))
T c/\ c= csplit_at_rec f0 f1 cNIL c, f1 cNIL c= csplit_at_rec f0 f1 cCONS f2 f3 cCOND c= f2 f0 c, f1 f3 csplit_at_rec f0 cAPPEND f1 cCONS f2 cNIL f3
D Tame_defs.split_at
A |- (!c. (!xs. (((split_at c) xs) = (((split_at_rec c) NIL) xs))))
T c= csplit_at f0 f1 csplit_at_rec f0 cNIL f1
D Tame_defs.betwn
A |- (!ram2. (!ram1. (!vs. ((((betwn vs) ram1) ram2) = ((LET (GABS (\f. (!pre1. (!post1. ((GEQ (f (pre1 , post1))) (LET_END (((COND (ram2 IN (set_of_list post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at ram2) post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND post1) pre2)))))))) ((split_at ram2) pre1)))))))))) ((split_at ram1) vs))))))
T c= cbetwn f0 f1 f2 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cCOND cIN f2 * part cset_of_list b2 cLET * part cGABS / ! ! cGEQ * b3 c, b3 b4 cLET_END b3 csplit_at f2 b2 cLET * part cGABS / ! ! cGEQ * b3 c, b3 b4 cLET_END cAPPEND b2 b3 csplit_at f2 b1 csplit_at f1 f0
D Seq.mem_seq1
A |- (!x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y))))
T c= cMEM f0 cCONS f1 cNIL c= f0 f1
D Tame_list.fst_split_at_acc
A |- (!f. (!u. (!b. (((APPEND b) (FST (((split_at_rec u) NIL) f))) = (FST (((split_at_rec u) b) f))))))
T c= cAPPEND f0 cFST csplit_at_rec f1 cNIL f2 cFST csplit_at_rec f1 f0 f2
D Dangeyj.fst_snd_fun
A |- (((GABS (\f. (!a. (!b. ((GEQ (f (a , b))) ((f a) b)))))) c) = ((f (FST c)) (SND c)))
T c= cGABS / ! ! cGEQ * b0 c, b1 b2 * * f0 b1 b2 f1 * * f0 cFST f1 cSND f1
+ ((~ ((MEM y) t)) ==> ((FST (((split_at_rec y) NIL) ((APPEND ((APPEND t) ((CONS y) NIL))) b))) = t)) |- ((~ (y = h)) ==> ((~ ((MEM y) t)) ==> ((FST (((split_at_rec y) ((CONS h) NIL)) ((APPEND ((APPEND t) ((CONS y) NIL))) b))) = ((CONS h) t))))
T c==> c==> c~ cMEM f0 f1 c= cFST csplit_at_rec f0 cNIL cAPPEND cAPPEND f1 cCONS f0 cNIL f2 f1 c==> c~ c= f0 f3 c==> c~ cMEM f0 f1 c= cFST csplit_at_rec f0 cCONS f3 cNIL cAPPEND cAPPEND f1 cCONS f0 cNIL f2 cCONS f3 f1
+ |- (!a. ((~ ((MEM y) a)) ==> ((FST (((split_at_rec y) NIL) ((APPEND ((APPEND a) ((CONS y) NIL))) b))) = a)))
T c==> c~ cMEM f0 f1 c= cFST csplit_at_rec f0 cNIL cAPPEND cAPPEND f1 cCONS f0 cNIL f2 f1
+ |- (((!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) ==> ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)) = ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x))
T c= c==> ! ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
+ |- ((\c. (!xs. (((split_at c) xs) = (((split_at_rec c) NIL) xs)))) c)
T * / ! c= csplit_at b0 b1 csplit_at_rec b0 cNIL b1 f0
+ (~ (y = h)) |- (((FST (((split_at_rec y) ((CONS h) NIL)) ((APPEND ((APPEND t) ((CONS y) NIL))) b))) = ((CONS h) t)) = ((FST (((COND (h = y)) (NIL , ((APPEND ((APPEND t) ((CONS y) NIL))) b))) (((split_at_rec y) ((CONS h) NIL)) ((APPEND ((APPEND t) ((CONS y) NIL))) b)))) = ((CONS h) t)))
T c==> c~ c= f0 f1 c= c= cFST csplit_at_rec f0 cCONS f1 cNIL cAPPEND cAPPEND f2 cCONS f0 cNIL f3 cCONS f1 f2 c= cFST cCOND c= f1 f0 c, cNIL cAPPEND cAPPEND f2 cCONS f0 cNIL f3 csplit_at_rec f0 cCONS f1 cNIL cAPPEND cAPPEND f2 cCONS f0 cNIL f3 cCONS f1 f2
+ |- (((!l. ((x IN (set_of_list l)) = ((MEM x) l))) ==> ((\l. ((x IN (set_of_list l)) = ((MEM x) l))) l)) = ((\l. ((x IN (set_of_list l)) = ((MEM x) l))) l))
T c= c==> ! c= cIN f0 * part cset_of_list b0 cMEM f0 b0 * / c= cIN f0 * part cset_of_list b0 cMEM f0 b0 f1 * / c= cIN f0 * part cset_of_list b0 cMEM f0 b0 f1
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
+ |- (((!xs. (((split_at c) xs) = (((split_at_rec c) NIL) xs))) ==> ((\xs. (((split_at c) xs) = (((split_at_rec c) NIL) xs))) xs)) = ((\xs. (((split_at c) xs) = (((split_at_rec c) NIL) xs))) xs))
T c= c==> ! c= csplit_at f0 b0 csplit_at_rec f0 cNIL b0 * / c= csplit_at f0 b0 csplit_at_rec f0 cNIL b0 f1 * / c= csplit_at f0 b0 csplit_at_rec f0 cNIL b0 f1
+ |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ |- ((\b. ((FST (((split_at_rec u) b) f)) = ((APPEND b) (FST (((split_at_rec u) NIL) f))))) b)
T * / c= cFST csplit_at_rec f0 b0 f1 cAPPEND b0 cFST csplit_at_rec f0 cNIL f1 f2
+ |- ((\vs. ((((betwn vs) ram1) ram2) = ((LET (GABS (\f. (!pre1. (!post1. ((GEQ (f (pre1 , post1))) (LET_END (((COND (ram2 IN (set_of_list post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END pre2))))))) ((split_at ram2) post1))) ((LET (GABS (\f. (!pre2. (!post2. ((GEQ (f (pre2 , post2))) (LET_END ((APPEND post1) pre2)))))))) ((split_at ram2) pre1)))))))))) ((split_at ram1) vs)))) vs)
T * / c= cbetwn b0 f0 f1 cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cCOND cIN f1 * part cset_of_list b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END b4 csplit_at f1 b3 cLET * part cGABS / ! ! cGEQ * b4 c, b4 b5 cLET_END cAPPEND b3 b4 csplit_at f1 b2 csplit_at f0 b0 f2
+ |- ((t \/ T) = T)
T c= c\/ f0 cT cT
- ((FST (((split_at_rec y) NIL) ((APPEND ((APPEND t) ((CONS y) NIL))) b))) = t) |- (T = ((FST (((split_at_rec y) ((CONS h) NIL)) ((APPEND ((APPEND t) ((CONS y) NIL))) b))) = ((CONS h) t)))
T c==> c= cFST csplit_at_rec f0 cNIL cAPPEND cAPPEND f1 cCONS f0 cNIL f2 f1 c= cT c= cFST csplit_at_rec f0 cCONS f3 cNIL cAPPEND cAPPEND f1 cCONS f0 cNIL f2 cCONS f3 f1
+ |- (((!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) ==> ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)) = ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1))
T c= c==> ! ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ ((~ ((MEM y) t)) ==> ((FST (((split_at_rec y) NIL) ((APPEND ((APPEND t) ((CONS y) NIL))) b))) = t)) |- ((~ ((MEM y) t)) ==> ((FST (((split_at_rec y) ((CONS h) NIL)) ((APPEND ((APPEND t) ((CONS y) NIL))) b))) = ((CONS h) t)))
T c==> c==> c~ cMEM f0 f1 c= cFST csplit_at_rec f0 cNIL cAPPEND cAPPEND f1 cCONS f0 cNIL f2 f1 c==> c~ cMEM f0 f1 c= cFST csplit_at_rec f0 cCONS f3 cNIL cAPPEND cAPPEND f1 cCONS f0 cNIL f2 cCONS f3 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
- |- ((!a. t) = t)
T c= ! f0 f0
- |- ((\x. (!s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0)))))))) x)
T * / ! c= cnext_el b1 b0 cCOND c= cindexl b0 b1 c- csizel b1 cNUMERAL cBIT1 c_0 cheadl b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 f0
- |- (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))
T c= cnext_el f0 f1 cCOND c= cindexl f1 f0 c- csizel f0 cNUMERAL cBIT1 c_0 cheadl f1 f0 cnth f1 f0 c+ cindexl f1 f0 cNUMERAL cBIT1 c_0
- |- ((\s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))) s)
T * / c= cnext_el b0 f0 cCOND c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 cheadl f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 f1
- (~ (y = h)) |- ((y = h) = F)
T c==> c~ c= f0 f1 c= c= f0 f1 cF
- |- (((!s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))) ==> ((\s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))) s)) = ((\s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0))))))) s))
T c= c==> ! c= cnext_el b0 f0 cCOND c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 cheadl f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 * / c= cnext_el b0 f0 cCOND c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 cheadl f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 f1 * / c= cnext_el b0 f0 cCOND c= cindexl f0 b0 c- csizel b0 cNUMERAL cBIT1 c_0 cheadl f0 b0 cnth f0 b0 c+ cindexl f0 b0 cNUMERAL cBIT1 c_0 f1
- ((~ ((MEM y) t)) ==> ((FST (((split_at_rec y) NIL) ((APPEND ((APPEND t) ((CONS y) NIL))) b))) = t)) |- (((~ ((MEM y) t)) ==> ((FST (((split_at_rec y) NIL) ((APPEND ((APPEND t) ((CONS y) NIL))) b))) = t)) = T)
T c==> c==> c~ cMEM f0 f1 c= cFST csplit_at_rec f0 cNIL cAPPEND cAPPEND f1 cCONS f0 cNIL f2 f1 c= c==> c~ cMEM f0 f1 c= cFST csplit_at_rec f0 cNIL cAPPEND cAPPEND f1 cCONS f0 cNIL f2 f1 cT
- |- ((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2)))
T c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1
- |- (((!x. (!s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0)))))))) ==> ((\x. (!s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0)))))))) x)) = ((\x. (!s. (((next_el s) x) = (((COND (((indexl x) s) = ((sizel s) - (NUMERAL (BIT1 _0))))) ((headl x) s)) (((nth x) s) (((indexl x) s) + (NUMERAL (BIT1 _0)))))))) x))
T c= c==> ! ! c= cnext_el b1 b0 cCOND c= cindexl b0 b1 c- csizel b1 cNUMERAL cBIT1 c_0 cheadl b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 * / ! c= cnext_el b1 b0 cCOND c= cindexl b0 b1 c- csizel b1 cNUMERAL cBIT1 c_0 cheadl b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 f0 * / ! c= cnext_el b1 b0 cCOND c= cindexl b0 b1 c- csizel b1 cNUMERAL cBIT1 c_0 cheadl b0 b1 cnth b0 b1 c+ cindexl b0 b1 cNUMERAL cBIT1 c_0 f0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
