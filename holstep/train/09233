N Hypermap.shift_lemma
C |- (!H. (((dart H) = (dart (shift H))) /\ (((edge_map H) = (face_map (shift H))) /\ (((node_map H) = (edge_map (shift H))) /\ ((face_map H) = (node_map (shift H)))))))
T c/\ c= * part cdart f0 * part cdart cshift f0 c/\ c= * part cedge_map f0 * part cface_map cshift f0 c/\ c= * part cnode_map f0 * part cedge_map cshift f0 c= * part cface_map f0 * part cnode_map cshift f0
D TRUTH
A |- T
T cT
D Hypermap.hypermap_lemma
A |- (!H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I))))))
T c/\ cFINITE * part cdart f0 c/\ cpermutes * part cedge_map f0 * part cdart f0 c/\ cpermutes * part cnode_map f0 * part cdart f0 c/\ cpermutes * part cface_map f0 * part cdart f0 c= * * part co * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 part cI
D Hypermap.hypermap_cyclic
A |- (!H. ((((node_map H) o ((face_map H) o (edge_map H))) = I) /\ (((face_map H) o ((edge_map H) o (node_map H))) = I)))
T c/\ c= * * part co * part cnode_map f0 * * part co * part cface_map f0 * part cedge_map f0 part cI c= * * part co * part cface_map f0 * * part co * part cedge_map f0 * part cnode_map f0 part cI
D Hypermap.lemma_hypermap_rep
A |- (!D. (!e. (!n. (!f. (((FINITE D) /\ (((permutes e) D) /\ (((permutes n) D) /\ (((permutes f) D) /\ ((e o (n o f)) = I))))) ==> (((dart (hypermap (D , (e , (n , f))))) = D) /\ (((edge_map (hypermap (D , (e , (n , f))))) = e) /\ (((node_map (hypermap (D , (e , (n , f))))) = n) /\ ((face_map (hypermap (D , (e , (n , f))))) = f)))))))))
T c==> c/\ cFINITE f0 c/\ cpermutes f1 f0 c/\ cpermutes f2 f0 c/\ cpermutes f3 f0 c= * * part co f1 * * part co f2 f3 part cI c/\ c= * part cdart chypermap c, f0 c, f1 c, f2 f3 f0 c/\ c= * part cedge_map chypermap c, f0 c, f1 c, f2 f3 f1 c/\ c= * part cnode_map chypermap c, f0 c, f1 c, f2 f3 f2 c= * part cface_map chypermap c, f0 c, f1 c, f2 f3 f3
D Hypermap.shift
A |- (!H. ((shift H) = (hypermap ((dart H) , ((node_map H) , ((face_map H) , (edge_map H)))))))
T c= cshift f0 chypermap c, * part cdart f0 c, * part cnode_map f0 c, * part cface_map f0 * part cedge_map f0
+ |- (((dart H) = (dart (hypermap ((dart H) , ((node_map H) , ((face_map H) , (edge_map H))))))) /\ (((edge_map H) = (face_map (hypermap ((dart H) , ((node_map H) , ((face_map H) , (edge_map H))))))) /\ (((node_map H) = (edge_map (hypermap ((dart H) , ((node_map H) , ((face_map H) , (edge_map H))))))) /\ ((face_map H) = (node_map (hypermap ((dart H) , ((node_map H) , ((face_map H) , (edge_map H))))))))))
T c/\ c= * part cdart f0 * part cdart chypermap c, * part cdart f0 c, * part cnode_map f0 c, * part cface_map f0 * part cedge_map f0 c/\ c= * part cedge_map f0 * part cface_map chypermap c, * part cdart f0 c, * part cnode_map f0 c, * part cface_map f0 * part cedge_map f0 c/\ c= * part cnode_map f0 * part cedge_map chypermap c, * part cdart f0 c, * part cnode_map f0 c, * part cface_map f0 * part cedge_map f0 c= * part cface_map f0 * part cnode_map chypermap c, * part cdart f0 c, * part cnode_map f0 c, * part cface_map f0 * part cedge_map f0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
