N Tame_list.concat_flatten
C |- (!x. (!xs. (((flatten NIL) = NIL) /\ ((flatten ((CONS x) xs)) = ((APPEND x) (flatten xs))))))
T c/\ c= cflatten cNIL cNIL c= cflatten cCONS f0 f1 cAPPEND f0 cflatten f1
D TRUTH
A |- T
T cT
D Seq.flatten0
A |- ((flatten NIL) = NIL)
T c= cflatten cNIL cNIL
D Seq.flatten_cons
A |- (!s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss)))))
T c= cflatten cCONS f0 f1 ccat f0 cflatten f1
D Tame_list.APPEND_cat
A |- (APPEND = cat)
T c= part cAPPEND part ccat
- |- (((!f. (!fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs)))) ==> ((\f. (!fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs)))) f)) = ((\f. (!fs. (((makeFaceFinalFaceList f) fs) = (((replace f) ((CONS (setFinal f)) NIL)) fs)))) f))
T c= c==> ! ! c= cmakeFaceFinalFaceList b0 b1 creplace b0 cCONS csetFinal b0 cNIL b1 * / ! c= cmakeFaceFinalFaceList b0 b1 creplace b0 cCONS csetFinal b0 cNIL b1 f0 * / ! c= cmakeFaceFinalFaceList b0 b1 creplace b0 cCONS csetFinal b0 cNIL b1 f0
- |- ((FST (x , y)) = x)
T c= cFST c, f0 f1 f0
- |- ((\vs. ((setFinal (vs , f)) = (vs , T))) vs)
T * / c= csetFinal c, b0 f0 c, b0 cT f1
- |- (((!f. (!vs. ((setFinal (vs , f)) = (vs , T)))) ==> ((\f. (!vs. ((setFinal (vs , f)) = (vs , T)))) f)) = ((\f. (!vs. ((setFinal (vs , f)) = (vs , T)))) f))
T c= c==> ! ! c= csetFinal c, b1 b0 c, b1 cT * / ! c= csetFinal c, b1 b0 c, b1 cT f0 * / ! c= csetFinal c, b1 b0 c, b1 cT f0
- |- (!g. (!f. ((fgraph ((makeFaceFinal f) g)) = (fgraph g))))
T c= cfgraph cmakeFaceFinal f0 f1 cfgraph f1
- |- ((\f. (!g. (((makeFaceFinal f) g) = ((((Graph ((makeFaceFinalFaceList f) (faces g))) (countVertices g)) ((MAP (\fs. ((makeFaceFinalFaceList f) fs))) (faceListAt g))) (heights g))))) f)
T * / ! c= cmakeFaceFinal b0 b1 cGraph cmakeFaceFinalFaceList b0 cfaces b1 ccountVertices b1 cMAP / cmakeFaceFinalFaceList b0 b2 cfaceListAt b1 cheights b1 f0
- |- (((!n. (!f. (!h. (((((Graph fs) n) f) h) = (fs , (n , (f , h))))))) ==> ((\n. (!f. (!h. (((((Graph fs) n) f) h) = (fs , (n , (f , h))))))) n)) = ((\n. (!f. (!h. (((((Graph fs) n) f) h) = (fs , (n , (f , h))))))) n))
T c= c==> ! ! ! c= cGraph f0 b0 b1 b2 c, f0 c, b0 c, b1 b2 * / ! ! c= cGraph f0 b0 b1 b2 c, f0 c, b0 c, b1 b2 f1 * / ! ! c= cGraph f0 b0 b1 b2 c, f0 c, b0 c, b1 b2 f1
+ |- (((!s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss))))) ==> ((\s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss))))) s)) = ((\s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss))))) s))
T c= c==> ! ! c= cflatten cCONS b0 b1 ccat b0 cflatten b1 * / ! c= cflatten cCONS b0 b1 ccat b0 cflatten b1 f0 * / ! c= cflatten cCONS b0 b1 ccat b0 cflatten b1 f0
+ |- ((x = x) = T)
T c= c= f0 f0 cT
+ |- ((\s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss))))) s)
T * / ! c= cflatten cCONS b0 b1 ccat b0 cflatten b1 f0
+ |- (((!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss)))) ==> ((\ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss)))) ss)) = ((\ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss)))) ss))
T c= c==> ! c= cflatten cCONS f0 b0 ccat f0 cflatten b0 * / c= cflatten cCONS f0 b0 ccat f0 cflatten b0 f1 * / c= cflatten cCONS f0 b0 ccat f0 cflatten b0 f1
+ |- (T = (!x. (!xs. (((flatten NIL) = NIL) /\ ((flatten ((CONS x) xs)) = ((APPEND x) (flatten xs)))))))
T c= cT ! ! c/\ c= cflatten cNIL cNIL c= cflatten cCONS b0 b1 cAPPEND b0 cflatten b1
+ |- ((T /\ t) = t)
T c= c/\ cT f0 f0
+ |- ((\ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss)))) ss)
T * / c= cflatten cCONS f0 b0 ccat f0 cflatten b0 f1
