N Tame_opposite.opposite_path
C |- (!H. (!p. (!n. ((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))))))))
T c==> cis_path f0 f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D FUN_EQ_THM
A |- (!f. (!g. ((f = g) = (!x. ((f x) = (g x))))))
T c= c= f0 f1 ! c= * f0 b0 * f1 b0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D o_THM
A |- (!f. (!g. (!x. (((f o g) x) = (f (g x))))))
T c= co f0 f1 f2 * f0 * f1 f2
D I_THM
A |- (!x. ((I x) = x))
T c= cI f0 f0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D Ssrnat.add0n
A |- (!n. (((NUMERAL _0) + n) = n))
T c= c+ cNUMERAL c_0 f0 f0
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D ADD_ASSOC
A |- (!m. (!n. (!p. ((m + (n + p)) = ((m + n) + p)))))
T c= c+ f0 c+ f1 f2 c+ c+ f0 f1 f2
D ADD_AC
A |- (((m + n) = (n + m)) /\ ((((m + n) + p) = (m + (n + p))) /\ ((m + (n + p)) = (n + (m + p)))))
T c/\ c= c+ f0 f1 c+ f1 f0 c/\ c= c+ c+ f0 f1 f2 c+ f0 c+ f1 f2 c= c+ f0 c+ f1 f2 c+ f1 c+ f0 f2
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D ADD1
A |- (!m. ((SUC m) = (m + (NUMERAL (BIT1 _0)))))
T c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
D Ssrnat.mul0n
A |- (!n. (((NUMERAL _0) * n) = (NUMERAL _0)))
T c= c* cNUMERAL c_0 f0 cNUMERAL c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D MULT_CLAUSES
A |- ((!n. (((NUMERAL _0) * n) = (NUMERAL _0))) /\ ((!m. ((m * (NUMERAL _0)) = (NUMERAL _0))) /\ ((!n. (((NUMERAL (BIT1 _0)) * n) = n)) /\ ((!m. ((m * (NUMERAL (BIT1 _0))) = m)) /\ ((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) /\ (!m. (!n. ((m * (SUC n)) = (m + (m * n))))))))))
T c/\ ! c= c* cNUMERAL c_0 b0 cNUMERAL c_0 c/\ ! c= c* b0 cNUMERAL c_0 cNUMERAL c_0 c/\ ! c= c* cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= c* b0 cNUMERAL cBIT1 c_0 b0 c/\ ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1
D Ssrnat.mul1n
A |- (!n. (((NUMERAL (BIT1 _0)) * n) = n))
T c= c* cNUMERAL cBIT1 c_0 f0 f0
D LEFT_ADD_DISTRIB
A |- (!m. (!n. (!p. ((m * (n + p)) = ((m * n) + (m * p))))))
T c= c* f0 c+ f1 f2 c+ c* f0 f1 c* f0 f2
D MULT_AC
A |- (((m * n) = (n * m)) /\ ((((m * n) * p) = (m * (n * p))) /\ ((m * (n * p)) = (n * (m * p)))))
T c/\ c= c* f0 f1 c* f1 f0 c/\ c= c* c* f0 f1 f2 c* f0 c* f1 f2 c= c* f0 c* f1 f2 c* f1 c* f0 f2
D Ssrnat.expnS
A |- (!m. (!n. ((m EXP (SUC n)) = (m * (m EXP n)))))
T c= cEXP f0 cSUC f1 c* f0 cEXP f0 f1
D Ssrnat.expn0
A |- (!m. ((m EXP (NUMERAL _0)) = (NUMERAL (BIT1 _0))))
T c= cEXP f0 cNUMERAL c_0 cNUMERAL cBIT1 c_0
D EXP_2
A |- (!n. ((n EXP (NUMERAL (BIT0 (BIT1 _0)))) = (n * n)))
T c= cEXP f0 cNUMERAL cBIT0 cBIT1 c_0 c* f0 f0
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D LE_REFL
A |- (!n. (n <= n))
T c<= f0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_ZERO
A |- (((NUMERAL (NUMERAL _0)) = (NUMERAL _0)) /\ ((BIT0 _0) = _0))
T c/\ c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0 c= cBIT0 c_0 c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D ARITH_MULT
A |- ((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) /\ (((_0 * _0) = _0) /\ ((!n. ((_0 * (BIT0 n)) = _0)) /\ ((!n. ((_0 * (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))))))
T c/\ ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 c/\ c= c* c_0 c_0 c_0 c/\ ! c= c* c_0 cBIT0 b0 c_0 c/\ ! c= c* c_0 cBIT1 b0 c_0 c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
D ARITH_EXP
A |- ((!m. (!n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n))))) /\ (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))))))
T c/\ ! ! c= cEXP cNUMERAL b0 cNUMERAL b1 cNUMERAL cEXP b0 b1 c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
D REAL_ADD_SYM
A |- (!x. (!y. (((real_add x) y) = ((real_add y) x))))
T c= creal_add f0 f1 creal_add f1 f0
D REAL_ADD_ASSOC
A |- (!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z)))))
T c= creal_add f0 creal_add f1 f2 creal_add creal_add f0 f1 f2
D REAL_ADD_LID
A |- (!x. (((real_add (real_of_num (NUMERAL _0))) x) = x))
T c= creal_add creal_of_num cNUMERAL c_0 f0 f0
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_ADD_RINV
A |- (!x. (((real_add x) (real_neg x)) = (real_of_num (NUMERAL _0))))
T c= creal_add f0 creal_neg f0 creal_of_num cNUMERAL c_0
D REAL_MUL_RZERO
A |- (!x. (((real_mul x) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0))))
T c= creal_mul f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D REAL_NEG_ADD
A |- (!x. (!y. ((real_neg ((real_add x) y)) = ((real_add (real_neg x)) (real_neg y)))))
T c= creal_neg creal_add f0 f1 creal_add creal_neg f0 creal_neg f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D int_eq
A |- (!x. (!y. ((x = y) = ((real_of_int x) = (real_of_int y)))))
T c= c= f0 f1 c= creal_of_int f0 creal_of_int f1
D int_le
A |- (!x. (!y. (((int_le x) y) = ((real_le (real_of_int x)) (real_of_int y)))))
T c= cint_le f0 f1 creal_le creal_of_int f0 creal_of_int f1
D int_of_num_th
A |- (!n. ((real_of_int (int_of_num n)) = (real_of_num n)))
T c= creal_of_int cint_of_num f0 creal_of_num f0
D int_add_th
A |- (!x. (!y. ((real_of_int ((int_add x) y)) = ((real_add (real_of_int x)) (real_of_int y)))))
T c= creal_of_int cint_add f0 f1 creal_add creal_of_int f0 creal_of_int f1
D INT_OF_NUM_ADD
A |- (!m. (!n. (((int_add (int_of_num m)) (int_of_num n)) = (int_of_num (m + n)))))
T c= cint_add cint_of_num f0 cint_of_num f1 cint_of_num c+ f0 f1
D INT_OF_NUM_EQ
A |- (!m. (!n. (((int_of_num m) = (int_of_num n)) = (m = n))))
T c= c= cint_of_num f0 cint_of_num f1 c= f0 f1
D INT_OF_NUM_LE
A |- (!m. (!n. (((int_le (int_of_num m)) (int_of_num n)) = (m <= n))))
T c= cint_le cint_of_num f0 cint_of_num f1 c<= f0 f1
D INT_POS
A |- (!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n)))
T cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
D PERMUTES_INVERSES_o
A |- (!p. (!s. (((permutes p) s) ==> (((p o (inverse p)) = I) /\ (((inverse p) o p) = I)))))
T c==> cpermutes f0 f1 c/\ c= * * part co f0 * part cinverse f0 part cI c= * * part co * part cinverse f0 f0 part cI
D Hypermap.edge_map
A |- (!H. ((edge_map H) = (FST (SND (tuple_hypermap H)))))
T c= * part cedge_map f0 * part cFST cSND ctuple_hypermap f0
D Hypermap.node_map
A |- (!H. ((node_map H) = (FST (SND (SND (tuple_hypermap H))))))
T c= * part cnode_map f0 * part cFST cSND cSND ctuple_hypermap f0
D Hypermap.face_map
A |- (!H. ((face_map H) = (SND (SND (SND (tuple_hypermap H))))))
T c= * part cface_map f0 * part cSND cSND cSND ctuple_hypermap f0
D Hypermap.hypermap_lemma
A |- (!H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I))))))
T c/\ cFINITE * part cdart f0 c/\ cpermutes * part cedge_map f0 * part cdart f0 c/\ cpermutes * part cnode_map f0 * part cdart f0 c/\ cpermutes * part cface_map f0 * part cdart f0 c= * * part co * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 part cI
D Hypermap.go_one_step
A |- (!y. (!H. (!x. ((((go_one_step H) x) y) = ((y = ((edge_map H) x)) \/ ((y = ((node_map H) x)) \/ (y = ((face_map H) x))))))))
T c= cgo_one_step f0 f1 f2 c\/ c= f2 cedge_map f0 f1 c\/ c= f2 cnode_map f0 f1 c= f2 cface_map f0 f1
D Hypermap.is_path
A |- (((((is_path H) p) (NUMERAL _0)) = T) /\ ((((is_path H) p) (SUC n)) = ((((is_path H) p) n) /\ (((go_one_step H) (p n)) (p (SUC n))))))
T c/\ c= cis_path f0 f1 cNUMERAL c_0 cT c= cis_path f0 f1 cSUC f2 c/\ cis_path f0 f1 f2 cgo_one_step f0 * f1 f2 * f1 cSUC f2
D Hypermap.inverse2_hypermap_maps
A |- (!H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))))
T c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0
D Tame_opposite.tuple_opposite_hypermap
A |- (!H. ((tuple_hypermap (opposite_hypermap H)) = ((dart H) , (((face_map H) o (node_map H)) , ((inverse (node_map H)) , (inverse (face_map H)))))))
T c= ctuple_hypermap copposite_hypermap f0 c, * part cdart f0 c, * * part co * part cface_map f0 * part cnode_map f0 c, * part cinverse * part cnode_map f0 * part cinverse * part cface_map f0
D Tame_opposite.truncated_path_lemma
A |- (!H. (!p. (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n))))))
T c==> c/\ cis_path f0 f1 f2 ! c==> c<= b0 f2 c= * f3 b0 * f1 b0 cis_path f0 f3 f2
+ ((q m) = (p n)) |- (((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (q m)) = (((face_map H) o (node_map H)) (p n)))) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) e')))) = (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) e'))))
T c==> c= * f0 f1 * f2 f3 c= c==> c==> c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c= co * part cface_map f4 * part cnode_map f4 * f0 f1 co * part cface_map f4 * part cnode_map f4 * f2 f3 c==> c==> c~ c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c= cnode_map f4 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f0 f1 cnode_map f4 * f2 f3 cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f3 f5 c==> c==> c~ c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c= cnode_map f4 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f0 f1 cnode_map f4 * f2 f3 cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f3 f5
- |- (((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (p n)) = (((face_map H) o (node_map H)) (p n)))) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) e')))) = (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) e'))))
T c= c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 co * part cface_map f1 * part cnode_map f1 * f2 f3 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f2 f3 f4 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f2 f3 f4 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 f4
+ |- (((!x. ((I x) = x)) ==> ((\x. ((I x) = x)) x)) = ((\x. ((I x) = x)) x))
T c= c==> ! c= cI b0 b0 * / c= cI b0 b0 f0 * / c= cI b0 b0 f0
+ ((q m) = (p n)) |- (((~ F) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND F) ((inverse (node_map H)) (p n))) e')))
T c==> c= * f0 f1 * f2 f3 c==> c==> c~ cF c= cedge_map f4 * f2 f3 f5 c= cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cedge_map f4 * f2 f3 cCOND cF cinverse * part cnode_map f4 * f2 f3 f5
+ ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- (((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) /\ ((((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n)))) = T))
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 c/\ c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 c= c= cedge_map f0 * f1 f2 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f1 f2 cT
+ (i <= m) |- ((i <= m) /\ ((q i) = (q i)))
T c==> c<= f0 f1 c/\ c<= f0 f1 c= * f2 f0 * f2 f0
+ ((q m) = (p n)), (((is_path (opposite_hypermap H)) q) m) |- ((((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))) m) /\ (((go_one_step (opposite_hypermap H)) (((COND (m <= m)) (q m)) (((COND (m = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) (((COND ((SUC m) <= m)) (q (SUC m))) (((COND ((SUC m) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))))
T c==> c= * f0 f1 * f2 f3 c==> cis_path copposite_hypermap f4 f0 f1 c/\ cis_path copposite_hypermap f4 / cCOND c<= b0 f1 * f0 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f3 cnode_map f4 * f2 f3 f1 cgo_one_step copposite_hypermap f4 cCOND c<= f1 f1 * f0 f1 cCOND c= f1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f3 cnode_map f4 * f2 f3 cCOND c<= cSUC f1 f1 * f0 cSUC f1 cCOND c= cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f3 cnode_map f4 * f2 f3
+ ((q m) = (p n)) |- ((~ T) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))))
T c==> c= * f0 f1 * f2 f3 c==> c~ cT c= cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cedge_map f4 * f2 f3 cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cedge_map f4 * f2 f3
+ ((q m) = (p n)) |- ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))
T c==> c= * f0 f1 * f2 f3 c= cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cedge_map f4 * f2 f3 cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cedge_map f4 * f2 f3
+ ((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) |- (((!x. (((inverse (face_map H)) ((face_map H) x)) = x)) ==> ((\x. (((inverse (face_map H)) ((face_map H) x)) = x)) x)) = ((\x. (((inverse (face_map H)) ((face_map H) x)) = x)) x))
T c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= c==> ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 * / c= cinverse * part cface_map f0 cface_map f0 b0 b0 f1 * / c= cinverse * part cface_map f0 cface_map f0 b0 b0 f1
+ |- ((m = n) = ((int_of_num m) = (int_of_num n)))
T c= c= f0 f1 c= cint_of_num f0 cint_of_num f1
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- ((((p (SUC n)) = ((edge_map H) (p n))) \/ (((p (SUC n)) = ((node_map H) (p n))) \/ ((p (SUC n)) = ((face_map H) (p n))))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c= * f0 f1 * f2 f3 c==> c= * f0 cNUMERAL c_0 * f2 cNUMERAL c_0 c==> cis_path copposite_hypermap f4 f0 f1 c==> c\/ c= * f2 cSUC f3 cedge_map f4 * f2 f3 c\/ c= * f2 cSUC f3 cnode_map f4 * f2 f3 c= * f2 cSUC f3 cface_map f4 * f2 f3 c? / c? / c/\ cis_path copposite_hypermap f4 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3
- ((m + (NUMERAL (BIT1 _0))) = m) |- (m = (m + (NUMERAL (BIT1 _0))))
T c==> c= c+ f0 cNUMERAL cBIT1 c_0 f0 c= f0 c+ f0 cNUMERAL cBIT1 c_0
+ |- ((\t'. (!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c<= cSUC cSUC f0 f0 f1 c==> c==> f1 c= * f2 cSUC cSUC f0 b0 c==> c==> c~ f1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f2 f0 cnode_map f3 * f4 f5 b1 c= cCOND c<= cSUC cSUC f0 f0 * f2 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f2 f0 cnode_map f3 * f4 f5 cCOND f1 b0 b1 f6
+ (((is_path (opposite_hypermap H)) q) m) |- (((?p'. ((((is_path (opposite_hypermap H)) p') m) /\ (!i. ((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (p' i)))))) ==> (((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))) m)) = (((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))) m))
T c==> cis_path copposite_hypermap f0 f1 f2 c= c==> c? / c/\ cis_path copposite_hypermap f0 b0 f2 ! c==> c<= b1 f2 c= * / cCOND c<= b2 f2 * f1 b2 cCOND c= b2 c+ f2 cNUMERAL cBIT1 c_0 co * part cface_map f0 * part cnode_map f0 * f3 f4 cnode_map f0 * f3 f4 b1 * b0 b1 cis_path copposite_hypermap f0 / cCOND c<= b0 f2 * f1 b0 cCOND c= b0 c+ f2 cNUMERAL cBIT1 c_0 co * part cface_map f0 * part cnode_map f0 * f3 f4 cnode_map f0 * f3 f4 f2 cis_path copposite_hypermap f0 / cCOND c<= b0 f2 * f1 b0 cCOND c= b0 c+ f2 cNUMERAL cBIT1 c_0 co * part cface_map f0 * part cnode_map f0 * f3 f4 cnode_map f0 * f3 f4 f2
+ |- ((\p. (!s. (((permutes p) s) ==> (((p o (inverse p)) = I) /\ (((inverse p) o p) = I))))) (node_map H))
T * / ! c==> cpermutes b0 b1 c/\ c= * * part co b0 * part cinverse b0 part cI c= * * part co * part cinverse b0 b0 part cI * part cnode_map f0
- |- ((((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))) = ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))))
T c= c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 c= cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 c= cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4
+ (!H. (!p. (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n)))))) |- (((?p. ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i)))))) ==> (((is_path H) q) n)) = T)
T c==> ! ! ! ! c==> c/\ cis_path b0 b1 b3 ! c==> c<= b4 b3 c= * b2 b4 * b1 b4 cis_path b0 b2 b3 c= c==> c? / c/\ cis_path f0 b0 f1 ! c==> c<= b1 f1 c= * f2 b1 * b0 b1 cis_path f0 f2 f1 cT
+ |- (((!g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 b1 c==> c==> c~ b0 c= cnode_map f2 * f3 f4 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND b0 b1 b2 * / ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 b1 c==> c==> c~ b0 c= cnode_map f2 * f3 f4 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND b0 b1 b2 f5 * / ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 b1 c==> c==> c~ b0 c= cnode_map f2 * f3 f4 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND b0 b1 b2 f5
+ ((q m) = (p n)) |- ((((i = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (q m)) = (((face_map H) o (node_map H)) (p n)))) ==> (((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) e')))) = (((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) e'))))
T c==> c= * f0 f1 * f2 f3 c= c==> c==> c= f4 c+ f1 cNUMERAL cBIT1 c_0 c= co * part cface_map f5 * part cnode_map f5 * f0 f1 co * part cface_map f5 * part cnode_map f5 * f2 f3 c==> c==> c~ c= f4 c+ f1 cNUMERAL cBIT1 c_0 c= cnode_map f5 * f2 f3 f6 c= cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f5 * part cnode_map f5 * f0 f1 cnode_map f5 * f2 f3 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f5 * part cnode_map f5 * f2 f3 f6 c==> c==> c~ c= f4 c+ f1 cNUMERAL cBIT1 c_0 c= cnode_map f5 * f2 f3 f6 c= cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f5 * part cnode_map f5 * f0 f1 cnode_map f5 * f2 f3 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f5 * part cnode_map f5 * f2 f3 f6
+ ((q m) = (p n)) |- (((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (q m)) = ((inverse (node_map H)) (p n)))) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e')))) = (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e'))))
T c==> c= * f0 f1 * f2 f3 c= c==> c==> c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f4 * f0 f1 cinverse * part cnode_map f4 * f2 f3 c==> c==> c~ c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c= cface_map f4 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cface_map f4 * f2 f3 cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 f5 c==> c==> c~ c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c= cface_map f4 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cface_map f4 * f2 f3 cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 f5
+ ((q m) = (p n)) |- ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))
T c==> c= * f0 f1 * f2 f3 c= cCOND c<= f4 f1 * f0 f4 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f0 f1 cface_map f5 * f2 f3 cCOND c<= f4 f1 * f0 f4 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f2 f3 cface_map f5 * f2 f3
+ |- ((?p. ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i)))))) ==> (((is_path H) q) n))
T c==> c? / c/\ cis_path f0 b0 f1 ! c==> c<= b1 f1 c= * f2 b1 * b0 b1 cis_path f0 f2 f1
+ ((!x. (((node_map H) ((inverse (node_map H)) x)) = x)) /\ (!x. (((inverse (node_map H)) ((node_map H) x)) = x))) |- (((!x. (((node_map H) ((inverse (node_map H)) x)) = x)) ==> ((\x. (((node_map H) ((inverse (node_map H)) x)) = x)) x)) = ((\x. (((node_map H) ((inverse (node_map H)) x)) = x)) x))
T c==> c/\ ! c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 ! c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 c= c==> ! c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 * / c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 f1 * / c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 f1
+ |- ((((inverse (node_map H)) (p n)) = ((FST (SND (SND (tuple_hypermap (opposite_hypermap H))))) (p n))) = (((inverse (node_map H)) (p n)) = ((node_map (opposite_hypermap H)) (p n))))
T c= c= cinverse * part cnode_map f0 * f1 f2 cFST cSND cSND ctuple_hypermap copposite_hypermap f0 * f1 f2 c= cinverse * part cnode_map f0 * f1 f2 cnode_map copposite_hypermap f0 * f1 f2
+ ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) |- (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) /\ ((!H. (!p. (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n)))))) ==> (((is_path H) q) n)))
T c==> c/\ cis_path f0 f1 f2 ! c==> c<= b0 f2 c= * f3 b0 * f1 b0 c/\ c/\ cis_path f0 f1 f2 ! c==> c<= b0 f2 c= * f3 b0 * f1 b0 c==> ! ! ! ! c==> c/\ cis_path b0 b1 b3 ! c==> c<= b4 b3 c= * b2 b4 * b1 b4 cis_path b0 b2 b3 cis_path f0 f3 f2
+ ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- (((p (SUC n)) = ((edge_map H) (p n))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c= * f0 f1 * f2 f3 c==> c= * f0 cNUMERAL c_0 * f2 cNUMERAL c_0 c==> cis_path copposite_hypermap f4 f0 f1 c==> c= * f2 cSUC f3 cedge_map f4 * f2 f3 c? / c? / c/\ cis_path copposite_hypermap f4 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3
+ |- ((((~ F) ==> (((edge_map H) (p n)) = ((edge_map H) (p n)))) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND F) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))) = ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND F) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))))
T c= c==> c==> c~ cF c= cedge_map f0 * f1 f2 cedge_map f0 * f1 f2 c= cCOND c= cSUC cSUC f3 c+ f3 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f0 * f4 f3 cedge_map f0 * f1 f2 cCOND cF cinverse * part cnode_map f0 * f1 f2 cedge_map f0 * f1 f2 c= cCOND c= cSUC cSUC f3 c+ f3 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f0 * f4 f3 cedge_map f0 * f1 f2 cCOND cF cinverse * part cnode_map f0 * f1 f2 cedge_map f0 * f1 f2
+ ((q m) = (p n)) |- (((~ F) ==> (((face_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND F) ((inverse (node_map H)) (p n))) e')))
T c==> c= * f0 f1 * f2 f3 c==> c==> c~ cF c= cface_map f4 * f2 f3 f5 c= cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cface_map f4 * f2 f3 cCOND cF cinverse * part cnode_map f4 * f2 f3 f5
+ ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- (((p (SUC n)) = ((face_map H) (p n))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c= * f0 f1 * f2 f3 c==> c= * f0 cNUMERAL c_0 * f2 cNUMERAL c_0 c==> cis_path copposite_hypermap f4 f0 f1 c==> c= * f2 cSUC f3 cface_map f4 * f2 f3 c? / c? / c/\ cis_path copposite_hypermap f4 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3
- |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308610)) /\ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _8308610)) \/ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_int _8308610)) \/ ((((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ (((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0)))))))))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 c\/ c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((edge_map H) (p n)) = ((edge_map (opposite_hypermap H)) ((inverse (node_map H)) (p n)))) \/ ((((edge_map H) (p n)) = ((node_map (opposite_hypermap H)) ((inverse (node_map H)) (p n)))) \/ (((edge_map H) (p n)) = ((face_map (opposite_hypermap H)) ((inverse (node_map H)) (p n))))))
T c\/ c= cedge_map f0 * f1 f2 cedge_map copposite_hypermap f0 cinverse * part cnode_map f0 * f1 f2 c\/ c= cedge_map f0 * f1 f2 cnode_map copposite_hypermap f0 cinverse * part cnode_map f0 * f1 f2 c= cedge_map f0 * f1 f2 cface_map copposite_hypermap f0 cinverse * part cnode_map f0 * f1 f2
+ ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((p (SUC n)) = ((edge_map H) (p n))) \/ (((p (SUC n)) = ((node_map H) (p n))) \/ ((p (SUC n)) = ((face_map H) (p n))))), (((is_path (opposite_hypermap H)) q) m) |- ((((p (SUC n)) = ((edge_map H) (p n))) \/ (((p (SUC n)) = ((node_map H) (p n))) \/ ((p (SUC n)) = ((face_map H) (p n))))) /\ (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c= * f0 f1 * f2 f3 c==> c= * f0 cNUMERAL c_0 * f2 cNUMERAL c_0 c==> c\/ c= * f2 cSUC f3 cedge_map f4 * f2 f3 c\/ c= * f2 cSUC f3 cnode_map f4 * f2 f3 c= * f2 cSUC f3 cface_map f4 * f2 f3 c==> cis_path copposite_hypermap f4 f0 f1 c/\ c\/ c= * f2 cSUC f3 cedge_map f4 * f2 f3 c\/ c= * f2 cSUC f3 cnode_map f4 * f2 f3 c= * f2 cSUC f3 cface_map f4 * f2 f3 c? / c? / c/\ cis_path copposite_hypermap f4 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3
+ |- ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))
T c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((~ ((int_of_num m) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))))) = (~ (m = (m + (NUMERAL (BIT1 _0))))))
T c= c~ c= cint_of_num f0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c~ c= f0 c+ f0 cNUMERAL cBIT1 c_0
+ |- (((((is_path (opposite_hypermap H)) p) (NUMERAL _0)) /\ (((p (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((p (NUMERAL _0)) = (p (NUMERAL _0))))) = ((\m. ((((is_path (opposite_hypermap H)) p) m) /\ (((p (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((p m) = (p (NUMERAL _0)))))) (NUMERAL _0)))
T c= c/\ cis_path copposite_hypermap f0 f1 cNUMERAL c_0 c/\ c= * f1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * f1 cNUMERAL c_0 * f1 cNUMERAL c_0 * / c/\ cis_path copposite_hypermap f0 f1 b0 c/\ c= * f1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * f1 b0 * f1 cNUMERAL c_0 cNUMERAL c_0
- ((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) |- ((\x. (((face_map H) ((inverse (face_map H)) x)) = x)) x)
T c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 * / c= cface_map f0 cinverse * part cface_map f0 b0 b0 f1
+ |- (((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) e')))
T c==> c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cnode_map f2 * f3 f4 f5 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 f5
+ ((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))))) |- (((((is_path H) p) n) /\ (((go_one_step H) (p n)) (p (SUC n)))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c==> cis_path f0 f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 c==> c/\ cis_path f0 f1 f2 cgo_one_step f0 * f1 f2 * f1 cSUC f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2
+ |- ((\t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= co * part cface_map f3 * part cnode_map f3 * f4 f1 b0 c==> c==> c~ f2 c= cnode_map f3 * f5 f6 b1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f1 cnode_map f3 * f5 f6 cCOND f2 b0 b1 f7
+ |- ((((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = ((node_map H) (p n)))) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) = ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))
T c= c==> c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f5 f1 cnode_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f5 f1 cnode_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4
+ |- ((F /\ T) = F)
T c= c/\ cF cT cF
+ (((is_path (opposite_hypermap H)) q) m) |- (((?p'. ((((is_path (opposite_hypermap H)) p') m) /\ (!i. ((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (p' i)))))) ==> (((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))) m)) = (((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))) m))
T c==> cis_path copposite_hypermap f0 f1 f2 c= c==> c? / c/\ cis_path copposite_hypermap f0 b0 f2 ! c==> c<= b1 f2 c= * / cCOND c<= b2 f2 * f1 b2 cCOND c= b2 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f0 * f3 f4 cface_map f0 * f3 f4 b1 * b0 b1 cis_path copposite_hypermap f0 / cCOND c<= b0 f2 * f1 b0 cCOND c= b0 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f0 * f3 f4 cface_map f0 * f3 f4 f2 cis_path copposite_hypermap f0 / cCOND c<= b0 f2 * f1 b0 cCOND c= b0 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f0 * f3 f4 cface_map f0 * f3 f4 f2
+ ((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) |- (((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) /\ ((((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n))))) = T))
T c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c/\ c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= c= cnode_map f0 * f1 f2 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f1 f2 cT
+ |- (((!g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f2 * f3 f4 b1 c==> c==> c~ b0 c= cface_map f2 * f3 f4 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND b0 b1 b2 * / ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f2 * f3 f4 b1 c==> c==> c~ b0 c= cface_map f2 * f3 f4 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND b0 b1 b2 f5 * / ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f2 * f3 f4 b1 c==> c==> c~ b0 c= cface_map f2 * f3 f4 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND b0 b1 b2 f5
+ |- (((((is_path H) p) (NUMERAL _0)) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (NUMERAL _0)))))))) /\ (!n. (((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))))) ==> ((((is_path H) p) (SUC n)) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))))))
T c/\ c==> cis_path f0 f1 cNUMERAL c_0 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cNUMERAL c_0 ! c==> c==> cis_path f0 f1 b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 b0 c==> cis_path f0 f1 cSUC b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 cSUC b0
+ |- ((T /\ F) = F)
T c= c/\ cT cF cF
+ |- ((~ F) ==> (((edge_map H) (p n)) = ((edge_map H) (p n))))
T c==> c~ cF c= cedge_map f0 * f1 f2 cedge_map f0 * f1 f2
+ |- ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f1 * part cnode_map f1 * f2 f0 b1 c==> c==> c~ b0 c= cnode_map f1 * f3 f4 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f0 cnode_map f1 * f3 f4 cCOND b0 b1 b2 f5
+ |- ((((i <= m) = (i <= m)) ==> (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND (i <= m)) t') e'))))) = (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND (i <= m)) t') e')))))
T c= c==> c= c<= f0 f1 c<= f0 f1 c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f1 cnode_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f1 cnode_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7 c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f1 cnode_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f1 cnode_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7
- (~ (i = (m + (NUMERAL (BIT1 _0))))) |- (~ ((m + (NUMERAL (BIT1 _0))) = i))
T c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c~ c= c+ f1 cNUMERAL cBIT1 c_0 f0
+ |- (((!e'. ((((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))) ==> ((\e'. ((((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))) e')) = ((\e'. ((((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 f4 c==> c==> c~ f1 c= cface_map f2 * f5 f6 b0 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f5 f6 cCOND f1 f4 b0 * / c==> c= c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 f4 c==> c==> c~ f1 c= cface_map f2 * f5 f6 b0 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f5 f6 cCOND f1 f4 b0 f7 * / c==> c= c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 f4 c==> c==> c~ f1 c= cface_map f2 * f5 f6 b0 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f5 f6 cCOND f1 f4 b0 f7
+ |- ((\g'. (!t'. (!e'. ((((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f0 b1 c==> c==> c~ b0 c= cedge_map f1 * f3 f4 b2 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f0 cedge_map f1 * f3 f4 cCOND b0 b1 b2 f5
+ |- (((!g'. (!t'. (!e'. ((((NUMERAL _0) <= m) = g') ==> ((g' ==> ((q (NUMERAL _0)) = t')) ==> (((~ g') ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((NUMERAL _0) <= m) = g') ==> ((g' ==> ((q (NUMERAL _0)) = t')) ==> (((~ g') ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((NUMERAL _0) <= m) = g') ==> ((g' ==> ((q (NUMERAL _0)) = t')) ==> (((~ g') ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c<= cNUMERAL c_0 f0 b0 c==> c==> b0 c= * f1 cNUMERAL c_0 b1 c==> c==> c~ b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cedge_map f2 * f3 f4 b2 c= cCOND c<= cNUMERAL c_0 f0 * f1 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cedge_map f2 * f3 f4 cCOND b0 b1 b2 * / ! ! c==> c= c<= cNUMERAL c_0 f0 b0 c==> c==> b0 c= * f1 cNUMERAL c_0 b1 c==> c==> c~ b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cedge_map f2 * f3 f4 b2 c= cCOND c<= cNUMERAL c_0 f0 * f1 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cedge_map f2 * f3 f4 cCOND b0 b1 b2 f5 * / ! ! c==> c= c<= cNUMERAL c_0 f0 b0 c==> c==> b0 c= * f1 cNUMERAL c_0 b1 c==> c==> c~ b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cedge_map f2 * f3 f4 b2 c= cCOND c<= cNUMERAL c_0 f0 * f1 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cedge_map f2 * f3 f4 cCOND b0 b1 b2 f5
+ |- ((((node_map H) (p n)) = ((SND (SND (SND (tuple_hypermap (opposite_hypermap H))))) (((SND (SND (SND (tuple_hypermap H)))) o (node_map H)) (p n)))) = (((node_map H) (p n)) = ((face_map (opposite_hypermap H)) (((face_map H) o (node_map H)) (p n)))))
T c= c= cnode_map f0 * f1 f2 cSND cSND cSND ctuple_hypermap copposite_hypermap f0 co * part cSND cSND cSND ctuple_hypermap f0 * part cnode_map f0 * f1 f2 c= cnode_map f0 * f1 f2 cface_map copposite_hypermap f0 co * part cface_map f0 * part cnode_map f0 * f1 f2
+ |- (((!x. (((node_map H) ((inverse (node_map H)) x)) = x)) /\ (!x. (((inverse (node_map H)) ((node_map H) x)) = x))) ==> (((face_map H) (p n)) = ((face_map H) ((node_map H) ((inverse (node_map H)) (p n))))))
T c==> c/\ ! c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 ! c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 c= cface_map f0 * f1 f2 cface_map f0 cnode_map f0 cinverse * part cnode_map f0 * f1 f2
+ |- (((!q'. (((((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))) = p') ==> ((p' ==> ((((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n)))) = q')) ==> (((((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))) ==> (((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n))))) = (p' ==> q'))))) ==> ((\q'. (((((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))) = p') ==> ((p' ==> ((((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n)))) = q')) ==> (((((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))) ==> (((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n))))) = (p' ==> q'))))) q')) = ((\q'. (((((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))) = p') ==> ((p' ==> ((((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n)))) = q')) ==> (((((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))) ==> (((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n))))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0 f1 c==> c==> f1 c= c= cedge_map f0 * f2 f3 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f2 f3 b0 c= c==> c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0 c= cedge_map f0 * f2 f3 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f2 f3 c==> f1 b0 * / c==> c= c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0 f1 c==> c==> f1 c= c= cedge_map f0 * f2 f3 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f2 f3 b0 c= c==> c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0 c= cedge_map f0 * f2 f3 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f2 f3 c==> f1 b0 f4 * / c==> c= c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0 f1 c==> c==> f1 c= c= cedge_map f0 * f2 f3 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f2 f3 b0 c= c==> c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0 c= cedge_map f0 * f2 f3 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f2 f3 c==> f1 b0 f4
- |- ((~ (x = y)) = (((int_le ((int_add x) (int_of_num (NUMERAL (BIT1 _0))))) y) \/ ((int_le ((int_add y) (int_of_num (NUMERAL (BIT1 _0))))) x)))
T c= c~ c= f0 f1 c\/ cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f1 cint_le cint_add f1 cint_of_num cNUMERAL cBIT1 c_0 f0
+ |- (((!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND g') t') e')))))) ==> ((\e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND g') t') e')))))) e')) = ((\e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c<= cSUC cSUC f0 f0 f1 c==> c==> f1 c= * f2 cSUC cSUC f0 f3 c==> c==> c~ f1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f0 cnode_map f4 * f5 f6 b0 c= cCOND c<= cSUC cSUC f0 f0 * f2 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f0 cnode_map f4 * f5 f6 cCOND f1 f3 b0 * / c==> c= c<= cSUC cSUC f0 f0 f1 c==> c==> f1 c= * f2 cSUC cSUC f0 f3 c==> c==> c~ f1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f0 cnode_map f4 * f5 f6 b0 c= cCOND c<= cSUC cSUC f0 f0 * f2 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f0 cnode_map f4 * f5 f6 cCOND f1 f3 b0 f7 * / c==> c= c<= cSUC cSUC f0 f0 f1 c==> c==> f1 c= * f2 cSUC cSUC f0 f3 c==> c==> c~ f1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f0 cnode_map f4 * f5 f6 b0 c= cCOND c<= cSUC cSUC f0 f0 * f2 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f0 cnode_map f4 * f5 f6 cCOND f1 f3 b0 f7
+ ((p (SUC n)) = ((edge_map H) (p n))), ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- ((\q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))))))
T c==> c= * f0 cSUC f1 cedge_map f2 * f0 f1 c==> c= * f3 f4 * f0 f1 c==> c= * f3 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> cis_path copposite_hypermap f2 f3 f4 * / c? / c/\ cis_path copposite_hypermap f2 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f0 cNUMERAL c_0 c= * b0 b1 * f0 cSUC f1 / cCOND c<= b0 f4 * f3 b0 cCOND c= b0 c+ f4 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f0 f1
+ ((q m) = (p n)) |- ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))
T c==> c= * f0 f1 * f2 f3 c= cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f0 f1 cedge_map f5 * f2 f3 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f2 f3 cedge_map f5 * f2 f3
+ (i <= m) |- ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND T) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))
T c==> c<= f0 f1 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 cCOND cT * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5
+ |- (((!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f5 b0 c==> c==> c~ f2 c= cface_map f3 * f4 f5 b1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND f2 b0 b1 * / ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f5 b0 c==> c==> c~ f2 c= cface_map f3 * f4 f5 b1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND f2 b0 b1 f6 * / ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f5 b0 c==> c==> c~ f2 c= cface_map f3 * f4 f5 b1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND f2 b0 b1 f6
+ ((q m) = (p n)) |- (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e')))
T c==> c= * f0 f1 * f2 f3 c==> c==> c~ c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c= cedge_map f4 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cedge_map f4 * f2 f3 cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 f5
- |- ((((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = ((face_map H) (p n)))) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) = ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))
T c= c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cface_map f1 * f2 f3 cface_map f1 * f2 f3 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3
+ |- (((!t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 cCOND f2 b0 b1 * / ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 cCOND f2 b0 b1 f7 * / ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 cCOND f2 b0 b1 f7
+ |- (((!q'. (((i <= m) = p') ==> ((p' ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i)) = q')) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i))) = (p' ==> q'))))) ==> ((\q'. (((i <= m) = p') ==> ((p' ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i)) = q')) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i))) = (p' ==> q'))))) q')) = ((\q'. (((i <= m) = p') ==> ((p' ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i)) = q')) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i))) = (p' ==> q'))))) q'))
T c= c==> ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= c= * / cCOND c<= b1 f1 * f3 b1 cCOND c= b1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f0 * f3 f0 b0 c= c==> c<= f0 f1 c= * / cCOND c<= b1 f1 * f3 b1 cCOND c= b1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f0 * f3 f0 c==> f2 b0 * / c==> c= c<= f0 f1 f2 c==> c==> f2 c= c= * / cCOND c<= b1 f1 * f3 b1 cCOND c= b1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f0 * f3 f0 b0 c= c==> c<= f0 f1 c= * / cCOND c<= b1 f1 * f3 b1 cCOND c= b1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f0 * f3 f0 c==> f2 b0 f7 * / c==> c= c<= f0 f1 f2 c==> c==> f2 c= c= * / cCOND c<= b1 f1 * f3 b1 cCOND c= b1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f0 * f3 f0 b0 c= c==> c<= f0 f1 c= * / cCOND c<= b1 f1 * f3 b1 cCOND c= b1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f0 * f3 f0 c==> f2 b0 f7
+ ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- (((p (SUC n)) = ((node_map H) (p n))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c= * f0 f1 * f2 f3 c==> c= * f0 cNUMERAL c_0 * f2 cNUMERAL c_0 c==> cis_path copposite_hypermap f4 f0 f1 c==> c= * f2 cSUC f3 cnode_map f4 * f2 f3 c? / c? / c/\ cis_path copposite_hypermap f4 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3
+ ((q m) = (p n)) |- ((((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))) = ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))))
T c==> c= * f0 f1 * f2 f3 c= c==> c==> c~ c<= f4 f1 c= cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f0 f1 cface_map f5 * f2 f3 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f2 f3 cface_map f5 * f2 f3 c= cCOND c<= f4 f1 * f0 f4 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f0 f1 cface_map f5 * f2 f3 cCOND c<= f4 f1 * f0 f4 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f2 f3 cface_map f5 * f2 f3 c= cCOND c<= f4 f1 * f0 f4 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f0 f1 cface_map f5 * f2 f3 cCOND c<= f4 f1 * f0 f4 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f2 f3 cface_map f5 * f2 f3
+ ((q m) = (p n)), (i = (m + (NUMERAL (BIT1 _0)))) |- ((i = (m + (NUMERAL (BIT1 _0)))) /\ ((((face_map H) o (node_map H)) (q m)) = (((face_map H) o (node_map H)) (p n))))
T c==> c= * f0 f1 * f2 f3 c==> c= f4 c+ f1 cNUMERAL cBIT1 c_0 c/\ c= f4 c+ f1 cNUMERAL cBIT1 c_0 c= co * part cface_map f5 * part cnode_map f5 * f0 f1 co * part cface_map f5 * part cnode_map f5 * f2 f3
+ ((q m) = (p n)) |- ((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))
T c==> c= * f0 f1 * f2 f3 c==> c~ c<= f4 f1 c= cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f0 f1 cface_map f5 * f2 f3 cCOND c= f4 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f2 f3 cface_map f5 * f2 f3
+ |- ((\g'. (!t'. (!e'. ((((NUMERAL _0) <= m) = g') ==> ((g' ==> ((q (NUMERAL _0)) = t')) ==> (((~ g') ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c<= cNUMERAL c_0 f0 b0 c==> c==> b0 c= * f1 cNUMERAL c_0 b1 c==> c==> c~ b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 b2 c= cCOND c<= cNUMERAL c_0 f0 * f1 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 cCOND b0 b1 b2 f5
+ |- ((((face_map H) o (node_map H)) (p n)) = ((edge_map (opposite_hypermap H)) (p n)))
T c= co * part cface_map f0 * part cnode_map f0 * f1 f2 cedge_map copposite_hypermap f0 * f1 f2
+ |- ((((((is_path H) p) (NUMERAL _0)) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (NUMERAL _0)))))))) /\ (!n. (((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))))) ==> ((((is_path H) p) (SUC n)) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))))) ==> (!n. ((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))))))
T c==> c/\ c==> cis_path f0 f1 cNUMERAL c_0 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cNUMERAL c_0 ! c==> c==> cis_path f0 f1 b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 b0 c==> cis_path f0 f1 cSUC b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 cSUC b0 ! c==> cis_path f0 f1 b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 b0
+ (((is_path (opposite_hypermap H)) q) m) |- ((((is_path (opposite_hypermap H)) q) m) /\ (!i. ((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i)))))
T c==> cis_path copposite_hypermap f0 f1 f2 c/\ cis_path copposite_hypermap f0 f1 f2 ! c==> c<= b0 f2 c= * / cCOND c<= b1 f2 * f1 b1 cCOND c= b1 c+ f2 cNUMERAL cBIT1 c_0 co * part cface_map f0 * part cnode_map f0 * f3 f4 cnode_map f0 * f3 f4 b0 * f1 b0
- (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))), (((go_one_step H) (p n)) (p (SUC n))) |- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))
T c==> c? / c/\ cis_path copposite_hypermap f0 f1 b0 c/\ c= * f1 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * f1 b0 * f2 f3 c==> cgo_one_step f0 * f2 f3 * f2 cSUC f3 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3
- ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- (((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) /\ F)
T c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
+ |- ((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = ((node_map H) (p n))))
T c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cnode_map f2 * f3 f4 cnode_map f2 * f3 f4
- (~ (i = (m + (NUMERAL (BIT1 _0))))) |- (((m + (NUMERAL (BIT1 _0))) = i) = F)
T c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= c= c+ f1 cNUMERAL cBIT1 c_0 f0 cF
- |- (~ ((m + (NUMERAL (BIT1 _0))) = (SUC (SUC m))))
T c~ c= c+ f0 cNUMERAL cBIT1 c_0 cSUC cSUC f0
+ |- (((real_neg (real_of_num m)) = (real_of_num n)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))
T c= c= creal_neg creal_of_num f0 creal_of_num f1 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
+ |- (((!g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f2 * f3 f1 b1 c==> c==> c~ b0 c= cedge_map f2 * f4 f5 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f1 cedge_map f2 * f4 f5 cCOND b0 b1 b2 * / ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f2 * f3 f1 b1 c==> c==> c~ b0 c= cedge_map f2 * f4 f5 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f1 cedge_map f2 * f4 f5 cCOND b0 b1 b2 f6 * / ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f2 * f3 f1 b1 c==> c==> c~ b0 c= cedge_map f2 * f4 f5 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f1 cedge_map f2 * f4 f5 cCOND b0 b1 b2 f6
- |- ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))
T c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cface_map f2 * f3 f4 f6 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND f1 f5 f6
+ |- ((\g'. (!t'. (!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c<= cSUC cSUC f0 f0 b0 c==> c==> b0 c= * f1 cSUC cSUC f0 b1 c==> c==> c~ b0 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 b2 c= cCOND c<= cSUC cSUC f0 f0 * f1 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 cCOND b0 b1 b2 f5
+ |- ((((!x. (((node_map H) ((inverse (node_map H)) x)) = x)) /\ (!x. (((inverse (node_map H)) ((node_map H) x)) = x))) ==> (((face_map H) (p n)) = ((face_map H) ((node_map H) ((inverse (node_map H)) (p n)))))) = ((((permutes (node_map H)) (dart H)) ==> ((((node_map H) o (inverse (node_map H))) = I) /\ (((inverse (node_map H)) o (node_map H)) = I))) ==> (((face_map H) (p n)) = (((face_map H) o (node_map H)) ((inverse (node_map H)) (p n))))))
T c= c==> c/\ ! c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 ! c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 c= cface_map f0 * f1 f2 cface_map f0 cnode_map f0 cinverse * part cnode_map f0 * f1 f2 c==> c==> cpermutes * part cnode_map f0 * part cdart f0 c/\ c= * * part co * part cnode_map f0 * part cinverse * part cnode_map f0 part cI c= * * part co * part cinverse * part cnode_map f0 * part cnode_map f0 part cI c= cface_map f0 * f1 f2 co * part cface_map f0 * part cnode_map f0 cinverse * part cnode_map f0 * f1 f2
- |- ((((i <= m) = (i <= m)) ==> (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND (i <= m)) t') e'))))) = (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND (i <= m)) t') e')))))
T c= c==> c= c<= f0 f1 c<= f0 f1 c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7 c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7
+ ((q m) = (p n)) |- ((i = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (q m)) = (((face_map H) o (node_map H)) (p n))))
T c==> c= * f0 f1 * f2 f3 c==> c= f4 c+ f1 cNUMERAL cBIT1 c_0 c= co * part cface_map f5 * part cnode_map f5 * f0 f1 co * part cface_map f5 * part cnode_map f5 * f2 f3
+ |- ((m = (m + (NUMERAL (BIT1 _0)))) = F)
T c= c= f0 c+ f0 cNUMERAL cBIT1 c_0 cF
+ |- (((!g'. (!t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c<= f0 f1 b0 c==> c==> b0 c= * f2 f0 b1 c==> c==> c~ b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cedge_map f3 * f4 f5 b2 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cedge_map f3 * f4 f5 cCOND b0 b1 b2 * / ! ! c==> c= c<= f0 f1 b0 c==> c==> b0 c= * f2 f0 b1 c==> c==> c~ b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cedge_map f3 * f4 f5 b2 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cedge_map f3 * f4 f5 cCOND b0 b1 b2 f6 * / ! ! c==> c= c<= f0 f1 b0 c==> c==> b0 c= * f2 f0 b1 c==> c==> c~ b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cedge_map f3 * f4 f5 b2 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cedge_map f3 * f4 f5 cCOND b0 b1 b2 f6
- |- ((((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308612)) /\ (((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))))) = (~ (((int_le (int_of_num (NUMERAL _0))) _8308612) ==> (((int_add _8308612) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add _8308612) (int_of_num (NUMERAL (BIT1 _0))))))))
T c= c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c= cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0
- |- (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND (i <= m)) t') e'))))
T c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7
- |- (((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (p n)) = ((inverse (node_map H)) (p n)))) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e')))) = (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e'))))
T c= c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 cinverse * part cnode_map f1 * f2 f3 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cedge_map f1 * f2 f3 f4 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cedge_map f1 * f2 f3 f4 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 f4
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((~ ((SUC m) <= m)) ==> (((SUC m) <= m) = F)) = (((SUC m) <= m) = F))
T c= c==> c~ c<= cSUC f0 f0 c= c<= cSUC f0 f0 cF c= c<= cSUC f0 f0 cF
+ |- ((((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))
T c==> c= c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 f4 c==> c==> c~ f1 c= cface_map f2 * f5 f6 f7 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f5 f6 cCOND f1 f4 f7
+ |- ((((i <= m) = (i <= m)) ==> (((i <= m) ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i)) = q')) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i))) = ((i <= m) ==> q')))) = (((i <= m) ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i)) = q')) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i))) = ((i <= m) ==> q'))))
T c= c==> c= c<= f0 f1 c<= f0 f1 c==> c==> c<= f0 f1 c= c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f0 * f2 f0 f6 c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f0 * f2 f0 c==> c<= f0 f1 f6 c==> c==> c<= f0 f1 c= c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f0 * f2 f0 f6 c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f0 * f2 f0 c==> c<= f0 f1 f6
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
+ |- ((\t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 cCOND f2 b0 b1 f7
+ ((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))))), (((go_one_step H) (p n)) (p (SUC n))), (((is_path H) p) n) |- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))
T c==> c==> cis_path f0 f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 c==> cgo_one_step f0 * f1 f2 * f1 cSUC f2 c==> cis_path f0 f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2
+ |- (((~ F) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))) = (((COND F) (q (SUC (SUC m)))) e')))
T c==> c==> c~ cF c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f0 cedge_map f1 * f3 f4 f5 c= cCOND c<= cSUC cSUC f0 f0 * f2 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f0 cedge_map f1 * f3 f4 cCOND cF * f2 cSUC cSUC f0 f5
+ |- (T = ((((is_path (opposite_hypermap H)) p) (NUMERAL _0)) /\ (((p (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((p (NUMERAL _0)) = (p (NUMERAL _0))))))
T c= cT c/\ cis_path copposite_hypermap f0 f1 cNUMERAL c_0 c/\ c= * f1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * f1 cNUMERAL c_0 * f1 cNUMERAL c_0
+ ((p (SUC n)) = ((edge_map H) (p n))), ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- (?m'. ((((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))))) m') /\ ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))))) (NUMERAL _0)) = (p (NUMERAL _0))) /\ (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))))) m') = (p (SUC n))))))
T c==> c= * f0 cSUC f1 cedge_map f2 * f0 f1 c==> c= * f3 f4 * f0 f1 c==> c= * f3 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> cis_path copposite_hypermap f2 f3 f4 c? / c/\ cis_path copposite_hypermap f2 / cCOND c<= b1 f4 * f3 b1 cCOND c= b1 c+ f4 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f0 f1 b0 c/\ c= * / cCOND c<= b1 f4 * f3 b1 cCOND c= b1 c+ f4 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f0 f1 cNUMERAL c_0 * f0 cNUMERAL c_0 c= * / cCOND c<= b1 f4 * f3 b1 cCOND c= b1 c+ f4 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f0 f1 b0 * f0 cSUC f1
+ (~ T), ((q m) = (p n)) |- ((~ T) /\ ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))))
T c==> c~ cT c==> c= * f0 f1 * f2 f3 c/\ c~ cT c= cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cedge_map f4 * f2 f3 cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cedge_map f4 * f2 f3
+ ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((p (SUC n)) = ((node_map H) (p n))) \/ ((p (SUC n)) = ((face_map H) (p n)))), (((is_path (opposite_hypermap H)) q) m) |- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))
T c==> c= * f0 f1 * f2 f3 c==> c= * f0 cNUMERAL c_0 * f2 cNUMERAL c_0 c==> c\/ c= * f2 cSUC f3 cnode_map f4 * f2 f3 c= * f2 cSUC f3 cface_map f4 * f2 f3 c==> cis_path copposite_hypermap f4 f0 f1 c? / c? / c/\ cis_path copposite_hypermap f4 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3
+ |- (((((((is_path H) p) (NUMERAL _0)) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (NUMERAL _0)))))))) /\ (!n. (((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))))) ==> ((((is_path H) p) (SUC n)) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))))) ==> (!n. ((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))))))) = (!n. ((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))))))
T c= c==> c/\ c==> cis_path f0 f1 cNUMERAL c_0 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cNUMERAL c_0 ! c==> c==> cis_path f0 f1 b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 b0 c==> cis_path f0 f1 cSUC b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 cSUC b0 ! c==> cis_path f0 f1 b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 b0 ! c==> cis_path f0 f1 b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 b0
+ |- (((!s. (((permutes (face_map H)) s) ==> ((((face_map H) o (inverse (face_map H))) = I) /\ (((inverse (face_map H)) o (face_map H)) = I)))) ==> ((\s. (((permutes (face_map H)) s) ==> ((((face_map H) o (inverse (face_map H))) = I) /\ (((inverse (face_map H)) o (face_map H)) = I)))) (dart H))) = ((\s. (((permutes (face_map H)) s) ==> ((((face_map H) o (inverse (face_map H))) = I) /\ (((inverse (face_map H)) o (face_map H)) = I)))) (dart H)))
T c= c==> ! c==> cpermutes * part cface_map f0 b0 c/\ c= * * part co * part cface_map f0 * part cinverse * part cface_map f0 part cI c= * * part co * part cinverse * part cface_map f0 * part cface_map f0 part cI * / c==> cpermutes * part cface_map f0 b0 c/\ c= * * part co * part cface_map f0 * part cinverse * part cface_map f0 part cI c= * * part co * part cinverse * part cface_map f0 * part cface_map f0 part cI * part cdart f0 * / c==> cpermutes * part cface_map f0 b0 c/\ c= * * part co * part cface_map f0 * part cinverse * part cface_map f0 part cI c= * * part co * part cinverse * part cface_map f0 * part cface_map f0 part cI * part cdart f0
+ |- (((!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f1 b0 c==> c==> c~ f2 c= cface_map f3 * f5 f6 b1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f1 cface_map f3 * f5 f6 cCOND f2 b0 b1 * / ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f1 b0 c==> c==> c~ f2 c= cface_map f3 * f5 f6 b1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f1 cface_map f3 * f5 f6 cCOND f2 b0 b1 f7 * / ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f1 b0 c==> c==> c~ f2 c= cface_map f3 * f5 f6 b1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f1 cface_map f3 * f5 f6 cCOND f2 b0 b1 f7
+ (((is_path (opposite_hypermap H)) q) m) |- (((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))) m)
T c==> cis_path copposite_hypermap f0 f1 f2 cis_path copposite_hypermap f0 / cCOND c<= b0 f2 * f1 b0 cCOND c= b0 c+ f2 cNUMERAL cBIT1 c_0 co * part cface_map f0 * part cnode_map f0 * f3 f4 cnode_map f0 * f3 f4 f2
- ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x))))
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0
+ |- ((\t'. (!e'. ((((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 b0 c==> c==> c~ f1 c= cedge_map f2 * f4 f5 b1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cedge_map f2 * f4 f5 cCOND f1 b0 b1 f6
+ |- ((((i = (m + (NUMERAL (BIT1 _0)))) = (i = (m + (NUMERAL (BIT1 _0))))) ==> (((i = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) t') e'))))) = (((i = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) t') e')))))
T c= c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= f0 c+ f1 cNUMERAL cBIT1 c_0 c==> c==> c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f2 * f3 f1 f4 c==> c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cedge_map f2 * f5 f6 f7 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f1 cedge_map f2 * f5 f6 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 f4 f7 c==> c==> c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f2 * f3 f1 f4 c==> c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cedge_map f2 * f5 f6 f7 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f1 cedge_map f2 * f5 f6 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 f4 f7
+ |- ((\e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))) e')
T * / c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f5 f6 c==> c==> c~ f2 c= cface_map f3 * f4 f5 b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND f2 f6 b0 f7
+ |- ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))
T c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4
+ ((q (NUMERAL _0)) = (p (NUMERAL _0))) |- (((T ==> ((q (NUMERAL _0)) = (p (NUMERAL _0)))) ==> (((~ T) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND T) (p (NUMERAL _0))) e')))) = (((~ T) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND T) (p (NUMERAL _0))) e'))))
T c==> c= * f0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= c==> c==> cT c= * f0 cNUMERAL c_0 * f1 cNUMERAL c_0 c==> c==> c~ cT c= cCOND c= cNUMERAL c_0 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f0 f2 cface_map f3 * f1 f4 f5 c= cCOND c<= cNUMERAL c_0 f2 * f0 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f0 f2 cface_map f3 * f1 f4 cCOND cT * f1 cNUMERAL c_0 f5 c==> c==> c~ cT c= cCOND c= cNUMERAL c_0 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f0 f2 cface_map f3 * f1 f4 f5 c= cCOND c<= cNUMERAL c_0 f2 * f0 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f0 f2 cface_map f3 * f1 f4 cCOND cT * f1 cNUMERAL c_0 f5
+ |- ((\e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND g') t') e')))))) e')
T * / c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 f4 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f6 f7 cface_map f5 * f6 f7 b0 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f6 f7 cface_map f5 * f6 f7 cCOND f2 f4 b0 f8
+ (~ T) |- ((~ T) /\ ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))))
T c==> c~ cT c/\ c~ cT c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4
+ |- (((go_one_step (opposite_hypermap H)) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))
T cgo_one_step copposite_hypermap f0 co * part cface_map f0 * part cnode_map f0 * f1 f2 cnode_map f0 * f1 f2
+ |- ((\p. (!s. (((permutes p) s) ==> (((p o (inverse p)) = I) /\ (((inverse p) o p) = I))))) (face_map H))
T * / ! c==> cpermutes b0 b1 c/\ c= * * part co b0 * part cinverse b0 part cI c= * * part co * part cinverse b0 b0 part cI * part cface_map f0
+ |- (((!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND g') t') e')))))) ==> ((\e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND g') t') e')))))) e')) = ((\e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 f4 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f6 f7 cedge_map f5 * f6 f7 b0 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f6 f7 cedge_map f5 * f6 f7 cCOND f2 f4 b0 * / c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 f4 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f6 f7 cedge_map f5 * f6 f7 b0 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f6 f7 cedge_map f5 * f6 f7 cCOND f2 f4 b0 f8 * / c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 f4 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f6 f7 cedge_map f5 * f6 f7 b0 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f6 f7 cedge_map f5 * f6 f7 cCOND f2 f4 b0 f8
+ |- (!s. (((permutes (node_map H)) s) ==> ((((node_map H) o (inverse (node_map H))) = I) /\ (((inverse (node_map H)) o (node_map H)) = I))))
T c==> cpermutes * part cnode_map f0 f1 c/\ c= * * part co * part cnode_map f0 * part cinverse * part cnode_map f0 part cI c= * * part co * part cinverse * part cnode_map f0 * part cnode_map f0 part cI
+ ((p (SUC n)) = ((edge_map H) (p n))), ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- (((p (SUC n)) = ((edge_map H) (p n))) /\ (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c= * f0 cSUC f1 cedge_map f2 * f0 f1 c==> c= * f3 f4 * f0 f1 c==> c= * f3 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> cis_path copposite_hypermap f2 f3 f4 c/\ c= * f0 cSUC f1 cedge_map f2 * f0 f1 c? / c? / c/\ cis_path copposite_hypermap f2 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f0 cNUMERAL c_0 c= * b0 b1 * f0 cSUC f1
+ |- (((!g'. (!t'. (!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c<= cSUC cSUC f0 f0 b0 c==> c==> b0 c= * f1 cSUC cSUC f0 b1 c==> c==> c~ b0 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 b2 c= cCOND c<= cSUC cSUC f0 f0 * f1 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 cCOND b0 b1 b2 * / ! ! c==> c= c<= cSUC cSUC f0 f0 b0 c==> c==> b0 c= * f1 cSUC cSUC f0 b1 c==> c==> c~ b0 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 b2 c= cCOND c<= cSUC cSUC f0 f0 * f1 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 cCOND b0 b1 b2 f5 * / ! ! c==> c= c<= cSUC cSUC f0 f0 b0 c==> c==> b0 c= * f1 cSUC cSUC f0 b1 c==> c==> c~ b0 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 b2 c= cCOND c<= cSUC cSUC f0 f0 * f1 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f1 f0 cnode_map f2 * f3 f4 cCOND b0 b1 b2 f5
+ ((\q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))) q) |- (((?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))) = (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> * / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 f3 c= c==> c? / c/\ cis_path copposite_hypermap f0 f3 b0 c/\ c= * f3 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * f3 b0 * f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2
- ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))) |- (((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))) /\ F)
T c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
+ |- (((i = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) t') e'))))
T c==> c==> c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f2 * f3 f1 f4 c==> c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cedge_map f2 * f5 f6 f7 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f1 cedge_map f2 * f5 f6 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 f4 f7
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((!H. ((SND (SND (SND (tuple_hypermap H)))) = (face_map H))) ==> ((\H. ((SND (SND (SND (tuple_hypermap H)))) = (face_map H))) H)) = ((\H. ((SND (SND (SND (tuple_hypermap H)))) = (face_map H))) H))
T c= c==> ! c= * part cSND cSND cSND ctuple_hypermap b0 * part cface_map b0 * / c= * part cSND cSND cSND ctuple_hypermap b0 * part cface_map b0 f0 * / c= * part cSND cSND cSND ctuple_hypermap b0 * part cface_map b0 f0
+ (!H. (!p. (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n)))))) |- (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n))))
T c==> ! ! ! ! c==> c/\ cis_path b0 b1 b3 ! c==> c<= b4 b3 c= * b2 b4 * b1 b4 cis_path b0 b2 b3 ! ! c==> c/\ cis_path f0 f1 b1 ! c==> c<= b2 b1 c= * b0 b2 * f1 b2 cis_path f0 b0 b1
+ ((p (SUC n)) = ((face_map H) (p n))), ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- (((p (SUC n)) = ((face_map H) (p n))) /\ (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c= * f0 cSUC f1 cface_map f2 * f0 f1 c==> c= * f3 f4 * f0 f1 c==> c= * f3 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> cis_path copposite_hypermap f2 f3 f4 c/\ c= * f0 cSUC f1 cface_map f2 * f0 f1 c? / c? / c/\ cis_path copposite_hypermap f2 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f0 cNUMERAL c_0 c= * b0 b1 * f0 cSUC f1
+ ((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) |- ((\x. (((inverse (face_map H)) ((face_map H) x)) = x)) x)
T c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 * / c= cinverse * part cface_map f0 cface_map f0 b0 b0 f1
+ ((!x. (((node_map H) ((inverse (node_map H)) x)) = x)) /\ (!x. (((inverse (node_map H)) ((node_map H) x)) = x))) |- ((\x. (((node_map H) ((inverse (node_map H)) x)) = x)) x)
T c==> c/\ ! c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 ! c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 * / c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 f1
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ |- (((!t'. (!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c<= cSUC cSUC f0 f0 f1 c==> c==> f1 c= * f2 cSUC cSUC f0 b0 c==> c==> c~ f1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f0 cface_map f3 * f4 f5 b1 c= cCOND c<= cSUC cSUC f0 f0 * f2 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f0 cface_map f3 * f4 f5 cCOND f1 b0 b1 * / ! c==> c= c<= cSUC cSUC f0 f0 f1 c==> c==> f1 c= * f2 cSUC cSUC f0 b0 c==> c==> c~ f1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f0 cface_map f3 * f4 f5 b1 c= cCOND c<= cSUC cSUC f0 f0 * f2 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f0 cface_map f3 * f4 f5 cCOND f1 b0 b1 f6 * / ! c==> c= c<= cSUC cSUC f0 f0 f1 c==> c==> f1 c= * f2 cSUC cSUC f0 b0 c==> c==> c~ f1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f0 cface_map f3 * f4 f5 b1 c= cCOND c<= cSUC cSUC f0 f0 * f2 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f0 cface_map f3 * f4 f5 cCOND f1 b0 b1 f6
+ |- ((F ==> ((q (SUC (SUC m))) = t')) ==> (((~ F) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND F) t') e'))))
T c==> c==> cF c= * f0 cSUC cSUC f1 f2 c==> c==> c~ cF c= cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f0 f1 cface_map f3 * f4 f5 f6 c= cCOND c<= cSUC cSUC f1 f1 * f0 cSUC cSUC f1 cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f0 f1 cface_map f3 * f4 f5 cCOND cF f2 f6
+ |- ((((node_map H) (p n)) = ((edge_map (opposite_hypermap H)) (((face_map H) o (node_map H)) (p n)))) \/ ((((node_map H) (p n)) = ((node_map (opposite_hypermap H)) (((face_map H) o (node_map H)) (p n)))) \/ (((node_map H) (p n)) = ((face_map (opposite_hypermap H)) (((face_map H) o (node_map H)) (p n))))))
T c\/ c= cnode_map f0 * f1 f2 cedge_map copposite_hypermap f0 co * part cface_map f0 * part cnode_map f0 * f1 f2 c\/ c= cnode_map f0 * f1 f2 cnode_map copposite_hypermap f0 co * part cface_map f0 * part cnode_map f0 * f1 f2 c= cnode_map f0 * f1 f2 cface_map copposite_hypermap f0 co * part cface_map f0 * part cnode_map f0 * f1 f2
+ |- ((\e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))) e')
T * / c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= co * part cface_map f3 * part cnode_map f3 * f4 f5 f6 c==> c==> c~ f2 c= cnode_map f3 * f4 f5 b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 cCOND f2 f6 b0 f7
+ (((is_path (opposite_hypermap H)) q) m) |- (T = ((((is_path (opposite_hypermap H)) q) m) /\ (!i. ((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i))))))
T c==> cis_path copposite_hypermap f0 f1 f2 c= cT c/\ cis_path copposite_hypermap f0 f1 f2 ! c==> c<= b0 f2 c= * / cCOND c<= b1 f2 * f1 b1 cCOND c= b1 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f0 * f3 f4 cface_map f0 * f3 f4 b0 * f1 b0
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (~ F) |- ((~ F) /\ (((face_map H) (p n)) = ((face_map H) (p n))))
T c==> c~ cF c/\ c~ cF c= cface_map f0 * f1 f2 cface_map f0 * f1 f2
+ |- ((((i = (m + (NUMERAL (BIT1 _0)))) = (i = (m + (NUMERAL (BIT1 _0))))) ==> (((i = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) t') e'))))) = (((i = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) t') e')))))
T c= c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= f0 c+ f1 cNUMERAL cBIT1 c_0 c==> c==> c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f2 * f3 f1 f4 c==> c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cface_map f2 * f5 f6 f7 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f1 cface_map f2 * f5 f6 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 f4 f7 c==> c==> c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f2 * f3 f1 f4 c==> c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cface_map f2 * f5 f6 f7 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f1 cface_map f2 * f5 f6 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 f4 f7
+ |- ((((i <= m) ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i)) = T)) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i))) = ((i <= m) ==> T))) = (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i))) = ((i <= m) ==> T)))
T c= c==> c==> c<= f0 f1 c= c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f0 * f2 f0 cT c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f0 * f2 f0 c==> c<= f0 f1 cT c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f0 * f2 f0 c==> c<= f0 f1 cT
+ |- ((\t'. (!e'. ((((NUMERAL _0) <= m) = g') ==> ((g' ==> ((q (NUMERAL _0)) = t')) ==> (((~ g') ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c<= cNUMERAL c_0 f0 f1 c==> c==> f1 c= * f2 cNUMERAL c_0 b0 c==> c==> c~ f1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f0 cedge_map f3 * f4 f5 b1 c= cCOND c<= cNUMERAL c_0 f0 * f2 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f0 cedge_map f3 * f4 f5 cCOND f1 b0 b1 f6
+ |- (((~ (m = (m + (NUMERAL (BIT1 _0))))) ==> ((m = (m + (NUMERAL (BIT1 _0)))) = F)) = ((m = (m + (NUMERAL (BIT1 _0)))) = F))
T c= c==> c~ c= f0 c+ f0 cNUMERAL cBIT1 c_0 c= c= f0 c+ f0 cNUMERAL cBIT1 c_0 cF c= c= f0 c+ f0 cNUMERAL cBIT1 c_0 cF
+ |- ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))
T c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4
+ (i <= m) |- ((((i <= m) = T) ==> ((T ==> ((q i) = t')) ==> (((~ T) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND T) t') e'))))) = ((T ==> ((q i) = t')) ==> (((~ T) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND T) t') e')))))
T c==> c<= f0 f1 c= c==> c= c<= f0 f1 cT c==> c==> cT c= * f2 f0 f3 c==> c==> c~ cT c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 cCOND cT f3 f7 c==> c==> cT c= * f2 f0 f3 c==> c==> c~ cT c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 cCOND cT f3 f7
+ |- (((((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))) ==> (((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n))))) = (((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n)))))
T c= c==> c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0 c= cedge_map f0 * f1 f2 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f1 f2 c= cedge_map f0 * f1 f2 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f1 f2
+ (!H. (!p. (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n)))))) |- (!n. ((?p. ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i)))))) ==> (((is_path H) q) n)))
T c==> ! ! ! ! c==> c/\ cis_path b0 b1 b3 ! c==> c<= b4 b3 c= * b2 b4 * b1 b4 cis_path b0 b2 b3 ! c==> c? / c/\ cis_path f0 b1 b0 ! c==> c<= b2 b0 c= * f1 b2 * b1 b2 cis_path f0 f1 b0
+ |- (((((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) = ((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x)))) ==> ((((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) ==> ((((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n))))) = q')) ==> ((((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) ==> (((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n)))))) = (((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) ==> q')))) = ((((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) ==> ((((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n))))) = q')) ==> ((((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) ==> (((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n)))))) = (((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) ==> q'))))
T c= c==> c= c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c==> c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= c= cnode_map f0 * f1 f2 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f1 f2 f3 c= c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= cnode_map f0 * f1 f2 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f1 f2 c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 f3 c==> c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= c= cnode_map f0 * f1 f2 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f1 f2 f3 c= c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= cnode_map f0 * f1 f2 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f1 f2 c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 f3
+ |- (((!t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 cCOND f2 b0 b1 * / ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 cCOND f2 b0 b1 f7 * / ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 cCOND f2 b0 b1 f7
+ |- (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND g') t') e')))))
T c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= co * part cface_map f3 * part cnode_map f3 * f4 f1 f5 c==> c==> c~ f2 c= cnode_map f3 * f6 f7 f8 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f1 cnode_map f3 * f6 f7 cCOND f2 f5 f8
+ |- (((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n)))))
T c= cnode_map f0 * f1 f2 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f1 f2
+ (i <= m) |- ((T ==> ((q i) = t')) ==> (((~ T) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND T) t') e'))))
T c==> c<= f0 f1 c==> c==> cT c= * f2 f0 f3 c==> c==> c~ cT c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 cCOND cT f3 f7
+ |- (((!t'. (!e'. ((((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 b0 c==> c==> c~ f1 c= cface_map f2 * f4 f5 b1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f4 f5 cCOND f1 b0 b1 * / ! c==> c= c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 b0 c==> c==> c~ f1 c= cface_map f2 * f4 f5 b1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f4 f5 cCOND f1 b0 b1 f6 * / ! c==> c= c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 b0 c==> c==> c~ f1 c= cface_map f2 * f4 f5 b1 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f4 f5 cCOND f1 b0 b1 f6
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((q m) = (p n)) |- (((F ==> ((((face_map H) o (node_map H)) (q m)) = (((face_map H) o (node_map H)) (p n)))) ==> (((~ F) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND F) (((face_map H) o (node_map H)) (p n))) e')))) = (((~ F) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND F) (((face_map H) o (node_map H)) (p n))) e'))))
T c==> c= * f0 f1 * f2 f3 c= c==> c==> cF c= co * part cface_map f4 * part cnode_map f4 * f0 f1 co * part cface_map f4 * part cnode_map f4 * f2 f3 c==> c==> c~ cF c= cnode_map f4 * f2 f3 f5 c= cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f0 f1 cnode_map f4 * f2 f3 cCOND cF co * part cface_map f4 * part cnode_map f4 * f2 f3 f5 c==> c==> c~ cF c= cnode_map f4 * f2 f3 f5 c= cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f0 f1 cnode_map f4 * f2 f3 cCOND cF co * part cface_map f4 * part cnode_map f4 * f2 f3 f5
+ ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((p (SUC n)) = ((face_map H) (p n))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))), (((p (SUC n)) = ((node_map H) (p n))) \/ ((p (SUC n)) = ((face_map H) (p n)))), (((is_path (opposite_hypermap H)) q) m) |- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))
T c==> c= * f0 f1 * f2 f3 c==> c= * f0 cNUMERAL c_0 * f2 cNUMERAL c_0 c==> c==> c= * f2 cSUC f3 cface_map f4 * f2 f3 c? / c? / c/\ cis_path copposite_hypermap f4 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3 c==> c\/ c= * f2 cSUC f3 cnode_map f4 * f2 f3 c= * f2 cSUC f3 cface_map f4 * f2 f3 c==> cis_path copposite_hypermap f4 f0 f1 c? / c? / c/\ cis_path copposite_hypermap f4 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3
+ |- ((\s. (((permutes (node_map H)) s) ==> ((((node_map H) o (inverse (node_map H))) = I) /\ (((inverse (node_map H)) o (node_map H)) = I)))) (dart H))
T * / c==> cpermutes * part cnode_map f0 b0 c/\ c= * * part co * part cnode_map f0 * part cinverse * part cnode_map f0 part cI c= * * part co * part cinverse * part cnode_map f0 * part cnode_map f0 part cI * part cdart f0
- |- (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) e')))
T c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f2 f3 f4 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 f4
+ |- (((((permutes (face_map H)) (dart H)) ==> ((((face_map H) o (inverse (face_map H))) = I) /\ (((inverse (face_map H)) o (face_map H)) = I))) ==> (((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n)))))) = (((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n))))))
T c= c==> c==> cpermutes * part cface_map f0 * part cdart f0 c/\ c= * * part co * part cface_map f0 * part cinverse * part cface_map f0 part cI c= * * part co * part cinverse * part cface_map f0 * part cface_map f0 part cI c= cnode_map f0 * f1 f2 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f1 f2 c= cnode_map f0 * f1 f2 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f1 f2
- ((!x. (((node_map H) ((inverse (node_map H)) x)) = x)) /\ (!x. (((inverse (node_map H)) ((node_map H) x)) = x))) |- (((inverse (node_map H)) ((node_map H) x)) = x)
T c==> c/\ ! c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 ! c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 c= cinverse * part cnode_map f0 cnode_map f0 f1 f1
+ |- (((permutes (face_map H)) (dart H)) = T)
T c= cpermutes * part cface_map f0 * part cdart f0 cT
+ |- (((~ (i = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e')))
T c==> c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= cedge_map f2 * f3 f4 f5 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 f5
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((permutes (node_map H)) (dart H))
T cpermutes * part cnode_map f0 * part cdart f0
+ |- (((NUMERAL (BIT1 _0)) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
+ |- (((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e'))))) = ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e')))))
T c= c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= co * part cface_map f1 * part cnode_map f1 * f2 f0 f3 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f4 f5 f6 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f0 cnode_map f1 * f4 f5 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f3 f6 c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= co * part cface_map f1 * part cnode_map f1 * f2 f0 f3 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f4 f5 f6 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f0 cnode_map f1 * f4 f5 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f3 f6
- |- (((~ ((m + (NUMERAL (BIT1 _0))) = m)) ==> (((m + (NUMERAL (BIT1 _0))) = m) = F)) = (((m + (NUMERAL (BIT1 _0))) = m) = F))
T c= c==> c~ c= c+ f0 cNUMERAL cBIT1 c_0 f0 c= c= c+ f0 cNUMERAL cBIT1 c_0 f0 cF c= c= c+ f0 cNUMERAL cBIT1 c_0 f0 cF
+ |- (((!H. ((edge_map H) = (FST (SND (tuple_hypermap H))))) ==> ((\H. ((edge_map H) = (FST (SND (tuple_hypermap H))))) H)) = ((\H. ((edge_map H) = (FST (SND (tuple_hypermap H))))) H))
T c= c==> ! c= * part cedge_map b0 * part cFST cSND ctuple_hypermap b0 * / c= * part cedge_map b0 * part cFST cSND ctuple_hypermap b0 f0 * / c= * part cedge_map b0 * part cFST cSND ctuple_hypermap b0 f0
+ ((q m) = (p n)), (i = (m + (NUMERAL (BIT1 _0)))) |- ((i = (m + (NUMERAL (BIT1 _0)))) /\ (((inverse (node_map H)) (q m)) = ((inverse (node_map H)) (p n))))
T c==> c= * f0 f1 * f2 f3 c==> c= f4 c+ f1 cNUMERAL cBIT1 c_0 c/\ c= f4 c+ f1 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f5 * f0 f1 cinverse * part cnode_map f5 * f2 f3
- |- ((((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c= creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (T = ((((face_map H) o (node_map H)) (p n)) = ((FST (SND (tuple_hypermap (opposite_hypermap H)))) (p n))))
T c= cT c= co * part cface_map f0 * part cnode_map f0 * f1 f2 cFST cSND ctuple_hypermap copposite_hypermap f0 * f1 f2
+ |- (((((NUMERAL _0) <= m) = T) ==> ((T ==> ((q (NUMERAL _0)) = t')) ==> (((~ T) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND T) t') e'))))) = ((T ==> ((q (NUMERAL _0)) = t')) ==> (((~ T) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND T) t') e')))))
T c= c==> c= c<= cNUMERAL c_0 f0 cT c==> c==> cT c= * f1 cNUMERAL c_0 f2 c==> c==> c~ cT c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f1 f0 cface_map f3 * f4 f5 f6 c= cCOND c<= cNUMERAL c_0 f0 * f1 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f1 f0 cface_map f3 * f4 f5 cCOND cT f2 f6 c==> c==> cT c= * f1 cNUMERAL c_0 f2 c==> c==> c~ cT c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f1 f0 cface_map f3 * f4 f5 f6 c= cCOND c<= cNUMERAL c_0 f0 * f1 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f1 f0 cface_map f3 * f4 f5 cCOND cT f2 f6
+ |- (((!H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H))))))) ==> ((\H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H))))))) H)) = ((\H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H))))))) H))
T c= c==> ! c/\ c= * part cedge_map b0 * * part co * part cinverse * part cface_map b0 * part cinverse * part cnode_map b0 c/\ c= * part cnode_map b0 * * part co * part cinverse * part cedge_map b0 * part cinverse * part cface_map b0 c= * part cface_map b0 * * part co * part cinverse * part cnode_map b0 * part cinverse * part cedge_map b0 * / c/\ c= * part cedge_map b0 * * part co * part cinverse * part cface_map b0 * part cinverse * part cnode_map b0 c/\ c= * part cnode_map b0 * * part co * part cinverse * part cedge_map b0 * part cinverse * part cface_map b0 c= * part cface_map b0 * * part co * part cinverse * part cnode_map b0 * part cinverse * part cedge_map b0 f0 * / c/\ c= * part cedge_map b0 * * part co * part cinverse * part cface_map b0 * part cinverse * part cnode_map b0 c/\ c= * part cnode_map b0 * * part co * part cinverse * part cedge_map b0 * part cinverse * part cface_map b0 c= * part cface_map b0 * * part co * part cinverse * part cnode_map b0 * part cinverse * part cedge_map b0 f0
+ |- (((go_one_step (opposite_hypermap H)) (((COND ((SUC m) <= m)) (q (SUC m))) (((COND ((SUC m) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) (((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))
T cgo_one_step copposite_hypermap f0 cCOND c<= cSUC f1 f1 * f2 cSUC f1 cCOND c= cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f0 * part cnode_map f0 * f3 f4 cnode_map f0 * f3 f4 cCOND c<= cSUC cSUC f1 f1 * f2 cSUC cSUC f1 cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f0 * part cnode_map f0 * f3 f4 cnode_map f0 * f3 f4
+ |- (((!t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 cCOND f2 b0 b1 * / ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 cCOND f2 b0 b1 f7 * / ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 cCOND f2 b0 b1 f7
+ |- ((((edge_map H) (p n)) = ((SND (SND (SND (tuple_hypermap (opposite_hypermap H))))) ((inverse (node_map H)) (p n)))) = (((edge_map H) (p n)) = ((face_map (opposite_hypermap H)) ((inverse (node_map H)) (p n)))))
T c= c= cedge_map f0 * f1 f2 cSND cSND cSND ctuple_hypermap copposite_hypermap f0 cinverse * part cnode_map f0 * f1 f2 c= cedge_map f0 * f1 f2 cface_map copposite_hypermap f0 cinverse * part cnode_map f0 * f1 f2
+ |- (T ==> ((q i) = (q i)))
T c==> cT c= * f0 f1 * f0 f1
+ ((q m) = (p n)), ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) |- (((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) /\ (((inverse (node_map H)) (q m)) = ((inverse (node_map H)) (p n))))
T c==> c= * f0 f1 * f2 f3 c==> c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c/\ c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f4 * f0 f1 cinverse * part cnode_map f4 * f2 f3
+ ((q m) = (p n)), (((is_path (opposite_hypermap H)) q) m) |- ((((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))) m) /\ (((go_one_step (opposite_hypermap H)) (((COND (m <= m)) (q m)) (((COND (m = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) (((COND ((SUC m) <= m)) (q (SUC m))) (((COND ((SUC m) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))))
T c==> c= * f0 f1 * f2 f3 c==> cis_path copposite_hypermap f4 f0 f1 c/\ cis_path copposite_hypermap f4 / cCOND c<= b0 f1 * f0 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cface_map f4 * f2 f3 f1 cgo_one_step copposite_hypermap f4 cCOND c<= f1 f1 * f0 f1 cCOND c= f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cface_map f4 * f2 f3 cCOND c<= cSUC f1 f1 * f0 cSUC f1 cCOND c= cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cface_map f4 * f2 f3
+ |- ((int_of_num (m + n)) = ((int_add (int_of_num m)) (int_of_num n)))
T c= cint_of_num c+ f0 f1 cint_add cint_of_num f0 cint_of_num f1
+ |- (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))
T c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f5 f6 c==> c==> c~ f2 c= cface_map f3 * f4 f5 f7 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND f2 f6 f7
+ ((q m) = (p n)), ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) |- (((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) /\ ((((face_map H) o (node_map H)) (q m)) = (((face_map H) o (node_map H)) (p n))))
T c==> c= * f0 f1 * f2 f3 c==> c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c/\ c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 c= co * part cface_map f4 * part cnode_map f4 * f0 f1 co * part cface_map f4 * part cnode_map f4 * f2 f3
+ |- (((!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))) ==> ((\e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))) e')) = ((\e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f5 f6 c==> c==> c~ f2 c= cface_map f3 * f4 f5 b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND f2 f6 b0 * / c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f5 f6 c==> c==> c~ f2 c= cface_map f3 * f4 f5 b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND f2 f6 b0 f7 * / c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 f2 c==> c==> f2 c= cinverse * part cnode_map f3 * f4 f5 f6 c==> c==> c~ f2 c= cface_map f3 * f4 f5 b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND f2 f6 b0 f7
+ |- (((!H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I)))))) ==> ((\H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I)))))) H)) = ((\H. ((FINITE (dart H)) /\ (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I)))))) H))
T c= c==> ! c/\ cFINITE * part cdart b0 c/\ cpermutes * part cedge_map b0 * part cdart b0 c/\ cpermutes * part cnode_map b0 * part cdart b0 c/\ cpermutes * part cface_map b0 * part cdart b0 c= * * part co * part cedge_map b0 * * part co * part cnode_map b0 * part cface_map b0 part cI * / c/\ cFINITE * part cdart b0 c/\ cpermutes * part cedge_map b0 * part cdart b0 c/\ cpermutes * part cnode_map b0 * part cdart b0 c/\ cpermutes * part cface_map b0 * part cdart b0 c= * * part co * part cedge_map b0 * * part co * part cnode_map b0 * part cface_map b0 part cI f0 * / c/\ cFINITE * part cdart b0 c/\ cpermutes * part cedge_map b0 * part cdart b0 c/\ cpermutes * part cnode_map b0 * part cdart b0 c/\ cpermutes * part cface_map b0 * part cdart b0 c= * * part co * part cedge_map b0 * * part co * part cnode_map b0 * part cface_map b0 part cI f0
- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))), (((go_one_step H) (p n)) (p (SUC n))) |- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))
T c==> c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 c==> cgo_one_step f0 * f1 f2 * f1 cSUC f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2
- |- (((real_add (real_of_num m)) (real_neg (real_of_num m))) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_of_num f0 creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0
+ |- ((~ F) ==> (((face_map H) (p n)) = ((face_map H) (p n))))
T c==> c~ cF c= cface_map f0 * f1 f2 cface_map f0 * f1 f2
+ |- ((((permutes (face_map H)) (dart H)) ==> ((((face_map H) o (inverse (face_map H))) = I) /\ (((inverse (face_map H)) o (face_map H)) = I))) ==> (((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n))))))
T c==> c==> cpermutes * part cface_map f0 * part cdart f0 c/\ c= * * part co * part cface_map f0 * part cinverse * part cface_map f0 part cI c= * * part co * part cinverse * part cface_map f0 * part cface_map f0 part cI c= cnode_map f0 * f1 f2 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f1 f2
- ((!x. (((node_map H) ((inverse (node_map H)) x)) = x)) /\ (!x. (((inverse (node_map H)) ((node_map H) x)) = x))) |- ((\x. (((inverse (node_map H)) ((node_map H) x)) = x)) x)
T c==> c/\ ! c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 ! c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 * / c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 f1
+ (!H. (!p. (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n)))))) |- ((\q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n)))) q)
T c==> ! ! ! ! c==> c/\ cis_path b0 b1 b3 ! c==> c<= b4 b3 c= * b2 b4 * b1 b4 cis_path b0 b2 b3 * / ! c==> c/\ cis_path f0 f1 b1 ! c==> c<= b2 b1 c= * b0 b2 * f1 b2 cis_path f0 b0 b1 f2
+ ((q m) = (p n)) |- ((((go_one_step (opposite_hypermap H)) (p n)) (((face_map H) o (node_map H)) (p n))) = (((go_one_step (opposite_hypermap H)) (((COND (m <= m)) (q m)) (((COND (m = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) (((COND ((SUC m) <= m)) (q (SUC m))) (((COND ((SUC m) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))))
T c==> c= * f0 f1 * f2 f3 c= cgo_one_step copposite_hypermap f4 * f2 f3 co * part cface_map f4 * part cnode_map f4 * f2 f3 cgo_one_step copposite_hypermap f4 cCOND c<= f1 f1 * f0 f1 cCOND c= f1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f3 cnode_map f4 * f2 f3 cCOND c<= cSUC f1 f1 * f0 cSUC f1 cCOND c= cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f3 cnode_map f4 * f2 f3
+ |- ((((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) = p') ==> ((p' ==> ((((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n))))) = q')) ==> ((((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) ==> (((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n)))))) = (p' ==> q'))))
T c==> c= c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 f1 c==> c==> f1 c= c= cnode_map f0 * f2 f3 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f2 f3 f4 c= c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= cnode_map f0 * f2 f3 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f2 f3 c==> f1 f4
+ |- (((!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))) ==> ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))) e')) = ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 f4 c==> c==> c~ f1 c= cface_map f2 * f5 f6 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f5 f6 cCOND f1 f4 b0 * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 f4 c==> c==> c~ f1 c= cface_map f2 * f5 f6 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f5 f6 cCOND f1 f4 b0 f7 * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 f4 c==> c==> c~ f1 c= cface_map f2 * f5 f6 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f5 f6 cCOND f1 f4 b0 f7
+ |- ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f0 b1 c==> c==> c~ b0 c= cedge_map f1 * f3 f4 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f0 cedge_map f1 * f3 f4 cCOND b0 b1 b2 f5
+ |- (((!g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f0 b1 c==> c==> c~ b0 c= cface_map f1 * f3 f4 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f0 cface_map f1 * f3 f4 cCOND b0 b1 b2 * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f0 b1 c==> c==> c~ b0 c= cface_map f1 * f3 f4 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f0 cface_map f1 * f3 f4 cCOND b0 b1 b2 f5 * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f0 b1 c==> c==> c~ b0 c= cface_map f1 * f3 f4 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f0 cface_map f1 * f3 f4 cCOND b0 b1 b2 f5
+ ((q m) = (p n)) |- (((F ==> (((inverse (node_map H)) (q m)) = ((inverse (node_map H)) (p n)))) ==> (((~ F) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND F) ((inverse (node_map H)) (p n))) e')))) = (((~ F) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = (((COND F) ((inverse (node_map H)) (p n))) e'))))
T c==> c= * f0 f1 * f2 f3 c= c==> c==> cF c= cinverse * part cnode_map f4 * f0 f1 cinverse * part cnode_map f4 * f2 f3 c==> c==> c~ cF c= cedge_map f4 * f2 f3 f5 c= cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cedge_map f4 * f2 f3 cCOND cF cinverse * part cnode_map f4 * f2 f3 f5 c==> c==> c~ cF c= cedge_map f4 * f2 f3 f5 c= cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cedge_map f4 * f2 f3 cCOND cF cinverse * part cnode_map f4 * f2 f3 f5
- |- (((permutes (edge_map H)) (dart H)) = T)
T c= cpermutes * part cedge_map f0 * part cdart f0 cT
+ |- (((permutes (edge_map H)) (dart H)) /\ (((permutes (node_map H)) (dart H)) /\ (((permutes (face_map H)) (dart H)) /\ (((edge_map H) o ((node_map H) o (face_map H))) = I))))
T c/\ cpermutes * part cedge_map f0 * part cdart f0 c/\ cpermutes * part cnode_map f0 * part cdart f0 c/\ cpermutes * part cface_map f0 * part cdart f0 c= * * part co * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 part cI
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\g'. (!t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c<= f0 f1 b0 c==> c==> b0 c= * f2 f0 b1 c==> c==> c~ b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cface_map f3 * f4 f5 b2 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cface_map f3 * f4 f5 cCOND b0 b1 b2 f6
+ (!H. (!p. (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n)))))), ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) |- ((!H. (!p. (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n)))))) /\ (((is_path H) q) n))
T c==> ! ! ! ! c==> c/\ cis_path b0 b1 b3 ! c==> c<= b4 b3 c= * b2 b4 * b1 b4 cis_path b0 b2 b3 c==> c/\ cis_path f0 f1 f2 ! c==> c<= b0 f2 c= * f3 b0 * f1 b0 c/\ ! ! ! ! c==> c/\ cis_path b0 b1 b3 ! c==> c<= b4 b3 c= * b2 b4 * b1 b4 cis_path b0 b2 b3 cis_path f0 f3 f2
+ |- ((((i <= m) ==> ((q i) = (q i))) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) e')))) = (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) e'))))
T c= c==> c==> c<= f0 f1 c= * f2 f0 * f2 f0 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cface_map f3 * f4 f5 f6 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cface_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 f6 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cface_map f3 * f4 f5 f6 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f2 f1 cface_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 f6
+ |- ((\q'. ((((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) = p') ==> ((p' ==> ((((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n))))) = q')) ==> ((((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) ==> (((node_map H) (p n)) = ((inverse (face_map H)) ((face_map H) ((node_map H) (p n)))))) = (p' ==> q'))))) q')
T * / c==> c= c/\ ! c= cface_map f0 cinverse * part cface_map f0 b1 b1 ! c= cinverse * part cface_map f0 cface_map f0 b1 b1 f1 c==> c==> f1 c= c= cnode_map f0 * f2 f3 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f2 f3 b0 c= c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b1 b1 ! c= cinverse * part cface_map f0 cface_map f0 b1 b1 c= cnode_map f0 * f2 f3 cinverse * part cface_map f0 cface_map f0 cnode_map f0 * f2 f3 c==> f1 b0 f4
+ ((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) |- (((inverse (face_map H)) ((face_map H) x)) = x)
T c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= cinverse * part cface_map f0 cface_map f0 f1 f1
+ (((go_one_step H) (p n)) (p (SUC n))) |- ((((\m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))) m) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))) = T)
T c==> cgo_one_step f0 * f1 f2 * f1 cSUC f2 c= c==> * / c/\ cis_path copposite_hypermap f0 f3 b0 c/\ c= * f3 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * f3 b0 * f1 f2 f4 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2 cT
+ |- ((\g'. (!t'. (!e'. ((((NUMERAL _0) <= m) = g') ==> ((g' ==> ((q (NUMERAL _0)) = t')) ==> (((~ g') ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((NUMERAL _0) <= m)) (q (NUMERAL _0))) (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c<= cNUMERAL c_0 f0 b0 c==> c==> b0 c= * f1 cNUMERAL c_0 b1 c==> c==> c~ b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cface_map f2 * f3 f4 b2 c= cCOND c<= cNUMERAL c_0 f0 * f1 cNUMERAL c_0 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cface_map f2 * f3 f4 cCOND b0 b1 b2 f5
+ |- (((permutes (node_map H)) (dart H)) ==> ((((node_map H) o (inverse (node_map H))) = I) /\ (((inverse (node_map H)) o (node_map H)) = I)))
T c==> cpermutes * part cnode_map f0 * part cdart f0 c/\ c= * * part co * part cnode_map f0 * part cinverse * part cnode_map f0 part cI c= * * part co * part cinverse * part cnode_map f0 * part cnode_map f0 part cI
+ |- (((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) ==> ((((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n)))) = T))
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 c= c= cedge_map f0 * f1 f2 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f1 f2 cT
+ (((is_path (opposite_hypermap H)) q) m) |- (T = ((((is_path (opposite_hypermap H)) q) m) /\ (!i. ((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))) i) = (q i))))))
T c==> cis_path copposite_hypermap f0 f1 f2 c= cT c/\ cis_path copposite_hypermap f0 f1 f2 ! c==> c<= b0 f2 c= * / cCOND c<= b1 f2 * f1 b1 cCOND c= b1 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f0 * f3 f4 cedge_map f0 * f3 f4 b0 * f1 b0
- (((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) ==> F), ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))) |- F
T c==> c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- |- ((((i <= m) = (i <= m)) ==> (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND (i <= m)) t') e'))))) = (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND (i <= m)) t') e')))))
T c= c==> c= c<= f0 f1 c<= f0 f1 c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7 c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7
+ ((p (SUC n)) = ((node_map H) (p n))), ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- ((((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n)))))) (SUC (SUC m))) /\ ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))))) (NUMERAL _0)) = (p (NUMERAL _0))) /\ (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))))) (SUC (SUC m))) = (p (SUC n)))))
T c==> c= * f0 cSUC f1 cnode_map f2 * f0 f1 c==> c= * f3 f4 * f0 f1 c==> c= * f3 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> cis_path copposite_hypermap f2 f3 f4 c/\ cis_path copposite_hypermap f2 / cCOND c<= b0 f4 * f3 b0 cCOND c= b0 c+ f4 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f0 f1 cSUC cSUC f4 c/\ c= * / cCOND c<= b0 f4 * f3 b0 cCOND c= b0 c+ f4 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f0 f1 cNUMERAL c_0 * f0 cNUMERAL c_0 c= * / cCOND c<= b0 f4 * f3 b0 cCOND c= b0 c+ f4 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f0 f1 cSUC cSUC f4 * f0 cSUC f1
+ |- (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND g') t') e')))))
T c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 f4 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f5 * part cnode_map f5 * f6 f7 cnode_map f5 * f6 f7 f8 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f5 * part cnode_map f5 * f6 f7 cnode_map f5 * f6 f7 cCOND f2 f4 f8
+ |- (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i))) = ((i <= m) ==> T))
T c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 f0 * f2 f0 c==> c<= f0 f1 cT
+ |- ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f0 b1 c==> c==> c~ b0 c= cface_map f1 * f3 f4 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f0 cface_map f1 * f3 f4 cCOND b0 b1 b2 f5
+ ((q m) = (p n)) |- ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))
T c==> c= * f0 f1 * f2 f3 c= cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f0 f1 cnode_map f4 * f2 f3 cCOND c= cNUMERAL c_0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f2 f3 cnode_map f4 * f2 f3
+ |- ((\g'. (!t'. (!e'. ((((SUC (SUC m)) <= m) = g') ==> ((g' ==> ((q (SUC (SUC m))) = t')) ==> (((~ g') ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c<= cSUC cSUC f0 f0 b0 c==> c==> b0 c= * f1 cSUC cSUC f0 b1 c==> c==> c~ b0 c= cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cface_map f2 * f3 f4 b2 c= cCOND c<= cSUC cSUC f0 f0 * f1 cSUC cSUC f0 cCOND c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f1 f0 cface_map f2 * f3 f4 cCOND b0 b1 b2 f5
+ |- (((!g. (!x. (((f o g) x) = (f (g x))))) ==> ((\g. (!x. (((f o g) x) = (f (g x))))) g)) = ((\g. (!x. (((f o g) x) = (f (g x))))) g))
T c= c==> ! ! c= co f0 b0 b1 * f0 * b0 b1 * / ! c= co f0 b0 b1 * f0 * b0 b1 f1 * / ! c= co f0 b0 b1 * f0 * b0 b1 f1
- |- ((?m. t) = t)
T c= c? / f0 f0
+ (~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) |- ((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) /\ (((node_map H) (p n)) = ((node_map H) (p n))))
T c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c/\ c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f2 f3 cnode_map f1 * f2 f3
- ((!x. (((node_map H) ((inverse (node_map H)) x)) = x)) /\ (!x. (((inverse (node_map H)) ((node_map H) x)) = x))) |- (((!x. (((inverse (node_map H)) ((node_map H) x)) = x)) ==> ((\x. (((inverse (node_map H)) ((node_map H) x)) = x)) x)) = ((\x. (((inverse (node_map H)) ((node_map H) x)) = x)) x))
T c==> c/\ ! c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 ! c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 c= c==> ! c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 * / c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 f1 * / c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 f1
- |- ((\t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cnode_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND f1 b0 b1 f5
+ |- (((!H. (!p. (!q. (!n. (((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i))))) ==> (((is_path H) q) n)))))) ==> (!H. (!q. (!n. ((?p. ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i)))))) ==> (((is_path H) q) n)))))) = (!H. (!q. (!n. ((?p. ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i)))))) ==> (((is_path H) q) n))))))
T c= c==> ! ! ! ! c==> c/\ cis_path b0 b1 b3 ! c==> c<= b4 b3 c= * b2 b4 * b1 b4 cis_path b0 b2 b3 ! ! ! c==> c? / c/\ cis_path b0 b3 b2 ! c==> c<= b4 b2 c= * b1 b4 * b3 b4 cis_path b0 b1 b2 ! ! ! c==> c? / c/\ cis_path b0 b3 b2 ! c==> c<= b4 b2 c= * b1 b4 * b3 b4 cis_path b0 b1 b2
+ |- (((!q. (!n. ((?p. ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i)))))) ==> (((is_path H) q) n)))) ==> ((\q. (!n. ((?p. ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i)))))) ==> (((is_path H) q) n)))) q)) = ((\q. (!n. ((?p. ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i)))))) ==> (((is_path H) q) n)))) q))
T c= c==> ! ! c==> c? / c/\ cis_path f0 b2 b1 ! c==> c<= b3 b1 c= * b0 b3 * b2 b3 cis_path f0 b0 b1 * / ! c==> c? / c/\ cis_path f0 b2 b1 ! c==> c<= b3 b1 c= * b0 b3 * b2 b3 cis_path f0 b0 b1 f1 * / ! c==> c? / c/\ cis_path f0 b2 b1 ! c==> c<= b3 b1 c= * b0 b3 * b2 b3 cis_path f0 b0 b1 f1
+ |- ((\g'. (!t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c<= f0 f1 b0 c==> c==> b0 c= * f2 f0 b1 c==> c==> c~ b0 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cedge_map f3 * f4 f5 b2 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cedge_map f3 * f4 f5 cCOND b0 b1 b2 f6
+ |- ((\H. ((node_map H) = (FST (SND (SND (tuple_hypermap H)))))) H)
T * / c= * part cnode_map b0 * part cFST cSND cSND ctuple_hypermap b0 f0
+ ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- ((\x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) x)
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 * / c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (((go_one_step H) (p n)) (p (SUC n))) |- (((!x. (((\m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))) x) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))) ==> ((?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))) = ((?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))))
T c==> cgo_one_step f0 * f1 f2 * f1 cSUC f2 c= c==> ! c==> * / c/\ cis_path copposite_hypermap f0 f3 b1 c/\ c= * f3 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * f3 b1 * f1 f2 b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 cSUC f2 c==> c? / c/\ cis_path copposite_hypermap f0 f3 b0 c/\ c= * f3 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * f3 b0 * f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2 c==> c? / c/\ cis_path copposite_hypermap f0 f3 b0 c/\ c= * f3 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * f3 b0 * f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2
+ |- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (NUMERAL _0)))))))
T c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cNUMERAL c_0
+ |- (((!g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f2 * part cnode_map f2 * f3 f1 b1 c==> c==> c~ b0 c= cnode_map f2 * f4 f5 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f1 cnode_map f2 * f4 f5 cCOND b0 b1 b2 * / ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f2 * part cnode_map f2 * f3 f1 b1 c==> c==> c~ b0 c= cnode_map f2 * f4 f5 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f1 cnode_map f2 * f4 f5 cCOND b0 b1 b2 f6 * / ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f2 * part cnode_map f2 * f3 f1 b1 c==> c==> c~ b0 c= cnode_map f2 * f4 f5 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f1 cnode_map f2 * f4 f5 cCOND b0 b1 b2 f6
+ |- ((\t'. (!e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 b0 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f3 f1 cedge_map f4 * f5 f6 b1 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f3 f1 cedge_map f4 * f5 f6 cCOND f2 b0 b1 f7
+ |- (((SUC m) <= m) = F)
T c= c<= cSUC f0 f0 cF
+ |- (((((is_path (opposite_hypermap H)) q) m) /\ (!i. ((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i))))) = ((\p'. ((((is_path (opposite_hypermap H)) p') m) /\ (!i. ((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (p' i)))))) q))
T c= c/\ cis_path copposite_hypermap f0 f1 f2 ! c==> c<= b0 f2 c= * / cCOND c<= b1 f2 * f1 b1 cCOND c= b1 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f0 * f3 f4 cface_map f0 * f3 f4 b0 * f1 b0 * / c/\ cis_path copposite_hypermap f0 b0 f2 ! c==> c<= b1 f2 c= * / cCOND c<= b2 f2 * f1 b2 cCOND c= b2 c+ f2 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f0 * f3 f4 cface_map f0 * f3 f4 b1 * b0 b1 f1
- |- (~ ((m + (NUMERAL (BIT1 _0))) = m))
T c~ c= c+ f0 cNUMERAL cBIT1 c_0 f0
+ |- (((!H. ((tuple_hypermap (opposite_hypermap H)) = ((dart H) , (((face_map H) o (node_map H)) , ((inverse (node_map H)) , (inverse (face_map H))))))) ==> ((\H. ((tuple_hypermap (opposite_hypermap H)) = ((dart H) , (((face_map H) o (node_map H)) , ((inverse (node_map H)) , (inverse (face_map H))))))) H)) = ((\H. ((tuple_hypermap (opposite_hypermap H)) = ((dart H) , (((face_map H) o (node_map H)) , ((inverse (node_map H)) , (inverse (face_map H))))))) H))
T c= c==> ! c= ctuple_hypermap copposite_hypermap b0 c, * part cdart b0 c, * * part co * part cface_map b0 * part cnode_map b0 c, * part cinverse * part cnode_map b0 * part cinverse * part cface_map b0 * / c= ctuple_hypermap copposite_hypermap b0 c, * part cdart b0 c, * * part co * part cface_map b0 * part cnode_map b0 c, * part cinverse * part cnode_map b0 * part cinverse * part cface_map b0 f0 * / c= ctuple_hypermap copposite_hypermap b0 c, * part cdart b0 c, * * part co * part cface_map b0 * part cnode_map b0 c, * part cinverse * part cnode_map b0 * part cinverse * part cface_map b0 f0
+ ((q m) = (p n)) |- (F ==> ((((face_map H) o (node_map H)) (q m)) = (((face_map H) o (node_map H)) (p n))))
T c==> c= * f0 f1 * f2 f3 c==> cF c= co * part cface_map f4 * part cnode_map f4 * f0 f1 co * part cface_map f4 * part cnode_map f4 * f2 f3
+ ((q m) = (p n)) |- ((((~ F) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = ((face_map H) (p n)))) ==> ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND F) (q (SUC (SUC m)))) ((face_map H) (p n))))) = ((((COND ((SUC (SUC m)) <= m)) (q (SUC (SUC m)))) (((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND F) (q (SUC (SUC m)))) ((face_map H) (p n)))))
T c==> c= * f0 f1 * f2 f3 c= c==> c==> c~ cF c= cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cface_map f4 * f2 f3 cface_map f4 * f2 f3 c= cCOND c<= cSUC cSUC f1 f1 * f0 cSUC cSUC f1 cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cface_map f4 * f2 f3 cCOND cF * f0 cSUC cSUC f1 cface_map f4 * f2 f3 c= cCOND c<= cSUC cSUC f1 f1 * f0 cSUC cSUC f1 cCOND c= cSUC cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f0 f1 cface_map f4 * f2 f3 cCOND cF * f0 cSUC cSUC f1 cface_map f4 * f2 f3
- ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- (((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) ==> ((\x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) x)) = ((\x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) x))
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 c= c==> ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 * / c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 f1 * / c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 f1
- ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- (((!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))) ==> ((\x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))) x)) = ((\x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))) x))
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 c= c==> ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 * / c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 f1 * / c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 f1
+ |- (~ ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))))
T c~ c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
+ |- ((\e'. (((i <= m) = g') ==> ((g' ==> ((q i) = t')) ==> (((~ g') ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n)))) = (((COND g') t') e')))))) e')
T * / c==> c= c<= f0 f1 f2 c==> c==> f2 c= * f3 f0 f4 c==> c==> c~ f2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f3 f1 cface_map f5 * f6 f7 b0 c= cCOND c<= f0 f1 * f3 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f5 * f3 f1 cface_map f5 * f6 f7 cCOND f2 f4 b0 f8
- (~ (i = (m + (NUMERAL (BIT1 _0))))) |- (((~ ((m + (NUMERAL (BIT1 _0))) = i)) ==> (((m + (NUMERAL (BIT1 _0))) = i) = F)) = (((m + (NUMERAL (BIT1 _0))) = i) = F))
T c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= c==> c~ c= c+ f1 cNUMERAL cBIT1 c_0 f0 c= c= c+ f1 cNUMERAL cBIT1 c_0 f0 cF c= c= c+ f1 cNUMERAL cBIT1 c_0 f0 cF
- |- (((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) ==> F)
T c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
+ ((q m) = (p n)) |- (((go_one_step (opposite_hypermap H)) (((COND (m <= m)) (q m)) (((COND (m = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) (((COND ((SUC m) <= m)) (q (SUC m))) (((COND ((SUC m) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))
T c==> c= * f0 f1 * f2 f3 cgo_one_step copposite_hypermap f4 cCOND c<= f1 f1 * f0 f1 cCOND c= f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cface_map f4 * f2 f3 cCOND c<= cSUC f1 f1 * f0 cSUC f1 cCOND c= cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cface_map f4 * f2 f3
- |- ((((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308612)) /\ (((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))))))) ==> F) ==> (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308612)) /\ (((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))))))) = (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308612)) /\ (((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 cF c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!f. (!g. (!x. (((f o g) x) = (f (g x)))))) ==> ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) f)) = ((\f. (!g. (!x. (((f o g) x) = (f (g x)))))) f))
T c= c==> ! ! ! c= co b0 b1 b2 * b0 * b1 b2 * / ! ! c= co b0 b1 b2 * b0 * b1 b2 f0 * / ! ! c= co b0 b1 b2 * b0 * b1 b2 f0
+ |- ((\n. ((?p. ((((is_path H) p) n) /\ (!i. ((i <= n) ==> ((q i) = (p i)))))) ==> (((is_path H) q) n))) n)
T * / c==> c? / c/\ cis_path f0 b1 b0 ! c==> c<= b2 b0 c= * f1 b2 * b1 b2 cis_path f0 f1 b0 f2
- ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) |- (((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) /\ ((((face_map H) o (node_map H)) (p n)) = (((face_map H) o (node_map H)) (p n))))
T c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c/\ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 co * part cface_map f1 * part cnode_map f1 * f2 f3
+ ((p (SUC n)) = ((edge_map H) (p n))), ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- ((\m'. ((((is_path (opposite_hypermap H)) (\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n)))))) m') /\ ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))))) (NUMERAL _0)) = (p (NUMERAL _0))) /\ (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((edge_map H) (p n))))) m') = (p (SUC n)))))) (SUC (SUC m)))
T c==> c= * f0 cSUC f1 cedge_map f2 * f0 f1 c==> c= * f3 f4 * f0 f1 c==> c= * f3 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> cis_path copposite_hypermap f2 f3 f4 * / c/\ cis_path copposite_hypermap f2 / cCOND c<= b1 f4 * f3 b1 cCOND c= b1 c+ f4 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f0 f1 b0 c/\ c= * / cCOND c<= b1 f4 * f3 b1 cCOND c= b1 c+ f4 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f0 f1 cNUMERAL c_0 * f0 cNUMERAL c_0 c= * / cCOND c<= b1 f4 * f3 b1 cCOND c= b1 c+ f4 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f0 f1 b0 * f0 cSUC f1 cSUC cSUC f4
- |- (((!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))) ==> ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))) e')) = ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cnode_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND f1 f5 b0 * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cnode_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND f1 f5 b0 f6 * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cnode_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND f1 f5 b0 f6
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = ((node_map H) (p n)))) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) = ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))
T c= c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3
+ |- ((\g'. (!t'. (!e'. (((i = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 b1 c==> c==> c~ b0 c= cnode_map f2 * f3 f4 b2 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND b0 b1 b2 f5
+ |- ((((i <= m) ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i)) = T)) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i))) = ((i <= m) ==> T))) = (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) i) = (q i))) = ((i <= m) ==> T)))
T c= c==> c==> c<= f0 f1 c= c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 f0 * f2 f0 cT c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 f0 * f2 f0 c==> c<= f0 f1 cT c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 f0 * f2 f0 c==> c<= f0 f1 cT
+ |- ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (q m)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (q m))) ((face_map H) (p n))) = (((COND g') t') e')))))
T c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f0 f4 c==> c==> c~ f1 c= cface_map f2 * f5 f6 f7 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f0 cface_map f2 * f5 f6 cCOND f1 f4 f7
+ ((((is_path H) p) n) /\ (((go_one_step H) (p n)) (p (SUC n)))), ((((is_path H) p) n) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))))), (((is_path H) p) n) |- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))
T c==> c/\ cis_path f0 f1 f2 cgo_one_step f0 * f1 f2 * f1 cSUC f2 c==> c==> cis_path f0 f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 c==> cis_path f0 f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2
+ |- (T = (((!x. (((node_map H) ((inverse (node_map H)) x)) = x)) /\ (!x. (((inverse (node_map H)) ((node_map H) x)) = x))) ==> (((face_map H) (p n)) = ((face_map H) ((node_map H) ((inverse (node_map H)) (p n)))))))
T c= cT c==> c/\ ! c= cnode_map f0 cinverse * part cnode_map f0 b0 b0 ! c= cinverse * part cnode_map f0 cnode_map f0 b0 b0 c= cface_map f0 * f1 f2 cface_map f0 cnode_map f0 cinverse * part cnode_map f0 * f1 f2
+ ((q m) = (p n)) |- ((((go_one_step (opposite_hypermap H)) (p n)) ((inverse (node_map H)) (p n))) = (((go_one_step (opposite_hypermap H)) (((COND (m <= m)) (q m)) (((COND (m = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))) (((COND ((SUC m) <= m)) (q (SUC m))) (((COND ((SUC m) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))))
T c==> c= * f0 f1 * f2 f3 c= cgo_one_step copposite_hypermap f4 * f2 f3 cinverse * part cnode_map f4 * f2 f3 cgo_one_step copposite_hypermap f4 cCOND c<= f1 f1 * f0 f1 cCOND c= f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cedge_map f4 * f2 f3 cCOND c<= cSUC f1 f1 * f0 cSUC f1 cCOND c= cSUC f1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f2 f3 cedge_map f4 * f2 f3
+ |- ((\q'. (((i <= m) = p') ==> ((p' ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i)) = q')) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i))) = (p' ==> q'))))) q')
T * / c==> c= c<= f0 f1 f2 c==> c==> f2 c= c= * / cCOND c<= b1 f1 * f3 b1 cCOND c= b1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 f0 * f3 f0 b0 c= c==> c<= f0 f1 c= * / cCOND c<= b1 f1 * f3 b1 cCOND c= b1 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 f0 * f3 f0 c==> f2 b0 f7
+ |- (((i <= m) = p') ==> ((p' ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i)) = q')) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i))) = (p' ==> q'))))
T c==> c= c<= f0 f1 f2 c==> c==> f2 c= c= * / cCOND c<= b0 f1 * f3 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 f0 * f3 f0 f7 c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f3 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cface_map f4 * f5 f6 f0 * f3 f0 c==> f2 f7
- |- ((real_of_num (NUMERAL (BIT1 _0))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (((go_one_step H) (p n)) (p (SUC n))) |- ((?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> cgo_one_step f0 * f1 f2 * f1 cSUC f2 c==> c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2
+ |- (((node_map H) (p n)) = ((face_map (opposite_hypermap H)) (((face_map H) o (node_map H)) (p n))))
T c= cnode_map f0 * f1 f2 cface_map copposite_hypermap f0 co * part cface_map f0 * part cnode_map f0 * f1 f2
+ ((p (SUC n)) = ((edge_map H) (p n))), ((q m) = (p n)), ((q (NUMERAL _0)) = (p (NUMERAL _0))), (((is_path (opposite_hypermap H)) q) m) |- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))
T c==> c= * f0 cSUC f1 cedge_map f2 * f0 f1 c==> c= * f3 f4 * f0 f1 c==> c= * f3 cNUMERAL c_0 * f0 cNUMERAL c_0 c==> cis_path copposite_hypermap f2 f3 f4 c? / c? / c/\ cis_path copposite_hypermap f2 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f0 cNUMERAL c_0 c= * b0 b1 * f0 cSUC f1
+ |- ((\H. (((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H))))))) H)
T * / c/\ c= * part cedge_map b0 * * part co * part cinverse * part cface_map b0 * part cinverse * part cnode_map b0 c/\ c= * part cnode_map b0 * * part co * part cinverse * part cedge_map b0 * part cinverse * part cface_map b0 c= * part cface_map b0 * * part co * part cinverse * part cnode_map b0 * part cinverse * part cedge_map b0 f0
+ |- ((F ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ F) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND F) t') e'))))
T c==> c==> cF c= co * part cface_map f0 * part cnode_map f0 * f1 f2 f3 c==> c==> c~ cF c= cnode_map f0 * f4 f5 f6 c= cCOND c= cSUC cSUC f2 c+ f2 cNUMERAL cBIT1 c_0 co * part cface_map f0 * part cnode_map f0 * f1 f2 cnode_map f0 * f4 f5 cCOND cF f3 f6
+ |- ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (q m)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (q m))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e'))))
T c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= co * part cface_map f1 * part cnode_map f1 * f2 f0 f3 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f4 f5 f6 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f0 cnode_map f1 * f4 f5 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f3 f6
+ |- (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))) i) = (q i))) = ((i <= m) ==> T))
T c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cedge_map f3 * f4 f5 f0 * f2 f0 c==> c<= f0 f1 cT
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ (((go_one_step H) (p n)) (p (SUC n))) |- (((!x. (((\q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))) x) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))) ==> ((?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))) = ((?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))) ==> (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n)))))))))
T c==> cgo_one_step f0 * f1 f2 * f1 cSUC f2 c= c==> ! c==> * / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 f2 b0 c? / c? / c/\ cis_path copposite_hypermap f0 b1 b2 c/\ c= * b1 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b1 b2 * f1 cSUC f2 c==> c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2 c==> c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2
+ |- (T = ((((edge_map H) = ((inverse (face_map H)) o (inverse (node_map H)))) /\ (((node_map H) = ((inverse (edge_map H)) o (inverse (face_map H)))) /\ ((face_map H) = ((inverse (node_map H)) o (inverse (edge_map H)))))) ==> (((edge_map H) (p n)) = ((inverse (face_map H)) ((inverse (node_map H)) (p n))))))
T c= cT c==> c/\ c= * part cedge_map f0 * * part co * part cinverse * part cface_map f0 * part cinverse * part cnode_map f0 c/\ c= * part cnode_map f0 * * part co * part cinverse * part cedge_map f0 * part cinverse * part cface_map f0 c= * part cface_map f0 * * part co * part cinverse * part cnode_map f0 * part cinverse * part cedge_map f0 c= cedge_map f0 * f1 f2 cinverse * part cface_map f0 cinverse * part cnode_map f0 * f1 f2
+ |- (((i <= m) ==> ((((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i)) = q')) ==> (((i <= m) ==> (((\i. (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))) i) = (q i))) = ((i <= m) ==> q')))
T c==> c==> c<= f0 f1 c= c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f0 * f2 f0 f6 c= c==> c<= f0 f1 c= * / cCOND c<= b0 f1 * f2 b0 cCOND c= b0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f0 * f2 f0 c==> c<= f0 f1 f6
- ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) |- ((m + (NUMERAL (BIT1 _0))) = (NUMERAL _0))
T c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= c+ f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0
- (i = (m + (NUMERAL (BIT1 _0)))) |- ((m + (NUMERAL (BIT1 _0))) = i)
T c==> c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= c+ f1 cNUMERAL cBIT1 c_0 f0
- |- ((((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308610)) /\ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _8308610)) \/ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_int _8308610)) \/ ((((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ (((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0)))))))))) = (~ (((int_le (int_of_num (NUMERAL _0))) _8308610) ==> ((~ ((int_le ((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0))))) _8308610)) /\ ((~ ((int_le ((int_add _8308610) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))) _8308610)) /\ ((~ (((int_add _8308610) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0)))))))))))
T c= c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 c\/ c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c/\ c~ cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f0 c/\ c~ cint_le cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 f0 c/\ c~ c= cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0
- T |- (T = T)
T c==> cT c= cT cT
- |- ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cnode_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND b0 b1 b2 f4
- |- (FINITE (dart H))
T cFINITE * part cdart f0
- (~ (i <= m)) |- ((~ (i <= m)) /\ ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))))
T c==> c~ c<= f0 f1 c/\ c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) |- (((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) ==> ((\x. (((face_map H) ((inverse (face_map H)) x)) = x)) x)) = ((\x. (((face_map H) ((inverse (face_map H)) x)) = x)) x))
T c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= c==> ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 * / c= cface_map f0 cinverse * part cface_map f0 b0 b0 f1 * / c= cface_map f0 cinverse * part cface_map f0 b0 b0 f1
- (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) |- ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) /\ F)
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- (~ (i <= m)) |- ((i <= m) = F)
T c==> c~ c<= f0 f1 c= c<= f0 f1 cF
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) |- ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) /\ F)
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cface_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND f1 b0 b1 f5
- |- ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))))
T c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cedge_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cedge_map f3 * f4 f5
- |- ((real_neg (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((go_one_step H) (p n)) (p (SUC n))) |- ((((go_one_step H) (p n)) (p (SUC n))) = T)
T c==> cgo_one_step f0 * f1 f2 * f1 cSUC f2 c= cgo_one_step f0 * f1 f2 * f1 cSUC f2 cT
- (~ (i = (m + (NUMERAL (BIT1 _0))))) |- ((i = (m + (NUMERAL (BIT1 _0)))) = F)
T c==> c~ c= f0 c+ f1 cNUMERAL cBIT1 c_0 c= c= f0 c+ f1 cNUMERAL cBIT1 c_0 cF
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((int_le (int_of_num (NUMERAL _0))) _8308612) ==> (((int_add _8308612) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add _8308612) (int_of_num (NUMERAL (BIT1 _0))))))
T c==> cint_le cint_of_num cNUMERAL c_0 f0 c= cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0
- |- ((((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0))))) = ((SUC m) = (m + (NUMERAL (BIT1 _0)))))
T c= c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
- ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- ((\x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))) x)
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 * / c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 f1
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((~ ((SUC (SUC m)) <= m)) /\ ((~ ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) /\ ((SUC m) = (m + (NUMERAL (BIT1 _0))))))
T c/\ c~ c<= cSUC cSUC f0 f0 c/\ c~ c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
- ((m + (NUMERAL (BIT1 _0))) = (SUC (SUC m))) |- ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))
T c==> c= c+ f0 cNUMERAL cBIT1 c_0 cSUC cSUC f0 c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e'))))
T c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cedge_map f1 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f4 f5
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308610)) /\ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _8308610)) \/ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_int _8308610)) \/ ((((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ (((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0)))))))))))) |- ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))))
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 c\/ c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
- (~ F) |- ((F = F) = T)
T c==> c~ cF c= c= cF cF cT
- |- (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e')))
T c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cedge_map f1 * f2 f3 f4 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 f4
- |- (((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (p n)) = ((inverse (node_map H)) (p n)))) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e')))) = (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e'))))
T c= c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 cinverse * part cnode_map f1 * f2 f3 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cface_map f1 * f2 f3 f4 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cface_map f1 * f2 f3 f4 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 f4
- |- (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))))
T c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0
- |- ((~ ((int_le ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0))))) (int_of_num m))) /\ ((~ ((int_le ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (int_of_num m))) /\ ((~ (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0))))))))
T c/\ c~ cint_le cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num f0 c/\ c~ cint_le cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_of_num f0 c/\ c~ c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))))) |- F
T c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- |- (((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (p n)) = ((inverse (node_map H)) (p n))))
T c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 cinverse * part cnode_map f1 * f2 f3
- ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))) ==> F), ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- F
T c==> c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- F |- (F = T)
T c==> cF c= cF cT
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e'))))
T c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cface_map f1 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f4 f5
- (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))), (((go_one_step H) (p n)) (p (SUC n))) |- ((?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n)))))) /\ (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 c==> cgo_one_step f0 * f1 f2 * f1 cSUC f2 c/\ c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 f2 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f1 cNUMERAL c_0 c= * b0 b1 * f1 cSUC f2
- |- ((~ ((SUC m) <= m)) /\ ((~ ((SUC (SUC m)) <= m)) /\ ((~ ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) /\ ((SUC m) = (m + (NUMERAL (BIT1 _0)))))))
T c/\ c~ c<= cSUC f0 f0 c/\ c~ c<= cSUC cSUC f0 f0 c/\ c~ c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
- (~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) |- (((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = F)
T c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cF
- |- (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND (i <= m)) t') e'))))
T c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7
- |- (((~ ((m + (NUMERAL (BIT1 _0))) = (SUC (SUC m)))) ==> (((m + (NUMERAL (BIT1 _0))) = (SUC (SUC m))) = F)) = (((m + (NUMERAL (BIT1 _0))) = (SUC (SUC m))) = F))
T c= c==> c~ c= c+ f0 cNUMERAL cBIT1 c_0 cSUC cSUC f0 c= c= c+ f0 cNUMERAL cBIT1 c_0 cSUC cSUC f0 cF c= c= c+ f0 cNUMERAL cBIT1 c_0 cSUC cSUC f0 cF
- |- ((((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308610)) /\ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _8308610)) \/ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_int _8308610)) \/ ((((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ (((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0)))))))))))) ==> F) ==> (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308610)) /\ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _8308610)) \/ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_int _8308610)) \/ ((((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ (((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0)))))))))))) = (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308610)) /\ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _8308610)) \/ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_int _8308610)) \/ ((((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ (((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))))))))))
T c= c==> c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 c\/ c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 cF c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 c\/ c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 c\/ c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0)))) |- ((m + (NUMERAL (BIT1 _0))) = (SUC (SUC m)))
T c==> c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 c= c+ f0 cNUMERAL cBIT1 c_0 cSUC cSUC f0
- |- ((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))
T c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4
- ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 c= cface_map f0 f1 cinverse * part cnode_map f0 cinverse * part cedge_map f0 f1
- (m = (m + (NUMERAL (BIT1 _0)))) |- ((m + (NUMERAL (BIT1 _0))) = m)
T c==> c= f0 c+ f0 cNUMERAL cBIT1 c_0 c= c+ f0 cNUMERAL cBIT1 c_0 f0
- |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _8308612) ==> (((int_add _8308612) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add _8308612) (int_of_num (NUMERAL (BIT1 _0))))))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c= cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0
- |- ((real_of_num (NUMERAL (BIT0 (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e'))))) = ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e')))))
T c= c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cedge_map f1 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f4 f5 c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cedge_map f1 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f4 f5
- |- (((!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cnode_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND f1 b0 b1 * / ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cnode_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND f1 b0 b1 f5 * / ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cnode_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND f1 b0 b1 f5
- |- ((((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))))) = ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))))
T c= c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 c= cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 c= cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4
- ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) |- (((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) /\ (((inverse (node_map H)) (p n)) = ((inverse (node_map H)) (p n))))
T c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c/\ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 cinverse * part cnode_map f1 * f2 f3
- |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _8308610) ==> ((~ ((int_le ((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0))))) _8308610)) /\ ((~ ((int_le ((int_add _8308610) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))) _8308610)) /\ ((~ (((int_add _8308610) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0)))))))))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c/\ c~ cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f0 c/\ c~ cint_le cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 f0 c/\ c~ c= cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0
- |- (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND (i <= m)) (q i)) e')))
T c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 f5 c= cCOND c<= f0 f1 * f6 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND c<= f0 f1 * f6 f0 f5
- |- (((edge_map H) o ((node_map H) o (face_map H))) = I)
T c= * * part co * part cedge_map f0 * * part co * part cnode_map f0 * part cface_map f0 part cI
- |- (((m + (NUMERAL (BIT1 _0))) = (SUC (SUC m))) = F)
T c= c= c+ f0 cNUMERAL cBIT1 c_0 cSUC cSUC f0 cF
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))) = ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))))
T c= c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 c= cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 c= cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND c<= f0 f1 * f5 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4
- |- (((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (p n)) = (((face_map H) o (node_map H)) (p n))))
T c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 co * part cface_map f1 * part cnode_map f1 * f2 f3
- (((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))) ==> F), ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))))) |- F
T c==> c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- |- ((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))
T c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4
- |- ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))))
T c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3
- |- ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cedge_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND b0 b1 b2 f4
- |- ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))) e')
T * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cface_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND f1 f5 b0 f6
- |- ((FINITE (dart H)) = T)
T c= cFINITE * part cdart f0 cT
- (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308612)) /\ (((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))))))) |- (((real_ge (real_of_int _8308612)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e'))))
T c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f4 f5
- ((!x. (((face_map H) ((inverse (face_map H)) x)) = x)) /\ (!x. (((inverse (face_map H)) ((face_map H) x)) = x))) |- (((face_map H) ((inverse (face_map H)) x)) = x)
T c==> c/\ ! c= cface_map f0 cinverse * part cface_map f0 b0 b0 ! c= cinverse * part cface_map f0 cface_map f0 b0 b0 c= cface_map f0 cinverse * part cface_map f0 f1 f1
- |- ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))
T c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((m + (NUMERAL (BIT1 _0))) = (NUMERAL _0)) |- ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))
T c==> c= c+ f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0
- |- ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cface_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND b0 b1 b2 f4
- ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- (!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x))))
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0
- |- ((permutes (edge_map H)) (dart H))
T cpermutes * part cedge_map f0 * part cdart f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((i <= m) ==> ((q i) = (q i))) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND (i <= m)) (q i)) e')))) = (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND (i <= m)) (q i)) e'))))
T c= c==> c==> c<= f0 f1 c= * f2 f0 * f2 f0 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cedge_map f3 * f4 f5 f6 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cedge_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 f6 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cedge_map f3 * f4 f5 f6 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cedge_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 f6
- |- (((!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))) ==> ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))) e')) = ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cface_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND f1 f5 b0 * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cface_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND f1 f5 b0 f6 * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cface_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND f1 f5 b0 f6
- |- (((!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e')))))) ==> ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e')))))) e')) = ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cedge_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND f1 f5 b0 * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cedge_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND f1 f5 b0 f6 * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cedge_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND f1 f5 b0 f6
- (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308610)) /\ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _8308610)) \/ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_int _8308610)) \/ ((((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ (((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0)))))))))))) |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308610)) /\ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _8308610)) \/ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_int _8308610)) \/ ((((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ (((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0)))))))))))) /\ F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 c\/ c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c/\ c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 c\/ c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cedge_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND f1 b0 b1 * / ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cedge_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND f1 b0 b1 f5 * / ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cedge_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND f1 b0 b1 f5
- |- (((NUMERAL (BIT0 (BIT1 _0))) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT1 _0))))
T c= c* cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- ((m + (NUMERAL (BIT1 _0))) = i) |- (i = (m + (NUMERAL (BIT1 _0))))
T c==> c= c+ f0 cNUMERAL cBIT1 c_0 f1 c= f1 c+ f0 cNUMERAL cBIT1 c_0
- ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- ((\x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) x)
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 * / c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 f1
- |- (((int_le (int_of_num (NUMERAL _0))) _8308610) ==> ((~ ((int_le ((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0))))) _8308610)) /\ ((~ ((int_le ((int_add _8308610) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))) _8308610)) /\ ((~ (((int_add _8308610) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add _8308610) (int_of_num (NUMERAL (BIT1 _0)))))))))
T c==> cint_le cint_of_num cNUMERAL c_0 f0 c/\ c~ cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f0 c/\ c~ cint_le cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 f0 c/\ c~ c= cint_add f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0
- |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num m)) ==> ((~ ((int_le ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0))))) (int_of_num m))) /\ ((~ ((int_le ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (int_of_num m))) /\ ((~ (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0))))))))) = ((~ ((int_le ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0))))) (int_of_num m))) /\ ((~ ((int_le ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (int_of_num m))) /\ ((~ (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c/\ c~ cint_le cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num f0 c/\ c~ cint_le cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_of_num f0 c/\ c~ c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c/\ c~ cint_le cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num f0 c/\ c~ cint_le cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_of_num f0 c/\ c~ c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((~ ((int_le ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0))))) (int_of_num m))) /\ ((~ ((int_le ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (int_of_num m))) /\ ((~ (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))))) /\ (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))))))) = ((~ ((SUC m) <= m)) /\ ((~ ((SUC (SUC m)) <= m)) /\ ((~ ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) /\ ((SUC m) = (m + (NUMERAL (BIT1 _0))))))))
T c= c/\ c~ cint_le cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_of_num f0 c/\ c~ cint_le cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_of_num f0 c/\ c~ c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT0 cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c/\ c~ c<= cSUC f0 f0 c/\ c~ c<= cSUC cSUC f0 f0 c/\ c~ c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
- |- ((((i <= m) ==> ((q i) = (q i))) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND (i <= m)) (q i)) e')))) = (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND (i <= m)) (q i)) e'))))
T c= c==> c==> c<= f0 f1 c= * f2 f0 * f2 f0 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 f6 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 f6 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 f6 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 f6
- (~ F) |- (F = F)
T c==> c~ cF c= cF cF
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))), (((go_one_step H) (p n)) (p (SUC n))) |- ((?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p n))))) /\ (?q. (?m. ((((is_path (opposite_hypermap H)) q) m) /\ (((q (NUMERAL _0)) = (p (NUMERAL _0))) /\ ((q m) = (p (SUC n))))))))
T c==> c? / c/\ cis_path copposite_hypermap f0 f1 b0 c/\ c= * f1 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * f1 b0 * f2 f3 c==> cgo_one_step f0 * f2 f3 * f2 cSUC f3 c/\ c? / c/\ cis_path copposite_hypermap f0 f1 b0 c/\ c= * f1 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * f1 b0 * f2 f3 c? / c? / c/\ cis_path copposite_hypermap f0 b0 b1 c/\ c= * b0 cNUMERAL c_0 * f2 cNUMERAL c_0 c= * b0 b1 * f2 cSUC f3
- |- ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))
T c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5
- |- (((!g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cedge_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND b0 b1 b2 * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cedge_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND b0 b1 b2 f4 * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cedge_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND b0 b1 b2 f4
- |- ((((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c= creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) |- (((m + (NUMERAL (BIT1 _0))) = (NUMERAL _0)) = F)
T c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= c= c+ f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((!x. (((edge_map H) x) = ((inverse (face_map H)) ((inverse (node_map H)) x)))) /\ ((!x. (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))) /\ (!x. (((face_map H) x) = ((inverse (node_map H)) ((inverse (edge_map H)) x)))))) |- (((node_map H) x) = ((inverse (edge_map H)) ((inverse (face_map H)) x)))
T c==> c/\ ! c= cedge_map f0 b0 cinverse * part cface_map f0 cinverse * part cnode_map f0 b0 c/\ ! c= cnode_map f0 b0 cinverse * part cedge_map f0 cinverse * part cface_map f0 b0 ! c= cface_map f0 b0 cinverse * part cnode_map f0 cinverse * part cedge_map f0 b0 c= cnode_map f0 f1 cinverse * part cedge_map f0 cinverse * part cface_map f0 f1
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e')))))
T c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cedge_map f2 * f3 f4 f6 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND f1 f5 f6
- (~ (i <= m)) |- ((~ (i <= m)) /\ ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))
T c==> c~ c<= f0 f1 c/\ c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4
- |- (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) e')))
T c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 f5 c= cCOND c<= f0 f1 * f6 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND c<= f0 f1 * f6 f0 f5
- (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))) |- ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))) /\ F)
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) \/ ((((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_of_num (NUMERAL (BIT1 _0))) = (real_of_num (NUMERAL _0)))) \/ (((real_ge (real_of_int _8308610)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))) ==> F)
T c==> c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL c_0 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c= creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((~ ((SUC (SUC m)) = (m + (NUMERAL (BIT1 _0))))) /\ ((SUC m) = (m + (NUMERAL (BIT1 _0)))))
T c/\ c~ c= cSUC cSUC f0 c+ f0 cNUMERAL cBIT1 c_0 c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
- (~ (i <= m)) |- ((~ (i <= m)) /\ ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))))
T c==> c~ c<= f0 f1 c/\ c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e')))))) e')
T * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cedge_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND f1 f5 b0 f6
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cface_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND f1 b0 b1 * / ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cface_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND f1 b0 b1 f5 * / ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cface_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cface_map f2 * f3 f4 cCOND f1 b0 b1 f5
- |- ((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))))
T c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4
- |- ((((i <= m) ==> ((q i) = (q i))) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) e')))) = (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n)))) = (((COND (i <= m)) (q i)) e'))))
T c= c==> c==> c<= f0 f1 c= * f2 f0 * f2 f0 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f6 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 f6 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 f6 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f3 * f4 f5 cface_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 f6
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ T) |- (T = F)
T c==> c~ cT c= cT cF
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- |- (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND (i <= m)) (q i)) e')))
T c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 f5 c= cCOND c<= f0 f1 * f6 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND c<= f0 f1 * f6 f0 f5
- |- ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))))
T c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3
- |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308610)) /\ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _8308610)) \/ (((real_le ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_int _8308610)) \/ ((((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) = ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ (((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308610)) (real_of_num (NUMERAL (BIT1 _0)))))))))))) ==> F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_int f0 c\/ c= creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 cF
- T |- ((T = T) = T)
T c==> cT c= c= cT cT cT
- |- (((!g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cface_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND b0 b1 b2 * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cface_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND b0 b1 b2 f4 * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= cinverse * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cface_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND b0 b1 b2 f4
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) = (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= c= creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((\i. (f i)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))))
T c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5 cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f3 * part cnode_map f3 * f4 f5 cnode_map f3 * f4 f5
- |- ((((i <= m) = (i <= m)) ==> (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND (i <= m)) t') e'))))) = (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))) = (((COND (i <= m)) t') e')))))
T c= c==> c= c<= f0 f1 c<= f0 f1 c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7 c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f4 * f5 f6 cedge_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7
- |- (((m + (NUMERAL (BIT1 _0))) = m) = F)
T c= c= c+ f0 cNUMERAL cBIT1 c_0 f0 cF
- |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num m)) ==> (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))))) = (((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num m)) (int_of_num (NUMERAL (BIT1 _0))))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0
- |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308612)) /\ (((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) e')))
T c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cface_map f1 * f2 f3 f4 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 f4
- (~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) |- (((~ ((m + (NUMERAL (BIT1 _0))) = (NUMERAL _0))) ==> (((m + (NUMERAL (BIT1 _0))) = (NUMERAL _0)) = F)) = (((m + (NUMERAL (BIT1 _0))) = (NUMERAL _0)) = F))
T c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= c==> c~ c= c+ f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 c= c= c+ f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF c= c= c+ f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
- (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308612)) /\ (((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))))))) |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308612)) /\ (((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))))))) /\ F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 c/\ c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- ((\e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))) e')
T * / c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cnode_map f2 * f3 f4 b0 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND f1 f5 b0 f6
- |- (((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e'))))) = ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((face_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((face_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e')))))
T c= c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cface_map f1 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f4 f5 c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cinverse * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cface_map f1 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cface_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f4 f5
- |- ((\t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> (((inverse (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((edge_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= cinverse * part cnode_map f2 * f3 f4 b0 c==> c==> c~ f1 c= cedge_map f2 * f3 f4 b1 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f2 * f3 f4 cedge_map f2 * f3 f4 cCOND f1 b0 b1 f5
- |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _8308612)) /\ (((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) \/ ((real_le ((real_add ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _8308612)) (real_of_num (NUMERAL (BIT1 _0))))))))) ==> F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 cF
- |- ((((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((edge_map H) (p n)) = ((edge_map H) (p n)))) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))))) = ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ((inverse (node_map H)) (p n))) ((edge_map H) (p n)))))
T c= c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cedge_map f1 * f2 f3 cedge_map f1 * f2 f3 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 cinverse * part cnode_map f1 * f2 f3 cedge_map f1 * f2 f3
- |- (((!g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cnode_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND b0 b1 b2 * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cnode_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND b0 b1 b2 f4 * / ! ! c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 b0 c==> c==> b0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 b1 c==> c==> c~ b0 c= cnode_map f1 * f2 f3 b2 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND b0 b1 b2 f4
- |- (((i <= m) ==> ((q i) = t')) ==> (((~ (i <= m)) ==> ((((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = e')) ==> ((((COND (i <= m)) (q i)) (((COND (i = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n)))) = (((COND (i <= m)) t') e'))))
T c==> c==> c<= f0 f1 c= * f2 f0 f3 c==> c==> c~ c<= f0 f1 c= cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 f7 c= cCOND c<= f0 f1 * f2 f0 cCOND c= f0 c+ f1 cNUMERAL cBIT1 c_0 co * part cface_map f4 * part cnode_map f4 * f5 f6 cnode_map f4 * f5 f6 cCOND c<= f0 f1 f3 f7
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = g') ==> ((g' ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ g') ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND g') t') e')))))
T c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f1 c==> c==> f1 c= co * part cface_map f2 * part cnode_map f2 * f3 f4 f5 c==> c==> c~ f1 c= cnode_map f2 * f3 f4 f6 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f2 * part cnode_map f2 * f3 f4 cnode_map f2 * f3 f4 cCOND f1 f5 f6
- (~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) |- (~ ((m + (NUMERAL (BIT1 _0))) = (NUMERAL _0)))
T c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c~ c= c+ f0 cNUMERAL cBIT1 c_0 cNUMERAL c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) = ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e'))))) = ((((NUMERAL _0) = (m + (NUMERAL (BIT1 _0)))) ==> ((((face_map H) o (node_map H)) (p n)) = t')) ==> (((~ ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) ==> (((node_map H) (p n)) = e')) ==> ((((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) (((face_map H) o (node_map H)) (p n))) ((node_map H) (p n))) = (((COND ((NUMERAL _0) = (m + (NUMERAL (BIT1 _0))))) t') e')))))
T c= c==> c= c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f4 f5 c==> c==> c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= co * part cface_map f1 * part cnode_map f1 * f2 f3 f4 c==> c==> c~ c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 c= cnode_map f1 * f2 f3 f5 c= cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 co * part cface_map f1 * part cnode_map f1 * f2 f3 cnode_map f1 * f2 f3 cCOND c= cNUMERAL c_0 c+ f0 cNUMERAL cBIT1 c_0 f4 f5
- |- (((real_lt (real_of_num m)) (real_of_num n)) = (m < n))
T c= creal_lt creal_of_num f0 creal_of_num f1 c< f0 f1
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
