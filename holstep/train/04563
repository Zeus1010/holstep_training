N Lp_ineqs_proofs.inverse_f_fan_pair_ext_add_diag
C |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> ((fully_surrounded (V , E)) ==> (!v. (!w. ((LET (\f. (LET_END ((LET (\w'. (LET_END ((((v , w) IN (dart_of_fan (V , E))) /\ ((NUMERAL (BIT1 (BIT1 _0))) < (CARD f))) ==> (((inverse (f_fan_pair_ext (V , ((add_diag (V , E)) (v , w))))) (w' , w)) = (((POWER (inverse (f_fan_pair_ext (V , E)))) (NUMERAL (BIT0 (BIT1 _0)))) (v , w))))))) (((((sigma_fan (vec (NUMERAL _0))) V) E) v) w))))) ((face (hypermap_of_fan (V , E))) (v , w)))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 c==> cfully_surrounded c, f0 f1 ! ! cLET / cLET_END cLET / cLET_END c==> c/\ cIN c, b0 b1 * part cdart_of_fan c, f0 f1 c< cNUMERAL cBIT1 cBIT1 c_0 cCARD b2 c= cinverse * part cf_fan_pair_ext c, f0 * * part cadd_diag c, f0 f1 c, b0 b1 c, b3 b1 cPOWER * part cinverse * part cf_fan_pair_ext c, f0 f1 cNUMERAL cBIT0 cBIT1 c_0 c, b0 b1 csigma_fan cvec cNUMERAL c_0 f0 f1 b0 b1 * * part cface chypermap_of_fan c, f0 f1 c, b0 b1
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D SELECT_AX
A |- (!P. (!x. ((P x) ==> (P (@ P)))))
T c==> * f0 f1 * f0 c@ f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D o_THM
A |- (!f. (!g. (!x. (((f o g) x) = (f (g x))))))
T c= co f0 f1 f2 * f0 * f1 f2
D I_THM
A |- (!x. ((I x) = x))
T c= cI f0 f0
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D GABS_DEF
A |- (!P. ((GABS P) = (@ P)))
T c= cGABS f0 c@ f0
D GEQ_DEF
A |- (!a. (!b. (((GEQ a) b) = (a = b))))
T c= cGEQ f0 f1 c= f0 f1
D pair_RECURSION
A |- (!PAIR'. (?fn. (!a0. (!a1. ((fn (a0 , a1)) = ((PAIR' a0) a1))))))
T c? / ! ! c= * b0 c, b1 b2 * * f0 b1 b2
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D Ssrnat.add0n
A |- (!n. (((NUMERAL _0) + n) = n))
T c= c+ cNUMERAL c_0 f0 f0
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D ADD_ASSOC
A |- (!m. (!n. (!p. ((m + (n + p)) = ((m + n) + p)))))
T c= c+ f0 c+ f1 f2 c+ c+ f0 f1 f2
D ADD_AC
A |- (((m + n) = (n + m)) /\ ((((m + n) + p) = (m + (n + p))) /\ ((m + (n + p)) = (n + (m + p)))))
T c/\ c= c+ f0 f1 c+ f1 f0 c/\ c= c+ c+ f0 f1 f2 c+ f0 c+ f1 f2 c= c+ f0 c+ f1 f2 c+ f1 c+ f0 f2
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D ADD1
A |- (!m. ((SUC m) = (m + (NUMERAL (BIT1 _0)))))
T c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
D Ssrnat.mul0n
A |- (!n. (((NUMERAL _0) * n) = (NUMERAL _0)))
T c= c* cNUMERAL c_0 f0 cNUMERAL c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D MULT_CLAUSES
A |- ((!n. (((NUMERAL _0) * n) = (NUMERAL _0))) /\ ((!m. ((m * (NUMERAL _0)) = (NUMERAL _0))) /\ ((!n. (((NUMERAL (BIT1 _0)) * n) = n)) /\ ((!m. ((m * (NUMERAL (BIT1 _0))) = m)) /\ ((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) /\ (!m. (!n. ((m * (SUC n)) = (m + (m * n))))))))))
T c/\ ! c= c* cNUMERAL c_0 b0 cNUMERAL c_0 c/\ ! c= c* b0 cNUMERAL c_0 cNUMERAL c_0 c/\ ! c= c* cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= c* b0 cNUMERAL cBIT1 c_0 b0 c/\ ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1
D Ssrnat.mul1n
A |- (!n. (((NUMERAL (BIT1 _0)) * n) = n))
T c= c* cNUMERAL cBIT1 c_0 f0 f0
D LEFT_ADD_DISTRIB
A |- (!m. (!n. (!p. ((m * (n + p)) = ((m * n) + (m * p))))))
T c= c* f0 c+ f1 f2 c+ c* f0 f1 c* f0 f2
D MULT_AC
A |- (((m * n) = (n * m)) /\ ((((m * n) * p) = (m * (n * p))) /\ ((m * (n * p)) = (n * (m * p)))))
T c/\ c= c* f0 f1 c* f1 f0 c/\ c= c* c* f0 f1 f2 c* f0 c* f1 f2 c= c* f0 c* f1 f2 c* f1 c* f0 f2
D Ssrnat.expnS
A |- (!m. (!n. ((m EXP (SUC n)) = (m * (m EXP n)))))
T c= cEXP f0 cSUC f1 c* f0 cEXP f0 f1
D Ssrnat.expn0
A |- (!m. ((m EXP (NUMERAL _0)) = (NUMERAL (BIT1 _0))))
T c= cEXP f0 cNUMERAL c_0 cNUMERAL cBIT1 c_0
D EXP_2
A |- (!n. ((n EXP (NUMERAL (BIT0 (BIT1 _0)))) = (n * n)))
T c= cEXP f0 cNUMERAL cBIT0 cBIT1 c_0 c* f0 f0
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_NZ
A |- (!n. (((NUMERAL _0) < n) = (~ (n = (NUMERAL _0)))))
T c= c< cNUMERAL c_0 f0 c~ c= f0 cNUMERAL c_0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D SUB_ELIM_THM
A |- ((P (a - b)) = (!d. (((a = (b + d)) \/ ((a < b) /\ (d = (NUMERAL _0)))) ==> (P d))))
T c= * f0 c- f1 f2 ! c==> c\/ c= f1 c+ f2 b0 c/\ c< f1 f2 c= b0 cNUMERAL c_0 * f0 b0
D ARITH_ZERO
A |- (((NUMERAL (NUMERAL _0)) = (NUMERAL _0)) /\ ((BIT0 _0) = _0))
T c/\ c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0 c= cBIT0 c_0 c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D ARITH_MULT
A |- ((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) /\ (((_0 * _0) = _0) /\ ((!n. ((_0 * (BIT0 n)) = _0)) /\ ((!n. ((_0 * (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))))))
T c/\ ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 c/\ c= c* c_0 c_0 c_0 c/\ ! c= c* c_0 cBIT0 b0 c_0 c/\ ! c= c* c_0 cBIT1 b0 c_0 c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
D ARITH_EXP
A |- ((!m. (!n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n))))) /\ (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))))))
T c/\ ! ! c= cEXP cNUMERAL b0 cNUMERAL b1 cNUMERAL cEXP b0 b1 c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
D REAL_ADD_SYM
A |- (!x. (!y. (((real_add x) y) = ((real_add y) x))))
T c= creal_add f0 f1 creal_add f1 f0
D REAL_ADD_ASSOC
A |- (!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z)))))
T c= creal_add f0 creal_add f1 f2 creal_add creal_add f0 f1 f2
D REAL_ADD_LID
A |- (!x. (((real_add (real_of_num (NUMERAL _0))) x) = x))
T c= creal_add creal_of_num cNUMERAL c_0 f0 f0
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_MUL_LID
A |- (!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x))
T c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 f0 f0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_ADD_RID
A |- (!x. (((real_add x) (real_of_num (NUMERAL _0))) = x))
T c= creal_add f0 creal_of_num cNUMERAL c_0 f0
D REAL_ADD_RINV
A |- (!x. (((real_add x) (real_neg x)) = (real_of_num (NUMERAL _0))))
T c= creal_add f0 creal_neg f0 creal_of_num cNUMERAL c_0
D REAL_MUL_RZERO
A |- (!x. (((real_mul x) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0))))
T c= creal_mul f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D REAL_NEG_ADD
A |- (!x. (!y. ((real_neg ((real_add x) y)) = ((real_add (real_neg x)) (real_neg y)))))
T c= creal_neg creal_add f0 f1 creal_add creal_neg f0 creal_neg f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_LE_LT
A |- (!x. (!y. (((real_le x) y) = (((real_lt x) y) \/ (x = y)))))
T c= creal_le f0 f1 c\/ creal_lt f0 f1 c= f0 f1
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D Real_ext.REAL_PROP_POS_ADD2
A |- (!x. (!y. ((((real_lt (real_of_num (NUMERAL _0))) x) /\ ((real_lt (real_of_num (NUMERAL _0))) y)) ==> ((real_lt (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c==> c/\ creal_lt creal_of_num cNUMERAL c_0 f0 creal_lt creal_of_num cNUMERAL c_0 f1 creal_lt creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D int_eq
A |- (!x. (!y. ((x = y) = ((real_of_int x) = (real_of_int y)))))
T c= c= f0 f1 c= creal_of_int f0 creal_of_int f1
D int_le
A |- (!x. (!y. (((int_le x) y) = ((real_le (real_of_int x)) (real_of_int y)))))
T c= cint_le f0 f1 creal_le creal_of_int f0 creal_of_int f1
D int_of_num_th
A |- (!n. ((real_of_int (int_of_num n)) = (real_of_num n)))
T c= creal_of_int cint_of_num f0 creal_of_num f0
D int_add_th
A |- (!x. (!y. ((real_of_int ((int_add x) y)) = ((real_add (real_of_int x)) (real_of_int y)))))
T c= creal_of_int cint_add f0 f1 creal_add creal_of_int f0 creal_of_int f1
D INT_LT_DISCRETE
A |- (!x. (!y. (((int_lt x) y) = ((int_le ((int_add x) (int_of_num (NUMERAL (BIT1 _0))))) y))))
T c= cint_lt f0 f1 cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f1
D INT_NOT_EQ
A |- (!x. (!y. ((~ (x = y)) = (((int_lt x) y) \/ ((int_lt y) x)))))
T c= c~ c= f0 f1 c\/ cint_lt f0 f1 cint_lt f1 f0
D INT_NOT_LE
A |- (!x. (!y. ((~ ((int_le x) y)) = ((int_lt y) x))))
T c= c~ cint_le f0 f1 cint_lt f1 f0
D INT_NOT_LT
A |- (!x. (!y. ((~ ((int_lt x) y)) = ((int_le y) x))))
T c= c~ cint_lt f0 f1 cint_le f1 f0
D INT_OF_NUM_ADD
A |- (!m. (!n. (((int_add (int_of_num m)) (int_of_num n)) = (int_of_num (m + n)))))
T c= cint_add cint_of_num f0 cint_of_num f1 cint_of_num c+ f0 f1
D INT_OF_NUM_EQ
A |- (!m. (!n. (((int_of_num m) = (int_of_num n)) = (m = n))))
T c= c= cint_of_num f0 cint_of_num f1 c= f0 f1
D INT_OF_NUM_LE
A |- (!m. (!n. (((int_le (int_of_num m)) (int_of_num n)) = (m <= n))))
T c= cint_le cint_of_num f0 cint_of_num f1 c<= f0 f1
D INT_OF_NUM_LT
A |- (!m. (!n. (((int_lt (int_of_num m)) (int_of_num n)) = (m < n))))
T c= cint_lt cint_of_num f0 cint_of_num f1 c< f0 f1
D INT_POS
A |- (!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n)))
T cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
D IN_UNION
A |- (!s. (!t. (!x. ((x IN (s UNION t)) = ((x IN s) \/ (x IN t))))))
T c= cIN f0 * * part cUNION f1 f2 c\/ cIN f0 f1 cIN f0 f2
D IN_INSERT
A |- (!x. (!y. (!s. ((x IN (y INSERT s)) = ((x = y) \/ (x IN s))))))
T c= cIN f0 * * part cINSERT f1 f2 c\/ c= f0 f1 cIN f0 f2
D Hypermap.res
A |- (!f. (!s. (!x. ((((res f) s) x) = (((COND (x IN s)) (f x)) x)))))
T c= cres f0 f1 f2 cCOND cIN f2 f1 * f0 f2 f2
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D Fan.POWER_1
A |- (!f. (((POWER f) (NUMERAL (BIT1 _0))) = f))
T c= * * part cPOWER f0 cNUMERAL cBIT1 c_0 f0
D Fan.POWER_2
A |- (!f. (((POWER f) (NUMERAL (BIT0 (BIT1 _0)))) = (f o f)))
T c= * * part cPOWER f0 cNUMERAL cBIT0 cBIT1 c_0 * * part co f0 f0
D Hypermap.COM_POWER
A |- (!n. (!f. (((POWER f) (SUC n)) = (f o ((POWER f) n)))))
T c= * * part cPOWER f0 cSUC f1 * * part co f0 * * part cPOWER f0 f1
D Hypermap_and_fan.INVERSE_F_FAN_PAIR_EXT_EXPLICIT
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> ((inverse (f_fan_pair_ext (V , E))) = ((res (GABS (\f. (!v. (!w. ((GEQ (f (v , w))) ((((((sigma_fan (vec (NUMERAL _0))) V) E) v) w) , v))))))) (dart1_of_fan (V , E)))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 c= * part cinverse * part cf_fan_pair_ext c, f0 f1 * * part cres * part cGABS / ! ! cGEQ * b0 c, b1 b2 c, csigma_fan cvec cNUMERAL c_0 f0 f1 b1 b2 b1 * part cdart1_of_fan c, f0 f1
D Ssrbool.contraNN
A |- (!c. (!b. ((c ==> b) ==> ((~ b) ==> (~ c)))))
T c==> c==> f0 f1 c==> c~ f1 c~ f0
D Ssrbool.negb_or
A |- (!a. (!b. ((~ (a \/ b)) = ((~ a) /\ (~ b)))))
T c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D Ssrnat.posnP
A |- (!n. ((n = (NUMERAL _0)) \/ ((NUMERAL _0) < n)))
T c\/ c= f0 cNUMERAL c_0 c< cNUMERAL c_0 f0
D Ssrnat.subKn
A |- (!m. (!n. ((m <= n) ==> ((n - (n - m)) = m))))
T c==> c<= f0 f1 c= c- f1 c- f1 f0 f0
D Add_triangle.split_fan_face
A |- (!V. (!v. (!w. (!E. (((split_fan_face (V , E)) (v , w)) = (V , ((w INSERT ((((((sigma_fan (vec (NUMERAL _0))) V) E) v) w) INSERT EMPTY)) INSERT E)))))))
T c= csplit_fan_face c, f0 f1 c, f2 f3 c, f0 * * part cINSERT * * part cINSERT f3 * * part cINSERT csigma_fan cvec cNUMERAL c_0 f0 f1 f2 f3 part cEMPTY f1
D Add_triangle.dart_switch
A |- (!V. (!E. (!v. (!w. (((v , w) IN (dart_of_fan (V , E))) = ((w , v) IN (dart_of_fan (V , E))))))))
T c= cIN c, f0 f1 * part cdart_of_fan c, f2 f3 cIN c, f1 f0 * part cdart_of_fan c, f2 f3
D Add_triangle.f_fan_pair_power
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> (!d. (!i. ((d IN (dart1_of_fan (V , E))) ==> ((((POWER (f_fan_pair (V , E))) i) d) = (((POWER (f_fan_pair_ext (V , E))) i) d))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 ! ! c==> cIN b0 * part cdart1_of_fan c, f0 f1 c= cPOWER * part cf_fan_pair c, f0 f1 b1 b0 cPOWER * part cf_fan_pair_ext c, f0 f1 b1 b0
D Add_triangle.fully_surrounded_dart_of_fan_eq
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> ((fully_surrounded (V , E)) ==> ((dart_of_fan (V , E)) = (dart1_of_fan (V , E)))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 c==> cfully_surrounded c, f0 f1 c= * part cdart_of_fan c, f0 f1 * part cdart1_of_fan c, f0 f1
D Add_triangle.sigma_in_dart1
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> (!v. (!w. (((v , w) IN (dart1_of_fan (V , E))) ==> ((v , (((((sigma_fan (vec (NUMERAL _0))) V) E) v) w)) IN (dart1_of_fan (V , E)))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 ! ! c==> cIN c, b0 b1 * part cdart1_of_fan c, f0 f1 cIN c, b0 csigma_fan cvec cNUMERAL c_0 f0 f1 b0 b1 * part cdart1_of_fan c, f0 f1
D Add_triangle.fully_surrounded_diag_not_in_dart
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> ((fully_surrounded (V , E)) ==> (!v. (!w. ((((v , w) IN (dart_of_fan (V , E))) /\ ((NUMERAL (BIT1 (BIT1 _0))) < (CARD ((face (hypermap_of_fan (V , E))) (v , w))))) ==> (~ ((w , (((((sigma_fan (vec (NUMERAL _0))) V) E) v) w)) IN (dart_of_fan (V , E)))))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 c==> cfully_surrounded c, f0 f1 ! ! c==> c/\ cIN c, b0 b1 * part cdart_of_fan c, f0 f1 c< cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_fan c, f0 f1 c, b0 b1 c~ cIN c, b1 csigma_fan cvec cNUMERAL c_0 f0 f1 b0 b1 * part cdart_of_fan c, f0 f1
D Add_triangle.fan_split_fan_face
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> ((fully_surrounded (V , E)) ==> (!v. (!w. (((v , w) IN (dart_of_fan (V , E))) ==> ((FAN ((vec (NUMERAL _0)) , ((split_fan_face (V , E)) (v , w)))) /\ (((dart_of_fan ((split_fan_face (V , E)) (v , w))) = ((dart1_of_fan (V , E)) UNION (((((((sigma_fan (vec (NUMERAL _0))) V) E) v) w) , w) INSERT ((w , (((((sigma_fan (vec (NUMERAL _0))) V) E) v) w)) INSERT EMPTY)))) /\ (fully_surrounded ((split_fan_face (V , E)) (v , w))))))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 c==> cfully_surrounded c, f0 f1 ! ! c==> cIN c, b0 b1 * part cdart_of_fan c, f0 f1 c/\ cFAN c, cvec cNUMERAL c_0 csplit_fan_face c, f0 f1 c, b0 b1 c/\ c= * part cdart_of_fan csplit_fan_face c, f0 f1 c, b0 b1 * * part cUNION * part cdart1_of_fan c, f0 f1 * * part cINSERT c, csigma_fan cvec cNUMERAL c_0 f0 f1 b0 b1 b1 * * part cINSERT c, b1 csigma_fan cvec cNUMERAL c_0 f0 f1 b0 b1 part cEMPTY cfully_surrounded csplit_fan_face c, f0 f1 c, b0 b1
D Add_triangle.f_split_fan_face
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> ((fully_surrounded (V , E)) ==> (!v. (!w. ((((v , w) IN (dart_of_fan (V , E))) /\ ((NUMERAL (BIT1 (BIT1 _0))) < (CARD ((face (hypermap_of_fan (V , E))) (v , w))))) ==> ((((LET (\w1. (\d2. (\f. (LET_END (((f (v , w)) = (w , w1)) /\ (((f (w , w1)) = (w1 , v)) /\ (((f (w1 , w)) = d2) /\ (((f ((((((sigma_fan (vec (NUMERAL _0))) V) E) w1) v) , w1)) = (w1 , w)) /\ (!d. (((d IN (dart_of_fan ((split_fan_face (V , E)) (v , w)))) /\ (~ ((d = (v , w)) \/ ((d = (w , w1)) \/ ((d = (w1 , w)) \/ (d = ((((((sigma_fan (vec (NUMERAL _0))) V) E) w1) v) , w1))))))) ==> ((f d) = ((f_fan_pair (V , E)) d))))))))))))) (((((sigma_fan (vec (NUMERAL _0))) V) E) v) w)) ((f_fan_pair (V , E)) (v , w))) (f_fan_pair ((split_fan_face (V , E)) (v , w)))))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 c==> cfully_surrounded c, f0 f1 ! ! c==> c/\ cIN c, b0 b1 * part cdart_of_fan c, f0 f1 c< cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface chypermap_of_fan c, f0 f1 c, b0 b1 cLET / / / cLET_END c/\ c= * b4 c, b0 b1 c, b1 b2 c/\ c= * b4 c, b1 b2 c, b2 b0 c/\ c= * b4 c, b2 b1 b3 c/\ c= * b4 c, csigma_fan cvec cNUMERAL c_0 f0 f1 b2 b0 b2 c, b2 b1 ! c==> c/\ cIN b5 * part cdart_of_fan csplit_fan_face c, f0 f1 c, b0 b1 c~ c\/ c= b5 c, b0 b1 c\/ c= b5 c, b1 b2 c\/ c= b5 c, b2 b1 c= b5 c, csigma_fan cvec cNUMERAL c_0 f0 f1 b2 b0 b2 c= * b4 b5 cf_fan_pair c, f0 f1 b5 csigma_fan cvec cNUMERAL c_0 f0 f1 b0 b1 cf_fan_pair c, f0 f1 c, b0 b1 * part cf_fan_pair csplit_fan_face c, f0 f1 c, b0 b1
D Add_triangle.face_split_fan_face_explicit
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> ((fully_surrounded (V , E)) ==> (!v. (!w. ((((LET (\w'. (\H. (\H2. (LET_END ((((v , w) IN (dart_of_fan (V , E))) /\ ((NUMERAL (BIT1 (BIT1 _0))) < (CARD ((face H) (v , w))))) ==> (((((face H2) (v , w)) = ((v , w) INSERT ((w , w') INSERT ((w' , v) INSERT EMPTY)))) /\ (((face H2) (w' , w)) = ((w' , w) INSERT (((face H) (v , w)) DIFF ((v , w) INSERT ((w' , v) INSERT EMPTY)))))) /\ ((((CARD ((face H2) (v , w))) = (NUMERAL (BIT1 (BIT1 _0)))) /\ ((CARD ((face H2) (w' , w))) = ((CARD ((face H) (v , w))) - (NUMERAL (BIT1 _0))))) /\ ((((v , w) IN ((face H) (v , w))) /\ (((w' , v) IN ((face H) (v , w))) /\ (~ ((w' , w) IN ((face H) (v , w)))))) /\ ((~ (w' = w)) /\ ((~ (v = w)) /\ (~ (v = w'))))))))))))) (((((sigma_fan (vec (NUMERAL _0))) V) E) v) w)) (hypermap_of_fan (V , E))) (hypermap_of_fan ((split_fan_face (V , E)) (v , w))))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 c==> cfully_surrounded c, f0 f1 ! ! cLET / / / cLET_END c==> c/\ cIN c, b0 b1 * part cdart_of_fan c, f0 f1 c< cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface b3 c, b0 b1 c/\ c/\ c= * * part cface b4 c, b0 b1 * * part cINSERT c, b0 b1 * * part cINSERT c, b1 b2 * * part cINSERT c, b2 b0 part cEMPTY c= * * part cface b4 c, b2 b1 * * part cINSERT c, b2 b1 * * part cDIFF * * part cface b3 c, b0 b1 * * part cINSERT c, b0 b1 * * part cINSERT c, b2 b0 part cEMPTY c/\ c/\ c= cCARD * * part cface b4 c, b0 b1 cNUMERAL cBIT1 cBIT1 c_0 c= cCARD * * part cface b4 c, b2 b1 c- cCARD * * part cface b3 c, b0 b1 cNUMERAL cBIT1 c_0 c/\ c/\ cIN c, b0 b1 * * part cface b3 c, b0 b1 c/\ cIN c, b2 b0 * * part cface b3 c, b0 b1 c~ cIN c, b2 b1 * * part cface b3 c, b0 b1 c/\ c~ c= b2 b1 c/\ c~ c= b0 b1 c~ c= b0 b2 csigma_fan cvec cNUMERAL c_0 f0 f1 b0 b1 chypermap_of_fan c, f0 f1 chypermap_of_fan csplit_fan_face c, f0 f1 c, b0 b1
D Lp_ineqs_proofs.add_diag
A |- (!V. (!v. (!w. (!E. (((add_diag (V , E)) (v , w)) = (((COND ((v , w) IN (dart1_of_fan (V , E)))) ((w INSERT ((((((sigma_fan (vec (NUMERAL _0))) V) E) v) w) INSERT EMPTY)) INSERT E)) E))))))
T c= * * part cadd_diag c, f0 f1 c, f2 f3 * * * part cCOND cIN c, f2 f3 * part cdart1_of_fan c, f0 f1 * * part cINSERT * * part cINSERT f3 * * part cINSERT csigma_fan cvec cNUMERAL c_0 f0 f1 f2 f3 part cEMPTY f1 f1
D Lp_ineqs_proofs.f_fan_pair_ext_power_inverse
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> (!k. (!d. (((d IN (dart_of_fan (V , E))) /\ (k < (CARD ((face (hypermap_of_fan (V , E))) d)))) ==> ((((POWER (f_fan_pair_ext (V , E))) k) d) = (((POWER (inverse (f_fan_pair_ext (V , E)))) ((CARD ((face (hypermap_of_fan (V , E))) d)) - k)) d))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 ! ! c==> c/\ cIN b1 * part cdart_of_fan c, f0 f1 c< b0 cCARD * * part cface chypermap_of_fan c, f0 f1 b1 c= cPOWER * part cf_fan_pair_ext c, f0 f1 b0 b1 cPOWER * part cinverse * part cf_fan_pair_ext c, f0 f1 c- cCARD * * part cface chypermap_of_fan c, f0 f1 b1 b0 b1
D Lp_ineqs_proofs.f_fan_pair_ext_power_in_dart
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> (!k. (!d. ((d IN (dart_of_fan (V , E))) ==> ((((POWER (f_fan_pair_ext (V , E))) k) d) IN (dart_of_fan (V , E)))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 ! ! c==> cIN b1 * part cdart_of_fan c, f0 f1 cIN cPOWER * part cf_fan_pair_ext c, f0 f1 b0 b1 * part cdart_of_fan c, f0 f1
D Lp_ineqs_proofs.f_fan_pair_ext_power_inj
A |- (!V. (!E. ((FAN ((vec (NUMERAL _0)) , (V , E))) ==> (!k1. (!k2. (!d. (((d IN (dart_of_fan (V , E))) /\ ((k1 < (CARD ((face (hypermap_of_fan (V , E))) d))) /\ (k2 < (CARD ((face (hypermap_of_fan (V , E))) d))))) ==> (((((POWER (f_fan_pair_ext (V , E))) k1) d) = (((POWER (f_fan_pair_ext (V , E))) k2) d)) = (k1 = k2)))))))))
T c==> cFAN c, cvec cNUMERAL c_0 c, f0 f1 ! ! ! c==> c/\ cIN b2 * part cdart_of_fan c, f0 f1 c/\ c< b0 cCARD * * part cface chypermap_of_fan c, f0 f1 b2 c< b1 cCARD * * part cface chypermap_of_fan c, f0 f1 b2 c= c= cPOWER * part cf_fan_pair_ext c, f0 f1 b0 b2 cPOWER * part cf_fan_pair_ext c, f0 f1 b1 b2 c= b0 b1
