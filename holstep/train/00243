N Reduction2.split_normal_list_split_list
C |- (!L. (!N. (!r. (!x. (!b. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((is_restricted (hypermap_of_list L)) /\ (~ ((final_list L) r)))))) ==> ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((((split_face fvs) (FST y)) (FST z')) newVs) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) (((((split_normal_list L) r) f) y) z'))))) ((MAP FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c~ cfinal_list f0 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= csplit_face b9 cFST b0 cFST b2 b4 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f2 f4 ccore f0 f2 csplit_normal_list f0 f2 b3 b0 b2 cMAP part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f2 b1 cl'z f0 f1 f2 f3 cl'y f0 f2 f3
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D SELECT_AX
A |- (!P. (!x. ((P x) ==> (P (@ P)))))
T c==> * f0 f1 * f0 c@ f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D I_DEF
A |- (I = (\x. x))
T c= part cI / b0
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D GABS_DEF
A |- (!P. ((GABS P) = (@ P)))
T c= cGABS f0 c@ f0
D GEQ_DEF
A |- (!a. (!b. (((GEQ a) b) = (a = b))))
T c= cGEQ f0 f1 c= f0 f1
D PAIR_EQ
A |- (!x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))))
T c= c= c, f0 f1 c, f2 f3 c/\ c= f0 f2 c= f1 f3
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D PAIR
A |- (!x. (((FST x) , (SND x)) = x))
T c= c, cFST f0 cSND f0 f0
D pair_RECURSION
A |- (!PAIR'. (?fn. (!a0. (!a1. ((fn (a0 , a1)) = ((PAIR' a0) a1))))))
T c? / ! ! c= * b0 c, b1 b2 * * f0 b1 b2
D Truong_tactic.hold_def
A |- (hold = I)
T c= part chold part cI
D Tame_defs.FACE
A |- (!a. (!b. (((Face a) b) = (a , b))))
T c= cFace f0 f1 c, f0 f1
D Tame_defs2.split_normal_list
A |- (!L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))))
T c= csplit_normal_list f0 f1 f2 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b5 b6 cAPPEND b7 b4 cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 f3 cCONS f3 cNIL cAPPEND cCONS b0 cNIL cAPPEND cbetwn f1 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f2 f3 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f4 cnext_el f1 f3
D Tame_defs2.split_face
A |- (!newVs. (!ram1. (!ram2. (!f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f)))))))
T c= csplit_face f0 f1 f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE f3 b1 cF cFace cAPPEND b2 f3 cF cAPPEND cCONS f2 cNIL cAPPEND cbetwn b0 f2 f1 cCONS f1 cNIL cAPPEND cCONS f1 cNIL cAPPEND cbetwn b0 f1 f2 cCONS f2 cNIL cFST f0
D Tame_list.APPEND_cat
A |- (APPEND = cat)
T c= part cAPPEND part ccat
D Tame_list.REVERSE_rev
A |- (REVERSE = rev)
T c= part cREVERSE part crev
D Tame_list.lower_case
A |- ((MAP = map) /\ ((LENGTH = sizel) /\ ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))))
T c/\ c= part cMAP part cmap c/\ c= part cLENGTH part csizel c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> cmarked_list f0 f4 f1 f2 c==> c= cprev_el f1 f5 f6 c==> c= cfind_face f0 f3 f7 c==> c= cmap part cFST cbetwn f7 f3 f5 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f11 cFST f6 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f11 cFST f6 cFST f3 cCONS cFST f3 cNIL c==> c= cnext_el f1 f3 f12 c==> c= cnext_el f1 f6 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f7 f3 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f3 cCONS cFST f3 cNIL f8 chold c= cFST f11 f9
+ (newVs = ((map FST) (((betwn f) y) z))) |- (((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z))) = ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) newVs))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f4 b2 ccat crev b0 ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f5 cCONS cFST f5 cNIL c= ccore f4 b3 ccat ccat cCONS cFST f5 cNIL ccat cbetwn b4 cFST f5 cFST f2 cCONS cFST f2 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f5 cNIL ccat cbetwn b6 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f5 cCONS cFST f5 cNIL cFST b5 c, cFace ccore f4 b2 cF cFace ccore f4 b3 cF c, ccore f4 f6 f7 ccore f4 f6 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f6 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f6 b1 f5 cCONS f5 cNIL cflatten cmap b4 b5 cbetwn f1 f2 b2 / cmap / cPOWER * part cn_list f4 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f4 cnext_el f6 f5 cnext_el f6 f2 cmap part cFST cbetwn f1 f2 f3 cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f4 b2 ccat crev b0 ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f5 cCONS cFST f5 cNIL c= ccore f4 b3 ccat ccat cCONS cFST f5 cNIL ccat cbetwn b4 cFST f5 cFST f2 cCONS cFST f2 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f5 cNIL ccat cbetwn b6 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f5 cCONS cFST f5 cNIL cFST b5 c, cFace ccore f4 b2 cF cFace ccore f4 b3 cF c, ccore f4 f6 f7 ccore f4 f6 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f6 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f6 b1 f5 cCONS f5 cNIL cflatten cmap b4 b5 cbetwn f1 f2 b2 / cmap / cPOWER * part cn_list f4 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f4 cnext_el f6 f5 cnext_el f6 f2 f0
+ |- ((T ==> (?newVs. (newVs = ((map FST) (((betwn f) y) z))))) = (?newVs. (newVs = ((map FST) (((betwn f) y) z)))))
T c= c==> cT c? / c= b0 cmap part cFST cbetwn f0 f1 f2 c? / c= b0 cmap part cFST cbetwn f0 f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((((marked_list L) N) r) x) |- (((\f. (f = ((find_face L) y))) f) ==> ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> cmarked_list f0 f5 f1 f3 c==> * / c= b0 cfind_face f0 f2 f7 cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev b1 ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b4 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f6 cNIL ccat cbetwn b7 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b6 c, cFace ccore f0 b3 cF cFace ccore f0 b4 cF c, ccore f0 f1 f8 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f1 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f1 b2 f6 cCONS f6 cNIL cflatten cmap b5 b6 cbetwn b0 f2 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cmap part cFST cbetwn b0 f2 f4 cfind_face f0 f2
+ |- (((?ram1'. (ram1' = ((next_el r) y))) ==> ((((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = ((((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c= c==> c? / c= b0 cnext_el f0 f1 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f0 b1 f1 cCONS f1 cNIL ccat cCONS b0 cNIL ccat cbetwn f0 b0 f2 cCONS f2 cNIL cflatten cmap b3 b4 cbetwn f3 f1 b1 / cmap / cPOWER * part cn_list f4 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f4 cnext_el f0 f2 cnext_el f0 f1 c, f5 f6 c==> c/\ c= ccore f4 f5 ccat crev f7 ccat cCONS cFST f1 cNIL ccat cbetwn f8 cFST f1 cFST f2 cCONS cFST f2 cNIL c= ccore f4 f6 ccat ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f1 cCONS cFST f1 cNIL f7 c= c, cFace ccat crev f7 f9 cF cFace ccat f10 f7 cF c, cFace ccore f4 f5 cF cFace ccore f4 f6 cF c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f0 b1 f1 cCONS f1 cNIL ccat cCONS b0 cNIL ccat cbetwn f0 b0 f2 cCONS f2 cNIL cflatten cmap b3 b4 cbetwn f3 f1 b1 / cmap / cPOWER * part cn_list f4 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f4 cnext_el f0 f2 cnext_el f0 f1 c, f5 f6 c==> c/\ c= ccore f4 f5 ccat crev f7 ccat cCONS cFST f1 cNIL ccat cbetwn f8 cFST f1 cFST f2 cCONS cFST f2 cNIL c= ccore f4 f6 ccat ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f1 cCONS cFST f1 cNIL f7 c= c, cFace ccat crev f7 f9 cF cFace ccat f10 f7 cF c, cFace ccore f4 f5 cF cFace ccore f4 f6 cF
+ |- ((\b. (((Face a) b) = (a , b))) b)
T * / c= cFace f0 b0 c, f0 b0 f1
- |- ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))
T c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ |- ((((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))) = (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) f2') = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c= c==> c/\ c= ccore f0 f1 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f6 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL f2 c= c, cFace ccat crev f2 f7 cF cFace ccat f8 f2 cF c, cFace ccore f0 f1 cF cFace ccore f0 f6 cF c==> c/\ c= ccore f0 f1 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f6 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL f2 c= cLET / cLET_END c, cFace ccat crev f2 f7 cF cFace ccat b0 f2 cF f8 c, cFace ccore f0 f1 cF cFace ccore f0 f6 cF
+ (vs = ((core L) r)) |- ((vs = ((core L) r)) /\ (?vs. (vs = ((core L) r))))
T c==> c= f0 ccore f1 f2 c/\ c= f0 ccore f1 f2 c? / c= b0 ccore f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((?f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))) ==> ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 cflatten cmap f2 f17 c==> c= f17 cbetwn f14 f5 f6 c==> c= f18 ccat cCONS cFST f5 cNIL ccat cbetwn f19 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f20 ccat cCONS cFST f7 cNIL ccat cbetwn f19 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f21 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f19 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c? / c= b0 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= cLET / cLET_END c, ccat crev f16 f15 ccat b0 f17 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f22 f23 c==> c/\ c= ccore f0 f22 ccat crev f21 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f23 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f21 c= c, cFace ccat crev f21 f18 cF cFace ccat f20 f21 cF c, cFace ccore f0 f22 cF cFace ccore f0 f23 cF
+ (!a. (!b. ((((Face a) F) = ((Face b) F)) = (a = b)))) |- (((!b. ((((Face a) F) = ((Face b) F)) = (a = b))) ==> ((\b. ((((Face a) F) = ((Face b) F)) = (a = b))) b)) = ((\b. ((((Face a) F) = ((Face b) F)) = (a = b))) b))
T c==> ! ! c= c= cFace b0 cF cFace b1 cF c= b0 b1 c= c==> ! c= c= cFace f0 cF cFace b0 cF c= f0 b0 * / c= c= cFace f0 cF cFace b0 cF c= f0 b0 f1 * / c= c= cFace f0 cF cFace b0 cF c= f0 b0 f1
+ (vs' = (FST fvs)) |- ((((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))) = (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) vs') = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c= f0 cFST f1 c= c==> c/\ c= ccore f2 f3 ccat crev f4 ccat cCONS cFST f5 cNIL ccat cbetwn f6 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f2 f8 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f6 cFST f7 cFST f5 cCONS cFST f5 cNIL f4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f4 b1 cF cFace ccat b2 f4 cF ccat cCONS cFST f7 cNIL ccat cbetwn b0 cFST f7 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f7 cCONS cFST f7 cNIL cFST f1 c, cFace ccore f2 f3 cF cFace ccore f2 f8 cF c==> c/\ c= ccore f2 f3 ccat crev f4 ccat cCONS cFST f5 cNIL ccat cbetwn f6 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f2 f8 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f6 cFST f7 cFST f5 cCONS cFST f5 cNIL f4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f4 b1 cF cFace ccat b2 f4 cF ccat cCONS cFST f7 cNIL ccat cbetwn b0 cFST f7 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f7 cCONS cFST f7 cNIL f0 c, cFace ccore f2 f3 cF cFace ccore f2 f8 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((((cat (rev new1)) f1'') , ((cat f2'') new2)) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= f19 ccat cCONS cFST f5 cNIL ccat cbetwn f20 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f21 ccat cCONS cFST f7 cNIL ccat cbetwn f20 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f22 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f20 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c= c, ccat crev f17 f15 ccat f16 f18 c, f23 f24 c==> c/\ c= ccore f0 f23 ccat crev f22 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f22 c= c, cFace ccat crev f22 f19 cF cFace ccat f21 f22 cF c, cFace ccore f0 f23 cF cFace ccore f0 f24 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((cat (rev new1)) f1'') = f1) /\ (((cat f2'') new2) = f2)), ((((marked_list L) N) r) x) |- (((((cat (rev new1)) f1'') = f1) /\ (((cat f2'') new2) = f2)) /\ (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) = ((Face ((core L) f1)) F)) /\ (((Face ((cat f2') newVs)) F) = ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= f19 ccat cCONS cFST f5 cNIL ccat cbetwn f20 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f21 ccat cCONS cFST f7 cNIL ccat cbetwn f20 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f22 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f20 cFST f11 c==> c/\ c= ccat crev f17 f15 f23 c= ccat f16 f18 f24 c==> cmarked_list f0 f10 f1 f8 c/\ c/\ c= ccat crev f17 f15 f23 c= ccat f16 f18 f24 c==> c/\ c= ccore f0 f23 ccat crev f22 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f22 c/\ c= cFace ccat crev f22 f19 cF cFace ccore f0 f23 cF c= cFace ccat f21 f22 cF cFace ccore f0 f24 cF
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL f22 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f23 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23
- (ram2' = ((next_el r) z')) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 cnext_el f1 f2 c= c= cprev_el f1 f3 f2 c= cprev_el f1 f3 f2
- (z' = ((prev_el r) z)) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 cprev_el f1 f2 c= c= cl'z f3 f4 f1 f5 f2 c= cl'z f3 f4 f1 f5 f2
+ (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((\sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))) sz)
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 * / c= b0 / csizel cfilter / c= b2 b1 cflatten f1 f0
- (newVs = ((map FST) (((betwn f) y) z))) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= cgood_list_nodes f4 cgood_list_nodes f4
+ (good_list L), (good_list_nodes L), ((is_restricted (hypermap_of_list L)) /\ (~ ((final_list L) r))), ((((marked_list L) N) r) x) |- ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((((split_face fvs) (FST y)) (FST z')) newVs) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) (((((split_normal_list L) r) f) y) z'))))) ((MAP FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cis_restricted chypermap_of_list f0 c~ cfinal_list f0 f1 c==> cmarked_list f0 f2 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= csplit_face b9 cFST b0 cFST b2 b4 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f1 f4 ccore f0 f1 csplit_normal_list f0 f1 b3 b0 b2 cMAP part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f1 b1 cl'z f0 f2 f1 f3 cl'y f0 f1 f3
+ |- (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = (((core L) r) , b)) ==> (((FST (((core L) r) , b)) = (FST (((core L) r) , b))) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))))))))))))))))
T c==> c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> c= cprev_el f1 f5 f6 c==> c= cfind_face f0 f3 f7 c==> c= cmap part cFST cbetwn f7 f3 f5 f8 c==> c= ccore f0 f1 ccore f0 f1 c==> c= c, ccore f0 f1 f9 c, ccore f0 f1 f9 c==> c= cFST c, ccore f0 f1 f9 cFST c, ccore f0 f1 f9 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST c, ccore f0 f1 f9 cFST f3 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST c, ccore f0 f1 f9 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f1 f9 cFST f6 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f1 f9 cFST f6 cFST f3 cCONS cFST f3 cNIL c==> c= cnext_el f1 f3 f10 c==> c= cnext_el f1 f6 f11 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f12 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f12 cFST b0 f13 c==> c= cbetwn f7 f3 f11 f14 c==> c= cflatten cmap f13 f14 f15 c==> c= ccat cCONS f10 cNIL ccat cbetwn f1 f10 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat crev f15 f16 f18 c==> c= ccat f17 f14 f19 c==> c= ccore f0 f18 ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f3 cCONS cFST f3 cNIL f8 chold c= cFST c, ccore f0 f1 f9 ccore f0 f1
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((((marked_list L) N) r) x), ((\f. (f = ((find_face L) y))) f) |- (((\f. (f = ((find_face L) y))) f) /\ ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> cmarked_list f0 f5 f1 f3 c==> * / c= b0 cfind_face f0 f2 f7 c/\ * / c= b0 cfind_face f0 f2 f7 cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev b1 ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b4 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f6 cNIL ccat cbetwn b7 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b6 c, cFace ccore f0 b3 cF cFace ccore f0 b4 cF c, ccore f0 f1 f8 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f1 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f1 b2 f6 cCONS f6 cNIL cflatten cmap b5 b6 cbetwn b0 f2 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cmap part cFST cbetwn b0 f2 f4 cfind_face f0 f2
+ |- ((sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) ==> (?sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c? / c= b0 / csizel cfilter / c= b2 b1 cflatten f1
- (vs = ((core L) r)) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 ccore f1 f2 c= cgood_list_nodes f1 cgood_list_nodes f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((flatten ((map nd) new2)) = new1) /\ ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= cfind_face f0 f4 f16 c==> c= cbetwn f16 f4 f7 f14 c==> c= cFST f13 f17 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f17 cFST f4 cFST f6 cCONS cFST f6 cNIL f18 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f16 f4 f8 f19 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f21 c==> c= ccat crev f15 f20 f22 c==> c= ccat f21 f14 f23 c==> c= ccore f0 f22 ccat crev f19 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f19 chold c/\ c= ccat crev f19 f18 ccat crev f19 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL f19 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f19
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) z') = ram2') /\ (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f4 f5 c==> c= cprev_el f1 f6 f4 c==> c= cl'y f0 f1 f7 f2 c==> c= cl'z f0 f8 f1 f7 f6 c==> c= c, f9 f10 f11 c==> c= cfind_face f0 f2 f12 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn cFST f11 cFST f2 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn cFST f11 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f11 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f11 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f12 f2 f6 f13 c==> c= ccore f0 f1 f9 c==> cmarked_list f0 f8 f1 f7 c/\ c= cnext_el f1 f4 f5 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f12 f2 f5 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f2 cCONS f2 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f2 cCONS cFST f2 cNIL f13 chold c= cFST f11 f9
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, ccore f0 f1 f7 f8 c==> c= cfind_face f0 f5 f9 c==> c= cmap part cFST cbetwn f9 f5 f2 f10 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f6 f1 f4 c==> c= c, ccore f0 f1 f7 f8 c==> c= cFST f8 cFST f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f9 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= cFST f8 ccore f0 f1
- (ram2' = ((next_el r) z')) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 cnext_el f1 f2 c= c= cmap part cFST cbetwn f3 f4 f5 f6 c= cmap part cFST cbetwn f3 f4 f5 f6
+ |- (T = (((F ==> B) /\ F) ==> B))
T c= cT c==> c/\ c==> cF f0 cF f0
+ |- (a ==> (hold a))
T c==> f0 chold f0
+ |- (((((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = ((((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ram1') = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c= c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b4 b5 ccat b6 b3 ccat cCONS b0 cNIL ccat cbetwn f0 b0 f1 cCONS f1 cNIL ccat cCONS f2 cNIL ccat cbetwn f0 f2 f3 cCONS f3 cNIL cflatten cmap b2 b3 cbetwn f4 f1 b0 / cmap / cPOWER * part cn_list f5 b3 b2 cupt cNUMERAL cBIT1 c_0 * b1 cFST b2 / csizel cfilter / c= b2 b1 cflatten f5 cnext_el f0 f3 c, f6 f7 c==> c/\ c= ccore f5 f6 ccat crev f8 ccat cCONS cFST f1 cNIL ccat cbetwn f9 cFST f1 cFST f3 cCONS cFST f3 cNIL c= ccore f5 f7 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f1 cCONS cFST f1 cNIL f8 c= c, cFace ccat crev f8 f10 cF cFace ccat f11 f8 cF c, cFace ccore f5 f6 cF cFace ccore f5 f7 cF c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f0 b1 f1 cCONS f1 cNIL ccat cCONS b0 cNIL ccat cbetwn f0 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f1 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f0 f3 f2 c, f6 f7 c==> c/\ c= ccore f5 f6 ccat crev f8 ccat cCONS cFST f1 cNIL ccat cbetwn f9 cFST f1 cFST f3 cCONS cFST f3 cNIL c= ccore f5 f7 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f1 cCONS cFST f1 cNIL f8 c= c, cFace ccat crev f8 f10 cF cFace ccat f11 f8 cF c, cFace ccore f5 f6 cF cFace ccore f5 f7 cF
+ |- (?f1. (?f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))
T c? / c? / c= c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b8 b6 ccat cCONS b3 cNIL ccat cbetwn f0 b3 f1 cCONS f1 cNIL ccat cCONS b2 cNIL ccat cbetwn f0 b2 f2 cCONS f2 cNIL cflatten cmap b5 b6 cbetwn f3 f1 b3 / cmap / cPOWER * part cn_list f4 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f4 cnext_el f0 f2 cnext_el f0 f1
+ |- ((((((cat (rev new1)) f1'') = f1) /\ (((cat f2'') new2) = f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) = ((Face ((core L) f1)) F)) /\ (((Face ((cat f2') newVs)) F) = ((Face ((core L) f2)) F))))) = (((((cat (rev new1)) f1'') , ((cat f2'') new2)) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c= c==> c/\ c= ccat crev f0 f1 f2 c= ccat f3 f4 f5 c==> c/\ c= ccore f6 f2 ccat crev f7 ccat cCONS cFST f8 cNIL ccat cbetwn f9 cFST f8 cFST f10 cCONS cFST f10 cNIL c= ccore f6 f5 ccat ccat cCONS cFST f10 cNIL ccat cbetwn f9 cFST f10 cFST f8 cCONS cFST f8 cNIL f7 c/\ c= cFace ccat crev f7 f11 cF cFace ccore f6 f2 cF c= cFace ccat f12 f7 cF cFace ccore f6 f5 cF c==> c= c, ccat crev f0 f1 ccat f3 f4 c, f2 f5 c==> c/\ c= ccore f6 f2 ccat crev f7 ccat cCONS cFST f8 cNIL ccat cbetwn f9 cFST f8 cFST f10 cCONS cFST f10 cNIL c= ccore f6 f5 ccat ccat cCONS cFST f10 cNIL ccat cbetwn f9 cFST f10 cFST f8 cCONS cFST f8 cNIL f7 c= c, cFace ccat crev f7 f11 cF cFace ccat f12 f7 cF c, cFace ccore f6 f2 cF cFace ccore f6 f5 cF
+ (good_list L), ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((is_restricted (hypermap_of_list L)) /\ (~ ((final_list L) r)))))) |- ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((((split_face fvs) (FST y)) (FST z')) newVs) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) (((((split_normal_list L) r) f) y) z'))))) ((MAP FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))
T c==> cgood_list f0 c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c~ cfinal_list f0 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= csplit_face b9 cFST b0 cFST b2 b4 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f2 f4 ccore f0 f2 csplit_normal_list f0 f2 b3 b0 b2 cMAP part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f2 b1 cl'z f0 f1 f2 f3 cl'y f0 f2 f3
+ (((map FST) (((betwn f) y) z)) = newVs) |- ((((map FST) (((betwn f) y) z)) = newVs) /\ ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = (((core L) r) , b)) ==> (((FST (((core L) r) , b)) = (FST (((core L) r) , b))) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))))))))))))
T c==> c= cmap part cFST cbetwn f0 f1 f2 f3 c/\ c= cmap part cFST cbetwn f0 f1 f2 f3 c==> c= ccore f4 f5 ccore f4 f5 c==> c= c, ccore f4 f5 f6 c, ccore f4 f5 f6 c==> c= cFST c, ccore f4 f5 f6 cFST c, ccore f4 f5 f6 c==> c= ccat cCONS cFST f1 cNIL ccat cbetwn cFST c, ccore f4 f5 f6 cFST f1 cFST f7 cCONS cFST f7 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn cFST c, ccore f4 f5 f6 cFST f1 cFST f7 cCONS cFST f7 cNIL c==> c= ccat cCONS cFST f7 cNIL ccat cbetwn cFST c, ccore f4 f5 f6 cFST f7 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f7 cNIL ccat cbetwn cFST c, ccore f4 f5 f6 cFST f7 cFST f1 cCONS cFST f1 cNIL c==> c= cnext_el f5 f1 f8 c==> c= cnext_el f5 f7 f9 c==> c= / csizel cfilter / c= b1 b0 cflatten f4 f10 c==> c= / cmap / cPOWER * part cn_list f4 b1 b0 cupt cNUMERAL cBIT1 c_0 * f10 cFST b0 f11 c==> c= cbetwn f0 f1 f9 f12 c==> c= cflatten cmap f11 f12 f13 c==> c= ccat cCONS f8 cNIL ccat cbetwn f5 f8 f7 cCONS f7 cNIL f14 c==> c= ccat cCONS f9 cNIL ccat cbetwn f5 f9 f1 cCONS f1 cNIL f15 c==> c= ccat crev f13 f14 f16 c==> c= ccat f15 f12 f17 c==> c= ccore f4 f16 ccat crev f3 ccat cCONS cFST f1 cNIL ccat cbetwn ccore f4 f5 cFST f1 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f4 f17 ccat ccat cCONS cFST f7 cNIL ccat cbetwn ccore f4 f5 cFST f7 cFST f1 cCONS cFST f1 cNIL f3 chold c= cFST c, ccore f4 f5 f6 ccore f4 f5
+ |- (?ram2'. (ram2' = ((next_el r) z')))
T c? / c= b0 cnext_el f0 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL f22 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f23 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 chold c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23
+ (new2 = (((betwn f) y) ram2')) |- (((((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) new2) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = ((((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c= f0 cbetwn f1 f2 f3 c= c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b1 b2 ccat b3 b0 ccat cCONS f3 cNIL ccat cbetwn f4 f3 f2 cCONS f2 cNIL ccat cCONS f5 cNIL ccat cbetwn f4 f5 f6 cCONS f6 cNIL cflatten cmap f7 b0 f0 c, f8 f9 c==> c/\ c= ccore f10 f8 ccat crev f11 ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f10 f9 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f2 cCONS cFST f2 cNIL f11 c= c, cFace ccat crev f11 f13 cF cFace ccat f14 f11 cF c, cFace ccore f10 f8 cF cFace ccore f10 f9 cF c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b1 b2 ccat b3 b0 ccat cCONS f3 cNIL ccat cbetwn f4 f3 f2 cCONS f2 cNIL ccat cCONS f5 cNIL ccat cbetwn f4 f5 f6 cCONS f6 cNIL cflatten cmap f7 b0 cbetwn f1 f2 f3 c, f8 f9 c==> c/\ c= ccore f10 f8 ccat crev f11 ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f10 f9 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f2 cCONS cFST f2 cNIL f11 c= c, cFace ccat crev f11 f13 cF cFace ccat f14 f11 cF c, cFace ccore f10 f8 cF cFace ccore f10 f9 cF
- (newVs = ((map FST) (((betwn f) y) z))) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= c= cl'z f4 f5 f6 f7 f3 c= cl'z f4 f5 f6 f7 f3
+ |- (((?sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))) ==> ((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = ((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c= c==> c? / c= b0 / csizel cfilter / c= b2 b1 cflatten f0 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL ccat cCONS f4 cNIL ccat cbetwn f2 f4 f5 cCONS f5 cNIL cflatten cmap b1 b2 cbetwn f6 f3 f1 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * b0 cFST b1 / csizel cfilter / c= b1 b0 cflatten f0 c, f7 f8 c==> c/\ c= ccore f0 f7 ccat crev f9 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f9 c= c, cFace ccat crev f9 f11 cF cFace ccat f12 f9 cF c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL ccat cCONS f4 cNIL ccat cbetwn f2 f4 f5 cCONS f5 cNIL cflatten cmap b1 b2 cbetwn f6 f3 f1 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * b0 cFST b1 / csizel cfilter / c= b1 b0 cflatten f0 c, f7 f8 c==> c/\ c= ccore f0 f7 ccat crev f9 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f9 c= c, cFace ccat crev f9 f11 cF cFace ccat f12 f9 cF c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), ((((marked_list L) N) r) x) |- ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f3 cCONS cFST f3 cNIL f9 c==> cmarked_list f0 f6 f1 f4 c==> c= cmap part cFST cbetwn f7 f5 f2 f10 c==> c= ccore f0 f1 f11 c==> c= c, f11 f12 f13 c==> c= cFST f13 f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f3 cCONS cFST f3 cNIL f9 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c/\ c= ccat crev f10 f9 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f10
- (vs' = (FST fvs)) |- ((good_list L) = (good_list L))
T c==> c= f0 cFST f1 c= cgood_list f2 cgood_list f2
- |- ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))
T c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ |- ((new2 = (((betwn f) y) ram2')) = ((\new2. (new2 = (((betwn f) y) ram2'))) new2))
T c= c= f0 cbetwn f1 f2 f3 * / c= b0 cbetwn f1 f2 f3 f0
+ |- ((\f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f)))) f)
T * / c= csplit_face b0 f0 f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE f2 b2 cF cFace cAPPEND b3 f2 cF cAPPEND cCONS f1 cNIL cAPPEND cbetwn b1 f1 f0 cCONS f0 cNIL cAPPEND cCONS f0 cNIL cAPPEND cbetwn b1 f0 f1 cCONS f1 cNIL cFST b0 f3
- ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) = T)
T c==> cmarked_list f0 f1 f2 f3 c= cmarked_list f0 f1 f2 f3 cT
+ |- (((f1 = (FST ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))) /\ (f2 = (SND ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))) = ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))
T c= c/\ c= f0 cFST cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 c= f6 cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 c= c, f0 f6 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f15 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c==> c/\ c= ccore f0 f7 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f15 c= cLET / cLET_END c, cFace ccat crev f15 f13 cF cFace ccat b0 f15 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
+ |- ((\f1. (!f2. ((GEQ ((GABS (\_10484458. (!f1. (!f2. ((GEQ (_10484458 (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)))))))) (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)))))) f1)
T * / ! cGEQ cGABS / ! ! cGEQ * b2 c, b3 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 b3 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b5 cF cFace ccat b6 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b4 c, cFace ccore f0 b3 cF cFace ccore f0 b3 cF c, ccore f0 f4 f5 ccore f0 f4 c, b0 b1 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b0 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b2 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 b1 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b2 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b4 cF cFace ccat b5 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b4 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b3 c, cFace ccore f0 b0 cF cFace ccore f0 b1 cF c, ccore f0 f4 f5 ccore f0 f4 f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c==> c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f7 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c= cFST f11 f9
- (f = ((find_face L) y)) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 cfind_face f1 f2 c= c~ cfinal_list f1 f3 c~ cfinal_list f1 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> cmarked_list f0 f4 f1 f2 c/\ c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> c= cprev_el f1 f5 f6 c==> c= cfind_face f0 f3 f7 c==> c= cmap part cFST cbetwn f7 f3 f5 f8 c==> c= ccore f0 f1 ccore f0 f1 c==> c= c, ccore f0 f1 f9 f10 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f10 cFST f6 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f10 cFST f6 cFST f3 cCONS cFST f3 cNIL c==> c= cnext_el f1 f3 f11 c==> c= cnext_el f1 f6 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f7 f3 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f3 cCONS cFST f3 cNIL f8 chold c= cFST f10 ccore f0 f1
+ (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) /\ (?sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c/\ c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c? / c= b0 / csizel cfilter / c= b2 b1 cflatten f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cbetwn f14 f4 f7 f15 c==> c= cFST f13 f16 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f16 cFST f4 cFST f6 cCONS cFST f6 cNIL f17 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f18 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= cflatten cmap f3 f15 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f15 f23 c==> c= ccore f0 f22 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 chold c/\ c= ccat crev f18 f17 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f18
+ ((\vs'. (vs' = (FST fvs))) vs') |- (vs' = (FST fvs))
T c==> * / c= b0 cFST f0 f1 c= f1 cFST f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) vs') = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c==> c/\ c= ccore f0 f7 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f13 b1 cF cFace ccat b2 f13 cF ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b0 cFST f2 cFST f6 cCONS cFST f6 cNIL f14 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
- (is_restricted (hypermap_of_list L)) |- ((is_restricted (hypermap_of_list L)) = T)
T c==> cis_restricted chypermap_of_list f0 c= cis_restricted chypermap_of_list f0 cT
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((\nd. (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))) nd) ==> ((((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = T)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f3 cnext_el f1 f4 c==> c= f5 cnext_el f1 f6 c==> c= f4 cl'y f0 f1 f7 c==> c= f8 cl'z f0 f9 f1 f7 c==> c= f6 cprev_el f1 f8 c==> c= f10 c, f11 f12 c==> c= f13 cfind_face f0 f4 c==> c= f14 ccat cCONS cFST f4 cNIL ccat cbetwn f15 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= f16 ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= f17 cmap part cFST cbetwn f13 f4 f8 c==> c= f11 ccore f0 f1 c==> c= f15 cFST f10 c==> cmarked_list f0 f9 f1 f7 c= c==> * / c= b0 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * f2 cFST b1 f18 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b2 b3 ccat b4 b1 ccat cCONS f5 cNIL ccat cbetwn f1 f5 f4 cCONS f4 cNIL ccat cCONS f3 cNIL ccat cbetwn f1 f3 f6 cCONS f6 cNIL cflatten cmap b0 b1 cbetwn f13 f4 f5 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c, f19 f20 c==> c/\ c= ccore f0 f19 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 c= c, cFace ccat crev f17 f14 cF cFace ccat f16 f17 cF c, cFace ccore f0 f19 cF cFace ccore f0 f20 cF cT
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- (((FST fvs) = vs') = ((FST fvs) = vs'))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cFST f4 f5 c= cFST f4 f5
+ |- (((?f1. (f1 = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c= c==> c? / c= b0 ccat cCONS cFST f0 cNIL ccat cbetwn f1 cFST f0 cFST f2 cCONS cFST f2 cNIL c==> c/\ c= ccore f3 f4 ccat crev f5 ccat cCONS cFST f0 cNIL ccat cbetwn f6 cFST f0 cFST f2 cCONS cFST f2 cNIL c= ccore f3 f7 ccat ccat cCONS cFST f2 cNIL ccat cbetwn f6 cFST f2 cFST f0 cCONS cFST f0 cNIL f5 c= cLET / cLET_END cLET / cLET_END c, cFace ccat crev f5 b0 cF cFace ccat b1 f5 cF ccat cCONS cFST f2 cNIL ccat cbetwn f1 cFST f2 cFST f0 cCONS cFST f0 cNIL ccat cCONS cFST f0 cNIL ccat cbetwn f1 cFST f0 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f3 f4 cF cFace ccore f3 f7 cF c==> c/\ c= ccore f3 f4 ccat crev f5 ccat cCONS cFST f0 cNIL ccat cbetwn f6 cFST f0 cFST f2 cCONS cFST f2 cNIL c= ccore f3 f7 ccat ccat cCONS cFST f2 cNIL ccat cbetwn f6 cFST f2 cFST f0 cCONS cFST f0 cNIL f5 c= cLET / cLET_END cLET / cLET_END c, cFace ccat crev f5 b0 cF cFace ccat b1 f5 cF ccat cCONS cFST f2 cNIL ccat cbetwn f1 cFST f2 cFST f0 cCONS cFST f0 cNIL ccat cCONS cFST f0 cNIL ccat cbetwn f1 cFST f0 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f3 f4 cF cFace ccore f3 f7 cF
+ (good_list L) |- ((good_list L) /\ ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = (((core L) r) , b)) ==> (((FST (((core L) r) , b)) = (FST (((core L) r) , b))) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r))))))))))))))))))))))))))))))
T c==> cgood_list f0 c/\ cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 ccore f0 f2 c==> c= c, ccore f0 f2 f9 c, ccore f0 f2 f9 c==> c= cFST c, ccore f0 f2 f9 cFST c, ccore f0 f2 f9 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f10 c==> c= cnext_el f2 f6 f11 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f12 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f12 cFST b0 f13 c==> c= cbetwn f7 f4 f11 f14 c==> c= cflatten cmap f13 f14 f15 c==> c= ccat cCONS f10 cNIL ccat cbetwn f2 f10 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f2 f11 f4 cCONS f4 cNIL f17 c==> c= ccat crev f15 f16 f18 c==> c= ccat f17 f14 f19 c==> c= ccore f0 f18 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f2 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f2 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c= cFST c, ccore f0 f2 f9 ccore f0 f2
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 cFST f9 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f10 f5 f2 f11 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f10 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 chold c= cFST f9 f7
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((\sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))) sz) ==> ((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = T)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f4 cnext_el f1 f5 c==> c= f3 cl'y f0 f1 f6 c==> c= f7 cl'z f0 f8 f1 f6 c==> c= f5 cprev_el f1 f7 c==> c= f9 c, f10 f11 c==> c= f12 cfind_face f0 f3 c==> c= f13 ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= f16 cmap part cFST cbetwn f12 f3 f7 c==> c= f10 ccore f0 f1 c==> c= f14 cFST f9 c==> cmarked_list f0 f8 f1 f6 c= c==> * / c= b0 / csizel cfilter / c= b2 b1 cflatten f0 f17 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f5 cCONS f5 cNIL cflatten cmap b1 b2 cbetwn f12 f3 f4 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * b0 cFST b1 / csizel cfilter / c= b1 b0 cflatten f0 c, f18 f19 c==> c/\ c= ccore f0 f18 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f19 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 c= c, cFace ccat crev f16 f13 cF cFace ccat f15 f16 cF c, cFace ccore f0 f18 cF cFace ccore f0 f19 cF cT
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= f19 ccat cCONS cFST f5 cNIL ccat cbetwn f20 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f21 ccat cCONS cFST f7 cNIL ccat cbetwn f20 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f22 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f20 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c= cLET / cLET_END c, ccat crev f17 f15 ccat b0 f18 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f23 f24 c==> c/\ c= ccore f0 f23 ccat crev f22 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f22 c= c, cFace ccat crev f22 f19 cF cFace ccat f21 f22 cF c, cFace ccore f0 f23 cF cFace ccore f0 f24 cF
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f4 f5 c==> c= cprev_el f1 f6 f4 c==> c= cl'y f0 f1 f7 f2 c==> c= cl'z f0 f8 f1 f7 f6 c==> c= c, ccore f0 f1 f9 f10 c==> c= cfind_face f0 f2 f11 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn cFST f10 cFST f2 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn cFST f10 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f10 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f10 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f11 f2 f6 f12 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f8 f1 f7 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f11 f2 f5 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f2 cCONS f2 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f12 ccat cCONS cFST f2 cNIL ccat cbetwn ccore f0 f1 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f2 cCONS cFST f2 cNIL f12 chold c= cFST f10 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) f1') = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f15 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c==> c/\ c= ccore f0 f7 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f15 c= cLET / cLET_END cLET / cLET_END c, cFace ccat crev f15 b0 cF cFace ccat b1 f15 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
- |- ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))
T c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((FST fvs) = vs'), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs)))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cFST f1 f2 c==> cmarked_list f0 f3 f4 f5 c==> c~ cfinal_list f0 f4 c==> c= cl'y f0 f4 f5 f6 c==> c= cl'z f0 f3 f4 f5 f7 c==> c= cprev_el f4 f7 f8 c==> c= cfind_face f0 f6 f9 c==> c= cmap part cFST cbetwn f9 f6 f7 f10 c==> c= ccore f0 f4 f11 c==> c= c, f11 f12 f1 c==> c= cFST f1 f2 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f2 cFST f6 cFST f8 cCONS cFST f8 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f2 cFST f6 cFST f8 cCONS cFST f8 cNIL c==> c= ccat cCONS cFST f8 cNIL ccat cbetwn f2 cFST f8 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f8 cNIL ccat cbetwn f2 cFST f8 cFST f6 cCONS cFST f6 cNIL c==> c= cnext_el f4 f6 f13 c==> c= cnext_el f4 f8 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f9 f6 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f4 f13 f8 cCONS f8 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f4 f14 f6 cCONS f6 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f10 ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f8 cCONS cFST f8 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f8 cNIL ccat cbetwn f11 cFST f8 cFST f6 cCONS cFST f6 cNIL f10 chold c= f2 f11
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((((marked_list L) N) r) x) |- ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) z')
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> cmarked_list f0 f5 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b4 ccat crev b2 ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST b0 cCONS cFST b0 cNIL c= ccore f0 b5 ccat ccat cCONS cFST b0 cNIL ccat cbetwn b6 cFST b0 cFST f2 cCONS cFST f2 cNIL b2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b2 b8 cF cFace ccat b9 b2 cF ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b8 cFST f2 cFST b0 cCONS cFST b0 cNIL cFST b7 c, cFace ccore f0 b4 cF cFace ccore f0 b5 cF c, ccore f0 f1 f7 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b8 b9 ccat b10 b7 ccat cCONS b4 cNIL ccat cbetwn f1 b4 f2 cCONS f2 cNIL ccat cCONS b3 cNIL ccat cbetwn f1 b3 b0 cCONS b0 cNIL cflatten cmap b6 b7 cbetwn b1 f2 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b0 cnext_el f1 f2 cmap part cFST cbetwn b1 f2 f4 cfind_face f0 f2 f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), ((((marked_list L) N) r) x) |- (((\fvs. (fvs = (vs , b))) fvs) ==> ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (vs , b)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> cmarked_list f0 f5 f1 f3 c==> * / c= b0 c, f11 f12 f13 cLET / cLET_END c==> c/\ c= ccore f0 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b2 cF cFace ccat b3 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b1 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b1 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b0 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c, f11 f12
- (?f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))
T c==> c? / c= c, f0 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f3 cCONS f3 cNIL cflatten cmap b4 b5 cbetwn f4 f2 b2 / cmap / cPOWER * part cn_list f5 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 c==> c~ cfinal_list f5 f1 c==> cis_restricted chypermap_of_list f5 c==> cgood_list f5 c==> cgood_list_nodes f5 c==> c= f2 cl'y f5 f1 f6 c==> c= f7 cl'z f5 f8 f1 f6 c==> c= f3 cprev_el f1 f7 c==> c= f4 cfind_face f5 f2 c==> c= f9 cmap part cFST cbetwn f4 f2 f7 c==> cmarked_list f5 f8 f1 f6 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f5 b1 ccat crev f9 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f5 b2 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL f9 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f9 b5 cF cFace ccat b6 f9 cF ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b4 c, cFace ccore f5 b1 cF cFace ccore f5 b2 cF c, ccore f5 f1 f10 ccore f5 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2
+ |- ((nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) = ((\nd. (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))) nd))
T c= c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 * / c= b0 / cmap / cPOWER * part cn_list f1 b2 b1 cupt cNUMERAL cBIT1 c_0 * f2 cFST b1 f0
+ ((\vs'. (vs' = (FST fvs))) vs') |- (((vs' = (FST fvs)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> * / c= b0 cFST f0 f1 c= c==> c= f1 cFST f0 c==> c/\ c= ccore f2 f3 ccat crev f4 ccat cCONS cFST f5 cNIL ccat cbetwn f6 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f2 f8 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f6 cFST f7 cFST f5 cCONS cFST f5 cNIL f4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f4 b1 cF cFace ccat b2 f4 cF ccat cCONS cFST f7 cNIL ccat cbetwn b0 cFST f7 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f7 cCONS cFST f7 cNIL cFST f0 c, cFace ccore f2 f3 cF cFace ccore f2 f8 cF c==> c/\ c= ccore f2 f3 ccat crev f4 ccat cCONS cFST f5 cNIL ccat cbetwn f6 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f2 f8 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f6 cFST f7 cFST f5 cCONS cFST f5 cNIL f4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f4 b1 cF cFace ccat b2 f4 cF ccat cCONS cFST f7 cNIL ccat cbetwn b0 cFST f7 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f7 cCONS cFST f7 cNIL cFST f0 c, cFace ccore f2 f3 cF cFace ccore f2 f8 cF
+ (z' = ((prev_el r) z)) |- (((prev_el r) z) = z')
T c==> c= f0 cprev_el f1 f2 c= cprev_el f1 f2 f0
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f15 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= cbetwn f14 f4 f7 f16 c==> c= cflatten cmap f3 f16 f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f15 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f15 chold c= cFST f13 f11
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) /\ ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f3 cCONS cFST f3 cNIL f13 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c/\ c= ccat crev f8 f13 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((?f1. (?f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))) ==> ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> c= f8 cmap part cFST cbetwn f7 f2 f4 c==> cmarked_list f0 f5 f1 f3 c==> c? / c? / c= c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b8 b6 ccat cCONS b3 cNIL ccat cbetwn f1 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f1 b2 f6 cCONS f6 cNIL cflatten cmap b5 b6 cbetwn f7 f2 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f8 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b3 cFST f6 cFST f2 cCONS cFST f2 cNIL f8 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f8 b5 cF cFace ccat b6 f8 cF ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f1 f9 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f7 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2
+ (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) /\ (?f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c/\ c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c? / c= b0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), ((((marked_list L) N) r) x) |- (((!x. (((\vs'. (vs' = (FST fvs))) x) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) ==> ((?vs'. (vs' = (FST fvs))) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = ((?vs'. (vs' = (FST fvs))) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> cmarked_list f0 f5 f1 f3 c= c==> ! c==> * / c= b1 cFST f10 b0 c==> c/\ c= ccore f0 f7 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f13 b2 cF cFace ccat b3 f13 cF ccat cCONS cFST f6 cNIL ccat cbetwn b1 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b1 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST f10 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c==> c? / c= b0 cFST f10 c==> c/\ c= ccore f0 f7 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f13 b1 cF cFace ccat b2 f13 cF ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b0 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST f10 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c==> c? / c= b0 cFST f10 c==> c/\ c= ccore f0 f7 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f13 b1 cF cFace ccat b2 f13 cF ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b0 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST f10 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cl'y f4 f5 f6 f3 c= cl'y f4 f5 f6 f3
- (((vs' = vs) ==> B) /\ (vs' = vs)), ((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B) |- (((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B) /\ B)
T c==> c/\ c==> c= f0 f1 f2 c= f0 f1 c==> c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2 c/\ c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2 f2
+ |- (((!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))) ==> ((\y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))) y)) = ((\y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b)))))) y))
T c= c==> ! ! ! c= c= c, f0 b0 c, b1 b2 c/\ c= f0 b1 c= b0 b2 * / ! ! c= c= c, f0 b0 c, b1 b2 c/\ c= f0 b1 c= b0 b2 f1 * / ! ! c= c= c, f0 b0 c, b1 b2 c/\ c= f0 b1 c= b0 b2 f1
+ (A = F) |- ((((A ==> B) /\ A) ==> B) = (((F ==> B) /\ F) ==> B))
T c==> c= f0 cF c= c==> c/\ c==> f0 f1 f0 f1 c==> c/\ c==> cF f1 cF f1
- (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cmap part cFST cbetwn f4 f1 f5 f6 c= cmap part cFST cbetwn f4 f1 f5 f6
+ ((\z'. (z' = ((prev_el r) z))) z') |- (((z' = ((prev_el r) z)) ==> ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))) = ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z)))
T c==> * / c= b0 cprev_el f0 f1 f2 c= c==> c= f2 cprev_el f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f3 b4 ccat crev b2 ccat cCONS cFST f4 cNIL ccat cbetwn b6 cFST f4 cFST b0 cCONS cFST b0 cNIL c= ccore f3 b5 ccat ccat cCONS cFST b0 cNIL ccat cbetwn b6 cFST b0 cFST f4 cCONS cFST f4 cNIL b2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b2 b8 cF cFace ccat b9 b2 cF ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn b8 cFST f4 cFST b0 cCONS cFST b0 cNIL cFST b7 c, cFace ccore f3 b4 cF cFace ccore f3 b5 cF c, ccore f3 f0 f5 ccore f3 f0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b8 b9 ccat b10 b7 ccat cCONS b4 cNIL ccat cbetwn f0 b4 f4 cCONS f4 cNIL ccat cCONS b3 cNIL ccat cbetwn f0 b3 b0 cCONS b0 cNIL cflatten cmap b6 b7 cbetwn b1 f4 b4 / cmap / cPOWER * part cn_list f3 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f3 cnext_el f0 b0 cnext_el f0 f4 cmap part cFST cbetwn b1 f4 f1 cfind_face f3 f4 cprev_el f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f3 b4 ccat crev b2 ccat cCONS cFST f4 cNIL ccat cbetwn b6 cFST f4 cFST b0 cCONS cFST b0 cNIL c= ccore f3 b5 ccat ccat cCONS cFST b0 cNIL ccat cbetwn b6 cFST b0 cFST f4 cCONS cFST f4 cNIL b2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b2 b8 cF cFace ccat b9 b2 cF ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn b8 cFST f4 cFST b0 cCONS cFST b0 cNIL cFST b7 c, cFace ccore f3 b4 cF cFace ccore f3 b5 cF c, ccore f3 f0 f5 ccore f3 f0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b8 b9 ccat b10 b7 ccat cCONS b4 cNIL ccat cbetwn f0 b4 f4 cCONS f4 cNIL ccat cCONS b3 cNIL ccat cbetwn f0 b3 b0 cCONS b0 cNIL cflatten cmap b6 b7 cbetwn b1 f4 b4 / cmap / cPOWER * part cn_list f3 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f3 cnext_el f0 b0 cnext_el f0 f4 cmap part cFST cbetwn b1 f4 f1 cfind_face f3 f4 cprev_el f0 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((is_restricted (hypermap_of_list L)) /\ (~ ((final_list L) r))), ((((marked_list L) N) r) x) |- ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((((split_face fvs) (FST y)) (FST z')) newVs) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) (((((split_normal_list L) r) f) y) z'))))) ((MAP FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cis_restricted chypermap_of_list f0 c~ cfinal_list f0 f1 c==> cmarked_list f0 f2 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= csplit_face b9 cFST b0 cFST b2 b4 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f1 f4 ccore f0 f1 csplit_normal_list f0 f1 b3 b0 b2 cMAP part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f1 b1 cl'z f0 f2 f1 f3 cl'y f0 f1 f3
+ |- (((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (vs , b)) = ((LET (\vs'. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (vs , b))))) vs))
T c= cLET / cLET_END c==> c/\ c= ccore f0 f1 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f6 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL f2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f2 b2 cF cFace ccat b3 f2 cF ccat cCONS cFST f5 cNIL ccat cbetwn b1 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn b1 cFST f3 cFST f5 cCONS cFST f5 cNIL cFST b0 c, cFace ccore f0 f1 cF cFace ccore f0 f6 cF c, f4 f7 cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f1 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn b0 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f6 ccat ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f3 cCONS cFST f3 cNIL f2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f2 b3 cF cFace ccat b4 f2 cF ccat cCONS cFST f5 cNIL ccat cbetwn b2 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn b2 cFST f3 cFST f5 cCONS cFST f5 cNIL cFST b1 c, cFace ccore f0 f1 cF cFace ccore f0 f6 cF c, f4 f7 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((ram2' = ((next_el r) z')) ==> ((((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f3 cl'y f0 f1 f4 c==> c= f5 cl'z f0 f6 f1 f4 c==> c= f7 cprev_el f1 f5 c==> c= f8 c, f9 f10 c==> c= f11 cfind_face f0 f3 c==> c= f12 ccat cCONS cFST f3 cNIL ccat cbetwn f13 cFST f3 cFST f7 cCONS cFST f7 cNIL c==> c= f14 ccat cCONS cFST f7 cNIL ccat cbetwn f13 cFST f7 cFST f3 cCONS cFST f3 cNIL c==> c= f15 cmap part cFST cbetwn f11 f3 f5 c==> c= f9 ccore f0 f1 c==> c= f13 cFST f8 c==> cmarked_list f0 f6 f1 f4 c==> c= f16 cnext_el f1 f7 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b4 b5 ccat b6 b3 ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f7 cCONS f7 cNIL cflatten cmap b2 b3 cbetwn f11 f3 b0 / cmap / cPOWER * part cn_list f0 b3 b2 cupt cNUMERAL cBIT1 c_0 * b1 cFST b2 / csizel cfilter / c= b2 b1 cflatten f0 cnext_el f1 f7 c, f17 f18 c==> c/\ c= ccore f0 f17 ccat crev f15 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f18 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f9 cFST f7 cFST f3 cCONS cFST f3 cNIL f15 c= c, cFace ccat crev f15 f12 cF cFace ccat f14 f15 cF c, cFace ccore f0 f17 cF cFace ccore f0 f18 cF
+ |- (((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) y))
T c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b5 ccat crev b3 ccat cCONS cFST f1 cNIL ccat cbetwn b7 cFST f1 cFST b1 cCONS cFST b1 cNIL c= ccore f0 b6 ccat ccat cCONS cFST b1 cNIL ccat cbetwn b7 cFST b1 cFST f1 cCONS cFST f1 cNIL b3 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b3 b9 cF cFace ccat b10 b3 cF ccat cCONS cFST b1 cNIL ccat cbetwn b9 cFST b1 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b9 cFST f1 cFST b1 cCONS cFST b1 cNIL cFST b8 c, cFace ccore f0 b5 cF cFace ccore f0 b6 cF c, ccore f0 f2 f3 ccore f0 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b9 b10 ccat b11 b8 ccat cCONS b5 cNIL ccat cbetwn f2 b5 f1 cCONS f1 cNIL ccat cCONS b4 cNIL ccat cbetwn f2 b4 b1 cCONS b1 cNIL cflatten cmap b7 b8 cbetwn b2 f1 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el f2 b1 cnext_el f2 f1 cmap part cFST cbetwn b2 f1 b0 cfind_face f0 f1 cprev_el f2 b0 cl'z f0 f4 f2 f5 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b4 b10 cF cFace ccat b11 b4 cF ccat cCONS cFST b2 cNIL ccat cbetwn b10 cFST b2 cFST b0 cCONS cFST b0 cNIL ccat cCONS cFST b0 cNIL ccat cbetwn b10 cFST b0 cFST b2 cCONS cFST b2 cNIL cFST b9 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f2 f3 ccore f0 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b10 b11 ccat b12 b9 ccat cCONS b6 cNIL ccat cbetwn f2 b6 b0 cCONS b0 cNIL ccat cCONS b5 cNIL ccat cbetwn f2 b5 b2 cCONS b2 cNIL cflatten cmap b8 b9 cbetwn b3 b0 b6 / cmap / cPOWER * part cn_list f0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten f0 cnext_el f2 b2 cnext_el f2 b0 cmap part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f2 b1 cl'z f0 f4 f2 f5 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), ((((marked_list L) N) r) x) |- ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) y)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> cmarked_list f0 f4 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b4 b10 cF cFace ccat b11 b4 cF ccat cCONS cFST b2 cNIL ccat cbetwn b10 cFST b2 cFST b0 cCONS cFST b0 cNIL ccat cCONS cFST b0 cNIL ccat cbetwn b10 cFST b0 cFST b2 cCONS cFST b2 cNIL cFST b9 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f1 f5 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b10 b11 ccat b12 b9 ccat cCONS b6 cNIL ccat cbetwn f1 b6 b0 cCONS b0 cNIL ccat cCONS b5 cNIL ccat cbetwn f1 b5 b2 cCONS b2 cNIL cflatten cmap b8 b9 cbetwn b3 b0 b6 / cmap / cPOWER * part cn_list f0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten f0 cnext_el f1 b2 cnext_el f1 b0 cmap part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f1 b1 cl'z f0 f4 f1 f3 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((\y. (y = (((l'y L) r) x))) y) ==> ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> * / c= b0 cl'y f0 f1 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b4 b10 cF cFace ccat b11 b4 cF ccat cCONS cFST b2 cNIL ccat cbetwn b10 cFST b2 cFST b0 cCONS cFST b0 cNIL ccat cCONS cFST b0 cNIL ccat cbetwn b10 cFST b0 cFST b2 cCONS cFST b2 cNIL cFST b9 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f1 f5 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b10 b11 ccat b12 b9 ccat cCONS b6 cNIL ccat cbetwn f1 b6 b0 cCONS b0 cNIL ccat cCONS b5 cNIL ccat cbetwn f1 b5 b2 cCONS b2 cNIL cflatten cmap b8 b9 cbetwn b3 b0 b6 / cmap / cPOWER * part cn_list f0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten f0 cnext_el f1 b2 cnext_el f1 b0 cmap part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f1 b1 cl'z f0 f2 f1 f3 cl'y f0 f1 f3
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') /\ ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= cfind_face f0 f4 f17 c==> c= cbetwn f17 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f17 f4 f8 f18 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f19 c==> c= ccat crev f15 f16 f20 c==> c= ccat f19 f14 f21 c==> c= ccore f0 f20 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 chold c= cFST f13 f11
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((((betwn f) y) ram2') = new2) /\ (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cbetwn f14 f4 f7 f15 c==> c= cFST f13 f16 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f16 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f16 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f17 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= cbetwn f14 f4 f7 f15 c==> c= cflatten cmap f3 f15 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f19 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f15 f22 c==> c= ccore f0 f21 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 chold c/\ c= ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f16 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), ((((marked_list L) N) r) x) |- ((fvs = (vs , b)) ==> ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (vs , b)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> cmarked_list f0 f5 f1 f3 c==> c= f12 c, f11 f13 cLET / cLET_END c==> c/\ c= ccore f0 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b2 cF cFace ccat b3 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b1 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b1 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b0 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c, f11 f13
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((((core L) r) = vs) = (((core L) r) = vs))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= ccore f4 f5 f6 c= ccore f4 f5 f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= ccore f0 f1 f2 c==> cmarked_list f0 f3 f1 f4 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f3 f1 f4 f6 c==> c= cprev_el f1 f6 f7 c==> c= cfind_face f0 f5 f8 c==> c= cmap part cFST cbetwn f8 f5 f6 f9 c==> c= ccore f0 f1 f2 c==> c= c, f2 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f7 cCONS cFST f7 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccat cCONS cFST f7 cNIL ccat cbetwn cFST f11 cFST f7 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f7 cNIL ccat cbetwn cFST f11 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f7 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f8 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f7 cCONS f7 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f9 ccat cCONS cFST f5 cNIL ccat cbetwn f2 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f2 cFST f7 cFST f5 cCONS cFST f5 cNIL f9 chold c= cFST f11 f2
+ ((FST fvs) = vs') |- ((good_list L) ==> ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs)))))))))))))))))))))))))))))
T c==> c= cFST f0 f1 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> cmarked_list f2 f3 f4 f5 c==> cis_restricted chypermap_of_list f2 c==> c~ cfinal_list f2 f4 c==> c= cl'y f2 f4 f5 f6 c==> c= cl'z f2 f3 f4 f5 f7 c==> c= cprev_el f4 f7 f8 c==> c= cfind_face f2 f6 f9 c==> c= cmap part cFST cbetwn f9 f6 f7 f10 c==> c= ccore f2 f4 f11 c==> c= c, f11 f12 f0 c==> c= cFST f0 f1 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f1 cFST f6 cFST f8 cCONS cFST f8 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f1 cFST f6 cFST f8 cCONS cFST f8 cNIL c==> c= ccat cCONS cFST f8 cNIL ccat cbetwn f1 cFST f8 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f8 cNIL ccat cbetwn f1 cFST f8 cFST f6 cCONS cFST f6 cNIL c==> c= cnext_el f4 f6 f13 c==> c= cnext_el f4 f8 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f2 f15 c==> c= / cmap / cPOWER * part cn_list f2 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f9 f6 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f4 f13 f8 cCONS f8 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f4 f14 f6 cCONS f6 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f2 f21 ccat crev f10 ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f8 cCONS cFST f8 cNIL c==> c= ccore f2 f22 ccat ccat cCONS cFST f8 cNIL ccat cbetwn f11 cFST f8 cFST f6 cCONS cFST f6 cNIL f10 chold c= f1 f11
- (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cprev_el f4 f5 f3 c= cprev_el f4 f5 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), ((((marked_list L) N) r) x), ((\z. (z = ((((l'z L) N) r) x))) z) |- (((\z. (z = ((((l'z L) N) r) x))) z) /\ ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> cmarked_list f0 f4 f1 f3 c==> * / c= b0 cl'z f0 f4 f1 f3 f5 c/\ * / c= b0 cl'z f0 f4 f1 f3 f5 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b5 ccat crev b3 ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST b1 cCONS cFST b1 cNIL c= ccore f0 b6 ccat ccat cCONS cFST b1 cNIL ccat cbetwn b7 cFST b1 cFST f2 cCONS cFST f2 cNIL b3 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b3 b9 cF cFace ccat b10 b3 cF ccat cCONS cFST b1 cNIL ccat cbetwn b9 cFST b1 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b9 cFST f2 cFST b1 cCONS cFST b1 cNIL cFST b8 c, cFace ccore f0 b5 cF cFace ccore f0 b6 cF c, ccore f0 f1 f6 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b9 b10 ccat b11 b8 ccat cCONS b5 cNIL ccat cbetwn f1 b5 f2 cCONS f2 cNIL ccat cCONS b4 cNIL ccat cbetwn f1 b4 b1 cCONS b1 cNIL cflatten cmap b7 b8 cbetwn b2 f2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el f1 b1 cnext_el f1 f2 cmap part cFST cbetwn b2 f2 b0 cfind_face f0 f2 cprev_el f1 b0 cl'z f0 f4 f1 f3
+ |- (((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y)) = ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) z'))
T c= cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev b1 ccat cCONS cFST f1 cNIL ccat cbetwn b5 cFST f1 cFST f2 cCONS cFST f2 cNIL c= ccore f0 b4 ccat ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f1 cCONS cFST f1 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b7 cFST f1 cFST f2 cCONS cFST f2 cNIL cFST b6 c, cFace ccore f0 b3 cF cFace ccore f0 b4 cF c, ccore f0 f3 f4 ccore f0 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f3 b3 f1 cCONS f1 cNIL ccat cCONS b2 cNIL ccat cbetwn f3 b2 f2 cCONS f2 cNIL cflatten cmap b5 b6 cbetwn b0 f1 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f3 f2 cnext_el f3 f1 cmap part cFST cbetwn b0 f1 f5 cfind_face f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b4 ccat crev b2 ccat cCONS cFST f1 cNIL ccat cbetwn b6 cFST f1 cFST b0 cCONS cFST b0 cNIL c= ccore f0 b5 ccat ccat cCONS cFST b0 cNIL ccat cbetwn b6 cFST b0 cFST f1 cCONS cFST f1 cNIL b2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b2 b8 cF cFace ccat b9 b2 cF ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b8 cFST f1 cFST b0 cCONS cFST b0 cNIL cFST b7 c, cFace ccore f0 b4 cF cFace ccore f0 b5 cF c, ccore f0 f3 f4 ccore f0 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b8 b9 ccat b10 b7 ccat cCONS b4 cNIL ccat cbetwn f3 b4 f1 cCONS f1 cNIL ccat cCONS b3 cNIL ccat cbetwn f3 b3 b0 cCONS b0 cNIL cflatten cmap b6 b7 cbetwn b1 f1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f3 b0 cnext_el f3 f1 cmap part cFST cbetwn b1 f1 f5 cfind_face f0 f1 f2
+ |- (!f1. (!f2. (((\_10484456. (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10484456)) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10484456)) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a0)))) _10484456))) F) , ((Face ((core L) ((@fn. (!a0. (!a1. ((fn (a0 , a1)) = a1)))) _10484456))) F))))))) (((core L) r) , b))))) ((core L) r)))) (f1 , f2)) = (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))
T c= * / cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 c@ / ! ! c= * b3 c, b4 b5 b4 b0 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b1 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 c@ / ! ! c= * b3 c, b4 b5 b5 b0 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b1 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b3 cF cFace ccat b4 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b2 c, cFace ccore f0 c@ / ! ! c= * b3 c, b4 b5 b4 b0 cF cFace ccore f0 c@ / ! ! c= * b3 c, b4 b5 b5 b0 cF c, ccore f0 f4 f5 ccore f0 f4 c, f6 f7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f6 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b0 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 f7 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b0 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b2 cF cFace ccat b3 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b2 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b2 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b1 c, cFace ccore f0 f6 cF cFace ccore f0 f7 cF c, ccore f0 f4 f5 ccore f0 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) = ((Face ((core L) f1)) F)) /\ (((Face ((cat f2') newVs)) F) = ((Face ((core L) f2)) F))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= ccat f16 f18 f19 c==> c= ccat crev f17 f15 f20 c==> c= f21 ccat cCONS cFST f5 cNIL ccat cbetwn f22 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f23 ccat cCONS cFST f7 cNIL ccat cbetwn f22 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f24 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f22 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c/\ c= ccore f0 f20 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f19 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24 c/\ c= cFace ccat crev f24 f21 cF cFace ccore f0 f20 cF c= cFace ccat f23 f24 cF cFace ccore f0 f19 cF
+ |- (((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)) = ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) (f1 , f2)))
T c= cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f1 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn b0 cFST f3 cFST f4 cCONS cFST f4 cNIL c= ccore f0 f5 ccat ccat cCONS cFST f4 cNIL ccat cbetwn b0 cFST f4 cFST f3 cCONS cFST f3 cNIL f2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f2 b2 cF cFace ccat b3 f2 cF ccat cCONS cFST f4 cNIL ccat cbetwn b2 cFST f4 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn b2 cFST f3 cFST f4 cCONS cFST f4 cNIL cFST b1 c, cFace ccore f0 f1 cF cFace ccore f0 f5 cF c, ccore f0 f6 f7 ccore f0 f6 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f4 cCONS cFST f4 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f4 cNIL ccat cbetwn b3 cFST f4 cFST f3 cCONS cFST f3 cNIL f2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f2 b5 cF cFace ccat b6 f2 cF ccat cCONS cFST f4 cNIL ccat cbetwn b5 cFST f4 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f4 cCONS cFST f4 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f6 f7 ccore f0 f6 c, f1 f5
+ ((\f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))) f2'') |- (((f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) ==> ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> * / c= b0 ccat cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL f3 c= c==> c= f3 ccat cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL c==> c= cLET / cLET_END c, ccat crev f4 f5 ccat b0 f6 ccat cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL c, f7 f8 c==> c/\ c= ccore f9 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f12 cCONS cFST f12 cNIL c= ccore f9 f8 ccat ccat cCONS cFST f12 cNIL ccat cbetwn f11 cFST f12 cFST f2 cCONS cFST f2 cNIL f10 c= c, cFace ccat crev f10 f13 cF cFace ccat f14 f10 cF c, cFace ccore f9 f7 cF cFace ccore f9 f8 cF c==> c= cLET / cLET_END c, ccat crev f4 f5 ccat b0 f6 ccat cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL c, f7 f8 c==> c/\ c= ccore f9 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f12 cCONS cFST f12 cNIL c= ccore f9 f8 ccat ccat cCONS cFST f12 cNIL ccat cbetwn f11 cFST f12 cFST f2 cCONS cFST f2 cNIL f10 c= c, cFace ccat crev f10 f13 cF cFace ccat f14 f10 cF c, cFace ccore f9 f7 cF cFace ccore f9 f8 cF
+ (fvs = (vs , b)) |- ((\fvs. (fvs = (vs , b))) fvs)
T c==> c= f0 c, f1 f2 * / c= b0 c, f1 f2 f0
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, ccore f0 f1 f7 f8 c==> c= cfind_face f0 f5 f9 c==> c= cFST f8 cFST f8 c==> c= cmap part cFST cbetwn f9 f5 f2 f10 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f6 f1 f4 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f9 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= cFST f8 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), ((((marked_list L) N) r) x) |- ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 ccore f0 f1 c==> c= c, ccore f0 f1 f9 f10 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f7 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c= cFST f10 ccore f0 f1
+ |- (MAP = map)
T c= part cMAP part cmap
- |- (LENGTH = sizel)
T c= part cLENGTH part csizel
+ ((flatten ((map nd) new2)) = new1) |- (((flatten ((map nd) new2)) = new1) /\ ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r))))))))))
T c==> c= cflatten cmap f0 f1 f2 c/\ c= cflatten cmap f0 f1 f2 c==> c= ccat cCONS f3 cNIL ccat cbetwn f4 f3 f5 cCONS f5 cNIL f6 c==> c= ccat cCONS f7 cNIL ccat cbetwn f4 f7 f8 cCONS f8 cNIL f9 c==> c= ccat crev f2 f6 f10 c==> c= ccat f9 f1 f11 c==> c= ccore f12 f10 ccat crev f13 ccat cCONS cFST f8 cNIL ccat cbetwn ccore f12 f4 cFST f8 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f12 f11 ccat ccat cCONS cFST f5 cNIL ccat cbetwn ccore f12 f4 cFST f5 cFST f8 cCONS cFST f8 cNIL f13 chold c= cFST c, ccore f12 f4 f14 ccore f12 f4
- (newVs = ((map FST) (((betwn f) y) z))) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= c= cl'y f4 f5 f6 f2 c= cl'y f4 f5 f6 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((\f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))) f2'') ==> ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 cflatten cmap f2 f17 c==> c= f17 cbetwn f14 f5 f6 c==> c= f18 ccat cCONS cFST f5 cNIL ccat cbetwn f19 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f20 ccat cCONS cFST f7 cNIL ccat cbetwn f19 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f21 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f19 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> * / c= b0 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL f22 c==> c= cLET / cLET_END c, ccat crev f16 f15 ccat b0 f17 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f23 f24 c==> c/\ c= ccore f0 f23 ccat crev f21 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f21 c= c, cFace ccat crev f21 f18 cF cFace ccat f20 f21 cF c, cFace ccore f0 f23 cF cFace ccore f0 f24 cF
- (new2 = (((betwn f) y) ram2')) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 cbetwn f1 f2 f3 c= cmarked_list f4 f5 f6 f7 cmarked_list f4 f5 f6 f7
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
+ |- (?new1. (new1 = (flatten ((map nd) new2))))
T c? / c= b0 cflatten cmap f0 f1
+ (good_list_nodes L) |- ((good_list_nodes L) /\ (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = (((core L) r) , b)) ==> (((FST (((core L) r) , b)) = (FST (((core L) r) , b))) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))))))))))))))))))))
T c==> cgood_list_nodes f0 c/\ cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 ccore f0 f2 c==> c= c, ccore f0 f2 f9 c, ccore f0 f2 f9 c==> c= cFST c, ccore f0 f2 f9 cFST c, ccore f0 f2 f9 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f10 c==> c= cnext_el f2 f6 f11 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f12 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f12 cFST b0 f13 c==> c= cbetwn f7 f4 f11 f14 c==> c= cflatten cmap f13 f14 f15 c==> c= ccat cCONS f10 cNIL ccat cbetwn f2 f10 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f2 f11 f4 cCONS f4 cNIL f17 c==> c= ccat crev f15 f16 f18 c==> c= ccat f17 f14 f19 c==> c= ccore f0 f18 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f2 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f2 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c= cFST c, ccore f0 f2 f9 ccore f0 f2
+ |- (((?f2. (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c= c==> c? / c= b0 ccat cCONS cFST f0 cNIL ccat cbetwn f1 cFST f0 cFST f2 cCONS cFST f2 cNIL c==> c/\ c= ccore f3 f4 ccat crev f5 ccat cCONS cFST f2 cNIL ccat cbetwn f6 cFST f2 cFST f0 cCONS cFST f0 cNIL c= ccore f3 f7 ccat ccat cCONS cFST f0 cNIL ccat cbetwn f6 cFST f0 cFST f2 cCONS cFST f2 cNIL f5 c= cLET / cLET_END c, cFace ccat crev f5 f8 cF cFace ccat b0 f5 cF ccat cCONS cFST f0 cNIL ccat cbetwn f1 cFST f0 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f3 f4 cF cFace ccore f3 f7 cF c==> c/\ c= ccore f3 f4 ccat crev f5 ccat cCONS cFST f2 cNIL ccat cbetwn f6 cFST f2 cFST f0 cCONS cFST f0 cNIL c= ccore f3 f7 ccat ccat cCONS cFST f0 cNIL ccat cbetwn f6 cFST f0 cFST f2 cCONS cFST f2 cNIL f5 c= cLET / cLET_END c, cFace ccat crev f5 f8 cF cFace ccat b0 f5 cF ccat cCONS cFST f0 cNIL ccat cbetwn f1 cFST f0 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f3 f4 cF cFace ccore f3 f7 cF
- (newVs = ((map FST) (((betwn f) y) z))) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= c= cprev_el f4 f3 f5 c= cprev_el f4 f3 f5
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> cmarked_list f0 f5 f1 f3 cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn b0 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b2 cF cFace ccat b3 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b2 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b2 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b1 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c, ccore f0 f1 f11 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f3 cCONS cFST f3 cNIL f9 c==> c= cmap part cFST cbetwn f7 f5 f2 f10 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f6 f1 f4 c==> c= c, f11 f12 f13 c==> c= cFST f13 f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f3 cCONS cFST f3 cNIL f9 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c/\ c= ccat crev f10 f9 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f10
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((?f2. (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f15 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c==> c? / c= b0 ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c==> c/\ c= ccore f0 f7 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f15 c= cLET / cLET_END c, cFace ccat crev f15 f13 cF cFace ccat b0 f15 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) f2') = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f15 ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c==> c= f16 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c==> c/\ c= ccore f0 f7 ccat crev f16 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f16 c= cLET / cLET_END c, cFace ccat crev f16 f13 cF cFace ccat b0 f16 cF f15 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
+ (vs' = (FST fvs)) |- ((\vs'. (vs' = (FST fvs))) vs')
T c==> c= f0 cFST f1 * / c= b0 cFST f1 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), ((((marked_list L) N) r) x) |- ((f = ((find_face L) y)) /\ ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> cmarked_list f0 f5 f1 f3 c/\ c= f7 cfind_face f0 f2 cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev b1 ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b4 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f6 cNIL ccat cbetwn b7 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b6 c, cFace ccore f0 b3 cF cFace ccore f0 b4 cF c, ccore f0 f1 f8 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f1 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f1 b2 f6 cCONS f6 cNIL cflatten cmap b5 b6 cbetwn b0 f2 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cmap part cFST cbetwn b0 f2 f4 cfind_face f0 f2
+ (vs = ((core L) r)) |- (((LET (\vs'. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (vs , b))))) vs) = ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)))
T c==> c= f0 ccore f1 f2 c= cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f1 f3 ccat crev f4 ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f6 cCONS cFST f6 cNIL c= ccore f1 f7 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f5 cCONS cFST f5 cNIL f4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f4 b3 cF cFace ccat b4 f4 cF ccat cCONS cFST f6 cNIL ccat cbetwn b2 cFST f6 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn b2 cFST f5 cFST f6 cCONS cFST f6 cNIL cFST b1 c, cFace ccore f1 f3 cF cFace ccore f1 f7 cF c, f0 f8 f0 cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f1 f3 ccat crev f4 ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f6 cCONS cFST f6 cNIL c= ccore f1 f7 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f5 cCONS cFST f5 cNIL f4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f4 b2 cF cFace ccat b3 f4 cF ccat cCONS cFST f6 cNIL ccat cbetwn b2 cFST f6 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn b2 cFST f5 cFST f6 cCONS cFST f6 cNIL cFST b1 c, cFace ccore f1 f3 cF cFace ccore f1 f7 cF c, ccore f1 f2 f8 ccore f1 f2
+ (!a. (!b. ((((Face a) F) = ((Face b) F)) = (a = b)))) |- ((\b. ((((Face a) F) = ((Face b) F)) = (a = b))) b)
T c==> ! ! c= c= cFace b0 cF cFace b1 cF c= b0 b1 * / c= c= cFace f0 cF cFace b0 cF c= f0 b0 f1
- (fvs = (vs , b)) |- ((good_list L) = (good_list L))
T c==> c= f0 c, f1 f2 c= cgood_list f3 cgood_list f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), ((((marked_list L) N) r) x) |- (((\z'. (z' = ((prev_el r) z))) z') ==> ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> cmarked_list f0 f5 f1 f3 c==> * / c= b0 cprev_el f1 f4 f6 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b4 ccat crev b2 ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST b0 cCONS cFST b0 cNIL c= ccore f0 b5 ccat ccat cCONS cFST b0 cNIL ccat cbetwn b6 cFST b0 cFST f2 cCONS cFST f2 cNIL b2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b2 b8 cF cFace ccat b9 b2 cF ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b8 cFST f2 cFST b0 cCONS cFST b0 cNIL cFST b7 c, cFace ccore f0 b4 cF cFace ccore f0 b5 cF c, ccore f0 f1 f7 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b8 b9 ccat b10 b7 ccat cCONS b4 cNIL ccat cbetwn f1 b4 f2 cCONS f2 cNIL ccat cCONS b3 cNIL ccat cbetwn f1 b3 b0 cCONS b0 cNIL cflatten cmap b6 b7 cbetwn b1 f2 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b0 cnext_el f1 f2 cmap part cFST cbetwn b1 f2 f4 cfind_face f0 f2 cprev_el f1 f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f21 c==> c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 chold c= cFST f13 f11
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cbetwn f14 f4 f7 f15 c==> c= cFST f13 f16 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f16 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f16 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f17 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= cflatten cmap f3 f15 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f19 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f15 f22 c==> c= ccore f0 f21 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 chold c/\ c= ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f16 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17
+ ((\vs. (vs = ((core L) r))) vs) |- (vs = ((core L) r))
T c==> * / c= b0 ccore f0 f1 f2 c= f2 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL f12 c==> c= cmap part cFST cbetwn f10 f5 f2 f13 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f10 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f13 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f13 chold c/\ c= ccat crev f13 f12 ccat crev f13 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f13 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f13
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x), ((\ram2'. (ram2' = ((next_el r) z'))) ram2') |- (((\ram2'. (ram2' = ((next_el r) z'))) ram2') /\ ((((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f3 cl'y f0 f1 f4 c==> c= f5 cl'z f0 f6 f1 f4 c==> c= f7 cprev_el f1 f5 c==> c= f8 c, f9 f10 c==> c= f11 cfind_face f0 f3 c==> c= f12 ccat cCONS cFST f3 cNIL ccat cbetwn f13 cFST f3 cFST f7 cCONS cFST f7 cNIL c==> c= f14 ccat cCONS cFST f7 cNIL ccat cbetwn f13 cFST f7 cFST f3 cCONS cFST f3 cNIL c==> c= f15 cmap part cFST cbetwn f11 f3 f5 c==> c= f9 ccore f0 f1 c==> c= f13 cFST f8 c==> cmarked_list f0 f6 f1 f4 c==> * / c= b0 cnext_el f1 f7 f16 c/\ * / c= b0 cnext_el f1 f7 f16 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b4 b5 ccat b6 b3 ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f7 cCONS f7 cNIL cflatten cmap b2 b3 cbetwn f11 f3 b0 / cmap / cPOWER * part cn_list f0 b3 b2 cupt cNUMERAL cBIT1 c_0 * b1 cFST b2 / csizel cfilter / c= b2 b1 cflatten f0 cnext_el f1 f7 c, f17 f18 c==> c/\ c= ccore f0 f17 ccat crev f15 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f18 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f9 cFST f7 cFST f3 cCONS cFST f3 cNIL f15 c= c, cFace ccat crev f15 f12 cF cFace ccat f14 f15 cF c, cFace ccore f0 f17 cF cFace ccore f0 f18 cF
+ |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (new1 = (flatten ((map nd) new2))) |- (((((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) new1) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = ((((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c= f0 cflatten cmap f1 f2 c= c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b0 b1 ccat b2 f2 ccat cCONS f3 cNIL ccat cbetwn f4 f3 f5 cCONS f5 cNIL ccat cCONS f6 cNIL ccat cbetwn f4 f6 f7 cCONS f7 cNIL f0 c, f8 f9 c==> c/\ c= ccore f10 f8 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f10 f9 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f11 c= c, cFace ccat crev f11 f13 cF cFace ccat f14 f11 cF c, cFace ccore f10 f8 cF cFace ccore f10 f9 cF c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b0 b1 ccat b2 f2 ccat cCONS f3 cNIL ccat cbetwn f4 f3 f5 cCONS f5 cNIL ccat cCONS f6 cNIL ccat cbetwn f4 f6 f7 cCONS f7 cNIL cflatten cmap f1 f2 c, f8 f9 c==> c/\ c= ccore f10 f8 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f10 f9 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f11 c= c, cFace ccat crev f11 f13 cF cFace ccat f14 f11 cF c, cFace ccore f10 f8 cF cFace ccore f10 f9 cF
+ (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) /\ ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c/\ cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f11 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f11 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f11 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f12 c==> c= cnext_el f2 f6 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f7 f4 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f2 f12 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f2 f13 f4 cCONS f4 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c= cFST f11 f9
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f3 cFST f2 cFST f4 cCONS cFST f4 cNIL f5 c==> cmarked_list f0 f6 f1 f7 c==> c= cl'y f0 f1 f7 f2 c==> c= cl'z f0 f6 f1 f7 f8 c==> c= cprev_el f1 f8 f4 c==> c= cfind_face f0 f2 f9 c==> c= cmap part cFST cbetwn f9 f2 f8 f10 c==> c= ccore f0 f1 f11 c==> c= c, f11 f12 f13 c==> c= cFST f13 f3 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f3 cFST f2 cFST f4 cCONS cFST f4 cNIL f5 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f3 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f3 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= cnext_el f1 f2 f14 c==> c= cnext_el f1 f4 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f9 f2 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f4 cCONS f4 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f2 cCONS f2 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f2 cCONS cFST f2 cNIL f10 chold c/\ c= ccat crev f10 f5 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f4 cCONS cFST f4 cNIL c= ccat ccat cCONS cFST f4 cNIL ccat cbetwn f3 cFST f4 cFST f2 cCONS cFST f2 cNIL f10 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f2 cCONS cFST f2 cNIL f10
- |- ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)
T * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
+ |- (((?newVs. (newVs = ((map FST) (((betwn f) y) z)))) ==> ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))) = ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z))))
T c= c==> c? / c= b0 cmap part cFST cbetwn f0 f1 f2 cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f3 b2 ccat crev b0 ccat cCONS cFST f1 cNIL ccat cbetwn b4 cFST f1 cFST f4 cCONS cFST f4 cNIL c= ccore f3 b3 ccat ccat cCONS cFST f4 cNIL ccat cbetwn b4 cFST f4 cFST f1 cCONS cFST f1 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f4 cNIL ccat cbetwn b6 cFST f4 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b6 cFST f1 cFST f4 cCONS cFST f4 cNIL cFST b5 c, cFace ccore f3 b2 cF cFace ccore f3 b3 cF c, ccore f3 f5 f6 ccore f3 f5 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f5 b2 f1 cCONS f1 cNIL ccat cCONS b1 cNIL ccat cbetwn f5 b1 f4 cCONS f4 cNIL cflatten cmap b4 b5 cbetwn f0 f1 b2 / cmap / cPOWER * part cn_list f3 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f3 cnext_el f5 f4 cnext_el f5 f1 cmap part cFST cbetwn f0 f1 f2 cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f3 b2 ccat crev b0 ccat cCONS cFST f1 cNIL ccat cbetwn b4 cFST f1 cFST f4 cCONS cFST f4 cNIL c= ccore f3 b3 ccat ccat cCONS cFST f4 cNIL ccat cbetwn b4 cFST f4 cFST f1 cCONS cFST f1 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f4 cNIL ccat cbetwn b6 cFST f4 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b6 cFST f1 cFST f4 cCONS cFST f4 cNIL cFST b5 c, cFace ccore f3 b2 cF cFace ccore f3 b3 cF c, ccore f3 f5 f6 ccore f3 f5 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f5 b2 f1 cCONS f1 cNIL ccat cCONS b1 cNIL ccat cbetwn f5 b1 f4 cCONS f4 cNIL cflatten cmap b4 b5 cbetwn f0 f1 b2 / cmap / cPOWER * part cn_list f3 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f3 cnext_el f5 f4 cnext_el f5 f1 cmap part cFST cbetwn f0 f1 f2
- |- ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))
T c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (vs' = vs)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f22 c==> c= ccore f0 f19 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c= f21 f11
+ (z' = ((prev_el r) z)) |- ((z' = ((prev_el r) z)) /\ (?z'. (z' = ((prev_el r) z))))
T c==> c= f0 cprev_el f1 f2 c/\ c= f0 cprev_el f1 f2 c? / c= b0 cprev_el f1 f2
+ |- ((good_list L) ==> ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 ccore f0 f2 c==> c= c, ccore f0 f2 f9 f10 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f10 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f10 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f10 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f10 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f11 c==> c= cnext_el f2 f6 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f7 f4 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f2 f11 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f2 f12 f4 cCONS f4 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f2 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f2 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c= cFST f10 ccore f0 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x), ((\f1'. (f1' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))) f1'') |- (((\f1'. (f1' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))) f1'') /\ ((((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 cflatten cmap f2 f16 c==> c= f16 cbetwn f14 f5 f6 c==> c= f17 ccat cCONS cFST f5 cNIL ccat cbetwn f18 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f19 ccat cCONS cFST f7 cNIL ccat cbetwn f18 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f20 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f18 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> * / c= b0 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL f21 c/\ * / c= b0 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL f21 c==> c= cLET / cLET_END cLET / cLET_END c, ccat crev f15 b0 ccat b1 f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c, f22 f23 c==> c/\ c= ccore f0 f22 ccat crev f20 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f23 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f20 c= c, cFace ccat crev f20 f17 cF cFace ccat f19 f20 cF c, cFace ccore f0 f22 cF cFace ccore f0 f23 cF
+ |- (((T ==> B) /\ T) ==> B)
T c==> c/\ c==> cT f0 cT f0
+ ((\fvs. (fvs = (vs , b))) fvs) |- (fvs = (vs , b))
T c==> * / c= b0 c, f0 f1 f2 c= f2 c, f0 f1
- (new1 = (flatten ((map nd) new2))) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) = ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd))
T c==> c= f0 cflatten cmap f1 f2 c= c= / cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 * f4 cFST b0 f1 c= / cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 * f4 cFST b0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x), ((\y. (y = (((l'y L) r) x))) y) |- (((\y. (y = (((l'y L) r) x))) y) /\ ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> * / c= b0 cl'y f0 f1 f3 f4 c/\ * / c= b0 cl'y f0 f1 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b4 b10 cF cFace ccat b11 b4 cF ccat cCONS cFST b2 cNIL ccat cbetwn b10 cFST b2 cFST b0 cCONS cFST b0 cNIL ccat cCONS cFST b0 cNIL ccat cbetwn b10 cFST b0 cFST b2 cCONS cFST b2 cNIL cFST b9 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f1 f5 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b10 b11 ccat b12 b9 ccat cCONS b6 cNIL ccat cbetwn f1 b6 b0 cCONS b0 cNIL ccat cCONS b5 cNIL ccat cbetwn f1 b5 b2 cCONS b2 cNIL cflatten cmap b8 b9 cbetwn b3 b0 b6 / cmap / cPOWER * part cn_list f0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten f0 cnext_el f1 b2 cnext_el f1 b0 cmap part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f1 b1 cl'z f0 f2 f1 f3 cl'y f0 f1 f3
- (fvs = (vs , b)) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 c, f1 f2 c= c= cfind_face f3 f4 f5 c= cfind_face f3 f4 f5
+ (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2')
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL f0
+ (good_list L), (good_list_nodes L), (((((marked_list L) N) r) x) /\ ((is_restricted (hypermap_of_list L)) /\ (~ ((final_list L) r)))), ((((marked_list L) N) r) x) |- ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((((split_face fvs) (FST y)) (FST z')) newVs) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) (((((split_normal_list L) r) f) y) z'))))) ((MAP FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c~ cfinal_list f0 f2 c==> cmarked_list f0 f1 f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= csplit_face b9 cFST b0 cFST b2 b4 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f2 f4 ccore f0 f2 csplit_normal_list f0 f2 b3 b0 b2 cMAP part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f2 b1 cl'z f0 f1 f2 f3 cl'y f0 f2 f3
+ |- (?new2. (new2 = (((betwn f) y) ram2')))
T c? / c= b0 cbetwn f0 f1 f2
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= cl'y f1 f3 f4 f5 c= cl'y f1 f3 f4 f5
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((?y. (y = (((l'y L) r) x))) ==> ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> c? / c= b0 cl'y f0 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b4 b10 cF cFace ccat b11 b4 cF ccat cCONS cFST b2 cNIL ccat cbetwn b10 cFST b2 cFST b0 cCONS cFST b0 cNIL ccat cCONS cFST b0 cNIL ccat cbetwn b10 cFST b0 cFST b2 cCONS cFST b2 cNIL cFST b9 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f1 f4 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b10 b11 ccat b12 b9 ccat cCONS b6 cNIL ccat cbetwn f1 b6 b0 cCONS b0 cNIL ccat cCONS b5 cNIL ccat cbetwn f1 b5 b2 cCONS b2 cNIL cflatten cmap b8 b9 cbetwn b3 b0 b6 / cmap / cPOWER * part cn_list f0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten f0 cnext_el f1 b2 cnext_el f1 b0 cmap part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f1 b1 cl'z f0 f2 f1 f3 cl'y f0 f1 f3
+ |- ((vs' = vs) = (((vs' = vs) ==> ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))) /\ (vs' = vs)))
T c= c= f0 f1 c/\ c==> c= f0 f1 c/\ c= ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f0 cFST f3 cFST f4 cCONS cFST f4 cNIL ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f1 cFST f3 cFST f4 cCONS cFST f4 cNIL c= ccat ccat cCONS cFST f4 cNIL ccat cbetwn f0 cFST f4 cFST f3 cCONS cFST f3 cNIL f2 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f1 cFST f4 cFST f3 cCONS cFST f3 cNIL f2 c= f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((flatten ((map nd) new2)) = new1) /\ ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= cfind_face f0 f4 f16 c==> c= cbetwn f16 f4 f7 f14 c==> c= cFST f13 f17 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f17 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f17 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f16 f4 f8 f18 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f19 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f20 c==> c= ccat crev f15 f19 f21 c==> c= ccat f20 f14 f22 c==> c= ccore f0 f21 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 chold c/\ c= ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f17 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f18
+ |- ((good_list L) ==> ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = (((core L) r) , b)) ==> (((FST (((core L) r) , b)) = (FST (((core L) r) , b))) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 ccore f0 f2 c==> c= c, ccore f0 f2 f9 c, ccore f0 f2 f9 c==> c= cFST c, ccore f0 f2 f9 cFST c, ccore f0 f2 f9 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f10 c==> c= cnext_el f2 f6 f11 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f12 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f12 cFST b0 f13 c==> c= cbetwn f7 f4 f11 f14 c==> c= cflatten cmap f13 f14 f15 c==> c= ccat cCONS f10 cNIL ccat cbetwn f2 f10 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f2 f11 f4 cCONS f4 cNIL f17 c==> c= ccat crev f15 f16 f18 c==> c= ccat f17 f14 f19 c==> c= ccore f0 f18 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f2 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f2 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c= cFST c, ccore f0 f2 f9 ccore f0 f2
- (ram2' = ((next_el r) z')) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') = (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'))
T c==> c= f0 cnext_el f1 f2 c= c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f2 cCONS cFST f2 cNIL f5 c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f2 cCONS cFST f2 cNIL f5
+ ((((core L) r) , b) = (((core L) r) , b)) |- (((((core L) r) , b) = (((core L) r) , b)) /\ (((FST (((core L) r) , b)) = (FST (((core L) r) , b))) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))))))))))
T c==> c= c, ccore f0 f1 f2 c, ccore f0 f1 f2 c/\ c= c, ccore f0 f1 f2 c, ccore f0 f1 f2 c==> c= cFST c, ccore f0 f1 f2 cFST c, ccore f0 f1 f2 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST c, ccore f0 f1 f2 cFST f3 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST c, ccore f0 f1 f2 cFST f3 cFST f4 cCONS cFST f4 cNIL c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f1 f2 cFST f4 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f1 f2 cFST f4 cFST f3 cCONS cFST f3 cNIL c==> c= cnext_el f1 f3 f5 c==> c= cnext_el f1 f4 f6 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f7 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f7 cFST b0 f8 c==> c= cbetwn f9 f3 f6 f10 c==> c= cflatten cmap f8 f10 f11 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f4 cCONS f4 cNIL f12 c==> c= ccat cCONS f6 cNIL ccat cbetwn f1 f6 f3 cCONS f3 cNIL f13 c==> c= ccat crev f11 f12 f14 c==> c= ccat f13 f10 f15 c==> c= ccore f0 f14 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f15 ccat ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f3 cCONS cFST f3 cNIL f16 chold c= cFST c, ccore f0 f1 f2 ccore f0 f1
+ |- (?_10484458. (!f1. (!f2. ((_10484458 (f1 , f2)) = (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)))))))
T c? / ! ! c= * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b5 cF cFace ccat b6 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f4 f5 ccore f0 f4
+ |- (((!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ==> ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)) = ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1))
T c= c==> ! ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) /\ ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= f19 ccat cCONS cFST f5 cNIL ccat cbetwn f20 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f21 ccat cCONS cFST f7 cNIL ccat cbetwn f20 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f22 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f20 cFST f11 c==> cmarked_list f0 f10 f1 f8 c/\ c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= cLET / cLET_END c, ccat crev f17 f15 ccat b0 f18 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f23 f24 c==> c/\ c= ccore f0 f23 ccat crev f22 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f22 c= c, cFace ccat crev f22 f19 cF cFace ccat f21 f22 cF c, cFace ccore f0 f23 cF cFace ccore f0 f24 cF
- (((vs' = vs) ==> B) /\ (vs' = vs)), ((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B) |- ((((vs' = vs) ==> B) /\ (vs' = vs)) /\ B)
T c==> c/\ c==> c= f0 f1 f2 c= f0 f1 c==> c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2 c/\ c/\ c==> c= f0 f1 f2 c= f0 f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) /\ (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f3 f4 c==> c= cnext_el f1 f5 f6 c==> c= cprev_el f1 f7 f5 c==> c= cl'y f0 f1 f8 f3 c==> c= cl'z f0 f9 f1 f8 f7 c==> c= c, f10 f11 f12 c==> c= cfind_face f0 f3 f13 c==> c= cFST f12 f14 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f13 f3 f7 f15 c==> c= ccore f0 f1 f10 c==> cmarked_list f0 f9 f1 f8 c/\ c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f16 c==> c= cbetwn f13 f3 f6 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f4 cNIL ccat cbetwn f1 f4 f5 cCONS f5 cNIL f19 c==> c= ccat cCONS f6 cNIL ccat cbetwn f1 f6 f3 cCONS f3 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f15 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f15 chold c/\ c= ccat crev f15 ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat crev f15 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccat ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL f15 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f15
- (ram2' = ((next_el r) z')) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 cnext_el f1 f2 c= cis_restricted chypermap_of_list f3 cis_restricted chypermap_of_list f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((\f2. (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))) f2') ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f15 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c==> * / c= b0 ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL f16 c==> c/\ c= ccore f0 f7 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f15 c= cLET / cLET_END c, cFace ccat crev f15 f13 cF cFace ccat b0 f15 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
+ |- ((((FST (((core L) r) , b)) = ((core L) r)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))) = (hold ((FST (((core L) r) , b)) = ((core L) r))))
T c= c==> c= cFST c, ccore f0 f1 f2 ccore f0 f1 chold c= cFST c, ccore f0 f1 f2 ccore f0 f1 chold c= cFST c, ccore f0 f1 f2 ccore f0 f1
+ ((\sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))) sz) |- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))
T c==> * / c= b0 / csizel cfilter / c= b2 b1 cflatten f0 f1 c= f1 / csizel cfilter / c= b1 b0 cflatten f0
+ |- ((vs' = (FST fvs)) ==> (?vs'. (vs' = (FST fvs))))
T c==> c= f0 cFST f1 c? / c= b0 cFST f1
- (ram2' = ((next_el r) z')) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 cnext_el f1 f2 c= cgood_list_nodes f3 cgood_list_nodes f3
- |- ((((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B) ==> ((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B)) = ((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B))
T c= c==> c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2 c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2 c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= cfind_face f0 f4 f16 c==> c= cbetwn f16 f4 f7 f14 c==> c= cFST f13 f17 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f17 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f17 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f16 f4 f8 f18 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f19 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f20 c==> c= ccat crev f15 f19 f21 c==> c= ccat f20 f14 f22 c==> c= ccore f0 f21 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 chold c= f17 f11
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= c= cl'y f6 f2 f7 f3 c= cl'y f6 f2 f7 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((?ram2'. (ram2' = ((next_el r) z'))) ==> ((((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f3 cl'y f0 f1 f4 c==> c= f5 cl'z f0 f6 f1 f4 c==> c= f7 cprev_el f1 f5 c==> c= f8 c, f9 f10 c==> c= f11 cfind_face f0 f3 c==> c= f12 ccat cCONS cFST f3 cNIL ccat cbetwn f13 cFST f3 cFST f7 cCONS cFST f7 cNIL c==> c= f14 ccat cCONS cFST f7 cNIL ccat cbetwn f13 cFST f7 cFST f3 cCONS cFST f3 cNIL c==> c= f15 cmap part cFST cbetwn f11 f3 f5 c==> c= f9 ccore f0 f1 c==> c= f13 cFST f8 c==> cmarked_list f0 f6 f1 f4 c==> c? / c= b0 cnext_el f1 f7 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b4 b5 ccat b6 b3 ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f7 cCONS f7 cNIL cflatten cmap b2 b3 cbetwn f11 f3 b0 / cmap / cPOWER * part cn_list f0 b3 b2 cupt cNUMERAL cBIT1 c_0 * b1 cFST b2 / csizel cfilter / c= b2 b1 cflatten f0 cnext_el f1 f7 c, f16 f17 c==> c/\ c= ccore f0 f16 ccat crev f15 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f17 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f9 cFST f7 cFST f3 cCONS cFST f3 cNIL f15 c= c, cFace ccat crev f15 f12 cF cFace ccat f14 f15 cF c, cFace ccore f0 f16 cF cFace ccore f0 f17 cF
+ (good_list L), (good_list_nodes L), ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((is_restricted (hypermap_of_list L)) /\ (~ ((final_list L) r))))) |- ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((((split_face fvs) (FST y)) (FST z')) newVs) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) (((((split_normal_list L) r) f) y) z'))))) ((MAP FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c~ cfinal_list f0 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= csplit_face b9 cFST b0 cFST b2 b4 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f2 f4 ccore f0 f2 csplit_normal_list f0 f2 b3 b0 b2 cMAP part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f2 b1 cl'z f0 f1 f2 f3 cl'y f0 f2 f3
- (ram1' = ((next_el r) y)) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 cnext_el f1 f2 c= c= cprev_el f1 f3 f4 c= cprev_el f1 f3 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), ((((marked_list L) N) r) x) |- (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= ccat f16 f18 f19 c==> c= ccat crev f17 f15 f20 c==> c= f21 ccat cCONS cFST f5 cNIL ccat cbetwn f22 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f23 ccat cCONS cFST f7 cNIL ccat cbetwn f22 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f24 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f22 cFST f11 c==> c= ccore f0 f20 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24 c==> cmarked_list f0 f10 f1 f8 chold c/\ c= ccat crev f24 f21 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccat f23 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= ccore f0 f1 f4 c==> cmarked_list f0 f5 f1 f2 c==> c= cl'z f0 f5 f1 f2 f6 c==> c= cprev_el f1 f6 f7 c==> c= cfind_face f0 f3 f8 c==> c= cmap part cFST cbetwn f8 f3 f6 f9 c==> c= ccore f0 f1 f4 c==> c= c, f4 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f7 cCONS cFST f7 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f7 cCONS cFST f7 cNIL c==> c= ccat cCONS cFST f7 cNIL ccat cbetwn cFST f11 cFST f7 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f7 cNIL ccat cbetwn cFST f11 cFST f7 cFST f3 cCONS cFST f3 cNIL c==> c= cnext_el f1 f3 f12 c==> c= cnext_el f1 f7 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f8 f3 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f7 cCONS f7 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f9 ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f4 cFST f7 cFST f3 cCONS cFST f3 cNIL f9 chold c= cFST f11 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> c= f8 cmap part cFST cbetwn f7 f2 f4 c==> cmarked_list f0 f5 f1 f3 cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b2 ccat crev b0 ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b3 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b4 cFST f6 cFST f2 cCONS cFST f2 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f6 cNIL ccat cbetwn b6 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b5 c, cFace ccore f0 b2 cF cFace ccore f0 b3 cF c, ccore f0 f1 f9 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f6 cCONS f6 cNIL cflatten cmap b4 b5 cbetwn f7 f2 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cmap part cFST cbetwn f7 f2 f4
+ |- (((F ==> B) /\ F) ==> B)
T c==> c/\ c==> cF f0 cF f0
+ (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- (((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))) = ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c==> c= ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL f0 c==> c= cnext_el f4 f3 f5 c==> c= cnext_el f4 f1 f6 c==> c= / csizel cfilter / c= b1 b0 cflatten f7 f8 c==> c= / cmap / cPOWER * part cn_list f7 b1 b0 cupt cNUMERAL cBIT1 c_0 * f8 cFST b0 f9 c==> c= cbetwn f10 f3 f6 f11 c==> c= cflatten cmap f9 f11 f12 c==> c= ccat cCONS f5 cNIL ccat cbetwn f4 f5 f1 cCONS f1 cNIL f13 c==> c= ccat cCONS f6 cNIL ccat cbetwn f4 f6 f3 cCONS f3 cNIL f14 c==> c= ccat crev f12 f13 f15 c==> c= ccat f14 f11 f16 c==> c= ccore f7 f15 ccat crev f17 ccat cCONS cFST f3 cNIL ccat cbetwn f18 cFST f3 cFST f1 cCONS cFST f1 cNIL c==> c= ccore f7 f16 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f18 cFST f1 cFST f3 cCONS cFST f3 cNIL f17 chold c/\ c= ccat crev f17 f19 ccat crev f17 ccat cCONS cFST f3 cNIL ccat cbetwn f18 cFST f3 cFST f1 cCONS cFST f1 cNIL c= ccat f0 f17 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f18 cFST f1 cFST f3 cCONS cFST f3 cNIL f17 c==> c= cnext_el f4 f3 f5 c==> c= cnext_el f4 f1 f6 c==> c= / csizel cfilter / c= b1 b0 cflatten f7 f8 c==> c= / cmap / cPOWER * part cn_list f7 b1 b0 cupt cNUMERAL cBIT1 c_0 * f8 cFST b0 f9 c==> c= cbetwn f10 f3 f6 f11 c==> c= cflatten cmap f9 f11 f12 c==> c= ccat cCONS f5 cNIL ccat cbetwn f4 f5 f1 cCONS f1 cNIL f13 c==> c= ccat cCONS f6 cNIL ccat cbetwn f4 f6 f3 cCONS f3 cNIL f14 c==> c= ccat crev f12 f13 f15 c==> c= ccat f14 f11 f16 c==> c= ccore f7 f15 ccat crev f17 ccat cCONS cFST f3 cNIL ccat cbetwn f18 cFST f3 cFST f1 cCONS cFST f1 cNIL c==> c= ccore f7 f16 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f18 cFST f1 cFST f3 cCONS cFST f3 cNIL f17 chold c/\ c= ccat crev f17 f19 ccat crev f17 ccat cCONS cFST f3 cNIL ccat cbetwn f18 cFST f3 cFST f1 cCONS cFST f1 cNIL c= ccat f0 f17 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f18 cFST f1 cFST f3 cCONS cFST f3 cNIL f17
+ |- (((!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))) ==> ((\a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))) a)) = ((\a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))) a))
T c= c==> ! ! c= c= c, f0 f1 c, b0 b1 c/\ c= f0 b0 c= f1 b1 * / ! c= c= c, f0 f1 c, b0 b1 c/\ c= f0 b0 c= f1 b1 f2 * / ! c= c= c, f0 f1 c, b0 b1 c/\ c= f0 b0 c= f1 b1 f2
- (new1 = (flatten ((map nd) new2))) |- ((((core L) r) = vs) = (((core L) r) = vs))
T c==> c= f0 cflatten cmap f1 f2 c= c= ccore f3 f4 f5 c= ccore f3 f4 f5
+ (z = ((((l'z L) N) r) x)) |- ((z = ((((l'z L) N) r) x)) /\ (?z. (z = ((((l'z L) N) r) x))))
T c==> c= f0 cl'z f1 f2 f3 f4 c/\ c= f0 cl'z f1 f2 f3 f4 c? / c= b0 cl'z f1 f2 f3 f4
+ (good_list L), (good_list_nodes L), ((FST fvs) = vs'), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cFST f1 f2 c==> cmarked_list f0 f3 f4 f5 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f4 c==> c= cl'y f0 f4 f5 f6 c==> c= cl'z f0 f3 f4 f5 f7 c==> c= cprev_el f4 f7 f8 c==> c= cfind_face f0 f6 f9 c==> c= cmap part cFST cbetwn f9 f6 f7 f10 c==> c= ccore f0 f4 f11 c==> c= c, f11 f12 f1 c==> c= cFST f1 f2 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f2 cFST f6 cFST f8 cCONS cFST f8 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f2 cFST f6 cFST f8 cCONS cFST f8 cNIL c==> c= ccat cCONS cFST f8 cNIL ccat cbetwn f2 cFST f8 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f8 cNIL ccat cbetwn f2 cFST f8 cFST f6 cCONS cFST f6 cNIL c==> c= cnext_el f4 f6 f13 c==> c= cnext_el f4 f8 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f9 f6 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f4 f13 f8 cCONS f8 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f4 f14 f6 cCONS f6 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f10 ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f8 cCONS cFST f8 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f8 cNIL ccat cbetwn f11 cFST f8 cFST f6 cCONS cFST f6 cNIL f10 chold c= f2 f11
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((\f2. (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))) f2') ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = T)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f15 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c= c==> * / c= b0 ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL f16 c==> c/\ c= ccore f0 f7 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f15 c= cLET / cLET_END c, cFace ccat crev f15 f13 cF cFace ccat b0 f15 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF cT
- (vs' = (FST fvs)) |- ((((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)) = (((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)))
T c==> c= f0 cFST f1 c= c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c, f7 f8 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c, f7 f8
- (y = (((l'y L) r) x)) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 cl'y f1 f2 f3 c= cmarked_list f1 f4 f2 f3 cmarked_list f1 f4 f2 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))), ((((marked_list L) N) r) x) |- (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) /\ ((((Face ((cat (rev newVs)) f1')) F) = ((Face ((core L) f1)) F)) /\ (((Face ((cat f2') newVs)) F) = ((Face ((core L) f2)) F))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= ccat f16 f18 f19 c==> c= ccat crev f17 f15 f20 c==> c= f21 ccat cCONS cFST f5 cNIL ccat cbetwn f22 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f23 ccat cCONS cFST f7 cNIL ccat cbetwn f22 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f24 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f22 cFST f11 c==> c/\ c= ccore f0 f20 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f19 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24 c==> cmarked_list f0 f10 f1 f8 c/\ c/\ c= ccore f0 f20 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f19 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24 c/\ c= cFace ccat crev f24 f21 cF cFace ccore f0 f20 cF c= cFace ccat f23 f24 cF cFace ccore f0 f19 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), ((FST fvs) = vs'), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= cFST f8 f9 c==> c= cmap part cFST cbetwn f7 f5 f2 f10 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f6 f1 f4 c==> c= c, f11 f12 f8 c==> c= cFST f8 f9 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f13 c==> c= cnext_el f1 f3 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f7 f5 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f5 cCONS f5 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= f9 f11
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (!sz. (((\sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))) sz) ==> ((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f4 cnext_el f1 f5 c==> c= f3 cl'y f0 f1 f6 c==> c= f7 cl'z f0 f8 f1 f6 c==> c= f5 cprev_el f1 f7 c==> c= f9 c, f10 f11 c==> c= f12 cfind_face f0 f3 c==> c= f13 ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= f16 cmap part cFST cbetwn f12 f3 f7 c==> c= f10 ccore f0 f1 c==> c= f14 cFST f9 c==> cmarked_list f0 f8 f1 f6 ! c==> * / c= b1 / csizel cfilter / c= b2 b1 cflatten f0 b0 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f5 cCONS f5 cNIL cflatten cmap b1 b2 cbetwn f12 f3 f4 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * b1 cFST b1 / csizel cfilter / c= b2 b1 cflatten f0 c, f17 f18 c==> c/\ c= ccore f0 f17 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f18 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 c= c, cFace ccat crev f16 f13 cF cFace ccat f15 f16 cF c, cFace ccore f0 f17 cF cFace ccore f0 f18 cF
+ (good_list L) |- ((good_list L) /\ ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))))))))))
T c==> cgood_list f0 c/\ cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL f13 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f14 c==> c= cnext_el f2 f6 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f4 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f2 f14 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f2 f15 f4 cCONS f4 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c/\ c= ccat crev f8 f13 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- (((vs , b) = fvs) = ((vs , b) = fvs))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= c, f2 f3 f4 c= c, f2 f3 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((\f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))) f2'') ==> ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = T)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 cflatten cmap f2 f17 c==> c= f17 cbetwn f14 f5 f6 c==> c= f18 ccat cCONS cFST f5 cNIL ccat cbetwn f19 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f20 ccat cCONS cFST f7 cNIL ccat cbetwn f19 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f21 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f19 cFST f11 c==> cmarked_list f0 f10 f1 f8 c= c==> * / c= b0 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL f22 c==> c= cLET / cLET_END c, ccat crev f16 f15 ccat b0 f17 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f23 f24 c==> c/\ c= ccore f0 f23 ccat crev f21 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f21 c= c, cFace ccat crev f21 f18 cF cFace ccat f20 f21 cF c, cFace ccore f0 f23 cF cFace ccore f0 f24 cF cT
- (ram2' = ((next_el r) z')) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 cnext_el f1 f2 c= c= cfind_face f3 f4 f5 c= cfind_face f3 f4 f5
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= ccore f0 f1 f2 c==> cmarked_list f0 f3 f1 f4 c==> c~ cfinal_list f0 f1 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f3 f1 f4 f6 c==> c= cprev_el f1 f6 f7 c==> c= cfind_face f0 f5 f8 c==> c= cmap part cFST cbetwn f8 f5 f6 f9 c==> c= ccore f0 f1 f2 c==> c= c, f2 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f7 cCONS cFST f7 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccat cCONS cFST f7 cNIL ccat cbetwn cFST f11 cFST f7 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f7 cNIL ccat cbetwn cFST f11 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f7 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f8 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f7 cCONS f7 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f9 ccat cCONS cFST f5 cNIL ccat cbetwn f2 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f2 cFST f7 cFST f5 cCONS cFST f5 cNIL f9 chold c= cFST f11 f2
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= cmap part cFST cbetwn f2 f3 f4 f5 c= cmap part cFST cbetwn f2 f3 f4 f5
+ (new1 = (flatten ((map nd) new2))) |- ((new1 = (flatten ((map nd) new2))) /\ (?new1. (new1 = (flatten ((map nd) new2)))))
T c==> c= f0 cflatten cmap f1 f2 c/\ c= f0 cflatten cmap f1 f2 c? / c= b0 cflatten cmap f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) new2) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 cbetwn f14 f5 f6 c==> c= f16 ccat cCONS cFST f5 cNIL ccat cbetwn f17 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f18 ccat cCONS cFST f7 cNIL ccat cbetwn f17 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f19 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f17 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b1 b2 ccat b3 b0 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL cflatten cmap f2 b0 f15 c, f20 f21 c==> c/\ c= ccore f0 f20 ccat crev f19 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f21 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f19 c= c, cFace ccat crev f19 f16 cF cFace ccat f18 f19 cF c, cFace ccore f0 f20 cF cFace ccore f0 f21 cF
- (z' = ((prev_el r) z)) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 cprev_el f1 f2 c= cis_restricted chypermap_of_list f3 cis_restricted chypermap_of_list f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) /\ ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 ccore f0 f1 c==> c= c, ccore f0 f1 f9 f10 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f7 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c= cFST f10 ccore f0 f1
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= cmarked_list f1 f3 f4 f5 cmarked_list f1 f3 f4 f5
+ ((f1 = (FST ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))) /\ (f2 = (SND ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))) |- (((f1 = (FST ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))) /\ (f2 = (SND ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))) /\ (?f1. (?f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))))
T c==> c/\ c= f0 cFST cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 c= f6 cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 c/\ c/\ c= f0 cFST cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 c= f6 cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 c? / c? / c= c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b8 b6 ccat cCONS b3 cNIL ccat cbetwn f1 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f1 b2 f3 cCONS f3 cNIL cflatten cmap b5 b6 cbetwn f4 f2 b3 / cmap / cPOWER * part cn_list f5 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f5 cnext_el f1 f3 cnext_el f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((?new2. (new2 = (((betwn f) y) ram2'))) ==> ((((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f16 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f17 ccat cCONS cFST f7 cNIL ccat cbetwn f16 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f18 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f16 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c? / c= b0 cbetwn f14 f5 f6 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b1 b2 ccat b3 b0 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL cflatten cmap f2 b0 cbetwn f14 f5 f6 c, f19 f20 c==> c/\ c= ccore f0 f19 ccat crev f18 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f20 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f18 c= c, cFace ccat crev f18 f15 cF cFace ccat f17 f18 cF c, cFace ccore f0 f19 cF cFace ccore f0 f20 cF
- (new2 = (((betwn f) y) ram2')) |- ((((next_el r) y) = ram1') = (((next_el r) y) = ram1'))
T c==> c= f0 cbetwn f1 f2 f3 c= c= cnext_el f4 f2 f5 c= cnext_el f4 f2 f5
+ (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) /\ (?f2. (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c/\ c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c? / c= b0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL
+ (!a. (!b. ((((Face a) F) = ((Face b) F)) = (a = b)))) |- ((\a. (!b. ((((Face a) F) = ((Face b) F)) = (a = b)))) a)
T c==> ! ! c= c= cFace b0 cF cFace b1 cF c= b0 b1 * / ! c= c= cFace b0 cF cFace b1 cF c= b0 b1 f0
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= cfind_face f0 f4 f18 c==> c= cbetwn f18 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f18 f4 f8 f19 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat crev f15 f16 f20 c==> c= ccat f17 f14 f21 c==> c= ccore f0 f20 ccat crev f19 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f19 chold c= cFST f13 f11
+ ((FST fvs) = vs') |- (vs' = (FST fvs))
T c==> c= cFST f0 f1 c= f1 cFST f0
- (?f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))), (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((?f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))) /\ ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))
T c==> c? / c= c, f0 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f3 cCONS f3 cNIL cflatten cmap b4 b5 cbetwn f4 f2 b2 / cmap / cPOWER * part cn_list f5 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 c==> c~ cfinal_list f5 f1 c==> cis_restricted chypermap_of_list f5 c==> cgood_list f5 c==> cgood_list_nodes f5 c==> c= f2 cl'y f5 f1 f6 c==> c= f7 cl'z f5 f8 f1 f6 c==> c= f3 cprev_el f1 f7 c==> c= f4 cfind_face f5 f2 c==> c= f9 cmap part cFST cbetwn f4 f2 f7 c==> cmarked_list f5 f8 f1 f6 c/\ c? / c= c, f0 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f3 cCONS f3 cNIL cflatten cmap b4 b5 cbetwn f4 f2 b2 / cmap / cPOWER * part cn_list f5 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f5 b1 ccat crev f9 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f5 b2 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL f9 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f9 b5 cF cFace ccat b6 f9 cF ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b4 c, cFace ccore f5 b1 cF cFace ccore f5 b2 cF c, ccore f5 f1 f10 ccore f5 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f6 f1 f4 c==> c= c, ccore f0 f1 f9 f10 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f7 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c= cFST f10 ccore f0 f1
- (vs = ((core L) r)) |- ((good_list L) = (good_list L))
T c==> c= f0 ccore f1 f2 c= cgood_list f1 cgood_list f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), ((((marked_list L) N) r) x), ((\fvs. (fvs = (vs , b))) fvs) |- (((\fvs. (fvs = (vs , b))) fvs) /\ ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (vs , b)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> cmarked_list f0 f5 f1 f3 c==> * / c= b0 c, f11 f12 f13 c/\ * / c= b0 c, f11 f12 f13 cLET / cLET_END c==> c/\ c= ccore f0 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b2 cF cFace ccat b3 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b1 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b1 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b0 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c, f11 f12
+ |- ((T ==> (?vs. (vs = ((core L) r)))) = (?vs. (vs = ((core L) r))))
T c= c==> cT c? / c= b0 ccore f0 f1 c? / c= b0 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), ((((marked_list L) N) r) x) |- ((newVs = ((map FST) (((betwn f) y) z))) ==> ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> cmarked_list f0 f5 f1 f3 c==> c= f8 cmap part cFST cbetwn f7 f2 f4 cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b2 ccat crev b0 ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b3 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b4 cFST f6 cFST f2 cCONS cFST f2 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f6 cNIL ccat cbetwn b6 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b5 c, cFace ccore f0 b2 cF cFace ccore f0 b3 cF c, ccore f0 f1 f9 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f6 cCONS f6 cNIL cflatten cmap b4 b5 cbetwn f7 f2 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cmap part cFST cbetwn f7 f2 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- (!vs. (((\vs. (vs = ((core L) r))) vs) ==> ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> cmarked_list f0 f5 f1 f3 ! c==> * / c= b1 ccore f0 f1 b0 cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn b1 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b1 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b2 cF cFace ccat b3 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b2 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b2 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b1 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c, ccore f0 f1 f11 ccore f0 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) /\ (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f3 f4 c==> c= cnext_el f1 f5 f6 c==> c= cprev_el f1 f7 f5 c==> c= cl'y f0 f1 f8 f3 c==> c= cl'z f0 f9 f1 f8 f7 c==> c= c, f10 f11 f12 c==> c= cfind_face f0 f3 f13 c==> c= cFST f12 f14 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL f15 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f13 f3 f7 f16 c==> c= ccore f0 f1 f10 c==> cmarked_list f0 f9 f1 f8 c/\ c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f17 c==> c= cbetwn f13 f3 f6 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f4 cNIL ccat cbetwn f1 f4 f5 cCONS f5 cNIL f20 c==> c= ccat cCONS f6 cNIL ccat cbetwn f1 f6 f3 cCONS f3 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 chold c/\ c= ccat crev f16 f15 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccat ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- (((FST fvs) = vs') = ((FST fvs) = vs'))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= cFST f3 f4 c= cFST f3 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cl'z f0 f2 f1 f3 f5 c==> c= cprev_el f1 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f1 f4 f13 c==> c= cnext_el f1 f6 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f7 f4 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f6 cCONS f6 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f4 cCONS f4 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c/\ c= ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c~ cfinal_list f1 f3 c~ cfinal_list f1 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) r) = vs) /\ (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 f9 c==> cmarked_list f0 f6 f1 f4 c/\ c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f7 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c= cFST f11 f9
- (y = (((l'y L) r) x)) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 cl'y f1 f2 f3 c= cgood_list_nodes f1 cgood_list_nodes f1
+ |- ((F = t) = (~ t))
T c= c= cF f0 c~ f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (((cat (rev new1)) f1'') = f1), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= ccat crev f17 f15 f19 c==> c= f20 ccat cCONS cFST f5 cNIL ccat cbetwn f21 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f22 ccat cCONS cFST f7 cNIL ccat cbetwn f21 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f23 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f21 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c= ccat f16 f18 f24 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f23 chold c/\ c= ccat crev f23 f20 ccat crev f23 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccat f22 f23 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f23
+ (new1 = (flatten ((map nd) new2))) |- ((\new1. (new1 = (flatten ((map nd) new2)))) new1)
T c==> c= f0 cflatten cmap f1 f2 * / c= b0 cflatten cmap f1 f2 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b4 b10 cF cFace ccat b11 b4 cF ccat cCONS cFST b2 cNIL ccat cbetwn b10 cFST b2 cFST b0 cCONS cFST b0 cNIL ccat cCONS cFST b0 cNIL ccat cbetwn b10 cFST b0 cFST b2 cCONS cFST b2 cNIL cFST b9 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f1 f4 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b10 b11 ccat b12 b9 ccat cCONS b6 cNIL ccat cbetwn f1 b6 b0 cCONS b0 cNIL ccat cCONS b5 cNIL ccat cbetwn f1 b5 b2 cCONS b2 cNIL cflatten cmap b8 b9 cbetwn b3 b0 b6 / cmap / cPOWER * part cn_list f0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten f0 cnext_el f1 b2 cnext_el f1 b0 cmap part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f1 b1 cl'z f0 f2 f1 f3 cl'y f0 f1 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), ((((marked_list L) N) r) x) |- ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) z)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> cmarked_list f0 f5 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b5 ccat crev b3 ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST b1 cCONS cFST b1 cNIL c= ccore f0 b6 ccat ccat cCONS cFST b1 cNIL ccat cbetwn b7 cFST b1 cFST f2 cCONS cFST f2 cNIL b3 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b3 b9 cF cFace ccat b10 b3 cF ccat cCONS cFST b1 cNIL ccat cbetwn b9 cFST b1 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b9 cFST f2 cFST b1 cCONS cFST b1 cNIL cFST b8 c, cFace ccore f0 b5 cF cFace ccore f0 b6 cF c, ccore f0 f1 f6 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b9 b10 ccat b11 b8 ccat cCONS b5 cNIL ccat cbetwn f1 b5 f2 cCONS f2 cNIL ccat cCONS b4 cNIL ccat cbetwn f1 b4 b1 cCONS b1 cNIL cflatten cmap b7 b8 cbetwn b2 f2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el f1 b1 cnext_el f1 f2 cmap part cFST cbetwn b2 f2 b0 cfind_face f0 f2 cprev_el f1 b0 f4
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- (((((betwn f) y) ram2') = new2) = ((((betwn f) y) ram2') = new2))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cbetwn f4 f3 f1 f5 c= cbetwn f4 f3 f1 f5
+ |- ((a = b) = ((GEQ a) b))
T c= c= f0 f1 cGEQ f0 f1
- (f = ((find_face L) y)) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 cfind_face f1 f2 c= c= cprev_el f3 f4 f5 c= cprev_el f3 f4 f5
- (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cl'y f4 f5 f6 f1 c= cl'y f4 f5 f6 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((\f1. (f1 = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) f1') ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = T)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c= c==> * / c= b0 ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL f15 c==> c/\ c= ccore f0 f7 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 c= cLET / cLET_END cLET / cLET_END c, cFace ccat crev f13 b0 cF cFace ccat b1 f13 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF cT
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f3 f4 c==> c= cnext_el f1 f5 f6 c==> c= cprev_el f1 f7 f5 c==> c= cl'y f0 f1 f8 f3 c==> c= cl'z f0 f9 f1 f8 f7 c==> c= c, f10 f11 f12 c==> c= cfind_face f0 f3 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f12 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f12 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f12 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f12 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f13 f3 f7 f14 c==> c= ccore f0 f1 f10 c==> cmarked_list f0 f9 f1 f8 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f15 c==> c= cbetwn f13 f3 f6 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f4 cNIL ccat cbetwn f1 f4 f5 cCONS f5 cNIL f18 c==> c= ccat cCONS f6 cNIL ccat cbetwn f1 f6 f3 cCONS f3 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f14 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f14 chold c= cFST f12 f10
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cmap part cFST cbetwn f10 f5 f2 f11 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= cFST f9 f12 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f3 cCONS cFST f3 cNIL f13 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f10 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 chold c/\ c= ccat crev f11 f13 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 f9 c==> cmarked_list f0 f6 f1 f4 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f7 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c= cFST f11 f9
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((?sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))) ==> ((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f4 cnext_el f1 f5 c==> c= f3 cl'y f0 f1 f6 c==> c= f7 cl'z f0 f8 f1 f6 c==> c= f5 cprev_el f1 f7 c==> c= f9 c, f10 f11 c==> c= f12 cfind_face f0 f3 c==> c= f13 ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= f16 cmap part cFST cbetwn f12 f3 f7 c==> c= f10 ccore f0 f1 c==> c= f14 cFST f9 c==> cmarked_list f0 f8 f1 f6 c==> c? / c= b0 / csizel cfilter / c= b2 b1 cflatten f0 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f5 cCONS f5 cNIL cflatten cmap b1 b2 cbetwn f12 f3 f4 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * b0 cFST b1 / csizel cfilter / c= b1 b0 cflatten f0 c, f17 f18 c==> c/\ c= ccore f0 f17 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f18 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 c= c, cFace ccat crev f16 f13 cF cFace ccat f15 f16 cF c, cFace ccore f0 f17 cF cFace ccore f0 f18 cF
- (y = (((l'y L) r) x)) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 cl'y f1 f2 f3 c= cis_restricted chypermap_of_list f1 cis_restricted chypermap_of_list f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c==> c/\ c= ccore f0 f7 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f13 b1 cF cFace ccat b2 f13 cF ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b0 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST f10 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((y = (((l'y L) r) x)) ==> ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> c= f4 cl'y f0 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b4 b10 cF cFace ccat b11 b4 cF ccat cCONS cFST b2 cNIL ccat cbetwn b10 cFST b2 cFST b0 cCONS cFST b0 cNIL ccat cCONS cFST b0 cNIL ccat cbetwn b10 cFST b0 cFST b2 cCONS cFST b2 cNIL cFST b9 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f1 f5 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b10 b11 ccat b12 b9 ccat cCONS b6 cNIL ccat cbetwn f1 b6 b0 cCONS b0 cNIL ccat cCONS b5 cNIL ccat cbetwn f1 b5 b2 cCONS b2 cNIL cflatten cmap b8 b9 cbetwn b3 b0 b6 / cmap / cPOWER * part cn_list f0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten f0 cnext_el f1 b2 cnext_el f1 b0 cmap part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f1 b1 cl'z f0 f2 f1 f3 cl'y f0 f1 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 f11 c==> c= cmap part cFST cbetwn f10 f5 f2 f12 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f13 c==> c= cnext_el f1 f3 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f10 f5 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f5 cCONS f5 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f12 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f12 chold c= f11 f7
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL f6 c==> cmarked_list f0 f7 f1 f2 c==> c= cl'z f0 f7 f1 f2 f8 c==> c= cprev_el f1 f8 f5 c==> c= cfind_face f0 f3 f9 c==> c= cmap part cFST cbetwn f9 f3 f8 f10 c==> c= ccore f0 f1 f11 c==> c= c, f11 f12 f13 c==> c= cFST f13 f4 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL f6 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cnext_el f1 f3 f14 c==> c= cnext_el f1 f5 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f9 f3 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f5 cCONS f5 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f3 cCONS f3 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f10 ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL f10 chold c/\ c= ccat crev f10 f6 ccat crev f10 ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccat ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL f10 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL f10
- (vs = ((core L) r)) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 ccore f1 f2 c= c= cfind_face f1 f3 f4 c= cfind_face f1 f3 f4
+ |- ((good_list L) ==> ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL f13 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f14 c==> c= cnext_el f2 f6 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f4 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f2 f14 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f2 f15 f4 cCONS f4 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c/\ c= ccat crev f8 f13 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f4 cnext_el f1 f5 c==> c= f3 cl'y f0 f1 f6 c==> c= f7 cl'z f0 f8 f1 f6 c==> c= f5 cprev_el f1 f7 c==> c= f9 c, f10 f11 c==> c= f12 cfind_face f0 f3 c==> c= f13 ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= f16 cmap part cFST cbetwn f12 f3 f7 c==> c= f10 ccore f0 f1 c==> c= f14 cFST f9 c==> cmarked_list f0 f8 f1 f6 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b4 b5 ccat b6 b3 ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f5 cCONS f5 cNIL cflatten cmap b2 b3 cbetwn f12 f3 b0 / cmap / cPOWER * part cn_list f0 b3 b2 cupt cNUMERAL cBIT1 c_0 * b1 cFST b2 / csizel cfilter / c= b2 b1 cflatten f0 cnext_el f1 f5 c, f17 f18 c==> c/\ c= ccore f0 f17 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f18 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 c= c, cFace ccat crev f16 f13 cF cFace ccat f15 f16 cF c, cFace ccore f0 f17 cF cFace ccore f0 f18 cF
+ |- ((((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))) = (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) vs') = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c= c==> c/\ c= ccore f0 f1 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f6 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL f2 c= cLET / cLET_END cLET / cLET_END c, cFace ccat crev f2 b0 cF cFace ccat b1 f2 cF ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL c, cFace ccore f0 f1 cF cFace ccore f0 f6 cF c==> c/\ c= ccore f0 f1 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f6 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL f2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f2 b1 cF cFace ccat b2 f2 cF ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn b0 cFST f3 cFST f5 cCONS cFST f5 cNIL f7 c, cFace ccore f0 f1 cF cFace ccore f0 f6 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 cflatten cmap f2 f16 c==> c= f16 cbetwn f14 f5 f6 c==> c= f17 ccat cCONS cFST f5 cNIL ccat cbetwn f18 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f19 ccat cCONS cFST f7 cNIL ccat cbetwn f18 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f20 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f18 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c= ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL f21 c==> c= ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL f22 c==> c= ccat crev f15 f21 f23 c==> c= ccat f22 f16 f24 c==> c= ccore f0 f23 ccat crev f20 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f20 chold c/\ c= ccat crev f20 f17 ccat crev f20 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccat f19 f20 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f20
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), ((((marked_list L) N) r) x) |- (!fvs. (((\fvs. (fvs = (vs , b))) fvs) ==> ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (vs , b))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> cmarked_list f0 f5 f1 f3 ! c==> * / c= b1 c, f11 f12 b0 cLET / cLET_END c==> c/\ c= ccore f0 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b2 cF cFace ccat b3 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b1 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b1 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b1 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c, f11 f12
+ |- (((!newVs. (!ram1. (!ram2. (!f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f))))))) ==> ((\newVs. (!ram1. (!ram2. (!f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f))))))) newVs)) = ((\newVs. (!ram1. (!ram2. (!f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f))))))) newVs))
T c= c==> ! ! ! ! c= csplit_face b3 b1 b2 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE b0 b5 cF cFace cAPPEND b6 b0 cF cAPPEND cCONS b2 cNIL cAPPEND cbetwn b4 b2 b1 cCONS b1 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn b4 b1 b2 cCONS b2 cNIL cFST b3 * / ! ! ! c= csplit_face b3 b1 b2 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE b0 b5 cF cFace cAPPEND b6 b0 cF cAPPEND cCONS b2 cNIL cAPPEND cbetwn b4 b2 b1 cCONS b1 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn b4 b1 b2 cCONS b2 cNIL cFST b3 f0 * / ! ! ! c= csplit_face b3 b1 b2 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE b0 b5 cF cFace cAPPEND b6 b0 cF cAPPEND cCONS b2 cNIL cAPPEND cbetwn b4 b2 b1 cCONS b1 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn b4 b1 b2 cCONS b2 cNIL cFST b3 f0
- (new2 = (((betwn f) y) ram2')) |- (((FST fvs) = vs') = ((FST fvs) = vs'))
T c==> c= f0 cbetwn f1 f2 f3 c= c= cFST f4 f5 c= cFST f4 f5
+ (good_list L), (good_list_nodes L) |- ((good_list_nodes L) /\ (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f11 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f11 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f11 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f12 c==> c= cnext_el f2 f6 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f7 f4 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f2 f12 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f2 f13 f4 cCONS f4 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c= cFST f11 f9
+ |- (hold ((FST (((core L) r) , b)) = ((core L) r)))
T chold c= cFST c, ccore f0 f1 f2 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= cfind_face f0 f5 f8 c==> c= cmap part cFST cbetwn f8 f5 f2 f9 c==> c= ccore f0 f1 f7 c==> c= c, f7 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f8 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f9 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f9 chold c= cFST f11 f7
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x), ((\sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))) sz) |- (((\sz. (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))) sz) /\ ((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f4 cnext_el f1 f5 c==> c= f3 cl'y f0 f1 f6 c==> c= f7 cl'z f0 f8 f1 f6 c==> c= f5 cprev_el f1 f7 c==> c= f9 c, f10 f11 c==> c= f12 cfind_face f0 f3 c==> c= f13 ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= f16 cmap part cFST cbetwn f12 f3 f7 c==> c= f10 ccore f0 f1 c==> c= f14 cFST f9 c==> cmarked_list f0 f8 f1 f6 c==> * / c= b0 / csizel cfilter / c= b2 b1 cflatten f0 f17 c/\ * / c= b0 / csizel cfilter / c= b2 b1 cflatten f0 f17 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f5 cCONS f5 cNIL cflatten cmap b1 b2 cbetwn f12 f3 f4 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * b0 cFST b1 / csizel cfilter / c= b1 b0 cflatten f0 c, f18 f19 c==> c/\ c= ccore f0 f18 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f19 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 c= c, cFace ccat crev f16 f13 cF cFace ccat f15 f16 cF c, cFace ccore f0 f18 cF cFace ccore f0 f19 cF
+ (f = ((find_face L) y)) |- (((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y)) = ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) f))
T c==> c= f0 cfind_face f1 f2 c= cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f1 b3 ccat crev b1 ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f1 b4 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b7 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b6 c, cFace ccore f1 b3 cF cFace ccore f1 b4 cF c, ccore f1 f4 f5 ccore f1 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f4 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f4 b2 f3 cCONS f3 cNIL cflatten cmap b5 b6 cbetwn b0 f2 b3 / cmap / cPOWER * part cn_list f1 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f1 cnext_el f4 f3 cnext_el f4 f2 cmap part cFST cbetwn b0 f2 f6 cfind_face f1 f2 cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f1 b3 ccat crev b1 ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f1 b4 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b7 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b6 c, cFace ccore f1 b3 cF cFace ccore f1 b4 cF c, ccore f1 f4 f5 ccore f1 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f4 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f4 b2 f3 cCONS f3 cNIL cflatten cmap b5 b6 cbetwn b0 f2 b3 / cmap / cPOWER * part cn_list f1 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f1 cnext_el f4 f3 cnext_el f4 f2 cmap part cFST cbetwn b0 f2 f6 f0
- (fvs = (vs , b)) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 c, f1 f2 c= cgood_list_nodes f3 cgood_list_nodes f3
+ |- ((y = (((l'y L) r) x)) = ((\y. (y = (((l'y L) r) x))) y))
T c= c= f0 cl'y f1 f2 f3 * / c= b0 cl'y f1 f2 f3 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) newVs)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> c= f8 cmap part cFST cbetwn f7 f2 f4 c==> cmarked_list f0 f5 f1 f3 cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b2 ccat crev b0 ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b3 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b4 cFST f6 cFST f2 cCONS cFST f2 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f6 cNIL ccat cbetwn b6 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b5 c, cFace ccore f0 b2 cF cFace ccore f0 b3 cF c, ccore f0 f1 f9 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f6 cCONS f6 cNIL cflatten cmap b4 b5 cbetwn f7 f2 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 f8
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((vs , b) = fvs) /\ (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cmap part cFST cbetwn f10 f5 f2 f11 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= c, f7 f8 f9 c==> c= cFST f9 cFST f9 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f10 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 chold c= cFST f9 f7
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) y) = ram1') /\ ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f7 f1 f6 f4 c==> c= c, f8 f9 f10 c==> c= cfind_face f0 f2 f11 c==> c= cFST f10 f12 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f11 f2 f4 f13 c==> c= ccore f0 f1 f8 c==> cmarked_list f0 f7 f1 f6 c/\ c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f5 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f11 f2 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f5 cCONS f5 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f2 cCONS f2 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f2 cCONS cFST f2 cNIL f13 chold c/\ c= ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f5 cCONS cFST f5 cNIL ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f5 cCONS cFST f5 cNIL c= ccat ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f2 cCONS cFST f2 cNIL f13 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f2 cCONS cFST f2 cNIL f13
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 cflatten cmap f2 f17 c==> c= f17 cbetwn f14 f5 f6 c==> c= f18 ccat cCONS cFST f5 cNIL ccat cbetwn f19 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f20 ccat cCONS cFST f7 cNIL ccat cbetwn f19 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f21 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f19 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c= cLET / cLET_END c, ccat crev f16 f15 ccat b0 f17 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f22 f23 c==> c/\ c= ccore f0 f22 ccat crev f21 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f23 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f21 c= c, cFace ccat crev f21 f18 cF cFace ccat f20 f21 cF c, cFace ccore f0 f22 cF cFace ccore f0 f23 cF
+ |- ((\ram2. (!f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f))))) ram2)
T * / ! c= csplit_face b1 f0 b0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE f1 b3 cF cFace cAPPEND b4 f1 cF cAPPEND cCONS b0 cNIL cAPPEND cbetwn b2 b0 f0 cCONS f0 cNIL cAPPEND cCONS f0 cNIL cAPPEND cbetwn b2 f0 b0 cCONS b0 cNIL cFST b1 f2
- (new1 = (flatten ((map nd) new2))) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 cflatten cmap f1 f2 c= c= cprev_el f3 f4 f5 c= cprev_el f3 f4 f5
+ (A = T) |- ((A = T) /\ (((A ==> B) /\ A) ==> B))
T c==> c= f0 cT c/\ c= f0 cT c==> c/\ c==> f0 f1 f0 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f13 c==> c= cnext_el f2 f6 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f7 f4 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f2 f13 f6 cCONS f6 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f2 f14 f4 cCONS f4 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c/\ c= ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8
+ |- (((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z)) = ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) z))
T c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b4 ccat crev b2 ccat cCONS cFST f1 cNIL ccat cbetwn b6 cFST f1 cFST b0 cCONS cFST b0 cNIL c= ccore f0 b5 ccat ccat cCONS cFST b0 cNIL ccat cbetwn b6 cFST b0 cFST f1 cCONS cFST f1 cNIL b2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b2 b8 cF cFace ccat b9 b2 cF ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b8 cFST f1 cFST b0 cCONS cFST b0 cNIL cFST b7 c, cFace ccore f0 b4 cF cFace ccore f0 b5 cF c, ccore f0 f2 f3 ccore f0 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b8 b9 ccat b10 b7 ccat cCONS b4 cNIL ccat cbetwn f2 b4 f1 cCONS f1 cNIL ccat cCONS b3 cNIL ccat cbetwn f2 b3 b0 cCONS b0 cNIL cflatten cmap b6 b7 cbetwn b1 f1 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f2 b0 cnext_el f2 f1 cmap part cFST cbetwn b1 f1 f4 cfind_face f0 f1 cprev_el f2 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b5 ccat crev b3 ccat cCONS cFST f1 cNIL ccat cbetwn b7 cFST f1 cFST b1 cCONS cFST b1 cNIL c= ccore f0 b6 ccat ccat cCONS cFST b1 cNIL ccat cbetwn b7 cFST b1 cFST f1 cCONS cFST f1 cNIL b3 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b3 b9 cF cFace ccat b10 b3 cF ccat cCONS cFST b1 cNIL ccat cbetwn b9 cFST b1 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b9 cFST f1 cFST b1 cCONS cFST b1 cNIL cFST b8 c, cFace ccore f0 b5 cF cFace ccore f0 b6 cF c, ccore f0 f2 f3 ccore f0 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b9 b10 ccat b11 b8 ccat cCONS b5 cNIL ccat cbetwn f2 b5 f1 cCONS f1 cNIL ccat cCONS b4 cNIL ccat cbetwn f2 b4 b1 cCONS b1 cNIL cflatten cmap b7 b8 cbetwn b2 f1 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el f2 b1 cnext_el f2 f1 cmap part cFST cbetwn b2 f1 b0 cfind_face f0 f1 cprev_el f2 b0 f4
+ |- ((vs' = vs) ==> ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))
T c==> c= f0 f1 c/\ c= ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f0 cFST f3 cFST f4 cCONS cFST f4 cNIL ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f1 cFST f3 cFST f4 cCONS cFST f4 cNIL c= ccat ccat cCONS cFST f4 cNIL ccat cbetwn f0 cFST f4 cFST f3 cCONS cFST f3 cNIL f2 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f1 cFST f4 cFST f3 cCONS cFST f3 cNIL f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((\new1. (new1 = (flatten ((map nd) new2)))) new1) ==> ((((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 cbetwn f14 f5 f6 c==> c= f16 ccat cCONS cFST f5 cNIL ccat cbetwn f17 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f18 ccat cCONS cFST f7 cNIL ccat cbetwn f17 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f19 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f17 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> * / c= b0 cflatten cmap f2 f15 f20 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b0 b1 ccat b2 f15 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL cflatten cmap f2 f15 c, f21 f22 c==> c/\ c= ccore f0 f21 ccat crev f19 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f22 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f19 c= c, cFace ccat crev f19 f16 cF cFace ccat f18 f19 cF c, cFace ccore f0 f21 cF cFace ccore f0 f22 cF
+ (vs = ((core L) r)) |- (((core L) r) = vs)
T c==> c= f0 ccore f1 f2 c= ccore f1 f2 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 ccat cCONS cFST f6 cNIL ccat cbetwn f8 cFST f6 cFST f2 cCONS cFST f2 cNIL c==> cmarked_list f0 f5 f1 f3 c==> c= cfind_face f0 f2 f9 c==> c= cmap part cFST cbetwn f9 f2 f4 f10 c==> c= ccore f0 f1 f11 c==> c= c, f11 f12 f13 c==> c= cFST f13 f8 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f6 cCONS cFST f6 cNIL f14 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f8 cFST f6 cFST f2 cCONS cFST f2 cNIL f7 c==> c= cnext_el f1 f2 f15 c==> c= cnext_el f1 f6 f16 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f17 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f17 cFST b0 f18 c==> c= cbetwn f9 f2 f16 f19 c==> c= cflatten cmap f18 f19 f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f6 cCONS f6 cNIL f21 c==> c= ccat cCONS f16 cNIL ccat cbetwn f1 f16 f2 cCONS f2 cNIL f22 c==> c= ccat crev f20 f21 f23 c==> c= ccat f22 f19 f24 c==> c= ccore f0 f23 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f24 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 chold c/\ c= ccat crev f10 f14 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccat f7 f10 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f10
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), ((((marked_list L) N) r) x) |- (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 c, f8 f9 c==> c= f10 cfind_face f0 f2 c==> c= f11 ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f2 cCONS cFST f2 cNIL c==> c= f13 cmap part cFST cbetwn f10 f2 f4 c==> c= f8 ccore f0 f1 c==> cmarked_list f0 f5 f1 f3 c==> c= cFST f7 f12 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f6 cCONS cFST f6 cNIL f14 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f2 cCONS cFST f2 cNIL f11 c==> c= cnext_el f1 f2 f15 c==> c= cnext_el f1 f6 f16 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f17 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f17 cFST b0 f18 c==> c= cbetwn f10 f2 f16 f19 c==> c= cflatten cmap f18 f19 f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f6 cCONS f6 cNIL f21 c==> c= ccat cCONS f16 cNIL ccat cbetwn f1 f16 f2 cCONS f2 cNIL f22 c==> c= ccat crev f20 f21 f23 c==> c= ccat f22 f19 f24 c==> c= ccore f0 f23 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f24 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f8 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 chold c/\ c= ccat crev f13 f14 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccat f11 f13 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f8 cFST f6 cFST f2 cCONS cFST f2 cNIL f13
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f22 c==> c= ccore f0 f19 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 chold c/\ c= ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x), ((\nd. (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))) nd) |- (((\nd. (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))) nd) /\ ((((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f3 cnext_el f1 f4 c==> c= f5 cnext_el f1 f6 c==> c= f4 cl'y f0 f1 f7 c==> c= f8 cl'z f0 f9 f1 f7 c==> c= f6 cprev_el f1 f8 c==> c= f10 c, f11 f12 c==> c= f13 cfind_face f0 f4 c==> c= f14 ccat cCONS cFST f4 cNIL ccat cbetwn f15 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= f16 ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= f17 cmap part cFST cbetwn f13 f4 f8 c==> c= f11 ccore f0 f1 c==> c= f15 cFST f10 c==> cmarked_list f0 f9 f1 f7 c==> * / c= b0 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * f2 cFST b1 f18 c/\ * / c= b0 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * f2 cFST b1 f18 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b2 b3 ccat b4 b1 ccat cCONS f5 cNIL ccat cbetwn f1 f5 f4 cCONS f4 cNIL ccat cCONS f3 cNIL ccat cbetwn f1 f3 f6 cCONS f6 cNIL cflatten cmap b0 b1 cbetwn f13 f4 f5 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c, f19 f20 c==> c/\ c= ccore f0 f19 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 c= c, cFace ccat crev f17 f14 cF cFace ccat f16 f17 cF c, cFace ccore f0 f19 cF cFace ccore f0 f20 cF
+ |- (((!x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))))) ==> ((\x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))))) x)) = ((\x. (!y. (!a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))))) x))
T c= c==> ! ! ! ! c= c= c, b0 b1 c, b2 b3 c/\ c= b0 b2 c= b1 b3 * / ! ! ! c= c= c, b0 b1 c, b2 b3 c/\ c= b0 b2 c= b1 b3 f0 * / ! ! ! c= c= c, b0 b1 c, b2 b3 c/\ c= b0 b2 c= b1 b3 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), ((((marked_list L) N) r) x) |- ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> cmarked_list f0 f4 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b4 b10 cF cFace ccat b11 b4 cF ccat cCONS cFST b2 cNIL ccat cbetwn b10 cFST b2 cFST b0 cCONS cFST b0 cNIL ccat cCONS cFST b0 cNIL ccat cbetwn b10 cFST b0 cFST b2 cCONS cFST b2 cNIL cFST b9 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f1 f5 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b10 b11 ccat b12 b9 ccat cCONS b6 cNIL ccat cbetwn f1 b6 b0 cCONS b0 cNIL ccat cCONS b5 cNIL ccat cbetwn f1 b5 b2 cCONS b2 cNIL cflatten cmap b8 b9 cbetwn b3 b0 b6 / cmap / cPOWER * part cn_list f0 b9 b8 cupt cNUMERAL cBIT1 c_0 * b7 cFST b8 / csizel cfilter / c= b8 b7 cflatten f0 cnext_el f1 b2 cnext_el f1 b0 cmap part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f1 b1 cl'z f0 f4 f1 f3 cl'y f0 f1 f3
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c~ cfinal_list f4 f5 c~ cfinal_list f4 f5
+ |- (T ==> (?f2. (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))))
T c==> cT c? / c= b0 ccat cCONS cFST f0 cNIL ccat cbetwn f1 cFST f0 cFST f2 cCONS cFST f2 cNIL
+ |- ((f = ((find_face L) y)) ==> (?f. (f = ((find_face L) y))))
T c==> c= f0 cfind_face f1 f2 c? / c= b0 cfind_face f1 f2
+ (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- (((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) sz) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = ((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f2 cNIL ccat cbetwn f3 f2 f4 cCONS f4 cNIL ccat cCONS f5 cNIL ccat cbetwn f3 f5 f6 cCONS f6 cNIL cflatten cmap b1 b2 cbetwn f7 f4 f2 / cmap / cPOWER * part cn_list f1 b2 b1 cupt cNUMERAL cBIT1 c_0 * b0 cFST b1 f0 c, f8 f9 c==> c/\ c= ccore f1 f8 ccat crev f10 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccore f1 f9 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f10 c= c, cFace ccat crev f10 f12 cF cFace ccat f13 f10 cF c, cFace ccore f1 f8 cF cFace ccore f1 f9 cF c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f2 cNIL ccat cbetwn f3 f2 f4 cCONS f4 cNIL ccat cCONS f5 cNIL ccat cbetwn f3 f5 f6 cCONS f6 cNIL cflatten cmap b1 b2 cbetwn f7 f4 f2 / cmap / cPOWER * part cn_list f1 b2 b1 cupt cNUMERAL cBIT1 c_0 * b0 cFST b1 / csizel cfilter / c= b1 b0 cflatten f1 c, f8 f9 c==> c/\ c= ccore f1 f8 ccat crev f10 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccore f1 f9 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f10 c= c, cFace ccat crev f10 f12 cF cFace ccat f13 f10 cF c, cFace ccore f1 f8 cF cFace ccore f1 f9 cF
+ |- (((!a. (!b. (((Face a) b) = (a , b)))) ==> ((\a. (!b. (((Face a) b) = (a , b)))) a)) = ((\a. (!b. (((Face a) b) = (a , b)))) a))
T c= c==> ! ! c= cFace b0 b1 c, b0 b1 * / ! c= cFace b0 b1 c, b0 b1 f0 * / ! c= cFace b0 b1 c, b0 b1 f0
- (newVs = ((map FST) (((betwn f) y) z))) |- ((good_list L) = (good_list L))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= cgood_list f4 cgood_list f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> cmarked_list f0 f4 f1 f2 c==> c= cl'z f0 f4 f1 f2 f5 c==> c= cprev_el f1 f5 f6 c==> c= cfind_face f0 f3 f7 c==> c= cmap part cFST cbetwn f7 f3 f5 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f3 cCONS cFST f3 cNIL c==> c= cnext_el f1 f3 f13 c==> c= cnext_el f1 f6 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f7 f3 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f6 cCONS f6 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f3 cCONS cFST f3 cNIL f8 chold c/\ c= ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f6 cCONS cFST f6 cNIL ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f3 cCONS cFST f3 cNIL f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f3 cCONS cFST f3 cNIL f8
+ (!a. (!b. ((((Face a) F) = ((Face b) F)) = (a = b)))) |- (!b. ((((Face a) F) = ((Face b) F)) = (a = b)))
T c==> ! ! c= c= cFace b0 cF cFace b1 cF c= b0 b1 ! c= c= cFace f0 cF cFace b0 cF c= f0 b0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((?f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))) ==> ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> c= f8 cmap part cFST cbetwn f7 f2 f4 c==> cmarked_list f0 f5 f1 f3 c==> c? / c= c, f9 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f6 cCONS f6 cNIL cflatten cmap b4 b5 cbetwn f7 f2 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f8 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b3 cFST f6 cFST f2 cCONS cFST f2 cNIL f8 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f8 b5 cF cFace ccat b6 f8 cF ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f1 f10 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f7 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) /\ (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f22 c==> c= ccore f0 f19 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 chold c/\ c= ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((map FST) (((betwn f) y) z)) = newVs), ((((marked_list L) N) r) x) |- ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f3 cCONS cFST f3 cNIL f9 c==> c= cmap part cFST cbetwn f7 f5 f2 f10 c==> cmarked_list f0 f6 f1 f4 c==> c= ccore f0 f1 f11 c==> c= c, f11 f12 f13 c==> c= cFST f13 f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f3 cCONS cFST f3 cNIL f9 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c/\ c= ccat crev f10 f9 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f10
+ |- ((T ==> (?vs'. (vs' = (FST fvs)))) = (?vs'. (vs' = (FST fvs))))
T c= c==> cT c? / c= b0 cFST f0 c? / c= b0 cFST f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f4 cnext_el f1 f5 c==> c= f3 cl'y f0 f1 f6 c==> c= f7 cl'z f0 f8 f1 f6 c==> c= f5 cprev_el f1 f7 c==> c= f9 c, f10 f11 c==> c= f12 cfind_face f0 f3 c==> c= f13 ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= f16 cmap part cFST cbetwn f12 f3 f7 c==> c= f10 ccore f0 f1 c==> c= f14 cFST f9 c==> cmarked_list f0 f8 f1 f6 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f17 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f17 cFST b0 f18 c==> c= cbetwn f12 f3 f4 f19 c==> c= cflatten cmap f18 f19 f20 c==> c= ccat cCONS f2 cNIL ccat cbetwn f1 f2 f5 cCONS f5 cNIL f21 c==> c= ccat cCONS f4 cNIL ccat cbetwn f1 f4 f3 cCONS f3 cNIL f22 c==> c= ccat crev f20 f21 f23 c==> c= ccat f22 f19 f24 c==> c= ccore f0 f23 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f24 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 chold c/\ c= ccat crev f16 f13 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccat f15 f16 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16
+ |- ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)
T * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((good_list L) ==> ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))))))))))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c==> cgood_list f4 c==> cgood_list_nodes f4 c==> cmarked_list f4 f5 f6 f7 c==> cis_restricted chypermap_of_list f4 c==> c~ cfinal_list f4 f6 c==> c= cl'y f4 f6 f7 f3 c==> c= cl'z f4 f5 f6 f7 f8 c==> c= cprev_el f6 f8 f1 c==> c= cfind_face f4 f3 f9 c==> c= cmap part cFST cbetwn f9 f3 f8 f10 c==> c= ccore f4 f6 f11 c==> c= c, f11 f12 f13 c==> c= cFST f13 f2 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f2 cFST f3 cFST f1 cCONS cFST f1 cNIL f14 c==> c= ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL f0 c==> c= cnext_el f6 f3 f15 c==> c= cnext_el f6 f1 f16 c==> c= / csizel cfilter / c= b1 b0 cflatten f4 f17 c==> c= / cmap / cPOWER * part cn_list f4 b1 b0 cupt cNUMERAL cBIT1 c_0 * f17 cFST b0 f18 c==> c= cbetwn f9 f3 f16 f19 c==> c= cflatten cmap f18 f19 f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f6 f15 f1 cCONS f1 cNIL f21 c==> c= ccat cCONS f16 cNIL ccat cbetwn f6 f16 f3 cCONS f3 cNIL f22 c==> c= ccat crev f20 f21 f23 c==> c= ccat f22 f19 f24 c==> c= ccore f4 f23 ccat crev f10 ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f1 cCONS cFST f1 cNIL c==> c= ccore f4 f24 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f11 cFST f1 cFST f3 cCONS cFST f3 cNIL f10 chold c/\ c= ccat crev f10 f14 ccat crev f10 ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f1 cCONS cFST f1 cNIL c= ccat f0 f10 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f11 cFST f1 cFST f3 cCONS cFST f3 cNIL f10
+ (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) |- (((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) = ((((cat (rev newVs)) f1') = ((core L) f1)) /\ (((cat f2') newVs) = ((core L) f2))))
T c==> c= ccore f0 f1 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f6 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL f2 c= c/\ c= ccat crev f2 f7 ccat crev f2 ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccat f8 f2 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f4 cFST f5 cFST f3 cCONS cFST f3 cNIL f2 c/\ c= ccat crev f2 f7 ccore f0 f1 c= ccat f8 f2 ccore f0 f6
+ |- (((!f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f)))) ==> ((\f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f)))) f)) = ((\f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f)))) f))
T c= c==> ! c= csplit_face b0 f0 f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE f2 b2 cF cFace cAPPEND b3 f2 cF cAPPEND cCONS f1 cNIL cAPPEND cbetwn b1 f1 f0 cCONS f0 cNIL cAPPEND cCONS f0 cNIL cAPPEND cbetwn b1 f0 f1 cCONS f1 cNIL cFST b0 * / c= csplit_face b0 f0 f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE f2 b2 cF cFace cAPPEND b3 f2 cF cAPPEND cCONS f1 cNIL cAPPEND cbetwn b1 f1 f0 cCONS f0 cNIL cAPPEND cCONS f0 cNIL cAPPEND cbetwn b1 f0 f1 cCONS f1 cNIL cFST b0 f3 * / c= csplit_face b0 f0 f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE f2 b2 cF cFace cAPPEND b3 f2 cF cAPPEND cCONS f1 cNIL cAPPEND cbetwn b1 f1 f0 cCONS f0 cNIL cAPPEND cCONS f0 cNIL cAPPEND cbetwn b1 f0 f1 cCONS f1 cNIL cFST b0 f3
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((FST fvs) = ((core L) r))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat f15 f13 f16 c==> c= ccat crev f14 f17 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f15 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c= cFST f12 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) (f1 , f2))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> cmarked_list f0 f5 f1 f3 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b3 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b5 cF cFace ccat b6 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f1 f11 ccore f0 f1 c, f7 f8
+ (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) |- ((((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))) = (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) f1') = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c==> c/\ c= ccore f4 f5 ccat crev f6 ccat cCONS cFST f1 cNIL ccat cbetwn f7 cFST f1 cFST f3 cCONS cFST f3 cNIL c= ccore f4 f8 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f1 cCONS cFST f1 cNIL f6 c= cLET / cLET_END cLET / cLET_END c, cFace ccat crev f6 b0 cF cFace ccat b1 f6 cF ccat cCONS cFST f3 cNIL ccat cbetwn f2 cFST f3 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c, cFace ccore f4 f5 cF cFace ccore f4 f8 cF c==> c/\ c= ccore f4 f5 ccat crev f6 ccat cCONS cFST f1 cNIL ccat cbetwn f7 cFST f1 cFST f3 cCONS cFST f3 cNIL c= ccore f4 f8 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f1 cCONS cFST f1 cNIL f6 c= cLET / cLET_END cLET / cLET_END c, cFace ccat crev f6 b0 cF cFace ccat b1 f6 cF ccat cCONS cFST f3 cNIL ccat cbetwn f2 cFST f3 cFST f1 cCONS cFST f1 cNIL f0 c, cFace ccore f4 f5 cF cFace ccore f4 f8 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), ((((marked_list L) N) r) x) |- ((?vs'. (vs' = (FST fvs))) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> cmarked_list f0 f5 f1 f3 c==> c? / c= b0 cFST f10 c==> c/\ c= ccore f0 f7 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f13 b1 cF cFace ccat b2 f13 cF ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b0 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST f10 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
+ (newVs = ((map FST) (((betwn f) y) z))) |- ((\newVs. (newVs = ((map FST) (((betwn f) y) z)))) newVs)
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 * / c= b0 cmap part cFST cbetwn f1 f2 f3 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x), ((\new2. (new2 = (((betwn f) y) ram2'))) new2) |- (((\new2. (new2 = (((betwn f) y) ram2'))) new2) /\ ((((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f16 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f17 ccat cCONS cFST f7 cNIL ccat cbetwn f16 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f18 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f16 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> * / c= b0 cbetwn f14 f5 f6 f19 c/\ * / c= b0 cbetwn f14 f5 f6 f19 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b1 b2 ccat b3 b0 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL cflatten cmap f2 b0 cbetwn f14 f5 f6 c, f20 f21 c==> c/\ c= ccore f0 f20 ccat crev f18 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f21 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f18 c= c, cFace ccat crev f18 f15 cF cFace ccat f17 f18 cF c, cFace ccore f0 f20 cF cFace ccore f0 f21 cF
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- (vs' = (FST fvs)) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 cFST f1 c= c~ cfinal_list f2 f3 c~ cfinal_list f2 f3
- (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))) |- (((((betwn f) y) ram2') = new2) = ((((betwn f) y) ram2') = new2))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cbetwn f4 f5 f6 f7 c= cbetwn f4 f5 f6 f7
- (z = ((((l'z L) N) r) x)) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 cl'z f1 f2 f3 f4 c= c~ cfinal_list f1 f3 c~ cfinal_list f1 f3
+ |- (T ==> (?ram2'. (ram2' = ((next_el r) z'))))
T c==> cT c? / c= b0 cnext_el f0 f1
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL f13 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f14 c==> c= cnext_el f2 f6 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f4 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f2 f14 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f2 f15 f4 cCONS f4 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c/\ c= ccat crev f8 f13 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8
+ (good_list L), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') |- ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> c= ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL f4 c==> cgood_list_nodes f0 c==> cmarked_list f0 f5 f6 f7 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f6 c==> c= cl'y f0 f6 f7 f1 c==> c= cl'z f0 f5 f6 f7 f8 c==> c= cprev_el f6 f8 f3 c==> c= cfind_face f0 f1 f9 c==> c= cmap part cFST cbetwn f9 f1 f8 f10 c==> c= ccore f0 f6 f11 c==> c= c, f11 f12 f13 c==> c= cFST f13 f2 c==> c= ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL f4 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f2 cFST f3 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f2 cFST f3 cFST f1 cCONS cFST f1 cNIL c==> c= cnext_el f6 f1 f14 c==> c= cnext_el f6 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f9 f1 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f6 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f6 f15 f1 cCONS f1 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f10 ccat cCONS cFST f1 cNIL ccat cbetwn f11 cFST f1 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f1 cCONS cFST f1 cNIL f10 chold c/\ c= ccat crev f10 f4 ccat crev f10 ccat cCONS cFST f1 cNIL ccat cbetwn f11 cFST f1 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f2 cFST f3 cFST f1 cCONS cFST f1 cNIL f10 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f1 cCONS cFST f1 cNIL f10
+ (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))))))))))))))
T c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 ccore f0 f2 c==> c= c, ccore f0 f2 f9 f10 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f10 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f10 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f10 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f10 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f11 c==> c= cnext_el f2 f6 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f7 f4 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f2 f11 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f2 f12 f4 cCONS f4 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f2 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f2 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c= cFST f10 ccore f0 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), ((((marked_list L) N) r) x) |- ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> cmarked_list f0 f5 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b5 ccat crev b3 ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST b1 cCONS cFST b1 cNIL c= ccore f0 b6 ccat ccat cCONS cFST b1 cNIL ccat cbetwn b7 cFST b1 cFST f2 cCONS cFST f2 cNIL b3 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b3 b9 cF cFace ccat b10 b3 cF ccat cCONS cFST b1 cNIL ccat cbetwn b9 cFST b1 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b9 cFST f2 cFST b1 cCONS cFST b1 cNIL cFST b8 c, cFace ccore f0 b5 cF cFace ccore f0 b6 cF c, ccore f0 f1 f6 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b9 b10 ccat b11 b8 ccat cCONS b5 cNIL ccat cbetwn f1 b5 f2 cCONS f2 cNIL ccat cCONS b4 cNIL ccat cbetwn f1 b4 b1 cCONS b1 cNIL cflatten cmap b7 b8 cbetwn b2 f2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el f1 b1 cnext_el f1 f2 cmap part cFST cbetwn b2 f2 b0 cfind_face f0 f2 cprev_el f1 b0 cl'z f0 f5 f1 f3
+ (((cat (rev new1)) f1'') = f1) |- ((((cat (rev new1)) f1'') = f1) /\ ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))
T c==> c= ccat crev f0 f1 f2 c/\ c= ccat crev f0 f1 f2 c==> c= ccat f3 f4 f5 c==> c= ccore f6 f2 ccat crev f7 ccat cCONS cFST f8 cNIL ccat cbetwn ccore f6 f9 cFST f8 cFST f10 cCONS cFST f10 cNIL c==> c= ccore f6 f5 ccat ccat cCONS cFST f10 cNIL ccat cbetwn ccore f6 f9 cFST f10 cFST f8 cCONS cFST f8 cNIL f7 chold c= cFST c, ccore f6 f9 f11 ccore f6 f9
- (fvs = (vs , b)) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 c, f1 f2 c= cis_restricted chypermap_of_list f3 cis_restricted chypermap_of_list f3
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= cis_restricted chypermap_of_list f4 cis_restricted chypermap_of_list f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), ((((marked_list L) N) r) x), ((\z'. (z' = ((prev_el r) z))) z') |- (((\z'. (z' = ((prev_el r) z))) z') /\ ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> cmarked_list f0 f5 f1 f3 c==> * / c= b0 cprev_el f1 f4 f6 c/\ * / c= b0 cprev_el f1 f4 f6 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b4 ccat crev b2 ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST b0 cCONS cFST b0 cNIL c= ccore f0 b5 ccat ccat cCONS cFST b0 cNIL ccat cbetwn b6 cFST b0 cFST f2 cCONS cFST f2 cNIL b2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b2 b8 cF cFace ccat b9 b2 cF ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b8 cFST f2 cFST b0 cCONS cFST b0 cNIL cFST b7 c, cFace ccore f0 b4 cF cFace ccore f0 b5 cF c, ccore f0 f1 f7 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b8 b9 ccat b10 b7 ccat cCONS b4 cNIL ccat cbetwn f1 b4 f2 cCONS f2 cNIL ccat cCONS b3 cNIL ccat cbetwn f1 b3 b0 cCONS b0 cNIL cflatten cmap b6 b7 cbetwn b1 f2 b4 / cmap / cPOWER * part cn_list f0 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f0 cnext_el f1 b0 cnext_el f1 f2 cmap part cFST cbetwn b1 f2 f4 cfind_face f0 f2 cprev_el f1 f4
- (vs' = (FST fvs)) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 cFST f1 c= cis_restricted chypermap_of_list f2 cis_restricted chypermap_of_list f2
+ |- (((((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = ((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) sz) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c= c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b2 b3 ccat b4 b1 ccat cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL cflatten cmap b0 b1 cbetwn f5 f2 f0 / cmap / cPOWER * part cn_list f6 b1 b0 cupt cNUMERAL cBIT1 c_0 * f7 cFST b0 c, f8 f9 c==> c/\ c= ccore f6 f8 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f4 cCONS cFST f4 cNIL c= ccore f6 f9 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f2 cCONS cFST f2 cNIL f10 c= c, cFace ccat crev f10 f12 cF cFace ccat f13 f10 cF c, cFace ccore f6 f8 cF cFace ccore f6 f9 cF c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL cflatten cmap b1 b2 cbetwn f5 f2 f0 / cmap / cPOWER * part cn_list f6 b2 b1 cupt cNUMERAL cBIT1 c_0 * b0 cFST b1 f7 c, f8 f9 c==> c/\ c= ccore f6 f8 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f4 cCONS cFST f4 cNIL c= ccore f6 f9 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f2 cCONS cFST f2 cNIL f10 c= c, cFace ccat crev f10 f12 cF cFace ccat f13 f10 cF c, cFace ccore f6 f8 cF cFace ccore f6 f9 cF
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f7 f1 f6 f4 c==> c= c, f8 f9 f10 c==> c= cfind_face f0 f2 f11 c==> c= cFST f10 f12 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f5 cCONS cFST f5 cNIL f13 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f11 f2 f4 f14 c==> c= ccore f0 f1 f8 c==> cmarked_list f0 f7 f1 f6 c==> c= cnext_el f1 f5 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f11 f2 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f5 cCONS f5 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f2 cCONS f2 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f2 cCONS cFST f2 cNIL f14 chold c/\ c= ccat crev f14 f13 ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f5 cCONS cFST f5 cNIL c= ccat ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f2 cCONS cFST f2 cNIL f14 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f2 cCONS cFST f2 cNIL f14
+ (new2 = (((betwn f) y) ram2')) |- (((((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))) = ((((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) new2) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c= f0 cbetwn f1 f2 f3 c= c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b1 b2 ccat b3 b0 ccat cCONS f3 cNIL ccat cbetwn f4 f3 f2 cCONS f2 cNIL ccat cCONS f5 cNIL ccat cbetwn f4 f5 f6 cCONS f6 cNIL cflatten cmap f7 b0 cbetwn f1 f2 f3 c, f8 f9 c==> c/\ c= ccore f10 f8 ccat crev f11 ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f10 f9 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f2 cCONS cFST f2 cNIL f11 c= c, cFace ccat crev f11 f13 cF cFace ccat f14 f11 cF c, cFace ccore f10 f8 cF cFace ccore f10 f9 cF c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b1 b2 ccat b3 b0 ccat cCONS f3 cNIL ccat cbetwn f4 f3 f2 cCONS f2 cNIL ccat cCONS f5 cNIL ccat cbetwn f4 f5 f6 cCONS f6 cNIL cflatten cmap f7 b0 f0 c, f8 f9 c==> c/\ c= ccore f10 f8 ccat crev f11 ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f10 f9 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f2 cCONS cFST f2 cNIL f11 c= c, cFace ccat crev f11 f13 cF cFace ccat f14 f11 cF c, cFace ccore f10 f8 cF cFace ccore f10 f9 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f22 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccore f0 f19 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 chold c/\ c= ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22
+ (((prev_el r) z) = z') |- ((((prev_el r) z) = z') /\ ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = (((core L) r) , b)) ==> (((FST (((core L) r) , b)) = (FST (((core L) r) , b))) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))))))))))))))
T c==> c= cprev_el f0 f1 f2 c/\ c= cprev_el f0 f1 f2 c==> c= cfind_face f3 f4 f5 c==> c= cmap part cFST cbetwn f5 f4 f1 f6 c==> c= ccore f3 f0 ccore f3 f0 c==> c= c, ccore f3 f0 f7 c, ccore f3 f0 f7 c==> c= cFST c, ccore f3 f0 f7 cFST c, ccore f3 f0 f7 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f3 f0 f7 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f3 f0 f7 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn cFST c, ccore f3 f0 f7 cFST f2 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn cFST c, ccore f3 f0 f7 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f0 f4 f8 c==> c= cnext_el f0 f2 f9 c==> c= / csizel cfilter / c= b1 b0 cflatten f3 f10 c==> c= / cmap / cPOWER * part cn_list f3 b1 b0 cupt cNUMERAL cBIT1 c_0 * f10 cFST b0 f11 c==> c= cbetwn f5 f4 f9 f12 c==> c= cflatten cmap f11 f12 f13 c==> c= ccat cCONS f8 cNIL ccat cbetwn f0 f8 f2 cCONS f2 cNIL f14 c==> c= ccat cCONS f9 cNIL ccat cbetwn f0 f9 f4 cCONS f4 cNIL f15 c==> c= ccat crev f13 f14 f16 c==> c= ccat f15 f12 f17 c==> c= ccore f3 f16 ccat crev f6 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f3 f0 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= ccore f3 f17 ccat ccat cCONS cFST f2 cNIL ccat cbetwn ccore f3 f0 cFST f2 cFST f4 cCONS cFST f4 cNIL f6 chold c= cFST c, ccore f3 f0 f7 ccore f3 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 c, f8 f9 c==> c= f10 cfind_face f0 f2 c==> c= f11 ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f13 ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f2 cCONS cFST f2 cNIL c==> c= f14 cmap part cFST cbetwn f10 f2 f4 c==> c= f8 ccore f0 f1 c==> c= f12 cFST f7 c==> cmarked_list f0 f5 f1 f3 c==> c= cnext_el f1 f2 f15 c==> c= cnext_el f1 f6 f16 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f17 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f17 cFST b0 f18 c==> c= cbetwn f10 f2 f16 f19 c==> c= cflatten cmap f18 f19 f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f6 cCONS f6 cNIL f21 c==> c= ccat cCONS f16 cNIL ccat cbetwn f1 f16 f2 cCONS f2 cNIL f22 c==> c= ccat crev f20 f21 f23 c==> c= ccat f22 f19 f24 c==> c= ccore f0 f23 ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f24 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f8 cFST f6 cFST f2 cCONS cFST f2 cNIL f14 chold c/\ c= ccat crev f14 f11 ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccat f13 f14 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f8 cFST f6 cFST f2 cCONS cFST f2 cNIL f14
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((FST fvs) = (FST fvs)) /\ ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 cFST f9 c==> c= cmap part cFST cbetwn f10 f5 f2 f11 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= cFST f9 cFST f9 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f10 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 chold c= cFST f9 f7
+ (((core L) r) = vs) |- (vs = ((core L) r))
T c==> c= ccore f0 f1 f2 c= f2 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))) = (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f22 c==> c= ccore f0 f19 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c= c==> c/\ c= ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 chold c/\ c= ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 chold c/\ c= ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22
+ (fvs = (vs , b)) |- ((fvs = (vs , b)) /\ (?fvs. (fvs = (vs , b))))
T c==> c= f0 c, f1 f2 c/\ c= f0 c, f1 f2 c? / c= b0 c, f1 f2
- (new1 = (flatten ((map nd) new2))) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) = ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz))
T c==> c= f0 cflatten cmap f1 f2 c= c= / csizel cfilter / c= b1 b0 cflatten f3 f4 c= / csizel cfilter / c= b1 b0 cflatten f3 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c==> c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f3 cCONS cFST f3 cNIL f13 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c/\ c= ccat crev f8 f13 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), ((((marked_list L) N) r) x) |- ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (vs , b))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> cmarked_list f0 f5 f1 f3 cLET / cLET_END c==> c/\ c= ccore f0 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b2 cF cFace ccat b3 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b1 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b1 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b0 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c, f11 f12
+ |- ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))))))
T c==> c= cnext_el f0 f1 f2 c==> c= cnext_el f0 f3 f4 c==> c= / csizel cfilter / c= b1 b0 cflatten f5 f6 c==> c= / cmap / cPOWER * part cn_list f5 b1 b0 cupt cNUMERAL cBIT1 c_0 * f6 cFST b0 f7 c==> c= cbetwn f8 f1 f4 f9 c==> c= cflatten cmap f7 f9 f10 c==> c= ccat cCONS f2 cNIL ccat cbetwn f0 f2 f3 cCONS f3 cNIL f11 c==> c= ccat cCONS f4 cNIL ccat cbetwn f0 f4 f1 cCONS f1 cNIL f12 c==> c= ccat crev f10 f11 f13 c==> c= ccat f12 f9 f14 c==> c= ccore f5 f13 ccat crev f15 ccat cCONS cFST f1 cNIL ccat cbetwn ccore f5 f0 cFST f1 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f5 f14 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f5 f0 cFST f3 cFST f1 cCONS cFST f1 cNIL f15 chold c= cFST c, ccore f5 f0 f16 ccore f5 f0
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))) ==> ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))) = ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL f22 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f23 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c= c==> chold c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23
+ (A = F) |- ((((F ==> B) /\ F) ==> B) = (((A ==> B) /\ A) ==> B))
T c==> c= f0 cF c= c==> c/\ c==> cF f1 cF f1 c==> c/\ c==> f0 f1 f0 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) /\ (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL f22 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f23 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 chold c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23
+ |- (T ==> (?newVs. (newVs = ((map FST) (((betwn f) y) z)))))
T c==> cT c? / c= b0 cmap part cFST cbetwn f0 f1 f2
+ (good_list L), (good_list_nodes L) |- ((good_list_nodes L) /\ (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL f13 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f14 c==> c= cnext_el f2 f6 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f4 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f2 f14 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f2 f15 f4 cCONS f4 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c/\ c= ccat crev f8 f13 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((\ram2'. (ram2' = ((next_el r) z'))) ram2') ==> ((((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f3 cl'y f0 f1 f4 c==> c= f5 cl'z f0 f6 f1 f4 c==> c= f7 cprev_el f1 f5 c==> c= f8 c, f9 f10 c==> c= f11 cfind_face f0 f3 c==> c= f12 ccat cCONS cFST f3 cNIL ccat cbetwn f13 cFST f3 cFST f7 cCONS cFST f7 cNIL c==> c= f14 ccat cCONS cFST f7 cNIL ccat cbetwn f13 cFST f7 cFST f3 cCONS cFST f3 cNIL c==> c= f15 cmap part cFST cbetwn f11 f3 f5 c==> c= f9 ccore f0 f1 c==> c= f13 cFST f8 c==> cmarked_list f0 f6 f1 f4 c==> * / c= b0 cnext_el f1 f7 f16 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b4 b5 ccat b6 b3 ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f7 cCONS f7 cNIL cflatten cmap b2 b3 cbetwn f11 f3 b0 / cmap / cPOWER * part cn_list f0 b3 b2 cupt cNUMERAL cBIT1 c_0 * b1 cFST b2 / csizel cfilter / c= b2 b1 cflatten f0 cnext_el f1 f7 c, f17 f18 c==> c/\ c= ccore f0 f17 ccat crev f15 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f18 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f9 cFST f7 cFST f3 cCONS cFST f3 cNIL f15 c= c, cFace ccat crev f15 f12 cF cFace ccat f14 f15 cF c, cFace ccore f0 f17 cF cFace ccore f0 f18 cF
- (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) |- ((((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)) = (((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f4 b1 f1 cCONS f1 cNIL ccat cCONS b0 cNIL ccat cbetwn f4 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f5 f1 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f4 f3 cnext_el f4 f1 c, f7 f8 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f4 b1 f1 cCONS f1 cNIL ccat cCONS b0 cNIL ccat cbetwn f4 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f5 f1 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f4 f3 cnext_el f4 f1 c, f7 f8
+ |- (T ==> (?f. (f = ((find_face L) y))))
T c==> cT c? / c= b0 cfind_face f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), ((((marked_list L) N) r) x) |- ((((Face ((cat (rev newVs)) f1')) F) = ((Face ((core L) f1)) F)) /\ (((Face ((cat f2') newVs)) F) = ((Face ((core L) f2)) F)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= ccat f16 f18 f19 c==> c= ccat crev f17 f15 f20 c==> c= f21 ccat cCONS cFST f5 cNIL ccat cbetwn f22 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f23 ccat cCONS cFST f7 cNIL ccat cbetwn f22 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f24 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f22 cFST f11 c==> c= ccore f0 f20 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24 c==> cmarked_list f0 f10 f1 f8 c/\ c= cFace ccat crev f24 f21 cF cFace ccore f0 f20 cF c= cFace ccat f23 f24 cF cFace ccore f0 f19 cF
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cprev_el f2 f4 f5 c= cprev_el f2 f4 f5
+ |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))))
T c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f1 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f1 cFST b0 f2 c==> c= cbetwn f3 f4 f5 f6 c==> c= cflatten cmap f2 f6 f7 c==> c= ccat cCONS f8 cNIL ccat cbetwn f9 f8 f10 cCONS f10 cNIL f11 c==> c= ccat cCONS f5 cNIL ccat cbetwn f9 f5 f4 cCONS f4 cNIL f12 c==> c= ccat crev f7 f11 f13 c==> c= ccat f12 f6 f14 c==> c= ccore f0 f13 ccat crev f15 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f9 cFST f4 cFST f10 cCONS cFST f10 cNIL c==> c= ccore f0 f14 ccat ccat cCONS cFST f10 cNIL ccat cbetwn ccore f0 f9 cFST f10 cFST f4 cCONS cFST f4 cNIL f15 chold c= cFST c, ccore f0 f9 f16 ccore f0 f9
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (hold (vs' = vs))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f22 c==> c= ccore f0 f19 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 chold c= f21 f11
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= cl'y f1 f2 f3 f4 c= cl'y f1 f2 f3 f4
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((core L) r) = vs) = (((core L) r) = vs))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= ccore f4 f2 f5 c= ccore f4 f2 f5
- (vs' = (FST fvs)) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 cFST f1 c= c= cl'z f2 f3 f4 f5 f6 c= cl'z f2 f3 f4 f5 f6
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((((next_el r) z') = ram2') = (((next_el r) z') = ram2'))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= cnext_el f3 f4 f5 c= cnext_el f3 f4 f5
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((!x. (((\f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))) x) ==> ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) ==> ((?f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))) ==> ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) = ((?f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))) ==> ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 cflatten cmap f2 f17 c==> c= f17 cbetwn f14 f5 f6 c==> c= f18 ccat cCONS cFST f5 cNIL ccat cbetwn f19 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f20 ccat cCONS cFST f7 cNIL ccat cbetwn f19 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f21 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f19 cFST f11 c==> cmarked_list f0 f10 f1 f8 c= c==> ! c==> * / c= b1 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL b0 c==> c= cLET / cLET_END c, ccat crev f16 f15 ccat b1 f17 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f22 f23 c==> c/\ c= ccore f0 f22 ccat crev f21 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f23 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f21 c= c, cFace ccat crev f21 f18 cF cFace ccat f20 f21 cF c, cFace ccore f0 f22 cF cFace ccore f0 f23 cF c==> c? / c= b0 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= cLET / cLET_END c, ccat crev f16 f15 ccat b0 f17 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f22 f23 c==> c/\ c= ccore f0 f22 ccat crev f21 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f23 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f21 c= c, cFace ccat crev f21 f18 cF cFace ccat f20 f21 cF c, cFace ccore f0 f22 cF cFace ccore f0 f23 cF c==> c? / c= b0 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= cLET / cLET_END c, ccat crev f16 f15 ccat b0 f17 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f22 f23 c==> c/\ c= ccore f0 f22 ccat crev f21 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f23 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f21 c= c, cFace ccat crev f21 f18 cF cFace ccat f20 f21 cF c, cFace ccore f0 f22 cF cFace ccore f0 f23 cF
+ |- (((?vs. (vs = ((core L) r))) ==> ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))) = ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)))
T c= c==> c? / c= b0 ccore f0 f1 cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f2 ccat crev f3 ccat cCONS cFST f4 cNIL ccat cbetwn b0 cFST f4 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f6 ccat ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f4 cCONS cFST f4 cNIL f3 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f3 b2 cF cFace ccat b3 f3 cF ccat cCONS cFST f5 cNIL ccat cbetwn b2 cFST f5 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn b2 cFST f4 cFST f5 cCONS cFST f5 cNIL cFST b1 c, cFace ccore f0 f2 cF cFace ccore f0 f6 cF c, ccore f0 f1 f7 ccore f0 f1 cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f2 ccat crev f3 ccat cCONS cFST f4 cNIL ccat cbetwn b0 cFST f4 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f6 ccat ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f4 cCONS cFST f4 cNIL f3 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f3 b2 cF cFace ccat b3 f3 cF ccat cCONS cFST f5 cNIL ccat cbetwn b2 cFST f5 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn b2 cFST f4 cFST f5 cCONS cFST f5 cNIL cFST b1 c, cFace ccore f0 f2 cF cFace ccore f0 f6 cF c, ccore f0 f1 f7 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c==> c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 ccore f0 f1 c==> c= c, ccore f0 f1 f9 f10 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f7 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c= cFST f10 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f10 f5 f2 f12 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f13 c==> c= cnext_el f1 f3 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f10 f5 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f5 cCONS f5 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f12 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f12 chold c= f11 f7
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) y) = ram1') /\ ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f7 f1 f6 f4 c==> c= c, f8 f9 f10 c==> c= cfind_face f0 f2 f11 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn cFST f10 cFST f2 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn cFST f10 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f11 f2 f4 f12 c==> c= ccore f0 f1 f8 c==> cmarked_list f0 f7 f1 f6 c/\ c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f5 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f11 f2 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f5 cCONS f5 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f2 cCONS f2 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f12 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f2 cCONS cFST f2 cNIL f12 chold c= cFST f10 f8
+ (newVs = ((map FST) (((betwn f) y) z))) |- (((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) newVs) = ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z))))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f4 b2 ccat crev b0 ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f5 cCONS cFST f5 cNIL c= ccore f4 b3 ccat ccat cCONS cFST f5 cNIL ccat cbetwn b4 cFST f5 cFST f2 cCONS cFST f2 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f5 cNIL ccat cbetwn b6 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f5 cCONS cFST f5 cNIL cFST b5 c, cFace ccore f4 b2 cF cFace ccore f4 b3 cF c, ccore f4 f6 f7 ccore f4 f6 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f6 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f6 b1 f5 cCONS f5 cNIL cflatten cmap b4 b5 cbetwn f1 f2 b2 / cmap / cPOWER * part cn_list f4 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f4 cnext_el f6 f5 cnext_el f6 f2 f0 cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f4 b2 ccat crev b0 ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f5 cCONS cFST f5 cNIL c= ccore f4 b3 ccat ccat cCONS cFST f5 cNIL ccat cbetwn b4 cFST f5 cFST f2 cCONS cFST f2 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f5 cNIL ccat cbetwn b6 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f5 cCONS cFST f5 cNIL cFST b5 c, cFace ccore f4 b2 cF cFace ccore f4 b3 cF c, ccore f4 f6 f7 ccore f4 f6 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f6 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f6 b1 f5 cCONS f5 cNIL cflatten cmap b4 b5 cbetwn f1 f2 b2 / cmap / cPOWER * part cn_list f4 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f4 cnext_el f6 f5 cnext_el f6 f2 cmap part cFST cbetwn f1 f2 f3
+ ((\new2. (new2 = (((betwn f) y) ram2'))) new2) |- (new2 = (((betwn f) y) ram2'))
T c==> * / c= b0 cbetwn f0 f1 f2 f3 c= f3 cbetwn f0 f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= cfind_face f0 f4 f18 c==> c= cbetwn f18 f4 f7 f14 c==> c= cFST f13 f19 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f19 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f19 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f18 f4 f8 f20 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat crev f15 f16 f21 c==> c= ccat f17 f14 f22 c==> c= ccore f0 f21 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c/\ c= ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f19 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c/\ c~ cfinal_list f0 f1 c==> c= cl'y f0 f1 f3 f4 c==> c= cl'z f0 f2 f1 f3 f5 c==> c= cprev_el f1 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f12 cFST f4 cFST f6 cCONS cFST f6 cNIL f13 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f1 f4 f14 c==> c= cnext_el f1 f6 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f4 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f4 cCONS f4 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c/\ c= ccat crev f8 f13 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f4 cCONS cFST f4 cNIL f8
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) f1'') = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 cflatten cmap f2 f17 c==> c= f17 cbetwn f14 f5 f6 c==> c= f18 ccat cCONS cFST f5 cNIL ccat cbetwn f19 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f20 ccat cCONS cFST f7 cNIL ccat cbetwn f19 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f21 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f19 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c= cLET / cLET_END cLET / cLET_END c, ccat crev f16 b0 ccat b1 f17 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL f15 c, f22 f23 c==> c/\ c= ccore f0 f22 ccat crev f21 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f23 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f21 c= c, cFace ccat crev f21 f18 cF cFace ccat f20 f21 cF c, cFace ccore f0 f22 cF cFace ccore f0 f23 cF
+ |- ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)
T * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
- (fvs = (vs , b)) |- ((((core L) r) = vs) = (((core L) r) = vs))
T c==> c= f0 c, f1 f2 c= c= ccore f3 f4 f1 c= ccore f3 f4 f1
+ (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) /\ (?nd. (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c/\ c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c? / c= b0 / cmap / cPOWER * part cn_list f1 b2 b1 cupt cNUMERAL cBIT1 c_0 * f2 cFST b1
- (z' = ((prev_el r) z)) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 cprev_el f1 f2 c= c~ cfinal_list f3 f1 c~ cfinal_list f3 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((FST fvs) = (FST fvs)) /\ ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, ccore f0 f1 f7 f8 c==> c= cfind_face f0 f5 f9 c==> c= cFST f8 cFST f8 c==> c= cmap part cFST cbetwn f9 f5 f2 f10 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f6 f1 f4 c/\ c= cFST f8 cFST f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f9 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= cFST f8 ccore f0 f1
+ ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) /\ (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r))))))))))))
T c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f1 cFST b0 f2 c/\ c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f1 cFST b0 f2 c==> c= cbetwn f3 f4 f5 f6 c==> c= cflatten cmap f2 f6 f7 c==> c= ccat cCONS f8 cNIL ccat cbetwn f9 f8 f10 cCONS f10 cNIL f11 c==> c= ccat cCONS f5 cNIL ccat cbetwn f9 f5 f4 cCONS f4 cNIL f12 c==> c= ccat crev f7 f11 f13 c==> c= ccat f12 f6 f14 c==> c= ccore f0 f13 ccat crev f15 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f9 cFST f4 cFST f10 cCONS cFST f10 cNIL c==> c= ccore f0 f14 ccat ccat cCONS cFST f10 cNIL ccat cbetwn ccore f0 f9 cFST f10 cFST f4 cCONS cFST f4 cNIL f15 chold c= cFST c, ccore f0 f9 f16 ccore f0 f9
+ |- ((A = F) ==> (((A ==> B) /\ A) ==> B))
T c==> c= f0 cF c==> c/\ c==> f0 f1 f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), ((((marked_list L) N) r) x) |- ((((map FST) (((betwn f) y) z)) = newVs) /\ ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> cmarked_list f0 f6 f1 f4 c/\ c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 ccore f0 f1 c==> c= c, ccore f0 f1 f9 f10 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f7 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c= cFST f10 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- (((\f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))) f2) ==> ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> c= f8 cmap part cFST cbetwn f7 f2 f4 c==> cmarked_list f0 f5 f1 f3 c==> * / c= c, f9 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f6 cCONS f6 cNIL cflatten cmap b4 b5 cbetwn f7 f2 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 f10 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f8 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b3 cFST f6 cFST f2 cCONS cFST f2 cNIL f8 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f8 b5 cF cFace ccat b6 f8 cF ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f1 f11 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f7 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x), ((\f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))) f2) |- (((\f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))) f2) /\ ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> c= f8 cmap part cFST cbetwn f7 f2 f4 c==> cmarked_list f0 f5 f1 f3 c==> * / c= c, f9 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f6 cCONS f6 cNIL cflatten cmap b4 b5 cbetwn f7 f2 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 f10 c/\ * / c= c, f9 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f6 cCONS f6 cNIL cflatten cmap b4 b5 cbetwn f7 f2 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 f10 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f8 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b3 cFST f6 cFST f2 cCONS cFST f2 cNIL f8 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f8 b5 cF cFace ccat b6 f8 cF ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f1 f11 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f7 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2
+ |- (T ==> (?new1. (new1 = (flatten ((map nd) new2)))))
T c==> cT c? / c= b0 cflatten cmap f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f4 f5 c==> c= cprev_el f1 f6 f4 c==> c= cl'y f0 f1 f7 f2 c==> c= cl'z f0 f8 f1 f7 f6 c==> c= c, f9 f10 f11 c==> c= cfind_face f0 f2 f12 c==> c= cFST f11 f13 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f13 cFST f2 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn f13 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f12 f2 f6 f14 c==> c= ccore f0 f1 f9 c==> cmarked_list f0 f8 f1 f7 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f12 f2 f5 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f2 cCONS f2 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f2 cCONS cFST f2 cNIL f14 chold c= f13 f9
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= cl'z f1 f3 f4 f5 f6 c= cl'z f1 f3 f4 f5 f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), ((((marked_list L) N) r) x) |- ((((cat (rev newVs)) f1') = ((core L) f1)) /\ (((cat f2') newVs) = ((core L) f2)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= ccat f16 f18 f19 c==> c= ccat crev f17 f15 f20 c==> c= f21 ccat cCONS cFST f5 cNIL ccat cbetwn f22 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f23 ccat cCONS cFST f7 cNIL ccat cbetwn f22 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f24 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f22 cFST f11 c==> c= ccore f0 f20 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24 c==> cmarked_list f0 f10 f1 f8 c/\ c= ccat crev f24 f21 ccore f0 f20 c= ccat f23 f24 ccore f0 f19
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> c= f8 cmap part cFST cbetwn f7 f2 f4 c==> cmarked_list f0 f5 f1 f3 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f8 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b3 cFST f6 cFST f2 cCONS cFST f2 cNIL f8 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f8 b5 cF cFace ccat b6 f8 cF ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f1 f9 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f7 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((((core L) r) , b) = fvs) /\ (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, ccore f0 f1 f7 f8 c==> c= cfind_face f0 f5 f9 c==> c= cmap part cFST cbetwn f9 f5 f2 f10 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f6 f1 f4 c/\ c= c, ccore f0 f1 f7 f8 c==> c= cFST f8 cFST f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f9 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= cFST f8 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((new1 = (flatten ((map nd) new2))) /\ ((((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 cflatten cmap f2 f16 c==> c= f16 cbetwn f14 f5 f6 c==> c= f17 ccat cCONS cFST f5 cNIL ccat cbetwn f18 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f19 ccat cCONS cFST f7 cNIL ccat cbetwn f18 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f20 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f18 cFST f11 c==> cmarked_list f0 f10 f1 f8 c/\ c= f15 cflatten cmap f2 f16 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b0 b1 ccat b2 f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL cflatten cmap f2 f16 c, f21 f22 c==> c/\ c= ccore f0 f21 ccat crev f20 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f22 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f20 c= c, cFace ccat crev f20 f17 cF cFace ccat f19 f20 cF c, cFace ccore f0 f21 cF cFace ccore f0 f22 cF
+ |- (T ==> (?f1. (?f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))))
T c==> cT c? / c? / c= c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b8 b6 ccat cCONS b3 cNIL ccat cbetwn f0 b3 f1 cCONS f1 cNIL ccat cCONS b2 cNIL ccat cbetwn f0 b2 f2 cCONS f2 cNIL cflatten cmap b5 b6 cbetwn f3 f1 b3 / cmap / cPOWER * part cn_list f4 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f4 cnext_el f0 f2 cnext_el f0 f1
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) = ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= / cmap / cPOWER * part cn_list f4 b1 b0 cupt cNUMERAL cBIT1 c_0 * f5 cFST b0 f6 c= / cmap / cPOWER * part cn_list f4 b1 b0 cupt cNUMERAL cBIT1 c_0 * f5 cFST b0 f6
+ (good_list L), ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((is_restricted (hypermap_of_list L)) /\ (~ ((final_list L) r))))) |- ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((((split_face fvs) (FST y)) (FST z')) newVs) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) (((((split_normal_list L) r) f) y) z'))))) ((MAP FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))
T c==> cgood_list f0 c==> c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c~ cfinal_list f0 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b5 c, b6 b7 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b6 ccat crev b4 ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST b2 cCONS cFST b2 cNIL c= ccore f0 b7 ccat ccat cCONS cFST b2 cNIL ccat cbetwn b8 cFST b2 cFST b0 cCONS cFST b0 cNIL b4 c= csplit_face b9 cFST b0 cFST b2 b4 c, cFace ccore f0 b6 cF cFace ccore f0 b7 cF c, ccore f0 f2 f4 ccore f0 f2 csplit_normal_list f0 f2 b3 b0 b2 cMAP part cFST cbetwn b3 b0 b1 cfind_face f0 b0 cprev_el f2 b1 cl'z f0 f1 f2 f3 cl'y f0 f2 f3
+ |- (T = (!a. (!b. ((((Face a) F) = ((Face b) F)) = (a = b)))))
T c= cT ! ! c= c= cFace b0 cF cFace b1 cF c= b0 b1
- (z = ((((l'z L) N) r) x)) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 cl'z f1 f2 f3 f4 c= cis_restricted chypermap_of_list f1 cis_restricted chypermap_of_list f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f3 cnext_el f1 f4 c==> c= f5 cnext_el f1 f6 c==> c= f4 cl'y f0 f1 f7 c==> c= f8 cl'z f0 f9 f1 f7 c==> c= f6 cprev_el f1 f8 c==> c= f10 c, f11 f12 c==> c= f13 cfind_face f0 f4 c==> c= f14 ccat cCONS cFST f4 cNIL ccat cbetwn f15 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= f16 ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= f17 cmap part cFST cbetwn f13 f4 f8 c==> c= f11 ccore f0 f1 c==> c= f15 cFST f10 c==> cmarked_list f0 f9 f1 f7 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f18 c==> c= cbetwn f13 f4 f5 f19 c==> c= cflatten cmap f18 f19 f20 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f6 cCONS f6 cNIL f21 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f4 cCONS f4 cNIL f22 c==> c= ccat crev f20 f21 f23 c==> c= ccat f22 f19 f24 c==> c= ccore f0 f23 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f24 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 chold c/\ c= ccat crev f17 f14 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat f16 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17
+ |- ((T ==> (?fvs. (fvs = (vs , b)))) = (?fvs. (fvs = (vs , b))))
T c= c==> cT c? / c= b0 c, f0 f1 c? / c= b0 c, f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> cmarked_list f0 f4 f1 f2 c/\ c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> c= cprev_el f1 f5 f6 c==> c= cfind_face f0 f3 f7 c==> c= cmap part cFST cbetwn f7 f3 f5 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f3 cCONS cFST f3 cNIL c==> c= cnext_el f1 f3 f13 c==> c= cnext_el f1 f6 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f7 f3 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f6 cCONS f6 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f3 cCONS cFST f3 cNIL f8 chold c/\ c= ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f6 cCONS cFST f6 cNIL ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f3 cCONS cFST f3 cNIL f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f9 cFST f6 cFST f3 cCONS cFST f3 cNIL f8
+ |- ((f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) ==> (?f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c? / c= b0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f15 c==> c= cfind_face f0 f4 f16 c==> c= cbetwn f16 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f16 f4 f8 f17 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= ccat crev f14 f15 f19 c==> c= ccat f18 f13 f20 c==> c= ccore f0 f19 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 chold c= cFST f12 ccore f0 f1
+ (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))) = (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) f2') = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c==> c/\ c= ccore f4 f5 ccat crev f6 ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f1 cCONS cFST f1 cNIL c= ccore f4 f8 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f7 cFST f1 cFST f3 cCONS cFST f3 cNIL f6 c= cLET / cLET_END c, cFace ccat crev f6 f9 cF cFace ccat b0 f6 cF ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c, cFace ccore f4 f5 cF cFace ccore f4 f8 cF c==> c/\ c= ccore f4 f5 ccat crev f6 ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f1 cCONS cFST f1 cNIL c= ccore f4 f8 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f7 cFST f1 cFST f3 cCONS cFST f3 cNIL f6 c= cLET / cLET_END c, cFace ccat crev f6 f9 cF cFace ccat b0 f6 cF f0 c, cFace ccore f4 f5 cF cFace ccore f4 f8 cF
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') = (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= ccat cCONS cFST f3 cNIL ccat cbetwn f2 cFST f3 cFST f1 cCONS cFST f1 cNIL f4 c= ccat cCONS cFST f3 cNIL ccat cbetwn f2 cFST f3 cFST f1 cCONS cFST f1 cNIL f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((((l'z L) N) r) x) = z) /\ ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> cmarked_list f0 f4 f1 f2 c/\ c= cl'z f0 f4 f1 f2 f5 c==> c= cprev_el f1 f5 f6 c==> c= cfind_face f0 f3 f7 c==> c= cmap part cFST cbetwn f7 f3 f5 f8 c==> c= ccore f0 f1 ccore f0 f1 c==> c= c, ccore f0 f1 f9 f10 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f10 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f10 cFST f6 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f10 cFST f6 cFST f3 cCONS cFST f3 cNIL c==> c= cnext_el f1 f3 f11 c==> c= cnext_el f1 f6 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f7 f3 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f8 ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f3 cCONS cFST f3 cNIL f8 chold c= cFST f10 ccore f0 f1
- (new1 = (flatten ((map nd) new2))) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 cflatten cmap f1 f2 c= c= cfind_face f3 f4 f5 c= cfind_face f3 f4 f5
+ |- (T ==> (?f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))
T c==> cT c? / c= b0 ccat cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL
- (z' = ((prev_el r) z)) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 cprev_el f1 f2 c= c= cl'y f3 f1 f4 f5 c= cl'y f3 f1 f4 f5
+ |- (((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) = ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) newVs))
T c= cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b5 cF cFace ccat b6 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f4 f5 ccore f0 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f4 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f4 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f6 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f4 f3 cnext_el f4 f2 cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b2 ccat crev b0 ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 b3 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b4 cFST f3 cFST f2 cCONS cFST f2 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f3 cNIL ccat cbetwn b6 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b5 c, cFace ccore f0 b2 cF cFace ccore f0 b3 cF c, ccore f0 f4 f5 ccore f0 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f4 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f4 b1 f3 cCONS f3 cNIL cflatten cmap b4 b5 cbetwn f6 f2 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f4 f3 cnext_el f4 f2 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= ccat f16 f18 f19 c==> c= ccat crev f17 f15 f20 c==> c= f21 ccat cCONS cFST f5 cNIL ccat cbetwn f22 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f23 ccat cCONS cFST f7 cNIL ccat cbetwn f22 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f24 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f22 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c= ccore f0 f20 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24 chold c/\ c= ccat crev f24 f21 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccat f23 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24
- (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cfind_face f4 f5 f6 c= cfind_face f4 f5 f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((FST fvs) = vs') /\ ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 f11 c==> c= cmap part cFST cbetwn f10 f5 f2 f12 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= cFST f9 f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f13 c==> c= cnext_el f1 f3 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f10 f5 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f5 cCONS f5 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f12 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f12 chold c/\ c= ccat crev f12 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat crev f12 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f12 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f12
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((hold ((FST fvs) = vs)) ==> ((FST fvs) = vs)) = ((FST fvs) = vs))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f21 c==> c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c= c==> chold c= cFST f13 f11 c= cFST f13 f11 c= cFST f13 f11
+ (good_list L), (good_list_nodes L), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= ccore f0 f1 f2 c==> cmarked_list f0 f3 f1 f4 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f1 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f3 f1 f4 f6 c==> c= cprev_el f1 f6 f7 c==> c= cfind_face f0 f5 f8 c==> c= cmap part cFST cbetwn f8 f5 f6 f9 c==> c= ccore f0 f1 f2 c==> c= c, f2 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f7 cCONS cFST f7 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccat cCONS cFST f7 cNIL ccat cbetwn cFST f11 cFST f7 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f7 cNIL ccat cbetwn cFST f11 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f7 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f8 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f7 cCONS f7 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f9 ccat cCONS cFST f5 cNIL ccat cbetwn f2 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f2 cFST f7 cFST f5 cCONS cFST f5 cNIL f9 chold c= cFST f11 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), ((((marked_list L) N) r) x) |- ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> cmarked_list f0 f6 f1 f4 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f3 cCONS cFST f3 cNIL f13 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f7 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c/\ c= ccat crev f8 f13 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cfind_face f4 f3 f5 c= cfind_face f4 f3 f5
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), ((((marked_list L) N) r) x) |- (((\newVs. (newVs = ((map FST) (((betwn f) y) z)))) newVs) ==> ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> cmarked_list f0 f5 f1 f3 c==> * / c= b0 cmap part cFST cbetwn f7 f2 f4 f8 cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b2 ccat crev b0 ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b3 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b4 cFST f6 cFST f2 cCONS cFST f2 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f6 cNIL ccat cbetwn b6 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b5 c, cFace ccore f0 b2 cF cFace ccore f0 b3 cF c, ccore f0 f1 f9 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f1 b2 f2 cCONS f2 cNIL ccat cCONS b1 cNIL ccat cbetwn f1 b1 f6 cCONS f6 cNIL cflatten cmap b4 b5 cbetwn f7 f2 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cmap part cFST cbetwn f7 f2 f4
+ |- (((vs' = vs) = p') ==> ((p' ==> (((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) = q')) ==> (((vs' = vs) ==> ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))) = (p' ==> q'))))
T c==> c= c= f0 f1 f2 c==> c==> f2 c= c/\ c= ccat crev f3 ccat cCONS cFST f4 cNIL ccat cbetwn f0 cFST f4 cFST f5 cCONS cFST f5 cNIL ccat crev f3 ccat cCONS cFST f4 cNIL ccat cbetwn f1 cFST f4 cFST f5 cCONS cFST f5 cNIL c= ccat ccat cCONS cFST f5 cNIL ccat cbetwn f0 cFST f5 cFST f4 cCONS cFST f4 cNIL f3 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f1 cFST f5 cFST f4 cCONS cFST f4 cNIL f3 f6 c= c==> c= f0 f1 c/\ c= ccat crev f3 ccat cCONS cFST f4 cNIL ccat cbetwn f0 cFST f4 cFST f5 cCONS cFST f5 cNIL ccat crev f3 ccat cCONS cFST f4 cNIL ccat cbetwn f1 cFST f4 cFST f5 cCONS cFST f5 cNIL c= ccat ccat cCONS cFST f5 cNIL ccat cbetwn f0 cFST f5 cFST f4 cCONS cFST f4 cNIL f3 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f1 cFST f5 cFST f4 cCONS cFST f4 cNIL f3 c==> f2 f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f7 f1 f6 f4 c==> c= c, f8 f9 f10 c==> c= cfind_face f0 f2 f11 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn cFST f10 cFST f2 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn cFST f10 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f10 cFST f5 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f11 f2 f4 f12 c==> c= ccore f0 f1 f8 c==> cmarked_list f0 f7 f1 f6 c==> c= cnext_el f1 f5 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f11 f2 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f5 cCONS f5 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f2 cCONS f2 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f12 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f2 cCONS cFST f2 cNIL f12 chold c= cFST f10 f8
+ |- ((\_10484458. (!f1. (!f2. ((GEQ (_10484458 (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))) (GABS (\_10484458. (!f1. (!f2. ((GEQ (_10484458 (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)))))))))
T * / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b5 cF cFace ccat b6 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f4 f5 ccore f0 f4 * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b5 cF cFace ccat b6 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f4 f5 ccore f0 f4
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (!f2''. (((\f2'. (f2' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))) f2'') ==> ((((LET (\f2. (LET_END (((cat (rev new1)) f1'') , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 cflatten cmap f2 f17 c==> c= f17 cbetwn f14 f5 f6 c==> c= f18 ccat cCONS cFST f5 cNIL ccat cbetwn f19 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f20 ccat cCONS cFST f7 cNIL ccat cbetwn f19 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f21 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f19 cFST f11 c==> cmarked_list f0 f10 f1 f8 ! c==> * / c= b1 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL b0 c==> c= cLET / cLET_END c, ccat crev f16 f15 ccat b1 f17 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c, f22 f23 c==> c/\ c= ccore f0 f22 ccat crev f21 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f23 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f21 c= c, cFace ccat crev f21 f18 cF cFace ccat f20 f21 cF c, cFace ccore f0 f22 cF cFace ccore f0 f23 cF
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat crev f15 f16 f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f14 c==> c= cFST f13 f20 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f20 cFST f4 cFST f6 cCONS cFST f6 cNIL f21 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f20 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f20 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f22 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat f18 f14 f23 c==> c= ccore f0 f17 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 chold c/\ c= ccat crev f22 f21 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f20 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22
+ |- ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((is_restricted (hypermap_of_list L)) ==> ((~ ((final_list L) r)) ==> (((((l'y L) r) x) = y) ==> ((((((l'z L) N) r) x) = z) ==> ((((prev_el r) z) = z') ==> ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = ((core L) r)) ==> (((((core L) r) , b) = (((core L) r) , b)) ==> (((FST (((core L) r) , b)) = (FST (((core L) r) , b))) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))))))))))))))))))))
T c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> cis_restricted chypermap_of_list f0 c==> c~ cfinal_list f0 f2 c==> c= cl'y f0 f2 f3 f4 c==> c= cl'z f0 f1 f2 f3 f5 c==> c= cprev_el f2 f5 f6 c==> c= cfind_face f0 f4 f7 c==> c= cmap part cFST cbetwn f7 f4 f5 f8 c==> c= ccore f0 f2 ccore f0 f2 c==> c= c, ccore f0 f2 f9 c, ccore f0 f2 f9 c==> c= cFST c, ccore f0 f2 f9 cFST c, ccore f0 f2 f9 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST c, ccore f0 f2 f9 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cnext_el f2 f4 f10 c==> c= cnext_el f2 f6 f11 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f12 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f12 cFST b0 f13 c==> c= cbetwn f7 f4 f11 f14 c==> c= cflatten cmap f13 f14 f15 c==> c= ccat cCONS f10 cNIL ccat cbetwn f2 f10 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f2 f11 f4 cCONS f4 cNIL f17 c==> c= ccat crev f15 f16 f18 c==> c= ccat f17 f14 f19 c==> c= ccore f0 f18 ccat crev f8 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f2 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f2 cFST f6 cFST f4 cCONS cFST f4 cNIL f8 chold c= cFST c, ccore f0 f2 f9 ccore f0 f2
+ ((\vs. (vs = ((core L) r))) vs) |- (((vs = ((core L) r)) ==> ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))) = ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)))
T c==> * / c= b0 ccore f0 f1 f2 c= c==> c= f2 ccore f0 f1 cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f3 ccat crev f4 ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f7 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f5 cCONS cFST f5 cNIL f4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f4 b2 cF cFace ccat b3 f4 cF ccat cCONS cFST f6 cNIL ccat cbetwn b2 cFST f6 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn b2 cFST f5 cFST f6 cCONS cFST f6 cNIL cFST b1 c, cFace ccore f0 f3 cF cFace ccore f0 f7 cF c, ccore f0 f1 f8 ccore f0 f1 cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f3 ccat crev f4 ccat cCONS cFST f5 cNIL ccat cbetwn b0 cFST f5 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f7 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f5 cCONS cFST f5 cNIL f4 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f4 b2 cF cFace ccat b3 f4 cF ccat cCONS cFST f6 cNIL ccat cbetwn b2 cFST f6 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn b2 cFST f5 cFST f6 cCONS cFST f6 cNIL cFST b1 c, cFace ccore f0 f3 cF cFace ccore f0 f7 cF c, ccore f0 f1 f8 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') /\ ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= cfind_face f0 f4 f18 c==> c= cbetwn f18 f4 f7 f14 c==> c= cFST f13 f19 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f19 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f19 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f18 f4 f8 f20 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= ccat crev f15 f16 f21 c==> c= ccat f17 f14 f22 c==> c= ccore f0 f21 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c/\ c= ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f19 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c~ cfinal_list f1 f2 c~ cfinal_list f1 f2
- (new1 = (flatten ((map nd) new2))) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 cflatten cmap f1 f2 c= c= cl'z f3 f4 f5 f6 f7 c= cl'z f3 f4 f5 f6 f7
+ |- ((\newVs. (!ram1. (!ram2. (!f. (((((split_face f) ram1) ram2) newVs) = ((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((APPEND (REVERSE newVs)) f1)) F) , ((Face ((APPEND f2) newVs)) F))))) ((APPEND ((CONS ram2) NIL)) ((APPEND (((betwn vs) ram2) ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1) NIL)) ((APPEND (((betwn vs) ram1) ram2)) ((CONS ram2) NIL))))))) (FST f))))))) newVs)
T * / ! ! ! c= csplit_face b3 b1 b2 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace cAPPEND cREVERSE b0 b5 cF cFace cAPPEND b6 b0 cF cAPPEND cCONS b2 cNIL cAPPEND cbetwn b4 b2 b1 cCONS b1 cNIL cAPPEND cCONS b1 cNIL cAPPEND cbetwn b4 b1 b2 cCONS b2 cNIL cFST b3 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))), (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))), (new1 = (flatten ((map nd) new2))), (new2 = (((betwn f) y) ram2')), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), ((((marked_list L) N) r) x) |- ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL c==> c= f16 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL c==> c= f17 cflatten cmap f2 f18 c==> c= f18 cbetwn f14 f5 f6 c==> c= ccat f16 f18 f19 c==> c= ccat crev f17 f15 f20 c==> c= f21 ccat cCONS cFST f5 cNIL ccat cbetwn f22 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f23 ccat cCONS cFST f7 cNIL ccat cbetwn f22 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f24 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f22 cFST f11 c==> c= ccore f0 f20 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f0 f19 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24 c==> cmarked_list f0 f10 f1 f8 c/\ c= ccat crev f24 f21 ccat crev f24 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccat f23 f24 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f24
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) ==> ((((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f3 cnext_el f1 f4 c==> c= f5 cnext_el f1 f6 c==> c= f4 cl'y f0 f1 f7 c==> c= f8 cl'z f0 f9 f1 f7 c==> c= f6 cprev_el f1 f8 c==> c= f10 c, f11 f12 c==> c= f13 cfind_face f0 f4 c==> c= f14 ccat cCONS cFST f4 cNIL ccat cbetwn f15 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= f16 ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= f17 cmap part cFST cbetwn f13 f4 f8 c==> c= f11 ccore f0 f1 c==> c= f15 cFST f10 c==> cmarked_list f0 f9 f1 f7 c==> c= f18 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b2 b3 ccat b4 b1 ccat cCONS f5 cNIL ccat cbetwn f1 f5 f4 cCONS f4 cNIL ccat cCONS f3 cNIL ccat cbetwn f1 f3 f6 cCONS f6 cNIL cflatten cmap b0 b1 cbetwn f13 f4 f5 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c, f19 f20 c==> c/\ c= ccore f0 f19 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 c= c, cFace ccat crev f17 f14 cF cFace ccat f16 f17 cF c, cFace ccore f0 f19 cF cFace ccore f0 f20 cF
+ (newVs = ((map FST) (((betwn f) y) z))) |- (((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))) = ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))))))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= c==> c= cmap part cFST cbetwn f1 f2 f3 f0 c==> c= ccore f4 f5 f6 c==> c= c, f6 f7 f8 c==> c= cFST f8 f9 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f10 cCONS cFST f10 cNIL f11 c==> c= ccat cCONS cFST f10 cNIL ccat cbetwn f9 cFST f10 cFST f2 cCONS cFST f2 cNIL f12 c==> c= cnext_el f5 f2 f13 c==> c= cnext_el f5 f10 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f4 f15 c==> c= / cmap / cPOWER * part cn_list f4 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f1 f2 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f5 f13 f10 cCONS f10 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f5 f14 f2 cCONS f2 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f4 f21 ccat crev f0 ccat cCONS cFST f2 cNIL ccat cbetwn f6 cFST f2 cFST f10 cCONS cFST f10 cNIL c==> c= ccore f4 f22 ccat ccat cCONS cFST f10 cNIL ccat cbetwn f6 cFST f10 cFST f2 cCONS cFST f2 cNIL f0 chold c/\ c= ccat crev f0 f11 ccat crev f0 ccat cCONS cFST f2 cNIL ccat cbetwn f6 cFST f2 cFST f10 cCONS cFST f10 cNIL c= ccat f12 f0 ccat ccat cCONS cFST f10 cNIL ccat cbetwn f6 cFST f10 cFST f2 cCONS cFST f2 cNIL f0 c==> c= ccore f4 f5 f6 c==> c= c, f6 f7 f8 c==> c= cFST f8 f9 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f10 cCONS cFST f10 cNIL f11 c==> c= ccat cCONS cFST f10 cNIL ccat cbetwn f9 cFST f10 cFST f2 cCONS cFST f2 cNIL f12 c==> c= cnext_el f5 f2 f13 c==> c= cnext_el f5 f10 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f4 f15 c==> c= / cmap / cPOWER * part cn_list f4 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f1 f2 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f5 f13 f10 cCONS f10 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f5 f14 f2 cCONS f2 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f4 f21 ccat crev f0 ccat cCONS cFST f2 cNIL ccat cbetwn f6 cFST f2 cFST f10 cCONS cFST f10 cNIL c==> c= ccore f4 f22 ccat ccat cCONS cFST f10 cNIL ccat cbetwn f6 cFST f10 cFST f2 cCONS cFST f2 cNIL f0 chold c/\ c= ccat crev f0 f11 ccat crev f0 ccat cCONS cFST f2 cNIL ccat cbetwn f6 cFST f2 cFST f10 cCONS cFST f10 cNIL c= ccat f12 f0 ccat ccat cCONS cFST f10 cNIL ccat cbetwn f6 cFST f10 cFST f2 cCONS cFST f2 cNIL f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), ((((marked_list L) N) r) x) |- ((LET (\z. (LET_END ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> cmarked_list f0 f4 f1 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b4 c, b5 b6 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b5 ccat crev b3 ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST b1 cCONS cFST b1 cNIL c= ccore f0 b6 ccat ccat cCONS cFST b1 cNIL ccat cbetwn b7 cFST b1 cFST f2 cCONS cFST f2 cNIL b3 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b3 b9 cF cFace ccat b10 b3 cF ccat cCONS cFST b1 cNIL ccat cbetwn b9 cFST b1 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b9 cFST f2 cFST b1 cCONS cFST b1 cNIL cFST b8 c, cFace ccore f0 b5 cF cFace ccore f0 b6 cF c, ccore f0 f1 f5 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b9 b10 ccat b11 b8 ccat cCONS b5 cNIL ccat cbetwn f1 b5 f2 cCONS f2 cNIL ccat cCONS b4 cNIL ccat cbetwn f1 b4 b1 cCONS b1 cNIL cflatten cmap b7 b8 cbetwn b2 f2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el f1 b1 cnext_el f1 f2 cmap part cFST cbetwn b2 f2 b0 cfind_face f0 f2 cprev_el f1 b0 cl'z f0 f4 f1 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) /\ ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f7 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c= cFST f11 f9
+ |- ((z = ((((l'z L) N) r) x)) = ((\z. (z = ((((l'z L) N) r) x))) z))
T c= c= f0 cl'z f1 f2 f3 f4 * / c= b0 cl'z f1 f2 f3 f4 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((vs' = (FST fvs)) /\ (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c/\ c= f14 cFST f10 c==> c/\ c= ccore f0 f7 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f13 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f13 b1 cF cFace ccat b2 f13 cF ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b0 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST f10 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((hold (vs' = vs)) ==> (vs' = vs)) = (vs' = vs))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f22 c==> c= ccore f0 f19 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c= c==> chold c= f21 f11 c= f21 f11 c= f21 f11
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat (rev new1)) f1'') = f1) /\ ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat crev f15 f16 f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat crev f15 f16 f17 c==> c= ccat f18 f14 f21 c==> c= ccore f0 f17 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c= cFST f13 f11
+ ((A = T) ==> (((A ==> B) /\ A) ==> B)), ((A = F) ==> (((A ==> B) /\ A) ==> B)) |- (((A ==> B) /\ A) ==> B)
T c==> c==> c= f0 cT c==> c/\ c==> f0 f1 f0 f1 c==> c==> c= f0 cF c==> c/\ c==> f0 f1 f0 f1 c==> c/\ c==> f0 f1 f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f15 ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c==> c= f16 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c==> c/\ c= ccore f0 f7 ccat crev f16 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f16 c= cLET / cLET_END c, cFace ccat crev f16 f13 cF cFace ccat b0 f16 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= cprev_el f3 f4 f5 c= cprev_el f3 f4 f5
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') = (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2'))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= ccat cCONS cFST f4 cNIL ccat cbetwn f5 cFST f4 cFST f3 cCONS cFST f3 cNIL f6 c= ccat cCONS cFST f4 cNIL ccat cbetwn f5 cFST f4 cFST f3 cCONS cFST f3 cNIL f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= ccore f0 f1 f8 c==> cmarked_list f0 f6 f1 f4 c==> c= cmap part cFST cbetwn f7 f5 f2 f9 c==> c= ccore f0 f1 f8 c==> c= c, f8 f10 f11 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f7 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f9 ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL f9 chold c= cFST f11 f8
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= cgood_list_nodes f6 cgood_list_nodes f6
+ (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') |- ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') /\ ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r))))))))
T c==> c= ccat cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL f3 c/\ c= ccat cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL f3 c==> c= ccat crev f4 f5 f6 c==> c= ccat f3 f7 f8 c==> c= ccore f9 f6 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn ccore f9 f1 cFST f2 cFST f11 cCONS cFST f11 cNIL c==> c= ccore f9 f8 ccat ccat cCONS cFST f11 cNIL ccat cbetwn ccore f9 f1 cFST f11 cFST f2 cCONS cFST f2 cNIL f10 chold c= cFST c, ccore f9 f1 f12 ccore f9 f1
- (new1 = (flatten ((map nd) new2))) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 cflatten cmap f1 f2 c= c~ cfinal_list f3 f4 c~ cfinal_list f3 f4
+ |- (((!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) ==> ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)) = ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r))
T c= c==> ! ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1 * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') /\ ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL f12 c==> c= cmap part cFST cbetwn f10 f5 f2 f13 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL f12 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f10 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f13 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f13 chold c/\ c= ccat crev f13 f12 ccat crev f13 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f13 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f13
+ |- (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))
T c==> c= cbetwn f0 f1 f2 f3 c==> c= cflatten cmap f4 f3 f5 c==> c= ccat cCONS f6 cNIL ccat cbetwn f7 f6 f8 cCONS f8 cNIL f9 c==> c= ccat cCONS f2 cNIL ccat cbetwn f7 f2 f1 cCONS f1 cNIL f10 c==> c= ccat crev f5 f9 f11 c==> c= ccat f10 f3 f12 c==> c= ccore f13 f11 ccat crev f14 ccat cCONS cFST f1 cNIL ccat cbetwn ccore f13 f7 cFST f1 cFST f8 cCONS cFST f8 cNIL c==> c= ccore f13 f12 ccat ccat cCONS cFST f8 cNIL ccat cbetwn ccore f13 f7 cFST f8 cFST f1 cCONS cFST f1 cNIL f14 chold c= cFST c, ccore f13 f7 f15 ccore f13 f7
+ |- (T ==> (?fvs. (fvs = (vs , b))))
T c==> cT c? / c= b0 c, f0 f1
+ ((f1 = (FST ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))) /\ (f2 = (SND ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))) |- ((\f1. (?f2. ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))))) f1)
T c==> c/\ c= f0 cFST cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 c= f6 cSND cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL cflatten cmap b3 b4 cbetwn f4 f2 b1 / cmap / cPOWER * part cn_list f5 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 * / c? / c= c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b8 b6 ccat cCONS b3 cNIL ccat cbetwn f1 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f1 b2 f3 cCONS f3 cNIL cflatten cmap b5 b6 cbetwn f4 f2 b3 / cmap / cPOWER * part cn_list f5 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f5 cnext_el f1 f3 cnext_el f1 f2 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (new2 = (((betwn f) y) ram2')), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((\new1. (new1 = (flatten ((map nd) new2)))) new1) ==> ((((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = T)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 cbetwn f14 f5 f6 c==> c= f16 ccat cCONS cFST f5 cNIL ccat cbetwn f17 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f18 ccat cCONS cFST f7 cNIL ccat cbetwn f17 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f19 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f17 cFST f11 c==> cmarked_list f0 f10 f1 f8 c= c==> * / c= b0 cflatten cmap f2 f15 f20 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b0 b1 ccat b2 f15 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL cflatten cmap f2 f15 c, f21 f22 c==> c/\ c= ccore f0 f21 ccat crev f19 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f22 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f19 c= c, cFace ccat crev f19 f16 cF cFace ccat f18 f19 cF c, cFace ccore f0 f21 cF cFace ccore f0 f22 cF cT
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((((marked_list L) N) r) x) |- ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> cmarked_list f0 f5 f1 f3 cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev b1 ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b4 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f6 cNIL ccat cbetwn b7 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b6 c, cFace ccore f0 b3 cF cFace ccore f0 b4 cF c, ccore f0 f1 f7 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f1 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f1 b2 f6 cCONS f6 cNIL cflatten cmap b5 b6 cbetwn b0 f2 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cmap part cFST cbetwn b0 f2 f4 cfind_face f0 f2
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cmap part cFST cbetwn f4 f3 f5 f6 c= cmap part cFST cbetwn f4 f3 f5 f6
- (vs' = (FST fvs)) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 cFST f1 c= c= cprev_el f2 f3 f4 c= cprev_el f2 f3 f4
- (ram2' = ((next_el r) z')) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') = (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2'))
T c==> c= f0 cnext_el f1 f2 c= c= ccat cCONS cFST f2 cNIL ccat cbetwn f3 cFST f2 cFST f4 cCONS cFST f4 cNIL f5 c= ccat cCONS cFST f2 cNIL ccat cbetwn f3 cFST f2 cFST f4 cCONS cFST f4 cNIL f5
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((flatten ((map nd) new2)) = new1) /\ ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= cfind_face f0 f4 f15 c==> c= cbetwn f15 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f15 f4 f8 f16 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c/\ c= cflatten cmap f3 f13 f14 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= ccat crev f14 f17 f19 c==> c= ccat f18 f13 f20 c==> c= ccore f0 f19 ccat crev f16 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f16 chold c= cFST f12 ccore f0 f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> cmarked_list f0 f5 f1 f3 cLET * part cGABS / ! ! cGEQ * b0 c, b1 b2 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b1 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b2 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b3 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b5 cF cFace ccat b6 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b4 c, cFace ccore f0 b1 cF cFace ccore f0 b2 cF c, ccore f0 f1 f11 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2
+ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) |- ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) /\ (hold ((FST (((core L) r) , b)) = ((core L) r))))
T c==> c= ccore f0 f1 ccat ccat cCONS cFST f2 cNIL ccat cbetwn ccore f0 f3 cFST f2 cFST f4 cCONS cFST f4 cNIL f5 c/\ c= ccore f0 f1 ccat ccat cCONS cFST f2 cNIL ccat cbetwn ccore f0 f3 cFST f2 cFST f4 cCONS cFST f4 cNIL f5 chold c= cFST c, ccore f0 f3 f6 ccore f0 f3
+ |- (((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z))) = ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) f))
T c= cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b2 ccat crev b0 ccat cCONS cFST f1 cNIL ccat cbetwn b4 cFST f1 cFST f2 cCONS cFST f2 cNIL c= ccore f0 b3 ccat ccat cCONS cFST f2 cNIL ccat cbetwn b4 cFST f2 cFST f1 cCONS cFST f1 cNIL b0 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b0 b6 cF cFace ccat b7 b0 cF ccat cCONS cFST f2 cNIL ccat cbetwn b6 cFST f2 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b6 cFST f1 cFST f2 cCONS cFST f2 cNIL cFST b5 c, cFace ccore f0 b2 cF cFace ccore f0 b3 cF c, ccore f0 f3 f4 ccore f0 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b6 b7 ccat b8 b5 ccat cCONS b2 cNIL ccat cbetwn f3 b2 f1 cCONS f1 cNIL ccat cCONS b1 cNIL ccat cbetwn f3 b1 f2 cCONS f2 cNIL cflatten cmap b4 b5 cbetwn f5 f1 b2 / cmap / cPOWER * part cn_list f0 b5 b4 cupt cNUMERAL cBIT1 c_0 * b3 cFST b4 / csizel cfilter / c= b4 b3 cflatten f0 cnext_el f3 f2 cnext_el f3 f1 cmap part cFST cbetwn f5 f1 f6 cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev b1 ccat cCONS cFST f1 cNIL ccat cbetwn b5 cFST f1 cFST f2 cCONS cFST f2 cNIL c= ccore f0 b4 ccat ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f1 cCONS cFST f1 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b7 cFST f1 cFST f2 cCONS cFST f2 cNIL cFST b6 c, cFace ccore f0 b3 cF cFace ccore f0 b4 cF c, ccore f0 f3 f4 ccore f0 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f3 b3 f1 cCONS f1 cNIL ccat cCONS b2 cNIL ccat cbetwn f3 b2 f2 cCONS f2 cNIL cflatten cmap b5 b6 cbetwn b0 f1 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f3 f2 cnext_el f3 f1 cmap part cFST cbetwn b0 f1 f6 f5
+ |- (((?z'. (z' = ((prev_el r) z))) ==> ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z))) = ((LET (\z'. (LET_END ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))))) ((prev_el r) z)))
T c= c==> c? / c= b0 cprev_el f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f2 b4 ccat crev b2 ccat cCONS cFST f3 cNIL ccat cbetwn b6 cFST f3 cFST b0 cCONS cFST b0 cNIL c= ccore f2 b5 ccat ccat cCONS cFST b0 cNIL ccat cbetwn b6 cFST b0 cFST f3 cCONS cFST f3 cNIL b2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b2 b8 cF cFace ccat b9 b2 cF ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn b8 cFST f3 cFST b0 cCONS cFST b0 cNIL cFST b7 c, cFace ccore f2 b4 cF cFace ccore f2 b5 cF c, ccore f2 f0 f4 ccore f2 f0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b8 b9 ccat b10 b7 ccat cCONS b4 cNIL ccat cbetwn f0 b4 f3 cCONS f3 cNIL ccat cCONS b3 cNIL ccat cbetwn f0 b3 b0 cCONS b0 cNIL cflatten cmap b6 b7 cbetwn b1 f3 b4 / cmap / cPOWER * part cn_list f2 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f2 cnext_el f0 b0 cnext_el f0 f3 cmap part cFST cbetwn b1 f3 f1 cfind_face f2 f3 cprev_el f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b3 c, b4 b5 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f2 b4 ccat crev b2 ccat cCONS cFST f3 cNIL ccat cbetwn b6 cFST f3 cFST b0 cCONS cFST b0 cNIL c= ccore f2 b5 ccat ccat cCONS cFST b0 cNIL ccat cbetwn b6 cFST b0 cFST f3 cCONS cFST f3 cNIL b2 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b2 b8 cF cFace ccat b9 b2 cF ccat cCONS cFST b0 cNIL ccat cbetwn b8 cFST b0 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn b8 cFST f3 cFST b0 cCONS cFST b0 cNIL cFST b7 c, cFace ccore f2 b4 cF cFace ccore f2 b5 cF c, ccore f2 f0 f4 ccore f2 f0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b8 b9 ccat b10 b7 ccat cCONS b4 cNIL ccat cbetwn f0 b4 f3 cCONS f3 cNIL ccat cCONS b3 cNIL ccat cbetwn f0 b3 b0 cCONS b0 cNIL cflatten cmap b6 b7 cbetwn b1 f3 b4 / cmap / cPOWER * part cn_list f2 b7 b6 cupt cNUMERAL cBIT1 c_0 * b5 cFST b6 / csizel cfilter / c= b6 b5 cflatten f2 cnext_el f0 b0 cnext_el f0 f3 cmap part cFST cbetwn b1 f3 f1 cfind_face f2 f3 cprev_el f0 f1
+ |- ((\a. (!b. (((x , y) = (a , b)) = ((x = a) /\ (y = b))))) a)
T * / ! c= c= c, f0 f1 c, b0 b1 c/\ c= f0 b0 c= f1 b1 f2
+ |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST (((core L) r) , b))) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r)))))))))))))))))
T c==> c= ccat cCONS cFST f0 cNIL ccat cbetwn cFST c, ccore f1 f2 f3 cFST f0 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f0 cNIL ccat cbetwn cFST c, ccore f1 f2 f3 cFST f0 cFST f4 cCONS cFST f4 cNIL c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f1 f2 f3 cFST f4 cFST f0 cCONS cFST f0 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST c, ccore f1 f2 f3 cFST f4 cFST f0 cCONS cFST f0 cNIL c==> c= cnext_el f2 f0 f5 c==> c= cnext_el f2 f4 f6 c==> c= / csizel cfilter / c= b1 b0 cflatten f1 f7 c==> c= / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f7 cFST b0 f8 c==> c= cbetwn f9 f0 f6 f10 c==> c= cflatten cmap f8 f10 f11 c==> c= ccat cCONS f5 cNIL ccat cbetwn f2 f5 f4 cCONS f4 cNIL f12 c==> c= ccat cCONS f6 cNIL ccat cbetwn f2 f6 f0 cCONS f0 cNIL f13 c==> c= ccat crev f11 f12 f14 c==> c= ccat f13 f10 f15 c==> c= ccore f1 f14 ccat crev f16 ccat cCONS cFST f0 cNIL ccat cbetwn ccore f1 f2 cFST f0 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f1 f15 ccat ccat cCONS cFST f4 cNIL ccat cbetwn ccore f1 f2 cFST f4 cFST f0 cCONS cFST f0 cNIL f16 chold c= cFST c, ccore f1 f2 f3 ccore f1 f2
+ |- ((\f2. ((GEQ ((GABS (\_10484458. (!f1. (!f2. ((GEQ (_10484458 (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)))))))) (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))) f2)
T * / cGEQ cGABS / ! ! cGEQ * b1 c, b2 b3 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b2 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 b3 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b5 cF cFace ccat b6 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b5 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b4 c, cFace ccore f0 b2 cF cFace ccore f0 b3 cF c, ccore f0 f4 f5 ccore f0 f4 c, f6 b0 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f6 ccat crev f1 ccat cCONS cFST f2 cNIL ccat cbetwn b1 cFST f2 cFST f3 cCONS cFST f3 cNIL c= ccore f0 b0 ccat ccat cCONS cFST f3 cNIL ccat cbetwn b1 cFST f3 cFST f2 cCONS cFST f2 cNIL f1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f1 b3 cF cFace ccat b4 f1 cF ccat cCONS cFST f3 cNIL ccat cbetwn b3 cFST f3 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b3 cFST f2 cFST f3 cCONS cFST f3 cNIL cFST b2 c, cFace ccore f0 f6 cF cFace ccore f0 b0 cF c, ccore f0 f4 f5 ccore f0 f4 f7
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) y) = f), ((FST fvs) = vs'), (((map FST) (((betwn f) y) z)) = newVs), ((((marked_list L) N) r) x) |- ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f5 f7 c==> c= cFST f8 f9 c==> c= cmap part cFST cbetwn f7 f5 f2 f10 c==> cmarked_list f0 f6 f1 f4 c==> c= ccore f0 f1 f11 c==> c= c, f11 f12 f8 c==> c= cFST f8 f9 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f13 c==> c= cnext_el f1 f3 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f7 f5 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f5 cCONS f5 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= f9 f11
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cl'y f4 f2 f5 f3 c= cl'y f4 f2 f5 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((?nd. (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))) ==> ((((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f3 cnext_el f1 f4 c==> c= f5 cnext_el f1 f6 c==> c= f4 cl'y f0 f1 f7 c==> c= f8 cl'z f0 f9 f1 f7 c==> c= f6 cprev_el f1 f8 c==> c= f10 c, f11 f12 c==> c= f13 cfind_face f0 f4 c==> c= f14 ccat cCONS cFST f4 cNIL ccat cbetwn f15 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= f16 ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= f17 cmap part cFST cbetwn f13 f4 f8 c==> c= f11 ccore f0 f1 c==> c= f15 cFST f10 c==> cmarked_list f0 f9 f1 f7 c==> c? / c= b0 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * f2 cFST b1 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b2 b3 ccat b4 b1 ccat cCONS f5 cNIL ccat cbetwn f1 f5 f4 cCONS f4 cNIL ccat cCONS f3 cNIL ccat cbetwn f1 f3 f6 cCONS f6 cNIL cflatten cmap b0 b1 cbetwn f13 f4 f5 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c, f18 f19 c==> c/\ c= ccore f0 f18 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f19 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 c= c, cFace ccat crev f17 f14 cF cFace ccat f16 f17 cF c, cFace ccore f0 f18 cF cFace ccore f0 f19 cF
+ |- (((?ram2'. (ram2' = ((next_el r) z'))) ==> ((((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = ((((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c= c==> c? / c= b0 cnext_el f0 f1 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b4 b5 ccat b6 b3 ccat cCONS b0 cNIL ccat cbetwn f0 b0 f2 cCONS f2 cNIL ccat cCONS f3 cNIL ccat cbetwn f0 f3 f1 cCONS f1 cNIL cflatten cmap b2 b3 cbetwn f4 f2 b0 / cmap / cPOWER * part cn_list f5 b3 b2 cupt cNUMERAL cBIT1 c_0 * b1 cFST b2 / csizel cfilter / c= b2 b1 cflatten f5 cnext_el f0 f1 c, f6 f7 c==> c/\ c= ccore f5 f6 ccat crev f8 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f1 cCONS cFST f1 cNIL c= ccore f5 f7 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f9 cFST f1 cFST f2 cCONS cFST f2 cNIL f8 c= c, cFace ccat crev f8 f10 cF cFace ccat f11 f8 cF c, cFace ccore f5 f6 cF cFace ccore f5 f7 cF c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b4 b5 ccat b6 b3 ccat cCONS b0 cNIL ccat cbetwn f0 b0 f2 cCONS f2 cNIL ccat cCONS f3 cNIL ccat cbetwn f0 f3 f1 cCONS f1 cNIL cflatten cmap b2 b3 cbetwn f4 f2 b0 / cmap / cPOWER * part cn_list f5 b3 b2 cupt cNUMERAL cBIT1 c_0 * b1 cFST b2 / csizel cfilter / c= b2 b1 cflatten f5 cnext_el f0 f1 c, f6 f7 c==> c/\ c= ccore f5 f6 ccat crev f8 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f1 cCONS cFST f1 cNIL c= ccore f5 f7 ccat ccat cCONS cFST f1 cNIL ccat cbetwn f9 cFST f1 cFST f2 cCONS cFST f2 cNIL f8 c= c, cFace ccat crev f8 f10 cF cFace ccat f11 f8 cF c, cFace ccore f5 f6 cF cFace ccore f5 f7 cF
+ (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz)
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= / csizel cfilter / c= b1 b0 cflatten f1 f0
- (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cmap part cFST cbetwn f4 f5 f6 f7 c= cmap part cFST cbetwn f4 f5 f6 f7
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= cis_restricted chypermap_of_list f1 cis_restricted chypermap_of_list f1
+ |- ((nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) ==> (?nd. (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c? / c= b0 / cmap / cPOWER * part cn_list f1 b2 b1 cupt cNUMERAL cBIT1 c_0 * f2 cFST b1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cmap part cFST cbetwn f10 f5 f2 f12 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= cnext_el f1 f5 f13 c==> c= cnext_el f1 f3 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f10 f5 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f5 cCONS f5 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f12 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f12 chold c= f11 f7
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) /\ (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cFST f13 f15 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f15 cFST f4 cFST f6 cCONS cFST f6 cNIL f16 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f17 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= cbetwn f14 f4 f7 f18 c==> c= cflatten cmap f3 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 chold c/\ c= ccat crev f17 f16 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) /\ ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, ccore f0 f1 f7 f8 c==> c= cfind_face f0 f5 f9 c==> c= cFST f8 cFST f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f9 f5 f2 f10 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f6 f1 f4 c/\ c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f9 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= cFST f8 ccore f0 f1
+ |- ((? P) ==> (P (GABS P)))
T c==> c? f0 * f0 cGABS f0
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') = (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= ccat cCONS f4 cNIL ccat cbetwn f2 f4 f5 cCONS f5 cNIL f6 c= ccat cCONS f4 cNIL ccat cbetwn f2 f4 f5 cCONS f5 cNIL f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((FST fvs) = vs'), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold (vs' = vs)))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cFST f7 f8 c==> cmarked_list f0 f6 f1 f4 c==> c= cfind_face f0 f5 f9 c==> c= cmap part cFST cbetwn f9 f5 f2 f10 c==> c= ccore f0 f1 f11 c==> c= c, f11 f12 f7 c==> c= cFST f7 f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f13 c==> c= cnext_el f1 f3 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f9 f5 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f5 cCONS f5 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= f8 f11
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (f = ((find_face L) y)), ((((marked_list L) N) r) x) |- ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 cfind_face f0 f2 c==> cmarked_list f0 f5 f1 f3 cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev b1 ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 b4 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b5 cFST f6 cFST f2 cCONS cFST f2 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f6 cNIL ccat cbetwn b7 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b6 c, cFace ccore f0 b3 cF cFace ccore f0 b4 cF c, ccore f0 f1 f8 ccore f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f1 b3 f2 cCONS f2 cNIL ccat cCONS b2 cNIL ccat cbetwn f1 b2 f6 cCONS f6 cNIL cflatten cmap b5 b6 cbetwn b0 f2 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 cmap part cFST cbetwn b0 f2 f4 cfind_face f0 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) ==> ((((map FST) (((betwn f) y) z)) = newVs) ==> ((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> cmarked_list f0 f6 f1 f4 c==> c= cfind_face f0 f5 f7 c==> c= cmap part cFST cbetwn f7 f5 f2 f8 c==> c= ccore f0 f1 f9 c==> c= c, f9 f10 f11 c==> c= cFST f11 f12 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f13 c==> c= cnext_el f1 f3 f14 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f7 f5 f14 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f3 cCONS f3 cNIL f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f5 cCONS f5 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 chold c/\ c= ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat crev f8 ccat cCONS cFST f5 cNIL ccat cbetwn f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f12 cFST f3 cFST f5 cCONS cFST f5 cNIL f8 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f5 cCONS cFST f5 cNIL f8
+ |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST (((core L) r) , b)) = ((core L) r))))))))))))
T c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f1 cFST b0 f2 c==> c= cbetwn f3 f4 f5 f6 c==> c= cflatten cmap f2 f6 f7 c==> c= ccat cCONS f8 cNIL ccat cbetwn f9 f8 f10 cCONS f10 cNIL f11 c==> c= ccat cCONS f5 cNIL ccat cbetwn f9 f5 f4 cCONS f4 cNIL f12 c==> c= ccat crev f7 f11 f13 c==> c= ccat f12 f6 f14 c==> c= ccore f0 f13 ccat crev f15 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f9 cFST f4 cFST f10 cCONS cFST f10 cNIL c==> c= ccore f0 f14 ccat ccat cCONS cFST f10 cNIL ccat cbetwn ccore f0 f9 cFST f10 cFST f4 cCONS cFST f4 cNIL f15 chold c= cFST c, ccore f0 f9 f16 ccore f0 f9
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= f7 c, f8 f9 c==> c= f10 cfind_face f0 f2 c==> c= f11 ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f13 ccat cCONS cFST f6 cNIL ccat cbetwn f12 cFST f6 cFST f2 cCONS cFST f2 cNIL c==> c= f14 cmap part cFST cbetwn f10 f2 f4 c==> c= f8 ccore f0 f1 c==> c= f12 cFST f7 c==> cmarked_list f0 f5 f1 f3 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f10 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c, f15 f16 c==> c/\ c= ccore f0 f15 ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f8 cFST f6 cFST f2 cCONS cFST f2 cNIL f14 c= c, cFace ccat crev f14 f11 cF cFace ccat f13 f14 cF c, cFace ccore f0 f15 cF cFace ccore f0 f16 cF
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cl'z f4 f5 f2 f6 f7 c= cl'z f4 f5 f2 f6 f7
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cprev_el f4 f5 f1 c= cprev_el f4 f5 f1
+ |- (((?f. (f = ((find_face L) y))) ==> ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y))) = ((LET (\f. (LET_END ((LET (\newVs. (LET_END ((LET (GABS (\f. (!f1. (!f2. ((GEQ (f (f1 , f2))) (LET_END ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r))))))))) ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)))))) ((map FST) (((betwn f) y) z)))))) ((find_face L) y)))
T c= c==> c? / c= b0 cfind_face f0 f1 cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev b1 ccat cCONS cFST f1 cNIL ccat cbetwn b5 cFST f1 cFST f2 cCONS cFST f2 cNIL c= ccore f0 b4 ccat ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f1 cCONS cFST f1 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b7 cFST f1 cFST f2 cCONS cFST f2 cNIL cFST b6 c, cFace ccore f0 b3 cF cFace ccore f0 b4 cF c, ccore f0 f3 f4 ccore f0 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f3 b3 f1 cCONS f1 cNIL ccat cCONS b2 cNIL ccat cbetwn f3 b2 f2 cCONS f2 cNIL cflatten cmap b5 b6 cbetwn b0 f1 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f3 f2 cnext_el f3 f1 cmap part cFST cbetwn b0 f1 f5 cfind_face f0 f1 cLET / cLET_END cLET / cLET_END cLET * part cGABS / ! ! cGEQ * b2 c, b3 b4 cLET_END cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 b3 ccat crev b1 ccat cCONS cFST f1 cNIL ccat cbetwn b5 cFST f1 cFST f2 cCONS cFST f2 cNIL c= ccore f0 b4 ccat ccat cCONS cFST f2 cNIL ccat cbetwn b5 cFST f2 cFST f1 cCONS cFST f1 cNIL b1 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev b1 b7 cF cFace ccat b8 b1 cF ccat cCONS cFST f2 cNIL ccat cbetwn b7 cFST f2 cFST f1 cCONS cFST f1 cNIL ccat cCONS cFST f1 cNIL ccat cbetwn b7 cFST f1 cFST f2 cCONS cFST f2 cNIL cFST b6 c, cFace ccore f0 b3 cF cFace ccore f0 b4 cF c, ccore f0 f3 f4 ccore f0 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b7 b8 ccat b9 b6 ccat cCONS b3 cNIL ccat cbetwn f3 b3 f1 cCONS f1 cNIL ccat cCONS b2 cNIL ccat cbetwn f3 b2 f2 cCONS f2 cNIL cflatten cmap b5 b6 cbetwn b0 f1 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f3 f2 cnext_el f3 f1 cmap part cFST cbetwn b0 f1 f5 cfind_face f0 f1
- (new1 = (flatten ((map nd) new2))) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') = (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2'))
T c==> c= f0 cflatten cmap f1 f2 c= c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL f6 c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f3 cl'y f0 f1 f4 c==> c= f5 cl'z f0 f6 f1 f4 c==> c= f7 cprev_el f1 f5 c==> c= f8 c, f9 f10 c==> c= f11 cfind_face f0 f3 c==> c= f12 ccat cCONS cFST f3 cNIL ccat cbetwn f13 cFST f3 cFST f7 cCONS cFST f7 cNIL c==> c= f14 ccat cCONS cFST f7 cNIL ccat cbetwn f13 cFST f7 cFST f3 cCONS cFST f3 cNIL c==> c= f15 cmap part cFST cbetwn f11 f3 f5 c==> c= f9 ccore f0 f1 c==> c= f13 cFST f8 c==> cmarked_list f0 f6 f1 f4 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b4 b5 ccat b6 b3 ccat cCONS b0 cNIL ccat cbetwn f1 b0 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f7 cCONS f7 cNIL cflatten cmap b2 b3 cbetwn f11 f3 b0 / cmap / cPOWER * part cn_list f0 b3 b2 cupt cNUMERAL cBIT1 c_0 * b1 cFST b2 / csizel cfilter / c= b2 b1 cflatten f0 cnext_el f1 f7 c, f16 f17 c==> c/\ c= ccore f0 f16 ccat crev f15 ccat cCONS cFST f3 cNIL ccat cbetwn f9 cFST f3 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f17 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f9 cFST f7 cFST f3 cCONS cFST f3 cNIL f15 c= c, cFace ccat crev f15 f12 cF cFace ccat f14 f15 cF c, cFace ccore f0 f16 cF cFace ccore f0 f17 cF
- (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cprev_el f2 f4 f3 c= cprev_el f2 f4 f3
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f3 f4 c==> c= cnext_el f1 f5 f6 c==> c= cprev_el f1 f7 f5 c==> c= cl'y f0 f1 f8 f3 c==> c= cl'z f0 f9 f1 f8 f7 c==> c= c, f10 f11 f12 c==> c= cfind_face f0 f3 f13 c==> c= cFST f12 f14 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL f15 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f13 f3 f7 f16 c==> c= ccore f0 f1 f10 c==> cmarked_list f0 f9 f1 f8 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f17 c==> c= cbetwn f13 f3 f6 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f4 cNIL ccat cbetwn f1 f4 f5 cCONS f5 cNIL f20 c==> c= ccat cCONS f6 cNIL ccat cbetwn f1 f6 f3 cCONS f3 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 chold c/\ c= ccat crev f16 f15 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccat ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))), (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((new2 = (((betwn f) y) ram2')) ==> ((((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2')) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f3 cFST b0 c==> c= f3 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= f4 cnext_el f1 f5 c==> c= f6 cnext_el f1 f7 c==> c= f5 cl'y f0 f1 f8 c==> c= f9 cl'z f0 f10 f1 f8 c==> c= f7 cprev_el f1 f9 c==> c= f11 c, f12 f13 c==> c= f14 cfind_face f0 f5 c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f16 cFST f5 cFST f7 cCONS cFST f7 cNIL c==> c= f17 ccat cCONS cFST f7 cNIL ccat cbetwn f16 cFST f7 cFST f5 cCONS cFST f5 cNIL c==> c= f18 cmap part cFST cbetwn f14 f5 f9 c==> c= f12 ccore f0 f1 c==> c= f16 cFST f11 c==> cmarked_list f0 f10 f1 f8 c==> c= f19 cbetwn f14 f5 f6 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b1 b2 ccat b3 b0 ccat cCONS f6 cNIL ccat cbetwn f1 f6 f5 cCONS f5 cNIL ccat cCONS f4 cNIL ccat cbetwn f1 f4 f7 cCONS f7 cNIL cflatten cmap f2 b0 cbetwn f14 f5 f6 c, f20 f21 c==> c/\ c= ccore f0 f20 ccat crev f18 ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f7 cCONS cFST f7 cNIL c= ccore f0 f21 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f12 cFST f7 cFST f5 cCONS cFST f5 cNIL f18 c= c, cFace ccat crev f18 f15 cF cFace ccat f17 f18 cF c, cFace ccore f0 f20 cF cFace ccore f0 f21 cF
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- (((!x. (((\f2. (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))) x) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) ==> ((?f2. (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F)))))) = ((?f2. (f2 = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))))) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f10 c, f11 f12 c==> c= f9 cfind_face f0 f2 c==> c= f13 ccat cCONS cFST f2 cNIL ccat cbetwn f14 cFST f2 cFST f6 cCONS cFST f6 cNIL c==> c= f15 cmap part cFST cbetwn f9 f2 f4 c==> c= f11 ccore f0 f1 c==> c= f14 cFST f10 c==> cmarked_list f0 f5 f1 f3 c= c==> ! c==> * / c= b1 ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL b0 c==> c/\ c= ccore f0 f7 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f15 c= cLET / cLET_END c, cFace ccat crev f15 f13 cF cFace ccat b1 f15 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c==> c? / c= b0 ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c==> c/\ c= ccore f0 f7 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f15 c= cLET / cLET_END c, cFace ccat crev f15 f13 cF cFace ccat b0 f15 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c==> c? / c= b0 ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c==> c/\ c= ccore f0 f7 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f11 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f2 cCONS cFST f2 cNIL f15 c= cLET / cLET_END c, cFace ccat crev f15 f13 cF cFace ccat b0 f15 cF ccat cCONS cFST f6 cNIL ccat cbetwn f14 cFST f6 cFST f2 cCONS cFST f2 cNIL c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF
- (ram1' = ((next_el r) y)) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 cnext_el f1 f2 c= c= cfind_face f3 f2 f4 c= cfind_face f3 f2 f4
+ (vs = ((core L) r)) |- (((((core L) r) = vs) ==> (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))))))) = (((vs , b) = fvs) ==> (((FST fvs) = vs') ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat f2') newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))))))
T c==> c= f0 ccore f1 f2 c= c==> c= ccore f1 f2 f0 c==> c= c, f0 f3 f4 c==> c= cFST f4 f5 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f5 cFST f6 cFST f7 cCONS cFST f7 cNIL f8 c==> c= ccat cCONS cFST f7 cNIL ccat cbetwn f5 cFST f7 cFST f6 cCONS cFST f6 cNIL f9 c==> c= cnext_el f2 f6 f10 c==> c= cnext_el f2 f7 f11 c==> c= / csizel cfilter / c= b1 b0 cflatten f1 f12 c==> c= / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f12 cFST b0 f13 c==> c= cbetwn f14 f6 f11 f15 c==> c= cflatten cmap f13 f15 f16 c==> c= ccat cCONS f10 cNIL ccat cbetwn f2 f10 f7 cCONS f7 cNIL f17 c==> c= ccat cCONS f11 cNIL ccat cbetwn f2 f11 f6 cCONS f6 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f1 f19 ccat crev f21 ccat cCONS cFST f6 cNIL ccat cbetwn f0 cFST f6 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f1 f20 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f0 cFST f7 cFST f6 cCONS cFST f6 cNIL f21 chold c/\ c= ccat crev f21 f8 ccat crev f21 ccat cCONS cFST f6 cNIL ccat cbetwn f0 cFST f6 cFST f7 cCONS cFST f7 cNIL c= ccat f9 f21 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f0 cFST f7 cFST f6 cCONS cFST f6 cNIL f21 c==> c= c, f0 f3 f4 c==> c= cFST f4 f5 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f5 cFST f6 cFST f7 cCONS cFST f7 cNIL f8 c==> c= ccat cCONS cFST f7 cNIL ccat cbetwn f5 cFST f7 cFST f6 cCONS cFST f6 cNIL f9 c==> c= cnext_el f2 f6 f10 c==> c= cnext_el f2 f7 f11 c==> c= / csizel cfilter / c= b1 b0 cflatten f1 f12 c==> c= / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f12 cFST b0 f13 c==> c= cbetwn f14 f6 f11 f15 c==> c= cflatten cmap f13 f15 f16 c==> c= ccat cCONS f10 cNIL ccat cbetwn f2 f10 f7 cCONS f7 cNIL f17 c==> c= ccat cCONS f11 cNIL ccat cbetwn f2 f11 f6 cCONS f6 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f1 f19 ccat crev f21 ccat cCONS cFST f6 cNIL ccat cbetwn f0 cFST f6 cFST f7 cCONS cFST f7 cNIL c==> c= ccore f1 f20 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f0 cFST f7 cFST f6 cCONS cFST f6 cNIL f21 chold c/\ c= ccat crev f21 f8 ccat crev f21 ccat cCONS cFST f6 cNIL ccat cbetwn f0 cFST f6 cFST f7 cCONS cFST f7 cNIL c= ccat f9 f21 ccat ccat cCONS cFST f7 cNIL ccat cbetwn f0 cFST f7 cFST f6 cCONS cFST f6 cNIL f21
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) z') = ram2') /\ (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f4 f5 c==> c= cprev_el f1 f6 f4 c==> c= cl'y f0 f1 f7 f2 c==> c= cl'z f0 f8 f1 f7 f6 c==> c= c, f9 f10 f11 c==> c= cfind_face f0 f2 f12 c==> c= cFST f11 f13 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f13 cFST f2 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn f13 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f12 f2 f6 f14 c==> c= ccore f0 f1 f9 c==> cmarked_list f0 f8 f1 f7 c/\ c= cnext_el f1 f4 f5 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f15 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f15 cFST b0 f16 c==> c= cbetwn f12 f2 f5 f17 c==> c= cflatten cmap f16 f17 f18 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f2 cCONS f2 cNIL f20 c==> c= ccat crev f18 f19 f21 c==> c= ccat f20 f17 f22 c==> c= ccore f0 f21 ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f22 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f2 cCONS cFST f2 cNIL f14 chold c/\ c= ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f13 cFST f2 cFST f4 cCONS cFST f4 cNIL ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f4 cCONS cFST f4 cNIL c= ccat ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL f14 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f2 cCONS cFST f2 cNIL f14
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))), (f = ((find_face L) y)), (newVs = ((map FST) (((betwn f) y) z))), ((((marked_list L) N) r) x) |- ((?vs. (vs = ((core L) r))) ==> ((LET (\vs. (LET_END ((LET (\fvs. (LET_END (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (((LET (\vs. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((Face ((cat (rev newVs)) f1)) F) , ((Face ((cat f2) newVs)) F))))) ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL))))))) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))))) (FST fvs)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))) (((core L) r) , b))))) ((core L) r)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cl'y f0 f1 f3 c==> c= f4 cl'z f0 f5 f1 f3 c==> c= f6 cprev_el f1 f4 c==> c= c, f7 f8 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f1 b1 f2 cCONS f2 cNIL ccat cCONS b0 cNIL ccat cbetwn f1 b0 f6 cCONS f6 cNIL cflatten cmap b3 b4 cbetwn f9 f2 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f6 cnext_el f1 f2 c==> c= f9 cfind_face f0 f2 c==> c= f10 cmap part cFST cbetwn f9 f2 f4 c==> cmarked_list f0 f5 f1 f3 c==> c? / c= b0 ccore f0 f1 cLET / cLET_END cLET / cLET_END c==> c/\ c= ccore f0 f7 ccat crev f10 ccat cCONS cFST f2 cNIL ccat cbetwn b0 cFST f2 cFST f6 cCONS cFST f6 cNIL c= ccore f0 f8 ccat ccat cCONS cFST f6 cNIL ccat cbetwn b0 cFST f6 cFST f2 cCONS cFST f2 cNIL f10 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cFace ccat crev f10 b2 cF cFace ccat b3 f10 cF ccat cCONS cFST f6 cNIL ccat cbetwn b2 cFST f6 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn b2 cFST f2 cFST f6 cCONS cFST f6 cNIL cFST b1 c, cFace ccore f0 f7 cF cFace ccore f0 f8 cF c, ccore f0 f1 f11 ccore f0 f1
+ |- (T = (((T ==> B) /\ T) ==> B))
T c= cT c==> c/\ c==> cT f0 cT f0
+ |- (?vs. (vs = ((core L) r)))
T c? / c= b0 ccore f0 f1
+ |- ((z' = ((prev_el r) z)) = ((\z'. (z' = ((prev_el r) z))) z'))
T c= c= f0 cprev_el f1 f2 * / c= b0 cprev_el f1 f2 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (ram1' = ((next_el r) y)), (ram2' = ((next_el r) z')), (y = (((l'y L) r) x)), (z = ((((l'z L) N) r) x)), (z' = ((prev_el r) z)), (fvs = (vs , b)), (f = ((find_face L) y)), (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (newVs = ((map FST) (((betwn f) y) z))), (vs = ((core L) r)), (vs' = (FST fvs)), ((((marked_list L) N) r) x) |- ((sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) ==> ((((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) = (f1 , f2)) ==> (((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> ((((Face ((cat (rev newVs)) f1')) F) , ((Face ((cat f2') newVs)) F)) = (((Face ((core L) f1)) F) , ((Face ((core L) f2)) F))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= f2 cnext_el f1 f3 c==> c= f4 cnext_el f1 f5 c==> c= f3 cl'y f0 f1 f6 c==> c= f7 cl'z f0 f8 f1 f6 c==> c= f5 cprev_el f1 f7 c==> c= f9 c, f10 f11 c==> c= f12 cfind_face f0 f3 c==> c= f13 ccat cCONS cFST f3 cNIL ccat cbetwn f14 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= f15 ccat cCONS cFST f5 cNIL ccat cbetwn f14 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= f16 cmap part cFST cbetwn f12 f3 f7 c==> c= f10 ccore f0 f1 c==> c= f14 cFST f9 c==> cmarked_list f0 f8 f1 f6 c==> c= f17 / csizel cfilter / c= b1 b0 cflatten f0 c==> c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b3 b4 ccat b5 b2 ccat cCONS f4 cNIL ccat cbetwn f1 f4 f3 cCONS f3 cNIL ccat cCONS f2 cNIL ccat cbetwn f1 f2 f5 cCONS f5 cNIL cflatten cmap b1 b2 cbetwn f12 f3 f4 / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 * b0 cFST b1 / csizel cfilter / c= b1 b0 cflatten f0 c, f18 f19 c==> c/\ c= ccore f0 f18 ccat crev f16 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c= ccore f0 f19 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f16 c= c, cFace ccat crev f16 f13 cF cFace ccat f15 f16 cF c, cFace ccore f0 f18 cF cFace ccore f0 f19 cF
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat f2'') new2) = f2) /\ ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL f22 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f23 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat f16 f14 f17 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 chold c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c~ cfinal_list f4 f2 c~ cfinal_list f4 f2
- (new1 = (flatten ((map nd) new2))) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 cflatten cmap f1 f2 c= cis_restricted chypermap_of_list f3 cis_restricted chypermap_of_list f3
- (ram1' = ((next_el r) y)) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 cnext_el f1 f2 c= c= cl'y f3 f1 f4 f2 c= cl'y f3 f1 f4 f2
- (good_list_nodes L) |- ((good_list_nodes L) = T)
T c==> cgood_list_nodes f0 c= cgood_list_nodes f0 cT
- (new2 = (((betwn f) y) ram2')) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 cbetwn f1 f2 f3 c= c~ cfinal_list f4 f5 c~ cfinal_list f4 f5
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= cmarked_list f4 f5 f2 f6 cmarked_list f4 f5 f2 f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL f22 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f23 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 chold c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23
- (new2 = (((betwn f) y) ram2')) |- ((((core L) r) = vs) = (((core L) r) = vs))
T c==> c= f0 cbetwn f1 f2 f3 c= c= ccore f4 f5 f6 c= ccore f4 f5 f6
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= cl'z f1 f2 f3 f4 f5 c= cl'z f1 f2 f3 f4 f5
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat f15 f13 f16 c==> c= ccat crev f14 f17 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f15 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c==> c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c= cFST f12 ccore f0 f1
- (f = ((find_face L) y)) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 cfind_face f1 f2 c= cmarked_list f1 f3 f4 f5 cmarked_list f1 f3 f4 f5
- (ram2' = ((next_el r) z')) |- (((vs , b) = fvs) = ((vs , b) = fvs))
T c==> c= f0 cnext_el f1 f2 c= c= c, f3 f4 f5 c= c, f3 f4 f5
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= cprev_el f2 f3 f4 c= cprev_el f2 f3 f4
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= cmarked_list f1 f2 f3 f4 cmarked_list f1 f2 f3 f4
- (fvs = (vs , b)) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 c, f1 f2 c= c~ cfinal_list f3 f4 c~ cfinal_list f3 f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) /\ ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL f12 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cmap part cFST cbetwn f10 f5 f2 f13 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f10 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f13 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f13 chold c/\ c= ccat crev f13 f12 ccat crev f13 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f13 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f13
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL f22 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f23 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 chold c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= cfind_face f1 f2 f3 c= cfind_face f1 f2 f3
- (new2 = (((betwn f) y) ram2')) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 cbetwn f1 f2 f3 c= c= cmap part cFST cbetwn f1 f2 f4 f5 c= cmap part cFST cbetwn f1 f2 f4 f5
- (fvs = (vs , b)) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 c, f1 f2 c= c= cmap part cFST cbetwn f3 f4 f5 f6 c= cmap part cFST cbetwn f3 f4 f5 f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((FST fvs) = (FST fvs)) ==> ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cmap part cFST cbetwn f10 f5 f2 f11 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= cFST f9 cFST f9 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f10 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 chold c= cFST f9 f7
- (new2 = (((betwn f) y) ram2')) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 cbetwn f1 f2 f3 c= c= cprev_el f4 f5 f6 c= cprev_el f4 f5 f6
- (z = ((((l'z L) N) r) x)) |- ((good_list L) = (good_list L))
T c==> c= f0 cl'z f1 f2 f3 f4 c= cgood_list f1 cgood_list f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (hold ((FST fvs) = ((core L) r)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat f15 f13 f16 c==> c= ccat crev f14 f17 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f15 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 chold c= cFST f12 ccore f0 f1
- (ram2' = ((next_el r) z')) |- ((((next_el r) y) = ram1') = (((next_el r) y) = ram1'))
T c==> c= f0 cnext_el f1 f2 c= c= cnext_el f1 f3 f4 c= cnext_el f1 f3 f4
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((((next_el r) z') = ram2') = (((next_el r) z') = ram2'))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= cnext_el f2 f3 f4 c= cnext_el f2 f3 f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) /\ ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 cFST f9 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f10 f5 f2 f11 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f10 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 chold c= cFST f9 f7
- |- (((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B) ==> ((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B))
T c==> c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2 c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((((betwn f) y) ram2') = new2) /\ (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cbetwn f14 f4 f7 f15 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f16 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= cbetwn f14 f4 f7 f15 c==> c= cflatten cmap f3 f15 f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f15 f21 c==> c= ccore f0 f20 ccat crev f16 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f16 chold c= cFST f13 f11
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= cfind_face f1 f3 f4 c= cfind_face f1 f3 f4
- (new1 = (flatten ((map nd) new2))) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 cflatten cmap f1 f2 c= c= cl'y f3 f4 f5 f6 c= cl'y f3 f4 f5 f6
- (new2 = (((betwn f) y) ram2')) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') = (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'))
T c==> c= f0 cbetwn f1 f2 f3 c= c= ccat cCONS cFST f2 cNIL ccat cbetwn f4 cFST f2 cFST f5 cCONS cFST f5 cNIL f6 c= ccat cCONS cFST f2 cNIL ccat cbetwn f4 cFST f2 cFST f5 cCONS cFST f5 cNIL f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((FST fvs) = vs) ==> (hold ((FST fvs) = vs))) = (hold ((FST fvs) = vs)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f21 c==> c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c= c==> c= cFST f13 f11 chold c= cFST f13 f11 chold c= cFST f13 f11
- (ram2' = ((next_el r) z')) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 cnext_el f1 f2 c= c~ cfinal_list f3 f1 c~ cfinal_list f3 f1
- (new1 = (flatten ((map nd) new2))) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 cflatten cmap f1 f2 c= c= cmap part cFST cbetwn f3 f4 f5 f6 c= cmap part cFST cbetwn f3 f4 f5 f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat (rev new1)) f1'') = f1) /\ ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat crev f15 f16 f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f14 c==> c= cFST f13 f20 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f20 cFST f4 cFST f6 cCONS cFST f6 cNIL f21 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f20 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f20 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f22 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat crev f15 f16 f17 c==> c= ccat f18 f14 f23 c==> c= ccore f0 f17 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 chold c/\ c= ccat crev f22 f21 ccat crev f22 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f20 cFST f6 cFST f4 cCONS cFST f4 cNIL f22 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f22
- |- (((!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) ==> ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)) = ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0))
T c= c==> ! c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- |- (T = ((FST (((core L) r) , b)) = ((core L) r)))
T c= cT c= cFST c, ccore f0 f1 f2 ccore f0 f1
- (new1 = (flatten ((map nd) new2))) |- ((((next_el r) z') = ram2') = (((next_el r) z') = ram2'))
T c==> c= f0 cflatten cmap f1 f2 c= c= cnext_el f3 f4 f5 c= cnext_el f3 f4 f5
- (f1' = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cfind_face f4 f1 f5 c= cfind_face f4 f1 f5
- (newVs = ((map FST) (((betwn f) y) z))) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= c= cfind_face f4 f2 f1 c= cfind_face f4 f2 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))) ==> ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 cFST f9 c==> c= cmap part cFST cbetwn f10 f5 f2 f11 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f10 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 chold c= cFST f9 f7
- (z = ((((l'z L) N) r) x)) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 cl'z f1 f2 f3 f4 c= cmarked_list f1 f2 f3 f4 cmarked_list f1 f2 f3 f4
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= cis_restricted chypermap_of_list f4 cis_restricted chypermap_of_list f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 f11 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f11 cFST f5 cFST f3 cCONS cFST f3 cNIL f12 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cmap part cFST cbetwn f10 f5 f2 f13 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= cnext_el f1 f5 f14 c==> c= cnext_el f1 f3 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f10 f5 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f14 cNIL ccat cbetwn f1 f14 f3 cCONS f3 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f5 cCONS f5 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f13 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f13 chold c/\ c= ccat crev f13 f12 ccat crev f13 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c= ccat ccat cCONS cFST f3 cNIL ccat cbetwn f11 cFST f3 cFST f5 cCONS cFST f5 cNIL f13 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f13
- (f = ((find_face L) y)) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 cfind_face f1 f2 c= cis_restricted chypermap_of_list f1 cis_restricted chypermap_of_list f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat crev f14 f15 f16 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f15 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= cfind_face f0 f4 f18 c==> c= cbetwn f18 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f18 f4 f8 f19 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat f17 f13 f20 c==> c= ccore f0 f16 ccat crev f19 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f19 chold c= cFST f12 ccore f0 f1
- (vs' = (FST fvs)) |- (((vs , b) = fvs) = ((vs , b) = fvs))
T c==> c= f0 cFST f1 c= c= c, f2 f3 f1 c= c, f2 f3 f1
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= cmarked_list f4 f5 f6 f7 cmarked_list f4 f5 f6 f7
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) z') = ram2') /\ (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f4 f5 c==> c= cprev_el f1 f6 f4 c==> c= cl'y f0 f1 f7 f2 c==> c= cl'z f0 f8 f1 f7 f6 c==> c= c, f9 f10 f11 c==> c= cfind_face f0 f2 f12 c==> c= cFST f11 f13 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f13 cFST f2 cFST f4 cCONS cFST f4 cNIL f14 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f12 f2 f6 f15 c==> c= ccore f0 f1 f9 c==> cmarked_list f0 f8 f1 f7 c/\ c= cnext_el f1 f4 f5 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f12 f2 f5 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL f20 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f2 cCONS f2 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f2 cCONS cFST f2 cNIL f15 chold c/\ c= ccat crev f15 f14 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f4 cCONS cFST f4 cNIL c= ccat ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL f15 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f2 cCONS cFST f2 cNIL f15
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (hold ((FST fvs) = vs))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f21 c==> c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 chold c= cFST f13 f11
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= cfind_face f0 f4 f16 c==> c= cbetwn f16 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f16 f4 f8 f17 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f19 c==> c= ccat crev f15 f18 f20 c==> c= ccat f19 f14 f21 c==> c= ccore f0 f20 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 chold c= cFST f13 f11
- (vs' = (FST fvs)) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 cFST f1 c= c= cl'y f2 f3 f4 f5 c= cl'y f2 f3 f4 f5
- (ram1' = ((next_el r) y)) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 cnext_el f1 f2 c= c= cmap part cFST cbetwn f3 f2 f4 f5 c= cmap part cFST cbetwn f3 f2 f4 f5
- (y = (((l'y L) r) x)) |- ((good_list L) = (good_list L))
T c==> c= f0 cl'y f1 f2 f3 c= cgood_list f1 cgood_list f1
- (vs = ((core L) r)) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 ccore f1 f2 c= cis_restricted chypermap_of_list f1 cis_restricted chypermap_of_list f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat crev f15 f16 f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat f18 f14 f21 c==> c= ccore f0 f17 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c= cFST f13 f11
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) ==> ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, ccore f0 f1 f7 f8 c==> c= cfind_face f0 f5 f9 c==> c= cFST f8 cFST f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f9 f5 f2 f10 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f6 f1 f4 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f9 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= cFST f8 ccore f0 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat (rev new1)) f1'') = f1) /\ ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat crev f14 f15 f16 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f15 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= cfind_face f0 f4 f18 c==> c= cbetwn f18 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f18 f4 f8 f19 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat crev f14 f15 f16 c==> c= ccat f17 f13 f20 c==> c= ccore f0 f16 ccat crev f19 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f19 chold c= cFST f12 ccore f0 f1
- (~ ((final_list L) r)) |- (((final_list L) r) = F)
T c==> c~ cfinal_list f0 f1 c= cfinal_list f0 f1 cF
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((((betwn f) y) ram2') = new2) /\ (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cbetwn f14 f4 f7 f15 c==> c= cFST f13 f16 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f16 cFST f4 cFST f6 cCONS cFST f6 cNIL f17 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f18 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= cbetwn f14 f4 f7 f15 c==> c= cflatten cmap f3 f15 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f15 f23 c==> c= ccore f0 f22 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 chold c/\ c= ccat crev f18 f17 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f16 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f18
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cl'z f4 f5 f6 f7 f8 c= cl'z f4 f5 f6 f7 f8
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((hold ((FST fvs) = ((core L) r))) ==> ((FST fvs) = ((core L) r))) = ((FST fvs) = ((core L) r)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat f15 f13 f16 c==> c= ccat crev f14 f17 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f15 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c= c==> chold c= cFST f12 ccore f0 f1 c= cFST f12 ccore f0 f1 c= cFST f12 ccore f0 f1
- (vs' = (FST fvs)) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 cFST f1 c= cgood_list_nodes f2 cgood_list_nodes f2
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) /\ ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 cFST f9 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cmap part cFST cbetwn f10 f5 f2 f11 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c/\ c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f10 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 chold c= cFST f9 f7
- (new2 = (((betwn f) y) ram2')) |- ((((next_el r) z') = ram2') = (((next_el r) z') = ram2'))
T c==> c= f0 cbetwn f1 f2 f3 c= c= cnext_el f4 f5 f3 c= cnext_el f4 f5 f3
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= cgood_list_nodes f4 cgood_list_nodes f4
- |- (((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) ==> ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)) = ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s))
T c= c==> ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
- (vs = ((core L) r)) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 ccore f1 f2 c= cmarked_list f1 f3 f2 f4 cmarked_list f1 f3 f2 f4
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cfind_face f4 f3 f5 c= cfind_face f4 f3 f5
- (new2 = (((betwn f) y) ram2')) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) = ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd))
T c==> c= f0 cbetwn f1 f2 f3 c= c= / cmap / cPOWER * part cn_list f4 b1 b0 cupt cNUMERAL cBIT1 c_0 * f5 cFST b0 f6 c= / cmap / cPOWER * part cn_list f4 b1 b0 cupt cNUMERAL cBIT1 c_0 * f5 cFST b0 f6
- (vs' = (FST fvs)) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 cFST f1 c= cmarked_list f2 f3 f4 f5 cmarked_list f2 f3 f4 f5
- (newVs = ((map FST) (((betwn f) y) z))) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= cis_restricted chypermap_of_list f4 cis_restricted chypermap_of_list f4
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) = ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= / csizel cfilter / c= b1 b0 cflatten f1 f2 c= / csizel cfilter / c= b1 b0 cflatten f1 f2
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= cis_restricted chypermap_of_list f6 cis_restricted chypermap_of_list f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat f2'') new2) = f2) /\ ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat f15 f13 f16 c==> c= ccat crev f14 f17 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f15 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat f15 f13 f16 c==> c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c= cFST f12 ccore f0 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))) = (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL f22 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f23 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c= c==> c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 chold c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 chold c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23
- (fvs = (vs , b)) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 c, f1 f2 c= cmarked_list f3 f4 f5 f6 cmarked_list f3 f4 f5 f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= cfind_face f0 f4 f15 c==> c= cbetwn f15 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f15 f4 f8 f16 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= ccat crev f14 f17 f19 c==> c= ccat f18 f13 f20 c==> c= ccore f0 f19 ccat crev f16 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f16 chold c= cFST f12 ccore f0 f1
- (ram2' = ((next_el r) z')) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 cnext_el f1 f2 c= cmarked_list f3 f4 f1 f5 cmarked_list f3 f4 f1 f5
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') /\ ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= cfind_face f0 f4 f17 c==> c= cbetwn f17 f4 f7 f14 c==> c= cFST f13 f18 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f18 cFST f4 cFST f6 cCONS cFST f6 cNIL f19 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f18 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f18 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f17 f4 f8 f20 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f21 c==> c= ccat crev f15 f16 f22 c==> c= ccat f21 f14 f23 c==> c= ccore f0 f22 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c/\ c= ccat crev f20 f19 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f18 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') = (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2'))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= ccat cCONS cFST f2 cNIL ccat cbetwn f3 cFST f2 cFST f4 cCONS cFST f4 cNIL f5 c= ccat cCONS cFST f2 cNIL ccat cbetwn f3 cFST f2 cFST f4 cCONS cFST f4 cNIL f5
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) /\ (hold ((FST fvs) = vs)))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f21 c==> c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 chold c= cFST f13 f11
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cfind_face f0 f4 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f13 f4 f8 f14 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c==> c= cbetwn f13 f4 f7 f15 c==> c= cflatten cmap f3 f15 f16 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f14 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f14 chold c= cFST f12 ccore f0 f1
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- (((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))) = T)
T c= c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0 cT
- (fvs = (vs , b)) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 c, f1 f2 c= c= cl'z f3 f4 f5 f6 f7 c= cl'z f3 f4 f5 f6 f7
- (fvs = (vs , b)) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 c, f1 f2 c= c= cl'y f3 f4 f5 f6 c= cl'y f3 f4 f5 f6
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= cgood_list_nodes f4 cgood_list_nodes f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= cfind_face f0 f4 f17 c==> c= cbetwn f17 f4 f7 f14 c==> c= cFST f13 f18 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f18 cFST f4 cFST f6 cCONS cFST f6 cNIL f19 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f18 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f18 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f17 f4 f8 f20 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f21 c==> c= ccat crev f15 f16 f22 c==> c= ccat f21 f14 f23 c==> c= ccore f0 f22 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c/\ c= ccat crev f20 f19 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f18 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f20
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((good_list L) = (good_list L))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= cgood_list f1 cgood_list f1
- |- ((LENGTH = sizel) /\ ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))))
T c/\ c= part cLENGTH part csizel c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- (vs' = (FST fvs)) |- ((((core L) r) = vs) = (((core L) r) = vs))
T c==> c= f0 cFST f1 c= c= ccore f2 f3 f4 c= ccore f2 f3 f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= cfind_face f0 f4 f17 c==> c= cbetwn f17 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f17 f4 f8 f18 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f19 c==> c= ccat crev f15 f16 f20 c==> c= ccat f19 f14 f21 c==> c= ccore f0 f20 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 chold c= cFST f13 f11
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) /\ (hold ((FST fvs) = ((core L) r))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat f15 f13 f16 c==> c= ccat crev f14 f17 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f15 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c= cFST f12 ccore f0 f1
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((((core L) r) = vs) = (((core L) r) = vs))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= ccore f1 f2 f3 c= ccore f1 f2 f3
- (good_list L) |- ((good_list L) = T)
T c==> cgood_list f0 c= cgood_list f0 cT
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= c= cmap part cFST cbetwn f5 f3 f7 f8 c= cmap part cFST cbetwn f5 f3 f7 f8
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cfind_face f0 f4 f13 c==> c= cbetwn f13 f4 f7 f14 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f13 f4 f8 f15 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c==> c= cflatten cmap f3 f14 f16 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f14 f20 c==> c= ccore f0 f19 ccat crev f15 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f15 chold c= cFST f12 ccore f0 f1
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((next_el r) z') = ram2') = (((next_el r) z') = ram2'))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cnext_el f2 f4 f1 c= cnext_el f2 f4 f1
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((good_list L) = (good_list L))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= cgood_list f1 cgood_list f1
- (new1 = (flatten ((map nd) new2))) |- ((good_list L) = (good_list L))
T c==> c= f0 cflatten cmap f1 f2 c= cgood_list f3 cgood_list f3
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cFST f13 f15 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f15 cFST f4 cFST f6 cCONS cFST f6 cNIL f16 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f17 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= cbetwn f14 f4 f7 f18 c==> c= cflatten cmap f3 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 chold c/\ c= ccat crev f17 f16 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f15 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, ccore f0 f1 f7 f8 c==> c= cfind_face f0 f5 f9 c==> c= cFST f8 cFST f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cmap part cFST cbetwn f9 f5 f2 f10 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f6 f1 f4 c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f9 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= cFST f8 ccore f0 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) y) = ram1') /\ ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f7 f1 f6 f4 c==> c= c, f8 f9 f10 c==> c= cfind_face f0 f2 f11 c==> c= cFST f10 f12 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f12 cFST f2 cFST f5 cCONS cFST f5 cNIL f13 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f11 f2 f4 f14 c==> c= ccore f0 f1 f8 c==> cmarked_list f0 f7 f1 f6 c/\ c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f5 f15 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f11 f2 f15 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f5 cCONS f5 cNIL f20 c==> c= ccat cCONS f15 cNIL ccat cbetwn f1 f15 f2 cCONS f2 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f2 cCONS cFST f2 cNIL f14 chold c/\ c= ccat crev f14 f13 ccat crev f14 ccat cCONS cFST f2 cNIL ccat cbetwn f8 cFST f2 cFST f5 cCONS cFST f5 cNIL c= ccat ccat cCONS cFST f5 cNIL ccat cbetwn f12 cFST f5 cFST f2 cCONS cFST f2 cNIL f14 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f8 cFST f5 cFST f2 cCONS cFST f2 cNIL f14
- (z = ((((l'z L) N) r) x)) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 cl'z f1 f2 f3 f4 c= c= cl'y f1 f3 f4 f5 c= cl'y f1 f3 f4 f5
- (newVs = ((map FST) (((betwn f) y) z))) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= cmarked_list f4 f5 f6 f7 cmarked_list f4 f5 f6 f7
- (new1 = (flatten ((map nd) new2))) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 cflatten cmap f1 f2 c= cgood_list_nodes f3 cgood_list_nodes f3
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) /\ ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, ccore f0 f1 f7 f8 c==> c= cfind_face f0 f5 f9 c==> c= cFST f8 cFST f8 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f8 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cmap part cFST cbetwn f9 f5 f2 f10 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f6 f1 f4 c/\ c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f8 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cnext_el f1 f5 f11 c==> c= cnext_el f1 f3 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f9 f5 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f11 cNIL ccat cbetwn f1 f11 f3 cCONS f3 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f5 cCONS f5 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f10 ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL f10 chold c= cFST f8 ccore f0 f1
- (newVs = ((map FST) (((betwn f) y) z))) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 cmap part cFST cbetwn f1 f2 f3 c= c~ cfinal_list f4 f5 c~ cfinal_list f4 f5
- (fvs = (vs , b)) |- ((((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)) = (((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)))
T c==> c= f0 c, f1 f2 c= c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f3 b1 f4 cCONS f4 cNIL ccat cCONS b0 cNIL ccat cbetwn f3 b0 f5 cCONS f5 cNIL cflatten cmap b3 b4 cbetwn f6 f4 b1 / cmap / cPOWER * part cn_list f7 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f7 cnext_el f3 f5 cnext_el f3 f4 c, f8 f9 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f3 b1 f4 cCONS f4 cNIL ccat cCONS b0 cNIL ccat cbetwn f3 b0 f5 cCONS f5 cNIL cflatten cmap b3 b4 cbetwn f6 f4 b1 / cmap / cPOWER * part cn_list f7 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f7 cnext_el f3 f5 cnext_el f3 f4 c, f8 f9
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) /\ (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f3 f4 c==> c= cnext_el f1 f5 f6 c==> c= cprev_el f1 f7 f5 c==> c= cl'y f0 f1 f8 f3 c==> c= cl'z f0 f9 f1 f8 f7 c==> c= c, f10 f11 f12 c==> c= cfind_face f0 f3 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f12 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f12 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f12 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f12 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f13 f3 f7 f14 c==> c= ccore f0 f1 f10 c==> cmarked_list f0 f9 f1 f8 c/\ c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f15 c==> c= cbetwn f13 f3 f6 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f4 cNIL ccat cbetwn f1 f4 f5 cCONS f5 cNIL f18 c==> c= ccat cCONS f6 cNIL ccat cbetwn f1 f6 f3 cCONS f3 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f14 ccat cCONS cFST f3 cNIL ccat cbetwn f10 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f5 cNIL ccat cbetwn f10 cFST f5 cFST f3 cCONS cFST f3 cNIL f14 chold c= cFST f12 f10
- (vs' = (FST fvs)) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 cFST f1 c= c= cmap part cFST cbetwn f2 f3 f4 f5 c= cmap part cFST cbetwn f2 f3 f4 f5
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat f15 f13 f16 c==> c= ccat crev f14 f17 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f15 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c==> c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c= cFST f12 ccore f0 f1
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= c= cfind_face f6 f3 f5 c= cfind_face f6 f3 f5
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- (((vs , b) = fvs) = ((vs , b) = fvs))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= c, f3 f4 f5 c= c, f3 f4 f5
- (vs = ((core L) r)) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 ccore f1 f2 c= c~ cfinal_list f1 f2 c~ cfinal_list f1 f2
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- ((good_list L) = (good_list L))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= cgood_list f6 cgood_list f6
- (f = ((find_face L) y)) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 cfind_face f1 f2 c= c= cl'y f1 f3 f4 f2 c= cl'y f1 f3 f4 f2
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f4 f5 c==> c= cprev_el f1 f6 f4 c==> c= cl'y f0 f1 f7 f2 c==> c= cl'z f0 f8 f1 f7 f6 c==> c= c, f9 f10 f11 c==> c= cfind_face f0 f2 f12 c==> c= cFST f11 f13 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn f13 cFST f2 cFST f4 cCONS cFST f4 cNIL f14 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f12 f2 f6 f15 c==> c= ccore f0 f1 f9 c==> cmarked_list f0 f8 f1 f7 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f16 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f16 cFST b0 f17 c==> c= cbetwn f12 f2 f5 f18 c==> c= cflatten cmap f17 f18 f19 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL f20 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f2 cCONS f2 cNIL f21 c==> c= ccat crev f19 f20 f22 c==> c= ccat f21 f18 f23 c==> c= ccore f0 f22 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f2 cCONS cFST f2 cNIL f15 chold c/\ c= ccat crev f15 f14 ccat crev f15 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f4 cCONS cFST f4 cNIL c= ccat ccat cCONS cFST f4 cNIL ccat cbetwn f13 cFST f4 cFST f2 cCONS cFST f2 cNIL f15 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f2 cCONS cFST f2 cNIL f15
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat f2'') new2) = f2) /\ ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f21 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat f16 f14 f17 c==> c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 chold c= cFST f13 f11
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((FST fvs) = vs)
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f21 c==> c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c= cFST f13 f11
- (new2 = (((betwn f) y) ram2')) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 cbetwn f1 f2 f3 c= c= cfind_face f4 f2 f1 c= cfind_face f4 f2 f1
- (z = ((((l'z L) N) r) x)) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 cl'z f1 f2 f3 f4 c= cgood_list_nodes f1 cgood_list_nodes f1
- (f1'' = ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL)))) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cl'y f4 f2 f5 f6 c= cl'y f4 f2 f5 f6
- (vs = ((core L) r)) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 ccore f1 f2 c= c= cl'z f1 f3 f2 f4 f5 c= cl'z f1 f3 f2 f4 f5
- (ram2' = ((next_el r) z')) |- (((FST fvs) = vs') = ((FST fvs) = vs'))
T c==> c= f0 cnext_el f1 f2 c= c= cFST f3 f4 c= cFST f3 f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f21 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 chold c= cFST f13 f11
- (new1 = (flatten ((map nd) new2))) |- (((vs , b) = fvs) = ((vs , b) = fvs))
T c==> c= f0 cflatten cmap f1 f2 c= c= c, f3 f4 f5 c= c, f3 f4 f5
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= cis_restricted chypermap_of_list f1 cis_restricted chypermap_of_list f1
- (new2 = (((betwn f) y) ram2')) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') = (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2'))
T c==> c= f0 cbetwn f1 f2 f3 c= c= ccat cCONS cFST f4 cNIL ccat cbetwn f5 cFST f4 cFST f2 cCONS cFST f2 cNIL f6 c= ccat cCONS cFST f4 cNIL ccat cbetwn f5 cFST f4 cFST f2 cCONS cFST f2 cNIL f6
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- (((flatten ((map nd) new2)) = new1) = ((flatten ((map nd) new2)) = new1))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cflatten cmap f4 f5 f6 c= cflatten cmap f4 f5 f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((((betwn f) y) ram2') = new2) /\ (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cfind_face f0 f4 f13 c==> c= cbetwn f13 f4 f7 f14 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f13 f4 f8 f15 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c/\ c= cbetwn f13 f4 f7 f14 c==> c= cflatten cmap f3 f14 f16 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f14 f20 c==> c= ccore f0 f19 ccat crev f15 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f15 chold c= cFST f12 ccore f0 f1
- (ram2' = ((next_el r) z')) |- ((((core L) r) = vs) = (((core L) r) = vs))
T c==> c= f0 cnext_el f1 f2 c= c= ccore f3 f1 f4 c= ccore f3 f1 f4
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- (((FST fvs) = vs') = ((FST fvs) = vs'))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cFST f4 f2 c= cFST f4 f2
- (vs = ((core L) r)) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 ccore f1 f2 c= c= cprev_el f2 f3 f4 c= cprev_el f2 f3 f4
- (z' = ((prev_el r) z)) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 cprev_el f1 f2 c= cmarked_list f3 f4 f1 f5 cmarked_list f3 f4 f1 f5
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= c~ cfinal_list f6 f2 c~ cfinal_list f6 f2
- (f = ((find_face L) y)) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 cfind_face f1 f2 c= c= cl'z f1 f3 f4 f5 f6 c= cl'z f1 f3 f4 f5 f6
- (vs' = (FST fvs)) |- ((((find_face L) y) = f) = (((find_face L) y) = f))
T c==> c= f0 cFST f1 c= c= cfind_face f2 f3 f4 c= cfind_face f2 f3 f4
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((good_list L) = (good_list L))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= cgood_list f4 cgood_list f4
- (vs = ((core L) r)) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 ccore f1 f2 c= c= cmap part cFST cbetwn f3 f4 f5 f6 c= cmap part cFST cbetwn f3 f4 f5 f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f3 f4 c==> c= cnext_el f1 f5 f6 c==> c= cprev_el f1 f7 f5 c==> c= cl'y f0 f1 f8 f3 c==> c= cl'z f0 f9 f1 f8 f7 c==> c= c, ccore f0 f1 f10 f11 c==> c= cfind_face f0 f3 f12 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f12 f3 f7 f13 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f9 f1 f8 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f14 c==> c= cbetwn f12 f3 f6 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f4 cNIL ccat cbetwn f1 f4 f5 cCONS f5 cNIL f17 c==> c= ccat cCONS f6 cNIL ccat cbetwn f1 f6 f3 cCONS f3 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f13 ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL f13 chold c= cFST f11 ccore f0 f1
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= cgood_list_nodes f1 cgood_list_nodes f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') /\ ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= cfind_face f0 f4 f18 c==> c= cbetwn f18 f4 f7 f14 c==> c= cFST f13 f19 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f19 cFST f4 cFST f6 cCONS cFST f6 cNIL f20 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f18 f4 f8 f21 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= ccat crev f15 f16 f22 c==> c= ccat f17 f14 f23 c==> c= ccore f0 f22 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 chold c/\ c= ccat crev f21 f20 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21
- (f = ((find_face L) y)) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 cfind_face f1 f2 c= cgood_list_nodes f1 cgood_list_nodes f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat f15 f13 f16 c==> c= ccat crev f14 f17 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f15 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 chold c= cFST f12 ccore f0 f1
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2') = (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = f2'))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL f6 c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL f6
- |- ((APPEND = cat) /\ (ALL = all))
T c/\ c= part cAPPEND part ccat c= part cALL part call
- |- (FILTER = filter)
T c= part cFILTER part cfilter
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= cgood_list_nodes f1 cgood_list_nodes f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 f21 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f21 cFST f4 cFST f6 cCONS cFST f6 cNIL f22 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f23 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccore f0 f19 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 chold c/\ c= ccat crev f23 f22 ccat crev f23 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f21 cFST f6 cFST f4 cCONS cFST f4 cNIL f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f23
- (new2 = (((betwn f) y) ram2')) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 cbetwn f1 f2 f3 c= c= cl'z f4 f5 f6 f7 f8 c= cl'z f4 f5 f6 f7 f8
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- ((((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)) = (((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f4 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f4 b0 f1 cCONS f1 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f4 f1 cnext_el f4 f3 c, f7 f8 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f4 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f4 b0 f1 cCONS f1 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f4 f1 cnext_el f4 f3 c, f7 f8
- (((vs' = vs) ==> B) /\ (vs' = vs)) |- (((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B) ==> B)
T c==> c/\ c==> c= f0 f1 f2 c= f0 f1 c==> c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2 f2
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') /\ ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f15 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f17 c==> c= cbetwn f17 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f17 f4 f8 f18 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= ccat crev f14 f15 f19 c==> c= ccat f16 f13 f20 c==> c= ccore f0 f19 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 chold c= cFST f12 ccore f0 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f4 f5 c==> c= cprev_el f1 f6 f4 c==> c= cl'y f0 f1 f7 f2 c==> c= cl'z f0 f8 f1 f7 f6 c==> c= c, f9 f10 f11 c==> c= cfind_face f0 f2 f12 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn cFST f11 cFST f2 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn cFST f11 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f11 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f11 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f12 f2 f6 f13 c==> c= ccore f0 f1 f9 c==> cmarked_list f0 f8 f1 f7 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f12 f2 f5 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f2 cCONS f2 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f13 ccat cCONS cFST f2 cNIL ccat cbetwn f9 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f4 cNIL ccat cbetwn f9 cFST f4 cFST f2 cCONS cFST f2 cNIL f13 chold c= cFST f11 f9
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((next_el r) z') = ram2') /\ (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f4 f5 c==> c= cprev_el f1 f6 f4 c==> c= cl'y f0 f1 f7 f2 c==> c= cl'z f0 f8 f1 f7 f6 c==> c= c, ccore f0 f1 f9 f10 c==> c= cfind_face f0 f2 f11 c==> c= cFST f10 cFST f10 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn cFST f10 cFST f2 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn cFST f10 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f10 cFST f4 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f10 cFST f4 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f11 f2 f6 f12 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f8 f1 f7 c/\ c= cnext_el f1 f4 f5 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f11 f2 f5 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f4 cCONS f4 cNIL f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f2 cCONS f2 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f12 ccat cCONS cFST f2 cNIL ccat cbetwn ccore f0 f1 cFST f2 cFST f4 cCONS cFST f4 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f2 cCONS cFST f2 cNIL f12 chold c= cFST f10 ccore f0 f1
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= cfind_face f0 f4 f16 c==> c= cbetwn f16 f4 f7 f14 c==> c= cFST f13 f17 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f17 cFST f4 cFST f6 cCONS cFST f6 cNIL f18 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f16 f4 f8 f19 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f20 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f21 c==> c= ccat crev f15 f20 f22 c==> c= ccat f21 f14 f23 c==> c= ccore f0 f22 ccat crev f19 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f19 chold c/\ c= ccat crev f19 f18 ccat crev f19 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f17 cFST f6 cFST f4 cCONS cFST f4 cNIL f19 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f19
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') /\ ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f15 c==> c= cfind_face f0 f4 f16 c==> c= cbetwn f16 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f16 f4 f8 f17 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f15 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= ccat crev f14 f15 f19 c==> c= ccat f18 f13 f20 c==> c= ccore f0 f19 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 chold c= cFST f12 ccore f0 f1
- (fvs = (vs , b)) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= f0 c, f1 f2 c= c= cprev_el f3 f4 f5 c= cprev_el f3 f4 f5
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= cmap part cFST cbetwn f3 f4 f5 f6 c= cmap part cFST cbetwn f3 f4 f5 f6
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- (((vs , b) = fvs) = ((vs , b) = fvs))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= c, f4 f5 f6 c= c, f4 f5 f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) /\ (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f3 f4 c==> c= cnext_el f1 f5 f6 c==> c= cprev_el f1 f7 f5 c==> c= cl'y f0 f1 f8 f3 c==> c= cl'z f0 f9 f1 f8 f7 c==> c= c, ccore f0 f1 f10 f11 c==> c= cfind_face f0 f3 f12 c==> c= cFST f11 cFST f11 c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f11 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f11 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= cmap part cFST cbetwn f12 f3 f7 f13 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f9 f1 f8 c/\ c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f14 c==> c= cbetwn f12 f3 f6 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f4 cNIL ccat cbetwn f1 f4 f5 cCONS f5 cNIL f17 c==> c= ccat cCONS f6 cNIL ccat cbetwn f1 f6 f3 cCONS f3 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f13 ccat cCONS cFST f3 cNIL ccat cbetwn ccore f0 f1 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f3 cCONS cFST f3 cNIL f13 chold c= cFST f11 ccore f0 f1
- (sz = (\x. (sizel ((filter (\t. (t = x))) (flatten L))))) |- (((FST fvs) = vs') = ((FST fvs) = vs'))
T c==> c= f0 / csizel cfilter / c= b1 b0 cflatten f1 c= c= cFST f2 f3 c= cFST f2 f3
- (new1 = (flatten ((map nd) new2))) |- (((FST fvs) = vs') = ((FST fvs) = vs'))
T c==> c= f0 cflatten cmap f1 f2 c= c= cFST f3 f4 c= cFST f3 f4
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((good_list L) = (good_list L))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= cgood_list f4 cgood_list f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((next_el r) y) = ram1') ==> ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= c, f7 f8 f9 c==> c= cfind_face f0 f5 f10 c==> c= cFST f9 cFST f9 c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f3 cNIL ccat cbetwn cFST f9 cFST f3 cFST f5 cCONS cFST f5 cNIL c==> c= cmap part cFST cbetwn f10 f5 f2 f11 c==> c= ccore f0 f1 f7 c==> cmarked_list f0 f6 f1 f4 c==> c= cnext_el f1 f5 f12 c==> c= cnext_el f1 f3 f13 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f14 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f14 cFST b0 f15 c==> c= cbetwn f10 f5 f13 f16 c==> c= cflatten cmap f15 f16 f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f3 cCONS f3 cNIL f18 c==> c= ccat cCONS f13 cNIL ccat cbetwn f1 f13 f5 cCONS f5 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f11 ccat cCONS cFST f5 cNIL ccat cbetwn f7 cFST f5 cFST f3 cCONS cFST f3 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f3 cNIL ccat cbetwn f7 cFST f3 cFST f5 cCONS cFST f5 cNIL f11 chold c= cFST f9 f7
- (new2 = (((betwn f) y) ram2')) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 cbetwn f1 f2 f3 c= c= cl'y f4 f5 f6 f2 c= cl'y f4 f5 f6 f2
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= c= cl'z f6 f7 f2 f8 f9 c= cl'z f6 f7 f2 f8 f9
- (new2 = (((betwn f) y) ram2')) |- ((is_restricted (hypermap_of_list L)) = (is_restricted (hypermap_of_list L)))
T c==> c= f0 cbetwn f1 f2 f3 c= cis_restricted chypermap_of_list f4 cis_restricted chypermap_of_list f4
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) = ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= / csizel cfilter / c= b1 b0 cflatten f4 f5 c= / csizel cfilter / c= b1 b0 cflatten f4 f5
- (vs = ((core L) r)) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 ccore f1 f2 c= c= cl'y f1 f2 f3 f4 c= cl'y f1 f2 f3 f4
- (new1 = (flatten ((map nd) new2))) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= f0 cflatten cmap f1 f2 c= cmarked_list f3 f4 f5 f6 cmarked_list f3 f4 f5 f6
- (z' = ((prev_el r) z)) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 cprev_el f1 f2 c= cgood_list_nodes f3 cgood_list_nodes f3
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f7 f1 f6 f4 c==> c= c, ccore f0 f1 f8 f9 c==> c= cfind_face f0 f2 f10 c==> c= cFST f9 cFST f9 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn cFST f9 cFST f2 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn cFST f9 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f10 f2 f4 f11 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f7 f1 f6 c==> c= cnext_el f1 f5 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f10 f2 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f5 cCONS f5 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f2 cCONS f2 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f11 ccat cCONS cFST f2 cNIL ccat cbetwn ccore f0 f1 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f2 cCONS cFST f2 cNIL f11 chold c= cFST f9 ccore f0 f1
- |- ((T /\ t) = t)
T c= c/\ cT f0 f0
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((map FST) (((betwn f) y) z)) = newVs) = (((map FST) (((betwn f) y) z)) = newVs))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cmap part cFST cbetwn f4 f3 f5 f6 c= cmap part cFST cbetwn f4 f3 f5 f6
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((next_el r) y) = ram1') = (((next_el r) y) = ram1'))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= cnext_el f2 f3 f4 c= cnext_el f2 f3 f4
- (new2 = (((betwn f) y) ram2')) |- (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) = ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz))
T c==> c= f0 cbetwn f1 f2 f3 c= c= / csizel cfilter / c= b1 b0 cflatten f4 f5 c= / csizel cfilter / c= b1 b0 cflatten f4 f5
- (new1 = (flatten ((map nd) new2))) |- (((((betwn f) y) ram2') = new2) = ((((betwn f) y) ram2') = new2))
T c==> c= f0 cflatten cmap f1 f2 c= c= cbetwn f3 f4 f5 f2 c= cbetwn f3 f4 f5 f2
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((flatten ((map nd) new2)) = new1) /\ ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= cfind_face f0 f4 f16 c==> c= cbetwn f16 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f16 f4 f8 f17 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f19 c==> c= ccat crev f15 f18 f20 c==> c= ccat f19 f14 f21 c==> c= ccore f0 f20 ccat crev f17 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f17 chold c= cFST f13 f11
- (f = ((find_face L) y)) |- ((good_list L) = (good_list L))
T c==> c= f0 cfind_face f1 f2 c= cgood_list f1 cgood_list f1
- (vs = ((core L) r)) |- ((((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)) = (((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y)) = (f1 , f2)))
T c==> c= f0 ccore f1 f2 c= c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f1 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f1 cnext_el f2 f4 cnext_el f2 f3 c, f6 f7 c= cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f1 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f1 cnext_el f2 f4 cnext_el f2 f3 c, f6 f7
- (ram2' = ((next_el r) z')) |- ((good_list L) = (good_list L))
T c==> c= f0 cnext_el f1 f2 c= cgood_list f3 cgood_list f3
- (ram2' = ((next_el r) z')) |- (((((l'y L) r) x) = y) = ((((l'y L) r) x) = y))
T c==> c= f0 cnext_el f1 f2 c= c= cl'y f3 f1 f4 f5 c= cl'y f3 f1 f4 f5
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat f16 f14 f17 c==> c= ccat crev f15 f18 f19 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f20 c==> c= cbetwn f20 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f20 f4 f8 f21 c==> c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccore f0 f19 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f17 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 chold c= cFST f13 f11
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) y) = ram1'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((next_el r) y) = ram1') /\ ((((next_el r) z') = ram2') ==> (((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz) ==> (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) ==> (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 f3 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f6 f2 c==> c= cl'z f0 f7 f1 f6 f4 c==> c= c, ccore f0 f1 f8 f9 c==> c= cfind_face f0 f2 f10 c==> c= cFST f9 cFST f9 c==> c= ccat cCONS cFST f2 cNIL ccat cbetwn cFST f9 cFST f2 cFST f5 cCONS cFST f5 cNIL ccat cCONS cFST f2 cNIL ccat cbetwn cFST f9 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f2 cCONS cFST f2 cNIL ccat cCONS cFST f5 cNIL ccat cbetwn cFST f9 cFST f5 cFST f2 cCONS cFST f2 cNIL c==> c= cmap part cFST cbetwn f10 f2 f4 f11 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f7 f1 f6 c/\ c= cnext_el f1 f2 f3 c==> c= cnext_el f1 f5 f12 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f13 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f13 cFST b0 f14 c==> c= cbetwn f10 f2 f12 f15 c==> c= cflatten cmap f14 f15 f16 c==> c= ccat cCONS f3 cNIL ccat cbetwn f1 f3 f5 cCONS f5 cNIL f17 c==> c= ccat cCONS f12 cNIL ccat cbetwn f1 f12 f2 cCONS f2 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f11 ccat cCONS cFST f2 cNIL ccat cbetwn ccore f0 f1 cFST f2 cFST f5 cCONS cFST f5 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f5 cNIL ccat cbetwn ccore f0 f1 cFST f5 cFST f2 cCONS cFST f2 cNIL f11 chold c= cFST f9 ccore f0 f1
- (new2 = (((betwn f) y) ram2')) |- (((vs , b) = fvs) = ((vs , b) = fvs))
T c==> c= f0 cbetwn f1 f2 f3 c= c= c, f4 f5 f6 c= c, f4 f5 f6
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- (((((marked_list L) N) r) x) = ((((marked_list L) N) r) x))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= cmarked_list f6 f7 f2 f8 cmarked_list f6 f7 f2 f8
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = vs'), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((((cat (rev newVs)) f1') = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) /\ (((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= cfind_face f0 f4 f18 c==> c= cbetwn f18 f4 f7 f14 c==> c= cFST f13 f19 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn f19 cFST f4 cFST f6 cCONS cFST f6 cNIL f20 c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f18 f4 f8 f21 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat crev f15 f16 f22 c==> c= ccat f17 f14 f23 c==> c= ccore f0 f22 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f23 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 chold c/\ c= ccat crev f21 f20 ccat crev f21 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c= ccat ccat cCONS cFST f6 cNIL ccat cbetwn f19 cFST f6 cFST f4 cCONS cFST f4 cNIL f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f21
- (f2'' = ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL)))) |- ((((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1') = (((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs') (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = f1'))
T c==> c= f0 ccat cCONS f1 cNIL ccat cbetwn f2 f1 f3 cCONS f3 cNIL c= c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL f6 c= ccat cCONS cFST f3 cNIL ccat cbetwn f4 cFST f3 cFST f5 cCONS cFST f5 cNIL f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f15 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f16 c==> c= cfind_face f0 f4 f17 c==> c= cbetwn f17 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f17 f4 f8 f18 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c==> c= ccat crev f14 f15 f19 c==> c= ccat f16 f13 f20 c==> c= ccore f0 f19 ccat crev f18 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f18 chold c= cFST f12 ccore f0 f1
- (z' = ((prev_el r) z)) |- ((good_list L) = (good_list L))
T c==> c= f0 cprev_el f1 f2 c= cgood_list f3 cgood_list f3
- ((f1 , f2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((cat (rev new1)) f1) , ((cat f2) new2))))) ((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))))))) ((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) y) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) z'))))) ((next_el r) y))) |- ((((prev_el r) z) = z') = (((prev_el r) z) = z'))
T c==> c= c, f0 f1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, ccat crev b5 b6 ccat b7 b4 ccat cCONS b1 cNIL ccat cbetwn f2 b1 f3 cCONS f3 cNIL ccat cCONS b0 cNIL ccat cbetwn f2 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f5 f3 b1 / cmap / cPOWER * part cn_list f6 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f6 cnext_el f2 f4 cnext_el f2 f3 c= c= cprev_el f2 f7 f4 c= cprev_el f2 f7 f4
- (f2' = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs') (FST z')) (FST y))) ((CONS (FST y)) NIL)))) |- (((vs , b) = fvs) = ((vs , b) = fvs))
T c==> c= f0 ccat cCONS cFST f1 cNIL ccat cbetwn f2 cFST f1 cFST f3 cCONS cFST f3 cNIL c= c= c, f4 f5 f6 c= c, f4 f5 f6
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat f2'') new2) = f2), (((cat (rev new1)) f1'') = f1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))), (((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- ((((FST fvs) = ((core L) r)) ==> (hold ((FST fvs) = ((core L) r)))) = (hold ((FST fvs) = ((core L) r))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cflatten cmap f3 f13 f14 c==> c= ccat f15 f13 f16 c==> c= ccat crev f14 f17 f18 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f15 c==> c= cfind_face f0 f4 f19 c==> c= cbetwn f19 f4 f7 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f19 f4 f8 f20 c==> c= ccore f0 f18 ccat crev f20 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f16 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f20 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c= c==> c= cFST f12 ccore f0 f1 chold c= cFST f12 ccore f0 f1 chold c= cFST f12 ccore f0 f1
- (y = (((l'y L) r) x)) |- ((~ ((final_list L) r)) = (~ ((final_list L) r)))
T c==> c= f0 cl'y f1 f2 f3 c= c~ cfinal_list f1 f2 c~ cfinal_list f1 f2
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) /\ (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f15 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= cbetwn f14 f4 f7 f16 c==> c= cflatten cmap f3 f16 f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f16 f21 c==> c= ccore f0 f20 ccat crev f15 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f15 chold c= cFST f13 f11
- ((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B) |- (((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B) /\ ((((vs' = vs) ==> B) /\ (vs' = vs)) ==> B))
T c==> c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2 c/\ c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2 c==> c/\ c==> c= f0 f1 f2 c= f0 f1 f2
- (new2 = (((betwn f) y) ram2')) |- ((good_list L) = (good_list L))
T c==> c= f0 cbetwn f1 f2 f3 c= cgood_list f4 cgood_list f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), ((flatten ((map nd) new2)) = new1), (((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1''), (((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2''), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') /\ ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cflatten cmap f3 f14 f15 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f16 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= cfind_face f0 f4 f18 c==> c= cbetwn f18 f4 f7 f14 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f18 f4 f8 f19 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c/\ c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f17 c==> c= ccat crev f15 f16 f20 c==> c= ccat f17 f14 f21 c==> c= ccore f0 f20 ccat crev f19 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f19 chold c= cFST f13 f11
- (new2 = (((betwn f) y) ram2')) |- ((good_list_nodes L) = (good_list_nodes L))
T c==> c= f0 cbetwn f1 f2 f3 c= cgood_list_nodes f4 cgood_list_nodes f4
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((vs , b) = fvs), (((find_face L) y) = f), ((((betwn f) y) ram2') = new2), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = vs), ((((marked_list L) N) r) x) |- (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn vs) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn vs) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = vs)))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, f11 f12 f13 c==> c= cfind_face f0 f4 f14 c==> c= cbetwn f14 f4 f7 f15 c==> c= cFST f13 cFST f13 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f13 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f13 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f14 f4 f8 f16 c==> c= ccore f0 f1 f11 c==> cmarked_list f0 f10 f1 f9 c==> c= cflatten cmap f3 f15 f17 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f18 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f19 c==> c= ccat crev f17 f18 f20 c==> c= ccat f19 f15 f21 c==> c= ccore f0 f20 ccat crev f16 ccat cCONS cFST f4 cNIL ccat cbetwn f11 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f21 ccat ccat cCONS cFST f6 cNIL ccat cbetwn f11 cFST f6 cFST f4 cCONS cFST f4 cNIL f16 chold c= cFST f13 f11
- (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd), ((\x. (sizel ((filter (\t. (t = x))) (flatten L)))) = sz), (((next_el r) y) = ram1'), (((next_el r) z') = ram2'), (((prev_el r) z) = z'), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((core L) r) , b) = fvs), (((find_face L) y) = f), ((FST fvs) = (FST fvs)), (((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))) = ((cat ((CONS (FST y)) NIL)) ((cat (((betwn (FST fvs)) (FST y)) (FST z'))) ((CONS (FST z')) NIL)))), (((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL))) = ((cat ((CONS (FST z')) NIL)) ((cat (((betwn (FST fvs)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))), (((map FST) (((betwn f) y) z)) = newVs), (((core L) r) = ((core L) r)), ((((marked_list L) N) r) x) |- (((\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))) = nd) /\ (((((betwn f) y) ram2') = new2) ==> (((flatten ((map nd) new2)) = new1) ==> ((((cat ((CONS ram1') NIL)) ((cat (((betwn r) ram1') z')) ((CONS z') NIL))) = f1'') ==> ((((cat ((CONS ram2') NIL)) ((cat (((betwn r) ram2') y)) ((CONS y) NIL))) = f2'') ==> ((((cat (rev new1)) f1'') = f1) ==> ((((cat f2'') new2) = f2) ==> ((((core L) f1) = ((cat (rev newVs)) ((cat ((CONS (FST y)) NIL)) ((cat (((betwn ((core L) r)) (FST y)) (FST z'))) ((CONS (FST z')) NIL))))) ==> ((((core L) f2) = ((cat ((cat ((CONS (FST z')) NIL)) ((cat (((betwn ((core L) r)) (FST z')) (FST y))) ((CONS (FST y)) NIL)))) newVs)) ==> (hold ((FST fvs) = ((core L) r))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= / csizel cfilter / c= b1 b0 cflatten f0 f2 c==> c= cnext_el f1 f4 f5 c==> c= cnext_el f1 f6 f7 c==> c= cprev_el f1 f8 f6 c==> c= cl'y f0 f1 f9 f4 c==> c= cl'z f0 f10 f1 f9 f8 c==> c= c, ccore f0 f1 f11 f12 c==> c= cfind_face f0 f4 f13 c==> c= cFST f12 cFST f12 c==> c= ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL ccat cCONS cFST f4 cNIL ccat cbetwn cFST f12 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL ccat cCONS cFST f6 cNIL ccat cbetwn cFST f12 cFST f6 cFST f4 cCONS cFST f4 cNIL c==> c= cmap part cFST cbetwn f13 f4 f8 f14 c==> c= ccore f0 f1 ccore f0 f1 c==> cmarked_list f0 f10 f1 f9 c/\ c= / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 f3 c==> c= cbetwn f13 f4 f7 f15 c==> c= cflatten cmap f3 f15 f16 c==> c= ccat cCONS f5 cNIL ccat cbetwn f1 f5 f6 cCONS f6 cNIL f17 c==> c= ccat cCONS f7 cNIL ccat cbetwn f1 f7 f4 cCONS f4 cNIL f18 c==> c= ccat crev f16 f17 f19 c==> c= ccat f18 f15 f20 c==> c= ccore f0 f19 ccat crev f14 ccat cCONS cFST f4 cNIL ccat cbetwn ccore f0 f1 cFST f4 cFST f6 cCONS cFST f6 cNIL c==> c= ccore f0 f20 ccat ccat cCONS cFST f6 cNIL ccat cbetwn ccore f0 f1 cFST f6 cFST f4 cCONS cFST f4 cNIL f14 chold c= cFST f12 ccore f0 f1
- (nd = (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x)))))) |- ((((core L) r) = vs) = (((core L) r) = vs))
T c==> c= f0 / cmap / cPOWER * part cn_list f1 b1 b0 cupt cNUMERAL cBIT1 c_0 * f2 cFST b0 c= c= ccore f1 f3 f4 c= ccore f1 f3 f4
- |- ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)
T * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
- (ram2' = ((next_el r) z')) |- ((((((l'z L) N) r) x) = z) = (((((l'z L) N) r) x) = z))
T c==> c= f0 cnext_el f1 f2 c= c= cl'z f3 f4 f1 f5 f6 c= cl'z f3 f4 f1 f5 f6
