N Tame_list.rotate1_rot1
C |- (rotate1 = (rot (NUMERAL (BIT1 _0))))
T c= part crotate1 * part crot cNUMERAL cBIT1 c_0
D TRUTH
A |- T
T cT
D FUN_EQ_THM
A |- (!f. (!g. ((f = g) = (!x. ((f x) = (g x))))))
T c= c= f0 f1 ! c= * f0 b0 * f1 b0
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D Tame_defs.rotate1
A |- (((rotate1 NIL) = NIL) /\ ((rotate1 ((CONS x) xs)) = ((APPEND xs) ((CONS x) NIL))))
T c/\ c= crotate1 cNIL cNIL c= crotate1 cCONS f0 f1 cAPPEND f1 cCONS f0 cNIL
D Seq.cats1
A |- (!s. (!z. (((cat s) ((CONS z) NIL)) = ((rcons s) z))))
T c= ccat f0 cCONS f1 cNIL crcons f0 f1
D Seq.rot1_cons
A |- (!x. (!s. (((rot (NUMERAL (BIT1 _0))) ((CONS x) s)) = ((rcons s) x))))
T c= crot cNUMERAL cBIT1 c_0 cCONS f0 f1 crcons f1 f0
D Seq2.rot_nil
A |- (!n. (((rot n) NIL) = NIL))
T c= crot f0 cNIL cNIL
D Tame_list.APPEND_cat
A |- (APPEND = cat)
T c= part cAPPEND part ccat
+ |- (((!n. (((rot n) NIL) = NIL)) ==> ((\n. (((rot n) NIL) = NIL)) n)) = ((\n. (((rot n) NIL) = NIL)) n))
T c= c==> ! c= crot b0 cNIL cNIL * / c= crot b0 cNIL cNIL f0 * / c= crot b0 cNIL cNIL f0
- |- ((!x. t) = t)
T c= ! f0 f0
