N Leaf_cell.CC_CELL4
C |- (!V. (!ul. (((packing V) /\ ((saturated V) /\ (((leaf V) ul) /\ (((cc_ke V) ul) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) ==> (((cc_cell V) ul) = ((hull convex) (set_of_list ((cc_uh V) ul)))))))
T c==> c/\ cpacking f0 c/\ csaturated f0 c/\ cleaf f0 f1 c= ccc_ke f0 f1 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * part ccc_cell f0 f1 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D COND_ELIM_THM
A |- ((P (((COND c) x) y)) = ((c ==> (P x)) /\ ((~ c) ==> (P y))))
T c= * f0 cCOND f1 f2 f3 c/\ c==> f1 * f0 f2 c==> c~ f1 * f0 f3
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D Sphere.sqrt2
A |- (sqrt2 = (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))
T c= csqrt2 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0
D Pack_defs.mcell4
A |- (!V. (!ul. (((mcell4 V) ul) = (((COND ((real_lt (hl ul)) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ul))) EMPTY))))
T c= * * part cmcell4 f0 f1 * * * part cCOND creal_lt chl f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list f1 part cEMPTY
D Pack_defs.mcell
A |- (!i. (!V. (!ul. ((((mcell i) V) ul) = (((COND (i = (NUMERAL _0))) ((mcell0 V) ul)) (((COND (i = (NUMERAL (BIT1 _0)))) ((mcell1 V) ul)) (((COND (i = (NUMERAL (BIT0 (BIT1 _0))))) ((mcell2 V) ul)) (((COND (i = (NUMERAL (BIT1 (BIT1 _0))))) ((mcell3 V) ul)) ((mcell4 V) ul)))))))))
T c= * * * part cmcell f0 f1 f2 * * * part cCOND c= f0 cNUMERAL c_0 * * part cmcell0 f1 f2 * * * part cCOND c= f0 cNUMERAL cBIT1 c_0 * * part cmcell1 f1 f2 * * * part cCOND c= f0 cNUMERAL cBIT0 cBIT1 c_0 * * part cmcell2 f1 f2 * * * part cCOND c= f0 cNUMERAL cBIT1 cBIT1 c_0 * * part cmcell3 f1 f2 * * part cmcell4 f1 f2
D Leaf_cell.cc_ke
A |- (!V. (!ul. (((cc_ke V) ul) = (((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))))))
T c= ccc_ke f0 f1 cCOND creal_lt chl ccc_uh f0 f1 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
D Leaf_cell.cc_cell
A |- (!V. (!ul. (((cc_cell V) ul) = (((mcell ((cc_ke V) ul)) V) ((cc_uh V) ul)))))
T c= * * part ccc_cell f0 f1 * * * part cmcell ccc_ke f0 f1 f0 ccc_uh f0 f1
+ |- ((\V. (!ul. (((mcell4 V) ul) = (((COND ((real_lt (hl ul)) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ul))) EMPTY)))) V)
T * / ! c= * * part cmcell4 b0 b1 * * * part cCOND creal_lt chl b1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list b1 part cEMPTY f0
+ (~ ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) |- ((((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND F) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))) = (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))))
T c==> c~ creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c= c==> c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND cF * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c==> c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
- |- (((~ ((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ==> (((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F)) = (((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F))
T c= c==> c~ c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF c= c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF
+ ((packing V) /\ ((saturated V) /\ (((leaf V) ul) /\ (((cc_ke V) ul) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) |- (((packing V) /\ ((saturated V) /\ (((leaf V) ul) /\ (((cc_ke V) ul) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) /\ (((cc_cell V) ul) = ((hull convex) (set_of_list ((cc_uh V) ul)))))
T c==> c/\ cpacking f0 c/\ csaturated f0 c/\ cleaf f0 f1 c= ccc_ke f0 f1 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c/\ c/\ cpacking f0 c/\ csaturated f0 c/\ cleaf f0 f1 c= ccc_ke f0 f1 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * part ccc_cell f0 f1 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- ((\V. (!ul. (((cc_ke V) ul) = (((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0))))))) V)
T * / ! c= ccc_ke b0 b1 cCOND creal_lt chl ccc_uh b0 b1 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0
- |- (~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0)))
T c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0
+ (((cc_ke V) ul) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) |- (((mcell4 V) ((cc_uh V) ul)) = ((hull convex) (set_of_list ((cc_uh V) ul))))
T c==> c= ccc_ke f0 f1 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * part cmcell4 f0 ccc_uh f0 f1 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND T) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul)))))
T c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND cT * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- (T = (~ ((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))
T c= cT c~ c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
+ |- (((!ul. (((cc_cell V) ul) = (((mcell ((cc_ke V) ul)) V) ((cc_uh V) ul)))) ==> ((\ul. (((cc_cell V) ul) = (((mcell ((cc_ke V) ul)) V) ((cc_uh V) ul)))) ul)) = ((\ul. (((cc_cell V) ul) = (((mcell ((cc_ke V) ul)) V) ((cc_uh V) ul)))) ul))
T c= c==> ! c= * * part ccc_cell f0 b0 * * * part cmcell ccc_ke f0 b0 f0 ccc_uh f0 b0 * / c= * * part ccc_cell f0 b0 * * * part cmcell ccc_ke f0 b0 f0 ccc_uh f0 b0 f1 * / c= * * part ccc_cell f0 b0 * * * part cmcell ccc_ke f0 b0 f0 ccc_uh f0 b0 f1
+ |- ((\ul. (((cc_cell V) ul) = (((mcell ((cc_ke V) ul)) V) ((cc_uh V) ul)))) ul)
T * / c= * * part ccc_cell f0 b0 * * * part cmcell ccc_ke f0 b0 f0 ccc_uh f0 b0 f1
+ |- (((!V. (!ul. (((cc_ke V) ul) = (((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0))))))) ==> ((\V. (!ul. (((cc_ke V) ul) = (((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0))))))) V)) = ((\V. (!ul. (((cc_ke V) ul) = (((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0))))))) V))
T c= c==> ! ! c= ccc_ke b0 b1 cCOND creal_lt chl ccc_uh b0 b1 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 * / ! c= ccc_ke b0 b1 cCOND creal_lt chl ccc_uh b0 b1 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0 * / ! c= ccc_ke b0 b1 cCOND creal_lt chl ccc_uh b0 b1 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f0
+ |- (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 (BIT1 _0)))) = F)
T c= c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cF
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ |- (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F)
T c= c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF
- |- (((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF
+ |- ((\i. (!V. (!ul. ((((mcell i) V) ul) = (((COND (i = (NUMERAL _0))) ((mcell0 V) ul)) (((COND (i = (NUMERAL (BIT1 _0)))) ((mcell1 V) ul)) (((COND (i = (NUMERAL (BIT0 (BIT1 _0))))) ((mcell2 V) ul)) (((COND (i = (NUMERAL (BIT1 (BIT1 _0))))) ((mcell3 V) ul)) ((mcell4 V) ul))))))))) i)
T * / ! ! c= * * * part cmcell b0 b1 b2 * * * part cCOND c= b0 cNUMERAL c_0 * * part cmcell0 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT1 c_0 * * part cmcell1 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT0 cBIT1 c_0 * * part cmcell2 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT1 cBIT1 c_0 * * part cmcell3 b1 b2 * * part cmcell4 b1 b2 f0
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
+ |- ((\ul. (((cc_ke V) ul) = (((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))))) ul)
T * / c= ccc_ke f0 b0 cCOND creal_lt chl ccc_uh f0 b0 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f1
- |- ((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0)))) /\ ((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0))))) /\ (~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 (BIT1 _0)))))))
T c/\ c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 c/\ c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (~ ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))
T c~ c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
+ |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ |- ((((packing V) /\ ((saturated V) /\ (((leaf V) ul) /\ (((cc_ke V) ul) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))))) ==> (((cc_cell V) ul) = ((hull convex) (set_of_list ((cc_uh V) ul))))) = T)
T c= c==> c/\ cpacking f0 c/\ csaturated f0 c/\ cleaf f0 f1 c= ccc_ke f0 f1 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * part ccc_cell f0 f1 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 cT
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
+ |- ((\V. (!ul. (((cc_cell V) ul) = (((mcell ((cc_ke V) ul)) V) ((cc_uh V) ul))))) V)
T * / ! c= * * part ccc_cell b0 b1 * * * part cmcell ccc_ke b0 b1 b0 ccc_uh b0 b1 f0
+ |- ((((((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))) = ((((cc_ke V) ul) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))))
T c= c==> c= cCOND creal_lt chl ccc_uh f0 f1 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c==> c= ccc_ke f0 f1 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- (((!ul. (((mcell4 V) ul) = (((COND ((real_lt (hl ul)) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ul))) EMPTY))) ==> ((\ul. (((mcell4 V) ul) = (((COND ((real_lt (hl ul)) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ul))) EMPTY))) ul)) = ((\ul. (((mcell4 V) ul) = (((COND ((real_lt (hl ul)) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ul))) EMPTY))) ul))
T c= c==> ! c= * * part cmcell4 f0 b0 * * * part cCOND creal_lt chl b0 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list b0 part cEMPTY * / c= * * part cmcell4 f0 b0 * * * part cCOND creal_lt chl b0 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list b0 part cEMPTY f1 * / c= * * part cmcell4 f0 b0 * * * part cCOND creal_lt chl b0 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list b0 part cEMPTY f1
- ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) |- ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0)))
T c==> c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0
+ |- (((!ul. (((cc_ke V) ul) = (((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))))) ==> ((\ul. (((cc_ke V) ul) = (((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))))) ul)) = ((\ul. (((cc_ke V) ul) = (((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))))) ul))
T c= c==> ! c= ccc_ke f0 b0 cCOND creal_lt chl ccc_uh f0 b0 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 * / c= ccc_ke f0 b0 cCOND creal_lt chl ccc_uh f0 b0 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f1 * / c= ccc_ke f0 b0 cCOND creal_lt chl ccc_uh f0 b0 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 f1
- |- ((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0))) /\ ((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0)))) /\ ((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0))))) /\ (~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 (BIT1 _0))))))))
T c/\ c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0 c/\ c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 c/\ c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (((~ ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ==> (((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F)) = (((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F))
T c= c==> c~ c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF c= c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF
- ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0))) |- ((NUMERAL (BIT1 _0)) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))
T c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 c= cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
+ |- ((~ ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))))
T c==> c~ creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c==> c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- (((~ ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul)))))) = ((((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ==> (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul)))))) /\ ((~ ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))))))
T c= c==> c~ creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c==> c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c/\ c==> creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c==> c~ creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c==> c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
- |- (~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0))))
T c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0
+ ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) |- ((((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))) = (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND T) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))))
T c==> creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c= c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND cT * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND F) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul)))))
T c==> c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND cF * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 (BIT1 _0)))) |- ((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))
T c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
+ |- ((\ul. ((((mcell i) V) ul) = (((COND (i = (NUMERAL _0))) ((mcell0 V) ul)) (((COND (i = (NUMERAL (BIT1 _0)))) ((mcell1 V) ul)) (((COND (i = (NUMERAL (BIT0 (BIT1 _0))))) ((mcell2 V) ul)) (((COND (i = (NUMERAL (BIT1 (BIT1 _0))))) ((mcell3 V) ul)) ((mcell4 V) ul))))))) ul)
T * / c= * * * part cmcell f0 f1 b0 * * * part cCOND c= f0 cNUMERAL c_0 * * part cmcell0 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT1 c_0 * * part cmcell1 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT0 cBIT1 c_0 * * part cmcell2 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT1 cBIT1 c_0 * * part cmcell3 f1 b0 * * part cmcell4 f1 b0 f2
+ |- ((((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))) = (((((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))))
T c= c==> c= cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c==> c= cCOND creal_lt chl ccc_uh f0 f1 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
- |- (((~ ((NUMERAL _0) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ==> (((NUMERAL _0) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F)) = (((NUMERAL _0) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F))
T c= c==> c~ c= cNUMERAL c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= c= cNUMERAL c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF c= c= cNUMERAL c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF
- |- (((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F)
T c= c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF
+ ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) |- ((((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND T) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))) = (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))))
T c==> creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c= c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND cT * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
+ |- (((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul)))) = (((mcell4 V) ((cc_uh V) ul)) = ((hull convex) (set_of_list ((cc_uh V) ul)))))
T c= c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c= * * part cmcell4 f0 ccc_uh f0 f1 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- (((((COND ((real_lt (hl ((cc_uh V) ul))) sqrt2)) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul)))))
T c==> c= cCOND creal_lt chl ccc_uh f0 f1 csqrt2 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0 cF
+ |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0))))) /\ (~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 (BIT1 _0))))))
T c/\ c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((!ul. ((((mcell i) V) ul) = (((COND (i = (NUMERAL _0))) ((mcell0 V) ul)) (((COND (i = (NUMERAL (BIT1 _0)))) ((mcell1 V) ul)) (((COND (i = (NUMERAL (BIT0 (BIT1 _0))))) ((mcell2 V) ul)) (((COND (i = (NUMERAL (BIT1 (BIT1 _0))))) ((mcell3 V) ul)) ((mcell4 V) ul))))))) ==> ((\ul. ((((mcell i) V) ul) = (((COND (i = (NUMERAL _0))) ((mcell0 V) ul)) (((COND (i = (NUMERAL (BIT1 _0)))) ((mcell1 V) ul)) (((COND (i = (NUMERAL (BIT0 (BIT1 _0))))) ((mcell2 V) ul)) (((COND (i = (NUMERAL (BIT1 (BIT1 _0))))) ((mcell3 V) ul)) ((mcell4 V) ul))))))) ul)) = ((\ul. ((((mcell i) V) ul) = (((COND (i = (NUMERAL _0))) ((mcell0 V) ul)) (((COND (i = (NUMERAL (BIT1 _0)))) ((mcell1 V) ul)) (((COND (i = (NUMERAL (BIT0 (BIT1 _0))))) ((mcell2 V) ul)) (((COND (i = (NUMERAL (BIT1 (BIT1 _0))))) ((mcell3 V) ul)) ((mcell4 V) ul))))))) ul))
T c= c==> ! c= * * * part cmcell f0 f1 b0 * * * part cCOND c= f0 cNUMERAL c_0 * * part cmcell0 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT1 c_0 * * part cmcell1 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT0 cBIT1 c_0 * * part cmcell2 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT1 cBIT1 c_0 * * part cmcell3 f1 b0 * * part cmcell4 f1 b0 * / c= * * * part cmcell f0 f1 b0 * * * part cCOND c= f0 cNUMERAL c_0 * * part cmcell0 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT1 c_0 * * part cmcell1 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT0 cBIT1 c_0 * * part cmcell2 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT1 cBIT1 c_0 * * part cmcell3 f1 b0 * * part cmcell4 f1 b0 f2 * / c= * * * part cmcell f0 f1 b0 * * * part cCOND c= f0 cNUMERAL c_0 * * part cmcell0 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT1 c_0 * * part cmcell1 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT0 cBIT1 c_0 * * part cmcell2 f1 b0 * * * part cCOND c= f0 cNUMERAL cBIT1 cBIT1 c_0 * * part cmcell3 f1 b0 * * part cmcell4 f1 b0 f2
+ |- (~ ((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))
T c~ c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
- |- (((NUMERAL _0) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F)
T c= c= cNUMERAL c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF
- |- (((~ ((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F)) = (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) = F))
T c= c==> c~ c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF c= c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cF
- (packing V) |- ((packing V) = T)
T c==> cpacking f0 c= cpacking f0 cT
+ (~ ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) |- ((~ ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) /\ (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))))
T c==> c~ creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c/\ c~ creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c==> c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- (((!V. (!ul. (((mcell4 V) ul) = (((COND ((real_lt (hl ul)) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ul))) EMPTY)))) ==> ((\V. (!ul. (((mcell4 V) ul) = (((COND ((real_lt (hl ul)) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ul))) EMPTY)))) V)) = ((\V. (!ul. (((mcell4 V) ul) = (((COND ((real_lt (hl ul)) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ul))) EMPTY)))) V))
T c= c==> ! ! c= * * part cmcell4 b0 b1 * * * part cCOND creal_lt chl b1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list b1 part cEMPTY * / ! c= * * part cmcell4 b0 b1 * * * part cCOND creal_lt chl b1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list b1 part cEMPTY f0 * / ! c= * * part cmcell4 b0 b1 * * * part cCOND creal_lt chl b1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list b1 part cEMPTY f0
+ (((cc_ke V) ul) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) |- ((((mcell4 V) ((cc_uh V) ul)) = ((hull convex) (set_of_list ((cc_uh V) ul)))) = (((cc_cell V) ul) = ((hull convex) (set_of_list ((cc_uh V) ul)))))
T c==> c= ccc_ke f0 f1 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= c= * * part cmcell4 f0 ccc_uh f0 f1 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c= * * part ccc_cell f0 f1 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- ((((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) (NUMERAL (BIT1 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))) = ((((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) ==> (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul)))))) /\ ((~ ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ==> (((NUMERAL (BIT1 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) ==> ((((COND ((real_lt (hl ((cc_uh V) ul))) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ((cc_uh V) ul)))) EMPTY) = ((hull convex) (set_of_list ((cc_uh V) ul))))))))
T c= c==> c= cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c/\ c==> creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 c==> c~ creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 c==> c= cNUMERAL cBIT1 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= * * * part cCOND creal_lt chl ccc_uh f0 f1 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list ccc_uh f0 f1 part cEMPTY * * part chull part cconvex * part cset_of_list ccc_uh f0 f1
+ |- ((\ul. (((mcell4 V) ul) = (((COND ((real_lt (hl ul)) (sqrt (real_of_num (NUMERAL (BIT0 (BIT1 _0))))))) ((hull convex) (set_of_list ul))) EMPTY))) ul)
T * / c= * * part cmcell4 f0 b0 * * * part cCOND creal_lt chl b0 csqrt creal_of_num cNUMERAL cBIT0 cBIT1 c_0 * * part chull part cconvex * part cset_of_list b0 part cEMPTY f1
+ |- (((!V. (!ul. (((cc_cell V) ul) = (((mcell ((cc_ke V) ul)) V) ((cc_uh V) ul))))) ==> ((\V. (!ul. (((cc_cell V) ul) = (((mcell ((cc_ke V) ul)) V) ((cc_uh V) ul))))) V)) = ((\V. (!ul. (((cc_cell V) ul) = (((mcell ((cc_ke V) ul)) V) ((cc_uh V) ul))))) V))
T c= c==> ! ! c= * * part ccc_cell b0 b1 * * * part cmcell ccc_ke b0 b1 b0 ccc_uh b0 b1 * / ! c= * * part ccc_cell b0 b1 * * * part cmcell ccc_ke b0 b1 b0 ccc_uh b0 b1 f0 * / ! c= * * part ccc_cell b0 b1 * * * part cmcell ccc_ke b0 b1 b0 ccc_uh b0 b1 f0
+ |- (((!i. (!V. (!ul. ((((mcell i) V) ul) = (((COND (i = (NUMERAL _0))) ((mcell0 V) ul)) (((COND (i = (NUMERAL (BIT1 _0)))) ((mcell1 V) ul)) (((COND (i = (NUMERAL (BIT0 (BIT1 _0))))) ((mcell2 V) ul)) (((COND (i = (NUMERAL (BIT1 (BIT1 _0))))) ((mcell3 V) ul)) ((mcell4 V) ul))))))))) ==> ((\i. (!V. (!ul. ((((mcell i) V) ul) = (((COND (i = (NUMERAL _0))) ((mcell0 V) ul)) (((COND (i = (NUMERAL (BIT1 _0)))) ((mcell1 V) ul)) (((COND (i = (NUMERAL (BIT0 (BIT1 _0))))) ((mcell2 V) ul)) (((COND (i = (NUMERAL (BIT1 (BIT1 _0))))) ((mcell3 V) ul)) ((mcell4 V) ul))))))))) i)) = ((\i. (!V. (!ul. ((((mcell i) V) ul) = (((COND (i = (NUMERAL _0))) ((mcell0 V) ul)) (((COND (i = (NUMERAL (BIT1 _0)))) ((mcell1 V) ul)) (((COND (i = (NUMERAL (BIT0 (BIT1 _0))))) ((mcell2 V) ul)) (((COND (i = (NUMERAL (BIT1 (BIT1 _0))))) ((mcell3 V) ul)) ((mcell4 V) ul))))))))) i))
T c= c==> ! ! ! c= * * * part cmcell b0 b1 b2 * * * part cCOND c= b0 cNUMERAL c_0 * * part cmcell0 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT1 c_0 * * part cmcell1 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT0 cBIT1 c_0 * * part cmcell2 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT1 cBIT1 c_0 * * part cmcell3 b1 b2 * * part cmcell4 b1 b2 * / ! ! c= * * * part cmcell b0 b1 b2 * * * part cCOND c= b0 cNUMERAL c_0 * * part cmcell0 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT1 c_0 * * part cmcell1 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT0 cBIT1 c_0 * * part cmcell2 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT1 cBIT1 c_0 * * part cmcell3 b1 b2 * * part cmcell4 b1 b2 f0 * / ! ! c= * * * part cmcell b0 b1 b2 * * * part cCOND c= b0 cNUMERAL c_0 * * part cmcell0 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT1 c_0 * * part cmcell1 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT0 cBIT1 c_0 * * part cmcell2 b1 b2 * * * part cCOND c= b0 cNUMERAL cBIT1 cBIT1 c_0 * * part cmcell3 b1 b2 * * part cmcell4 b1 b2 f0
- ((leaf V) ul) |- (((leaf V) ul) = T)
T c==> cleaf f0 f1 c= cleaf f0 f1 cT
- |- (F = (~ T))
T c= cF c~ cT
- |- (T = ((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0))) /\ ((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0)))) /\ ((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0))))) /\ (~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 (BIT1 _0)))))))))
T c= cT c/\ c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0 c/\ c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 c/\ c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- (saturated V) |- ((saturated V) = T)
T c==> csaturated f0 c= csaturated f0 cT
- |- (~ ((NUMERAL _0) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))
T c~ c= cNUMERAL c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
- |- (((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0))))) ==> (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0)))) = F)) = (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0)))) = F))
T c= c==> c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c= c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cF c= c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cF
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- |- (((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0)))) ==> (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0))) = F)) = (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT1 _0))) = F))
T c= c==> c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 c= c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cF c= c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cF
- |- (~ ((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))))
T c~ c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
- |- ((~ T) = F)
T c= c~ cT cF
- ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0)))) |- ((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))
T c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
- |- (~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0)))))
T c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- ((T /\ t) = t)
T c= c/\ cT f0 f0
- ((NUMERAL (BIT0 (BIT1 _0))) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) |- ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0))))
T c==> c= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- ((NUMERAL _0) = (NUMERAL (BIT0 (BIT0 (BIT1 _0))))) |- ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0))
T c==> c= cNUMERAL c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0 c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0
- |- (~ (~ T))
T c~ c~ cT
- ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0)) |- ((NUMERAL _0) = (NUMERAL (BIT0 (BIT0 (BIT1 _0)))))
T c==> c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0 c= cNUMERAL c_0 cNUMERAL cBIT0 cBIT0 cBIT1 c_0
- |- (((~ ((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0))) ==> (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0)) = F)) = (((NUMERAL (BIT0 (BIT0 (BIT1 _0)))) = (NUMERAL _0)) = F))
T c= c==> c~ c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0 c= c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0 cF c= c= cNUMERAL cBIT0 cBIT0 cBIT1 c_0 cNUMERAL c_0 cF
