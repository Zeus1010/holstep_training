N Aq1.FST_FLITER_MEM_SPLIT_NORMAL_F
C |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))) ==> F)))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ cMEM f4 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cMEM f4 cfilter / c~ cMEM b0 f2 cflatten f1 cF
D TRUTH
A |- T
T cT
D I_DEF
A |- (I = (\x. x))
T c= part cI / b0
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D MEM_APPEND
A |- (!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))))
T c= cMEM f0 cAPPEND f1 f2 c\/ cMEM f0 f1 cMEM f0 f2
D Fan.POWER_0
A |- (!f. (((POWER f) (NUMERAL _0)) = I))
T c= * * part cPOWER f0 cNUMERAL c_0 part cI
D Seq.mem_seq1
A |- (!x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y))))
T c= cMEM f0 cCONS f1 cNIL c= f0 f1
D Seq.mem_rev
A |- (!s. (!x. (((MEM x) (rev s)) = ((MEM x) s))))
T c= cMEM f0 crev f1 cMEM f0 f1
D Seq.mem_filter
A |- (!a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))))
T c= cMEM f0 cfilter f1 f2 c/\ * f1 f0 cMEM f0 f2
D Seq.cat_uniq
A |- (!s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))))
T c= cuniq ccat f0 f1 c/\ cuniq f0 c/\ c~ chas / cMEM b0 f0 f1 cuniq f1
D Seq2.APPEND_cat
A |- (APPEND = cat)
T c= part cAPPEND part ccat
D Seq2.mem_next_el
A |- (!x. (!s. (((MEM x) s) ==> ((MEM ((next_el s) x)) s))))
T c==> cMEM f0 f1 cMEM cnext_el f1 f0 f1
D Seq2.mem_prev_el
A |- (!x. (!s. (((MEM x) s) ==> ((MEM ((prev_el s) x)) s))))
T c==> cMEM f0 f1 cMEM cprev_el f1 f0 f1
D Seq2.next_prev_id
A |- (!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x))))
T c==> cuniq f0 c= cnext_el f0 cprev_el f0 f1 f1
D List_hypermap.uniq_find_face
A |- (!d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d)))))
T c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1
D List_hypermap.mem_find_face_imp_faces_eq
A |- (!d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2))))))
T c==> c/\ cuniq clist_of_darts f0 cMEM f1 cfind_face f0 f2 c= cfind_face f0 f1 cfind_face f0 f2
D Tame_defs2.good_list
A |- (!L. ((good_list L) = ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))))))))
T c= cgood_list f0 c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0
D Tame_defs2.normal_list
A |- (!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))))))))
T c= cnormal_list f0 f1 c/\ cuniq cflatten f1 c/\ call / c~ c= b0 cNIL f1 c/\ call * part cf_last f0 f1 c/\ call * part cloop_list f0 f1 ! c==> cMEM b0 cflatten f1 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f1
D Tame_defs2.split_normal_list
A |- (!L. (!r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))))
T c= csplit_normal_list f0 f1 f2 f3 f4 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b5 b6 cAPPEND b7 b4 cAPPEND cCONS b1 cNIL cAPPEND cbetwn f1 b1 f3 cCONS f3 cNIL cAPPEND cCONS b0 cNIL cAPPEND cbetwn f1 b0 f4 cCONS f4 cNIL cflatten cmap b3 b4 cbetwn f2 f3 b1 / cmap / cPOWER * part cn_list f0 b4 b3 cupt cNUMERAL cBIT1 c_0 * b2 cFST b3 / csizel cfilter / c= b3 b2 cflatten f0 cnext_el f1 f4 cnext_el f1 f3
D Tame_defs2.ntrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= cntrans f0 f1 f2 f3 f4 cFST cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.rtrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))))
T c= crtrans f0 f1 f2 f3 f4 cSND cPOWER * * part ctransform_list f0 f3 f4 c, f1 f2
D Tame_defs2.ytrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x)))))))
T c= cytrans f0 f1 f2 f3 f4 cl'y f0 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.ztrans
A |- (!L. (!N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))))
T c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
D Tame_defs2.marked_list
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))))))
T c= cmarked_list f0 f1 f2 f3 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM f3 f2 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c/\ c= cnext_el f2 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 f3
D Tame_list.REVERSE_rev
A |- (REVERSE = rev)
T c= part cREVERSE part crev
D Tame_list.betwn_mem
A |- (!f. (!u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f))))))
T c==> cMEM f0 cbetwn f1 f2 f3 cMEM f0 f1
D Tame_list.uniq_flatten_uniq
A |- (!L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s))))
T c==> c/\ cuniq cflatten f0 cMEM f1 f0 cuniq f1
D Ohcgkfu.uniq_betwn
A |- (!r. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq (((betwn r) z) y))))
T c==> c/\ cuniq f0 c/\ cMEM f1 f0 c/\ cMEM f2 f0 c~ c= f1 f2 cuniq cbetwn f0 f1 f2
D Ohcgkfu.uniq_append_betwn
A |- (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL)))))
T c==> c/\ cuniq f0 c/\ cMEM f1 f0 c/\ cMEM f2 f0 c~ c= f1 f2 cuniq cAPPEND cCONS f1 cNIL cAPPEND cbetwn f0 f1 f2 cCONS f2 cNIL
D Pplhulj.marked_list_of_dart
A |- (!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))))
T c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0
D Hojodcm.ytrans_mem_rtrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2
D Hojodcm.mem_ztrans_rtrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2
D Hojodcm.z_not_eq_ytrans_v0
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cytrans f0 f1 f2 f3 cNUMERAL c_0
D Hojodcm.PPLHULJ_v0
A |- (!L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= f4 cfind_face f0 f3 c= f5 cnext_el f4 f3 c/\ cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f4 c/\ cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c< cindexf f5 cytrans f0 f1 f2 f3 cNUMERAL c_0 f4 cindexf f5 cztrans f0 f1 f2 f3 cNUMERAL c_0 f4
D Aq1.node_betwn_not_in_flatten
A |- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))
T c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ c= cl'y f0 f2 f3 f4 c/\ c= cl'z f0 f1 f2 f3 f5 c/\ c= cfind_face f0 f3 f6 cMEM f7 cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f4 f5 c~ cMEM f7 cflatten f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((all (\l. (~ (l = NIL)))) L), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f0 f6 f1 f4 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 c= f7 cprev_el f1 cl'z f0 f6 f1 f4 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
- |- ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)
T * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
- |- ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))
T c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ |- (((!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) ==> ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i)) = ((\i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))) i))
T c= c==> ! c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4 * / c= cntrans f0 f1 f2 f3 b0 cFST cPOWER * * part ctransform_list f0 f3 b0 c, f1 f2 f4
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) /\ (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c/\ c= cprev_el f1 f3 f4 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 c= f7 cprev_el f1 cl'z f0 f3 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
+ |- ((\f. (!u. (!v. (!w. (((MEM w) (((betwn f) u) v)) ==> ((MEM w) f)))))) r)
T * / ! ! ! c==> cMEM b3 cbetwn b0 b1 b2 cMEM b3 b0 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) /\ (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c/\ c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 c==> cMEM f7 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
+ |- (((!s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) ==> ((\s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) s1)) = ((\s1. (!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2)))))) s1))
T c= c==> ! ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 * / ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 f0 * / ! c= cuniq ccat b0 b1 c/\ cuniq b0 c/\ c~ chas / cMEM b2 b0 b1 cuniq b1 f0
+ |- ((~ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))))) = T)
T c= c~ c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ cMEM f4 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cMEM f4 cfilter / c~ cMEM b0 f2 cflatten f1 cT
+ |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ztrans L) N) r) x) (NUMERAL _0))) = ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) (((((ztrans L) N) r) x) (NUMERAL _0))))
T c= c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (uniq r), (((prev_el r) z) = z1), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- (((((next_el r) z1) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))) = (((uniq r) ==> (((next_el r) ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))) = (((((ztrans L) N) r) x) (NUMERAL _0)))) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> cuniq f0 c==> c= cprev_el f0 f1 f2 c==> c= cztrans f3 f4 f0 f5 cNUMERAL c_0 f1 c= c==> c= cnext_el f0 f2 f1 c==> c\/ cMEM f6 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn cfind_face f3 f7 f7 cnext_el f0 cprev_el f0 cl'z f3 f4 f0 f5 c\/ c= f6 cnext_el f0 f7 c\/ cMEM f6 cbetwn f0 cnext_el f0 f7 cprev_el f0 cl'z f3 f4 f0 f5 c= f6 cprev_el f0 cl'z f3 f4 f0 f5 c~ c/\ c~ cMEM f6 f0 cMEM f6 cflatten f4 c==> c==> cuniq f0 c= cnext_el f0 cprev_el f0 cztrans f3 f4 f0 f5 cNUMERAL c_0 cztrans f3 f4 f0 f5 cNUMERAL c_0 c==> c\/ cMEM f6 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn cfind_face f3 f7 f7 cnext_el f0 cprev_el f0 cl'z f3 f4 f0 f5 c\/ c= f6 cnext_el f0 f7 c\/ cMEM f6 cbetwn f0 cnext_el f0 f7 cprev_el f0 cl'z f3 f4 f0 f5 c= f6 cprev_el f0 cl'z f3 f4 f0 f5 c~ c/\ c~ cMEM f6 f0 cMEM f6 cflatten f4
- |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ |- (((!x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) ==> ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x)) = ((\x. (!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2)))))) x))
T c= c==> ! ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0 * / ! ! c= cMEM b0 cAPPEND b1 b2 c\/ cMEM b0 b1 cMEM b0 b2 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (~ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 cs_flag_list f0 f3 f1 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cMEM f4 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 c~ cMEM f4 cfilter / c~ cMEM b0 f1 cflatten f3
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ |- (((!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) ==> ((\N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) N)) = ((\N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))))) N))
T c= c==> ! ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 * / ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 f1 * / ! ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c/\ c~ cfinal_list f0 b1 c/\ c= b3 cfind_face f0 b2 c= b4 cnext_el b3 b2 c/\ cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 c/\ cMEM cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 c< cindexf b4 cytrans f0 b0 b1 b2 cNUMERAL c_0 b3 cindexf b4 cztrans f0 b0 b1 b2 cNUMERAL c_0 b3 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c/\ cMEM f2 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 c= f7 cprev_el f1 cl'z f0 f3 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
- |- ((\f. (!y. (!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))))))) f)
T * / ! ! ! ! ! ! ! c==> c/\ cgood_list b4 c/\ cgood_list_nodes b4 c/\ cmarked_list b4 b5 b6 b7 c/\ c~ cfinal_list b4 b6 c/\ c= cl'y b4 b6 b7 b1 c/\ c= cl'z b4 b5 b6 b7 b2 c/\ c= cfind_face b4 b7 b0 cMEM b3 cflatten cmap / cmap / cPOWER * part cn_list b4 b8 b8 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b8 cFST b8 cflatten b4 cbetwn b0 b1 b2 c~ cMEM b3 cflatten b5 f0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (~ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ c= cnext_el f1 f2 cf_list f0 f2 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 cs_flag_list f0 f3 f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cMEM f4 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 c~ cMEM f4 cfilter / c~ cMEM b0 f1 cflatten f3
+ ((MEM d) (((betwn r) ((next_el r) y)) z1)) |- (((MEM d) (((betwn r) ((next_el r) y)) z1)) = T)
T c==> cMEM f0 cbetwn f1 cnext_el f1 f2 f3 c= cMEM f0 cbetwn f1 cnext_el f1 f2 f3 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((MEM z) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> cMEM f5 f2 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
- |- (((!L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) ==> ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)) = ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L))
T c= c==> ! ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0 * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
- (good_list L), (good_list_nodes L) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))) = (\r. (!x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0 / ! c==> c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((((MEM z) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))) = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> cmarked_list f0 f2 f1 f3 c= c==> cMEM f4 f1 c==> c\/ cMEM f5 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f5 cnext_el f1 f6 c\/ cMEM f5 cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 c= f5 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f5 f1 cMEM f5 cflatten f2 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 f3 c~ cfinal_list f0 f1 cMEM cztrans f0 f2 f1 f3 cNUMERAL c_0 f1 c==> c\/ cMEM f5 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f5 cnext_el f1 f6 c\/ cMEM f5 cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 c= f5 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f5 f1 cMEM f5 cflatten f2
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
- |- ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y)))
T c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 c\/ c= f7 cnext_el f1 f3 c\/ cMEM f7 cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 c= f7 cprev_el f1 cl'z f0 f4 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f4
+ |- ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)
T * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
- |- ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))))
T c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))))) L))
T c= c==> ! ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0 * / ! ! ! c= cmarked_list b0 b1 b2 b3 c/\ cis_restricted chypermap_of_list b0 c/\ cnormal_list b0 b1 c/\ cMEM b2 b1 c/\ cMEM b3 b2 c/\ cLET / cLET_END c/\ call part cuniq b4 call / c> csizel cfilter * part cMEM b5 b4 cNUMERAL cBIT1 c_0 cflatten b4 cquotient_list b0 b1 c/\ c= cnext_el b2 b3 cf_list b0 b3 c/\ cLET / cLET_END cfinal_list b0 b4 cfind_list b1 ce_list b3 c/\ c==> cfinal_list b0 b2 cflag_list b0 b1 c==> c~ cfinal_list b0 b2 cs_flag_list b0 b1 b2 b3 f0
+ (~ (z = y)), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- (((!x'. (((\w. (((next_el ((find_face L) x)) x) = w)) x') ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))) ==> ((?w. (((next_el ((find_face L) x)) x) = w)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))) = ((?w. (((next_el ((find_face L) x)) x) = w)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq clist_of_darts f2 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cprev_el f3 f0 f5 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f6 f3 f4 f0 c==> cMEM f1 f3 c==> cMEM f0 f3 c==> cmarked_list f2 f6 f3 f4 c= c==> ! c==> * / c= cnext_el cfind_face f2 f4 f4 b1 b0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b2 b1 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b2 cFST b1 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f7 cnext_el f3 f1 c\/ cMEM f7 cbetwn f3 cnext_el f3 f1 f5 c= f7 f5 c~ c/\ c~ cMEM f7 f3 cMEM f7 cflatten f6 c==> c? / c= cnext_el cfind_face f2 f4 f4 b0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f7 cnext_el f3 f1 c\/ cMEM f7 cbetwn f3 cnext_el f3 f1 f5 c= f7 f5 c~ c/\ c~ cMEM f7 f3 cMEM f7 cflatten f6 c==> c? / c= cnext_el cfind_face f2 f4 f4 b0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f7 cnext_el f3 f1 c\/ cMEM f7 cbetwn f3 cnext_el f3 f1 f5 c= f7 f5 c~ c/\ c~ cMEM f7 f3 cMEM f7 cflatten f6
+ ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) = T)
T c==> cmarked_list f0 f1 f2 f3 c= cmarked_list f0 f1 f2 f3 cT
+ (~ (z = y)), (~ ((final_list L) r)), (uniq r), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL))))) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq f3 c==> cuniq clist_of_darts f2 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cprev_el f3 f0 f5 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f6 f3 f4 f0 c==> cMEM f1 f3 c==> cMEM f0 f3 c==> cmarked_list f2 f6 f3 f4 c==> c==> c/\ cuniq f3 c/\ cMEM f0 f3 c/\ cMEM f1 f3 c~ c= f0 f1 cuniq cAPPEND cCONS f0 cNIL cAPPEND cbetwn f3 f0 f1 cCONS f1 cNIL c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f7 cnext_el f3 f1 c\/ cMEM f7 cbetwn f3 cnext_el f3 f1 f5 c= f7 f5 c~ c/\ c~ cMEM f7 f3 cMEM f7 cflatten f6
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cztrans f0 f1 f2 f3 cNUMERAL c_0 f2 cT
- |- ((((find_face L) x) = f) = ((\f. (((find_face L) x) = f)) f))
T c= c= cfind_face f0 f1 f2 * / c= cfind_face f0 f1 b0 f2
+ (good_list L), (good_list_nodes L), ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))), ((((marked_list L) N) r) x) |- F
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ c~ cfinal_list f0 f1 c/\ cMEM f2 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f4 f1 f3 cMEM f2 cfilter / c~ cMEM b0 f1 cflatten f4 c==> cmarked_list f0 f4 f1 f3 cF
- ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((\w. (((next_el ((find_face L) x)) x) = w)) w) /\ (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c/\ * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 c= f7 cprev_el f1 cl'z f0 f3 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
- (is_restricted (hypermap_of_list L)) |- ((is_restricted (hypermap_of_list L)) = T)
T c==> cis_restricted chypermap_of_list f0 c= cis_restricted chypermap_of_list f0 cT
+ (d = z1), (((prev_el r) z) = z1), ((MEM z) r) |- (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))
T c==> c= f0 f1 c==> c= cprev_el f2 f3 f1 c==> cMEM f3 f2 c~ c/\ c~ cMEM f0 f2 cMEM f0 cflatten f4
- |- (((!x'. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) x') ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))) ==> ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))) = ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))))
T c= c==> ! c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b1 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b1 c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- (((!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) ==> ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)) = ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x))
T c= c==> ! c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3 * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ (((prev_el r) z) = z1), ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1))), ((MEM y) r), ((MEM z) r) |- (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))
T c==> c= cprev_el f0 f1 f2 c==> c\/ c= f3 cnext_el f0 f4 c\/ cMEM f3 cbetwn f0 cnext_el f0 f4 f2 c= f3 f2 c==> cMEM f4 f0 c==> cMEM f1 f0 c~ c/\ c~ cMEM f3 f0 cMEM f3 cflatten f5
+ ((((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))), ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1))), ((MEM y) r) |- (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))
T c==> c==> c\/ cMEM f0 cbetwn f1 cnext_el f1 f2 f3 c= f0 f3 c~ c/\ c~ cMEM f0 f1 cMEM f0 cflatten f4 c==> c\/ c= f0 cnext_el f1 f2 c\/ cMEM f0 cbetwn f1 cnext_el f1 f2 f3 c= f0 f3 c==> cMEM f2 f1 c~ c/\ c~ cMEM f0 f1 cMEM f0 cflatten f4
+ (((prev_el r) z) = z1), ((MEM z) r) |- (~ ((~ ((MEM z1) r)) /\ ((MEM z1) (flatten N))))
T c==> c= cprev_el f0 f1 f2 c==> cMEM f1 f0 c~ c/\ c~ cMEM f2 f0 cMEM f2 cflatten f3
- |- (((!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))) ==> ((\d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))) d)) = ((\d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))) d))
T c= c==> ! ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ c= cl'y b1 b3 b4 f0 c/\ c= cl'z b1 b2 b3 b4 f1 c/\ c= cfind_face b1 b4 f2 cMEM b0 cflatten cmap / cmap / cPOWER * part cn_list b1 b5 b5 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn f2 f0 f1 c~ cMEM b0 cflatten b2 * / ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ c= cl'y b1 b3 b4 f0 c/\ c= cl'z b1 b2 b3 b4 f1 c/\ c= cfind_face b1 b4 f2 cMEM b0 cflatten cmap / cmap / cPOWER * part cn_list b1 b5 b5 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn f2 f0 f1 c~ cMEM b0 cflatten b2 f3 * / ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ c= cl'y b1 b3 b4 f0 c/\ c= cl'z b1 b2 b3 b4 f1 c/\ c= cfind_face b1 b4 f2 cMEM b0 cflatten cmap / cmap / cPOWER * part cn_list b1 b5 b5 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn f2 f0 f1 c~ cMEM b0 cflatten b2 f3
- |- ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all)))
T c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
+ (~ (z = y)), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((((MEM y) f) /\ (((MEM z) f) /\ ((((indexf w) y) f) < (((indexf w) z) f)))) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq clist_of_darts f2 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cprev_el f3 f0 f5 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f6 f3 f4 f0 c==> c= cfind_face f2 f4 f7 c==> cMEM f1 f3 c==> cMEM f0 f3 c==> cmarked_list f2 f6 f3 f4 c==> c/\ cMEM f1 f7 c/\ cMEM f0 f7 c< cindexf f8 f1 f7 cindexf f8 f0 f7 c==> c\/ cMEM f9 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f9 cnext_el f3 f1 c\/ cMEM f9 cbetwn f3 cnext_el f3 f1 f5 c= f9 f5 c~ c/\ c~ cMEM f9 f3 cMEM f9 cflatten f6
+ |- ((\x. (((MEM x) (rev s)) = ((MEM x) s))) x)
T * / c= cMEM b0 crev f0 cMEM b0 f0 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c/\ cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
+ |- ((!r. (!x. (~ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))))))) = T)
T c= ! ! c~ c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ cMEM f2 cFST csplit_normal_list f0 b0 cfind_face f0 cl'y f0 b0 b1 cl'y f0 b0 b1 cprev_el b0 cl'z f0 f1 b0 b1 cMEM f2 cfilter / c~ cMEM b2 b0 cflatten f1 cT
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c==> c/\ cgood_list f1 c/\ cgood_list_nodes f1 c/\ cmarked_list f1 f0 f2 f3 c~ cfinal_list f1 f2 cMEM cytrans f1 f0 f2 f3 cNUMERAL c_0 f2 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
+ (~ (z = y)), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((MEM y) f) /\ (((MEM z) f) /\ ((((indexf w) y) f) < (((indexf w) z) f)))), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((((MEM y) f) /\ (((MEM z) f) /\ ((((indexf w) y) f) < (((indexf w) z) f)))) /\ ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq clist_of_darts f2 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cprev_el f3 f0 f5 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f6 f3 f4 f0 c==> c= cfind_face f2 f4 f7 c==> c/\ cMEM f1 f7 c/\ cMEM f0 f7 c< cindexf f8 f1 f7 cindexf f8 f0 f7 c==> cMEM f1 f3 c==> cMEM f0 f3 c==> cmarked_list f2 f6 f3 f4 c/\ c/\ cMEM f1 f7 c/\ cMEM f0 f7 c< cindexf f8 f1 f7 cindexf f8 f0 f7 c==> c\/ cMEM f9 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f9 cnext_el f3 f1 c\/ cMEM f9 cbetwn f3 cnext_el f3 f1 f5 c= f9 f5 c~ c/\ c~ cMEM f9 f3 cMEM f9 cflatten f6
+ |- ((\d. (!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) d))))) x)
T * / ! c==> cuniq clist_of_darts b1 cuniq cfind_face b1 b0 f0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 c~ c= cztrans f0 f1 b0 b1 cNUMERAL c_0 cytrans f0 f1 b0 b1 cNUMERAL c_0
- (uniq (((betwn f) y) z)) |- ((uniq (((betwn f) y) z)) = T)
T c==> cuniq cbetwn f0 f1 f2 c= cuniq cbetwn f0 f1 f2 cT
+ |- (((!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) ==> ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r)) = ((\r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r))))))) r))
T c= c==> ! ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2 * / ! ! c= crtrans f0 f1 b0 b1 b2 cSND cPOWER * * part ctransform_list f0 b1 b2 c, f1 b0 f2
+ |- (((!s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) ==> ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s)) = ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s))
T c= c==> ! ! c= cMEM b1 crev b0 cMEM b1 b0 * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0 * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0
+ |- (((!L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) ==> ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L)) = ((\L. (!N. (((normal_list L) N) = ((uniq (flatten N)) /\ (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))))))) L))
T c= c==> ! ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0 * / ! c= cnormal_list b0 b1 c/\ cuniq cflatten b1 c/\ call / c~ c= b2 cNIL b1 c/\ call * part cf_last b0 b1 c/\ call * part cloop_list b0 b1 ! c==> cMEM b2 cflatten b1 cSUBSET * * part cnode chypermap_of_list b0 b2 * part cset_of_list cflatten b1 f0
- |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) = ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1))
T c= c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (!z1. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 ! c==> * / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b1 b0 c==> cMEM f5 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL c~ c/\ c~ cMEM f5 f1 cMEM f5 cflatten f4
+ (~ (z = y)), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((?w. (((next_el ((find_face L) x)) x) = w)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq clist_of_darts f2 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cprev_el f3 f0 f5 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f6 f3 f4 f0 c==> cMEM f1 f3 c==> cMEM f0 f3 c==> cmarked_list f2 f6 f3 f4 c==> c? / c= cnext_el cfind_face f2 f4 f4 b0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f7 cnext_el f3 f1 c\/ cMEM f7 cbetwn f3 cnext_el f3 f1 f5 c= f7 f5 c~ c/\ c~ cMEM f7 f3 cMEM f7 cflatten f6
+ ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((((next_el ((find_face L) x)) x) = w) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))) = ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c= c==> c= cnext_el cfind_face f0 f1 f1 f2 c==> c\/ cMEM f3 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 f5 c\/ c= f3 cnext_el f6 f4 c\/ cMEM f3 cbetwn f6 cnext_el f6 f4 f7 c= f3 f7 c~ c/\ c~ cMEM f3 f6 cMEM f3 cflatten f8 c==> c\/ cMEM f3 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 f5 c\/ c= f3 cnext_el f6 f4 c\/ cMEM f3 cbetwn f6 cnext_el f6 f4 f7 c= f3 f7 c~ c/\ c~ cMEM f3 f6 cMEM f3 cflatten f8
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (~ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c/\ c= cnext_el f1 f2 cf_list f0 f2 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 cs_flag_list f0 f3 f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cMEM f4 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 c~ cMEM f4 cfilter / c~ cMEM b0 f1 cflatten f3
- |- ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)
T * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
+ (uniq (flatten N)) |- ((uniq (flatten N)) = T)
T c==> cuniq cflatten f0 c= cuniq cflatten f0 cT
+ |- ((\x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))) x)
T * / ! c= cztrans f0 f1 f2 b0 b1 cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 f3
- |- (((!y. (!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))))) ==> ((\y. (!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))))) y)) = ((\y. (!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))))) y))
T c= c==> ! ! ! ! ! ! ! c==> c/\ cgood_list b3 c/\ cgood_list_nodes b3 c/\ cmarked_list b3 b4 b5 b6 c/\ c~ cfinal_list b3 b5 c/\ c= cl'y b3 b5 b6 b0 c/\ c= cl'z b3 b4 b5 b6 b1 c/\ c= cfind_face b3 b6 f0 cMEM b2 cflatten cmap / cmap / cPOWER * part cn_list b3 b7 b7 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b7 cFST b7 cflatten b3 cbetwn f0 b0 b1 c~ cMEM b2 cflatten b4 * / ! ! ! ! ! ! c==> c/\ cgood_list b3 c/\ cgood_list_nodes b3 c/\ cmarked_list b3 b4 b5 b6 c/\ c~ cfinal_list b3 b5 c/\ c= cl'y b3 b5 b6 b0 c/\ c= cl'z b3 b4 b5 b6 b1 c/\ c= cfind_face b3 b6 f0 cMEM b2 cflatten cmap / cmap / cPOWER * part cn_list b3 b7 b7 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b7 cFST b7 cflatten b3 cbetwn f0 b0 b1 c~ cMEM b2 cflatten b4 f1 * / ! ! ! ! ! ! c==> c/\ cgood_list b3 c/\ cgood_list_nodes b3 c/\ cmarked_list b3 b4 b5 b6 c/\ c~ cfinal_list b3 b5 c/\ c= cl'y b3 b5 b6 b0 c/\ c= cl'z b3 b4 b5 b6 b1 c/\ c= cfind_face b3 b6 f0 cMEM b2 cflatten cmap / cmap / cPOWER * part cn_list b3 b7 b7 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b7 cFST b7 cflatten b3 cbetwn f0 b0 b1 c~ cMEM b2 cflatten b4 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 c= f7 cprev_el f1 cl'z f0 f3 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cmarked_list f0 f6 f1 f4 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 c= f7 cprev_el f1 cl'z f0 f6 f1 f4 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
- |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cmarked_list f0 f6 f1 f2 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f4 f3 c==> cMEM f3 f1 c==> cMEM f5 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((uniq (((betwn f) y) z)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cl'z f0 f6 f1 f4 f2 c==> c= cfind_face f0 f4 f7 c==> cMEM f5 f1 c==> cMEM f2 f1 c==> cmarked_list f0 f6 f1 f4 c==> cuniq cbetwn f7 f5 f2 c==> c\/ cMEM f8 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f7 f5 f2 c\/ c= f8 cnext_el f1 f5 c\/ cMEM f8 cbetwn f1 cnext_el f1 f5 f3 c= f8 f3 c~ c/\ c~ cMEM f8 f1 cMEM f8 cflatten f6
- |- ((((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))) = T)
T c= c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cT
- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) |- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1)
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4
+ |- (((!l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) ==> ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1)) = ((\l1. (!l2. (((MEM x) ((APPEND l1) l2)) = (((MEM x) l1) \/ ((MEM x) l2))))) l1))
T c= c==> ! ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1 * / ! c= cMEM f0 cAPPEND b0 b1 c\/ cMEM f0 b0 cMEM f0 b1 f1
+ |- (!L. (!N. (!r. (!x. (~ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))))))))
T c~ c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ cMEM f4 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cMEM f4 cfilter / c~ cMEM b0 f2 cflatten f1
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (~ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f4 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 c~ cMEM f4 cfilter / c~ cMEM b0 f1 cflatten f2
+ ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4
- |- (MAP = map)
T c= part cMAP part cmap
- |- (LENGTH = sizel)
T c= part cLENGTH part csizel
+ (((next_el r) z1) = z), (((prev_el r) z) = z1), (((((l'z L) N) r) x) = z) |- (((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))) = ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c= cnext_el f0 f1 f2 c==> c= cprev_el f0 f2 f1 c==> c= cl'z f3 f4 f0 f5 f2 c= c==> c\/ cMEM f6 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn cfind_face f3 f7 f7 f2 c\/ c= f6 cnext_el f0 f7 c\/ cMEM f6 cbetwn f0 cnext_el f0 f7 f1 c= f6 f1 c~ c/\ c~ cMEM f6 f0 cMEM f6 cflatten f4 c==> c\/ cMEM f6 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f3 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f3 cbetwn cfind_face f3 f7 f7 cnext_el f0 cprev_el f0 cl'z f3 f4 f0 f5 c\/ c= f6 cnext_el f0 f7 c\/ cMEM f6 cbetwn f0 cnext_el f0 f7 cprev_el f0 cl'z f3 f4 f0 f5 c= f6 cprev_el f0 cl'z f3 f4 f0 f5 c~ c/\ c~ cMEM f6 f0 cMEM f6 cflatten f4
+ |- (((!r. (!z. (!y. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL)))))))) ==> ((\r. (!z. (!y. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL)))))))) r)) = ((\r. (!z. (!y. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL)))))))) r))
T c= c==> ! ! ! c==> c/\ cuniq b0 c/\ cMEM b1 b0 c/\ cMEM b2 b0 c~ c= b1 b2 cuniq cAPPEND cCONS b1 cNIL cAPPEND cbetwn b0 b1 b2 cCONS b2 cNIL * / ! ! c==> c/\ cuniq b0 c/\ cMEM b1 b0 c/\ cMEM b2 b0 c~ c= b1 b2 cuniq cAPPEND cCONS b1 cNIL cAPPEND cbetwn b0 b1 b2 cCONS b2 cNIL f0 * / ! ! c==> c/\ cuniq b0 c/\ cMEM b1 b0 c/\ cMEM b2 b0 c~ c= b1 b2 cuniq cAPPEND cCONS b1 cNIL cAPPEND cbetwn b0 b1 b2 cCONS b2 cNIL f0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f4 f1 f2 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 c\/ c= f7 cnext_el f1 f3 c\/ cMEM f7 cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 c= f7 cprev_el f1 cl'z f0 f4 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f4
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))) ==> F))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f4 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 c==> cMEM f4 cfilter / c~ cMEM b0 f1 cflatten f2 cF
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> cMEM f5 f2 c==> cMEM f6 f2 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
+ |- ((\s. (((uniq (flatten N)) /\ ((MEM s) N)) ==> (uniq s))) r)
T * / c==> c/\ cuniq cflatten f0 cMEM b0 f0 cuniq b0 f1
+ |- (((!x. (!s. (((MEM x) s) ==> ((MEM ((prev_el s) x)) s)))) ==> ((\x. (!s. (((MEM x) s) ==> ((MEM ((prev_el s) x)) s)))) z)) = ((\x. (!s. (((MEM x) s) ==> ((MEM ((prev_el s) x)) s)))) z))
T c= c==> ! ! c==> cMEM b0 b1 cMEM cprev_el b1 b0 b1 * / ! c==> cMEM b0 b1 cMEM cprev_el b1 b0 b1 f0 * / ! c==> cMEM b0 b1 cMEM cprev_el b1 b0 b1 f0
+ |- (((!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) d2))) ==> (((find_face L) y) = ((find_face L) d2))))) ==> ((\d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) d2))) ==> (((find_face L) y) = ((find_face L) d2))))) x)) = ((\d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) d2))) ==> (((find_face L) y) = ((find_face L) d2))))) x))
T c= c==> ! ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 * / ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 f1 * / ! c==> c/\ cuniq clist_of_darts b1 cMEM f0 cfind_face b1 b0 c= cfind_face b1 f0 cfind_face b1 b0 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 c= f7 cprev_el f1 cl'z f0 f3 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
- |- (((!ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ==> ((\ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ss1)) = ((\ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ss1))
T c= c==> ! ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 * / ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 f0 * / ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 f0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f2 clist_of_darts f0 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ |- ((\L. (!s. (((uniq (flatten L)) /\ ((MEM s) L)) ==> (uniq s)))) N)
T * / ! c==> c/\ cuniq cflatten b0 cMEM b1 b0 cuniq b1 f0
+ (~ (z = y)), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq clist_of_darts f2 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el cfind_face f2 f4 f4 f5 c==> c= cprev_el f3 f0 f6 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f7 f3 f4 f0 c==> cMEM f1 f3 c==> cMEM f0 f3 c==> cmarked_list f2 f7 f3 f4 c==> c\/ cMEM f8 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f8 cnext_el f3 f1 c\/ cMEM f8 cbetwn f3 cnext_el f3 f1 f6 c= f8 f6 c~ c/\ c~ cMEM f8 f3 cMEM f8 cflatten f7
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((uniq r) /\ ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f4 f5 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c/\ cuniq f2 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
+ |- (((!z. (!y. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL))))))) ==> ((\z. (!y. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL))))))) z)) = ((\z. (!y. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL))))))) z))
T c= c==> ! ! c==> c/\ cuniq f0 c/\ cMEM b0 f0 c/\ cMEM b1 f0 c~ c= b0 b1 cuniq cAPPEND cCONS b0 cNIL cAPPEND cbetwn f0 b0 b1 cCONS b1 cNIL * / ! c==> c/\ cuniq f0 c/\ cMEM b0 f0 c/\ cMEM b1 f0 c~ c= b0 b1 cuniq cAPPEND cCONS b0 cNIL cAPPEND cbetwn f0 b0 b1 cCONS b1 cNIL f1 * / ! c==> c/\ cuniq f0 c/\ cMEM b0 f0 c/\ cMEM b1 f0 c~ c= b0 b1 cuniq cAPPEND cCONS b0 cNIL cAPPEND cbetwn f0 b0 b1 cCONS b1 cNIL f1
+ |- ((\N. (!r. (!x. (!i. ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)))))) N)
T * / ! ! ! c= cztrans f0 b0 b1 b2 b3 cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))))), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f3 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> c/\ call * part cf_last f0 f2 c/\ call * part cloop_list f0 f2 ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cMEM f3 clist_of_darts f0 c==> cMEM f1 f2 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f2 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f3 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f6 c\/ cMEM f7 cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
+ |- (((!x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) ==> ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) (NUMERAL _0)))) = ((\x. (!s. ((uniq s) ==> (((next_el s) ((prev_el s) x)) = x)))) (((((ztrans L) N) r) x) (NUMERAL _0))))
T c= c==> ! ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0 * / ! c==> cuniq b1 c= cnext_el b1 cprev_el b1 b0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ |- ((\L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))) L)
T * / ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= cl'y b0 b2 b3 f0 c/\ c= cl'z b0 b1 b2 b3 f1 c/\ c= cfind_face b0 b3 f2 cMEM f3 cflatten cmap / cmap / cPOWER * part cn_list b0 b4 b4 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn f2 f0 f1 c~ cMEM f3 cflatten b1 f4
- |- (((!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) ==> ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)) = ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i))
T c= c==> ! c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4 * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ |- (((!s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))) ==> ((\s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))) s2)) = ((\s2. ((uniq ((cat s1) s2)) = ((uniq s1) /\ ((~ ((has (\x. ((MEM x) s1))) s2)) /\ (uniq s2))))) s2))
T c= c==> ! c= cuniq ccat f0 b0 c/\ cuniq f0 c/\ c~ chas / cMEM b1 f0 b0 cuniq b0 * / c= cuniq ccat f0 b0 c/\ cuniq f0 c/\ c~ chas / cMEM b1 f0 b0 cuniq b0 f1 * / c= cuniq ccat f0 b0 c/\ cuniq f0 c/\ c~ chas / cMEM b1 f0 b0 cuniq b0 f1
- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))) = (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c= c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (~ (z = y)), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el ((find_face L) x)) x) = w), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq clist_of_darts f2 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cnext_el cfind_face f2 f4 f4 f5 c==> c= cprev_el f3 f0 f6 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f7 f3 f4 f0 c==> c= cfind_face f2 f4 f8 c==> cMEM f1 f3 c==> cMEM f0 f3 c==> cmarked_list f2 f7 f3 f4 c==> c==> c/\ cgood_list f2 c/\ cgood_list_nodes f2 c/\ cmarked_list f2 f7 f3 f4 c/\ c~ cfinal_list f2 f3 c/\ c= f8 cfind_face f2 f4 c= f5 cnext_el f8 f4 c/\ cMEM cytrans f2 f7 f3 f4 cNUMERAL c_0 f8 c/\ cMEM cztrans f2 f7 f3 f4 cNUMERAL c_0 f8 c< cindexf f5 cytrans f2 f7 f3 f4 cNUMERAL c_0 f8 cindexf f5 cztrans f2 f7 f3 f4 cNUMERAL c_0 f8 c==> c\/ cMEM f9 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f9 cnext_el f3 f1 c\/ cMEM f9 cbetwn f3 cnext_el f3 f1 f6 c= f9 f6 c~ c/\ c~ cMEM f9 f3 cMEM f9 cflatten f7
+ (~ ((MEM z1) r)), (((prev_el r) z) = z1), ((MEM z) r) |- ((((MEM z) r) ==> ((MEM ((prev_el r) z)) r)) ==> F)
T c==> c~ cMEM f0 f1 c==> c= cprev_el f1 f2 f0 c==> cMEM f2 f1 c==> c==> cMEM f2 f1 cMEM cprev_el f1 f2 f1 cF
- |- ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)
T * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f6 c==> cMEM f7 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
- |- ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))
T c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0
- |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- (((find_face L) x) = f) |- ((((find_face L) x) = f) /\ (?f. (((find_face L) x) = f)))
T c==> c= cfind_face f0 f1 f2 c/\ c= cfind_face f0 f1 f2 c? / c= cfind_face f0 f1 b0
- (good_list L), (good_list_nodes L) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) = (\r. (!x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 / ! c==> c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) /\ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))))), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> c/\ cuniq clist_of_darts f0 c/\ call / c~ c= b0 cNIL f0 ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ |- (((!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) ==> ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N)) = ((\N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L)))))) N))
T c= c==> ! ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1 * / ! ! c==> cmarked_list f0 b0 b1 b2 cMEM b2 clist_of_darts f0 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
- |- (((!x'. (((\y. ((((l'y L) r) x) = y)) x') ==> (?y. ((((l'y L) r) x) = y)))) ==> ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y)))) = ((?y. ((((l'y L) r) x) = y)) ==> (?y. ((((l'y L) r) x) = y))))
T c= c==> ! c==> * / c= cl'y f0 f1 f2 b1 b0 c? / c= cl'y f0 f1 f2 b1 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0 c==> c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- ((((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))) = (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c= c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((MEM d) (flatten N)), ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z)))), ((((marked_list L) N) r) x) |- (T = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))) ==> F))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> c= cfind_face f0 f2 f6 c==> cMEM f7 cflatten f4 c==> cMEM f7 cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f3 f5 c==> cmarked_list f0 f4 f1 f2 c= cT c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f4 f1 f2 c/\ c~ cfinal_list f0 f1 c/\ c= cl'y f0 f1 f2 f3 c/\ c= cl'z f0 f4 f1 f2 f5 c/\ c= cfind_face f0 f2 f6 cMEM f7 cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f6 f3 f5 c~ cMEM f7 cflatten f4 cF
+ ((MEM y) r) |- (~ ((~ ((MEM ((next_el r) y)) r)) /\ ((MEM ((next_el r) y)) (flatten N))))
T c==> cMEM f0 f1 c~ c/\ c~ cMEM cnext_el f1 f0 f1 cMEM cnext_el f1 f0 cflatten f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((next_el r) z1) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cprev_el f2 f4 f5 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c= cnext_el f2 f5 f4 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((\y. ((((l'y L) r) x) = y)) y) ==> (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> * / c= cl'y f0 f1 f2 b0 f4 c==> cMEM f5 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL c~ c/\ c~ cMEM f5 f1 cMEM f5 cflatten f3
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 c= f7 cprev_el f1 cl'z f0 f6 f1 f4 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ ((~ ((MEM ((next_el r) y)) r)) /\ ((MEM ((next_el r) y)) (flatten N))), ((MEM y) r) |- F
T c==> c/\ c~ cMEM cnext_el f0 f1 f0 cMEM cnext_el f0 f1 cflatten f2 c==> cMEM f1 f0 cF
+ |- ((\x. (!s. (((MEM x) s) ==> ((MEM ((prev_el s) x)) s)))) z)
T * / ! c==> cMEM b0 b1 cMEM cprev_el b1 b0 b1 f0
- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)) |- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x))
T c==> c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4 c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f1 f6 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cMEM f2 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ (~ (z = y)), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((((next_el ((find_face L) x)) x) = w) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq clist_of_darts f2 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cprev_el f3 f0 f5 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f6 f3 f4 f0 c==> cMEM f1 f3 c==> cMEM f0 f3 c==> cmarked_list f2 f6 f3 f4 c==> c= cnext_el cfind_face f2 f4 f4 f7 c==> c\/ cMEM f8 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f8 cnext_el f3 f1 c\/ cMEM f8 cbetwn f3 cnext_el f3 f1 f5 c= f8 f5 c~ c/\ c~ cMEM f8 f3 cMEM f8 cflatten f6
- |- (((!f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) ==> ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f)) = ((\f. (!n. (((POWER f) (SUC n)) = (((POWER f) n) o f)))) f))
T c= c==> ! ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0 * / ! c= * * part cPOWER b0 cSUC b1 * * part co * * part cPOWER b0 b1 b0 f0
+ |- (((!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ==> ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1)) = ((\ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))) ram1))
T c= c==> ! ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3 * / ! c= csplit_normal_list f0 f1 f2 b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b7 b8 cAPPEND b9 b6 cAPPEND cCONS b3 cNIL cAPPEND cbetwn f1 b3 b0 cCONS b0 cNIL cAPPEND cCONS b2 cNIL cAPPEND cbetwn f1 b2 b1 cCONS b1 cNIL cflatten cmap b5 b6 cbetwn f2 b0 b3 / cmap / cPOWER * part cn_list f0 b6 b5 cupt cNUMERAL cBIT1 c_0 * b4 cFST b5 / csizel cfilter / c= b5 b4 cflatten f0 cnext_el f1 b1 cnext_el f1 b0 f3
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((((marked_list L) N) r) x) |- (((~ (z = y)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))) = ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cl'y f0 f1 f2 f3 c==> c= cl'z f0 f4 f1 f2 f5 c==> cmarked_list f0 f4 f1 f2 c= c==> c~ c= f5 f3 c==> c\/ cMEM f6 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f5 c\/ c= f6 cnext_el f1 f3 c\/ cMEM f6 cbetwn f1 cnext_el f1 f3 f7 c= f6 f7 c~ c/\ c~ cMEM f6 f1 cMEM f6 cflatten f4 c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f4 f1 f2 c~ cfinal_list f0 f1 c~ c= cztrans f0 f4 f1 f2 cNUMERAL c_0 cytrans f0 f4 f1 f2 cNUMERAL c_0 c==> c\/ cMEM f6 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 f5 c\/ c= f6 cnext_el f1 f3 c\/ cMEM f6 cbetwn f1 cnext_el f1 f3 f7 c= f6 f7 c~ c/\ c~ cMEM f6 f1 cMEM f6 cflatten f4
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))))))) ==> (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (~ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f2 c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cMEM f4 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 c~ cMEM f4 cfilter / c~ cMEM b0 f1 cflatten f2
+ |- (((!w. (((MEM w) (((betwn r) ((next_el r) y)) z1)) ==> ((MEM w) r))) ==> ((\w. (((MEM w) (((betwn r) ((next_el r) y)) z1)) ==> ((MEM w) r))) d)) = ((\w. (((MEM w) (((betwn r) ((next_el r) y)) z1)) ==> ((MEM w) r))) d))
T c= c==> ! c==> cMEM b0 cbetwn f0 cnext_el f0 f1 f2 cMEM b0 f0 * / c==> cMEM b0 cbetwn f0 cnext_el f0 f1 f2 cMEM b0 f0 f3 * / c==> cMEM b0 cbetwn f0 cnext_el f0 f1 f2 cMEM b0 f0 f3
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))) = T)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c= c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0 cT
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((!x'. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) x') ==> (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))) ==> ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))) = ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cl'y f0 f1 f2 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f4 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f4 c==> cMEM f2 f1 c==> cMEM f1 f4 c==> cnormal_list f0 f4 c==> cs_flag_list f0 f4 f1 f2 c==> cmarked_list f0 f4 f1 f2 c= c==> ! c==> * / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b1 b0 c==> cMEM f5 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b1 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b2 cFST b1 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL c~ c/\ c~ cMEM f5 f1 cMEM f5 cflatten f4 c==> c? / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 c==> cMEM f5 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL c~ c/\ c~ cMEM f5 f1 cMEM f5 cflatten f4 c==> c? / c= cprev_el f1 cztrans f0 f4 f1 f2 cNUMERAL c_0 b0 c==> cMEM f5 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f1 cprev_el f1 cl'z f0 f4 f1 f2 cAPPEND cCONS cnext_el f1 f3 cNIL cAPPEND cbetwn f1 cnext_el f1 f3 cprev_el f1 cl'z f0 f4 f1 f2 cCONS cprev_el f1 cl'z f0 f4 f1 f2 cNIL c~ c/\ c~ cMEM f5 f1 cMEM f5 cflatten f4
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) /\ ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c/\ ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
+ (d = ((next_el r) y)), ((MEM y) r) |- ((d = ((next_el r) y)) /\ (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> c= f0 cnext_el f1 f2 c==> cMEM f2 f1 c/\ c= f0 cnext_el f1 f2 c~ c/\ c~ cMEM f0 f1 cMEM f0 cflatten f3
+ |- (((!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) ==> ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r)) = ((\r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))) r))
T c= c==> ! ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2 * / ! c==> cmarked_list f0 f1 b0 b1 cMEM b1 clist_of_darts f0 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c? / c= cztrans f0 f3 f1 f2 cNUMERAL c_0 b0 c==> cMEM f6 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL c~ c/\ c~ cMEM f6 f1 cMEM f6 cflatten f3
+ |- ((\r. (((uniq r) /\ (((MEM y) r) /\ (((MEM z) r) /\ (~ (y = z))))) ==> (uniq (((betwn r) y) z)))) f)
T * / c==> c/\ cuniq b0 c/\ cMEM f0 b0 c/\ cMEM f1 b0 c~ c= f0 f1 cuniq cbetwn b0 f0 f1 f2
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b2 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ (d = ((next_el r) y)) |- ((~ ((~ ((MEM ((next_el r) y)) r)) /\ ((MEM ((next_el r) y)) (flatten N)))) = (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> c= f0 cnext_el f1 f2 c= c~ c/\ c~ cMEM cnext_el f1 f2 f1 cMEM cnext_el f1 f2 cflatten f3 c~ c/\ c~ cMEM f0 f1 cMEM f0 cflatten f3
+ |- (?y. ((((l'y L) r) x) = y))
T c? / c= cl'y f0 f1 f2 b0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x)))), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (~ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cMEM f3 f1 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f4 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 c~ cMEM f4 cfilter / c~ cMEM b0 f1 cflatten f2
+ |- ((\w. (((MEM w) (((betwn r) ((next_el r) y)) z1)) ==> ((MEM w) r))) d)
T * / c==> cMEM b0 cbetwn f0 cnext_el f0 f1 f2 cMEM b0 f0 f3
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((((marked_list L) N) r) x) |- (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f3 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f0 f2 f1 f3 c==> call / c~ c= b0 cNIL f2 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f1 c==> c= cnext_el f1 f5 f4 c==> cMEM f4 f1 c==> cMEM f6 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f6 c\/ cMEM f7 cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
- |- ((!d. t) = t)
T c= ! f0 f0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L))) = T)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c= c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0 cT
+ |- ((\x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))) x)
T * / ! c= crtrans f0 f1 f2 b0 b1 cSND cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ |- ((\r. (!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x))))))))))))) r)
T * / ! c= cmarked_list f0 f1 b0 b1 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM b0 f1 c/\ cMEM b1 b0 c/\ cLET / cLET_END c/\ call part cuniq b2 call / c> csizel cfilter * part cMEM b3 b2 cNUMERAL cBIT1 c_0 cflatten b2 cquotient_list f0 f1 c/\ c= cnext_el b0 b1 cf_list f0 b1 c/\ cLET / cLET_END cfinal_list f0 b2 cfind_list f1 ce_list b1 c/\ c==> cfinal_list f0 b0 cflag_list f0 f1 c==> c~ cfinal_list f0 b0 cs_flag_list f0 f1 b0 b1 f2
+ |- ((\f. (!x. (((LET f) x) = (f x)))) f)
T * / ! c= cLET b0 b1 * b0 b1 f0
+ (((next_el ((find_face L) x)) x) = w), (((find_face L) x) = f) |- (((next_el f) x) = w)
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c==> c= cfind_face f0 f1 f3 c= cnext_el f3 f1 f2
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 c= f7 cprev_el f1 cl'z f0 f3 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
+ |- (((!L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) ==> ((\L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) L)) = ((\L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) L))
T c= c==> ! ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 * / ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 f0 * / ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 f0
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1), ((((l'y L) r) x) = y), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) y)) NIL)) ((APPEND (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 cztrans f0 f3 f1 f2 cNUMERAL c_0 f4 c==> c= cl'y f0 f1 f2 f5 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> cMEM f6 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 f5 cNIL cAPPEND cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL c~ c/\ c~ cMEM f6 f1 cMEM f6 cflatten f3
- |- (((!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) ==> ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)) = ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N))
T c= c==> ! ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1 * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
+ |- (((!N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) ==> ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N)) = ((\N. (!r. (!x. (!i. ((((((rtrans L) N) r) x) i) = (SND (((POWER ((transform_list L) x)) i) (N , r)))))))) N))
T c= c==> ! ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1 * / ! ! ! c= crtrans f0 b0 b1 b2 b3 cSND cPOWER * * part ctransform_list f0 b2 b3 c, b0 b1 f1
+ |- ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)
T * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) /\ (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c/\ cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
+ (((prev_el r) z) = z1), ((~ ((MEM z1) r)) /\ ((MEM z1) (flatten N))), ((MEM z) r) |- (((~ ((MEM z1) r)) /\ ((MEM z1) (flatten N))) /\ F)
T c==> c= cprev_el f0 f1 f2 c==> c/\ c~ cMEM f2 f0 cMEM f2 cflatten f3 c==> cMEM f1 f0 c/\ c/\ c~ cMEM f2 f0 cMEM f2 cflatten f3 cF
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 c= f7 cprev_el f1 cl'z f0 f6 f1 f4 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 cMEM cytrans f0 f1 f2 f3 cNUMERAL c_0 f2 cT
- |- ((\x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))) x)
T * / c= ctransform_list f0 b0 c, f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f2 c, f1 f2 c, b6 cSND b5 cAPPEND creplace f2 cCONS cSND b5 cNIL f1 cCONS cFST b5 cNIL csplit_normal_list f0 f2 b4 b1 b3 cfind_face f0 b1 cprev_el f2 b2 cl'z f0 f1 f2 b0 cl'y f0 f2 b0 f3
+ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((MEM z) r) /\ ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c/\ cMEM f5 f2 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cMEM f2 clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f0 f6 f1 f2 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f4 f3 c==> cMEM f3 f1 c==> cMEM f5 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ |- ((\L. (!N. (!r. (!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r))))))))) L)
T * / ! ! ! ! c= cntrans b0 b1 b2 b3 b4 cFST cPOWER * * part ctransform_list b0 b3 b4 c, b1 b2 f0
+ |- (((!t. ((LET_END t) = t)) ==> ((\t. ((LET_END t) = t)) t)) = ((\t. ((LET_END t) = t)) t))
T c= c==> ! c= cLET_END b0 b0 * / c= cLET_END b0 b0 f0 * / c= cLET_END b0 b0 f0
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), (((all (\s. (~ (s = NIL)))) N) /\ (((all (f_last L)) N) /\ (((all (loop_list L)) N) /\ (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N)))))))), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f3 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> c/\ call / c~ c= b0 cNIL f2 c/\ call * part cf_last f0 f2 c/\ call * part cloop_list f0 f2 ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cMEM f3 clist_of_darts f0 c==> cMEM f1 f2 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f3 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f6 c\/ cMEM f7 cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
- |- ((?f. (((find_face L) x) = f)) ==> (?f. (((find_face L) x) = f)))
T c==> c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0
+ |- ((t ==> F) = (~ t))
T c= c==> f0 cF c~ f0
+ |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))) = ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0)))))
T c= c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0
+ |- (((((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))) = ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c= c==> c==> cmarked_list f0 f1 f2 f3 cMEM f3 clist_of_darts f0 c==> c\/ cMEM f4 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 c\/ c= f4 cnext_el f2 f5 c\/ cMEM f4 cbetwn f2 cnext_el f2 f5 cprev_el f2 cl'z f0 f1 f2 f3 c= f4 cprev_el f2 cl'z f0 f1 f2 f3 c~ c/\ c~ cMEM f4 f2 cMEM f4 cflatten f1 c==> c\/ cMEM f4 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 c\/ c= f4 cnext_el f2 f5 c\/ cMEM f4 cbetwn f2 cnext_el f2 f5 cprev_el f2 cl'z f0 f1 f2 f3 c= f4 cprev_el f2 cl'z f0 f1 f2 f3 c~ c/\ c~ cMEM f4 f2 cMEM f4 cflatten f1
+ |- (((!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) ==> ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i)) = ((\i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))) i))
T c= c==> ! c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4 * / c= cytrans f0 f1 f2 f3 b0 cl'y f0 crtrans f0 f1 f2 f3 b0 f3 f4
+ (uniq (list_of_darts L)) |- (((uniq ((find_face L) x)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))) = (((uniq (list_of_darts L)) ==> (uniq ((find_face L) x))) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))
T c==> cuniq clist_of_darts f0 c= c==> cuniq cfind_face f0 f1 c==> c\/ cMEM f2 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f4 cprev_el f4 cl'z f0 f5 f4 f1 c\/ c= f2 cnext_el f4 f3 c\/ cMEM f2 cbetwn f4 cnext_el f4 f3 cprev_el f4 cl'z f0 f5 f4 f1 c= f2 cprev_el f4 cl'z f0 f5 f4 f1 c~ c/\ c~ cMEM f2 f4 cMEM f2 cflatten f5 c==> c==> cuniq clist_of_darts f0 cuniq cfind_face f0 f1 c==> c\/ cMEM f2 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f3 f3 cnext_el f4 cprev_el f4 cl'z f0 f5 f4 f1 c\/ c= f2 cnext_el f4 f3 c\/ cMEM f2 cbetwn f4 cnext_el f4 f3 cprev_el f4 cl'z f0 f5 f4 f1 c= f2 cprev_el f4 cl'z f0 f5 f4 f1 c~ c/\ c~ cMEM f2 f4 cMEM f2 cflatten f5
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((s_flag_list L) N) r) x))))))), ((((marked_list L) N) r) x) |- (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (~ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cnormal_list f0 f2 c/\ cMEM f1 f2 c/\ cMEM f3 f1 c/\ cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c/\ c= cnext_el f1 f3 cf_list f0 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 cs_flag_list f0 f2 f1 f3 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f4 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 c~ cMEM f4 cfilter / c~ cMEM b0 f1 cflatten f2
+ |- (((!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))) ==> ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))) x)) = ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))) x))
T c= c==> ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= cl'y f0 f2 b0 f3 c/\ c= cl'z f0 f1 f2 b0 f4 c/\ c= cfind_face f0 b0 f5 cMEM f6 cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b1 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn f5 f3 f4 c~ cMEM f6 cflatten f1 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= cl'y f0 f2 b0 f3 c/\ c= cl'z f0 f1 f2 b0 f4 c/\ c= cfind_face f0 b0 f5 cMEM f6 cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b1 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn f5 f3 f4 c~ cMEM f6 cflatten f1 f7 * / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= cl'y f0 f2 b0 f3 c/\ c= cl'z f0 f1 f2 b0 f4 c/\ c= cfind_face f0 b0 f5 cMEM f6 cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b1 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b1 cflatten f0 cbetwn f5 f3 f4 c~ cMEM f6 cflatten f1 f7
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f3 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f3 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f1 c==> c= cnext_el f1 f5 f4 c==> cMEM f4 f1 c==> cMEM f6 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f6 c\/ cMEM f7 cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
+ |- ((\z. (!y. (!r. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq (((betwn r) z) y)))))) y)
T * / ! ! c==> c/\ cuniq b2 c/\ cMEM b0 b2 c/\ cMEM b1 b2 c~ c= b0 b1 cuniq cbetwn b2 b0 b1 f0
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
- (~ ((has (\x. ((MEM x) ((CONS z) NIL)))) ((cat (((betwn r) z) y)) ((CONS y) NIL)))) |- (((has (\x. ((MEM x) ((CONS z) NIL)))) ((cat (((betwn r) z) y)) ((CONS y) NIL))) = F)
T c==> c~ chas / cMEM b0 cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL c= chas / cMEM b0 cCONS f0 cNIL ccat cbetwn f1 f0 f2 cCONS f2 cNIL cF
+ |- ((\r. (!x. (!i. ((((((ytrans L) N) r) x) i) = (((l'y L) (((((rtrans L) N) r) x) i)) x))))) r)
T * / ! ! c= cytrans f0 f1 b0 b1 b2 cl'y f0 crtrans f0 f1 b0 b1 b2 b1 f2
+ |- ((\f. (((find_face L) x) = f)) ((find_face L) x))
T * / c= cfind_face f0 f1 b0 cfind_face f0 f1
+ (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((all (\l. (~ (l = NIL)))) L), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq cflatten f2 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f3 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f4 c==> cMEM f3 clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> call / c~ c= b0 cNIL f2 c==> cmarked_list f0 f2 f1 f3 c==> call * part cf_last f0 f2 c==> call * part cloop_list f0 f2 c==> ! c==> cMEM b0 cflatten f2 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f2 c==> cuniq f1 c==> c= cnext_el f1 f5 f4 c==> cMEM f4 f1 c==> cMEM f6 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f6 f6 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f6 c\/ cMEM f7 cbetwn f1 cnext_el f1 f6 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
+ |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))) r)
T * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= cl'y f0 b0 b1 f2 c/\ c= cl'z f0 f1 b0 b1 f3 c/\ c= cfind_face f0 b1 f4 cMEM f5 cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b2 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn f4 f2 f3 c~ cMEM f5 cflatten f1 f6
+ |- (((MEM d) (((betwn r) ((next_el r) y)) z1)) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> cMEM f0 cbetwn f1 cnext_el f1 f2 f3 c~ c/\ c~ cMEM f0 f1 cMEM f0 cflatten f4
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) ==> ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N)) = ((\N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))) N))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1 * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 b0 b1 b2 c~ cfinal_list f0 b1 cMEM cytrans f0 b0 b1 b2 cNUMERAL c_0 b1 f1
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))), ((((marked_list L) N) r) x) |- F
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cMEM f2 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f4 f1 f3 cMEM f2 cfilter / c~ cMEM b0 f1 cflatten f4 c==> cmarked_list f0 f4 f1 f3 cF
- |- ((\i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))) i)
T * / c= cl'z f0 cntrans f0 f1 f2 f3 b0 crtrans f0 f1 f2 f3 b0 f3 cztrans f0 f1 f2 f3 b0 f4
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f2 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
- |- ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)
T * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
- ((all (loop_list L)) N) |- (((all (loop_list L)) N) = T)
T c==> call * part cloop_list f0 f1 c= call * part cloop_list f0 f1 cT
+ (~ ((final_list L) r)), (uniq (((betwn f) y) z)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((uniq (((betwn f) y) z)) /\ ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq cbetwn f2 f3 f4 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f4 f5 c==> c= cl'y f0 f1 f6 f3 c==> c= cl'z f0 f7 f1 f6 f4 c==> c= cfind_face f0 f6 f2 c==> cMEM f3 f1 c==> cMEM f4 f1 c==> cmarked_list f0 f7 f1 f6 c/\ cuniq cbetwn f2 f3 f4 c==> c\/ cMEM f8 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f3 f4 c\/ c= f8 cnext_el f1 f3 c\/ cMEM f8 cbetwn f1 cnext_el f1 f3 f5 c= f8 f5 c~ c/\ c~ cMEM f8 f1 cMEM f8 cflatten f7
+ (((find_face L) y) = f) |- (((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))) = ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c= cfind_face f0 f1 f2 c= c==> c\/ cMEM f3 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn f2 f1 f4 c\/ c= f3 cnext_el f5 f1 c\/ cMEM f3 cbetwn f5 cnext_el f5 f1 f6 c= f3 f6 c~ c/\ c~ cMEM f3 f5 cMEM f3 cflatten f7 c==> c\/ cMEM f3 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f1 f1 f4 c\/ c= f3 cnext_el f5 f1 c\/ cMEM f3 cbetwn f5 cnext_el f5 f1 f6 c= f3 f6 c~ c/\ c~ cMEM f3 f5 cMEM f3 cflatten f7
+ |- ((\x. (!y. (((MEM x) ((CONS y) NIL)) = (x = y)))) x)
T * / ! c= cMEM b0 cCONS b1 cNIL c= b0 b1 f0
+ |- (((!x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) ==> ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x)) = ((\x. (!i. ((((((ntrans L) N) r) x) i) = (FST (((POWER ((transform_list L) x)) i) (N , r)))))) x))
T c= c==> ! ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3 * / ! c= cntrans f0 f1 f2 b0 b1 cFST cPOWER * * part ctransform_list f0 b0 b1 c, f1 f2 f3
+ (good_list L), (good_list_nodes L), (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))) |- F
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ cMEM f4 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cMEM f4 cfilter / c~ cMEM b0 f2 cflatten f1 cF
+ (~ (z = y)), (~ ((final_list L) r)), (uniq r), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), ((MEM y) r), ((MEM z) r), ((((marked_list L) N) r) x) |- ((~ (z = y)) /\ ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq f3 c==> cuniq clist_of_darts f2 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cprev_el f3 f0 f5 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f6 f3 f4 f0 c==> cMEM f1 f3 c==> cMEM f0 f3 c==> cmarked_list f2 f6 f3 f4 c/\ c~ c= f0 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f7 cnext_el f3 f1 c\/ cMEM f7 cbetwn f3 cnext_el f3 f1 f5 c= f7 f5 c~ c/\ c~ cMEM f7 f3 cMEM f7 cflatten f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 c= f7 cprev_el f1 cl'z f0 f3 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 b0 cNUMERAL c_0 cytrans f0 f1 f2 b0 cNUMERAL c_0
- ((all (\s. (~ (s = NIL)))) N) |- (((all (\s. (~ (s = NIL)))) N) = T)
T c==> call / c~ c= b0 cNIL f0 c= call / c~ c= b0 cNIL f0 cT
+ |- ((!L. (!N. (!r. (!x. (~ ((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))))))))) = (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N)))))))) ==> F))))))
T c= ! ! ! ! c~ c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ cMEM f0 cFST csplit_normal_list b0 b2 cfind_face b0 cl'y b0 b2 b3 cl'y b0 b2 b3 cprev_el b2 cl'z b0 b1 b2 b3 cMEM f0 cfilter / c~ cMEM b4 b2 cflatten b1 ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ cMEM f0 cFST csplit_normal_list b0 b2 cfind_face b0 cl'y b0 b2 b3 cl'y b0 b2 b3 cprev_el b2 cl'z b0 b1 b2 b3 cMEM f0 cfilter / c~ cMEM b4 b2 cflatten b1 cF
+ (~ (z = y)), (~ ((final_list L) r)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), (((((l'z L) N) r) x) = z), (((find_face L) x) = f), (((find_face L) y) = f), ((MEM y) f), ((MEM y) r), ((MEM z) f), ((MEM z) r), ((((marked_list L) N) r) x) |- ((((find_face L) y) = f) /\ ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ c= f0 f1 c==> c~ cfinal_list f2 f3 c==> cuniq cfind_face f2 f4 c==> cgood_list f2 c==> cgood_list_nodes f2 c==> c= cprev_el f3 f0 f5 c==> c= cl'y f2 f3 f4 f1 c==> c= cl'z f2 f6 f3 f4 f0 c==> c= cfind_face f2 f4 f7 c==> c= cfind_face f2 f1 f7 c==> cMEM f1 f7 c==> cMEM f1 f3 c==> cMEM f0 f7 c==> cMEM f0 f3 c==> cmarked_list f2 f6 f3 f4 c/\ c= cfind_face f2 f1 f7 c==> c\/ cMEM f8 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f2 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f2 cbetwn cfind_face f2 f1 f1 f0 c\/ c= f8 cnext_el f3 f1 c\/ cMEM f8 cbetwn f3 cnext_el f3 f1 f5 c= f8 f5 c~ c/\ c~ cMEM f8 f3 cMEM f8 cflatten f6
+ (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cMEM f1 f2 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c/\ cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
+ |- (((!L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) ==> ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L)) = ((\L. ((uniq (list_of_darts L)) ==> (uniq ((find_face L) x)))) L))
T c= c==> ! c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1 * / c==> cuniq clist_of_darts b0 cuniq cfind_face b0 f0 f1
+ (~ ((MEM ((next_el r) y)) r)), ((MEM y) r) |- (T = ((((MEM y) r) ==> ((MEM ((next_el r) y)) r)) ==> F))
T c==> c~ cMEM cnext_el f0 f1 f0 c==> cMEM f1 f0 c= cT c==> c==> cMEM f1 f0 cMEM cnext_el f0 f1 f0 cF
+ |- ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s)
T * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0
+ |- (((!x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) ==> ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x)) = ((\x. (((((marked_list L) N) r) x) = ((is_restricted (hypermap_of_list L)) /\ (((normal_list L) N) /\ (((MEM r) N) /\ (((MEM x) r) /\ (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) /\ ((((next_el r) x) = ((f_list L) x)) /\ (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) /\ ((((final_list L) r) ==> ((flag_list L) N)) /\ ((~ ((final_list L) r)) ==> ((((s_flag_list L) N) r) x)))))))))))) x))
T c= c==> ! c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3 * / c= cmarked_list f0 f1 f2 b0 c/\ cis_restricted chypermap_of_list f0 c/\ cnormal_list f0 f1 c/\ cMEM f2 f1 c/\ cMEM b0 f2 c/\ cLET / cLET_END c/\ call part cuniq b1 call / c> csizel cfilter * part cMEM b2 b1 cNUMERAL cBIT1 c_0 cflatten b1 cquotient_list f0 f1 c/\ c= cnext_el f2 b0 cf_list f0 b0 c/\ cLET / cLET_END cfinal_list f0 b1 cfind_list f1 ce_list b0 c/\ c==> cfinal_list f0 f2 cflag_list f0 f1 c==> c~ cfinal_list f0 f2 cs_flag_list f0 f1 f2 b0 f3
+ |- (((!y'. (!r. (((uniq r) /\ (((MEM y) r) /\ (((MEM y') r) /\ (~ (y = y'))))) ==> (uniq (((betwn r) y) y'))))) ==> ((\y'. (!r. (((uniq r) /\ (((MEM y) r) /\ (((MEM y') r) /\ (~ (y = y'))))) ==> (uniq (((betwn r) y) y'))))) z)) = ((\y'. (!r. (((uniq r) /\ (((MEM y) r) /\ (((MEM y') r) /\ (~ (y = y'))))) ==> (uniq (((betwn r) y) y'))))) z))
T c= c==> ! ! c==> c/\ cuniq b1 c/\ cMEM f0 b1 c/\ cMEM b0 b1 c~ c= f0 b0 cuniq cbetwn b1 f0 b0 * / ! c==> c/\ cuniq b1 c/\ cMEM f0 b1 c/\ cMEM b0 b1 c~ c= f0 b0 cuniq cbetwn b1 f0 b0 f1 * / ! c==> c/\ cuniq b1 c/\ cMEM f0 b1 c/\ cMEM b0 b1 c~ c= f0 b0 cuniq cbetwn b1 f0 b0 f1
- ((normal_list L) N) |- (((normal_list L) N) = T)
T c==> cnormal_list f0 f1 c= cnormal_list f0 f1 cT
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- (((MEM y) r) /\ ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f6 f2 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c/\ cMEM f6 f2 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
+ |- (((!L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) ==> ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L)) = ((\L. (!N. (!r. (!x. (((((marked_list L) N) r) x) ==> ((MEM x) (list_of_darts L))))))) L))
T c= c==> ! ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0 * / ! ! ! c==> cmarked_list b0 b1 b2 b3 cMEM b3 clist_of_darts b0 f0
+ |- ((\x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f)))))))) x)
T * / ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 b0 c/\ c~ cfinal_list f0 f2 c/\ c= b1 cfind_face f0 b0 c= b2 cnext_el b1 b0 c/\ cMEM cytrans f0 f1 f2 b0 cNUMERAL c_0 b1 c/\ cMEM cztrans f0 f1 f2 b0 cNUMERAL c_0 b1 c< cindexf b2 cytrans f0 f1 f2 b0 cNUMERAL c_0 b1 cindexf b2 cztrans f0 f1 f2 b0 cNUMERAL c_0 b1 f3
+ |- (((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))) ==> ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))) r)) = ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))) r))
T c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= cl'y f0 b0 b1 f2 c/\ c= cl'z f0 f1 b0 b1 f3 c/\ c= cfind_face f0 b1 f4 cMEM f5 cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b2 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn f4 f2 f3 c~ cMEM f5 cflatten f1 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= cl'y f0 b0 b1 f2 c/\ c= cl'z f0 f1 b0 b1 f3 c/\ c= cfind_face f0 b1 f4 cMEM f5 cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b2 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn f4 f2 f3 c~ cMEM f5 cflatten f1 f6 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c/\ c~ cfinal_list f0 b0 c/\ c= cl'y f0 b0 b1 f2 c/\ c= cl'z f0 f1 b0 b1 f3 c/\ c= cfind_face f0 b1 f4 cMEM f5 cflatten cmap / cmap / cPOWER * part cn_list f0 b2 b2 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b2 cFST b2 cflatten f0 cbetwn f4 f2 f3 c~ cMEM f5 cflatten f1 f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cmarked_list f0 f3 f1 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cs_flag_list f0 f3 f1 f2 c==> c= cl'y f0 f1 f2 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f3 f1 f2 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f3 f1 f2 c= f7 cprev_el f1 cl'z f0 f3 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f3
- |- ((((\f. (((find_face L) x) = f)) f) ==> (?f. (((find_face L) x) = f))) = T)
T c= c==> * / c= cfind_face f0 f1 b0 f2 c? / c= cfind_face f0 f1 b0 cT
+ |- (((((MEM y) r) ==> ((MEM ((next_el r) y)) r)) ==> F) = F)
T c= c==> c==> cMEM f0 f1 cMEM cnext_el f1 f0 f1 cF cF
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))))) |- (((!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) ==> ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r)) = ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r)))) r))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b2 c= c==> ! ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2 * / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cytrans f0 f1 b0 b1 cNUMERAL c_0 b0 f2
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))) = (\x. (((((marked_list L) N) r) x) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 b0 c~ cfinal_list f0 f1 cMEM cztrans f0 f2 f1 b0 cNUMERAL c_0 f1 / c==> cmarked_list f0 f2 f1 b0 cMEM cztrans f0 f2 f1 b0 cNUMERAL c_0 f1
+ (good_list L), (good_list_nodes L), ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) /\ ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))))))) |- F
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c/\ c~ cfinal_list f0 f2 c/\ cMEM f4 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 cMEM f4 cfilter / c~ cMEM b0 f2 cflatten f1 cF
+ |- ((\r. (!f. (!ram1. (!ram2. ((((((split_normal_list L) r) f) ram1) ram2) = ((LET (\ram1'. (LET_END ((LET (\ram2'. (LET_END ((LET (\sz. (LET_END ((LET (\nd. (LET_END ((LET (\new2. (LET_END ((LET (\new1. (LET_END ((LET (\f1. (LET_END ((LET (\f2. (LET_END (((APPEND (REVERSE new1)) f1) , ((APPEND f2) new2))))) ((APPEND ((CONS ram2') NIL)) ((APPEND (((betwn r) ram2') ram1)) ((CONS ram1) NIL))))))) ((APPEND ((CONS ram1') NIL)) ((APPEND (((betwn r) ram1') ram2)) ((CONS ram2) NIL))))))) (flatten ((map nd) new2)))))) (((betwn f) ram1) ram2'))))) (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sz (FST x))))))))) (\x. (sizel ((filter (\t. (t = x))) (flatten L)))))))) ((next_el r) ram2))))) ((next_el r) ram1))))))) r)
T * / ! ! ! c= csplit_normal_list f0 b0 b1 b2 b3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END c, cAPPEND cREVERSE b9 b10 cAPPEND b11 b8 cAPPEND cCONS b5 cNIL cAPPEND cbetwn b0 b5 b2 cCONS b2 cNIL cAPPEND cCONS b4 cNIL cAPPEND cbetwn b0 b4 b3 cCONS b3 cNIL cflatten cmap b7 b8 cbetwn b1 b2 b5 / cmap / cPOWER * part cn_list f0 b8 b7 cupt cNUMERAL cBIT1 c_0 * b6 cFST b7 / csizel cfilter / c= b7 b6 cflatten f0 cnext_el b0 b3 cnext_el b0 b2 f1
+ (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cmarked_list f0 f6 f1 f2 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f4 f3 c==> cMEM f3 f1 c==> cMEM f5 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
+ (~ ((final_list L) r)), (is_restricted (hypermap_of_list L)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM r) N), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- ((?y. ((((l'y L) r) x) = y)) ==> (((MEM d) ((APPEND (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (NUMERAL (BIT1 _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) ((APPEND ((CONS ((next_el r) (((l'y L) r) x))) NIL)) ((APPEND (((betwn r) ((next_el r) (((l'y L) r) x))) ((prev_el r) ((((l'z L) N) r) x)))) ((CONS ((prev_el r) ((((l'z L) N) r) x))) NIL))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f3 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f3 c==> cMEM f2 f1 c==> cMEM f1 f3 c==> cnormal_list f0 f3 c==> cs_flag_list f0 f3 f1 f2 c==> cmarked_list f0 f3 f1 f2 c==> c? / c= cl'y f0 f1 f2 b0 c==> cMEM f4 cAPPEND cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cNUMERAL cBIT1 c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 cl'y f0 f1 f2 cl'y f0 f1 f2 cnext_el f1 cprev_el f1 cl'z f0 f3 f1 f2 cAPPEND cCONS cnext_el f1 cl'y f0 f1 f2 cNIL cAPPEND cbetwn f1 cnext_el f1 cl'y f0 f1 f2 cprev_el f1 cl'z f0 f3 f1 f2 cCONS cprev_el f1 cl'z f0 f3 f1 f2 cNIL c~ c/\ c~ cMEM f4 f1 cMEM f4 cflatten f3
- ((MEM x) (list_of_darts L)) |- (((MEM x) (list_of_darts L)) = T)
T c==> cMEM f0 clist_of_darts f1 c= cMEM f0 clist_of_darts f1 cT
+ |- ((\L. (((uniq (list_of_darts L)) /\ ((MEM y) ((find_face L) x))) ==> (((find_face L) y) = ((find_face L) x)))) L)
T * / c==> c/\ cuniq clist_of_darts b0 cMEM f0 cfind_face b0 f1 c= cfind_face b0 f0 cfind_face b0 f1 f2
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
- |- (!z. (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z))))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
+ |- ((\L. (!N. (!r. (!x. (!f. (!w. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ ((f = ((find_face L) x)) /\ (w = ((next_el f) x))))))) ==> (((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) f) /\ (((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) f) /\ ((((indexf w) (((((ytrans L) N) r) x) (NUMERAL _0))) f) < (((indexf w) (((((ztrans L) N) r) x) (NUMERAL _0))) f))))))))))) L)
T * / ! ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= b4 cfind_face b0 b3 c= b5 cnext_el b4 b3 c/\ cMEM cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 c/\ cMEM cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 c< cindexf b5 cytrans b0 b1 b2 b3 cNUMERAL c_0 b4 cindexf b5 cztrans b0 b1 b2 b3 cNUMERAL c_0 b4 f0
+ |- ((!y. (((uniq r) /\ (((MEM z) r) /\ (((MEM y) r) /\ (~ (z = y))))) ==> (uniq ((APPEND ((CONS z) NIL)) ((APPEND (((betwn r) z) y)) ((CONS y) NIL)))))) = T)
T c= ! c==> c/\ cuniq f0 c/\ cMEM f1 f0 c/\ cMEM b0 f0 c~ c= f1 b0 cuniq cAPPEND cCONS f1 cNIL cAPPEND cbetwn f0 f1 b0 cCONS b0 cNIL cT
+ |- (((!d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) ==> ((\d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) y)) = ((\d1. (!d2. (!L. (((uniq (list_of_darts L)) /\ ((MEM d1) ((find_face L) d2))) ==> (((find_face L) d1) = ((find_face L) d2)))))) y))
T c= c==> ! ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 * / ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 f0 * / ! ! c==> c/\ cuniq clist_of_darts b2 cMEM b0 cfind_face b2 b1 c= cfind_face b2 b0 cfind_face b2 b1 f0
+ |- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) (((((ztrans L) N) r) x) (NUMERAL _0)))
T * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 cztrans f0 f1 f2 f3 cNUMERAL c_0
+ (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- (((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))) = ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) z))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) z1)) \/ (d = z1)))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c= c==> c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cytrans f0 f1 f2 f3 cNUMERAL c_0 c==> c\/ cMEM f4 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f6 c\/ c= f4 cnext_el f2 f5 c\/ cMEM f4 cbetwn f2 cnext_el f2 f5 f7 c= f4 f7 c~ c/\ c~ cMEM f4 f2 cMEM f4 cflatten f1 c==> c\/ cMEM f4 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 f6 c\/ c= f4 cnext_el f2 f5 c\/ cMEM f4 cbetwn f2 cnext_el f2 f5 f7 c= f4 f7 c~ c/\ c~ cMEM f4 f2 cMEM f4 cflatten f1
- |- (((((l'y L) r) x) = y) = ((\y. ((((l'y L) r) x) = y)) y))
T c= c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
- |- ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)
T * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c/\ cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 c\/ c= f7 cnext_el f2 f4 c\/ cMEM f7 cbetwn f2 cnext_el f2 f4 cprev_el f2 cl'z f0 f1 f2 f3 c= f7 cprev_el f2 cl'z f0 f1 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f1
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))) = (\x. (((((marked_list L) N) r) x) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0)))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 b0 c~ cfinal_list f0 f1 c~ c= cztrans f0 f2 f1 b0 cNUMERAL c_0 cytrans f0 f2 f1 b0 cNUMERAL c_0 / c==> cmarked_list f0 f2 f1 b0 c~ c= cztrans f0 f2 f1 b0 cNUMERAL c_0 cytrans f0 f2 f1 b0 cNUMERAL c_0
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
- |- ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)
T * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
- |- ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- ((\L. (!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))))) L)
T * / ! ! ! c= ctransform_list b0 b3 c, b1 b2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list b0 b2 c, b1 b2 c, b9 cSND b8 cAPPEND creplace b2 cCONS cSND b8 cNIL b1 cCONS cFST b8 cNIL csplit_normal_list b0 b2 b7 b4 b6 cfind_face b0 b4 cprev_el b2 b5 cl'z b0 b1 b2 b3 cl'y b0 b2 b3 f0
- |- (((!x'. (((\w. (((next_el ((find_face L) x)) x) = w)) x') ==> (?w. (((next_el ((find_face L) x)) x) = w)))) ==> ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (?w. (((next_el ((find_face L) x)) x) = w)))) = ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (?w. (((next_el ((find_face L) x)) x) = w))))
T c= c==> ! c==> * / c= cnext_el cfind_face f0 f1 f1 b1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b1 c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0 c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0
- ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) /\ (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c/\ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- (!y. (((\y. ((((l'y L) r) x) = y)) y) ==> (?y. ((((l'y L) r) x) = y))))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- |- (((!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) ==> ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x)) = ((\x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))) x))
T c= c==> ! ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3 * / ! c= cl'z f0 cntrans f0 f1 f2 b0 b1 crtrans f0 f1 f2 b0 b1 b0 cztrans f0 f1 f2 b0 b1 f3
- |- ((((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))) = T)
T c= c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 cT
- ((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) |- (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) = T)
T c==> cMEM f0 cFST csplit_normal_list f1 f2 cfind_face f1 cl'y f1 f2 f3 cl'y f1 f2 f3 cprev_el f2 cl'z f1 f4 f2 f3 c= cMEM f0 cFST csplit_normal_list f1 f2 cfind_face f1 cl'y f1 f2 f3 cl'y f1 f2 f3 cprev_el f2 cl'z f1 f4 f2 f3 cT
- ((((l'y L) r) x) = y) |- ((\y. ((((l'y L) r) x) = y)) y)
T c==> c= cl'y f0 f1 f2 f3 * / c= cl'y f0 f1 f2 b0 f3
- |- ((?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) ==> (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- ((MEM ((next_el r) y)) (flatten N)) |- (((MEM ((next_el r) y)) (flatten N)) = T)
T c==> cMEM cnext_el f0 f1 cflatten f2 c= cMEM cnext_el f0 f1 cflatten f2 cT
- |- ((SUC (NUMERAL _0)) = (NUMERAL (BIT1 _0)))
T c= cSUC cNUMERAL c_0 cNUMERAL cBIT1 c_0
- |- (((!f. (!y. (!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))))))) ==> ((\f. (!y. (!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))))))) f)) = ((\f. (!y. (!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))))))) f))
T c= c==> ! ! ! ! ! ! ! ! c==> c/\ cgood_list b4 c/\ cgood_list_nodes b4 c/\ cmarked_list b4 b5 b6 b7 c/\ c~ cfinal_list b4 b6 c/\ c= cl'y b4 b6 b7 b1 c/\ c= cl'z b4 b5 b6 b7 b2 c/\ c= cfind_face b4 b7 b0 cMEM b3 cflatten cmap / cmap / cPOWER * part cn_list b4 b8 b8 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b8 cFST b8 cflatten b4 cbetwn b0 b1 b2 c~ cMEM b3 cflatten b5 * / ! ! ! ! ! ! ! c==> c/\ cgood_list b4 c/\ cgood_list_nodes b4 c/\ cmarked_list b4 b5 b6 b7 c/\ c~ cfinal_list b4 b6 c/\ c= cl'y b4 b6 b7 b1 c/\ c= cl'z b4 b5 b6 b7 b2 c/\ c= cfind_face b4 b7 b0 cMEM b3 cflatten cmap / cmap / cPOWER * part cn_list b4 b8 b8 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b8 cFST b8 cflatten b4 cbetwn b0 b1 b2 c~ cMEM b3 cflatten b5 f0 * / ! ! ! ! ! ! ! c==> c/\ cgood_list b4 c/\ cgood_list_nodes b4 c/\ cmarked_list b4 b5 b6 b7 c/\ c~ cfinal_list b4 b6 c/\ c= cl'y b4 b6 b7 b1 c/\ c= cl'z b4 b5 b6 b7 b2 c/\ c= cfind_face b4 b7 b0 cMEM b3 cflatten cmap / cmap / cPOWER * part cn_list b4 b8 b8 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b8 cFST b8 cflatten b4 cbetwn b0 b1 b2 c~ cMEM b3 cflatten b5 f0
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L) |- ((\x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))) = (\x. (((((marked_list L) N) r) x) ==> ((MEM (((((ytrans L) N) r) x) (NUMERAL _0))) r))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c= / c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f2 f1 b0 c~ cfinal_list f0 f1 cMEM cytrans f0 f2 f1 b0 cNUMERAL c_0 f1 / c==> cmarked_list f0 f2 f1 b0 cMEM cytrans f0 f2 f1 b0 cNUMERAL c_0 f1
- ((\w. (((next_el ((find_face L) x)) x) = w)) w) |- (((((next_el ((find_face L) x)) x) = w) ==> (?w. (((next_el ((find_face L) x)) x) = w))) = (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c= c==> c= cnext_el cfind_face f0 f1 f1 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- (((((l'y L) r) x) = y) ==> (?y. ((((l'y L) r) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))))))) |- ((((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> (~ ((((((ztrans L) N) r) x) (NUMERAL _0)) = (((((ytrans L) N) r) x) (NUMERAL _0))))) = T)
T c==> ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c~ cfinal_list b0 b2 c~ c= cztrans b0 b1 b2 b3 cNUMERAL c_0 cytrans b0 b1 b2 b3 cNUMERAL c_0 c= c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 f2 f3 c~ cfinal_list f0 f2 c~ c= cztrans f0 f1 f2 f3 cNUMERAL c_0 cytrans f0 f1 f2 f3 cNUMERAL c_0 cT
- (uniq ((CONS y) NIL)) |- ((uniq ((CONS y) NIL)) = T)
T c==> cuniq cCONS f0 cNIL c= cuniq cCONS f0 cNIL cT
- |- ((!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))) = T)
T c= ! ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ c= cl'y b1 b3 b4 f0 c/\ c= cl'z b1 b2 b3 b4 f1 c/\ c= cfind_face b1 b4 f2 cMEM b0 cflatten cmap / cmap / cPOWER * part cn_list b1 b5 b5 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn f2 f0 f1 c~ cMEM b0 cflatten b2 cT
- |- ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)
T * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- ((\f. (((find_face L) x) = f)) f) |- (((((find_face L) x) = f) ==> (?f. (((find_face L) x) = f))) = (?f. (((find_face L) x) = f)))
T c==> * / c= cfind_face f0 f1 b0 f2 c= c==> c= cfind_face f0 f1 f2 c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) x) = ((f_list L) x)), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))), ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)), ((MEM x) r), ((MEM x) (list_of_darts L)), ((MEM r) N), ((all (\l. (~ (l = NIL)))) L), ((normal_list L) N), ((((s_flag_list L) N) r) x), ((((marked_list L) N) r) x) |- (((MEM x) (list_of_darts L)) /\ ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N))))))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cuniq cfind_face f0 f2 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cnext_el f1 f2 cf_list f0 f2 c==> c= cprev_el f1 f3 f4 c==> c= cl'y f0 f1 f2 f5 c==> c= cztrans f0 f6 f1 f2 cNUMERAL c_0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f6 ce_list f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f6 c==> cMEM f2 f1 c==> cMEM f2 clist_of_darts f0 c==> cMEM f1 f6 c==> call / c~ c= b0 cNIL f0 c==> cnormal_list f0 f6 c==> cs_flag_list f0 f6 f1 f2 c==> cmarked_list f0 f6 f1 f2 c/\ cMEM f2 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f2 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f2 c= f7 cprev_el f1 cl'z f0 f6 f1 f2 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
- (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) /\ (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c/\ c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- ((!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))) = T)
T c= ! ! ! ! c==> c/\ cgood_list b0 c/\ cgood_list_nodes b0 c/\ cmarked_list b0 b1 b2 b3 c/\ c~ cfinal_list b0 b2 c/\ c= cl'y b0 b2 b3 f0 c/\ c= cl'z b0 b1 b2 b3 f1 c/\ c= cfind_face b0 b3 f2 cMEM f3 cflatten cmap / cmap / cPOWER * part cn_list b0 b4 b4 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b4 cFST b4 cflatten b0 cbetwn f2 f0 f1 c~ cMEM f3 cflatten b1 cT
- (~ ((final_list L) r)), (uniq (list_of_darts L)), (good_list L), (good_list_nodes L), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((((marked_list L) N) r) x) |- ((uniq (list_of_darts L)) /\ (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((uniq (flatten N)) ==> (((all (\s. (~ (s = NIL)))) N) ==> (((all (f_last L)) N) ==> (((all (loop_list L)) N) ==> ((!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) ==> ((uniq r) ==> ((((next_el r) z1) = z) ==> (((MEM z) r) ==> (((MEM y) r) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cuniq clist_of_darts f0 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> c= cprev_el f1 f2 f3 c==> c= cl'y f0 f1 f4 f5 c==> c= cztrans f0 f6 f1 f4 cNUMERAL c_0 f2 c==> cmarked_list f0 f6 f1 f4 c/\ cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f4 c==> cMEM f4 clist_of_darts f0 c==> cuniq cflatten f6 c==> call / c~ c= b0 cNIL f6 c==> call * part cf_last f0 f6 c==> call * part cloop_list f0 f6 c==> ! c==> cMEM b0 cflatten f6 cSUBSET * * part cnode chypermap_of_list f0 b0 * part cset_of_list cflatten f6 c==> cuniq f1 c==> c= cnext_el f1 f3 f2 c==> cMEM f2 f1 c==> cMEM f5 f1 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f5 f5 cnext_el f1 cprev_el f1 cl'z f0 f6 f1 f4 c\/ c= f7 cnext_el f1 f5 c\/ cMEM f7 cbetwn f1 cnext_el f1 f5 cprev_el f1 cl'z f0 f6 f1 f4 c= f7 cprev_el f1 cl'z f0 f6 f1 f4 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f6
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) /\ (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))) ==> F)))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c/\ c~ cfinal_list f0 f1 c==> cMEM f4 cFST csplit_normal_list f0 f1 cfind_face f0 cl'y f0 f1 f3 cl'y f0 f1 f3 cprev_el f1 cl'z f0 f2 f1 f3 c==> cMEM f4 cfilter / c~ cMEM b0 f1 cflatten f2 cF
- |- ((!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))))) = T)
T c= ! ! ! ! ! ! c==> c/\ cgood_list b2 c/\ cgood_list_nodes b2 c/\ cmarked_list b2 b3 b4 b5 c/\ c~ cfinal_list b2 b4 c/\ c= cl'y b2 b4 b5 f0 c/\ c= cl'z b2 b3 b4 b5 b0 c/\ c= cfind_face b2 b5 f1 cMEM b1 cflatten cmap / cmap / cPOWER * part cn_list b2 b6 b6 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b6 cFST b6 cflatten b2 cbetwn f1 f0 b0 c~ cMEM b1 cflatten b3 cT
- |- (!f. (((\f. (((find_face L) x) = f)) f) ==> (?f. (((find_face L) x) = f))))
T c==> * / c= cfind_face f0 f1 b0 f2 c? / c= cfind_face f0 f1 b0
- |- (((POWER f) (SUC n)) = (((POWER f) n) o f))
T c= * * part cPOWER f0 cSUC f1 * * part co * * part cPOWER f0 f1 f0
- (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) ==> (((MEM d) (FST (((((split_normal_list L) r) ((find_face L) (((l'y L) r) x))) (((l'y L) r) x)) ((prev_el r) ((((l'z L) N) r) x))))) ==> (((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))) ==> F)))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> cMEM f4 cFST csplit_normal_list f0 f2 cfind_face f0 cl'y f0 f2 f3 cl'y f0 f2 f3 cprev_el f2 cl'z f0 f1 f2 f3 c==> cMEM f4 cfilter / c~ cMEM b0 f2 cflatten f1 cF
- |- (((!n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) ==> ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n)) = ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n))
T c= c==> ! c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1 * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1
- |- (((!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))) ==> ((\ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))) ss2)) = ((\ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))) ss2))
T c= c==> ! c= cflatten ccat f0 b0 ccat cflatten f0 cflatten b0 * / c= cflatten ccat f0 b0 ccat cflatten f0 cflatten b0 f1 * / c= cflatten ccat f0 b0 ccat cflatten f0 cflatten b0 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cMEM f1 clist_of_darts f0 cMEM c, cSND f1 cFST f1 clist_of_darts f0
- ((((((ztrans L) N) r) x) (NUMERAL _0)) = z) |- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z)
T c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4
- |- (((!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) ==> ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0)) = ((\x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s)))) x0))
T c= c==> ! c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1 * / c==> c~ c= cNIL f0 c= cLAST f0 clast b0 f0 f1
- (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) |- ((\d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) d)
T c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 * / c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 f1
- |- (((!N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) ==> ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N)) = ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N))
T c= c==> ! ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1 * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1
- |- ((\ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))) ss2)
T * / c= cflatten ccat f0 b0 ccat cflatten f0 cflatten b0 f1
- (good_list L) |- ((good_list_nodes L) ==> (((((marked_list L) N) r) x) ==> ((~ ((final_list L) r)) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 c\/ c= f7 cnext_el f2 f4 c\/ cMEM f7 cbetwn f2 cnext_el f2 f4 cprev_el f2 cl'z f0 f1 f2 f3 c= f7 cprev_el f2 cl'z f0 f1 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f1
- |- (((!x'. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) x') ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))) ==> ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))) = ((?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))))
T c= c==> ! c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b1 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b1 c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c==> c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- ((\ss1. (!ss2. ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2))))) ss1)
T * / ! c= cflatten ccat b0 b1 ccat cflatten b0 cflatten b1 f0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- ((\d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) d)
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 * / c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 f2
- ((((s_flag_list L) N) r) x) |- (((((s_flag_list L) N) r) x) = T)
T c==> cs_flag_list f0 f1 f2 f3 c= cs_flag_list f0 f1 f2 f3 cT
- |- ((\d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))) d)
T * / ! ! ! ! c==> c/\ cgood_list b1 c/\ cgood_list_nodes b1 c/\ cmarked_list b1 b2 b3 b4 c/\ c~ cfinal_list b1 b3 c/\ c= cl'y b1 b3 b4 f0 c/\ c= cl'z b1 b2 b3 b4 f1 c/\ c= cfind_face b1 b4 f2 cMEM b0 cflatten cmap / cmap / cPOWER * part cn_list b1 b5 b5 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b5 cFST b5 cflatten b1 cbetwn f2 f0 f1 c~ cMEM b0 cflatten b2 f3
- |- (((!L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) ==> ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L)) = ((\L. (!N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))))) L))
T c= c==> ! ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0 * / ! ! ! ! c= cl'z b0 cntrans b0 b1 b2 b3 b4 crtrans b0 b1 b2 b3 b4 b3 cztrans b0 b1 b2 b3 b4 f0
- |- (((!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) ==> ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r)) = ((\r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x))))) r))
T c= c==> ! ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2 * / ! c= ctransform_list f0 b1 c, f1 b0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b0 c, f1 b0 c, b7 cSND b6 cAPPEND creplace b0 cCONS cSND b6 cNIL f1 cCONS cFST b6 cNIL csplit_normal_list f0 b0 b5 b2 b4 cfind_face f0 b2 cprev_el b0 b3 cl'z f0 f1 b0 b1 cl'y f0 b0 b1 f2
- |- ((((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> (?w. (((next_el ((find_face L) x)) x) = w))) = T)
T c= c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0 cT
- |- (((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) ==> ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)) = ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s))
T c= c==> ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0 * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
- ((\y. ((((l'y L) r) x) = y)) y) |- ((((((l'y L) r) x) = y) ==> (?y. ((((l'y L) r) x) = y))) = (?y. ((((l'y L) r) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c= c==> c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0 c? / c= cl'y f0 f1 f2 b0
- |- (F = (~ T))
T c= cF c~ cT
- ((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) |- (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) /\ (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c/\ * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- ((((\y. ((((l'y L) r) x) = y)) y) ==> (?y. ((((l'y L) r) x) = y))) = T)
T c= c==> * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0 cT
- |- ((((find_face L) x) = f) ==> (?f. (((find_face L) x) = f)))
T c==> c= cfind_face f0 f1 f2 c? / c= cfind_face f0 f1 b0
- |- ((!y. (!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))))) = T)
T c= ! ! ! ! ! ! ! c==> c/\ cgood_list b3 c/\ cgood_list_nodes b3 c/\ cmarked_list b3 b4 b5 b6 c/\ c~ cfinal_list b3 b5 c/\ c= cl'y b3 b5 b6 b0 c/\ c= cl'z b3 b4 b5 b6 b1 c/\ c= cfind_face b3 b6 f0 cMEM b2 cflatten cmap / cmap / cPOWER * part cn_list b3 b7 b7 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b7 cFST b7 cflatten b3 cbetwn f0 b0 b1 c~ cMEM b2 cflatten b4 cT
- ((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))) |- (((MEM d) ((filter (\d. (~ ((MEM d) r)))) (flatten N))) = T)
T c==> cMEM f0 cfilter / c~ cMEM b0 f1 cflatten f2 c= cMEM f0 cfilter / c~ cMEM b0 f1 cflatten f2 cT
- (good_list L), (good_list_nodes L) |- ((\r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ (~ ((final_list L) r))))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))) = (\r. (!x. ((((((marked_list L) N) r) x) /\ (~ ((final_list L) r))) ==> ((MEM (((((ztrans L) N) r) x) (NUMERAL _0))) r)))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c= / ! c==> c/\ cgood_list f0 c/\ cgood_list_nodes f0 c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0 / ! c==> c/\ cmarked_list f0 f1 b0 b1 c~ cfinal_list f0 b0 cMEM cztrans f0 f1 b0 b1 cNUMERAL c_0 b0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- |- (((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))) = T)
T c= c==> c~ c= cNIL f0 c= cLAST f0 clast f1 f0 cT
- |- ((\z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))))) z)
T * / ! ! ! ! ! c==> c/\ cgood_list b2 c/\ cgood_list_nodes b2 c/\ cmarked_list b2 b3 b4 b5 c/\ c~ cfinal_list b2 b4 c/\ c= cl'y b2 b4 b5 f0 c/\ c= cl'z b2 b3 b4 b5 b0 c/\ c= cfind_face b2 b5 f1 cMEM b1 cflatten cmap / cmap / cPOWER * part cn_list b2 b6 b6 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b6 cFST b6 cflatten b2 cbetwn f1 f0 b0 c~ cMEM b1 cflatten b3 f2
- |- ((\N. (!r. (!x. ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))))) N)
T * / ! ! c= ctransform_list f0 b2 c, b0 b1 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 b1 c, b0 b1 c, b8 cSND b7 cAPPEND creplace b1 cCONS cSND b7 cNIL b0 cCONS cFST b7 cNIL csplit_normal_list f0 b1 b6 b3 b5 cfind_face f0 b3 cprev_el b1 b4 cl'z f0 b0 b1 b2 cl'y f0 b1 b2 f1
- |- ((LENGTH = sizel) /\ ((FILTER = filter) /\ ((REVERSE = rev) /\ ((!s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) /\ ((APPEND = cat) /\ (ALL = all))))))
T c/\ c= part cLENGTH part csizel c/\ c= part cFILTER part cfilter c/\ c= part cREVERSE part crev c/\ ! ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 c/\ c= part cAPPEND part ccat c= part cALL part call
- |- (T = ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0))))
T c= cT c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
- |- ((\N. (!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i)))))) N)
T * / ! ! ! c= cl'z f0 cntrans f0 b0 b1 b2 b3 crtrans f0 b0 b1 b2 b3 b2 cztrans f0 b0 b1 b2 b3 f1
- |- ((uniq ((CONS x) NIL)) = T)
T c= cuniq cCONS f0 cNIL cT
- |- (!z1. (((\z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)) z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1))))
T c==> * / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- (good_list L), (good_list_nodes L) |- ((good_list_nodes L) /\ (((((marked_list L) N) r) x) ==> ((~ ((final_list L) r)) ==> ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))))))))
T c==> cgood_list f0 c==> cgood_list_nodes f0 c/\ cgood_list_nodes f0 c==> cmarked_list f0 f1 f2 f3 c==> c~ cfinal_list f0 f2 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f1 c==> cMEM f2 f1 c==> cMEM f3 f2 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c==> c= cnext_el f2 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f3 c==> cs_flag_list f0 f1 f2 f3 c==> c= cl'y f0 f2 f3 f4 c==> c= cprev_el f2 f5 f6 c==> c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f2 cprev_el f2 cl'z f0 f1 f2 f3 c\/ c= f7 cnext_el f2 f4 c\/ cMEM f7 cbetwn f2 cnext_el f2 f4 cprev_el f2 cl'z f0 f1 f2 f3 c= f7 cprev_el f2 cl'z f0 f1 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f1
- |- ((((next_el ((find_face L) x)) x) = w) ==> (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))) |- (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> cMEM f2 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 f2 * part cset_of_list cflatten f0
- |- (!w. (((\w. (((next_el ((find_face L) x)) x) = w)) w) ==> (?w. (((next_el ((find_face L) x)) x) = w))))
T c==> * / c= cnext_el cfind_face f0 f1 f1 b0 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- (!d. (((MEM d) (flatten N)) ==> (((node (hypermap_of_list L)) d) SUBSET (set_of_list (flatten N))))), (!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))), (~ ((final_list L) r)), (uniq r), (uniq (flatten N)), (uniq (list_of_darts L)), (uniq ((find_face L) x)), (good_list L), (good_list_nodes L), (((next_el r) z1) = z), (((prev_el r) z) = z1), ((((l'y L) r) x) = y), ((((((ztrans L) N) r) x) (NUMERAL _0)) = z), ((MEM x) (list_of_darts L)), ((MEM y) r), ((MEM z) r), ((all (\l. (~ (l = NIL)))) L), ((all (f_last L)) N), ((all (loop_list L)) N), ((all (\s. (~ (s = NIL)))) N), ((((marked_list L) N) r) x) |- ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))
T c==> ! c==> cMEM b0 cflatten f0 cSUBSET * * part cnode chypermap_of_list f1 b0 * part cset_of_list cflatten f0 c==> ! c==> cMEM b0 clist_of_darts f1 cMEM c, cSND b0 cFST b0 clist_of_darts f1 c==> c~ cfinal_list f1 f2 c==> cuniq f2 c==> cuniq cflatten f0 c==> cuniq clist_of_darts f1 c==> cuniq cfind_face f1 f3 c==> cgood_list f1 c==> cgood_list_nodes f1 c==> c= cnext_el f2 f4 f5 c==> c= cprev_el f2 f5 f4 c==> c= cl'y f1 f2 f3 f6 c==> c= cztrans f1 f0 f2 f3 cNUMERAL c_0 f5 c==> cMEM f3 clist_of_darts f1 c==> cMEM f6 f2 c==> cMEM f5 f2 c==> call / c~ c= b0 cNIL f1 c==> call * part cf_last f1 f0 c==> call * part cloop_list f1 f0 c==> call / c~ c= b0 cNIL f0 c==> cmarked_list f1 f0 f2 f3 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f1 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f1 cbetwn cfind_face f1 f6 f6 cnext_el f2 cprev_el f2 cl'z f1 f0 f2 f3 c\/ c= f7 cnext_el f2 f6 c\/ cMEM f7 cbetwn f2 cnext_el f2 f6 cprev_el f2 cl'z f1 f0 f2 f3 c= f7 cprev_el f2 cl'z f1 f0 f2 f3 c~ c/\ c~ cMEM f7 f2 cMEM f7 cflatten f0
- ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) |- (((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z) /\ (?z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)))
T c==> * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c/\ * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4 c? / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0
- |- ((flatten ((cat ss1) ss2)) = ((cat (flatten ss1)) (flatten ss2)))
T c= cflatten ccat f0 f1 ccat cflatten f0 cflatten f1
- |- ((\g. ((f o g) = (\x. (f (g x))))) g)
T * / c= * * part co f0 b0 / * f0 * b0 b1 f1
- (~ ((has (\x. ((MEM x) (((betwn r) z) y)))) ((CONS y) NIL))) |- (((has (\x. ((MEM x) (((betwn r) z) y)))) ((CONS y) NIL)) = F)
T c==> c~ chas / cMEM b0 cbetwn f0 f1 f2 cCONS f2 cNIL c= chas / cMEM b0 cbetwn f0 f1 f2 cCONS f2 cNIL cF
- ((\f. (((find_face L) x) = f)) f) |- (((\f. (((find_face L) x) = f)) f) /\ (?f. (((find_face L) x) = f)))
T c==> * / c= cfind_face f0 f1 b0 f2 c/\ * / c= cfind_face f0 f1 b0 f2 c? / c= cfind_face f0 f1 b0
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- ((APPEND = cat) /\ (ALL = all))
T c/\ c= part cAPPEND part ccat c= part cALL part call
- |- (FILTER = filter)
T c= part cFILTER part cfilter
- |- ((((next_el ((find_face L) x)) x) = w) = ((\w. (((next_el ((find_face L) x)) x) = w)) w))
T c= c= cnext_el cfind_face f0 f1 f1 f2 * / c= cnext_el cfind_face f0 f1 f1 b0 f2
- ((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) |- (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) = T)
T c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 c= cLET / cLET_END cfinal_list f0 b0 cfind_list f1 ce_list f2 cT
- ((((((ztrans L) N) r) x) i) = ((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x)) |- (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))
T c==> c= cztrans f0 f1 f2 f3 f4 cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 c= cl'z f0 cntrans f0 f1 f2 f3 f4 crtrans f0 f1 f2 f3 f4 f3 cztrans f0 f1 f2 f3 f4
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((((marked_list L) N) r) x) |- ((~ ((final_list L) r)) /\ ((is_restricted (hypermap_of_list L)) ==> (((normal_list L) N) ==> (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cmarked_list f0 f2 f1 f3 c/\ c~ cfinal_list f0 f1 c==> cis_restricted chypermap_of_list f0 c==> cnormal_list f0 f2 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
- |- (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) = ((\z. ((((((ztrans L) N) r) x) (NUMERAL _0)) = z)) z))
T c= c= cztrans f0 f1 f2 f3 cNUMERAL c_0 f4 * / c= cztrans f0 f1 f2 f3 cNUMERAL c_0 b0 f4
- (uniq ((find_face L) x)) |- ((uniq ((find_face L) x)) = T)
T c==> cuniq cfind_face f0 f1 c= cuniq cfind_face f0 f1 cT
- |- (((!g. ((f o g) = (\x. (f (g x))))) ==> ((\g. ((f o g) = (\x. (f (g x))))) g)) = ((\g. ((f o g) = (\x. (f (g x))))) g))
T c= c==> ! c= * * part co f0 b0 / * f0 * b0 b1 * / c= * * part co f0 b0 / * f0 * b0 b1 f1 * / c= * * part co f0 b0 / * f0 * b0 b1 f1
- |- ((\y. (!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N))))))))))) y)
T * / ! ! ! ! ! ! c==> c/\ cgood_list b3 c/\ cgood_list_nodes b3 c/\ cmarked_list b3 b4 b5 b6 c/\ c~ cfinal_list b3 b5 c/\ c= cl'y b3 b5 b6 b0 c/\ c= cl'z b3 b4 b5 b6 b1 c/\ c= cfind_face b3 b6 f0 cMEM b2 cflatten cmap / cmap / cPOWER * part cn_list b3 b7 b7 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b7 cFST b7 cflatten b3 cbetwn f0 b0 b1 c~ cMEM b2 cflatten b4 f1
- ((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) |- (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) = T)
T c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 c= cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f1 cT
- |- (((\d. (f d)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (((!r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) ==> ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r)) = ((\r. (!x. (!i. (((((l'z L) (((((ntrans L) N) r) x) i)) (((((rtrans L) N) r) x) i)) x) = (((((ztrans L) N) r) x) i))))) r))
T c= c==> ! ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2 * / ! ! c= cl'z f0 cntrans f0 f1 b0 b1 b2 crtrans f0 f1 b0 b1 b2 b1 cztrans f0 f1 b0 b1 b2 f2
- |- (((!x. (((\f. (((find_face L) x) = f)) x) ==> (?f. (((find_face L) x) = f)))) ==> ((?f. (((find_face L) x) = f)) ==> (?f. (((find_face L) x) = f)))) = ((?f. (((find_face L) x) = f)) ==> (?f. (((find_face L) x) = f))))
T c= c==> ! c==> * / c= cfind_face f0 f1 b1 b0 c? / c= cfind_face f0 f1 b1 c==> c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0 c==> c? / c= cfind_face f0 f1 b0 c? / c= cfind_face f0 f1 b0
- (~ ((final_list L) r)), (good_list L), (good_list_nodes L), ((normal_list L) N), ((((marked_list L) N) r) x) |- (((MEM r) N) ==> (((MEM x) r) ==> (((LET (\qs. (LET_END (((all uniq) qs) /\ ((all (\v. ((sizel ((filter (MEM v)) qs)) > (NUMERAL (BIT1 _0))))) (flatten qs)))))) ((quotient_list L) N)) ==> ((((next_el r) x) = ((f_list L) x)) ==> (((LET (\r'. (LET_END ((final_list L) r')))) ((find_list N) (e_list x))) ==> (((((s_flag_list L) N) r) x) ==> (((((l'y L) r) x) = y) ==> ((((prev_el r) z) = z1) ==> (((((((ztrans L) N) r) x) (NUMERAL _0)) = z) ==> ((uniq (list_of_darts L)) ==> (((all (\l. (~ (l = NIL)))) L) ==> ((!d. (((MEM d) (list_of_darts L)) ==> ((MEM ((SND d) , (FST d))) (list_of_darts L)))) ==> ((uniq ((find_face L) x)) ==> (((MEM x) (list_of_darts L)) ==> ((((MEM d) (REVERSE (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn ((find_face L) y)) y) ((next_el r) ((prev_el r) ((((l'z L) N) r) x)))))))) \/ ((d = ((next_el r) y)) \/ (((MEM d) (((betwn r) ((next_el r) y)) ((prev_el r) ((((l'z L) N) r) x)))) \/ (d = ((prev_el r) ((((l'z L) N) r) x)))))) ==> (~ ((~ ((MEM d) r)) /\ ((MEM d) (flatten N)))))))))))))))))))
T c==> c~ cfinal_list f0 f1 c==> cgood_list f0 c==> cgood_list_nodes f0 c==> cnormal_list f0 f2 c==> cmarked_list f0 f2 f1 f3 c==> cMEM f1 f2 c==> cMEM f3 f1 c==> cLET / cLET_END c/\ call part cuniq b0 call / c> csizel cfilter * part cMEM b1 b0 cNUMERAL cBIT1 c_0 cflatten b0 cquotient_list f0 f2 c==> c= cnext_el f1 f3 cf_list f0 f3 c==> cLET / cLET_END cfinal_list f0 b0 cfind_list f2 ce_list f3 c==> cs_flag_list f0 f2 f1 f3 c==> c= cl'y f0 f1 f3 f4 c==> c= cprev_el f1 f5 f6 c==> c= cztrans f0 f2 f1 f3 cNUMERAL c_0 f5 c==> cuniq clist_of_darts f0 c==> call / c~ c= b0 cNIL f0 c==> ! c==> cMEM b0 clist_of_darts f0 cMEM c, cSND b0 cFST b0 clist_of_darts f0 c==> cuniq cfind_face f0 f3 c==> cMEM f3 clist_of_darts f0 c==> c\/ cMEM f7 cREVERSE cflatten cmap / cmap / cPOWER * part cn_list f0 b1 b0 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b1 cFST b0 cflatten f0 cbetwn cfind_face f0 f4 f4 cnext_el f1 cprev_el f1 cl'z f0 f2 f1 f3 c\/ c= f7 cnext_el f1 f4 c\/ cMEM f7 cbetwn f1 cnext_el f1 f4 cprev_el f1 cl'z f0 f2 f1 f3 c= f7 cprev_el f1 cl'z f0 f2 f1 f3 c~ c/\ c~ cMEM f7 f1 cMEM f7 cflatten f2
- ((all (f_last L)) N) |- (((all (f_last L)) N) = T)
T c==> call * part cf_last f0 f1 c= call * part cf_last f0 f1 cT
- |- ((?w. (((next_el ((find_face L) x)) x) = w)) ==> (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> c? / c= cnext_el cfind_face f0 f1 f1 b0 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- ((((transform_list L) x) (N , r)) = ((LET (\y. (LET_END ((LET (\z. (LET_END ((LET (\ram2. (LET_END ((LET (\f. (LET_END ((LET (\split. (LET_END ((LET (\N'. (LET_END (((COND ((final_list L) r)) (N , r)) (N' , (SND split)))))) ((APPEND (((replace r) ((CONS (SND split)) NIL)) N)) ((CONS (FST split)) NIL)))))) (((((split_normal_list L) r) f) y) ram2))))) ((find_face L) y))))) ((prev_el r) z))))) ((((l'z L) N) r) x))))) (((l'y L) r) x)))
T c= ctransform_list f0 f1 c, f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cLET / cLET_END cCOND cfinal_list f0 f3 c, f2 f3 c, b5 cSND b4 cAPPEND creplace f3 cCONS cSND b4 cNIL f2 cCONS cFST b4 cNIL csplit_normal_list f0 f3 b3 b0 b2 cfind_face f0 b0 cprev_el f3 b1 cl'z f0 f2 f3 f1 cl'y f0 f3 f1
- ((((indexf w) y) f) < (((indexf w) z) f)) |- (((((indexf w) y) f) < (((indexf w) z) f)) = T)
T c==> c< cindexf f0 f1 f2 cindexf f0 f3 f2 c= c< cindexf f0 f1 f2 cindexf f0 f3 f2 cT
- (((find_face L) x) = f) |- ((\f. (((find_face L) x) = f)) f)
T c==> c= cfind_face f0 f1 f2 * / c= cfind_face f0 f1 b0 f2
- (((next_el ((find_face L) x)) x) = w) |- ((\w. (((next_el ((find_face L) x)) x) = w)) w)
T c==> c= cnext_el cfind_face f0 f1 f1 f2 * / c= cnext_el cfind_face f0 f1 f1 b0 f2
- |- (((!z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))))) ==> ((\z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))))) z)) = ((\z. (!d. (!L. (!N. (!r. (!x. (((good_list L) /\ ((good_list_nodes L) /\ (((((marked_list L) N) r) x) /\ ((~ ((final_list L) r)) /\ (((((l'y L) r) x) = y) /\ ((((((l'z L) N) r) x) = z) /\ ((((find_face L) x) = f) /\ ((MEM d) (flatten ((map (\x. ((map (\i. (((POWER (n_list L)) i) x))) ((upt (SUC (NUMERAL _0))) (sizel ((filter (\t. (t = (FST x)))) (flatten L))))))) (((betwn f) y) z))))))))))) ==> (~ ((MEM d) (flatten N)))))))))) z))
T c= c==> ! ! ! ! ! ! c==> c/\ cgood_list b2 c/\ cgood_list_nodes b2 c/\ cmarked_list b2 b3 b4 b5 c/\ c~ cfinal_list b2 b4 c/\ c= cl'y b2 b4 b5 f0 c/\ c= cl'z b2 b3 b4 b5 b0 c/\ c= cfind_face b2 b5 f1 cMEM b1 cflatten cmap / cmap / cPOWER * part cn_list b2 b6 b6 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b6 cFST b6 cflatten b2 cbetwn f1 f0 b0 c~ cMEM b1 cflatten b3 * / ! ! ! ! ! c==> c/\ cgood_list b2 c/\ cgood_list_nodes b2 c/\ cmarked_list b2 b3 b4 b5 c/\ c~ cfinal_list b2 b4 c/\ c= cl'y b2 b4 b5 f0 c/\ c= cl'z b2 b3 b4 b5 b0 c/\ c= cfind_face b2 b5 f1 cMEM b1 cflatten cmap / cmap / cPOWER * part cn_list b2 b6 b6 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b6 cFST b6 cflatten b2 cbetwn f1 f0 b0 c~ cMEM b1 cflatten b3 f2 * / ! ! ! ! ! c==> c/\ cgood_list b2 c/\ cgood_list_nodes b2 c/\ cmarked_list b2 b3 b4 b5 c/\ c~ cfinal_list b2 b4 c/\ c= cl'y b2 b4 b5 f0 c/\ c= cl'z b2 b3 b4 b5 b0 c/\ c= cfind_face b2 b5 f1 cMEM b1 cflatten cmap / cmap / cPOWER * part cn_list b2 b6 b6 cupt cSUC cNUMERAL c_0 csizel cfilter / c= b6 cFST b6 cflatten b2 cbetwn f1 f0 b0 c~ cMEM b1 cflatten b3 f2
- ((\y. ((((l'y L) r) x) = y)) y) |- (((\y. ((((l'y L) r) x) = y)) y) /\ (?y. ((((l'y L) r) x) = y)))
T c==> * / c= cl'y f0 f1 f2 b0 f3 c/\ * / c= cl'y f0 f1 f2 b0 f3 c? / c= cl'y f0 f1 f2 b0
- |- (~ (~ T))
T c~ c~ cT
- |- ((\n. (((POWER f) (SUC n)) = (((POWER f) n) o f))) n)
T * / c= * * part cPOWER f0 cSUC b0 * * part co * * part cPOWER f0 b0 f0 f1
- ((((l'y L) r) x) = y) |- (((((l'y L) r) x) = y) /\ (?y. ((((l'y L) r) x) = y)))
T c==> c= cl'y f0 f1 f2 f3 c/\ c= cl'y f0 f1 f2 f3 c? / c= cl'y f0 f1 f2 b0
- (((next_el ((find_face L) x)) x) = w) |- ((((next_el ((find_face L) x)) x) = w) /\ (?w. (((next_el ((find_face L) x)) x) = w)))
T c==> c= cnext_el cfind_face f0 f1 f1 f2 c/\ c= cnext_el cfind_face f0 f1 f1 f2 c? / c= cnext_el cfind_face f0 f1 f1 b0
- |- ((((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1) ==> (?z1. (((prev_el r) (((((ztrans L) N) r) x) (NUMERAL _0))) = z1)))
T c==> c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 f4 c? / c= cprev_el f0 cztrans f1 f2 f0 f3 cNUMERAL c_0 b0
- |- ((f o g) = (\x. (f (g x))))
T c= * * part co f0 f1 / * f0 * f1 b0
- |- ((\s. (!x0. ((~ (NIL = s)) ==> ((LAST s) = ((last x0) s))))) s)
T * / ! c==> c~ c= cNIL b0 c= cLAST b0 clast b1 b0 f0
