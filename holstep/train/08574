N NADD_ADD_ASSOC
C |- (!x. (!y. (!z. ((nadd_eq ((nadd_add x) ((nadd_add y) z))) ((nadd_add ((nadd_add x) y)) z)))))
T cnadd_eq cnadd_add f0 cnadd_add f1 f2 cnadd_add cnadd_add f0 f1 f2
D TRUTH
A |- T
T cT
D ADD_ASSOC
A |- (!m. (!n. (!p. ((m + (n + p)) = ((m + n) + p)))))
T c= c+ f0 c+ f1 f2 c+ c+ f0 f1 f2
D NADD_EQ_REFL
A |- (!x. ((nadd_eq x) x))
T cnadd_eq f0 f0
D nadd_add
A |- (!x. (!y. (((nadd_add x) y) = (mk_nadd (\n. (((dest_nadd x) n) + ((dest_nadd y) n)))))))
T c= cnadd_add f0 f1 cmk_nadd / c+ cdest_nadd f0 b0 cdest_nadd f1 b0
D NADD_ADD
A |- (!x. (!y. ((dest_nadd ((nadd_add x) y)) = (\n. (((dest_nadd x) n) + ((dest_nadd y) n))))))
T c= * part cdest_nadd cnadd_add f0 f1 / c+ cdest_nadd f0 b0 cdest_nadd f1 b0
+ |- (((!p. ((m + (n + p)) = ((m + n) + p))) ==> ((\p. ((m + (n + p)) = ((m + n) + p))) p)) = ((\p. ((m + (n + p)) = ((m + n) + p))) p))
T c= c==> ! c= c+ f0 c+ f1 b0 c+ c+ f0 f1 b0 * / c= c+ f0 c+ f1 b0 c+ c+ f0 f1 b0 f2 * / c= c+ f0 c+ f1 b0 c+ c+ f0 f1 b0 f2
- |- (((\n. (f n)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
