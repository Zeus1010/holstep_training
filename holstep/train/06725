N Auqtzyz.complement_permuter
C |- (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i))))
T c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D DE_MORGAN_THM
A |- (!t1. (!t2. (((~ (t1 /\ t2)) = ((~ t1) \/ (~ t2))) /\ ((~ (t1 \/ t2)) = ((~ t1) /\ (~ t2))))))
T c/\ c= c~ c/\ f0 f1 c\/ c~ f0 c~ f1 c= c~ c\/ f0 f1 c/\ c~ f0 c~ f1
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D NOT_FORALL_THM
A |- (!P. ((~ (!x. (P x))) = (?x. (~ (P x)))))
T c= c~ ! * f0 b0 c? / c~ * f0 b0
D o_DEF
A |- (!f. (!g. ((f o g) = (\x. (f (g x))))))
T c= * * part co f0 f1 / * f0 * f1 b0
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D num_INDUCTION
A |- (!P. (((P (NUMERAL _0)) /\ (!n. ((P n) ==> (P (SUC n))))) ==> (!n. (P n))))
T c==> c/\ * f0 cNUMERAL c_0 ! c==> * f0 b0 * f0 cSUC b0 ! * f0 b0
D Ssrnat.addSn
A |- (!m. (!n. (((SUC m) + n) = (SUC (m + n)))))
T c= c+ cSUC f0 f1 cSUC c+ f0 f1
D Ssrnat.add0n
A |- (!n. (((NUMERAL _0) + n) = n))
T c= c+ cNUMERAL c_0 f0 f0
D ADD_0
A |- (!m. ((m + (NUMERAL _0)) = m))
T c= c+ f0 cNUMERAL c_0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D ADD_ASSOC
A |- (!m. (!n. (!p. ((m + (n + p)) = ((m + n) + p)))))
T c= c+ f0 c+ f1 f2 c+ c+ f0 f1 f2
D ADD_AC
A |- (((m + n) = (n + m)) /\ ((((m + n) + p) = (m + (n + p))) /\ ((m + (n + p)) = (n + (m + p)))))
T c/\ c= c+ f0 f1 c+ f1 f0 c/\ c= c+ c+ f0 f1 f2 c+ f0 c+ f1 f2 c= c+ f0 c+ f1 f2 c+ f1 c+ f0 f2
D Ssrnat.addn_eq0
A |- (!m. (!n. (((m + n) = (NUMERAL _0)) = ((m = (NUMERAL _0)) /\ (n = (NUMERAL _0))))))
T c= c= c+ f0 f1 cNUMERAL c_0 c/\ c= f0 cNUMERAL c_0 c= f1 cNUMERAL c_0
D ONE
A |- ((NUMERAL (BIT1 _0)) = (SUC (NUMERAL _0)))
T c= cNUMERAL cBIT1 c_0 cSUC cNUMERAL c_0
D TWO
A |- ((NUMERAL (BIT0 (BIT1 _0))) = (SUC (NUMERAL (BIT1 _0))))
T c= cNUMERAL cBIT0 cBIT1 c_0 cSUC cNUMERAL cBIT1 c_0
D ADD1
A |- (!m. ((SUC m) = (m + (NUMERAL (BIT1 _0)))))
T c= cSUC f0 c+ f0 cNUMERAL cBIT1 c_0
D Ssrnat.mul0n
A |- (!n. (((NUMERAL _0) * n) = (NUMERAL _0)))
T c= c* cNUMERAL c_0 f0 cNUMERAL c_0
D MULT_0
A |- (!m. ((m * (NUMERAL _0)) = (NUMERAL _0)))
T c= c* f0 cNUMERAL c_0 cNUMERAL c_0
D MULT_SUC
A |- (!m. (!n. ((m * (SUC n)) = (m + (m * n)))))
T c= c* f0 cSUC f1 c+ f0 c* f0 f1
D MULT_CLAUSES
A |- ((!n. (((NUMERAL _0) * n) = (NUMERAL _0))) /\ ((!m. ((m * (NUMERAL _0)) = (NUMERAL _0))) /\ ((!n. (((NUMERAL (BIT1 _0)) * n) = n)) /\ ((!m. ((m * (NUMERAL (BIT1 _0))) = m)) /\ ((!m. (!n. (((SUC m) * n) = ((m * n) + n)))) /\ (!m. (!n. ((m * (SUC n)) = (m + (m * n))))))))))
T c/\ ! c= c* cNUMERAL c_0 b0 cNUMERAL c_0 c/\ ! c= c* b0 cNUMERAL c_0 cNUMERAL c_0 c/\ ! c= c* cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= c* b0 cNUMERAL cBIT1 c_0 b0 c/\ ! ! c= c* cSUC b0 b1 c+ c* b0 b1 b1 ! ! c= c* b0 cSUC b1 c+ b0 c* b0 b1
D Ssrnat.mul1n
A |- (!n. (((NUMERAL (BIT1 _0)) * n) = n))
T c= c* cNUMERAL cBIT1 c_0 f0 f0
D LEFT_ADD_DISTRIB
A |- (!m. (!n. (!p. ((m * (n + p)) = ((m * n) + (m * p))))))
T c= c* f0 c+ f1 f2 c+ c* f0 f1 c* f0 f2
D MULT_AC
A |- (((m * n) = (n * m)) /\ ((((m * n) * p) = (m * (n * p))) /\ ((m * (n * p)) = (n * (m * p)))))
T c/\ c= c* f0 f1 c* f1 f0 c/\ c= c* c* f0 f1 f2 c* f0 c* f1 f2 c= c* f0 c* f1 f2 c* f1 c* f0 f2
D Ssrnat.expnS
A |- (!m. (!n. ((m EXP (SUC n)) = (m * (m EXP n)))))
T c= cEXP f0 cSUC f1 c* f0 cEXP f0 f1
D Ssrnat.expn0
A |- (!m. ((m EXP (NUMERAL _0)) = (NUMERAL (BIT1 _0))))
T c= cEXP f0 cNUMERAL c_0 cNUMERAL cBIT1 c_0
D EXP_2
A |- (!n. ((n EXP (NUMERAL (BIT0 (BIT1 _0)))) = (n * n)))
T c= cEXP f0 cNUMERAL cBIT0 cBIT1 c_0 c* f0 f0
D LE
A |- ((!m. ((m <= (NUMERAL _0)) = (m = (NUMERAL _0)))) /\ (!m. (!n. ((m <= (SUC n)) = ((m = (SUC n)) \/ (m <= n))))))
T c/\ ! c= c<= b0 cNUMERAL c_0 c= b0 cNUMERAL c_0 ! ! c= c<= b0 cSUC b1 c\/ c= b0 cSUC b1 c<= b0 b1
D LE_0
A |- (!n. ((NUMERAL _0) <= n))
T c<= cNUMERAL c_0 f0
D NOT_LE
A |- (!m. (!n. ((~ (m <= n)) = (n < m))))
T c= c~ c<= f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D Ssrnat.eqn_leq
A |- (!m. (!n. ((m = n) = ((m <= n) /\ (n <= m)))))
T c= c= f0 f1 c/\ c<= f0 f1 c<= f1 f0
D ARITH_ZERO
A |- (((NUMERAL (NUMERAL _0)) = (NUMERAL _0)) /\ ((BIT0 _0) = _0))
T c/\ c= cNUMERAL cNUMERAL c_0 cNUMERAL c_0 c= cBIT0 c_0 c_0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D ARITH_MULT
A |- ((!m. (!n. (((NUMERAL m) * (NUMERAL n)) = (NUMERAL (m * n))))) /\ (((_0 * _0) = _0) /\ ((!n. ((_0 * (BIT0 n)) = _0)) /\ ((!n. ((_0 * (BIT1 n)) = _0)) /\ ((!n. (((BIT0 n) * _0) = _0)) /\ ((!n. (((BIT1 n) * _0) = _0)) /\ ((!m. (!n. (((BIT0 m) * (BIT0 n)) = (BIT0 (BIT0 (m * n)))))) /\ ((!m. (!n. (((BIT0 m) * (BIT1 n)) = ((BIT0 m) + (BIT0 (BIT0 (m * n))))))) /\ ((!m. (!n. (((BIT1 m) * (BIT0 n)) = ((BIT0 n) + (BIT0 (BIT0 (m * n))))))) /\ (!m. (!n. (((BIT1 m) * (BIT1 n)) = ((BIT1 m) + ((BIT0 n) + (BIT0 (BIT0 (m * n)))))))))))))))))
T c/\ ! ! c= c* cNUMERAL b0 cNUMERAL b1 cNUMERAL c* b0 b1 c/\ c= c* c_0 c_0 c_0 c/\ ! c= c* c_0 cBIT0 b0 c_0 c/\ ! c= c* c_0 cBIT1 b0 c_0 c/\ ! c= c* cBIT0 b0 c_0 c_0 c/\ ! c= c* cBIT1 b0 c_0 c_0 c/\ ! ! c= c* cBIT0 b0 cBIT0 b1 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT0 b0 cBIT1 b1 c+ cBIT0 b0 cBIT0 cBIT0 c* b0 b1 c/\ ! ! c= c* cBIT1 b0 cBIT0 b1 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1 ! ! c= c* cBIT1 b0 cBIT1 b1 c+ cBIT1 b0 c+ cBIT0 b1 cBIT0 cBIT0 c* b0 b1
D ARITH_EXP
A |- ((!m. (!n. (((NUMERAL m) EXP (NUMERAL n)) = (NUMERAL (m EXP n))))) /\ (((_0 EXP _0) = (BIT1 _0)) /\ ((!m. (((BIT0 m) EXP _0) = (BIT1 _0))) /\ ((!m. (((BIT1 m) EXP _0) = (BIT1 _0))) /\ ((!n. ((_0 EXP (BIT0 n)) = ((_0 EXP n) * (_0 EXP n)))) /\ ((!m. (!n. (((BIT0 m) EXP (BIT0 n)) = (((BIT0 m) EXP n) * ((BIT0 m) EXP n))))) /\ ((!m. (!n. (((BIT1 m) EXP (BIT0 n)) = (((BIT1 m) EXP n) * ((BIT1 m) EXP n))))) /\ ((!n. ((_0 EXP (BIT1 n)) = _0)) /\ ((!m. (!n. (((BIT0 m) EXP (BIT1 n)) = ((BIT0 m) * (((BIT0 m) EXP n) * ((BIT0 m) EXP n)))))) /\ (!m. (!n. (((BIT1 m) EXP (BIT1 n)) = ((BIT1 m) * (((BIT1 m) EXP n) * ((BIT1 m) EXP n)))))))))))))))
T c/\ ! ! c= cEXP cNUMERAL b0 cNUMERAL b1 cNUMERAL cEXP b0 b1 c/\ c= cEXP c_0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT0 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP cBIT1 b0 c_0 cBIT1 c_0 c/\ ! c= cEXP c_0 cBIT0 b0 c* cEXP c_0 b0 cEXP c_0 b0 c/\ ! ! c= cEXP cBIT0 b0 cBIT0 b1 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 c/\ ! ! c= cEXP cBIT1 b0 cBIT0 b1 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1 c/\ ! c= cEXP c_0 cBIT1 b0 c_0 c/\ ! ! c= cEXP cBIT0 b0 cBIT1 b1 c* cBIT0 b0 c* cEXP cBIT0 b0 b1 cEXP cBIT0 b0 b1 ! ! c= cEXP cBIT1 b0 cBIT1 b1 c* cBIT1 b0 c* cEXP cBIT1 b0 b1 cEXP cBIT1 b0 b1
D REAL_ADD_SYM
A |- (!x. (!y. (((real_add x) y) = ((real_add y) x))))
T c= creal_add f0 f1 creal_add f1 f0
D REAL_ADD_ASSOC
A |- (!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z)))))
T c= creal_add f0 creal_add f1 f2 creal_add creal_add f0 f1 f2
D REAL_ADD_LID
A |- (!x. (((real_add (real_of_num (NUMERAL _0))) x) = x))
T c= creal_add creal_of_num cNUMERAL c_0 f0 f0
D REAL_ADD_LINV
A |- (!x. (((real_add (real_neg x)) x) = (real_of_num (NUMERAL _0))))
T c= creal_add creal_neg f0 f0 creal_of_num cNUMERAL c_0
D REAL_MUL_LID
A |- (!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x))
T c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 f0 f0
D REAL_LE_ANTISYM
A |- (!x. (!y. ((((real_le x) y) /\ ((real_le y) x)) = (x = y))))
T c= c/\ creal_le f0 f1 creal_le f1 f0 c= f0 f1
D Real_ext.REAL_LE
A |- (!m. (!n. (((real_le (real_of_num m)) (real_of_num n)) = (m <= n))))
T c= creal_le creal_of_num f0 creal_of_num f1 c<= f0 f1
D Misc_defs_and_lemmas.REAL_ADD
A |- (!m. (!n. (((real_add (real_of_num m)) (real_of_num n)) = (real_of_num (m + n)))))
T c= creal_add creal_of_num f0 creal_of_num f1 creal_of_num c+ f0 f1
D REAL_OF_NUM_MUL
A |- (!m. (!n. (((real_mul (real_of_num m)) (real_of_num n)) = (real_of_num (m * n)))))
T c= creal_mul creal_of_num f0 creal_of_num f1 creal_of_num c* f0 f1
D real_lt
A |- (!y. (!x. (((real_lt x) y) = (~ ((real_le y) x)))))
T c= creal_lt f0 f1 c~ creal_le f1 f0
D real_ge
A |- (!y. (!x. (((real_ge x) y) = ((real_le y) x))))
T c= creal_ge f0 f1 creal_le f1 f0
D real_gt
A |- (!y. (!x. (((real_gt x) y) = ((real_lt y) x))))
T c= creal_gt f0 f1 creal_lt f1 f0
D REAL_ADD_RID
A |- (!x. (((real_add x) (real_of_num (NUMERAL _0))) = x))
T c= creal_add f0 creal_of_num cNUMERAL c_0 f0
D REAL_ADD_RINV
A |- (!x. (((real_add x) (real_neg x)) = (real_of_num (NUMERAL _0))))
T c= creal_add f0 creal_neg f0 creal_of_num cNUMERAL c_0
D REAL_MUL_RZERO
A |- (!x. (((real_mul x) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0))))
T c= creal_mul f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
D REAL_NEGNEG
A |- (!x. ((real_neg (real_neg x)) = x))
T c= creal_neg creal_neg f0 f0
D REAL_MUL_RNEG
A |- (!x. (!y. (((real_mul x) (real_neg y)) = (real_neg ((real_mul x) y)))))
T c= creal_mul f0 creal_neg f1 creal_neg creal_mul f0 f1
D REAL_MUL_LNEG
A |- (!x. (!y. (((real_mul (real_neg x)) y) = (real_neg ((real_mul x) y)))))
T c= creal_mul creal_neg f0 f1 creal_neg creal_mul f0 f1
D REAL_NEG_ADD
A |- (!x. (!y. ((real_neg ((real_add x) y)) = ((real_add (real_neg x)) (real_neg y)))))
T c= creal_neg creal_add f0 f1 creal_add creal_neg f0 creal_neg f1
D REAL_LE_LNEG
A |- (!x. (!y. (((real_le (real_neg x)) y) = ((real_le (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c= creal_le creal_neg f0 f1 creal_le creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_LE_NEG
A |- (!x. (!y. (((real_le (real_neg x)) (real_neg y)) = ((real_le y) x))))
T c= creal_le creal_neg f0 creal_neg f1 creal_le f1 f0
D REAL_LE_RNEG
A |- (!x. (!y. (((real_le x) (real_neg y)) = ((real_le ((real_add x) y)) (real_of_num (NUMERAL _0))))))
T c= creal_le f0 creal_neg f1 creal_le creal_add f0 f1 creal_of_num cNUMERAL c_0
D REAL_SUB_LE
A |- (!x. (!y. (((real_le (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_le y) x))))
T c= creal_le creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_le f1 f0
D REAL_NEG_SUB
A |- (!x. (!y. ((real_neg ((real_sub x) y)) = ((real_sub y) x))))
T c= creal_neg creal_sub f0 f1 creal_sub f1 f0
D REAL_LE_LT
A |- (!x. (!y. (((real_le x) y) = (((real_lt x) y) \/ (x = y)))))
T c= creal_le f0 f1 c\/ creal_lt f0 f1 c= f0 f1
D REAL_SUB_LT
A |- (!x. (!y. (((real_lt (real_of_num (NUMERAL _0))) ((real_sub x) y)) = ((real_lt y) x))))
T c= creal_lt creal_of_num cNUMERAL c_0 creal_sub f0 f1 creal_lt f1 f0
D REAL_SUB_0
A |- (!x. (!y. ((((real_sub x) y) = (real_of_num (NUMERAL _0))) = (x = y))))
T c= c= creal_sub f0 f1 creal_of_num cNUMERAL c_0 c= f0 f1
D Real_ext.REAL_PROP_POS_ADD2
A |- (!x. (!y. ((((real_lt (real_of_num (NUMERAL _0))) x) /\ ((real_lt (real_of_num (NUMERAL _0))) y)) ==> ((real_lt (real_of_num (NUMERAL _0))) ((real_add x) y)))))
T c==> c/\ creal_lt creal_of_num cNUMERAL c_0 f0 creal_lt creal_of_num cNUMERAL c_0 f1 creal_lt creal_of_num cNUMERAL c_0 creal_add f0 f1
D REAL_POLY_CLAUSES
A |- ((!x. (!y. (!z. (((real_add x) ((real_add y) z)) = ((real_add ((real_add x) y)) z))))) /\ ((!x. (!y. (((real_add x) y) = ((real_add y) x)))) /\ ((!x. (((real_add (real_of_num (NUMERAL _0))) x) = x)) /\ ((!x. (!y. (!z. (((real_mul x) ((real_mul y) z)) = ((real_mul ((real_mul x) y)) z))))) /\ ((!x. (!y. (((real_mul x) y) = ((real_mul y) x)))) /\ ((!x. (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) x) = x)) /\ ((!x. (((real_mul (real_of_num (NUMERAL _0))) x) = (real_of_num (NUMERAL _0)))) /\ ((!x. (!y. (!z. (((real_mul x) ((real_add y) z)) = ((real_add ((real_mul x) y)) ((real_mul x) z)))))) /\ ((!x. (((real_pow x) (NUMERAL _0)) = (real_of_num (NUMERAL (BIT1 _0))))) /\ (!x. (!n. (((real_pow x) (SUC n)) = ((real_mul x) ((real_pow x) n))))))))))))))
T c/\ ! ! ! c= creal_add b0 creal_add b1 b2 creal_add creal_add b0 b1 b2 c/\ ! ! c= creal_add b0 b1 creal_add b1 b0 c/\ ! c= creal_add creal_of_num cNUMERAL c_0 b0 b0 c/\ ! ! ! c= creal_mul b0 creal_mul b1 b2 creal_mul creal_mul b0 b1 b2 c/\ ! ! c= creal_mul b0 b1 creal_mul b1 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 b0 b0 c/\ ! c= creal_mul creal_of_num cNUMERAL c_0 b0 creal_of_num cNUMERAL c_0 c/\ ! ! ! c= creal_mul b0 creal_add b1 b2 creal_add creal_mul b0 b1 creal_mul b0 b2 c/\ ! c= creal_pow b0 cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 ! ! c= creal_pow b0 cSUC b1 creal_mul b0 creal_pow b0 b1
D REAL_POLY_NEG_CLAUSES
A |- ((!x. ((real_neg x) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) x))) /\ (!x. (!y. (((real_sub x) y) = ((real_add x) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) y))))))
T c/\ ! c= creal_neg b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b0 ! ! c= creal_sub b0 b1 creal_add b0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 b1
D int_eq
A |- (!x. (!y. ((x = y) = ((real_of_int x) = (real_of_int y)))))
T c= c= f0 f1 c= creal_of_int f0 creal_of_int f1
D int_le
A |- (!x. (!y. (((int_le x) y) = ((real_le (real_of_int x)) (real_of_int y)))))
T c= cint_le f0 f1 creal_le creal_of_int f0 creal_of_int f1
D int_of_num_th
A |- (!n. ((real_of_int (int_of_num n)) = (real_of_num n)))
T c= creal_of_int cint_of_num f0 creal_of_num f0
D int_add_th
A |- (!x. (!y. ((real_of_int ((int_add x) y)) = ((real_add (real_of_int x)) (real_of_int y)))))
T c= creal_of_int cint_add f0 f1 creal_add creal_of_int f0 creal_of_int f1
D INT_LT_DISCRETE
A |- (!x. (!y. (((int_lt x) y) = ((int_le ((int_add x) (int_of_num (NUMERAL (BIT1 _0))))) y))))
T c= cint_lt f0 f1 cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f1
D INT_NOT_EQ
A |- (!x. (!y. ((~ (x = y)) = (((int_lt x) y) \/ ((int_lt y) x)))))
T c= c~ c= f0 f1 c\/ cint_lt f0 f1 cint_lt f1 f0
D INT_NOT_LE
A |- (!x. (!y. ((~ ((int_le x) y)) = ((int_lt y) x))))
T c= c~ cint_le f0 f1 cint_lt f1 f0
D INT_OF_NUM_ADD
A |- (!m. (!n. (((int_add (int_of_num m)) (int_of_num n)) = (int_of_num (m + n)))))
T c= cint_add cint_of_num f0 cint_of_num f1 cint_of_num c+ f0 f1
D INT_OF_NUM_EQ
A |- (!m. (!n. (((int_of_num m) = (int_of_num n)) = (m = n))))
T c= c= cint_of_num f0 cint_of_num f1 c= f0 f1
D INT_OF_NUM_LE
A |- (!m. (!n. (((int_le (int_of_num m)) (int_of_num n)) = (m <= n))))
T c= cint_le cint_of_num f0 cint_of_num f1 c<= f0 f1
D INT_POS
A |- (!n. ((int_le (int_of_num (NUMERAL _0))) (int_of_num n)))
T cint_le cint_of_num cNUMERAL c_0 cint_of_num f0
D Hypermap.addition_exponents
A |- (!m. (!n. (!f. (((POWER f) (m + n)) = (((POWER f) m) o ((POWER f) n))))))
T c= * * part cPOWER f0 c+ f1 f2 * * part co * * part cPOWER f0 f1 * * part cPOWER f0 f2
D Hypermap.LE_SUC_PRE
A |- (!n. (((NUMERAL (BIT1 _0)) <= n) ==> ((SUC (PRE n)) = n)))
T c==> c<= cNUMERAL cBIT1 c_0 f0 c= cSUC cPRE f0 f0
D Hypermap.lemma_complement_path
A |- (!H. (!x. (((plain_hypermap H) /\ ((is_node_nondegenerate H) /\ (x IN (dart H)))) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) /\ ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) /\ ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) /\ (!n. (((is_contour H) ((complement H) x)) n)))))))))
T c==> c/\ cplain_hypermap f0 c/\ cis_node_nondegenerate f0 cIN f1 * part cdart f0 c/\ ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c/\ ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c/\ ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c/\ ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 ! cis_contour f0 * * part ccomplement f0 f1 b0
D Hypermap.is_restricted
A |- (!H. ((is_restricted H) = ((~ ((dart H) = EMPTY)) /\ ((planar_hypermap H) /\ ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x)))))))))))))))
T c= cis_restricted f0 c/\ c~ c= * part cdart f0 part cEMPTY c/\ cplanar_hypermap f0 c/\ cplain_hypermap f0 c/\ cconnected_hypermap f0 c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0
D Lvducxu.INVERSE_FACE_CYCLE
A |- (!x. (!H. ((((POWER (inverse (face_map H))) (CARD ((face H) x))) x) = x)))
T c= cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1 f1
D Auqtzyz.lemma_complement_index_exists
A |- (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= n))) ==> (?i. (?j. ((n = ((((complement_index H) x) i) + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))
T c==> c/\ cis_node_nondegenerate f0 c/\ cIN f1 * part cdart f0 c<= cNUMERAL cBIT1 c_0 f2 c? / c? / c/\ c= f2 c+ ccomplement_index f0 f1 b0 b1 c/\ c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c<= cNUMERAL cBIT1 c_0 b1
D Auqtzyz.complement_index_face_le1
A |- (((is_node_nondegenerate H) /\ (x IN (dart H))) ==> ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))))
T c==> c/\ cis_node_nondegenerate f0 cIN f1 * part cdart f0 c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1
D Auqtzyz.complement_cycle
A |- (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0))))
T c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0
D Auqtzyz.complement_index_add
A |- (!i. (((((complement_index H) x) i) + (((complement_index H) x) (CARD ((face H) x)))) = (((complement_index H) x) (i + (CARD ((face H) x))))))
T c= c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))), (x IN (dart H)) |- ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i)))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c/\ c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c/\ c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c<= cNUMERAL cBIT1 c_0 f5 c==> cIN f1 * part cdart f0 c= ccomplement f0 f1 c+ cSUC f2 cSUC f3 ccomplement f0 f1 cSUC f2
+ ((SUC i) = ((((complement_index H) x) i') + j)), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ (((NUMERAL (BIT1 _0)) <= j) ==> (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))))))))
T c==> c= cSUC f0 c+ ccomplement_index f1 f2 f3 f4 c==> c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c/\ c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c<= cNUMERAL cBIT1 c_0 f4 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= cSUC f5 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= c+ c+ ccomplement_index f1 f2 f3 f4 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c+ c+ ccomplement_index f1 f2 f3 ccomplement_index f1 f2 cCARD * * part cface f1 f2 f4 c==> ! c= ccomplement f1 f2 ccomplement_index f1 f2 b0 cnode_map f1 cPOWER * part cinverse * part cface_map f1 b0 f2 c==> ! c= ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 cinverse * part cnode_map f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> ! c= cface_map f1 ccomplement f1 f2 ccomplement_index f1 f2 b0 ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 c==> ! cis_contour f1 * * part ccomplement f1 f2 b0 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f3 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 c+ f3 cCARD * * part cface f1 f2 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> c= ccomplement f1 f2 c+ f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 ccomplement f1 f2 f0 c= cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2
+ |- ((!x. (((is_node_nondegenerate H) /\ (x IN (dart H))) ==> ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))))) = T)
T c= ! c==> c/\ cis_node_nondegenerate f0 cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 b0 cCARD * * part cface f0 b0 cT
+ |- (T = (((NUMERAL (BIT1 _0)) <= j) ==> (j = (SUC (PRE j)))))
T c= cT c==> c<= cNUMERAL cBIT1 c_0 f0 c= f0 cSUC cPRE f0
+ (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (is_edge_nondegenerate H), (connected_hypermap H), (is_no_double_joins H), ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cis_edge_nondegenerate f0 c==> cconnected_hypermap f0 c==> cis_no_double_joins f0 c==> c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- ((?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))) ==> ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i))))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> cIN f1 * part cdart f0 c==> c? / c/\ c= cSUC f2 c+ ccomplement_index f0 f1 f4 b0 c/\ c< b0 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c<= cNUMERAL cBIT1 c_0 b0 c= ccomplement f0 f1 c+ cSUC f2 cSUC f3 ccomplement f0 f1 cSUC f2
+ (plain_hypermap H) |- ((plain_hypermap H) = T)
T c==> cplain_hypermap f0 c= cplain_hypermap f0 cT
+ |- ((m = n) = ((int_of_num m) = (int_of_num n)))
T c= c= f0 f1 c= cint_of_num f0 cint_of_num f1
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (x IN (dart H)) |- ((((complement H) x) (((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) ((((complement_index H) x) i') + j)))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> cIN f1 * part cdart f0 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((((((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) (real_of_int _10289976))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) (real_of_int _10289976)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_add ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) (real_of_int _10289976)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ c= creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_int f2 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_of_int f2 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289974)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289975)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289976)) /\ ((((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_add (real_of_int _10289974)) ((real_add (real_of_int _10289976)) (real_of_num (NUMERAL (BIT1 _0)))))) /\ (((real_le ((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289974)) (real_of_int _10289976))) \/ ((real_le ((real_add ((real_add (real_of_int _10289974)) (real_of_int _10289976))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))))))))) |- ((((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) \/ (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))))
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c/\ c= creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 c\/ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) |- ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (j = (SUC (PRE j))))))))))
T c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= cSUC f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f3 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f4 c==> c<= cNUMERAL cBIT1 c_0 f4 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f3 f4 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c==> c< f4 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f3 cCARD * * part cface f0 f1 f4 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= f4 cSUC cPRE f4
+ ((NUMERAL (BIT1 _0)) <= j) |- (((NUMERAL (BIT1 _0)) <= j) = T)
T c==> c<= cNUMERAL cBIT1 c_0 f0 c= c<= cNUMERAL cBIT1 c_0 f0 cT
- |- ((((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289992)) /\ (((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)) \/ ((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)))))) ==> F) ==> (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289992)) /\ (((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)) \/ ((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)))))) = (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289992)) /\ (((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)) \/ ((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992))))))
T c= c==> c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 cF c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j))))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ |- (((!m. (!n. (!f. (((POWER f) (m + n)) = (((POWER f) m) o ((POWER f) n)))))) ==> ((\m. (!n. (!f. (((POWER f) (m + n)) = (((POWER f) m) o ((POWER f) n)))))) m)) = ((\m. (!n. (!f. (((POWER f) (m + n)) = (((POWER f) m) o ((POWER f) n)))))) m))
T c= c==> ! ! ! c= * * part cPOWER b2 c+ b0 b1 * * part co * * part cPOWER b2 b0 * * part cPOWER b2 b1 * / ! ! c= * * part cPOWER b2 c+ b0 b1 * * part co * * part cPOWER b2 b0 * * part cPOWER b2 b1 f0 * / ! ! c= * * part cPOWER b2 c+ b0 b1 * * part co * * part cPOWER b2 b0 * * part cPOWER b2 b1 f0
- (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))), (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- ((?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))) /\ ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i))))
T c==> c? / c/\ c= cSUC f0 c+ ccomplement_index f1 f2 f3 b0 c/\ c< b0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c<= cNUMERAL cBIT1 c_0 b0 c==> cplain_hypermap f1 c==> cis_node_nondegenerate f1 c==> c= ccomplement f1 f2 c+ f0 cSUC f4 ccomplement f1 f2 f0 c==> c= cPRE ccomplement_index f1 f2 cCARD * * part cface f1 f2 f4 c==> cIN f2 * part cdart f1 c/\ c? / c/\ c= cSUC f0 c+ ccomplement_index f1 f2 f3 b0 c/\ c< b0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c<= cNUMERAL cBIT1 c_0 b0 c= ccomplement f1 f2 c+ cSUC f0 cSUC f4 ccomplement f1 f2 cSUC f0
- (!n. (((is_contour H) ((complement H) x)) n)) |- ((\n. (((is_contour H) ((complement H) x)) n)) n)
T c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 * / cis_contour f0 * * part ccomplement f0 f1 b0 f2
+ (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((!x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0)))) ==> ((\x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0)))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) = ((\x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0)))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> ! c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 * / c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 * / c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_neg creal_of_num cNUMERAL cBIT1 c_0
+ (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) |- ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) /\ ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))))
T c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f3 f4 c==> c= cSUC f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f3 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f4 c==> c<= cNUMERAL cBIT1 c_0 f4 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c/\ ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f3 f4 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c==> c< f4 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f3 cCARD * * part cface f0 f1 f4 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> c= ccomplement f0 f1 c+ f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 f2 c= cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1
+ ((\j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))) j) |- (((((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))) ==> ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i)))) = ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i))))
T c==> * / c/\ c= cSUC f0 c+ ccomplement_index f1 f2 f3 b0 c/\ c< b0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c<= cNUMERAL cBIT1 c_0 b0 f4 c= c==> c/\ c= cSUC f0 c+ ccomplement_index f1 f2 f3 f4 c/\ c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c<= cNUMERAL cBIT1 c_0 f4 c= ccomplement f1 f2 c+ cSUC f0 cSUC f5 ccomplement f1 f2 cSUC f0 c= ccomplement f1 f2 c+ cSUC f0 cSUC f5 ccomplement f1 f2 cSUC f0
+ |- (((SUC i) = ((((complement_index H) x) i') + (SUC j1))) ==> (i = ((((complement_index H) x) i') + j1)))
T c==> c= cSUC f0 c+ ccomplement_index f1 f2 f3 cSUC f4 c= f0 c+ ccomplement_index f1 f2 f3 f4
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) |- (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 f2 ccomplement f0 f1 cSUC ccomplement_index f0 f1 f2
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), ((NUMERAL (BIT1 _0)) <= j) |- ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) /\ (j = (SUC (PRE j))))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> c<= cNUMERAL cBIT1 c_0 f2 c/\ ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= f2 cSUC cPRE f2
- (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!n. (((is_contour H) ((complement H) x)) n)) ==> ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j))))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) /\ ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) /\ (!n. (((is_contour H) ((complement H) x)) n)))), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j)))
T c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c/\ ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c/\ ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (connected_hypermap H), (is_no_double_joins H), ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x)))))))), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cconnected_hypermap f0 c==> cis_no_double_joins f0 c==> c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289984)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289985)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289986)) /\ (((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) \/ ((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))))))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c\/ creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2
- |- ((((real_gt x) (real_of_num (NUMERAL _0))) /\ ((real_ge y) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_gt f0 creal_of_num cNUMERAL c_0 creal_ge f1 creal_of_num cNUMERAL c_0 creal_ge creal_mul f0 f1 creal_of_num cNUMERAL c_0
+ |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289974)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289975)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289976)) /\ ((((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_add (real_of_int _10289974)) ((real_add (real_of_int _10289976)) (real_of_num (NUMERAL (BIT1 _0)))))) /\ (((real_le ((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289974)) (real_of_int _10289976))) \/ ((real_le ((real_add ((real_add (real_of_int _10289974)) (real_of_int _10289976))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))))))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c/\ c= creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- (?j1. (j = (SUC j1)))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> c= cSUC f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f3 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c? / c= f3 cSUC b0
+ |- ((((int_add (int_of_num a)) ((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0))))) = ((int_add (int_of_num a)) ((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0)))))) = ((SUC (i + a)) = ((SUC i) + a)))
T c= c= cint_add cint_of_num f0 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f0 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 c= cSUC c+ f1 f0 c+ cSUC f1 f0
+ |- ((((((POWER (inverse (face_map H))) (CARD ((face H) x))) x) = x) ==> (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) (((POWER (inverse (face_map H))) (CARD ((face H) x))) x)))))) = (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) (((POWER (inverse (face_map H))) (CARD ((face H) x))) x))))))
T c= c==> c= cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1 f1 c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1 c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1
+ |- ((T /\ F) = F)
T c= c/\ cT cF cF
- (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))
T c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
+ |- ((~ (x = y)) = (((int_le ((int_add x) (int_of_num (NUMERAL (BIT1 _0))))) y) \/ ((int_le ((int_add y) (int_of_num (NUMERAL (BIT1 _0))))) x)))
T c= c~ c= f0 f1 c\/ cint_le cint_add f0 cint_of_num cNUMERAL cBIT1 c_0 f1 cint_le cint_add f1 cint_of_num cNUMERAL cBIT1 c_0 f0
+ |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num i)) ==> (((int_le (int_of_num (NUMERAL _0))) (int_of_num j1)) ==> ((~ (((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num b)) ((int_add (int_of_num j1)) (int_of_num (NUMERAL (BIT1 _0))))))) \/ ((int_of_num i) = ((int_add (int_of_num b)) (int_of_num j1)))))) = (((int_le (int_of_num (NUMERAL _0))) (int_of_num j1)) ==> ((~ (((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num b)) ((int_add (int_of_num j1)) (int_of_num (NUMERAL (BIT1 _0))))))) \/ ((int_of_num i) = ((int_add (int_of_num b)) (int_of_num j1))))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f1 c\/ c~ c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f2 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 c= cint_of_num f0 cint_add cint_of_num f2 cint_of_num f1 c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f1 c\/ c~ c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f2 cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 c= cint_of_num f0 cint_add cint_of_num f2 cint_of_num f1
+ |- ((\n. (!H. (!x. (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= n))) ==> (?i. (?j. ((n = ((((complement_index H) x) i) + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))))) (SUC i))
T * / ! ! c==> c/\ cis_node_nondegenerate b1 c/\ cIN b2 * part cdart b1 c<= cNUMERAL cBIT1 c_0 b0 c? / c? / c/\ c= b0 c+ ccomplement_index b1 b2 b3 b4 c/\ c< b4 cCARD * * part cnode b1 cPOWER * part cinverse * part cface_map b1 cSUC b3 b2 c<= cNUMERAL cBIT1 c_0 b4 cSUC f0
+ (((real_ge (real_of_int _10289984)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289985)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289986)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))) |- ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (!n. (((is_contour H) ((complement H) x)) n)) |- (((is_contour H) ((complement H) x)) n)
T c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 cis_contour f0 * * part ccomplement f0 f1 f2
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (x IN (dart H)) |- (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) /\ ((((complement H) x) (((((complement_index H) x) i') + j) + (SUC n))) = (((complement H) x) ((((complement_index H) x) i') + j))))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> cIN f1 * part cdart f0 c/\ c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f4 f5 cSUC f3 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((NUMERAL (BIT1 _0)) <= j), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((NUMERAL (BIT1 _0)) <= j) /\ (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) /\ ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c/\ c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
+ |- (((((NUMERAL (BIT1 _0)) <= j) ==> ((j = (SUC (PRE j))) = T)) ==> ((((NUMERAL (BIT1 _0)) <= j) ==> (j = (SUC (PRE j)))) = (((NUMERAL (BIT1 _0)) <= j) ==> T))) = ((((NUMERAL (BIT1 _0)) <= j) ==> (j = (SUC (PRE j)))) = (((NUMERAL (BIT1 _0)) <= j) ==> T)))
T c= c==> c==> c<= cNUMERAL cBIT1 c_0 f0 c= c= f0 cSUC cPRE f0 cT c= c==> c<= cNUMERAL cBIT1 c_0 f0 c= f0 cSUC cPRE f0 c==> c<= cNUMERAL cBIT1 c_0 f0 cT c= c==> c<= cNUMERAL cBIT1 c_0 f0 c= f0 cSUC cPRE f0 c==> c<= cNUMERAL cBIT1 c_0 f0 cT
+ (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (connected_hypermap H), ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cconnected_hypermap f0 c==> c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ (plain_hypermap H), (is_node_nondegenerate H), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- ((((((complement H) x) (i + (SUC n))) = (((complement H) x) i)) ==> ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i)))) = T)
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c==> cIN f1 * part cdart f0 c= c==> c= ccomplement f0 f1 c+ f3 cSUC f2 ccomplement f0 f1 f3 c= ccomplement f0 f1 c+ cSUC f3 cSUC f2 ccomplement f0 f1 cSUC f3 cT
+ |- (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= (SUC i)))) ==> (?i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))
T c==> c/\ cis_node_nondegenerate f0 c/\ cIN f1 * part cdart f0 c<= cNUMERAL cBIT1 c_0 cSUC f2 c? / c? / c/\ c= cSUC f2 c+ ccomplement_index f0 f1 b0 b1 c/\ c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c<= cNUMERAL cBIT1 c_0 b1
+ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))), (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (is_edge_nondegenerate H), (is_node_nondegenerate H), (connected_hypermap H), (is_no_double_joins H), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)), (x IN (dart H)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cis_edge_nondegenerate f0 c==> cis_node_nondegenerate f0 c==> cconnected_hypermap f0 c==> cis_no_double_joins f0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c==> cIN f1 * part cdart f0 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ (~ ((dart H) = EMPTY)), (planar_hypermap H), ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))))), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> c~ c= * part cdart f0 part cEMPTY c==> cplanar_hypermap f0 c==> c/\ cplain_hypermap f0 c/\ cconnected_hypermap f0 c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ ((NUMERAL (BIT1 _0)) <= j) |- ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (j = (SUC (PRE j)))))))))))
T c==> c<= cNUMERAL cBIT1 c_0 f0 c==> ! c= ccomplement f1 f2 ccomplement_index f1 f2 b0 cnode_map f1 cPOWER * part cinverse * part cface_map f1 b0 f2 c==> ! c= ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 cinverse * part cnode_map f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> ! c= cface_map f1 ccomplement f1 f2 ccomplement_index f1 f2 b0 ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 c==> ! cis_contour f1 * * part ccomplement f1 f2 b0 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f3 f0 cPOWER * part cinverse * part cnode_map f1 f0 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c< f0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 c+ f3 cCARD * * part cface f1 f2 f0 cPOWER * part cinverse * part cnode_map f1 f0 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= f0 cSUC cPRE f0
+ |- (!j1. (((\j1. (j = (SUC j1))) j1) ==> (((SUC i) = ((((complement_index H) x) i') + j)) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))
T c==> * / c= f0 cSUC b0 f1 c==> c= cSUC f2 c+ ccomplement_index f3 f4 f5 f0 c==> c= ccomplement f3 f4 c+ f2 ccomplement_index f3 f4 cCARD * * part cface f3 f4 ccomplement f3 f4 f2 c= cPOWER * part cinverse * part cnode_map f3 f0 cPOWER * part cinverse * part cface_map f3 cSUC c+ f5 cCARD * * part cface f3 f4 f4 cPOWER * part cinverse * part cnode_map f3 f0 cPOWER * part cinverse * part cface_map f3 cSUC f5 f4
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) |- ((((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> ((((complement H) x) (((((complement_index H) x) i') + j) + (SUC n))) = (((complement H) x) ((((complement_index H) x) i') + j)))) = ((((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> ((SUC (PRE (((complement_index H) x) (CARD ((face H) x))))) = (((complement_index H) x) (CARD ((face H) x))))) ==> ((((complement H) x) (((((complement_index H) x) i') + j) + (SUC n))) = (((complement H) x) ((((complement_index H) x) i') + j)))))
T c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c= c==> c= cSUC f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f3 f4 cSUC f2 ccomplement f0 f1 c+ ccomplement_index f0 f1 f3 f4 c==> c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c= cSUC cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f3 f4 cSUC f2 ccomplement f0 f1 c+ ccomplement_index f0 f1 f3 f4
+ (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))))), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> c/\ cplain_hypermap f0 c/\ cconnected_hypermap f0 c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ |- ((t ==> T) = T)
T c= c==> f0 cT cT
- |- ((((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))) ==> (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))))
T c==> c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- ((\j1. (j = (SUC j1))) (PRE j))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> c= cSUC f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f3 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 * / c= f3 cSUC b0 cPRE f3
+ |- ((y = (real_of_num (NUMERAL _0))) ==> (!x. (((real_mul x) y) = (real_of_num (NUMERAL _0)))))
T c==> c= f0 creal_of_num cNUMERAL c_0 ! c= creal_mul b0 f0 creal_of_num cNUMERAL c_0
+ |- ((((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) (((POWER (inverse (face_map H))) (CARD ((face H) x))) x))) = (((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) x)))
T c= cPOWER * part cinverse * part cnode_map f0 cSUC f1 cPOWER * part cinverse * part cface_map f0 cSUC f2 cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f3 f3 cPOWER * part cinverse * part cnode_map f0 cSUC f1 cPOWER * part cinverse * part cface_map f0 cSUC f2 f3
+ |- (((int_le (int_of_num (NUMERAL _0))) (int_of_num c)) ==> (((int_add (int_of_num a)) ((int_add (int_of_num b)) (int_of_num c))) = ((int_add (int_of_num a)) ((int_add (int_of_num b)) (int_of_num c)))))
T c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c= cint_add cint_of_num f1 cint_add cint_of_num f2 cint_of_num f0 cint_add cint_of_num f1 cint_add cint_of_num f2 cint_of_num f0
+ (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) |- ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))
T c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f3 f4 c==> c= cSUC f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f3 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f4 c==> c<= cNUMERAL cBIT1 c_0 f4 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f3 f4 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c==> c< f4 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f3 cCARD * * part cface f0 f1 f4 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> c= ccomplement f0 f1 c+ f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 f2 c= cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1
+ |- (((!f. (((POWER f) (m + n)) = (((POWER f) m) o ((POWER f) n)))) ==> ((\f. (((POWER f) (m + n)) = (((POWER f) m) o ((POWER f) n)))) f)) = ((\f. (((POWER f) (m + n)) = (((POWER f) m) o ((POWER f) n)))) f))
T c= c==> ! c= * * part cPOWER b0 c+ f0 f1 * * part co * * part cPOWER b0 f0 * * part cPOWER b0 f1 * / c= * * part cPOWER b0 c+ f0 f1 * * part co * * part cPOWER b0 f0 * * part cPOWER b0 f1 f2 * / c= * * part cPOWER b0 c+ f0 f1 * * part co * * part cPOWER b0 f0 * * part cPOWER b0 f1 f2
+ ((SUC i) = ((((complement_index H) x) i') + j)), ((NUMERAL (BIT1 _0)) <= j), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))))))
T c==> c= cSUC f0 c+ ccomplement_index f1 f2 f3 f4 c==> c<= cNUMERAL cBIT1 c_0 f4 c==> c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= cSUC f5 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= c+ c+ ccomplement_index f1 f2 f3 f4 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c+ c+ ccomplement_index f1 f2 f3 ccomplement_index f1 f2 cCARD * * part cface f1 f2 f4 c==> ! c= ccomplement f1 f2 ccomplement_index f1 f2 b0 cnode_map f1 cPOWER * part cinverse * part cface_map f1 b0 f2 c==> ! c= ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 cinverse * part cnode_map f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> ! c= cface_map f1 ccomplement f1 f2 ccomplement_index f1 f2 b0 ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 c==> ! cis_contour f1 * * part ccomplement f1 f2 b0 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f3 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 c+ f3 cCARD * * part cface f1 f2 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> c= ccomplement f1 f2 c+ f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 ccomplement f1 f2 f0 c= cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- (((((complement H) x) (i + (SUC n))) = (((complement H) x) i)) /\ ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i))))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> cIN f1 * part cdart f0 c/\ c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c= ccomplement f0 f1 c+ cSUC f2 cSUC f3 ccomplement f0 f1 cSUC f2
+ |- ((\n. (((NUMERAL (BIT1 _0)) <= n) ==> ((SUC (PRE n)) = n))) n)
T * / c==> c<= cNUMERAL cBIT1 c_0 b0 c= cSUC cPRE b0 b0 f0
+ (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (is_edge_nondegenerate H), (is_node_nondegenerate H), (connected_hypermap H), (is_no_double_joins H), ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x)))))), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cis_edge_nondegenerate f0 c==> cis_node_nondegenerate f0 c==> cconnected_hypermap f0 c==> cis_no_double_joins f0 c==> c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
- |- (T = ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))))
T c= cT creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
+ |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num a)) ==> (((int_le (int_of_num (NUMERAL _0))) (int_of_num b)) ==> (((int_le (int_of_num (NUMERAL _0))) (int_of_num c)) ==> (((int_add (int_of_num a)) ((int_add (int_of_num b)) (int_of_num c))) = ((int_add (int_of_num a)) ((int_add (int_of_num b)) (int_of_num c))))))) = (((int_le (int_of_num (NUMERAL _0))) (int_of_num b)) ==> (((int_le (int_of_num (NUMERAL _0))) (int_of_num c)) ==> (((int_add (int_of_num a)) ((int_add (int_of_num b)) (int_of_num c))) = ((int_add (int_of_num a)) ((int_add (int_of_num b)) (int_of_num c)))))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f1 c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f2 c= cint_add cint_of_num f0 cint_add cint_of_num f1 cint_of_num f2 cint_add cint_of_num f0 cint_add cint_of_num f1 cint_of_num f2 c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f1 c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f2 c= cint_add cint_of_num f0 cint_add cint_of_num f1 cint_of_num f2 cint_add cint_of_num f0 cint_add cint_of_num f1 cint_of_num f2
+ |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
+ (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) /\ ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> c= cSUC f4 c+ ccomplement_index f0 f1 f2 f3 c==> c= cSUC f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f3 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c/\ c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> c= ccomplement f0 f1 c+ f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 f4 c= cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1
+ |- (((!f. (!g. ((f o g) = (\x. (f (g x)))))) ==> ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)) = ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f))
T c= c==> ! ! c= * * part co b0 b1 / * b0 * b1 b2 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0 * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- |- (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!c. ((((((complement_index H) x) i') + j) + c) = (((((complement_index H) x) i') + c) + j))) ==> ((\c. ((((((complement_index H) x) i') + j) + c) = (((((complement_index H) x) i') + c) + j))) (((complement_index H) x) (CARD ((face H) x))))) = ((\c. ((((((complement_index H) x) i') + j) + c) = (((((complement_index H) x) i') + c) + j))) (((complement_index H) x) (CARD ((face H) x)))))
T c= c==> ! c= c+ c+ ccomplement_index f0 f1 f2 f3 b0 c+ c+ ccomplement_index f0 f1 f2 b0 f3 * / c= c+ c+ ccomplement_index f0 f1 f2 f3 b0 c+ c+ ccomplement_index f0 f1 f2 b0 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 * / c= c+ c+ ccomplement_index f0 f1 f2 f3 b0 c+ c+ ccomplement_index f0 f1 f2 b0 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1
+ (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))
T c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f3 f4 c==> c= cSUC f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f3 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f4 c==> c<= cNUMERAL cBIT1 c_0 f4 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f4 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f3 f4 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c==> c< f4 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f3 cCARD * * part cface f0 f1 f4 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> c= ccomplement f0 f1 c+ f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 f2 c= cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f4 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1
+ |- ((i = ((((complement_index H) x) i') + j1)) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) x)))))
T c==> c= f0 c+ ccomplement_index f1 f2 f3 f4 c==> c= ccomplement f1 f2 c+ f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 ccomplement f1 f2 f0 c= cPOWER * part cinverse * part cnode_map f1 cSUC f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 cPOWER * part cinverse * part cnode_map f1 cSUC f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2
+ ((NUMERAL (BIT1 _0)) <= j) |- (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (j = (SUC (PRE j)))))))))))))
T c==> c<= cNUMERAL cBIT1 c_0 f0 c==> c= cSUC f1 ccomplement_index f2 f3 cCARD * * part cface f2 f3 c==> c= c+ c+ ccomplement_index f2 f3 f4 f0 ccomplement_index f2 f3 cCARD * * part cface f2 f3 c+ c+ ccomplement_index f2 f3 f4 ccomplement_index f2 f3 cCARD * * part cface f2 f3 f0 c==> ! c= ccomplement f2 f3 ccomplement_index f2 f3 b0 cnode_map f2 cPOWER * part cinverse * part cface_map f2 b0 f3 c==> ! c= ccomplement f2 f3 cSUC ccomplement_index f2 f3 b0 cinverse * part cnode_map f2 cPOWER * part cinverse * part cface_map f2 cSUC b0 f3 c==> ! c= cface_map f2 ccomplement f2 f3 ccomplement_index f2 f3 b0 ccomplement f2 f3 cSUC ccomplement_index f2 f3 b0 c==> ! cis_contour f2 * * part ccomplement f2 f3 b0 c==> c= ccomplement f2 f3 c+ ccomplement_index f2 f3 f4 f0 cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC f4 f3 c==> c< f0 cCARD * * part cnode f2 cPOWER * part cinverse * part cface_map f2 cSUC c+ f4 cCARD * * part cface f2 f3 f3 c==> c= ccomplement f2 f3 c+ ccomplement_index f2 f3 c+ f4 cCARD * * part cface f2 f3 f0 cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC c+ f4 cCARD * * part cface f2 f3 f3 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f2 cPOWER * part cinverse * part cface_map f2 cSUC b0 f3 c= ccomplement f2 f3 c+ ccomplement_index f2 f3 b0 b1 cPOWER * part cinverse * part cnode_map f2 b1 cPOWER * part cinverse * part cface_map f2 cSUC b0 f3 c= f0 cSUC cPRE f0
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
+ ((((POWER (inverse (face_map H))) (CARD ((face H) x))) x) = x), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) (((POWER (inverse (face_map H))) (CARD ((face H) x))) x)))))
T c==> c= cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1 f1 c==> c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1
- |- ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((int_le (int_of_num (NUMERAL _0))) _10289992) ==> (_10289992 = _10289992))
T c==> cint_le cint_of_num cNUMERAL c_0 f0 c= f0 f0
+ |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289984)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289985)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289986)) /\ (((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) \/ ((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))))))))) ==> F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c\/ creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 cF
+ |- (((!n. (!H. (!x. (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= n))) ==> (?i. (?j. ((n = ((((complement_index H) x) i) + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))))) ==> ((\n. (!H. (!x. (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= n))) ==> (?i. (?j. ((n = ((((complement_index H) x) i) + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))))) (SUC i))) = ((\n. (!H. (!x. (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= n))) ==> (?i. (?j. ((n = ((((complement_index H) x) i) + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))))) (SUC i)))
T c= c==> ! ! ! c==> c/\ cis_node_nondegenerate b1 c/\ cIN b2 * part cdart b1 c<= cNUMERAL cBIT1 c_0 b0 c? / c? / c/\ c= b0 c+ ccomplement_index b1 b2 b3 b4 c/\ c< b4 cCARD * * part cnode b1 cPOWER * part cinverse * part cface_map b1 cSUC b3 b2 c<= cNUMERAL cBIT1 c_0 b4 * / ! ! c==> c/\ cis_node_nondegenerate b1 c/\ cIN b2 * part cdart b1 c<= cNUMERAL cBIT1 c_0 b0 c? / c? / c/\ c= b0 c+ ccomplement_index b1 b2 b3 b4 c/\ c< b4 cCARD * * part cnode b1 cPOWER * part cinverse * part cface_map b1 cSUC b3 b2 c<= cNUMERAL cBIT1 c_0 b4 cSUC f0 * / ! ! c==> c/\ cis_node_nondegenerate b1 c/\ cIN b2 * part cdart b1 c<= cNUMERAL cBIT1 c_0 b0 c? / c? / c/\ c= b0 c+ ccomplement_index b1 b2 b3 b4 c/\ c< b4 cCARD * * part cnode b1 cPOWER * part cinverse * part cface_map b1 cSUC b3 b2 c<= cNUMERAL cBIT1 c_0 b4 cSUC f0
+ |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289990)) /\ ((real_le ((real_add ((real_add (real_of_int _10289990)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) ==> F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 cF
+ |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _10289990) ==> ((int_le (int_of_num (NUMERAL (BIT1 _0)))) ((int_add _10289990) (int_of_num (NUMERAL (BIT1 _0))))))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 cint_le cint_of_num cNUMERAL cBIT1 c_0 cint_add f0 cint_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) |- (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (j = (SUC (PRE j)))))))))))))
T c==> c<= cNUMERAL cBIT1 c_0 f0 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= cSUC f3 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= c+ c+ ccomplement_index f1 f2 f4 f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c+ c+ ccomplement_index f1 f2 f4 ccomplement_index f1 f2 cCARD * * part cface f1 f2 f0 c==> ! c= ccomplement f1 f2 ccomplement_index f1 f2 b0 cnode_map f1 cPOWER * part cinverse * part cface_map f1 b0 f2 c==> ! c= ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 cinverse * part cnode_map f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> ! c= cface_map f1 ccomplement f1 f2 ccomplement_index f1 f2 b0 ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 c==> ! cis_contour f1 * * part ccomplement f1 f2 b0 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f4 f0 cPOWER * part cinverse * part cnode_map f1 f0 cPOWER * part cinverse * part cface_map f1 cSUC f4 f2 c==> c< f0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC c+ f4 cCARD * * part cface f1 f2 f2 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 c+ f4 cCARD * * part cface f1 f2 f0 cPOWER * part cinverse * part cnode_map f1 f0 cPOWER * part cinverse * part cface_map f1 cSUC c+ f4 cCARD * * part cface f1 f2 f2 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= f0 cSUC cPRE f0
+ (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) /\ (!n. (((is_contour H) ((complement H) x)) n))), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j)))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c/\ ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ |- (((NUMERAL (BIT1 _0)) = (NUMERAL _0)) = F)
T c= c= cNUMERAL cBIT1 c_0 cNUMERAL c_0 cF
+ ((NUMERAL (BIT1 _0)) <= j) |- (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (j = (SUC (PRE j)))))
T c==> c<= cNUMERAL cBIT1 c_0 f0 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 c+ f3 cCARD * * part cface f1 f2 f0 cPOWER * part cinverse * part cnode_map f1 f0 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= f0 cSUC cPRE f0
+ |- ((j = (SUC (PRE j))) = ((\j1. (j = (SUC j1))) (PRE j)))
T c= c= f0 cSUC cPRE f0 * / c= f0 cSUC b0 cPRE f0
- |- (((x = x) ==> p) = p)
T c= c==> c= f0 f0 f1 f1
+ ((SUC i) = ((((complement_index H) x) i') + j)), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((NUMERAL (BIT1 _0)) <= j) ==> (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))))))))
T c==> c= cSUC f0 c+ ccomplement_index f1 f2 f3 f4 c==> c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c<= cNUMERAL cBIT1 c_0 f4 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= cSUC f5 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= c+ c+ ccomplement_index f1 f2 f3 f4 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c+ c+ ccomplement_index f1 f2 f3 ccomplement_index f1 f2 cCARD * * part cface f1 f2 f4 c==> ! c= ccomplement f1 f2 ccomplement_index f1 f2 b0 cnode_map f1 cPOWER * part cinverse * part cface_map f1 b0 f2 c==> ! c= ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 cinverse * part cnode_map f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> ! c= cface_map f1 ccomplement f1 f2 ccomplement_index f1 f2 b0 ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 c==> ! cis_contour f1 * * part ccomplement f1 f2 b0 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f3 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 c+ f3 cCARD * * part cface f1 f2 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> c= ccomplement f1 f2 c+ f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 ccomplement f1 f2 f0 c= cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2
+ ((~ ((dart H) = EMPTY)) /\ ((planar_hypermap H) /\ ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))))))), (((~ ((dart H) = EMPTY)) /\ ((planar_hypermap H) /\ ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))))))) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> c/\ c~ c= * part cdart f0 part cEMPTY c/\ cplanar_hypermap f0 c/\ cplain_hypermap f0 c/\ cconnected_hypermap f0 c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c/\ c/\ c~ c= * part cdart f0 part cEMPTY c/\ cplanar_hypermap f0 c/\ cplain_hypermap f0 c/\ cconnected_hypermap f0 c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((int_of_num (m + n)) = ((int_add (int_of_num m)) (int_of_num n)))
T c= cint_of_num c+ f0 f1 cint_add cint_of_num f0 cint_of_num f1
+ |- (((!x. (((\j1. (j = (SUC j1))) x) ==> (((SUC i) = ((((complement_index H) x) i') + j)) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))) ==> ((?j1. (j = (SUC j1))) ==> (((SUC i) = ((((complement_index H) x) i') + j)) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))) = ((?j1. (j = (SUC j1))) ==> (((SUC i) = ((((complement_index H) x) i') + j)) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))
T c= c==> ! c==> * / c= f0 cSUC b1 b0 c==> c= cSUC f1 c+ ccomplement_index f2 f3 f4 f0 c==> c= ccomplement f2 f3 c+ f1 ccomplement_index f2 f3 cCARD * * part cface f2 f3 ccomplement f2 f3 f1 c= cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC c+ f4 cCARD * * part cface f2 f3 f3 cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC f4 f3 c==> c? / c= f0 cSUC b0 c==> c= cSUC f1 c+ ccomplement_index f2 f3 f4 f0 c==> c= ccomplement f2 f3 c+ f1 ccomplement_index f2 f3 cCARD * * part cface f2 f3 ccomplement f2 f3 f1 c= cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC c+ f4 cCARD * * part cface f2 f3 f3 cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC f4 f3 c==> c? / c= f0 cSUC b0 c==> c= cSUC f1 c+ ccomplement_index f2 f3 f4 f0 c==> c= ccomplement f2 f3 c+ f1 ccomplement_index f2 f3 cCARD * * part cface f2 f3 ccomplement f2 f3 f1 c= cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC c+ f4 cCARD * * part cface f2 f3 f3 cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC f4 f3
+ ((SUC i) = ((((complement_index H) x) i') + j)), ((NUMERAL (BIT1 _0)) <= j) |- (((NUMERAL (BIT1 _0)) <= j) /\ (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))))))))
T c==> c= cSUC f0 c+ ccomplement_index f1 f2 f3 f4 c==> c<= cNUMERAL cBIT1 c_0 f4 c/\ c<= cNUMERAL cBIT1 c_0 f4 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= cSUC f5 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= c+ c+ ccomplement_index f1 f2 f3 f4 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c+ c+ ccomplement_index f1 f2 f3 ccomplement_index f1 f2 cCARD * * part cface f1 f2 f4 c==> ! c= ccomplement f1 f2 ccomplement_index f1 f2 b0 cnode_map f1 cPOWER * part cinverse * part cface_map f1 b0 f2 c==> ! c= ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 cinverse * part cnode_map f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> ! c= cface_map f1 ccomplement f1 f2 ccomplement_index f1 f2 b0 ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 c==> ! cis_contour f1 * * part ccomplement f1 f2 b0 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f3 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 c+ f3 cCARD * * part cface f1 f2 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> c= ccomplement f1 f2 c+ f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 ccomplement f1 f2 f0 c= cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2
+ ((NUMERAL (BIT1 _0)) <= j) |- ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (j = (SUC (PRE j))))
T c==> c<= cNUMERAL cBIT1 c_0 f0 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= f0 cSUC cPRE f0
+ |- (((SUC i) = ((((complement_index H) x) i') + (SUC j1))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) x)))))
T c==> c= cSUC f0 c+ ccomplement_index f1 f2 f3 cSUC f4 c==> c= ccomplement f1 f2 c+ f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 ccomplement f1 f2 f0 c= cPOWER * part cinverse * part cnode_map f1 cSUC f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 cPOWER * part cinverse * part cnode_map f1 cSUC f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2
+ |- (((real_add (real_of_num m)) (real_neg (real_of_num m))) = (real_of_num (NUMERAL _0)))
T c= creal_add creal_of_num f0 creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) /\ ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
+ |- ((((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((((complement H) x) (((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) ((((complement_index H) x) i') + j)))) = ((((complement H) x) (((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) ((((complement_index H) x) i') + j))))
T c= c==> c= c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3
+ |- (!c. ((((((complement_index H) x) i') + j) + c) = (((((complement_index H) x) i') + c) + j)))
T c= c+ c+ ccomplement_index f0 f1 f2 f3 f4 c+ c+ ccomplement_index f0 f1 f2 f4 f3
+ |- (((int_le (int_of_num (NUMERAL _0))) (int_of_num j1)) ==> ((~ (((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num b)) ((int_add (int_of_num j1)) (int_of_num (NUMERAL (BIT1 _0))))))) \/ ((int_of_num i) = ((int_add (int_of_num b)) (int_of_num j1)))))
T c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c\/ c~ c= cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f2 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_of_num f1 cint_add cint_of_num f2 cint_of_num f0
+ |- ((((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) x)))
T c= cPOWER * part cinverse * part cnode_map f0 cSUC f1 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f3 f3 cPOWER * part cinverse * part cnode_map f0 cSUC f1 cPOWER * part cinverse * part cface_map f0 cSUC f2 f3
+ |- (((!i. (((((complement_index H) x) i) + (((complement_index H) x) (CARD ((face H) x)))) = (((complement_index H) x) (i + (CARD ((face H) x)))))) ==> ((\i. (((((complement_index H) x) i) + (((complement_index H) x) (CARD ((face H) x)))) = (((complement_index H) x) (i + (CARD ((face H) x)))))) i)) = ((\i. (((((complement_index H) x) i) + (((complement_index H) x) (CARD ((face H) x)))) = (((complement_index H) x) (i + (CARD ((face H) x)))))) i))
T c= c==> ! c= c+ ccomplement_index f0 f1 b0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement_index f0 f1 c+ b0 cCARD * * part cface f0 f1 * / c= c+ ccomplement_index f0 f1 b0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement_index f0 f1 c+ b0 cCARD * * part cface f0 f1 f2 * / c= c+ ccomplement_index f0 f1 b0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement_index f0 f1 c+ b0 cCARD * * part cface f0 f1 f2
+ |- ((((int_add (int_of_num a)) ((int_add (int_of_num b)) (int_of_num c))) = ((int_add (int_of_num a)) ((int_add (int_of_num b)) (int_of_num c)))) = T)
T c= c= cint_add cint_of_num f0 cint_add cint_of_num f1 cint_of_num f2 cint_add cint_of_num f0 cint_add cint_of_num f1 cint_of_num f2 cT
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c= cSUC f4 c+ ccomplement_index f0 f1 f2 f3 c==> c= cSUC f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f3 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> c= ccomplement f0 f1 c+ f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 f4 c= cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1
+ (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) /\ F)
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i)))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> cIN f1 * part cdart f0 c= ccomplement f0 f1 c+ cSUC f2 cSUC f3 ccomplement f0 f1 cSUC f2
+ ((\j1. (j = (SUC j1))) j1) |- (((\j1. (j = (SUC j1))) j1) /\ (((SUC i) = ((((complement_index H) x) i') + j)) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))
T c==> * / c= f0 cSUC b0 f1 c/\ * / c= f0 cSUC b0 f1 c==> c= cSUC f2 c+ ccomplement_index f3 f4 f5 f0 c==> c= ccomplement f3 f4 c+ f2 ccomplement_index f3 f4 cCARD * * part cface f3 f4 ccomplement f3 f4 f2 c= cPOWER * part cinverse * part cnode_map f3 f0 cPOWER * part cinverse * part cface_map f3 cSUC c+ f5 cCARD * * part cface f3 f4 f4 cPOWER * part cinverse * part cnode_map f3 f0 cPOWER * part cinverse * part cface_map f3 cSUC f5 f4
+ (((~ ((dart H) = EMPTY)) /\ ((planar_hypermap H) /\ ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))))))) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) |- ((((~ ((dart H) = EMPTY)) /\ ((planar_hypermap H) /\ ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))))))) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) /\ (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i))))
T c==> c/\ c/\ c~ c= * part cdart f0 part cEMPTY c/\ cplanar_hypermap f0 c/\ cplain_hypermap f0 c/\ cconnected_hypermap f0 c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c/\ c/\ c/\ c~ c= * part cdart f0 part cEMPTY c/\ cplanar_hypermap f0 c/\ cplain_hypermap f0 c/\ cconnected_hypermap f0 c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
- |- ((?j. t) = t)
T c= c? / f0 f0
+ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))), (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (is_edge_nondegenerate H), (is_node_nondegenerate H), (connected_hypermap H), (is_no_double_joins H), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- ((((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))) = ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0))))
T c==> ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cis_edge_nondegenerate f0 c==> cis_node_nondegenerate f0 c==> cconnected_hypermap f0 c==> cis_no_double_joins f0 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c==> cIN f1 * part cdart f0 c= c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0
+ |- (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> ((SUC (PRE (((complement_index H) x) (CARD ((face H) x))))) = (((complement_index H) x) (CARD ((face H) x)))))
T c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c= cSUC cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement_index f0 f1 cCARD * * part cface f0 f1
+ (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (x IN (dart H)) |- ((((complement H) x) (((((complement_index H) x) i') + j) + (SUC n))) = (((complement H) x) ((((complement_index H) x) i') + j)))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> cIN f1 * part cdart f0 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f4 f5 cSUC f3 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> c= cSUC f4 c+ ccomplement_index f0 f1 f2 f3 c==> c= cSUC f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f3 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> c= ccomplement f0 f1 c+ f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 f4 c= cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ ((SUC i) = ((((complement_index H) x) i') + j)) |- (((NUMERAL (BIT1 _0)) <= j) ==> (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))))))))
T c==> c= cSUC f0 c+ ccomplement_index f1 f2 f3 f4 c==> c<= cNUMERAL cBIT1 c_0 f4 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= cSUC f5 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c==> c= c+ c+ ccomplement_index f1 f2 f3 f4 ccomplement_index f1 f2 cCARD * * part cface f1 f2 c+ c+ ccomplement_index f1 f2 f3 ccomplement_index f1 f2 cCARD * * part cface f1 f2 f4 c==> ! c= ccomplement f1 f2 ccomplement_index f1 f2 b0 cnode_map f1 cPOWER * part cinverse * part cface_map f1 b0 f2 c==> ! c= ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 cinverse * part cnode_map f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> ! c= cface_map f1 ccomplement f1 f2 ccomplement_index f1 f2 b0 ccomplement f1 f2 cSUC ccomplement_index f1 f2 b0 c==> ! cis_contour f1 * * part ccomplement f1 f2 b0 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f3 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c< f4 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 c+ f3 cCARD * * part cface f1 f2 f4 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c==> c= ccomplement f1 f2 c+ f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 ccomplement f1 f2 f0 c= cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 cPOWER * part cinverse * part cnode_map f1 f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2
+ (connected_hypermap H) |- ((connected_hypermap H) = T)
T c==> cconnected_hypermap f0 c= cconnected_hypermap f0 cT
- (((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((!H. (!x. (((is_node_nondegenerate H) /\ (x IN (dart H))) ==> ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x))))))) ==> ((\H. (!x. (((is_node_nondegenerate H) /\ (x IN (dart H))) ==> ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x))))))) H)) = ((\H. (!x. (((is_node_nondegenerate H) /\ (x IN (dart H))) ==> ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x))))))) H))
T c= c==> ! ! c==> c/\ cis_node_nondegenerate b0 cIN b1 * part cdart b0 c<= cNUMERAL cBIT1 c_0 ccomplement_index b0 b1 cCARD * * part cface b0 b1 * / ! c==> c/\ cis_node_nondegenerate b0 cIN b1 * part cdart b0 c<= cNUMERAL cBIT1 c_0 ccomplement_index b0 b1 cCARD * * part cface b0 b1 f0 * / ! c==> c/\ cis_node_nondegenerate b0 cIN b1 * part cdart b0 c<= cNUMERAL cBIT1 c_0 ccomplement_index b0 b1 cCARD * * part cface b0 b1 f0
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (x IN (dart H)) |- (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((((complement H) x) (((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) ((((complement_index H) x) i') + j))))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> cIN f1 * part cdart f0 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) /\ (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c/\ c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289984)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289985)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289986)) /\ (((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) \/ ((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))))))))) ==> F) ==> (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289984)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289985)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289986)) /\ (((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) \/ ((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))))))))) = (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289984)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289985)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289986)) /\ (((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) \/ ((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986))))))))))
T c= c==> c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c\/ creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 cF c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c\/ creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c\/ creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2
+ |- (((((NUMERAL (BIT1 _0)) <= j) = ((NUMERAL (BIT1 _0)) <= j)) ==> ((((NUMERAL (BIT1 _0)) <= j) ==> ((j = (SUC (PRE j))) = q')) ==> ((((NUMERAL (BIT1 _0)) <= j) ==> (j = (SUC (PRE j)))) = (((NUMERAL (BIT1 _0)) <= j) ==> q')))) = ((((NUMERAL (BIT1 _0)) <= j) ==> ((j = (SUC (PRE j))) = q')) ==> ((((NUMERAL (BIT1 _0)) <= j) ==> (j = (SUC (PRE j)))) = (((NUMERAL (BIT1 _0)) <= j) ==> q'))))
T c= c==> c= c<= cNUMERAL cBIT1 c_0 f0 c<= cNUMERAL cBIT1 c_0 f0 c==> c==> c<= cNUMERAL cBIT1 c_0 f0 c= c= f0 cSUC cPRE f0 f1 c= c==> c<= cNUMERAL cBIT1 c_0 f0 c= f0 cSUC cPRE f0 c==> c<= cNUMERAL cBIT1 c_0 f0 f1 c==> c==> c<= cNUMERAL cBIT1 c_0 f0 c= c= f0 cSUC cPRE f0 f1 c= c==> c<= cNUMERAL cBIT1 c_0 f0 c= f0 cSUC cPRE f0 c==> c<= cNUMERAL cBIT1 c_0 f0 f1
+ (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) /\ (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c= cSUC f4 c+ ccomplement_index f0 f1 f2 f3 c==> c= cSUC f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f3 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c/\ c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> c= ccomplement f0 f1 c+ f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 f4 c= cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1
+ ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) |- (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) = ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j))))
T c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c= c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3
+ |- ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) (((POWER (inverse (face_map H))) (CARD ((face H) x))) x))))) = (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))))
T c= c< f0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f2 cPOWER * part cinverse * part cface_map f1 cCARD * * part cface f1 f3 f3 c< f0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC c+ f2 cCARD * * part cface f1 f3 f3
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) /\ (!n. (((is_contour H) ((complement H) x)) n))), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j)))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c/\ ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (is_edge_nondegenerate H), (connected_hypermap H), (is_no_double_joins H), ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x)))))), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cis_edge_nondegenerate f0 c==> cconnected_hypermap f0 c==> cis_no_double_joins f0 c==> c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num i)) ==> (((int_add (int_of_num a)) ((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0))))) = ((int_add (int_of_num a)) ((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0))))))) = (((int_add (int_of_num a)) ((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0))))) = ((int_add (int_of_num a)) ((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c= cint_add cint_of_num f1 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f1 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_add cint_of_num f1 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f1 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0
+ |- ((NUMERAL (BIT1 _0)) <= (SUC i))
T c<= cNUMERAL cBIT1 c_0 cSUC f0
+ (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) /\ ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) /\ (!n. (((is_contour H) ((complement H) x)) n))))), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j)))
T c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c/\ ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c/\ ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c/\ ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), ((NUMERAL (BIT1 _0)) <= j) |- ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) /\ ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (j = (SUC (PRE j)))))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> c<= cNUMERAL cBIT1 c_0 f2 c/\ ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f3 f2 cPOWER * part cinverse * part cnode_map f0 f2 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c==> c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f3 cCARD * * part cface f0 f1 f2 cPOWER * part cinverse * part cnode_map f0 f2 cPOWER * part cinverse * part cface_map f0 cSUC c+ f3 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= f2 cSUC cPRE f2
+ |- ((T ==> t) = t)
T c= c==> cT f0 f0
+ |- (((!x. (((is_node_nondegenerate H) /\ (x IN (dart H))) ==> ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))))) ==> ((\x. (((is_node_nondegenerate H) /\ (x IN (dart H))) ==> ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))))) x)) = ((\x. (((is_node_nondegenerate H) /\ (x IN (dart H))) ==> ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))))) x))
T c= c==> ! c==> c/\ cis_node_nondegenerate f0 cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 b0 cCARD * * part cface f0 b0 * / c==> c/\ cis_node_nondegenerate f0 cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 b0 cCARD * * part cface f0 b0 f1 * / c==> c/\ cis_node_nondegenerate f0 cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 b0 cCARD * * part cface f0 b0 f1
+ |- (((real_mul (real_neg (real_of_num m))) (real_neg (real_of_num n))) = (real_of_num (m * n)))
T c= creal_mul creal_neg creal_of_num f0 creal_neg creal_of_num f1 creal_of_num c* f0 f1
- ((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))), (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))) |- (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) /\ ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0))))
T c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c==> c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c/\ c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0
- (EMPTY = (dart H)) |- ((dart H) = EMPTY)
T c==> c= part cEMPTY * part cdart f0 c= * part cdart f0 part cEMPTY
+ (planar_hypermap H) |- ((planar_hypermap H) = T)
T c==> cplanar_hypermap f0 c= cplanar_hypermap f0 cT
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j)))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ (((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) |- (((((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_int _10289990))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_add ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_int _10289990))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
+ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))), (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (is_edge_nondegenerate H), (is_node_nondegenerate H), (connected_hypermap H), (is_no_double_joins H), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- (((((complement H) x) ((NUMERAL _0) + (SUC n))) = (((complement H) x) (NUMERAL _0))) /\ (!i. (((((complement H) x) (i + (SUC n))) = (((complement H) x) i)) ==> ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i))))))
T c==> ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cis_edge_nondegenerate f0 c==> cis_node_nondegenerate f0 c==> cconnected_hypermap f0 c==> cis_no_double_joins f0 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c==> cIN f1 * part cdart f0 c/\ c= ccomplement f0 f1 c+ cNUMERAL c_0 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 ! c==> c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0 c= ccomplement f0 f1 c+ cSUC b0 cSUC f2 ccomplement f0 f1 cSUC b0
+ |- ((!b. (!j1. ((~ (((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num b)) ((int_add (int_of_num j1)) (int_of_num (NUMERAL (BIT1 _0))))))) \/ ((int_of_num i) = ((int_add (int_of_num b)) (int_of_num j1)))))) = T)
T c= ! ! c\/ c~ c= cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num b0 cint_add cint_of_num b1 cint_of_num cNUMERAL cBIT1 c_0 c= cint_of_num f0 cint_add cint_of_num b0 cint_of_num b1 cT
+ |- ((\f. (!g. ((f o g) = (\x. (f (g x)))))) f)
T * / ! c= * * part co b0 b1 / * b0 * b1 b2 f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- (((real_mul (real_neg (real_of_num x))) (real_of_num (NUMERAL _0))) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_neg creal_of_num f0 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num j1)) ==> ((~ (((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num b)) ((int_add (int_of_num j1)) (int_of_num (NUMERAL (BIT1 _0))))))) \/ ((int_of_num i) = ((int_add (int_of_num b)) (int_of_num j1))))) = ((~ (((int_add (int_of_num i)) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add (int_of_num b)) ((int_add (int_of_num j1)) (int_of_num (NUMERAL (BIT1 _0))))))) \/ ((int_of_num i) = ((int_add (int_of_num b)) (int_of_num j1)))))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c\/ c~ c= cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f2 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_of_num f1 cint_add cint_of_num f2 cint_of_num f0 c\/ c~ c= cint_add cint_of_num f1 cint_of_num cNUMERAL cBIT1 c_0 cint_add cint_of_num f2 cint_add cint_of_num f0 cint_of_num cNUMERAL cBIT1 c_0 c= cint_of_num f1 cint_add cint_of_num f2 cint_of_num f0
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)) |- (((SUC i) = ((((complement_index H) x) i') + j)) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) ==> (((NUMERAL (BIT1 _0)) <= j) ==> (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
+ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))), (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (is_edge_nondegenerate H), (is_node_nondegenerate H), (connected_hypermap H), (is_no_double_joins H), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cis_edge_nondegenerate f0 c==> cis_node_nondegenerate f0 c==> cconnected_hypermap f0 c==> cis_no_double_joins f0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) |- (((!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))))) ==> ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))))) ==> ((\j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))))) ==> ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))))) j)) = ((\j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))))) ==> ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))))) j))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= c==> ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c< b0 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 b0 cPOWER * part cinverse * part cnode_map f0 b0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 * / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c< b0 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 b0 cPOWER * part cinverse * part cnode_map f0 b0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 f3 * / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c< b0 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 b0 cPOWER * part cinverse * part cnode_map f0 b0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 f3
+ ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) |- (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) = T)
T c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c= c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 cT
+ |- ((((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289984)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289985)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289986)) /\ (((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) \/ ((real_le ((real_add ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289984)) ((real_add (real_of_int _10289985)) (real_of_int _10289986)))))))) = (~ (((int_le (int_of_num (NUMERAL _0))) _10289984) ==> (((int_le (int_of_num (NUMERAL _0))) _10289985) ==> (((int_le (int_of_num (NUMERAL _0))) _10289986) ==> (((int_add _10289984) ((int_add _10289985) _10289986)) = ((int_add _10289984) ((int_add _10289985) _10289986))))))))
T c= c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c\/ creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f1 creal_of_int f2 c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c==> cint_le cint_of_num cNUMERAL c_0 f1 c==> cint_le cint_of_num cNUMERAL c_0 f2 c= cint_add f0 cint_add f1 f2 cint_add f0 cint_add f1 f2
- ((NUMERAL (BIT1 _0)) <= n) |- (((NUMERAL (BIT1 _0)) <= n) /\ ((SUC (PRE n)) = n))
T c==> c<= cNUMERAL cBIT1 c_0 f0 c/\ c<= cNUMERAL cBIT1 c_0 f0 c= cSUC cPRE f0 f0
+ |- ((((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289974)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289975)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289976)) /\ ((((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_add (real_of_int _10289974)) ((real_add (real_of_int _10289976)) (real_of_num (NUMERAL (BIT1 _0)))))) /\ (((real_le ((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289974)) (real_of_int _10289976))) \/ ((real_le ((real_add ((real_add (real_of_int _10289974)) (real_of_int _10289976))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))))))))) ==> F) ==> (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289974)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289975)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289976)) /\ ((((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_add (real_of_int _10289974)) ((real_add (real_of_int _10289976)) (real_of_num (NUMERAL (BIT1 _0)))))) /\ (((real_le ((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289974)) (real_of_int _10289976))) \/ ((real_le ((real_add ((real_add (real_of_int _10289974)) (real_of_int _10289976))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))))))))) = (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289974)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289975)) /\ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289976)) /\ ((((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_add (real_of_int _10289974)) ((real_add (real_of_int _10289976)) (real_of_num (NUMERAL (BIT1 _0)))))) /\ (((real_le ((real_add (real_of_int _10289975)) (real_of_num (NUMERAL (BIT1 _0))))) ((real_add (real_of_int _10289974)) (real_of_int _10289976))) \/ ((real_le ((real_add ((real_add (real_of_int _10289974)) (real_of_int _10289976))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975)))))))))
T c= c==> c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c/\ c= creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 cF c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c/\ c= creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f1 c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f2 c/\ c= creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 c\/ creal_le creal_add creal_of_int f1 creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_of_int f2 creal_le creal_add creal_add creal_of_int f0 creal_of_int f2 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1
+ |- (((((SUC i) = ((((complement_index H) x) i') + (SUC j1))) ==> (i = ((((complement_index H) x) i') + j1))) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) x))))) = (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) x)))))
T c= c==> c==> c= cSUC f0 c+ ccomplement_index f1 f2 f3 cSUC f4 c= f0 c+ ccomplement_index f1 f2 f3 f4 c==> c= ccomplement f1 f2 c+ f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 ccomplement f1 f2 f0 c= cPOWER * part cinverse * part cnode_map f1 cSUC f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 cPOWER * part cinverse * part cnode_map f1 cSUC f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c= ccomplement f1 f2 c+ f0 ccomplement_index f1 f2 cCARD * * part cface f1 f2 ccomplement f1 f2 f0 c= cPOWER * part cinverse * part cnode_map f1 cSUC f4 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 cPOWER * part cinverse * part cnode_map f1 cSUC f4 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2
+ |- ((!q'. ((p = p') ==> ((p' ==> (q = q')) ==> ((p ==> q) = (p' ==> q'))))) = T)
T c= ! c==> c= f0 f1 c==> c==> f1 c= f2 b0 c= c==> f0 f2 c==> f1 b0 cT
+ (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (j = (SUC (PRE j)))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c= cSUC f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f3 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= f3 cSUC cPRE f3
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
+ |- (((NUMERAL (BIT1 _0)) * (NUMERAL (BIT0 (BIT1 _0)))) = (NUMERAL (BIT0 (BIT1 _0))))
T c= c* cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
+ |- ((\H. ((is_restricted H) = ((~ ((dart H) = EMPTY)) /\ ((planar_hypermap H) /\ ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))))))))) H)
T * / c= cis_restricted b0 c/\ c~ c= * part cdart b0 part cEMPTY c/\ cplanar_hypermap b0 c/\ cplain_hypermap b0 c/\ cconnected_hypermap b0 c/\ csimple_hypermap b0 c/\ cis_no_double_joins b0 c/\ cis_edge_nondegenerate b0 c/\ cis_node_nondegenerate b0 ! c==> cIN b1 * part cdart b0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface b0 b1 f0
+ ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) /\ ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) /\ ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) /\ (!n. (((is_contour H) ((complement H) x)) n)))))) ==> ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c/\ ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c/\ ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c/\ ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c/\ ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 ! cis_contour f0 * * part ccomplement f0 f1 b0 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ |- ((\x. (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= (SUC i)))) ==> (?i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))) x)
T * / c==> c/\ cis_node_nondegenerate f0 c/\ cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 c_0 cSUC f1 c? / c? / c/\ c= cSUC f1 c+ ccomplement_index f0 b0 b1 b2 c/\ c< b2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b1 b0 c<= cNUMERAL cBIT1 c_0 b2 f2
+ (((real_ge (real_of_int _10289984)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289985)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289986)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))) |- F
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
+ |- (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j))) = ((((complement H) x) (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j))))
T c= c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3
+ |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _10289984) ==> (((int_le (int_of_num (NUMERAL _0))) _10289985) ==> (((int_le (int_of_num (NUMERAL _0))) _10289986) ==> (((int_add _10289984) ((int_add _10289985) _10289986)) = ((int_add _10289984) ((int_add _10289985) _10289986))))))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c==> cint_le cint_of_num cNUMERAL c_0 f1 c==> cint_le cint_of_num cNUMERAL c_0 f2 c= cint_add f0 cint_add f1 f2 cint_add f0 cint_add f1 f2
+ |- ((!H. (!x. (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= n))) ==> (?i. (?j. ((n = ((((complement_index H) x) i) + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))))))) = T)
T c= ! ! c==> c/\ cis_node_nondegenerate b0 c/\ cIN b1 * part cdart b0 c<= cNUMERAL cBIT1 c_0 f0 c? / c? / c/\ c= f0 c+ ccomplement_index b0 b1 b2 b3 c/\ c< b3 cCARD * * part cnode b0 cPOWER * part cinverse * part cface_map b0 cSUC b2 b1 c<= cNUMERAL cBIT1 c_0 b3 cT
- |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _10289992) ==> (_10289992 = _10289992))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c= f0 f0
+ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))), (~ ((dart H) = EMPTY)), (plain_hypermap H), (planar_hypermap H), (simple_hypermap H), (is_edge_nondegenerate H), (is_node_nondegenerate H), (connected_hypermap H), (is_no_double_joins H), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- (T = ((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))))
T c==> ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c~ c= * part cdart f0 part cEMPTY c==> cplain_hypermap f0 c==> cplanar_hypermap f0 c==> csimple_hypermap f0 c==> cis_edge_nondegenerate f0 c==> cis_node_nondegenerate f0 c==> cconnected_hypermap f0 c==> cis_no_double_joins f0 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c==> cIN f1 * part cdart f0 c= cT c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2
+ |- (((int_le (int_of_num (NUMERAL _0))) _10289974) ==> (((int_le (int_of_num (NUMERAL _0))) _10289975) ==> (((int_le (int_of_num (NUMERAL _0))) _10289976) ==> ((~ (((int_add _10289975) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add _10289974) ((int_add _10289976) (int_of_num (NUMERAL (BIT1 _0))))))) \/ (_10289975 = ((int_add _10289974) _10289976))))))
T c==> cint_le cint_of_num cNUMERAL c_0 f0 c==> cint_le cint_of_num cNUMERAL c_0 f1 c==> cint_le cint_of_num cNUMERAL c_0 f2 c\/ c~ c= cint_add f1 cint_of_num cNUMERAL cBIT1 c_0 cint_add f0 cint_add f2 cint_of_num cNUMERAL cBIT1 c_0 c= f1 cint_add f0 f2
+ |- ((((NUMERAL (BIT1 _0)) <= j) = p') ==> ((p' ==> ((j = (SUC (PRE j))) = q')) ==> ((((NUMERAL (BIT1 _0)) <= j) ==> (j = (SUC (PRE j)))) = (p' ==> q'))))
T c==> c= c<= cNUMERAL cBIT1 c_0 f0 f1 c==> c==> f1 c= c= f0 cSUC cPRE f0 f2 c= c==> c<= cNUMERAL cBIT1 c_0 f0 c= f0 cSUC cPRE f0 c==> f1 f2
- |- ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_div x) (real_of_num (NUMERAL (BIT1 _0)))) = x)
T c= creal_div f0 creal_of_num cNUMERAL cBIT1 c_0 f0
+ ((NUMERAL (BIT1 _0)) <= j) |- ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> (j = (SUC (PRE j))))))))
T c==> c<= cNUMERAL cBIT1 c_0 f0 c==> ! cis_contour f1 * * part ccomplement f1 f2 b0 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f3 f0 cPOWER * part cinverse * part cnode_map f1 f0 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c==> c< f0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> c= ccomplement f1 f2 c+ ccomplement_index f1 f2 c+ f3 cCARD * * part cface f1 f2 f0 cPOWER * part cinverse * part cnode_map f1 f0 cPOWER * part cinverse * part cface_map f1 cSUC c+ f3 cCARD * * part cface f1 f2 f2 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 b0 b1 cPOWER * part cinverse * part cnode_map f1 b1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c= f0 cSUC cPRE f0
+ |- (~ (~ (((int_le (int_of_num (NUMERAL _0))) _10289974) ==> (((int_le (int_of_num (NUMERAL _0))) _10289975) ==> (((int_le (int_of_num (NUMERAL _0))) _10289976) ==> ((~ (((int_add _10289975) (int_of_num (NUMERAL (BIT1 _0)))) = ((int_add _10289974) ((int_add _10289976) (int_of_num (NUMERAL (BIT1 _0))))))) \/ (_10289975 = ((int_add _10289974) _10289976))))))))
T c~ c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c==> cint_le cint_of_num cNUMERAL c_0 f1 c==> cint_le cint_of_num cNUMERAL c_0 f2 c\/ c~ c= cint_add f1 cint_of_num cNUMERAL cBIT1 c_0 cint_add f0 cint_add f2 cint_of_num cNUMERAL cBIT1 c_0 c= f1 cint_add f0 f2
- (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289992)) /\ (((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)) \/ ((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)))))) |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289992)) /\ (((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)) \/ ((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)))))) /\ F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c/\ c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 cF
- |- ((((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289992)) /\ (((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)) \/ ((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)))) = (~ (((int_le (int_of_num (NUMERAL _0))) _10289992) ==> (_10289992 = _10289992))))
T c= c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c~ c==> cint_le cint_of_num cNUMERAL c_0 f0 c= f0 f0
+ ((\i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))) i') |- (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))
T c==> * / c? / c/\ c= cSUC f0 c+ ccomplement_index f1 f2 b0 b1 c/\ c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c<= cNUMERAL cBIT1 c_0 b1 f3 c? / c/\ c= cSUC f0 c+ ccomplement_index f1 f2 f3 b0 c/\ c< b0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c<= cNUMERAL cBIT1 c_0 b0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))) |- ((x IN (dart H)) ==> (((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))) = T))
T c==> ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> cIN f1 * part cdart f0 c= c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 f1 cT
+ |- (((!x. (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= (SUC i)))) ==> (?i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))) ==> ((\x. (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= (SUC i)))) ==> (?i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))) x)) = ((\x. (((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= (SUC i)))) ==> (?i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))))) x))
T c= c==> ! c==> c/\ cis_node_nondegenerate f0 c/\ cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 c_0 cSUC f1 c? / c? / c/\ c= cSUC f1 c+ ccomplement_index f0 b0 b1 b2 c/\ c< b2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b1 b0 c<= cNUMERAL cBIT1 c_0 b2 * / c==> c/\ cis_node_nondegenerate f0 c/\ cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 c_0 cSUC f1 c? / c? / c/\ c= cSUC f1 c+ ccomplement_index f0 b0 b1 b2 c/\ c< b2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b1 b0 c<= cNUMERAL cBIT1 c_0 b2 f2 * / c==> c/\ cis_node_nondegenerate f0 c/\ cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 c_0 cSUC f1 c? / c? / c/\ c= cSUC f1 c+ ccomplement_index f0 b0 b1 b2 c/\ c< b2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b1 b0 c<= cNUMERAL cBIT1 c_0 b2 f2
+ ((((POWER (inverse (face_map H))) (CARD ((face H) x))) x) = x), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((((POWER (inverse (face_map H))) (CARD ((face H) x))) x) = x) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) (((POWER (inverse (face_map H))) (CARD ((face H) x))) x))))))
T c==> c= cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1 f1 c==> c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c/\ c= cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1 f1 c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1
+ (~ ((dart H) = EMPTY)), ((~ ((dart H) = EMPTY)) /\ ((planar_hypermap H) /\ ((plain_hypermap H) /\ ((connected_hypermap H) /\ ((simple_hypermap H) /\ ((is_no_double_joins H) /\ ((is_edge_nondegenerate H) /\ ((is_node_nondegenerate H) /\ (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))))))))))), ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n)) |- (!i. ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)))
T c==> c~ c= * part cdart f0 part cEMPTY c==> c/\ c~ c= * part cdart f0 part cEMPTY c/\ cplanar_hypermap f0 c/\ cplain_hypermap f0 c/\ cconnected_hypermap f0 c/\ csimple_hypermap f0 c/\ cis_no_double_joins f0 c/\ cis_edge_nondegenerate f0 c/\ cis_node_nondegenerate f0 ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 ! c= ccomplement f0 f1 c+ b0 cSUC f2 ccomplement f0 f1 b0
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), ((NUMERAL (BIT1 _0)) <= j), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (x IN (dart H)) |- ((((complement H) x) (((((complement_index H) x) i') + j) + (SUC n))) = (((complement H) x) ((((complement_index H) x) i') + j)))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> cIN f1 * part cdart f0 c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f4 f5 cSUC f3 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)), ((\j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))) j) |- (((\j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))) j) /\ ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i))))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> cIN f1 * part cdart f0 c==> * / c/\ c= cSUC f2 c+ ccomplement_index f0 f1 f4 b0 c/\ c< b0 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c<= cNUMERAL cBIT1 c_0 b0 f5 c/\ * / c/\ c= cSUC f2 c+ ccomplement_index f0 f1 f4 b0 c/\ c< b0 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c<= cNUMERAL cBIT1 c_0 b0 f5 c= ccomplement f0 f1 c+ cSUC f2 cSUC f3 ccomplement f0 f1 cSUC f2
- |- ((real_neg (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- (!j. (((\j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))) j) ==> ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i)))))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> cIN f1 * part cdart f0 ! c==> * / c/\ c= cSUC f2 c+ ccomplement_index f0 f1 f4 b1 c/\ c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c<= cNUMERAL cBIT1 c_0 b1 b0 c= ccomplement f0 f1 c+ cSUC f2 cSUC f3 ccomplement f0 f1 cSUC f2
+ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) (((POWER (inverse (face_map H))) (CARD ((face H) x))) x)))))
T c==> c< f0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f2 f3 c< f0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f2 cPOWER * part cinverse * part cface_map f1 cCARD * * part cface f1 f3 f3
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
+ |- ((\i. (!b. (!j1. (((SUC i) = (b + (SUC j1))) ==> (i = (b + j1)))))) i)
T * / ! ! c==> c= cSUC b0 c+ b1 cSUC b2 c= b0 c+ b1 b2 f0
+ |- ((\p'. (!q'. ((((NUMERAL (BIT1 _0)) <= j) = p') ==> ((p' ==> ((j = (SUC (PRE j))) = q')) ==> ((((NUMERAL (BIT1 _0)) <= j) ==> (j = (SUC (PRE j)))) = (p' ==> q')))))) p')
T * / ! c==> c= c<= cNUMERAL cBIT1 c_0 f0 b0 c==> c==> b0 c= c= f0 cSUC cPRE f0 b1 c= c==> c<= cNUMERAL cBIT1 c_0 f0 c= f0 cSUC cPRE f0 c==> b0 b1 f1
+ ((((complement H) x) (((((complement_index H) x) i') + j1) + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) ((((complement_index H) x) i') + j1))) |- (((((complement H) x) (((((complement_index H) x) i') + j1) + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) ((((complement_index H) x) i') + j1))) /\ ((((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) x))))
T c==> c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 c/\ c= ccomplement f0 f1 c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 c= cPOWER * part cinverse * part cnode_map f0 cSUC f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 cSUC f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1
+ (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- ((((is_node_nondegenerate H) /\ ((x IN (dart H)) /\ ((NUMERAL (BIT1 _0)) <= (SUC i)))) ==> (?i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))))) ==> ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i))))
T c==> cplain_hypermap f0 c==> cis_node_nondegenerate f0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> cIN f1 * part cdart f0 c==> c==> c/\ cis_node_nondegenerate f0 c/\ cIN f1 * part cdart f0 c<= cNUMERAL cBIT1 c_0 cSUC f2 c? / c? / c/\ c= cSUC f2 c+ ccomplement_index f0 f1 b0 b1 c/\ c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c<= cNUMERAL cBIT1 c_0 b1 c= ccomplement f0 f1 c+ cSUC f2 cSUC f3 ccomplement f0 f1 cSUC f2
+ (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289990)) /\ ((real_le ((real_add ((real_add (real_of_int _10289990)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) |- (((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0))))
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 creal_le creal_add creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) /\ ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))
T c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0)))
T creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
+ |- ((((real_ge x) (real_of_num (NUMERAL _0))) /\ ((real_ge y) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_add x) y)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge f0 creal_of_num cNUMERAL c_0 creal_ge f1 creal_of_num cNUMERAL c_0 creal_ge creal_add f0 f1 creal_of_num cNUMERAL c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- (((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))))) ==> ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c==> c/\ c<= cNUMERAL cBIT1 c_0 f5 c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
+ (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- (j = (SUC (PRE j)))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f2 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f2 cCARD * * part cface f0 f1 f3 cPOWER * part cinverse * part cnode_map f0 f3 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c==> c= cSUC f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f2 f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f2 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f3 c==> c<= cNUMERAL cBIT1 c_0 f3 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f3 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f2 cCARD * * part cface f0 f1 f1 c= f3 cSUC cPRE f3
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((((POWER (inverse (face_map H))) (CARD ((face H) x))) x) = x) |- (T = ((((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) (((POWER (inverse (face_map H))) (CARD ((face H) x))) x))) = (((POWER (inverse (node_map H))) (SUC j1)) (((POWER (inverse (face_map H))) (SUC i')) x))))
T c==> c= cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1 f1 c= cT c= cPOWER * part cinverse * part cnode_map f0 cSUC f2 cPOWER * part cinverse * part cface_map f0 cSUC f3 cPOWER * part cinverse * part cface_map f0 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 cSUC f2 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1
- ((NUMERAL (BIT1 _0)) <= j) |- (T = ((NUMERAL (BIT1 _0)) <= j))
T c==> c<= cNUMERAL cBIT1 c_0 f0 c= cT c<= cNUMERAL cBIT1 c_0 f0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10289984)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289985)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289986)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))) |- ((real_ge (real_of_int _10289986)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) |- ((\i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) i)
T c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 * / c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 f2
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) /\ ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c/\ ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) |- ((\i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) i)
T c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 * / c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 f2
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0
- (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) |- ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))
T c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c= ccomplement f0 f1 ccomplement_index f0 f1 f2 cnode_map f0 cPOWER * part cinverse * part cface_map f0 f2 f1
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) ==> (!x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0))))) = (!x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0)))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 ! c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 ! c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0
- |- ((real_of_num (NUMERAL (BIT0 (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!n. (((is_contour H) ((complement H) x)) n)) /\ (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!x. ((x IN (dart H)) ==> ((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))))), (x IN (dart H)) |- ((x IN (dart H)) /\ (((NUMERAL (BIT1 (BIT1 _0))) <= (CARD ((face H) x))) = T))
T c==> ! c==> cIN b0 * part cdart f0 c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 b0 c==> cIN f1 * part cdart f0 c/\ cIN f1 * part cdart f0 c= c<= cNUMERAL cBIT1 cBIT1 c_0 cCARD * * part cface f0 f1 cT
- |- ((~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289992)) /\ (((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)) \/ ((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)))))) ==> F)
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 cF
- (~ ((dart H) = EMPTY)) |- ((EMPTY = (dart H)) = F)
T c==> c~ c= * part cdart f0 part cEMPTY c= c= part cEMPTY * part cdart f0 cF
- (((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_int _10289990))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_int _10289990))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
- (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))) |- ((((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))) /\ (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))))
T c==> c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c/\ c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0
- (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) |- ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) /\ ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x))))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> c/\ c<= cNUMERAL cBIT1 c_0 f2 c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c/\ c/\ c<= cNUMERAL cBIT1 c_0 f2 c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f3 f2 cPOWER * part cinverse * part cnode_map f0 f2 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) /\ (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- ((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))), (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))) |- ((((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))) /\ ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0))))
T c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c==> c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c/\ c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0
- (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) |- ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) /\ ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c/\ c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ (((NUMERAL (BIT1 _0)) <= j) ==> (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- |- (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289992)) /\ (((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)) \/ ((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)))))
T c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) = ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10289980)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289981)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))) |- ((real_ge (real_of_int _10289981)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (!x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 ! c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) |- ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))
T c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 f2 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC f2 f1
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((int_le (int_of_num (NUMERAL _0))) (int_of_num a)) ==> ((int_of_num a) = (int_of_num a))) = ((int_of_num a) = (int_of_num a)))
T c= c==> cint_le cint_of_num cNUMERAL c_0 cint_of_num f0 c= cint_of_num f0 cint_of_num f0 c= cint_of_num f0 cint_of_num f0
- |- (((((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))) ==> (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0))))) = (((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))))
T c= c==> c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- (((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- (((NUMERAL (BIT0 (BIT1 _0))) * (NUMERAL (BIT1 _0))) = (NUMERAL (BIT0 (BIT1 _0))))
T c= c* cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT0 cBIT1 c_0
- (?j1. (j = (SUC j1))) |- ((?j1. (j = (SUC j1))) /\ (((SUC i) = ((((complement_index H) x) i') + j)) ==> (((((complement H) x) (i + (((complement_index H) x) (CARD ((face H) x))))) = (((complement H) x) i)) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))
T c==> c? / c= f0 cSUC b0 c/\ c? / c= f0 cSUC b0 c==> c= cSUC f1 c+ ccomplement_index f2 f3 f4 f0 c==> c= ccomplement f2 f3 c+ f1 ccomplement_index f2 f3 cCARD * * part cface f2 f3 ccomplement f2 f3 f1 c= cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC c+ f4 cCARD * * part cface f2 f3 f3 cPOWER * part cinverse * part cnode_map f2 f0 cPOWER * part cinverse * part cface_map f2 cSUC f4 f3
- |- (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((real_of_num (NUMERAL _0)) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_int _10289990))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10289984)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289985)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289986)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))))) |- ((real_ge (real_of_int _10289985)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0
- (!n. (((is_contour H) ((complement H) x)) n)) |- ((((is_contour H) ((complement H) x)) n) = T)
T c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c= cis_contour f0 * * part ccomplement f0 f1 f2 cT
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))) ==> ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))) = ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL (BIT0 (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) /\ (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (((real_ge (real_of_int _10289992)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0)))) |- F
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 cF
- (((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) |- ((\i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) i)
T c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 * / c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 f2
- (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) |- (((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))) = T)
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= c==> c/\ c<= cNUMERAL cBIT1 c_0 f2 c< f2 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f3 f2 cPOWER * part cinverse * part cnode_map f0 f2 cPOWER * part cinverse * part cface_map f0 cSUC f3 f1 cT
- (?i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))), (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- ((?i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))) /\ ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i))))
T c==> c? / c? / c/\ c= cSUC f0 c+ ccomplement_index f1 f2 b0 b1 c/\ c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c<= cNUMERAL cBIT1 c_0 b1 c==> cplain_hypermap f1 c==> cis_node_nondegenerate f1 c==> c= ccomplement f1 f2 c+ f0 cSUC f3 ccomplement f1 f2 f0 c==> c= cPRE ccomplement_index f1 f2 cCARD * * part cface f1 f2 f3 c==> cIN f2 * part cdart f1 c/\ c? / c? / c/\ c= cSUC f0 c+ ccomplement_index f1 f2 b0 b1 c/\ c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c<= cNUMERAL cBIT1 c_0 b1 c= ccomplement f1 f2 c+ cSUC f0 cSUC f3 ccomplement f1 f2 cSUC f0
- |- (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) |- ((((is_restricted H) /\ ((x IN (dart H)) /\ ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0)))) ==> ((((complement H) x) (SUC n)) = (((complement H) x) (NUMERAL _0))))
T c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c==> c==> c/\ cis_restricted f0 c/\ cIN f1 * part cdart f0 c= cPRE ccomplement_index f0 f1 cCARD * * part cface f0 f1 f2 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0 c= ccomplement f0 f1 cSUC f2 ccomplement f0 f1 cNUMERAL c_0
- |- (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((!x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0)))) ==> ((\x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((\x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0)))) (real_of_num (NUMERAL (BIT1 _0)))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= c==> ! c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 * / c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 * / c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (~ ((dart H) = EMPTY)) |- (((~ (EMPTY = (dart H))) ==> ((EMPTY = (dart H)) = F)) = ((EMPTY = (dart H)) = F))
T c==> c~ c= * part cdart f0 part cEMPTY c= c==> c~ c= part cEMPTY * part cdart f0 c= c= part cEMPTY * part cdart f0 cF c= c= part cEMPTY * part cdart f0 cF
- |- (T = ((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= cT creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (~ (~ (((real_le (real_of_num (NUMERAL _0))) (real_of_int _10289992)) /\ (((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)) \/ ((real_le ((real_add (real_of_int _10289992)) (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289992)))))) |- (((real_ge (real_of_int _10289992)) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL _0))))
T c==> c~ c~ c/\ creal_le creal_of_num cNUMERAL c_0 creal_of_int f0 c\/ creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_le creal_add creal_of_int f0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((\x. (((real_mul x) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0)))) (real_of_num (NUMERAL (BIT1 _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 * / c= creal_mul b0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((NUMERAL _0) < (NUMERAL (BIT1 _0))) = T)
T c= c< cNUMERAL c_0 cNUMERAL cBIT1 c_0 cT
- ((SUC i) = ((((complement_index H) x) i') + j)) |- ((\j'. ((((NUMERAL (BIT1 _0)) <= j') /\ (j' < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j')) = (((POWER (inverse (node_map H))) j') (((POWER (inverse (face_map H))) (SUC i)) x))))) = (\j'. ((((NUMERAL (BIT1 _0)) <= j') /\ (j' < (CARD ((node H) (((POWER (inverse (face_map H))) ((((complement_index H) x) i') + j)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j')) = (((POWER (inverse (node_map H))) j') (((POWER (inverse (face_map H))) ((((complement_index H) x) i') + j)) x))))))
T c==> c= cSUC f0 c+ ccomplement_index f1 f2 f3 f4 c= / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c< b0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f0 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f0 b0 cPOWER * part cinverse * part cnode_map f1 b0 cPOWER * part cinverse * part cface_map f1 cSUC f0 f2 / c==> c/\ c<= cNUMERAL cBIT1 c_0 b0 c< b0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 c+ ccomplement_index f1 f2 f3 f4 f2 c= ccomplement f1 f2 c+ ccomplement_index f1 f2 f0 b0 cPOWER * part cinverse * part cnode_map f1 b0 cPOWER * part cinverse * part cface_map f1 c+ ccomplement_index f1 f2 f3 f4 f2
- |- (((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0))) = (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))))
T c= creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((\x'. (f x')) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))) = ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- (!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))), (!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))), (!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))), (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), (!n. (((is_contour H) ((complement H) x)) n)), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!n. (((is_contour H) ((complement H) x)) n)) /\ ((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((complement H) x) ((((complement_index H) x) i') + j))))
T c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ ! cis_contour f0 * * part ccomplement f0 f1 b0 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5
- (~ ((dart H) = EMPTY)) |- (~ (EMPTY = (dart H)))
T c==> c~ c= * part cdart f0 part cEMPTY c~ c= part cEMPTY * part cdart f0
- |- (((real_mul (real_of_num (NUMERAL _0))) (real_of_num x)) = (real_of_num (NUMERAL _0)))
T c= creal_mul creal_of_num cNUMERAL c_0 creal_of_num f0 creal_of_num cNUMERAL c_0
- |- ((real_of_num x) = ((real_div (real_of_num x)) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_of_num f0 creal_div creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289990))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL _0)))) |- (((real_gt (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL _0))) /\ ((real_ge (real_of_int _10289990)) (real_of_num (NUMERAL _0))))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c/\ creal_gt creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((NUMERAL (BIT1 _0)) <= j), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((real_ge ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))) (real_neg (real_of_num (NUMERAL (BIT1 _0))))))))) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0
- |- ((int_of_num a) = (int_of_num a))
T c= cint_of_num f0 cint_of_num f0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0
- |- (((int_of_num a) = (int_of_num a)) = (((NUMERAL _0) + a) = a))
T c= c= cint_of_num f0 cint_of_num f0 c= c+ cNUMERAL c_0 f0 f0
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) /\ ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- |- (((((real_mul ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_lt ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))))
T c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_lt creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_lt creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_le ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_le ((real_mul (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= creal_le creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_le creal_mul creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j)))), (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i)))
T c==> c? / c/\ c= cSUC f0 c+ ccomplement_index f1 f2 f3 b0 c/\ c< b0 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC f3 f2 c<= cNUMERAL cBIT1 c_0 b0 c==> cplain_hypermap f1 c==> cis_node_nondegenerate f1 c==> c= ccomplement f1 f2 c+ f0 cSUC f4 ccomplement f1 f2 f0 c==> c= cPRE ccomplement_index f1 f2 cCARD * * part cface f1 f2 f4 c==> cIN f2 * part cdart f1 c= ccomplement f1 f2 c+ cSUC f0 cSUC f4 ccomplement f1 f2 cSUC f0
- (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))))))))))
T c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- (?i'. (?j. (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) /\ ((NUMERAL (BIT1 _0)) <= j))))), (plain_hypermap H), (is_node_nondegenerate H), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((PRE (((complement_index H) x) (CARD ((face H) x)))) = n), (x IN (dart H)) |- ((((complement H) x) ((SUC i) + (SUC n))) = (((complement H) x) (SUC i)))
T c==> c? / c? / c/\ c= cSUC f0 c+ ccomplement_index f1 f2 b0 b1 c/\ c< b1 cCARD * * part cnode f1 cPOWER * part cinverse * part cface_map f1 cSUC b0 f2 c<= cNUMERAL cBIT1 c_0 b1 c==> cplain_hypermap f1 c==> cis_node_nondegenerate f1 c==> c= ccomplement f1 f2 c+ f0 cSUC f3 ccomplement f1 f2 f0 c==> c= cPRE ccomplement_index f1 f2 cCARD * * part cface f1 f2 f3 c==> cIN f2 * part cdart f1 c= ccomplement f1 f2 c+ cSUC f0 cSUC f3 ccomplement f1 f2 cSUC f0
- |- ((((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))))))) = (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> (((real_lt (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))) ==> ((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT0 (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))))))
T c= c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> creal_lt creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT0 cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((real_lt (real_of_num m)) (real_of_num n)) = (m < n))
T c= creal_lt creal_of_num f0 creal_of_num f1 c< f0 f1
- (!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))), ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)), ((SUC n) = (((complement_index H) x) (CARD ((face H) x)))), ((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)), ((NUMERAL (BIT1 _0)) <= j), ((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))), (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) |- ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) /\ ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))
T c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c/\ ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- ((((complement H) x) (i + (SUC n))) = (((complement H) x) i)), ((SUC i) = ((((complement_index H) x) i') + j)) |- (((SUC i) = ((((complement_index H) x) i') + j)) /\ ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i')) x)))) ==> (((NUMERAL (BIT1 _0)) <= j) ==> (((NUMERAL (BIT1 _0)) <= (((complement_index H) x) (CARD ((face H) x)))) ==> (((SUC n) = (((complement_index H) x) (CARD ((face H) x)))) ==> (((((((complement_index H) x) i') + j) + (((complement_index H) x) (CARD ((face H) x)))) = (((((complement_index H) x) i') + (((complement_index H) x) (CARD ((face H) x)))) + j)) ==> ((!i. ((((complement H) x) (((complement_index H) x) i)) = ((node_map H) (((POWER (inverse (face_map H))) i) x)))) ==> ((!i. ((((complement H) x) (SUC (((complement_index H) x) i))) = ((inverse (node_map H)) (((POWER (inverse (face_map H))) (SUC i)) x)))) ==> ((!i. (((face_map H) (((complement H) x) (((complement_index H) x) i))) = (((complement H) x) (SUC (((complement_index H) x) i))))) ==> ((!n. (((is_contour H) ((complement H) x)) n)) ==> (((((complement H) x) ((((complement_index H) x) i') + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x))) ==> ((j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)))) ==> (((((complement H) x) ((((complement_index H) x) (i' + (CARD ((face H) x)))) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x))) ==> ((!i. (!j. ((((NUMERAL (BIT1 _0)) <= j) /\ (j < (CARD ((node H) (((POWER (inverse (face_map H))) (SUC i)) x))))) ==> ((((complement H) x) ((((complement_index H) x) i) + j)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i)) x)))))) ==> ((((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC (i' + (CARD ((face H) x))))) x)) = (((POWER (inverse (node_map H))) j) (((POWER (inverse (face_map H))) (SUC i')) x)))))))))))))))))
T c==> c= ccomplement f0 f1 c+ f2 cSUC f3 ccomplement f0 f1 f2 c==> c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c/\ c= cSUC f2 c+ ccomplement_index f0 f1 f4 f5 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c<= cNUMERAL cBIT1 c_0 f5 c==> c<= cNUMERAL cBIT1 c_0 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= cSUC f3 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c==> c= c+ c+ ccomplement_index f0 f1 f4 f5 ccomplement_index f0 f1 cCARD * * part cface f0 f1 c+ c+ ccomplement_index f0 f1 f4 ccomplement_index f0 f1 cCARD * * part cface f0 f1 f5 c==> ! c= ccomplement f0 f1 ccomplement_index f0 f1 b0 cnode_map f0 cPOWER * part cinverse * part cface_map f0 b0 f1 c==> ! c= ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 cinverse * part cnode_map f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c==> ! c= cface_map f0 ccomplement f0 f1 ccomplement_index f0 f1 b0 ccomplement f0 f1 cSUC ccomplement_index f0 f1 b0 c==> ! cis_contour f0 * * part ccomplement f0 f1 b0 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 f4 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1 c==> c< f5 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> c= ccomplement f0 f1 c+ ccomplement_index f0 f1 c+ f4 cCARD * * part cface f0 f1 f5 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 c==> ! ! c==> c/\ c<= cNUMERAL cBIT1 c_0 b1 c< b1 cCARD * * part cnode f0 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= ccomplement f0 f1 c+ ccomplement_index f0 f1 b0 b1 cPOWER * part cinverse * part cnode_map f0 b1 cPOWER * part cinverse * part cface_map f0 cSUC b0 f1 c= cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC c+ f4 cCARD * * part cface f0 f1 f1 cPOWER * part cinverse * part cnode_map f0 f5 cPOWER * part cinverse * part cface_map f0 cSUC f4 f1
- |- ((real_neg (real_of_num x)) = ((real_div (real_neg (real_of_num x))) (real_of_num (NUMERAL (BIT1 _0)))))
T c= creal_neg creal_of_num f0 creal_div creal_neg creal_of_num f0 creal_of_num cNUMERAL cBIT1 c_0
- |- (((((real_mul ((real_add ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0)))))) (real_of_num (NUMERAL (BIT1 _0)))) = ((real_mul (real_of_num (NUMERAL _0))) ((real_mul (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0)))))) ==> (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0)))))) = (((real_add ((real_div (real_of_num (NUMERAL (BIT1 _0)))) (real_of_num (NUMERAL (BIT1 _0))))) ((real_div (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_num (NUMERAL (BIT1 _0))))) = ((real_div (real_of_num (NUMERAL _0))) (real_of_num (NUMERAL (BIT1 _0))))))
T c= c==> c= creal_mul creal_add creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_mul creal_of_num cNUMERAL c_0 creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0 c= creal_add creal_div creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL cBIT1 c_0 creal_div creal_of_num cNUMERAL c_0 creal_of_num cNUMERAL cBIT1 c_0
- ((dart H) = EMPTY) |- (EMPTY = (dart H))
T c==> c= * part cdart f0 part cEMPTY c= part cEMPTY * part cdart f0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- ((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0
- (((real_ge (real_of_int _10289974)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289975)) (real_of_num (NUMERAL _0))) /\ (((real_ge (real_of_int _10289976)) (real_of_num (NUMERAL _0))) /\ ((((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976)))) = (real_of_num (NUMERAL _0))) /\ ((real_ge ((real_add (real_of_int _10289974)) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289975))) ((real_add (real_of_int _10289976)) (real_neg (real_of_num (NUMERAL (BIT1 _0)))))))) (real_of_num (NUMERAL _0))))))) |- (((real_mul (real_of_num (NUMERAL (BIT1 _0)))) ((real_add ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289974))) ((real_add (real_of_int _10289975)) ((real_mul (real_neg (real_of_num (NUMERAL (BIT1 _0))))) (real_of_int _10289976))))) = (real_of_num (NUMERAL _0)))
T c==> c/\ creal_ge creal_of_int f0 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f1 creal_of_num cNUMERAL c_0 c/\ creal_ge creal_of_int f2 creal_of_num cNUMERAL c_0 c/\ c= creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0 creal_ge creal_add creal_of_int f0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f1 creal_add creal_of_int f2 creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_num cNUMERAL c_0 c= creal_mul creal_of_num cNUMERAL cBIT1 c_0 creal_add creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f0 creal_add creal_of_int f1 creal_mul creal_neg creal_of_num cNUMERAL cBIT1 c_0 creal_of_int f2 creal_of_num cNUMERAL c_0
