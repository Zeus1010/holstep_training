N Reduction1.seed_size_v_gt_1
C |- (!p. ((all (\v. ((sizel ((filter (MEM v)) (fgraph (Seed p)))) > (NUMERAL (BIT1 _0))))) (flatten (fgraph (Seed p)))))
T call / c> csizel cfilter * part cMEM b0 cfgraph cSeed f0 cNUMERAL cBIT1 c_0 cflatten cfgraph cSeed f0
D TRUTH
A |- T
T cT
D ETA_AX
A |- (!t. ((\x. (t x)) = t))
T c= / * f0 b0 f0
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D NOT_EXISTS_THM
A |- (!P. ((~ (?x. (P x))) = (!x. (~ (P x)))))
T c= c~ c? / * f0 b0 ! c~ * f0 b0
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D Ssrnat.addnS
A |- (!m. (!n. ((m + (SUC n)) = (SUC (m + n)))))
T c= c+ f0 cSUC f1 cSUC c+ f0 f1
D ADD_CLAUSES
A |- ((!n. (((NUMERAL _0) + n) = n)) /\ ((!m. ((m + (NUMERAL _0)) = m)) /\ ((!m. (!n. (((SUC m) + n) = (SUC (m + n))))) /\ (!m. (!n. ((m + (SUC n)) = (SUC (m + n))))))))
T c/\ ! c= c+ cNUMERAL c_0 b0 b0 c/\ ! c= c+ b0 cNUMERAL c_0 b0 c/\ ! ! c= c+ cSUC b0 b1 cSUC c+ b0 b1 ! ! c= c+ b0 cSUC b1 cSUC c+ b0 b1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D GT
A |- (!n. (!m. ((m > n) = (n < m))))
T c= c> f0 f1 c< f1 f0
D LT_EXISTS
A |- (!m. (!n. ((m < n) = (?d. (n = (m + (SUC d)))))))
T c= c< f0 f1 c? / c= f1 c+ f0 cSUC b0
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D LENGTH
A |- (((LENGTH NIL) = (NUMERAL _0)) /\ (!h. (!t. ((LENGTH ((CONS h) t)) = (SUC (LENGTH t))))))
T c/\ c= cLENGTH cNIL cNUMERAL c_0 ! ! c= cLENGTH cCONS b0 b1 cSUC cLENGTH b1
D Seq.size
A |- (sizel = LENGTH)
T c= part csizel part cLENGTH
D Seq.cats0
A |- (!s. (((cat s) NIL) = s))
T c= ccat f0 cNIL f0
D Seq.filter_nil
A |- (!a. (((filter a) NIL) = NIL))
T c= cfilter f0 cNIL cNIL
D Seq.filter_cons
A |- (!a. (!x. (!t. (((filter a) ((CONS x) t)) = (((COND (a x)) ((CONS x) ((filter a) t))) ((filter a) t))))))
T c= cfilter f0 cCONS f1 f2 cCOND * f0 f1 cCONS f1 cfilter f0 f2 cfilter f0 f2
D Seq.all_cat
A |- (!a. (!s1. (!s2. (((all a) ((cat s1) s2)) = (((all a) s1) /\ ((all a) s2))))))
T c= call f0 ccat f1 f2 c/\ call f0 f1 call f0 f2
D Seq.mem_rev
A |- (!s. (!x. (((MEM x) (rev s)) = ((MEM x) s))))
T c= cMEM f0 crev f1 cMEM f0 f1
D Seq.allP
A |- (!a. (!s. ((!x. (((MEM x) s) ==> (a x))) = ((all a) s))))
T c= ! c==> cMEM b0 f0 * f1 b0 call f1 f0
D Seq.flatten0
A |- ((flatten NIL) = NIL)
T c= cflatten cNIL cNIL
D Seq.flatten_cons
A |- (!s. (!ss. ((flatten ((CONS s) ss)) = ((cat s) (flatten ss)))))
T c= cflatten cCONS f0 f1 ccat f0 cflatten f1
D Tame_list.fgraph_seed
A |- (!p. ((fgraph (Seed p)) = ((CONS ((iota (NUMERAL _0)) (maxGon p))) ((CONS (rev ((iota (NUMERAL _0)) (maxGon p)))) NIL))))
T c= cfgraph cSeed f0 cCONS ciota cNUMERAL c_0 cmaxGon f0 cCONS crev ciota cNUMERAL c_0 cmaxGon f0 cNIL
+ |- (((all a) s) = (!x. (((MEM x) s) ==> (a x))))
T c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ (((all a) s) = (!x. (((MEM x) s) ==> (a x)))) |- ((!x. (((MEM x) s) ==> (a x))) = ((all a) s))
T c==> c= call f0 f1 ! c==> cMEM b0 f1 * f0 b0 c= ! c==> cMEM b0 f1 * f0 b0 call f0 f1
+ |- ((\x. (((MEM x) (rev s)) = ((MEM x) s))) x)
T * / c= cMEM b0 crev f0 cMEM b0 f0 f1
+ |- (((!s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) ==> ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s)) = ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s))
T c= c==> ! ! c= cMEM b1 crev b0 cMEM b1 b0 * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0 * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0
+ |- ((!x. (((MEM x) ((iota (NUMERAL _0)) (maxGon p))) ==> ((sizel ((filter (MEM x)) ((CONS ((iota (NUMERAL _0)) (maxGon p))) ((CONS (rev ((iota (NUMERAL _0)) (maxGon p)))) NIL)))) > (NUMERAL (BIT1 _0))))) = T)
T c= ! c==> cMEM b0 ciota cNUMERAL c_0 cmaxGon f0 c> csizel cfilter * part cMEM b0 cCONS ciota cNUMERAL c_0 cmaxGon f0 cCONS crev ciota cNUMERAL c_0 cmaxGon f0 cNIL cNUMERAL cBIT1 c_0 cT
+ |- (((!s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) ==> ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)) = ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s))
T c= c==> ! c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1 * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
- |- ((t ==> t) = T)
T c= c==> f0 f0 cT
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
- |- ((!x. t) = t)
T c= ! f0 f0
+ ((MEM x) ((iota (NUMERAL _0)) (maxGon p))) |- (((MEM x) ((iota (NUMERAL _0)) (maxGon p))) = T)
T c==> cMEM f0 ciota cNUMERAL c_0 cmaxGon f1 c= cMEM f0 ciota cNUMERAL c_0 cmaxGon f1 cT
+ |- ((\s. (((cat s) NIL) = s)) s)
T * / c= ccat b0 cNIL b0 f0
+ |- ((\a. (!s1. (!s2. (((all a) ((cat s1) s2)) = (((all a) s1) /\ ((all a) s2)))))) a)
T * / ! ! c= call b0 ccat b1 b2 c/\ call b0 b1 call b0 b2 f0
+ |- (((!x. (!t. (((filter a) ((CONS x) t)) = (((COND (a x)) ((CONS x) ((filter a) t))) ((filter a) t))))) ==> ((\x. (!t. (((filter a) ((CONS x) t)) = (((COND (a x)) ((CONS x) ((filter a) t))) ((filter a) t))))) x)) = ((\x. (!t. (((filter a) ((CONS x) t)) = (((COND (a x)) ((CONS x) ((filter a) t))) ((filter a) t))))) x))
T c= c==> ! ! c= cfilter f0 cCONS b0 b1 cCOND * f0 b0 cCONS b0 cfilter f0 b1 cfilter f0 b1 * / ! c= cfilter f0 cCONS b0 b1 cCOND * f0 b0 cCONS b0 cfilter f0 b1 cfilter f0 b1 f1 * / ! c= cfilter f0 cCONS b0 b1 cCOND * f0 b0 cCONS b0 cfilter f0 b1 cfilter f0 b1 f1
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
+ |- ((\s. (((all a) s) = (!x. (((MEM x) s) ==> (a x))))) s)
T * / c= call f0 b0 ! c==> cMEM b1 b0 * f0 b1 f1
+ |- ((\s. (!x. (((MEM x) (rev s)) = ((MEM x) s)))) s)
T * / ! c= cMEM b1 crev b0 cMEM b1 b0 f0
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
- |- (F = (~ T))
T c= cF c~ cT
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- |- ((~ T) = F)
T c= c~ cT cF
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- (((\v. (f v)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- |- (~ (~ T))
T c~ c~ cT
