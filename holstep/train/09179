N NEGLIGIBLE_AFFINE_HULL_3
C |- (!a. (!b. (!c. (negligible ((hull affine) (a INSERT (b INSERT (c INSERT EMPTY))))))))
T cnegligible * * part chull part caffine * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
D TRUTH
A |- T
T cT
D EXCLUDED_MIDDLE
A |- (!t. (t \/ (~ t)))
T c\/ f0 c~ f0
D BOOL_CASES_AX
A |- (!t. ((t = T) \/ (t = F)))
T c\/ c= f0 cT c= f0 cF
D NOT_CLAUSES
A |- ((!t. ((~ (~ t)) = t)) /\ (((~ T) = F) /\ ((~ F) = T)))
T c/\ ! c= c~ c~ b0 b0 c/\ c= c~ cT cF c= c~ cF cT
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D NUMERAL
A |- (!n. ((NUMERAL n) = n))
T c= cNUMERAL f0 f0
D ADD_CLAUSES
A |- ((!n. (((NUMERAL _0) + n) = n)) /\ ((!m. ((m + (NUMERAL _0)) = m)) /\ ((!m. (!n. (((SUC m) + n) = (SUC (m + n))))) /\ (!m. (!n. ((m + (SUC n)) = (SUC (m + n))))))))
T c/\ ! c= c+ cNUMERAL c_0 b0 b0 c/\ ! c= c+ b0 cNUMERAL c_0 b0 c/\ ! ! c= c+ cSUC b0 b1 cSUC c+ b0 b1 ! ! c= c+ b0 cSUC b1 cSUC c+ b0 b1
D Ssrnat.addnC
A |- (!m. (!n. ((m + n) = (n + m))))
T c= c+ f0 f1 c+ f1 f0
D LE_REFL
A |- (!n. (n <= n))
T c<= f0 f0
D LE_ADD
A |- (!m. (!n. (m <= (m + n))))
T c<= f0 c+ f0 f1
D ARITH_SUC
A |- ((!n. ((SUC (NUMERAL n)) = (NUMERAL (SUC n)))) /\ (((SUC _0) = (BIT1 _0)) /\ ((!n. ((SUC (BIT0 n)) = (BIT1 n))) /\ (!n. ((SUC (BIT1 n)) = (BIT0 (SUC n)))))))
T c/\ ! c= cSUC cNUMERAL b0 cNUMERAL cSUC b0 c/\ c= cSUC c_0 cBIT1 c_0 c/\ ! c= cSUC cBIT0 b0 cBIT1 b0 ! c= cSUC cBIT1 b0 cBIT0 cSUC b0
D ARITH_ADD
A |- ((!m. (!n. (((NUMERAL m) + (NUMERAL n)) = (NUMERAL (m + n))))) /\ (((_0 + _0) = _0) /\ ((!n. ((_0 + (BIT0 n)) = (BIT0 n))) /\ ((!n. ((_0 + (BIT1 n)) = (BIT1 n))) /\ ((!n. (((BIT0 n) + _0) = (BIT0 n))) /\ ((!n. (((BIT1 n) + _0) = (BIT1 n))) /\ ((!m. (!n. (((BIT0 m) + (BIT0 n)) = (BIT0 (m + n))))) /\ ((!m. (!n. (((BIT0 m) + (BIT1 n)) = (BIT1 (m + n))))) /\ ((!m. (!n. (((BIT1 m) + (BIT0 n)) = (BIT1 (m + n))))) /\ (!m. (!n. (((BIT1 m) + (BIT1 n)) = (BIT0 (SUC (m + n)))))))))))))))
T c/\ ! ! c= c+ cNUMERAL b0 cNUMERAL b1 cNUMERAL c+ b0 b1 c/\ c= c+ c_0 c_0 c_0 c/\ ! c= c+ c_0 cBIT0 b0 cBIT0 b0 c/\ ! c= c+ c_0 cBIT1 b0 cBIT1 b0 c/\ ! c= c+ cBIT0 b0 c_0 cBIT0 b0 c/\ ! c= c+ cBIT1 b0 c_0 cBIT1 b0 c/\ ! ! c= c+ cBIT0 b0 cBIT0 b1 cBIT0 c+ b0 b1 c/\ ! ! c= c+ cBIT0 b0 cBIT1 b1 cBIT1 c+ b0 b1 c/\ ! ! c= c+ cBIT1 b0 cBIT0 b1 cBIT1 c+ b0 b1 ! ! c= c+ cBIT1 b0 cBIT1 b1 cBIT0 cSUC c+ b0 b1
D FINITE_EMPTY
A |- (FINITE EMPTY)
T cFINITE part cEMPTY
D FINITE_INSERT
A |- (!s. (!x. ((FINITE (x INSERT s)) = (FINITE s))))
T c= cFINITE * * part cINSERT f0 f1 cFINITE f1
D Oxl_2012.CARD_INSERT
A |- (!x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))))
T c==> cFINITE f0 c= cCARD * * part cINSERT f1 f0 cCOND cIN f1 f0 cCARD f0 cSUC cCARD f0
D Oxl_2012.CARD_EMPTY
A |- ((CARD EMPTY) = (NUMERAL _0))
T c= cCARD part cEMPTY cNUMERAL c_0
D DIMINDEX_3
A |- ((dimindex UNIV) = (NUMERAL (BIT1 (BIT1 _0))))
T c= cdimindex part cUNIV cNUMERAL cBIT1 cBIT1 c_0
D NEGLIGIBLE_AFFINE_HULL
A |- (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s))))
T c==> c/\ cFINITE f0 c<= cCARD f0 cdimindex part cUNIV cnegligible * * part chull part caffine f0
+ |- ((a IN (b INSERT (c INSERT EMPTY))) ==> ((CARD (b INSERT (c INSERT EMPTY))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((((~ (~ F)) = F) ==> (F ==> (~ (~ F)))) = (F ==> (~ (~ F))))
T c= c==> c= c~ c~ cF cF c==> cF c~ c~ cF c==> cF c~ c~ cF
+ |- (((!x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) ==> ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x)) = ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x))
T c= c==> ! ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0 * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0
- |- ((a IN (b INSERT (c INSERT EMPTY))) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ ((b IN (c INSERT EMPTY)) = F) |- (((b IN (c INSERT EMPTY)) = F) /\ ((((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) <= (NUMERAL (BIT1 (BIT1 _0)))))) = (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0))))))))
T c==> c= cIN f0 * * part cINSERT f1 part cEMPTY cF c/\ c= cIN f0 * * part cINSERT f1 part cEMPTY cF c= c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- ((\s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) s)
T * / c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 f0
+ |- ((~ (b IN (c INSERT EMPTY))) ==> ((SUC (CARD (c INSERT EMPTY))) = (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 f4 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 f4
- ((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) |- ((!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) ==> (negligible ((hull affine) s)))
T c==> c/\ cFINITE f0 c<= cCARD f0 cdimindex part cUNIV c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 cnegligible * * part chull part caffine f0
+ |- ((\t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 f2
+ |- (((c IN EMPTY) = T) ==> ((((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0)))))))) = (((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((NUMERAL _0) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (NUMERAL _0)) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (NUMERAL _0)) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (NUMERAL _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))))))
T c==> c= cIN f0 part cEMPTY cT c= c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- ((!b. (!c. (negligible ((hull affine) (a INSERT (b INSERT (c INSERT EMPTY))))))) = T)
T c= ! ! cnegligible * * part chull part caffine * * part cINSERT f0 * * part cINSERT b0 * * part cINSERT b1 part cEMPTY cT
- |- (((!g'. (!t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f2
+ |- ((\e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4
+ |- (((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c= c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
- |- ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))
T c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((t \/ T) = T)
T c= c\/ f0 cT cT
+ ((c IN EMPTY) = F) |- (((c IN EMPTY) = F) /\ ((((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0)))))))) = (((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))))))))
T c==> c= cIN f0 part cEMPTY cF c/\ c= cIN f0 part cEMPTY cF c= c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- (~ (c IN EMPTY)) |- ((c IN EMPTY) = F)
T c==> c~ cIN f0 part cEMPTY c= cIN f0 part cEMPTY cF
+ |- ((\x. (!s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s))))))) x)
T * / ! c==> cFINITE b1 c= cCARD * * part cINSERT b0 b1 cCOND cIN b0 b1 cCARD b1 cSUC cCARD b1 f0
+ |- ((CARD (a INSERT (b INSERT (c INSERT EMPTY)))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))))
T c= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY
- |- ((((b IN (c INSERT EMPTY)) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) ==> (((~ (b IN (c INSERT EMPTY))) ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e')))) = (((~ (b IN (c INSERT EMPTY))) ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e'))))
T c= c==> c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2
+ |- (((!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e')))))) ==> ((\e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e')))))) e')) = ((\e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 f5 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 f5
- |- (((!g'. (!t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f1 * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f1
- |- ((t \/ t) = t)
T c= c\/ f0 f0 f0
- (c IN EMPTY) |- ((c IN EMPTY) /\ ((NUMERAL _0) = (NUMERAL _0)))
T c==> cIN f0 part cEMPTY c/\ cIN f0 part cEMPTY c= cNUMERAL c_0 cNUMERAL c_0
+ |- (((c IN EMPTY) = F) ==> ((((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0)))))))) = (((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))))))))
T c==> c= cIN f0 part cEMPTY cF c= c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((FINITE EMPTY) ==> ((CARD (c INSERT EMPTY)) = (((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))))) = ((CARD (c INSERT EMPTY)) = (((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY)))))
T c= c==> cFINITE part cEMPTY c= cCARD * * part cINSERT f0 part cEMPTY cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY c= cCARD * * part cINSERT f0 part cEMPTY cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY
- |- ((((~ (~ F)) = F) ==> ((~ (~ F)) ==> F)) = ((~ (~ F)) ==> F))
T c= c==> c= c~ c~ cF cF c==> c~ c~ cF cF c==> c~ c~ cF cF
+ |- ((FINITE EMPTY) = T)
T c= cFINITE part cEMPTY cT
+ |- (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 f4
+ |- ((((a IN (b INSERT (c INSERT EMPTY))) = F) ==> (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) <= (NUMERAL (BIT1 (BIT1 _0)))))) /\ (((a IN (b INSERT (c INSERT EMPTY))) = T) ==> (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0)))))))
T c/\ c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cF c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ (b IN (c INSERT EMPTY)) |- ((b IN (c INSERT EMPTY)) /\ ((CARD (c INSERT EMPTY)) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> cIN f0 * * part cINSERT f1 part cEMPTY c/\ cIN f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e')))))) ==> ((\e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e')))))) e')) = ((\e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY f3 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 f3 b0 f4
+ |- (T = (FINITE EMPTY))
T c= cT cFINITE part cEMPTY
+ |- (FINITE (b INSERT (c INSERT EMPTY)))
T cFINITE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- ((b IN (c INSERT EMPTY)) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((!g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f3 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f3
- |- (F ==> (~ (~ F)))
T c==> cF c~ c~ cF
- |- (((!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) ==> ((\e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) e')) = ((\e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 f3 * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 f3
- |- (((~ (c IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) (NUMERAL _0)) e')))
T c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
+ |- (((!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 f4 * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 f4
- |- ((\e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 b0 f4
- |- ((((a IN (b INSERT (c INSERT EMPTY))) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) ==> (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))) = (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e'))))
T c= c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
- |- (((a IN (b INSERT (c INSERT EMPTY))) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) t') e'))))
T c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 f4
+ ((a IN (b INSERT (c INSERT EMPTY))) = T) |- (((a IN (b INSERT (c INSERT EMPTY))) = T) /\ (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0))))))
T c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT c/\ c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((!t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 f2 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY b0 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 b0 b1 f2
+ ((a IN (b INSERT (c INSERT EMPTY))) = F) |- (((a IN (b INSERT (c INSERT EMPTY))) = F) /\ (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) <= (NUMERAL (BIT1 (BIT1 _0))))))
T c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cF c/\ c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cF c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- ((((c IN EMPTY) ==> ((CARD EMPTY) = (NUMERAL _0))) ==> (((~ (c IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (c IN EMPTY)) (NUMERAL _0)) e')))) = (((~ (c IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (c IN EMPTY)) (NUMERAL _0)) e'))))
T c= c==> c==> cIN f0 part cEMPTY c= cCARD part cEMPTY cNUMERAL c_0 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
+ |- ((\s. ((FINITE s) ==> ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))) s)
T * / c==> cFINITE b0 c= cCARD * * part cINSERT f0 b0 cCOND cIN f0 b0 cCARD b0 cSUC cCARD b0 f1
+ |- ((\t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 b0 b1 f4
+ |- (((a IN (b INSERT (c INSERT EMPTY))) = T) ==> (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0))))))
T c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))
T c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((negligible ((hull affine) (a INSERT (b INSERT (c INSERT EMPTY))))) = T)
T c= cnegligible * * part chull part caffine * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT
+ |- (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f5 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 f5
+ |- ((\e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c==> c==> c~ f3 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND f3 f4 b0 f5
- |- ((~ (~ F)) ==> F)
T c==> c~ c~ cF cF
+ |- ((((a IN (b INSERT (c INSERT EMPTY))) ==> ((CARD (b INSERT (c INSERT EMPTY))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) ==> (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))) = (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e'))))
T c= c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
- |- (((!t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 f3 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 f3
+ |- ((((~ (b IN (c INSERT EMPTY))) ==> ((SUC (CARD (c INSERT EMPTY))) = (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c= c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 f3
+ |- (((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))) = T)
T c= c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5 cT
+ |- ((SUC (NUMERAL _0)) = (NUMERAL (BIT1 _0)))
T c= cSUC cNUMERAL c_0 cNUMERAL cBIT1 c_0
+ |- (((NUMERAL _0) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c= c<= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
- |- (((!t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 f2 * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 f2
- (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))), ((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) |- ((!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) /\ (negligible ((hull affine) s)))
T c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 c==> c/\ cFINITE f0 c<= cCARD f0 cdimindex part cUNIV c/\ ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 cnegligible * * part chull part caffine f0
+ |- (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))
T c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
- (a IN (b INSERT (c INSERT EMPTY))) |- ((a IN (b INSERT (c INSERT EMPTY))) = T)
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT
- (~ (a IN (b INSERT (c INSERT EMPTY)))) |- ((~ (a IN (b INSERT (c INSERT EMPTY)))) /\ ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((\e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 b0 f3
+ |- ((FINITE (a INSERT (b INSERT (c INSERT EMPTY)))) /\ ((CARD (a INSERT (b INSERT (c INSERT EMPTY)))) <= (dimindex UNIV)))
T c/\ cFINITE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdimindex part cUNIV
+ |- ((((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0)))))))) = (((~ (c IN EMPTY)) \/ (((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((NUMERAL _0) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (NUMERAL _0)) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (NUMERAL _0)) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (NUMERAL _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))))) /\ ((c IN EMPTY) \/ (((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0)))))))))))
T c= c/\ c\/ c~ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f1 part cEMPTY c/\ c\/ c~ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 part cEMPTY c/\ c\/ c~ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))
T c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 f2 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 f2 f3
+ |- ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((a IN (b INSERT (c INSERT EMPTY))) ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) t') e'))))
T c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 f4
- (c IN EMPTY) |- ((c IN EMPTY) = T)
T c==> cIN f0 part cEMPTY c= cIN f0 part cEMPTY cT
- |- ((((c IN EMPTY) ==> ((NUMERAL _0) = (NUMERAL _0))) ==> (((~ (c IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) (NUMERAL _0)) e')))) = (((~ (c IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) (NUMERAL _0)) e'))))
T c= c==> c==> cIN f0 part cEMPTY c= cNUMERAL c_0 cNUMERAL c_0 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
+ |- (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) <= (NUMERAL (BIT1 (BIT1 _0)))))))
T c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- ((\e'. (((c IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY b0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 b0 f3
- |- (((!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))) ==> ((\e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))) e')) = ((\e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 f4 b0 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 f4 b0 f5 * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 f4 b0 f5
- (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) |- ((\s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) s)
T c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 * / c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 f0
- |- (((~ (b IN (c INSERT EMPTY))) ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) e')))
T c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2
+ |- (((!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) ==> ((\s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) s)) = ((\s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) s))
T c= c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 * / c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 f0 * / c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 f0
+ |- (((~ (c IN EMPTY)) ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (c IN EMPTY)) (NUMERAL _0)) e')))
T c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY f1 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 f1
+ (~ (c IN EMPTY)) |- ((~ (c IN EMPTY)) /\ ((SUC (CARD EMPTY)) = (SUC (NUMERAL _0))))
T c==> c~ cIN f0 part cEMPTY c/\ c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY cSUC cNUMERAL c_0
+ |- (((!g'. (!t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 f2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND b0 b1 b2 f2
- |- ((~ (c IN EMPTY)) ==> ((SUC (NUMERAL _0)) = (SUC (NUMERAL _0))))
T c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 cSUC cNUMERAL c_0
- (~ (b IN (c INSERT EMPTY))) |- ((~ (b IN (c INSERT EMPTY))) /\ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 f4
+ |- ((((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))
T c= c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((((~ (c IN EMPTY)) ==> ((SUC (NUMERAL _0)) = (SUC (NUMERAL _0)))) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c= c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((!g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e')))))))) ==> ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e')))))))) g')) = ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((CARD (b INSERT (c INSERT EMPTY))) = t')) ==> (((~ g') ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))) = (((COND g') t') e')))))))) g'))
T c= c==> ! ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 f3 * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND b0 b1 b2 f3
+ |- (((NUMERAL (BIT0 (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0)))) = T)
T c= c<= cNUMERAL cBIT0 cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 cT
- |- ((\g'. (!t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f2
+ |- (!g'. (!t'. (!e'. ((g = g') ==> ((g' ==> (t = t')) ==> (((~ g') ==> (e = e')) ==> ((((COND g) t) e) = (((COND g') t') e'))))))))
T c==> c= f0 f1 c==> c==> f1 c= f2 f3 c==> c==> c~ f1 c= f4 f5 c= cCOND f0 f2 f4 cCOND f1 f3 f5
- (~ (c IN EMPTY)) |- ((~ (c IN EMPTY)) /\ ((SUC (NUMERAL _0)) = (SUC (NUMERAL _0))))
T c==> c~ cIN f0 part cEMPTY c/\ c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 cSUC cNUMERAL c_0
+ (~ (b IN (c INSERT EMPTY))) |- ((~ (b IN (c INSERT EMPTY))) /\ ((SUC (CARD (c INSERT EMPTY))) = (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c/\ c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCARD * * part cINSERT f1 part cEMPTY cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = (((~ (c IN EMPTY)) \/ (((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((NUMERAL _0) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (NUMERAL _0)) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (NUMERAL _0)) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (NUMERAL _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))))) /\ ((c IN EMPTY) \/ (((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0)))))))))))
T c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f2 part cEMPTY c/\ c\/ c~ cIN f1 * * part cINSERT f2 part cEMPTY c/\ c\/ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f2 part cEMPTY c/\ c\/ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cSUC cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 part cEMPTY c/\ c\/ c~ cIN f1 * * part cINSERT f2 part cEMPTY c/\ c\/ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f2 part cEMPTY c/\ c\/ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cSUC cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((!t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e'))))))) ==> ((\t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e'))))))) t')) = ((\t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e'))))))) t'))
T c= c==> ! ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 f3 * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 f3
- |- ((((~ (b IN (c INSERT EMPTY))) ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c= c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ ((b IN (c INSERT EMPTY)) = T) |- (((b IN (c INSERT EMPTY)) = T) /\ ((((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) <= (NUMERAL (BIT1 (BIT1 _0)))))) = (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))))))
T c==> c= cIN f0 * * part cINSERT f1 part cEMPTY cT c/\ c= cIN f0 * * part cINSERT f1 part cEMPTY cT c= c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c<= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ (a IN (b INSERT (c INSERT EMPTY))) |- ((a IN (b INSERT (c INSERT EMPTY))) /\ ((CARD (b INSERT (c INSERT EMPTY))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (CARD (b INSERT (c INSERT EMPTY)))) = (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCARD * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((\g'. (!t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cCARD part cEMPTY b1 c==> c==> c~ b0 c= cSUC cCARD part cEMPTY b2 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND b0 b1 b2 f1
- |- ((((c IN EMPTY) = (c IN EMPTY)) ==> (((c IN EMPTY) ==> ((NUMERAL _0) = t')) ==> (((~ (c IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) t') e'))))) = (((c IN EMPTY) ==> ((NUMERAL _0) = t')) ==> (((~ (c IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) t') e')))))
T c= c==> c= cIN f0 part cEMPTY cIN f0 part cEMPTY c==> c==> cIN f0 part cEMPTY c= cNUMERAL c_0 f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY f1 f2 c==> c==> cIN f0 part cEMPTY c= cNUMERAL c_0 f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY f1 f2
- |- (((!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) ==> (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s))))) = (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))))
T c= c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0
- (a IN (b INSERT (c INSERT EMPTY))) |- ((a IN (b INSERT (c INSERT EMPTY))) /\ ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))
T c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c/\ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
+ |- ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) <= (NUMERAL (BIT1 (BIT1 _0))))
T c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((FINITE (b INSERT (c INSERT EMPTY))) ==> ((CARD (a INSERT (b INSERT (c INSERT EMPTY)))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY))))))) = ((CARD (a INSERT (b INSERT (c INSERT EMPTY)))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (CARD (b INSERT (c INSERT EMPTY)))) (SUC (CARD (b INSERT (c INSERT EMPTY)))))))
T c= c==> cFINITE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCOND cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCOND cIN f2 * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
+ |- ((((COND F) t1) t2) = t2)
T c= cCOND cF f0 f1 f1
+ |- (((c IN EMPTY) = g') ==> ((g' ==> ((CARD EMPTY) = t')) ==> (((~ g') ==> ((SUC (CARD EMPTY)) = e')) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND g') t') e')))))
T c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cCARD part cEMPTY f2 c==> c==> c~ f1 c= cSUC cCARD part cEMPTY f3 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND f1 f2 f3
+ |- ((b IN (c INSERT EMPTY)) ==> ((CARD (c INSERT EMPTY)) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCARD * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- (((c IN EMPTY) ==> ((NUMERAL _0) = t')) ==> (((~ (c IN EMPTY)) ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) t') e'))))
T c==> c==> cIN f0 part cEMPTY c= cNUMERAL c_0 f1 c==> c==> c~ cIN f0 part cEMPTY c= cSUC cNUMERAL c_0 f2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 part cEMPTY f1 f2
+ |- ((\t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((CARD (c INSERT EMPTY)) = t')) ==> (((~ g') ==> ((SUC (CARD (c INSERT EMPTY))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCARD * * part cINSERT f1 part cEMPTY b0 c==> c==> c~ f2 c= cSUC cCARD * * part cINSERT f1 part cEMPTY b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCARD * * part cINSERT f1 part cEMPTY cSUC cCARD * * part cINSERT f1 part cEMPTY cCOND f2 b0 b1 f3
+ |- ((((c IN EMPTY) = F) ==> ((((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0)))))))) = (((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((NUMERAL (BIT1 _0)) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0)))))))))) /\ (((c IN EMPTY) = T) ==> ((((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0)))))))) = (((~ (b IN (c INSERT EMPTY))) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((NUMERAL _0) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (NUMERAL _0)) <= (NUMERAL (BIT1 (BIT1 _0))))))) /\ ((b IN (c INSERT EMPTY)) \/ (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((SUC (NUMERAL _0)) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (SUC (NUMERAL _0))) <= (NUMERAL (BIT1 (BIT1 _0)))))))))))
T c/\ c==> c= cIN f0 part cEMPTY cF c= c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c= cIN f0 part cEMPTY cT c= c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cCOND cIN f0 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f1 * * part cINSERT f0 part cEMPTY c/\ c\/ c~ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f2 * * part cINSERT f1 * * part cINSERT f0 part cEMPTY c<= cSUC cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0
- |- ((!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) ==> (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))))
T c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0
+ |- (((!s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) ==> ((\s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) s)) = ((\s. (!x. ((FINITE (x INSERT s)) = (FINITE s)))) s))
T c= c==> ! ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 * / ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 f0 * / ! c= cFINITE * * part cINSERT b1 b0 cFINITE b0 f0
- |- (F = (~ T))
T c= cF c~ cT
- |- ((((b IN (c INSERT EMPTY)) = (b IN (c INSERT EMPTY))) ==> (((b IN (c INSERT EMPTY)) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ (b IN (c INSERT EMPTY))) ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) t') e'))))) = (((b IN (c INSERT EMPTY)) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ (b IN (c INSERT EMPTY))) ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) t') e')))))
T c= c==> c= cIN f0 * * part cINSERT f1 part cEMPTY cIN f0 * * part cINSERT f1 part cEMPTY c==> c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY f2 f3 c==> c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY f2 f3
+ |- (T = (FINITE (b INSERT (c INSERT EMPTY))))
T c= cT cFINITE * * part cINSERT f0 * * part cINSERT f1 part cEMPTY
- |- ((\g'. (!t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY b0 c==> c==> b0 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f3
- (~ (a IN (b INSERT (c INSERT EMPTY)))) |- ((a IN (b INSERT (c INSERT EMPTY))) = F)
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cF
+ |- (((FINITE (c INSERT EMPTY)) ==> ((CARD (b INSERT (c INSERT EMPTY))) = (((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY)))))) = ((CARD (b INSERT (c INSERT EMPTY))) = (((COND (b IN (c INSERT EMPTY))) (CARD (c INSERT EMPTY))) (SUC (CARD (c INSERT EMPTY))))))
T c= c==> cFINITE * * part cINSERT f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f0 part cEMPTY cCOND cIN f1 * * part cINSERT f0 part cEMPTY cCARD * * part cINSERT f0 part cEMPTY cSUC cCARD * * part cINSERT f0 part cEMPTY c= cCARD * * part cINSERT f1 * * part cINSERT f0 part cEMPTY cCOND cIN f1 * * part cINSERT f0 part cEMPTY cCARD * * part cINSERT f0 part cEMPTY cSUC cCARD * * part cINSERT f0 part cEMPTY
- |- ((\t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 part cEMPTY f1 c==> c==> f1 c= cNUMERAL c_0 b0 c==> c==> c~ f1 c= cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f1 b0 b1 f2
+ |- ((((~ (c IN EMPTY)) ==> ((SUC (CARD EMPTY)) = (SUC (NUMERAL _0)))) ==> ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = ((((COND (c IN EMPTY)) (CARD EMPTY)) (SUC (CARD EMPTY))) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c= c==> c==> c~ cIN f0 part cEMPTY c= cSUC cCARD part cEMPTY cSUC cNUMERAL c_0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 part cEMPTY cCARD part cEMPTY cSUC cCARD part cEMPTY cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) |- ((!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) /\ (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))))
T c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 c/\ ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0
- |- (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) e')))
T c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3
+ |- ((((((a IN (b INSERT (c INSERT EMPTY))) = F) ==> (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) <= (NUMERAL (BIT1 (BIT1 _0)))))) /\ (((a IN (b INSERT (c INSERT EMPTY))) = T) ==> (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0))))))) ==> (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) <= (NUMERAL (BIT1 (BIT1 _0)))))))) = (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = (((~ (a IN (b INSERT (c INSERT EMPTY)))) \/ ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0))))) <= (NUMERAL (BIT1 (BIT1 _0))))) /\ ((a IN (b INSERT (c INSERT EMPTY))) \/ ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (NUMERAL (BIT1 _0)))))) <= (NUMERAL (BIT1 (BIT1 _0))))))))
T c= c==> c/\ c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cF c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cT c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c<= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ c\/ c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0 c\/ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cNUMERAL cBIT1 c_0 cNUMERAL cBIT1 cBIT1 c_0
+ |- (((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) <= (NUMERAL (BIT1 (BIT1 _0)))) = ((FINITE (a INSERT (b INSERT (c INSERT EMPTY)))) /\ ((CARD (a INSERT (b INSERT (c INSERT EMPTY)))) <= (dimindex UNIV))))
T c= c<= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cNUMERAL cBIT1 cBIT1 c_0 c/\ cFINITE * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c<= cCARD * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cdimindex part cUNIV
+ |- ((!c. (negligible ((hull affine) (a INSERT (b INSERT (c INSERT EMPTY)))))) = T)
T c= ! cnegligible * * part chull part caffine * * part cINSERT f0 * * part cINSERT f1 * * part cINSERT b0 part cEMPTY cT
- |- ((((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))) = ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))))))
T c= c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- ((((~ (~ F)) ==> F) ==> (~ F)) = (~ F))
T c= c==> c==> c~ c~ cF cF c~ cF c~ cF
- |- ((\e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))) e')
T * / c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 f4 b0 f5
- (b IN (c INSERT EMPTY)) |- ((b IN (c INSERT EMPTY)) /\ ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))
T c==> cIN f0 * * part cINSERT f1 part cEMPTY c/\ cIN f0 * * part cINSERT f1 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((((a IN (b INSERT (c INSERT EMPTY))) = (a IN (b INSERT (c INSERT EMPTY)))) ==> (((a IN (b INSERT (c INSERT EMPTY))) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) t') e'))))) = (((a IN (b INSERT (c INSERT EMPTY))) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) t') e')))))
T c= c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 f4 c==> c==> cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 f4
- |- ((~ (a IN (b INSERT (c INSERT EMPTY)))) ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c==> c~ cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((~ T) = F)
T c= c~ cT cF
- (FINITE s) |- ((FINITE s) /\ ((CARD (x INSERT s)) = (((COND (x IN s)) (CARD s)) (SUC (CARD s)))))
T c==> cFINITE f0 c/\ cFINITE f0 c= cCARD * * part cINSERT f1 f0 cCOND cIN f1 f0 cCARD f0 cSUC cCARD f0
- |- (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e')))))
T c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f4 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f5 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 f4 f5
- (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))), ((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) |- (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) /\ (negligible ((hull affine) s)))
T c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 c==> c/\ cFINITE f0 c<= cCARD f0 cdimindex part cUNIV c/\ c/\ cFINITE f0 c<= cCARD f0 cdimindex part cUNIV cnegligible * * part chull part caffine f0
- |- (((b IN (c INSERT EMPTY)) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ (b IN (c INSERT EMPTY))) ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) t') e'))))
T c==> c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f2 c==> c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY f2 f3
- |- ((\t'. (!e'. (((a IN (b INSERT (c INSERT EMPTY))) = g') ==> ((g' ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = t')) ==> (((~ g') ==> ((SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) = e')) ==> ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY f3 c==> c==> f3 c= cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f3 c= cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f3 b0 b1 f4
- (~ (b IN (c INSERT EMPTY))) |- ((b IN (c INSERT EMPTY)) = F)
T c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cIN f0 * * part cINSERT f1 part cEMPTY cF
- |- ((((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))) = (((COND (a IN (b INSERT (c INSERT EMPTY)))) (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))))) (SUC (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))))
T c= cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 * * part cINSERT f2 part cEMPTY cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 * * part cINSERT f2 part cEMPTY cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f2 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- |- ((~ (~ t)) = t)
T c= c~ c~ f0 f0
- |- ((~ (b IN (c INSERT EMPTY))) ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))))
T c==> c~ cIN f0 * * part cINSERT f1 part cEMPTY c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0
- (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))), ((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) |- (negligible ((hull affine) s))
T c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 c==> c/\ cFINITE f0 c<= cCARD f0 cdimindex part cUNIV cnegligible * * part chull part caffine f0
- (!s. (((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s)))) |- ((((FINITE s) /\ ((CARD s) <= (dimindex UNIV))) ==> (negligible ((hull affine) s))) = T)
T c==> ! c==> c/\ cFINITE b0 c<= cCARD b0 cdimindex part cUNIV cnegligible * * part chull part caffine b0 c= c==> c/\ cFINITE f0 c<= cCARD f0 cdimindex part cUNIV cnegligible * * part chull part caffine f0 cT
- |- ((\g'. (!t'. (!e'. (((c IN EMPTY) = g') ==> ((g' ==> ((NUMERAL _0) = t')) ==> (((~ g') ==> ((SUC (NUMERAL _0)) = e')) ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = (((COND g') t') e')))))))) g')
T * / ! ! c==> c= cIN f0 part cEMPTY b0 c==> c==> b0 c= cNUMERAL c_0 b1 c==> c==> c~ b0 c= cSUC cNUMERAL c_0 b2 c= cCOND cIN f0 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND b0 b1 b2 f1
- (b IN (c INSERT EMPTY)) |- ((b IN (c INSERT EMPTY)) = T)
T c==> cIN f0 * * part cINSERT f1 part cEMPTY c= cIN f0 * * part cINSERT f1 part cEMPTY cT
- |- (~ (~ T))
T c~ c~ cT
- |- (((!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))) ==> ((\e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))) e')) = ((\e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e')))))) e'))
T c= c==> ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 b0 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 b0 f4 * / c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 f3 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 f3 b0 f4
- |- ((c IN EMPTY) ==> ((NUMERAL _0) = (NUMERAL _0)))
T c==> cIN f0 part cEMPTY c= cNUMERAL c_0 cNUMERAL c_0
- |- ((\t'. (!e'. (((b IN (c INSERT EMPTY)) = g') ==> ((g' ==> ((((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))) = t')) ==> (((~ g') ==> ((SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) = e')) ==> ((((COND (b IN (c INSERT EMPTY))) (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0)))) (SUC (((COND (c IN EMPTY)) (NUMERAL _0)) (SUC (NUMERAL _0))))) = (((COND g') t') e'))))))) t')
T * / ! c==> c= cIN f0 * * part cINSERT f1 part cEMPTY f2 c==> c==> f2 c= cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b0 c==> c==> c~ f2 c= cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 b1 c= cCOND cIN f0 * * part cINSERT f1 part cEMPTY cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cSUC cCOND cIN f1 part cEMPTY cNUMERAL c_0 cSUC cNUMERAL c_0 cCOND f2 b0 b1 f3
