N Reduction1.generatePolygon_criteria
C |- (!v. (!f. (!g. (!vs. (!vs'. (((((MAP the) ((filter isSome) vs)) = vs') /\ (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) /\ (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) /\ ((((prev_el (FST f)) v) = (the (LAST vs))) /\ (((MEM (FST f)) (fgraph g)) /\ (((all uniq) (fgraph g)) /\ ((good_faces_v3 g) /\ (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs)))))))))))))))) ==> ((MEM (((subdivFace g) f) vs)) ((((generatePolygon (sizel vs)) v) f) g))))))))
T c==> c/\ c= cMAP part cthe cfilter part cisSome f0 f1 c/\ c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c/\ c= cHD f0 cSOME f2 c/\ cisSome cLAST f0 c/\ c= cprev_el cFST f3 f2 cthe cLAST f0 c/\ cMEM cFST f3 cfgraph f4 c/\ call part cuniq cfgraph f4 c/\ cgood_faces_v3 f4 c/\ c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c/\ call / cMEM b0 cFST f3 cMAP part cthe cfilter part cisSome f0 c/\ ! c==> c< cSUC b0 csizel f1 c< cindexf f2 cEL b0 f1 cFST f3 cindexf f2 cEL cSUC b0 f1 cFST f3 ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f3 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 cMEM csubdivFace f4 f3 f0 cgeneratePolygon csizel f0 f2 f3 f4
D TRUTH
A |- T
T cT
D I_DEF
A |- (I = (\x. x))
T c= part cI / b0
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D MEM_MAP
A |- (!f. (!y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))))
T c= cMEM f0 cMAP f1 f2 c? / c/\ cMEM b0 f2 c= f0 * f1 b0
D Truong_tactic.hold_def
A |- (hold = I)
T c= part chold part cI
D Seq.mem_filter
A |- (!a. (!x. (!s. (((MEM x) ((filter a) s)) = ((a x) /\ ((MEM x) s))))))
T c= cMEM f0 cfilter f1 f2 c/\ * f1 f0 cMEM f0 f2
D Tame_defs2.generatePolygon
A |- (!g. (!v. (!n. (!f. (((((generatePolygon n) v) f) g) = ((LET (\enumeration. (LET_END ((LET (\enumeration. (LET_END ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration))))) ((FILTER (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))))) ((enumerator n) (LENGTH (FST f)))))))))
T c= cgeneratePolygon f0 f1 f2 f3 cLET / cLET_END cLET / cLET_END cLET / cLET_END cMAP / csubdivFace f3 f2 b2 b1 cMAP / cindexToVertexList f2 f1 b1 b1 cFILTER / c~ ccontainsDuplicateEdge f3 f2 f1 b1 b0 cenumerator f0 cLENGTH cFST f2
D Tame_list.filter_FILTER
A |- (filter = FILTER)
T c= part cfilter part cFILTER
D Reduction1.enumeration_vertex_list
A |- (!v. (!f. (!g. (!vs. (!vs'. (((((MAP the) ((filter isSome) vs)) = vs') /\ (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) /\ (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) /\ ((((prev_el (FST f)) v) = (the (LAST vs))) /\ (((MEM (FST f)) (fgraph g)) /\ (((all uniq) (fgraph g)) /\ ((good_faces_v3 g) /\ (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs)))))))))))))))) ==> (?e. (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e)))))))))))
T c==> c/\ c= cMAP part cthe cfilter part cisSome f0 f1 c/\ c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c/\ c= cHD f0 cSOME f2 c/\ cisSome cLAST f0 c/\ c= cprev_el cFST f3 f2 cthe cLAST f0 c/\ cMEM cFST f3 cfgraph f4 c/\ call part cuniq cfgraph f4 c/\ cgood_faces_v3 f4 c/\ c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c/\ call / cMEM b0 cFST f3 cMAP part cthe cfilter part cisSome f0 c/\ ! c==> c< cSUC b0 csizel f1 c< cindexf f2 cEL b0 f1 cFST f3 cindexf f2 cEL cSUC b0 f1 cFST f3 ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f3 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c? / c/\ cMEM b0 cenumerator csizel f0 cLENGTH cFST f3 c/\ c~ ccontainsDuplicateEdge f4 f3 f2 b0 c= f0 cindexToVertexList f3 f2 b0
+ |- ((?x. (((~ ((((containsDuplicateEdge g) f) v) x)) /\ ((MEM x) enumeration)) /\ (vs = (((indexToVertexList f) v) x)))) = ((?x. (((~ ((((containsDuplicateEdge g) f) v) x)) /\ ((MEM x) enumeration)) /\ (vs = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) vs))))
T c= c? / c/\ c/\ c~ ccontainsDuplicateEdge f0 f1 f2 b0 cMEM b0 f3 c= f4 cindexToVertexList f1 f2 b0 c/\ c? / c/\ c/\ c~ ccontainsDuplicateEdge f0 f1 f2 b0 cMEM b0 f3 c= f4 cindexToVertexList f1 f2 b0 c= csubdivFace f0 f1 f4 csubdivFace f0 f1 f4
- (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (?e. (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e))))), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((?e. (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e))))) /\ ((MEM (((subdivFace g) f) vs)) ((((generatePolygon (sizel vs)) v) f) g)))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> c? / c/\ cMEM b0 cenumerator csizel f3 cLENGTH cFST f2 c/\ c~ ccontainsDuplicateEdge f4 f2 f1 b0 c= f3 cindexToVertexList f2 f1 b0 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 c/\ c? / c/\ cMEM b0 cenumerator csizel f3 cLENGTH cFST f2 c/\ c~ ccontainsDuplicateEdge f4 f2 f1 b0 c= f3 cindexToVertexList f2 f1 b0 cMEM csubdivFace f4 f2 f3 cgeneratePolygon csizel f3 f1 f2 f4
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) = (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= ! c==> c< cSUC b0 csizel f5 c< cindexf f3 cEL b0 f5 cFST f2 cindexf f3 cEL cSUC b0 f5 cFST f2 ! c==> c< cSUC b0 csizel f5 c< cindexf f3 cEL b0 f5 cFST f2 cindexf f3 cEL cSUC b0 f5 cFST f2
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) = (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= ! c==> c< cSUC b0 csizel f4 c< cindexf f2 cEL b0 f4 cFST f1 cindexf f2 cEL cSUC b0 f4 cFST f1 ! c==> c< cSUC b0 csizel f4 c< cindexf f2 cEL b0 f4 cFST f1 cindexf f2 cEL cSUC b0 f4 cFST f1
+ (isSome (LAST vs)), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (((all uniq) (fgraph g)) /\ ((good_faces_v3 g) /\ (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs)))))))))), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM (FST f)) (fgraph g)), ((all uniq) (fgraph g)) |- ((MEM (((subdivFace g) f) vs)) ((((generatePolygon (sizel vs)) v) f) g))
T c==> cisSome cLAST f0 c==> c= cprev_el cFST f1 f2 cthe cLAST f0 c==> c= cHD f0 cSOME f2 c==> c= cMAP part cthe cfilter part cisSome f0 f3 c==> c/\ call part cuniq cfgraph f4 c/\ cgood_faces_v3 f4 c/\ c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c/\ call / cMEM b0 cFST f1 cMAP part cthe cfilter part cisSome f0 c/\ ! c==> c< cSUC b0 csizel f3 c< cindexf f2 cEL b0 f3 cFST f1 cindexf f2 cEL cSUC b0 f3 cFST f1 ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f1 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c==> cMEM cFST f1 cfgraph f4 c==> call part cuniq cfgraph f4 cMEM csubdivFace f4 f1 f0 cgeneratePolygon csizel f0 f2 f1 f4
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((~ ((((containsDuplicateEdge g) f) v) e)) = (~ ((((containsDuplicateEdge g) f) v) e)))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= c~ ccontainsDuplicateEdge f1 f2 f3 f5 c~ ccontainsDuplicateEdge f1 f2 f3 f5
+ ((\enumeration. (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f))))) enumeration) |- (((enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) ==> ((MEM (((subdivFace g) f) vs)) ((LET (\enumeration. (LET_END ((LET (\enumeration. (LET_END ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration))))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))))) ((enumerator (sizel vs)) (LENGTH (FST f)))))) = ((MEM (((subdivFace g) f) vs)) ((LET (\enumeration. (LET_END ((LET (\enumeration. (LET_END ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration))))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))))) ((enumerator (sizel vs)) (LENGTH (FST f))))))
T c==> * / c= b0 cenumerator csizel f0 cLENGTH cFST f1 f2 c= c==> c= f2 cenumerator csizel f0 cLENGTH cFST f1 cMEM csubdivFace f3 f1 f0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cMAP / csubdivFace f3 f1 b2 b1 cMAP / cindexToVertexList f1 f4 b1 b1 cfilter / c~ ccontainsDuplicateEdge f3 f1 f4 b1 b0 cenumerator csizel f0 cLENGTH cFST f1 cMEM csubdivFace f3 f1 f0 cLET / cLET_END cLET / cLET_END cLET / cLET_END cMAP / csubdivFace f3 f1 b2 b1 cMAP / cindexToVertexList f1 f4 b1 b1 cfilter / c~ ccontainsDuplicateEdge f3 f1 f4 b1 b0 cenumerator csizel f0 cLENGTH cFST f1
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) = (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= ! c==> c< cSUC b0 csizel f3 c< cindexf f4 cEL b0 f3 cFST f2 cindexf f4 cEL cSUC b0 f3 cFST f2 ! c==> c< cSUC b0 csizel f3 c< cindexf f4 cEL b0 f3 cFST f2 cindexf f4 cEL cSUC b0 f3 cFST f2
+ ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) |- ((isSome (LAST vs)) ==> ((((prev_el (FST f)) v) = (the (LAST vs))) ==> (((MEM (FST f)) (fgraph g)) ==> (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. (((MEM x) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))))))))))))))))
T c==> c= cHD f0 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f0 f2 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c==> cisSome cLAST f0 c==> c= cprev_el cFST f3 f1 cthe cLAST f0 c==> cMEM cFST f3 cfgraph f4 c==> call part cuniq cfgraph f4 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> call / cMEM b0 cFST f3 cMAP part cthe cfilter part cisSome f0 c==> ! c==> c< cSUC b0 csizel f2 c< cindexf f1 cEL b0 f2 cFST f3 cindexf f1 cEL cSUC b0 f2 cFST f3 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f3 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f4 f3 f1 f5 c==> c= f0 cindexToVertexList f3 f1 f5 c==> c= cenumerator csizel f0 cLENGTH cFST f3 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f3 f1 b0 f6 f7 c==> c= cMAP / cindexToVertexList f3 f1 b0 f7 cMAP / cindexToVertexList f3 f1 b0 f7 chold c? / c/\ cMEM b0 cMAP / cindexToVertexList f3 f1 b1 f7 c= csubdivFace f4 f3 f0 csubdivFace f4 f3 b0
+ |- (((!g. (!vs. (!vs'. (((((MAP the) ((filter isSome) vs)) = vs') /\ (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) /\ (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) /\ ((((prev_el (FST f)) v) = (the (LAST vs))) /\ (((MEM (FST f)) (fgraph g)) /\ (((all uniq) (fgraph g)) /\ ((good_faces_v3 g) /\ (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs)))))))))))))))) ==> (?e. (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e))))))))) ==> ((\g. (!vs. (!vs'. (((((MAP the) ((filter isSome) vs)) = vs') /\ (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) /\ (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) /\ ((((prev_el (FST f)) v) = (the (LAST vs))) /\ (((MEM (FST f)) (fgraph g)) /\ (((all uniq) (fgraph g)) /\ ((good_faces_v3 g) /\ (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs)))))))))))))))) ==> (?e. (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e))))))))) g)) = ((\g. (!vs. (!vs'. (((((MAP the) ((filter isSome) vs)) = vs') /\ (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) /\ (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) /\ ((((prev_el (FST f)) v) = (the (LAST vs))) /\ (((MEM (FST f)) (fgraph g)) /\ (((all uniq) (fgraph g)) /\ ((good_faces_v3 g) /\ (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs)))))))))))))))) ==> (?e. (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e))))))))) g))
T c= c==> ! ! ! c==> c/\ c= cMAP part cthe cfilter part cisSome b1 b2 c/\ c<= cNUMERAL cBIT1 cBIT1 c_0 csizel b1 c/\ c= cHD b1 cSOME f0 c/\ cisSome cLAST b1 c/\ c= cprev_el cFST f1 f0 cthe cLAST b1 c/\ cMEM cFST f1 cfgraph b0 c/\ call part cuniq cfgraph b0 c/\ cgood_faces_v3 b0 c/\ c= * part cvertices_set2 b0 * part celements_of_list cfgraph b0 c/\ call / cMEM b3 cFST f1 cMAP part cthe cfilter part cisSome b1 c/\ ! c==> c< cSUC b3 csizel b2 c< cindexf f0 cEL b3 b2 cFST f1 cindexf f0 cEL cSUC b3 b2 cFST f1 ! cLET / cLET_END c==> c/\ cisSome cEL b3 b1 c/\ cisSome cEL cSUC b3 b1 c/\ c< cSUC b3 csizel b1 cMEM b4 clist_of_darts cfgraph b0 cMEM b4 clist_pairs cFST f1 c, cthe cEL b3 b1 cthe cEL cSUC b3 b1 c? / c/\ cMEM b3 cenumerator csizel b1 cLENGTH cFST f1 c/\ c~ ccontainsDuplicateEdge b0 f1 f0 b3 c= b1 cindexToVertexList f1 f0 b3 * / ! ! c==> c/\ c= cMAP part cthe cfilter part cisSome b1 b2 c/\ c<= cNUMERAL cBIT1 cBIT1 c_0 csizel b1 c/\ c= cHD b1 cSOME f0 c/\ cisSome cLAST b1 c/\ c= cprev_el cFST f1 f0 cthe cLAST b1 c/\ cMEM cFST f1 cfgraph b0 c/\ call part cuniq cfgraph b0 c/\ cgood_faces_v3 b0 c/\ c= * part cvertices_set2 b0 * part celements_of_list cfgraph b0 c/\ call / cMEM b3 cFST f1 cMAP part cthe cfilter part cisSome b1 c/\ ! c==> c< cSUC b3 csizel b2 c< cindexf f0 cEL b3 b2 cFST f1 cindexf f0 cEL cSUC b3 b2 cFST f1 ! cLET / cLET_END c==> c/\ cisSome cEL b3 b1 c/\ cisSome cEL cSUC b3 b1 c/\ c< cSUC b3 csizel b1 cMEM b4 clist_of_darts cfgraph b0 cMEM b4 clist_pairs cFST f1 c, cthe cEL b3 b1 cthe cEL cSUC b3 b1 c? / c/\ cMEM b3 cenumerator csizel b1 cLENGTH cFST f1 c/\ c~ ccontainsDuplicateEdge b0 f1 f0 b3 c= b1 cindexToVertexList f1 f0 b3 f2 * / ! ! c==> c/\ c= cMAP part cthe cfilter part cisSome b1 b2 c/\ c<= cNUMERAL cBIT1 cBIT1 c_0 csizel b1 c/\ c= cHD b1 cSOME f0 c/\ cisSome cLAST b1 c/\ c= cprev_el cFST f1 f0 cthe cLAST b1 c/\ cMEM cFST f1 cfgraph b0 c/\ call part cuniq cfgraph b0 c/\ cgood_faces_v3 b0 c/\ c= * part cvertices_set2 b0 * part celements_of_list cfgraph b0 c/\ call / cMEM b3 cFST f1 cMAP part cthe cfilter part cisSome b1 c/\ ! c==> c< cSUC b3 csizel b2 c< cindexf f0 cEL b3 b2 cFST f1 cindexf f0 cEL cSUC b3 b2 cFST f1 ! cLET / cLET_END c==> c/\ cisSome cEL b3 b1 c/\ cisSome cEL cSUC b3 b1 c/\ c< cSUC b3 csizel b1 cMEM b4 clist_of_darts cfgraph b0 cMEM b4 clist_pairs cFST f1 c, cthe cEL b3 b1 cthe cEL cSUC b3 b1 c? / c/\ cMEM b3 cenumerator csizel b1 cLENGTH cFST f1 c/\ c~ ccontainsDuplicateEdge b0 f1 f0 b3 c= b1 cindexToVertexList f1 f0 b3 f2
+ |- ((t /\ T) = t)
T c= c/\ f0 cT f0
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) |- ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) ==> ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c/\ ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c= cenumerator csizel f3 cLENGTH cFST f2 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 c==> c= cMAP / cindexToVertexList f2 f1 b0 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 cMAP / cindexToVertexList f2 f1 b0 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b2 f6 c= b0 cindexToVertexList f2 f1 b1 c= csubdivFace f4 f2 f3 csubdivFace f4 f2 b0
+ (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs)))))))), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM (FST f)) (fgraph g)), ((all uniq) (fgraph g)) |- ((MEM (((subdivFace g) f) vs)) ((((generatePolygon (sizel vs)) v) f) g))
T c==> cisSome cLAST f0 c==> cgood_faces_v3 f1 c==> c= * part cvertices_set2 f1 * part celements_of_list cfgraph f1 c==> c= cprev_el cFST f2 f3 cthe cLAST f0 c==> c= cHD f0 cSOME f3 c==> c= cMAP part cthe cfilter part cisSome f0 f4 c==> c/\ c= * part cvertices_set2 f1 * part celements_of_list cfgraph f1 c/\ call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f0 c/\ ! c==> c< cSUC b0 csizel f4 c< cindexf f3 cEL b0 f4 cFST f2 cindexf f3 cEL cSUC b0 f4 cFST f2 ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f1 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c==> cMEM cFST f2 cfgraph f1 c==> call part cuniq cfgraph f1 cMEM csubdivFace f1 f2 f0 cgeneratePolygon csizel f0 f3 f2 f1
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (~ ((((containsDuplicateEdge g) f) v) e)), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (vs = (((indexToVertexList f) v) e)), (((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM e) enumeration), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. (((MEM x) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c= cenumerator csizel f3 cLENGTH cFST f2 f6 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM f5 f6 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 f7 c==> c= cMAP / cindexToVertexList f2 f1 b0 f7 cMAP / cindexToVertexList f2 f1 b0 f7 chold c? / c/\ cMEM b0 cMAP / cindexToVertexList f2 f1 b1 f7 c= csubdivFace f4 f2 f3 csubdivFace f4 f2 b0
+ |- (a ==> (hold a))
T c==> f0 chold f0
+ |- (((MEM (((subdivFace g) f) vs)) ((LET (\enumeration. (LET_END ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration))))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) = ((MEM (((subdivFace g) f) vs)) ((LET (\enumeration. (LET_END ((LET (\enumeration. (LET_END ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration))))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))))) enumeration)))
T c= cMEM csubdivFace f0 f1 f2 cLET / cLET_END cLET / cLET_END cMAP / csubdivFace f0 f1 b2 b1 cMAP / cindexToVertexList f1 f3 b1 b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f3 b0 f4 cMEM csubdivFace f0 f1 f2 cLET / cLET_END cLET / cLET_END cLET / cLET_END cMAP / csubdivFace f0 f1 b2 b1 cMAP / cindexToVertexList f1 f3 b1 b1 cfilter / c~ ccontainsDuplicateEdge f0 f1 f3 b1 b0 f4
+ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) |- ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))
T c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f1 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 cLET / cLET_END c==> c/\ cisSome cEL f3 f0 c/\ cisSome cEL cSUC f3 f0 c/\ c< cSUC f3 csizel f0 cMEM b0 clist_of_darts cfgraph f1 cMEM b0 clist_pairs cFST f2 c, cthe cEL f3 f0 cthe cEL cSUC f3 f0
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (~ ((((containsDuplicateEdge g) f) v) e)), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (vs = (((indexToVertexList f) v) e)), (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((?enumeration'. (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> ((MEM (((subdivFace g) f) vs)) ((LET (\enumeration. (LET_END ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration))))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c= f6 cenumerator csizel f3 cLENGTH cFST f2 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM f5 cenumerator csizel f3 cLENGTH cFST f2 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 c==> c? / c= b0 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b1 f6 cMEM csubdivFace f4 f2 f3 cLET / cLET_END cLET / cLET_END cMAP / csubdivFace f4 f2 b2 b1 cMAP / cindexToVertexList f2 f1 b1 b0 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6
+ (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = vertexLists) ==> (hold (?x. (((MEM x) vertexLists) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))) = (hold (?x. (((MEM x) vertexLists) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c==> c= cMAP / cindexToVertexList f1 f2 b0 f3 f0 chold c? / c/\ cMEM b0 f0 c= csubdivFace f4 f1 f5 csubdivFace f4 f1 b0 chold c? / c/\ cMEM b0 f0 c= csubdivFace f4 f1 f5 csubdivFace f4 f1 b0
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- (((vertices_set2 g) = (elements_of_list (fgraph g))) = ((vertices_set2 g) = (elements_of_list (fgraph g))))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= c= * part cvertices_set2 f1 * part celements_of_list cfgraph f1 c= * part cvertices_set2 f1 * part celements_of_list cfgraph f1
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- (((all uniq) (fgraph g)) = ((all uniq) (fgraph g)))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= call part cuniq cfgraph f3 call part cuniq cfgraph f3
+ |- ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) ==> ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c= cenumerator csizel f3 cLENGTH cFST f2 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 c==> c= cMAP / cindexToVertexList f2 f1 b0 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 cMAP / cindexToVertexList f2 f1 b0 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b2 f6 c= b0 cindexToVertexList f2 f1 b1 c= csubdivFace f4 f2 f3 csubdivFace f4 f2 b0
+ ((MEM e) enumeration) |- (((MEM e) enumeration) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) ==> ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))
T c==> cMEM f0 f1 c/\ cMEM f0 f1 c==> c~ ccontainsDuplicateEdge f2 f3 f4 f0 c==> c= f5 cindexToVertexList f3 f4 f0 c==> c= cenumerator csizel f5 cLENGTH cFST f3 f1 c==> c= cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b0 f1 cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b0 f1 c==> c= cMAP / cindexToVertexList f3 f4 b0 cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b0 f1 cMAP / cindexToVertexList f3 f4 b0 cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b0 f1 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b2 f1 c= b0 cindexToVertexList f3 f4 b1 c= csubdivFace f2 f3 f5 csubdivFace f2 f3 b0
+ (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (?enumeration'. (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c/\ c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c? / c= b0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b1 f4
+ ((\vertexLists. (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration'))) vertexLists) |- (((vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> ((MEM (((subdivFace g) f) vs)) ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')))) = ((MEM (((subdivFace g) f) vs)) ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration'))))
T c==> * / c= b0 cMAP / cindexToVertexList f0 f1 b1 f2 f3 c= c==> c= f3 cMAP / cindexToVertexList f0 f1 b0 f2 cMEM csubdivFace f4 f0 f5 cLET / cLET_END cMAP / csubdivFace f4 f0 b1 b0 cMAP / cindexToVertexList f0 f1 b0 f2 cMEM csubdivFace f4 f0 f5 cLET / cLET_END cMAP / csubdivFace f4 f0 b1 b0 cMAP / cindexToVertexList f0 f1 b0 f2
+ (isSome (LAST vs)), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) |- ((((prev_el (FST f)) v) = (the (LAST vs))) /\ (((MEM (FST f)) (fgraph g)) ==> (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. (((MEM x) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))))))))))
T c==> cisSome cLAST f0 c==> c= cprev_el cFST f1 f2 cthe cLAST f0 c==> c= cHD f0 cSOME f2 c==> c= cMAP part cthe cfilter part cisSome f0 f3 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c/\ c= cprev_el cFST f1 f2 cthe cLAST f0 c==> cMEM cFST f1 cfgraph f4 c==> call part cuniq cfgraph f4 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> call / cMEM b0 cFST f1 cMAP part cthe cfilter part cisSome f0 c==> ! c==> c< cSUC b0 csizel f3 c< cindexf f2 cEL b0 f3 cFST f1 cindexf f2 cEL cSUC b0 f3 cFST f1 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f1 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f4 f1 f2 f5 c==> c= f0 cindexToVertexList f1 f2 f5 c==> c= cenumerator csizel f0 cLENGTH cFST f1 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f1 f2 b0 f6 f7 c==> c= cMAP / cindexToVertexList f1 f2 b0 f7 cMAP / cindexToVertexList f1 f2 b0 f7 chold c? / c/\ cMEM b0 cMAP / cindexToVertexList f1 f2 b1 f7 c= csubdivFace f4 f1 f0 csubdivFace f4 f1 b0
+ (~ ((((containsDuplicateEdge g) f) v) e)), (vs = (((indexToVertexList f) v) e)), ((MEM e) enumeration) |- ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))
T c==> c~ ccontainsDuplicateEdge f0 f1 f2 f3 c==> c= f4 cindexToVertexList f1 f2 f3 c==> cMEM f3 f5 c==> c= cMAP / cindexToVertexList f1 f2 b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f5 cMAP / cindexToVertexList f1 f2 b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f5 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b2 f5 c= b0 cindexToVertexList f1 f2 b1 c= csubdivFace f0 f1 f4 csubdivFace f0 f1 b0
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (~ ((((containsDuplicateEdge g) f) v) e)), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (vs = (((indexToVertexList f) v) e)), (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))), (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)), (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((MEM (((subdivFace g) f) vs)) ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c= f6 cenumerator csizel f3 cLENGTH cFST f2 c==> c= f7 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 c==> c= f8 cMAP / cindexToVertexList f2 f1 b0 f7 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM f5 cenumerator csizel f3 cLENGTH cFST f2 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 cMEM csubdivFace f4 f2 f3 cMAP / csubdivFace f4 f2 b0 f8
+ (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((((MAP the) ((filter isSome) vs)) = vs') ==> (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) ==> (((HD vs) = (SOME v)) ==> ((isSome (LAST vs)) ==> ((((prev_el (FST f)) v) = (the (LAST vs))) ==> (((MEM (FST f)) (fgraph g)) ==> (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = vertexLists) ==> (hold (?x. (((MEM x) vertexLists) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))))))))))))))))))) = ((((MAP the) ((filter isSome) vs)) = vs') ==> (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) ==> (((HD vs) = (SOME v)) ==> ((isSome (LAST vs)) ==> ((((prev_el (FST f)) v) = (the (LAST vs))) ==> (((MEM (FST f)) (fgraph g)) ==> (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. (((MEM x) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))))))))))))))))))))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c==> c= cMAP part cthe cfilter part cisSome f4 f5 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f4 c==> c= cHD f4 cSOME f2 c==> cisSome cLAST f4 c==> c= cprev_el cFST f1 f2 cthe cLAST f4 c==> cMEM cFST f1 cfgraph f6 c==> call part cuniq cfgraph f6 c==> cgood_faces_v3 f6 c==> c= * part cvertices_set2 f6 * part celements_of_list cfgraph f6 c==> call / cMEM b0 cFST f1 cMAP part cthe cfilter part cisSome f4 c==> ! c==> c< cSUC b0 csizel f5 c< cindexf f2 cEL b0 f5 cFST f1 cindexf f2 cEL cSUC b0 f5 cFST f1 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f4 c/\ cisSome cEL cSUC b0 f4 c/\ c< cSUC b0 csizel f4 cMEM b1 clist_of_darts cfgraph f6 cMEM b1 clist_pairs cFST f1 c, cthe cEL b0 f4 cthe cEL cSUC b0 f4 c==> cMEM f7 f8 c==> c~ ccontainsDuplicateEdge f6 f1 f2 f7 c==> c= f4 cindexToVertexList f1 f2 f7 c==> c= cenumerator csizel f4 cLENGTH cFST f1 f8 c==> c= cfilter / c~ ccontainsDuplicateEdge f6 f1 f2 b0 f8 f3 c==> c= cMAP / cindexToVertexList f1 f2 b0 f3 f0 chold c? / c/\ cMEM b0 f0 c= csubdivFace f6 f1 f4 csubdivFace f6 f1 b0 c==> c= cMAP part cthe cfilter part cisSome f4 f5 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f4 c==> c= cHD f4 cSOME f2 c==> cisSome cLAST f4 c==> c= cprev_el cFST f1 f2 cthe cLAST f4 c==> cMEM cFST f1 cfgraph f6 c==> call part cuniq cfgraph f6 c==> cgood_faces_v3 f6 c==> c= * part cvertices_set2 f6 * part celements_of_list cfgraph f6 c==> call / cMEM b0 cFST f1 cMAP part cthe cfilter part cisSome f4 c==> ! c==> c< cSUC b0 csizel f5 c< cindexf f2 cEL b0 f5 cFST f1 cindexf f2 cEL cSUC b0 f5 cFST f1 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f4 c/\ cisSome cEL cSUC b0 f4 c/\ c< cSUC b0 csizel f4 cMEM b1 clist_of_darts cfgraph f6 cMEM b1 clist_pairs cFST f1 c, cthe cEL b0 f4 cthe cEL cSUC b0 f4 c==> cMEM f7 f8 c==> c~ ccontainsDuplicateEdge f6 f1 f2 f7 c==> c= f4 cindexToVertexList f1 f2 f7 c==> c= cenumerator csizel f4 cLENGTH cFST f1 f8 c==> c= cfilter / c~ ccontainsDuplicateEdge f6 f1 f2 b0 f8 f3 c==> c= cMAP / cindexToVertexList f1 f2 b0 f3 cMAP / cindexToVertexList f1 f2 b0 f3 chold c? / c/\ cMEM b0 cMAP / cindexToVertexList f1 f2 b1 f3 c= csubdivFace f6 f1 f4 csubdivFace f6 f1 b0
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- (((vertices_set2 g) = (elements_of_list (fgraph g))) = ((vertices_set2 g) = (elements_of_list (fgraph g))))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= c= * part cvertices_set2 f3 * part celements_of_list cfgraph f3 c= * part cvertices_set2 f3 * part celements_of_list cfgraph f3
+ |- ((T ==> (?enumeration. (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))))) = (?enumeration. (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f))))))
T c= c==> cT c? / c= b0 cenumerator csizel f0 cLENGTH cFST f1 c? / c= b0 cenumerator csizel f0 cLENGTH cFST f1
+ (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- (((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration)
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= cenumerator csizel f1 cLENGTH cFST f2 f0
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (~ ((((containsDuplicateEdge g) f) v) e)), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (vs = (((indexToVertexList f) v) e)), (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))), (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)), (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((MEM (((subdivFace g) f) vs)) ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) vertexLists))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c= f6 cenumerator csizel f3 cLENGTH cFST f2 c==> c= f7 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 c==> c= f8 cMAP / cindexToVertexList f2 f1 b0 f7 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM f5 cenumerator csizel f3 cLENGTH cFST f2 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 cMEM csubdivFace f4 f2 f3 cLET / cLET_END cMAP / csubdivFace f4 f2 b1 b0 f8
+ |- ((T ==> (?enumeration'. (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)))) = (?enumeration'. (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))))
T c= c==> cT c? / c= b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b1 f3 c? / c= b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b1 f3
+ (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. (((MEM x) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))))))))))
T c==> cisSome cLAST f0 c==> cgood_faces_v3 f1 c==> c= * part cvertices_set2 f1 * part celements_of_list cfgraph f1 c==> c= cprev_el cFST f2 f3 cthe cLAST f0 c==> c= cHD f0 cSOME f3 c==> c= cMAP part cthe cfilter part cisSome f0 f4 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c==> cMEM cFST f2 cfgraph f1 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f0 c==> call part cuniq cfgraph f1 c/\ call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f0 c==> ! c==> c< cSUC b0 csizel f4 c< cindexf f3 cEL b0 f4 cFST f2 cindexf f3 cEL cSUC b0 f4 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f1 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f1 f2 f3 f5 c==> c= f0 cindexToVertexList f2 f3 f5 c==> c= cenumerator csizel f0 cLENGTH cFST f2 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f6 f7 c==> c= cMAP / cindexToVertexList f2 f3 b0 f7 cMAP / cindexToVertexList f2 f3 b0 f7 chold c? / c/\ cMEM b0 cMAP / cindexToVertexList f2 f3 b1 f7 c= csubdivFace f1 f2 f0 csubdivFace f1 f2 b0
+ |- ((enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) = ((\enumeration. (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f))))) enumeration))
T c= c= f0 cenumerator csizel f1 cLENGTH cFST f2 * / c= b0 cenumerator csizel f1 cLENGTH cFST f2 f0
+ (~ ((((containsDuplicateEdge g) f) v) e)) |- (((((containsDuplicateEdge g) f) v) e) = F)
T c==> c~ ccontainsDuplicateEdge f0 f1 f2 f3 c= ccontainsDuplicateEdge f0 f1 f2 f3 cF
+ ((\enumeration. (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f))))) enumeration) |- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f))))
T c==> * / c= b0 cenumerator csizel f0 cLENGTH cFST f1 f2 c= f2 cenumerator csizel f0 cLENGTH cFST f1
+ |- (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) ==> ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))))))))
T c==> call part cuniq cfgraph f0 c==> cgood_faces_v3 f0 c==> c= * part cvertices_set2 f0 * part celements_of_list cfgraph f0 c==> call / cMEM b0 cFST f1 cMAP part cthe cfilter part cisSome f2 c==> ! c==> c< cSUC b0 csizel f3 c< cindexf f4 cEL b0 f3 cFST f1 cindexf f4 cEL cSUC b0 f3 cFST f1 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f2 c/\ cisSome cEL cSUC b0 f2 c/\ c< cSUC b0 csizel f2 cMEM b1 clist_of_darts cfgraph f0 cMEM b1 clist_pairs cFST f1 c, cthe cEL b0 f2 cthe cEL cSUC b0 f2 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f0 f1 f4 f5 c==> c= f2 cindexToVertexList f1 f4 f5 c==> c= cenumerator csizel f2 cLENGTH cFST f1 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f0 f1 f4 b0 f6 cfilter / c~ ccontainsDuplicateEdge f0 f1 f4 b0 f6 c==> c= cMAP / cindexToVertexList f1 f4 b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f4 b0 f6 cMAP / cindexToVertexList f1 f4 b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f4 b0 f6 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f0 f1 f4 b2 f6 c= b0 cindexToVertexList f1 f4 b1 c= csubdivFace f0 f1 f2 csubdivFace f0 f1 b0
+ (((MAP the) ((filter isSome) vs)) = vs'), (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) /\ (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) /\ ((((prev_el (FST f)) v) = (the (LAST vs))) /\ (((MEM (FST f)) (fgraph g)) /\ (((all uniq) (fgraph g)) /\ ((good_faces_v3 g) /\ (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))))))))))))) |- ((MEM (((subdivFace g) f) vs)) ((((generatePolygon (sizel vs)) v) f) g))
T c==> c= cMAP part cthe cfilter part cisSome f0 f1 c==> c/\ c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c/\ c= cHD f0 cSOME f2 c/\ cisSome cLAST f0 c/\ c= cprev_el cFST f3 f2 cthe cLAST f0 c/\ cMEM cFST f3 cfgraph f4 c/\ call part cuniq cfgraph f4 c/\ cgood_faces_v3 f4 c/\ c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c/\ call / cMEM b0 cFST f3 cMAP part cthe cfilter part cisSome f0 c/\ ! c==> c< cSUC b0 csizel f1 c< cindexf f2 cEL b0 f1 cFST f3 cindexf f2 cEL cSUC b0 f1 cFST f3 ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f3 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 cMEM csubdivFace f4 f3 f0 cgeneratePolygon csizel f0 f2 f3 f4
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((((MAP the) ((filter isSome) vs)) = vs') = (((MAP the) ((filter isSome) vs)) = vs'))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= c= cMAP part cthe cfilter part cisSome f5 f6 c= cMAP part cthe cfilter part cisSome f5 f6
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) /\ (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. (((MEM x) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))))))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 c/\ ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c= cenumerator csizel f3 cLENGTH cFST f2 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 f7 c==> c= cMAP / cindexToVertexList f2 f1 b0 f7 cMAP / cindexToVertexList f2 f1 b0 f7 chold c? / c/\ cMEM b0 cMAP / cindexToVertexList f2 f1 b1 f7 c= csubdivFace f4 f2 f3 csubdivFace f4 f2 b0
+ |- (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) ==> ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))
T c==> cMEM f0 f1 c==> c~ ccontainsDuplicateEdge f2 f3 f4 f0 c==> c= f5 cindexToVertexList f3 f4 f0 c==> c= cenumerator csizel f5 cLENGTH cFST f3 f1 c==> c= cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b0 f1 cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b0 f1 c==> c= cMAP / cindexToVertexList f3 f4 b0 cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b0 f1 cMAP / cindexToVertexList f3 f4 b0 cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b0 f1 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f2 f3 f4 b2 f1 c= b0 cindexToVertexList f3 f4 b1 c= csubdivFace f2 f3 f5 csubdivFace f2 f3 b0
+ (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = vertexLists)
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= cMAP / cindexToVertexList f1 f2 b0 f3 f0
+ (~ ((((containsDuplicateEdge g) f) v) e)), (vs = (((indexToVertexList f) v) e)), (((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))), ((MEM e) enumeration) |- ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) /\ (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))
T c==> c~ ccontainsDuplicateEdge f0 f1 f2 f3 c==> c= f4 cindexToVertexList f1 f2 f3 c==> c= cMAP / cindexToVertexList f1 f2 b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f5 cMAP / cindexToVertexList f1 f2 b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f5 c==> cMEM f3 f5 c/\ c= cMAP / cindexToVertexList f1 f2 b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f5 cMAP / cindexToVertexList f1 f2 b0 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f5 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b2 f5 c= b0 cindexToVertexList f1 f2 b1 c= csubdivFace f0 f1 f4 csubdivFace f0 f1 b0
+ ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) |- ((isSome (LAST vs)) ==> ((((prev_el (FST f)) v) = (the (LAST vs))) ==> (((MEM (FST f)) (fgraph g)) ==> (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. ((?x. (((MEM x) enumeration') /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))))))))))))))))
T c==> c= cHD f0 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f0 f2 c==> c= cfilter / c~ ccontainsDuplicateEdge f3 f4 f1 b0 f5 f6 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c==> cisSome cLAST f0 c==> c= cprev_el cFST f4 f1 cthe cLAST f0 c==> cMEM cFST f4 cfgraph f3 c==> call part cuniq cfgraph f3 c==> cgood_faces_v3 f3 c==> c= * part cvertices_set2 f3 * part celements_of_list cfgraph f3 c==> call / cMEM b0 cFST f4 cMAP part cthe cfilter part cisSome f0 c==> ! c==> c< cSUC b0 csizel f2 c< cindexf f1 cEL b0 f2 cFST f4 cindexf f1 cEL cSUC b0 f2 cFST f4 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f3 cMEM b1 clist_pairs cFST f4 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> cMEM f7 f5 c==> c~ ccontainsDuplicateEdge f3 f4 f1 f7 c==> c= f0 cindexToVertexList f4 f1 f7 c==> c= cenumerator csizel f0 cLENGTH cFST f4 f5 c==> c= cfilter / c~ ccontainsDuplicateEdge f3 f4 f1 b0 f5 f6 c==> c= cMAP / cindexToVertexList f4 f1 b0 f6 cMAP / cindexToVertexList f4 f1 b0 f6 chold c? / c/\ c? / c/\ cMEM b1 f6 c= b0 cindexToVertexList f4 f1 b1 c= csubdivFace f3 f4 f0 csubdivFace f3 f4 b0
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. ((?x. (((MEM x) enumeration') /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f5 f6 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 c==> cMEM f7 f5 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f7 c==> c= f3 cindexToVertexList f2 f1 f7 c==> c= cenumerator csizel f3 cLENGTH cFST f2 f5 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f5 f6 c==> c= cMAP / cindexToVertexList f2 f1 b0 f6 cMAP / cindexToVertexList f2 f1 b0 f6 chold c? / c/\ c? / c/\ cMEM b1 f6 c= b0 cindexToVertexList f2 f1 b1 c= csubdivFace f4 f2 f3 csubdivFace f4 f2 b0
+ |- ((\g. (!vs. (!vs'. (((((MAP the) ((filter isSome) vs)) = vs') /\ (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) /\ (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) /\ ((((prev_el (FST f)) v) = (the (LAST vs))) /\ (((MEM (FST f)) (fgraph g)) /\ (((all uniq) (fgraph g)) /\ ((good_faces_v3 g) /\ (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs)))))))))))))))) ==> (?e. (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e))))))))) g)
T * / ! ! c==> c/\ c= cMAP part cthe cfilter part cisSome b1 b2 c/\ c<= cNUMERAL cBIT1 cBIT1 c_0 csizel b1 c/\ c= cHD b1 cSOME f0 c/\ cisSome cLAST b1 c/\ c= cprev_el cFST f1 f0 cthe cLAST b1 c/\ cMEM cFST f1 cfgraph b0 c/\ call part cuniq cfgraph b0 c/\ cgood_faces_v3 b0 c/\ c= * part cvertices_set2 b0 * part celements_of_list cfgraph b0 c/\ call / cMEM b3 cFST f1 cMAP part cthe cfilter part cisSome b1 c/\ ! c==> c< cSUC b3 csizel b2 c< cindexf f0 cEL b3 b2 cFST f1 cindexf f0 cEL cSUC b3 b2 cFST f1 ! cLET / cLET_END c==> c/\ cisSome cEL b3 b1 c/\ cisSome cEL cSUC b3 b1 c/\ c< cSUC b3 csizel b1 cMEM b4 clist_of_darts cfgraph b0 cMEM b4 clist_pairs cFST f1 c, cthe cEL b3 b1 cthe cEL cSUC b3 b1 c? / c/\ cMEM b3 cenumerator csizel b1 cLENGTH cFST f1 c/\ c~ ccontainsDuplicateEdge b0 f1 f0 b3 c= b1 cindexToVertexList f1 f0 b3 f2
+ (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))), ((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) |- ((((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = vertexLists) ==> (hold (?x. (((MEM x) vertexLists) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))))))) = ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = vertexLists) ==> (hold (?x. (((MEM x) vertexLists) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c==> cMEM f3 cenumerator csizel f1 cLENGTH cFST f2 c= c==> cMEM f3 f0 c==> c~ ccontainsDuplicateEdge f4 f2 f5 f3 c==> c= f1 cindexToVertexList f2 f5 f3 c==> c= cenumerator csizel f1 cLENGTH cFST f2 f0 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f5 b0 f0 f6 c==> c= cMAP / cindexToVertexList f2 f5 b0 f6 f7 chold c? / c/\ cMEM b0 f7 c= csubdivFace f4 f2 f1 csubdivFace f4 f2 b0 c==> c~ ccontainsDuplicateEdge f4 f2 f5 f3 c==> c= f1 cindexToVertexList f2 f5 f3 c==> c= cenumerator csizel f1 cLENGTH cFST f2 f0 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f5 b0 f0 f6 c==> c= cMAP / cindexToVertexList f2 f5 b0 f6 f7 chold c? / c/\ cMEM b0 f7 c= csubdivFace f4 f2 f1 csubdivFace f4 f2 b0
+ ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) |- (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) ==> ((((prev_el (FST f)) v) = (the (LAST vs))) ==> (((MEM (FST f)) (fgraph g)) ==> (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. (((MEM x) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))))))))))))
T c==> c= cHD f0 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f0 f2 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c/\ c= cHD f0 cSOME f1 c==> cisSome cLAST f0 c==> c= cprev_el cFST f3 f1 cthe cLAST f0 c==> cMEM cFST f3 cfgraph f4 c==> call part cuniq cfgraph f4 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> call / cMEM b0 cFST f3 cMAP part cthe cfilter part cisSome f0 c==> ! c==> c< cSUC b0 csizel f2 c< cindexf f1 cEL b0 f2 cFST f3 cindexf f1 cEL cSUC b0 f2 cFST f3 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f3 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f4 f3 f1 f5 c==> c= f0 cindexToVertexList f3 f1 f5 c==> c= cenumerator csizel f0 cLENGTH cFST f3 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f3 f1 b0 f6 f7 c==> c= cMAP / cindexToVertexList f3 f1 b0 f7 cMAP / cindexToVertexList f3 f1 b0 f7 chold c? / c/\ cMEM b0 cMAP / cindexToVertexList f3 f1 b1 f7 c= csubdivFace f4 f3 f0 csubdivFace f4 f3 b0
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (~ ((((containsDuplicateEdge g) f) v) e)), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM e) enumeration), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((~ ((((containsDuplicateEdge g) f) v) e)) /\ ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. (((MEM x) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM f5 f6 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 c/\ c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c= cenumerator csizel f3 cLENGTH cFST f2 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 f7 c==> c= cMAP / cindexToVertexList f2 f1 b0 f7 cMAP / cindexToVertexList f2 f1 b0 f7 chold c? / c/\ cMEM b0 cMAP / cindexToVertexList f2 f1 b1 f7 c= csubdivFace f4 f2 f3 csubdivFace f4 f2 b0
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (~ ((((containsDuplicateEdge g) f) v) e)), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (vs = (((indexToVertexList f) v) e)), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM e) enumeration), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((vs = (((indexToVertexList f) v) e)) /\ ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) ==> (hold (?x. (((MEM x) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM f5 f6 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 c/\ c= f3 cindexToVertexList f2 f1 f5 c==> c= cenumerator csizel f3 cLENGTH cFST f2 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6 f7 c==> c= cMAP / cindexToVertexList f2 f1 b0 f7 cMAP / cindexToVertexList f2 f1 b0 f7 chold c? / c/\ cMEM b0 cMAP / cindexToVertexList f2 f1 b1 f7 c= csubdivFace f4 f2 f3 csubdivFace f4 f2 b0
+ |- (((HD vs) = (SOME v)) ==> ((isSome (LAST vs)) ==> ((((prev_el (FST f)) v) = (the (LAST vs))) ==> (((MEM (FST f)) (fgraph g)) ==> (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) ==> ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))))))))))))
T c==> c= cHD f0 cSOME f1 c==> cisSome cLAST f0 c==> c= cprev_el cFST f2 f1 cthe cLAST f0 c==> cMEM cFST f2 cfgraph f3 c==> call part cuniq cfgraph f3 c==> cgood_faces_v3 f3 c==> c= * part cvertices_set2 f3 * part celements_of_list cfgraph f3 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f0 c==> ! c==> c< cSUC b0 csizel f4 c< cindexf f1 cEL b0 f4 cFST f2 cindexf f1 cEL cSUC b0 f4 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f3 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f3 f2 f1 f5 c==> c= f0 cindexToVertexList f2 f1 f5 c==> c= cenumerator csizel f0 cLENGTH cFST f2 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b0 f6 cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b0 f6 c==> c= cMAP / cindexToVertexList f2 f1 b0 cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b0 f6 cMAP / cindexToVertexList f2 f1 b0 cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b0 f6 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b2 f6 c= b0 cindexToVertexList f2 f1 b1 c= csubdivFace f3 f2 f0 csubdivFace f3 f2 b0
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (~ ((((containsDuplicateEdge g) f) v) e)), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (vs = (((indexToVertexList f) v) e)), (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)), ((\enumeration'. (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) enumeration') |- (((\enumeration'. (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) enumeration') /\ ((MEM (((subdivFace g) f) vs)) ((LET (\enumeration. (LET_END ((LET (\vertexLists. (LET_END ((MAP (\vs. (((subdivFace g) f) vs))) vertexLists)))) ((MAP (\is. (((indexToVertexList f) v) is))) enumeration))))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f5 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c= f3 cindexToVertexList f2 f1 f5 c==> c= f6 cenumerator csizel f3 cLENGTH cFST f2 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM f5 cenumerator csizel f3 cLENGTH cFST f2 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 c==> * / c= b0 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b1 f6 f7 c/\ * / c= b0 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b1 f6 f7 cMEM csubdivFace f4 f2 f3 cLET / cLET_END cLET / cLET_END cMAP / csubdivFace f4 f2 b2 b1 cMAP / cindexToVertexList f2 f1 b1 b0 cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f6
+ |- ((\l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x)))))) l)
T * / c= cMEM f0 cMAP f1 b0 c? / c/\ cMEM b1 b0 c= f0 * f1 b1 f2
+ |- ((!i. t) = t)
T c= ! f0 f0
+ ((\e. (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e))))) e) |- (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e))))
T c==> * / c/\ cMEM b0 cenumerator csizel f0 cLENGTH cFST f1 c/\ c~ ccontainsDuplicateEdge f2 f1 f3 b0 c= f0 cindexToVertexList f1 f3 b0 f4 c/\ cMEM f4 cenumerator csizel f0 cLENGTH cFST f1 c/\ c~ ccontainsDuplicateEdge f2 f1 f3 f4 c= f0 cindexToVertexList f1 f3 f4
+ ((HD vs) = (SOME v)) |- (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) ==> ((((prev_el (FST f)) v) = (the (LAST vs))) ==> (((MEM (FST f)) (fgraph g)) ==> (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) ==> ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))))))))))))
T c==> c= cHD f0 cSOME f1 c/\ c= cHD f0 cSOME f1 c==> cisSome cLAST f0 c==> c= cprev_el cFST f2 f1 cthe cLAST f0 c==> cMEM cFST f2 cfgraph f3 c==> call part cuniq cfgraph f3 c==> cgood_faces_v3 f3 c==> c= * part cvertices_set2 f3 * part celements_of_list cfgraph f3 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f0 c==> ! c==> c< cSUC b0 csizel f4 c< cindexf f1 cEL b0 f4 cFST f2 cindexf f1 cEL cSUC b0 f4 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f3 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f3 f2 f1 f5 c==> c= f0 cindexToVertexList f2 f1 f5 c==> c= cenumerator csizel f0 cLENGTH cFST f2 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b0 f6 cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b0 f6 c==> c= cMAP / cindexToVertexList f2 f1 b0 cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b0 f6 cMAP / cindexToVertexList f2 f1 b0 cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b0 f6 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f3 f2 f1 b2 f6 c= b0 cindexToVertexList f2 f1 b1 c= csubdivFace f3 f2 f0 csubdivFace f3 f2 b0
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((all uniq) (fgraph g)) = ((all uniq) (fgraph g)))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= call part cuniq cfgraph f4 call part cuniq cfgraph f4
+ (isSome (LAST vs)) |- ((isSome (LAST vs)) = T)
T c==> cisSome cLAST f0 c= cisSome cLAST f0 cT
+ (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') ==> ((((MAP (\is. (((indexToVertexList f) v) is))) enumeration') = vertexLists) ==> (hold (?x. (((MEM x) vertexLists) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x))))))))))))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c= f5 cMAP / cindexToVertexList f2 f1 b0 f6 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> cMEM f7 f8 c==> c~ ccontainsDuplicateEdge f4 f2 f1 f7 c==> c= f3 cindexToVertexList f2 f1 f7 c==> c= cenumerator csizel f3 cLENGTH cFST f2 f8 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f2 f1 b0 f8 f6 c==> c= cMAP / cindexToVertexList f2 f1 b0 f6 f5 chold c? / c/\ cMEM b0 f5 c= csubdivFace f4 f2 f3 csubdivFace f4 f2 b0
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration') = (((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = enumeration'))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c= cfilter / c~ ccontainsDuplicateEdge f4 f1 f2 b0 f5 f3 c= cfilter / c~ ccontainsDuplicateEdge f4 f1 f2 b0 f5 f3
+ |- ((\y. (!l. (((MEM y) ((MAP f) l)) = (?x. (((MEM x) l) /\ (y = (f x))))))) y)
T * / ! c= cMEM b0 cMAP f0 b1 c? / c/\ cMEM b2 b1 c= b0 * f0 b2 f1
+ (((MAP the) ((filter isSome) vs)) = vs'), (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) /\ (((HD vs) = (SOME v)) /\ ((isSome (LAST vs)) /\ ((((prev_el (FST f)) v) = (the (LAST vs))) /\ (((MEM (FST f)) (fgraph g)) /\ (((all uniq) (fgraph g)) /\ ((good_faces_v3 g) /\ (((vertices_set2 g) = (elements_of_list (fgraph g))) /\ (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) /\ ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) /\ (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))))))))))))), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) |- ((MEM (((subdivFace g) f) vs)) ((((generatePolygon (sizel vs)) v) f) g))
T c==> c= cMAP part cthe cfilter part cisSome f0 f1 c==> c/\ c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c/\ c= cHD f0 cSOME f2 c/\ cisSome cLAST f0 c/\ c= cprev_el cFST f3 f2 cthe cLAST f0 c/\ cMEM cFST f3 cfgraph f4 c/\ call part cuniq cfgraph f4 c/\ cgood_faces_v3 f4 c/\ c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c/\ call / cMEM b0 cFST f3 cMAP part cthe cfilter part cisSome f0 c/\ ! c==> c< cSUC b0 csizel f1 c< cindexf f2 cEL b0 f1 cFST f3 cindexf f2 cEL cSUC b0 f1 cFST f3 ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f3 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 cMEM csubdivFace f4 f3 f0 cgeneratePolygon csizel f0 f2 f3 f4
- |- ((?x. t) = t)
T c= c? / f0 f0
+ |- ((((MAP the) ((filter isSome) vs)) = vs') ==> (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) ==> (((HD vs) = (SOME v)) ==> ((isSome (LAST vs)) ==> ((((prev_el (FST f)) v) = (the (LAST vs))) ==> (((MEM (FST f)) (fgraph g)) ==> (((all uniq) (fgraph g)) ==> ((good_faces_v3 g) ==> (((vertices_set2 g) = (elements_of_list (fgraph g))) ==> (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) ==> ((!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))) ==> ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) ==> (((MEM e) enumeration) ==> ((~ ((((containsDuplicateEdge g) f) v) e)) ==> ((vs = (((indexToVertexList f) v) e)) ==> ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) ==> ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) ==> ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) ==> (hold (?x. ((?x. (((MEM x) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) /\ (x = (((indexToVertexList f) v) x)))) /\ ((((subdivFace g) f) vs) = (((subdivFace g) f) x)))))))))))))))))))))))
T c==> c= cMAP part cthe cfilter part cisSome f0 f1 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f0 c==> c= cHD f0 cSOME f2 c==> cisSome cLAST f0 c==> c= cprev_el cFST f3 f2 cthe cLAST f0 c==> cMEM cFST f3 cfgraph f4 c==> call part cuniq cfgraph f4 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> call / cMEM b0 cFST f3 cMAP part cthe cfilter part cisSome f0 c==> ! c==> c< cSUC b0 csizel f1 c< cindexf f2 cEL b0 f1 cFST f3 cindexf f2 cEL cSUC b0 f1 cFST f3 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f0 c/\ cisSome cEL cSUC b0 f0 c/\ c< cSUC b0 csizel f0 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f3 c, cthe cEL b0 f0 cthe cEL cSUC b0 f0 c==> cMEM f5 f6 c==> c~ ccontainsDuplicateEdge f4 f3 f2 f5 c==> c= f0 cindexToVertexList f3 f2 f5 c==> c= cenumerator csizel f0 cLENGTH cFST f3 f6 c==> c= cfilter / c~ ccontainsDuplicateEdge f4 f3 f2 b0 f6 cfilter / c~ ccontainsDuplicateEdge f4 f3 f2 b0 f6 c==> c= cMAP / cindexToVertexList f3 f2 b0 cfilter / c~ ccontainsDuplicateEdge f4 f3 f2 b0 f6 cMAP / cindexToVertexList f3 f2 b0 cfilter / c~ ccontainsDuplicateEdge f4 f3 f2 b0 f6 chold c? / c/\ c? / c/\ cMEM b1 cfilter / c~ ccontainsDuplicateEdge f4 f3 f2 b2 f6 c= b0 cindexToVertexList f3 f2 b1 c= csubdivFace f4 f3 f0 csubdivFace f4 f3 b0
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((MEM e) enumeration) = ((MEM e) enumeration))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= cMEM f4 f5 cMEM f4 f5
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) = (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= ! cLET / cLET_END c==> c/\ cisSome cEL b0 f5 c/\ cisSome cEL cSUC b0 f5 c/\ c< cSUC b0 csizel f5 cMEM b1 clist_of_darts cfgraph f1 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f5 cthe cEL cSUC b0 f5 ! cLET / cLET_END c==> c/\ cisSome cEL b0 f5 c/\ cisSome cEL cSUC b0 f5 c/\ c< cSUC b0 csizel f5 cMEM b1 clist_of_darts cfgraph f1 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f5 cthe cEL cSUC b0 f5
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- ((isSome (LAST vs)) = (isSome (LAST vs)))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= cisSome cLAST f1 cisSome cLAST f1
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) = (((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c= cenumerator csizel f4 cLENGTH cFST f1 f5 c= cenumerator csizel f4 cLENGTH cFST f1 f5
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((((prev_el (FST f)) v) = (the (LAST vs))) = (((prev_el (FST f)) v) = (the (LAST vs))))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= c= cprev_el cFST f2 f3 cthe cLAST f5 c= cprev_el cFST f2 f3 cthe cLAST f5
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((vs = (((indexToVertexList f) v) e)) = (vs = (((indexToVertexList f) v) e)))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c= f4 cindexToVertexList f1 f2 f5 c= f4 cindexToVertexList f1 f2 f5
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) = (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= ! cLET / cLET_END c==> c/\ cisSome cEL b0 f4 c/\ cisSome cEL cSUC b0 f4 c/\ c< cSUC b0 csizel f4 cMEM b1 clist_of_darts cfgraph f5 cMEM b1 clist_pairs cFST f1 c, cthe cEL b0 f4 cthe cEL cSUC b0 f4 ! cLET / cLET_END c==> c/\ cisSome cEL b0 f4 c/\ cisSome cEL cSUC b0 f4 c/\ c< cSUC b0 csizel f4 cMEM b1 clist_of_darts cfgraph f5 cMEM b1 clist_pairs cFST f1 c, cthe cEL b0 f4 cthe cEL cSUC b0 f4
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((isSome (LAST vs)) = (isSome (LAST vs)))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= cisSome cLAST f5 cisSome cLAST f5
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((((prev_el (FST f)) v) = (the (LAST vs))) = (((prev_el (FST f)) v) = (the (LAST vs))))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c= cprev_el cFST f1 f2 cthe cLAST f4 c= cprev_el cFST f1 f2 cthe cLAST f4
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- ((((MAP the) ((filter isSome) vs)) = vs') = (((MAP the) ((filter isSome) vs)) = vs'))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= c= cMAP part cthe cfilter part cisSome f1 f3 c= cMAP part cthe cfilter part cisSome f1 f3
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) = ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f4 c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f4
- (((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration) = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = T)
T c==> c= cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f3 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f3 c= c= cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f3 cfilter / c~ ccontainsDuplicateEdge f0 f1 f2 b0 f3 cT
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((((MAP the) ((filter isSome) vs)) = vs') = (((MAP the) ((filter isSome) vs)) = vs'))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c= cMAP part cthe cfilter part cisSome f4 f5 c= cMAP part cthe cfilter part cisSome f4 f5
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- (((MEM e) enumeration) = ((MEM e) enumeration))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= cMEM f5 f4 cMEM f5 f4
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((good_faces_v3 g) = (good_faces_v3 g))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= cgood_faces_v3 f4 cgood_faces_v3 f4
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- ((~ ((((containsDuplicateEdge g) f) v) e)) = (~ ((((containsDuplicateEdge g) f) v) e)))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= c~ ccontainsDuplicateEdge f3 f2 f4 f5 c~ ccontainsDuplicateEdge f3 f2 f4 f5
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) = ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f5 call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f5
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((HD vs) = (SOME v)) = ((HD vs) = (SOME v)))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c= cHD f4 cSOME f2 c= cHD f4 cSOME f2
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((good_faces_v3 g) = (good_faces_v3 g))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= cgood_faces_v3 f1 cgood_faces_v3 f1
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- ((good_faces_v3 g) = (good_faces_v3 g))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= cgood_faces_v3 f3 cgood_faces_v3 f3
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((vs = (((indexToVertexList f) v) e)) = (vs = (((indexToVertexList f) v) e)))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= c= f5 cindexToVertexList f2 f3 f6 c= f5 cindexToVertexList f2 f3 f6
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- ((((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration) = (((enumerator (sizel vs)) (LENGTH (FST f))) = enumeration))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= c= cenumerator csizel f5 cLENGTH cFST f2 f4 c= cenumerator csizel f5 cLENGTH cFST f2 f4
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- (((MEM (FST f)) (fgraph g)) = ((MEM (FST f)) (fgraph g)))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= cMEM cFST f2 cfgraph f1 cMEM cFST f2 cfgraph f1
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- (((HD vs) = (SOME v)) = ((HD vs) = (SOME v)))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= c= cHD f5 cSOME f3 c= cHD f5 cSOME f3
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((vertices_set2 g) = (elements_of_list (fgraph g))) = ((vertices_set2 g) = (elements_of_list (fgraph g))))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) = ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f1 call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f1
- (!i. (((SUC i) < (sizel vs')) ==> ((((indexf v) ((EL i) vs')) (FST f)) < (((indexf v) ((EL (SUC i)) vs')) (FST f))))), (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))), (?e. (((MEM e) ((enumerator (sizel vs)) (LENGTH (FST f)))) /\ ((~ ((((containsDuplicateEdge g) f) v) e)) /\ (vs = (((indexToVertexList f) v) e))))), (isSome (LAST vs)), (good_faces_v3 g), ((vertices_set2 g) = (elements_of_list (fgraph g))), (((prev_el (FST f)) v) = (the (LAST vs))), ((HD vs) = (SOME v)), (((MAP the) ((filter isSome) vs)) = vs'), ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)), ((MEM (FST f)) (fgraph g)), ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))), ((all uniq) (fgraph g)) |- ((MEM (((subdivFace g) f) vs)) ((((generatePolygon (sizel vs)) v) f) g))
T c==> ! c==> c< cSUC b0 csizel f0 c< cindexf f1 cEL b0 f0 cFST f2 cindexf f1 cEL cSUC b0 f0 cFST f2 c==> ! cLET / cLET_END c==> c/\ cisSome cEL b0 f3 c/\ cisSome cEL cSUC b0 f3 c/\ c< cSUC b0 csizel f3 cMEM b1 clist_of_darts cfgraph f4 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f3 cthe cEL cSUC b0 f3 c==> c? / c/\ cMEM b0 cenumerator csizel f3 cLENGTH cFST f2 c/\ c~ ccontainsDuplicateEdge f4 f2 f1 b0 c= f3 cindexToVertexList f2 f1 b0 c==> cisSome cLAST f3 c==> cgood_faces_v3 f4 c==> c= * part cvertices_set2 f4 * part celements_of_list cfgraph f4 c==> c= cprev_el cFST f2 f1 cthe cLAST f3 c==> c= cHD f3 cSOME f1 c==> c= cMAP part cthe cfilter part cisSome f3 f0 c==> c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f3 c==> cMEM cFST f2 cfgraph f4 c==> call / cMEM b0 cFST f2 cMAP part cthe cfilter part cisSome f3 c==> call part cuniq cfgraph f4 cMEM csubdivFace f4 f2 f3 cgeneratePolygon csizel f3 f1 f2 f4
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))) = ((all (\t. ((MEM t) (FST f)))) ((MAP the) ((filter isSome) vs))))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= call / cMEM b0 cFST f1 cMAP part cthe cfilter part cisSome f4 call / cMEM b0 cFST f1 cMAP part cthe cfilter part cisSome f4
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- (((HD vs) = (SOME v)) = ((HD vs) = (SOME v)))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= c= cHD f1 cSOME f3 c= cHD f1 cSOME f3
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((isSome (LAST vs)) = (isSome (LAST vs)))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= cisSome cLAST f4 cisSome cLAST f4
- (((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) |- ((((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) = ((MAP (\is. (((indexToVertexList f) v) is))) ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration))) = T)
T c==> c= cMAP / cindexToVertexList f0 f1 b0 cfilter / c~ ccontainsDuplicateEdge f2 f0 f1 b0 f3 cMAP / cindexToVertexList f0 f1 b0 cfilter / c~ ccontainsDuplicateEdge f2 f0 f1 b0 f3 c= c= cMAP / cindexToVertexList f0 f1 b0 cfilter / c~ ccontainsDuplicateEdge f2 f0 f1 b0 f3 cMAP / cindexToVertexList f0 f1 b0 cfilter / c~ ccontainsDuplicateEdge f2 f0 f1 b0 f3 cT
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- ((vs = (((indexToVertexList f) v) e)) = (vs = (((indexToVertexList f) v) e)))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= c= f1 cindexToVertexList f2 f3 f4 c= f1 cindexToVertexList f2 f3 f4
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- (((MEM (FST f)) (fgraph g)) = ((MEM (FST f)) (fgraph g)))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= cMEM cFST f1 cfgraph f4 cMEM cFST f1 cfgraph f4
- |- (((\is. (f is)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- (((MEM (FST f)) (fgraph g)) = ((MEM (FST f)) (fgraph g)))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= cMEM cFST f2 cfgraph f3 cMEM cFST f2 cfgraph f3
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) = ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f5 c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f5
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- ((!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))) = (!i. ((LET (\d. (LET_END (((isSome ((EL i) vs)) /\ ((isSome ((EL (SUC i)) vs)) /\ (((SUC i) < (sizel vs)) /\ ((MEM d) (list_of_darts (fgraph g)))))) ==> ((MEM d) (list_pairs (FST f))))))) ((the ((EL i) vs)) , (the ((EL (SUC i)) vs))))))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= ! cLET / cLET_END c==> c/\ cisSome cEL b0 f1 c/\ cisSome cEL cSUC b0 f1 c/\ c< cSUC b0 csizel f1 cMEM b1 clist_of_darts cfgraph f3 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f1 cthe cEL cSUC b0 f1 ! cLET / cLET_END c==> c/\ cisSome cEL b0 f1 c/\ cisSome cEL cSUC b0 f1 c/\ c< cSUC b0 csizel f1 cMEM b1 clist_of_darts cfgraph f3 cMEM b1 clist_pairs cFST f2 c, cthe cEL b0 f1 cthe cEL cSUC b0 f1
- (enumeration' = ((filter (\is. (~ ((((containsDuplicateEdge g) f) v) is)))) enumeration)) |- (((all uniq) (fgraph g)) = ((all uniq) (fgraph g)))
T c==> c= f0 cfilter / c~ ccontainsDuplicateEdge f1 f2 f3 b0 f4 c= call part cuniq cfgraph f1 call part cuniq cfgraph f1
- (vertexLists = ((MAP (\is. (((indexToVertexList f) v) is))) enumeration')) |- ((~ ((((containsDuplicateEdge g) f) v) e)) = (~ ((((containsDuplicateEdge g) f) v) e)))
T c==> c= f0 cMAP / cindexToVertexList f1 f2 b0 f3 c= c~ ccontainsDuplicateEdge f4 f1 f2 f5 c~ ccontainsDuplicateEdge f4 f1 f2 f5
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- ((((prev_el (FST f)) v) = (the (LAST vs))) = (((prev_el (FST f)) v) = (the (LAST vs))))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= c= cprev_el cFST f2 f3 cthe cLAST f1 c= cprev_el cFST f2 f3 cthe cLAST f1
- (enumeration = ((enumerator (sizel vs)) (LENGTH (FST f)))) |- (((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)) = ((NUMERAL (BIT1 (BIT1 _0))) <= (sizel vs)))
T c==> c= f0 cenumerator csizel f1 cLENGTH cFST f2 c= c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f1 c<= cNUMERAL cBIT1 cBIT1 c_0 csizel f1
