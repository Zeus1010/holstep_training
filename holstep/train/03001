N Reduction3.subdivFace0_beta_foldl_steps
C |- (!vos. (!p. ((((((subdivFace0_beta (SND (SND p))) (FST (SND p))) (FST (FST p))) (SND (FST p))) vos) = (((foldl subdiv_single_step) p) vos))))
T c= csubdivFace0_beta cSND cSND f0 cFST cSND f0 cFST cFST f0 cSND cFST f0 f1 cfoldl part csubdiv_single_step f0 f1
D TRUTH
A |- T
T cT
D COND_CLAUSES
A |- (!t1. (!t2. (((((COND T) t1) t2) = t1) /\ ((((COND F) t1) t2) = t2))))
T c/\ c= cCOND cT f0 f1 f0 c= cCOND cF f0 f1 f1
D COND_ELIM_THM
A |- ((P (((COND c) x) y)) = ((c ==> (P x)) /\ ((~ c) ==> (P y))))
T c= * f0 cCOND f1 f2 f3 c/\ c==> f1 * f0 f2 c==> c~ f1 * f0 f3
D LET_DEF
A |- (!f. (!x. (((LET f) x) = (f x))))
T c= cLET f0 f1 * f0 f1
D LET_END_DEF
A |- (!t. ((LET_END t) = t))
T c= cLET_END f0 f0
D FST
A |- (!x. (!y. ((FST (x , y)) = x)))
T c= cFST c, f0 f1 f0
D SND
A |- (!x. (!y. ((SND (x , y)) = y)))
T c= cSND c, f0 f1 f1
D PAIR
A |- (!x. (((FST x) , (SND x)) = x))
T c= c, cFST f0 cSND f0 f0
D list_INDUCT
A |- (!P. (((P NIL) /\ (!a0. (!a1. ((P a1) ==> (P ((CONS a0) a1)))))) ==> (!x. (P x))))
T c==> c/\ * f0 cNIL ! ! c==> * f0 b1 * f0 cCONS b0 b1 ! * f0 b0
D Seq.foldl
A |- (((((foldl f) z) ((CONS x) s)) = (((foldl f) ((f z) x)) s)) /\ ((((foldl f) z) NIL) = z))
T c/\ c= cfoldl f0 f1 cCONS f2 f3 cfoldl f0 * * f0 f1 f2 f3 c= cfoldl f0 f1 cNIL f1
D Reduction3.subdivFace0_beta
A |- (((((((subdivFace0_beta g) f) uo) n) NIL) = ((uo , n) , (f , g))) /\ ((((((subdivFace0_beta g) f) uo) n) ((CONS vo) vos)) = (((COND (uo = NONE)) (((((subdivFace0_beta g) f) vo) (NUMERAL _0)) vos)) (((COND (vo = NONE)) (((((subdivFace0_beta g) f) uo) (SUC n)) vos)) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex f) u) = v) /\ (n = (NUMERAL _0)))) (((((subdivFace0_beta g) f) vo) (NUMERAL _0)) vos)) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END (((((subdivFace0_beta g') f2) vo) (NUMERAL _0)) vos))))))))) (((((splitFace g) u) v) f) ws))))) ((upt (countVertices g)) ((countVertices g) + n))))))) (the uo))))) (the vo))))))
T c/\ c= csubdivFace0_beta f0 f1 f2 f3 cNIL c, c, f2 f3 c, f1 f0 c= csubdivFace0_beta f0 f1 f2 f3 cCONS f4 f5 cCOND c= f2 cNONE csubdivFace0_beta f0 f1 f4 cNUMERAL c_0 f5 cCOND c= f4 cNONE csubdivFace0_beta f0 f1 f2 cSUC f3 f5 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex f1 b1 b0 c= f3 cNUMERAL c_0 csubdivFace0_beta f0 f1 f4 cNUMERAL c_0 f5 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b3 c, b4 c, b5 b6 cLET_END csubdivFace0_beta b6 b5 f4 cNUMERAL c_0 f5 csplitFace f0 b1 b0 f1 b2 cupt ccountVertices f0 c+ ccountVertices f0 f3 cthe f2 cthe f4
D Reduction3.LAMBDA_TRIPLE
A |- ((GABS (\f. (!x. (!y. (!z. ((GEQ (f (x , (y , z)))) (((P x) y) z))))))) = (\p. (((P (FST p)) (FST (SND p))) (SND (SND p)))))
T c= * part cGABS / ! ! ! cGEQ * b0 c, b1 c, b2 b3 * * * f0 b1 b2 b3 / * * * f0 cFST b0 cFST cSND b0 cSND cSND b0
D Reduction3.subdiv_single_step_paired
A |- (!p. (!vo. (((subdiv_single_step p) vo) = (((COND ((FST (FST p)) = NONE)) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) (((COND (vo = NONE)) (((FST (FST p)) , (SUC (SND (FST p)))) , ((FST (SND p)) , (SND (SND p))))) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex (FST (SND p))) u) = v) /\ ((SND (FST p)) = (NUMERAL _0)))) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END ((vo , (NUMERAL _0)) , (f2 , g')))))))))) (((((splitFace (SND (SND p))) u) v) (FST (SND p))) ws))))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))) (the (FST (FST p))))))) (the vo)))))))
T c= csubdiv_single_step f0 f1 cCOND c= cFST cFST f0 cNONE c, c, f1 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cCOND c= f1 cNONE c, c, cFST cFST f0 cSUC cSND cFST f0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex cFST cSND f0 b1 b0 c= cSND cFST f0 cNUMERAL c_0 c, c, f1 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b3 c, b4 c, b5 b6 cLET_END c, c, f1 cNUMERAL c_0 c, b5 b6 csplitFace cSND cSND f0 b1 b0 cFST cSND f0 b2 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cthe cFST cFST f0 cthe f1
- (~ (h = NONE)) |- (((~ (NONE = h)) ==> ((NONE = h) = F)) = ((NONE = h) = F))
T c==> c~ c= f0 cNONE c= c==> c~ c= cNONE f0 c= c= cNONE f0 cF c= c= cNONE f0 cF
- ((FST (FST p)) = NONE) |- (NONE = (FST (FST p)))
T c==> c= cFST cFST f0 cNONE c= cNONE cFST cFST f0
- (~ (h = NONE)) |- ((NONE = h) = F)
T c==> c~ c= f0 cNONE c= c= cNONE f0 cF
+ |- ((\x. (((LET f) x) = (f x))) x)
T * / c= cLET f0 b0 * f0 b0 f1
+ |- (((FST (FST p)) = NONE) ==> ((((((subdivFace0_beta (SND (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (FST ((h , (NUMERAL _0)) , (SND p))))) (SND (FST ((h , (NUMERAL _0)) , (SND p))))) t) = (((COND ((FST (FST p)) = NONE)) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((COND (h = NONE)) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) (FST (FST p))) (SUC (SND (FST p)))) t)) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex (FST (SND p))) u) = v) /\ ((SND (FST p)) = (NUMERAL _0)))) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END (((((subdivFace0_beta g') f2) h) (NUMERAL _0)) t))))))))) (((((splitFace (SND (SND p))) u) v) (FST (SND p))) ws))))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))) (the (FST (FST p))))))) (the h))))))
T c==> c= cFST cFST f0 cNONE c= csubdivFace0_beta cSND cSND c, c, f1 cNUMERAL c_0 cSND f0 cFST cSND c, c, f1 cNUMERAL c_0 cSND f0 cFST cFST c, c, f1 cNUMERAL c_0 cSND f0 cSND cFST c, c, f1 cNUMERAL c_0 cSND f0 f2 cCOND c= cFST cFST f0 cNONE csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 cCOND c= f1 cNONE csubdivFace0_beta cSND cSND f0 cFST cSND f0 cFST cFST f0 cSUC cSND cFST f0 f2 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex cFST cSND f0 b1 b0 c= cSND cFST f0 cNUMERAL c_0 csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b3 c, b4 c, b5 b6 cLET_END csubdivFace0_beta b6 b5 f1 cNUMERAL c_0 f2 csplitFace cSND cSND f0 b1 b0 cFST cSND f0 b2 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cthe cFST cFST f0 cthe f1
+ |- (((!x. (((LET f) x) = (f x))) ==> ((\x. (((LET f) x) = (f x))) x)) = ((\x. (((LET f) x) = (f x))) x))
T c= c==> ! c= cLET f0 b0 * f0 b0 * / c= cLET f0 b0 * f0 b0 f1 * / c= cLET f0 b0 * f0 b0 f1
+ |- ((!p. ((((foldl subdiv_single_step) p) NIL) = (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) (FST (FST p))) (SND (FST p))) NIL))) /\ (!h. (!t. ((!p. ((((foldl subdiv_single_step) p) t) = (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) (FST (FST p))) (SND (FST p))) t))) ==> (!p. ((((foldl subdiv_single_step) p) ((CONS h) t)) = (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) (FST (FST p))) (SND (FST p))) ((CONS h) t))))))))
T c/\ ! c= cfoldl part csubdiv_single_step b0 cNIL csubdivFace0_beta cSND cSND b0 cFST cSND b0 cFST cFST b0 cSND cFST b0 cNIL ! ! c==> ! c= cfoldl part csubdiv_single_step b2 b1 csubdivFace0_beta cSND cSND b2 cFST cSND b2 cFST cFST b2 cSND cFST b2 b1 ! c= cfoldl part csubdiv_single_step b2 cCONS b0 b1 csubdivFace0_beta cSND cSND b2 cFST cSND b2 cFST cFST b2 cSND cFST b2 cCONS b0 b1
- (~ ((FST (FST p)) = NONE)) |- (((~ (NONE = (FST (FST p)))) ==> ((NONE = (FST (FST p))) = F)) = ((NONE = (FST (FST p))) = F))
T c==> c~ c= cFST cFST f0 cNONE c= c==> c~ c= cNONE cFST cFST f0 c= c= cNONE cFST cFST f0 cF c= c= cNONE cFST cFST f0 cF
+ (~ ((((nextVertex (FST (SND p))) (the (FST (FST p)))) = (the h)) /\ ((SND (FST p)) = (NUMERAL _0)))) |- (((((((subdivFace0_beta (SND (SND ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (FST (SND ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (FST (FST ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (SND (FST ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) t) = (((COND F) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((((subdivFace0_beta (SND (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) (FST (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) h) (NUMERAL _0)) t))) = ((((((subdivFace0_beta (SND (SND ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (FST (SND ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (FST (FST ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (SND (FST ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) t) = (((COND ((((nextVertex (FST (SND p))) (the (FST (FST p)))) = (the h)) /\ ((SND (FST p)) = (NUMERAL _0)))) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((((subdivFace0_beta (SND (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) (FST (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) h) (NUMERAL _0)) t))))
T c==> c~ c/\ c= cnextVertex cFST cSND f0 cthe cFST cFST f0 cthe f1 c= cSND cFST f0 cNUMERAL c_0 c= c= csubdivFace0_beta cSND cSND c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cFST c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cSND cFST c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f2 cCOND cF csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 csubdivFace0_beta cSND cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f1 cNUMERAL c_0 f2 c= csubdivFace0_beta cSND cSND c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cFST c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cSND cFST c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f2 cCOND c/\ c= cnextVertex cFST cSND f0 cthe cFST cFST f0 cthe f1 c= cSND cFST f0 cNUMERAL c_0 csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 csubdivFace0_beta cSND cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f1 cNUMERAL c_0 f2
+ (~ ((((nextVertex (FST (SND p))) (the (FST (FST p)))) = (the h)) /\ ((SND (FST p)) = (NUMERAL _0)))) |- (((((((subdivFace0_beta (SND (SND ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (FST (SND ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (FST (FST ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (SND (FST ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) t) = (((COND ((((nextVertex (FST (SND p))) (the (FST (FST p)))) = (the h)) /\ ((SND (FST p)) = (NUMERAL _0)))) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((((subdivFace0_beta (SND (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) (FST (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) h) (NUMERAL _0)) t))) = ((((((subdivFace0_beta (SND (SND ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (FST (SND ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (FST (FST ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) (SND (FST ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))))) t) = (((COND F) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((((subdivFace0_beta (SND (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) (FST (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) h) (NUMERAL _0)) t))))
T c==> c~ c/\ c= cnextVertex cFST cSND f0 cthe cFST cFST f0 cthe f1 c= cSND cFST f0 cNUMERAL c_0 c= c= csubdivFace0_beta cSND cSND c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cFST c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cSND cFST c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f2 cCOND c/\ c= cnextVertex cFST cSND f0 cthe cFST cFST f0 cthe f1 c= cSND cFST f0 cNUMERAL c_0 csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 csubdivFace0_beta cSND cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f1 cNUMERAL c_0 f2 c= csubdivFace0_beta cSND cSND c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cFST c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cSND cFST c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f2 cCOND cF csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 csubdivFace0_beta cSND cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f1 cNUMERAL c_0 f2
+ ((FST (FST p)) = NONE) |- (((((((subdivFace0_beta (SND (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (FST ((h , (NUMERAL _0)) , (SND p))))) (SND (FST ((h , (NUMERAL _0)) , (SND p))))) t) = (((COND T) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((COND (h = NONE)) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) (FST (FST p))) (SUC (SND (FST p)))) t)) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex (FST (SND p))) u) = v) /\ ((SND (FST p)) = (NUMERAL _0)))) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END (((((subdivFace0_beta g') f2) h) (NUMERAL _0)) t))))))))) (((((splitFace (SND (SND p))) u) v) (FST (SND p))) ws))))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))) (the (FST (FST p))))))) (the h))))) = ((((((subdivFace0_beta (SND (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (FST ((h , (NUMERAL _0)) , (SND p))))) (SND (FST ((h , (NUMERAL _0)) , (SND p))))) t) = (((COND ((FST (FST p)) = NONE)) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((COND (h = NONE)) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) (FST (FST p))) (SUC (SND (FST p)))) t)) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex (FST (SND p))) u) = v) /\ ((SND (FST p)) = (NUMERAL _0)))) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END (((((subdivFace0_beta g') f2) h) (NUMERAL _0)) t))))))))) (((((splitFace (SND (SND p))) u) v) (FST (SND p))) ws))))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))) (the (FST (FST p))))))) (the h))))))
T c==> c= cFST cFST f0 cNONE c= c= csubdivFace0_beta cSND cSND c, c, f1 cNUMERAL c_0 cSND f0 cFST cSND c, c, f1 cNUMERAL c_0 cSND f0 cFST cFST c, c, f1 cNUMERAL c_0 cSND f0 cSND cFST c, c, f1 cNUMERAL c_0 cSND f0 f2 cCOND cT csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 cCOND c= f1 cNONE csubdivFace0_beta cSND cSND f0 cFST cSND f0 cFST cFST f0 cSUC cSND cFST f0 f2 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex cFST cSND f0 b1 b0 c= cSND cFST f0 cNUMERAL c_0 csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b3 c, b4 c, b5 b6 cLET_END csubdivFace0_beta b6 b5 f1 cNUMERAL c_0 f2 csplitFace cSND cSND f0 b1 b0 cFST cSND f0 b2 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cthe cFST cFST f0 cthe f1 c= csubdivFace0_beta cSND cSND c, c, f1 cNUMERAL c_0 cSND f0 cFST cSND c, c, f1 cNUMERAL c_0 cSND f0 cFST cFST c, c, f1 cNUMERAL c_0 cSND f0 cSND cFST c, c, f1 cNUMERAL c_0 cSND f0 f2 cCOND c= cFST cFST f0 cNONE csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 cCOND c= f1 cNONE csubdivFace0_beta cSND cSND f0 cFST cSND f0 cFST cFST f0 cSUC cSND cFST f0 f2 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex cFST cSND f0 b1 b0 c= cSND cFST f0 cNUMERAL c_0 csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b3 c, b4 c, b5 b6 cLET_END csubdivFace0_beta b6 b5 f1 cNUMERAL c_0 f2 csplitFace cSND cSND f0 b1 b0 cFST cSND f0 b2 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cthe cFST cFST f0 cthe f1
+ (~ (h = NONE)) |- ((h = NONE) = F)
T c==> c~ c= f0 cNONE c= c= f0 cNONE cF
+ |- (((!vo. (((subdiv_single_step p) vo) = (((COND ((FST (FST p)) = NONE)) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) (((COND (vo = NONE)) (((FST (FST p)) , (SUC (SND (FST p)))) , ((FST (SND p)) , (SND (SND p))))) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex (FST (SND p))) u) = v) /\ ((SND (FST p)) = (NUMERAL _0)))) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END ((vo , (NUMERAL _0)) , (f2 , g')))))))))) (((((splitFace (SND (SND p))) u) v) (FST (SND p))) ws))))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))) (the (FST (FST p))))))) (the vo)))))) ==> ((\vo. (((subdiv_single_step p) vo) = (((COND ((FST (FST p)) = NONE)) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) (((COND (vo = NONE)) (((FST (FST p)) , (SUC (SND (FST p)))) , ((FST (SND p)) , (SND (SND p))))) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex (FST (SND p))) u) = v) /\ ((SND (FST p)) = (NUMERAL _0)))) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END ((vo , (NUMERAL _0)) , (f2 , g')))))))))) (((((splitFace (SND (SND p))) u) v) (FST (SND p))) ws))))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))) (the (FST (FST p))))))) (the vo)))))) vo)) = ((\vo. (((subdiv_single_step p) vo) = (((COND ((FST (FST p)) = NONE)) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) (((COND (vo = NONE)) (((FST (FST p)) , (SUC (SND (FST p)))) , ((FST (SND p)) , (SND (SND p))))) ((LET (\v. (LET_END ((LET (\u. (LET_END (((COND ((((nextVertex (FST (SND p))) u) = v) /\ ((SND (FST p)) = (NUMERAL _0)))) ((vo , (NUMERAL _0)) , ((FST (SND p)) , (SND (SND p))))) ((LET (\ws. (LET_END ((LET (GABS (\f. (!f1. (!f2. (!g'. ((GEQ (f (f1 , (f2 , g')))) (LET_END ((vo , (NUMERAL _0)) , (f2 , g')))))))))) (((((splitFace (SND (SND p))) u) v) (FST (SND p))) ws))))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))) (the (FST (FST p))))))) (the vo)))))) vo))
T c= c==> ! c= csubdiv_single_step f0 b0 cCOND c= cFST cFST f0 cNONE c, c, b0 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cCOND c= b0 cNONE c, c, cFST cFST f0 cSUC cSND cFST f0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex cFST cSND f0 b2 b1 c= cSND cFST f0 cNUMERAL c_0 c, c, b0 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b4 c, b5 c, b6 b7 cLET_END c, c, b0 cNUMERAL c_0 c, b6 b7 csplitFace cSND cSND f0 b2 b1 cFST cSND f0 b3 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cthe cFST cFST f0 cthe b0 * / c= csubdiv_single_step f0 b0 cCOND c= cFST cFST f0 cNONE c, c, b0 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cCOND c= b0 cNONE c, c, cFST cFST f0 cSUC cSND cFST f0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex cFST cSND f0 b2 b1 c= cSND cFST f0 cNUMERAL c_0 c, c, b0 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b4 c, b5 c, b6 b7 cLET_END c, c, b0 cNUMERAL c_0 c, b6 b7 csplitFace cSND cSND f0 b2 b1 cFST cSND f0 b3 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cthe cFST cFST f0 cthe b0 f1 * / c= csubdiv_single_step f0 b0 cCOND c= cFST cFST f0 cNONE c, c, b0 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cCOND c= b0 cNONE c, c, cFST cFST f0 cSUC cSND cFST f0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET / cLET_END cCOND c/\ c= cnextVertex cFST cSND f0 b2 b1 c= cSND cFST f0 cNUMERAL c_0 c, c, b0 cNUMERAL c_0 c, cFST cSND f0 cSND cSND f0 cLET / cLET_END cLET * part cGABS / ! ! ! cGEQ * b4 c, b5 c, b6 b7 cLET_END c, c, b0 cNUMERAL c_0 c, b6 b7 csplitFace cSND cSND f0 b2 b1 cFST cSND f0 b3 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cthe cFST cFST f0 cthe b0 f1
+ ((FST (FST p)) = NONE) |- (((FST (FST p)) = NONE) = T)
T c==> c= cFST cFST f0 cNONE c= c= cFST cFST f0 cNONE cT
+ |- (T = ((((((subdivFace0_beta (SND (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (FST ((h , (NUMERAL _0)) , (SND p))))) (SND (FST ((h , (NUMERAL _0)) , (SND p))))) t) = (((COND T) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((((subdivFace0_beta (SND (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) (FST (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) h) (NUMERAL _0)) t))))
T c= cT c= csubdivFace0_beta cSND cSND c, c, f0 cNUMERAL c_0 cSND f1 cFST cSND c, c, f0 cNUMERAL c_0 cSND f1 cFST cFST c, c, f0 cNUMERAL c_0 cSND f1 cSND cFST c, c, f0 cNUMERAL c_0 cSND f1 f2 cCOND cT csubdivFace0_beta cSND cSND f1 cFST cSND f1 f0 cNUMERAL c_0 f2 csubdivFace0_beta cSND cSND csplitFace cSND cSND f1 cthe cFST cFST f1 cthe f0 cFST cSND f1 cupt ccountVertices cSND cSND f1 c+ ccountVertices cSND cSND f1 cSND cFST f1 cFST cSND csplitFace cSND cSND f1 cthe cFST cFST f1 cthe f0 cFST cSND f1 cupt ccountVertices cSND cSND f1 c+ ccountVertices cSND cSND f1 cSND cFST f1 f0 cNUMERAL c_0 f2
+ |- ((((((subdivFace0_beta (SND (SND (((COND ((((nextVertex (FST (SND p))) (the (FST (FST p)))) = (the h)) /\ ((SND (FST p)) = (NUMERAL _0)))) ((h , (NUMERAL _0)) , (SND p))) ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))))) (FST (SND (((COND ((((nextVertex (FST (SND p))) (the (FST (FST p)))) = (the h)) /\ ((SND (FST p)) = (NUMERAL _0)))) ((h , (NUMERAL _0)) , (SND p))) ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))))) (FST (FST (((COND ((((nextVertex (FST (SND p))) (the (FST (FST p)))) = (the h)) /\ ((SND (FST p)) = (NUMERAL _0)))) ((h , (NUMERAL _0)) , (SND p))) ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))))) (SND (FST (((COND ((((nextVertex (FST (SND p))) (the (FST (FST p)))) = (the h)) /\ ((SND (FST p)) = (NUMERAL _0)))) ((h , (NUMERAL _0)) , (SND p))) ((h , (NUMERAL _0)) , (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p))))))))))) t) = (((COND ((((nextVertex (FST (SND p))) (the (FST (FST p)))) = (the h)) /\ ((SND (FST p)) = (NUMERAL _0)))) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((((subdivFace0_beta (SND (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) (FST (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) h) (NUMERAL _0)) t)))
T c= csubdivFace0_beta cSND cSND cCOND c/\ c= cnextVertex cFST cSND f0 cthe cFST cFST f0 cthe f1 c= cSND cFST f0 cNUMERAL c_0 c, c, f1 cNUMERAL c_0 cSND f0 c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND cCOND c/\ c= cnextVertex cFST cSND f0 cthe cFST cFST f0 cthe f1 c= cSND cFST f0 cNUMERAL c_0 c, c, f1 cNUMERAL c_0 cSND f0 c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cFST cCOND c/\ c= cnextVertex cFST cSND f0 cthe cFST cFST f0 cthe f1 c= cSND cFST f0 cNUMERAL c_0 c, c, f1 cNUMERAL c_0 cSND f0 c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cSND cFST cCOND c/\ c= cnextVertex cFST cSND f0 cthe cFST cFST f0 cthe f1 c= cSND cFST f0 cNUMERAL c_0 c, c, f1 cNUMERAL c_0 cSND f0 c, c, f1 cNUMERAL c_0 cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f2 cCOND c/\ c= cnextVertex cFST cSND f0 cthe cFST cFST f0 cthe f1 c= cSND cFST f0 cNUMERAL c_0 csubdivFace0_beta cSND cSND f0 cFST cSND f0 f1 cNUMERAL c_0 f2 csubdivFace0_beta cSND cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 cFST cSND csplitFace cSND cSND f0 cthe cFST cFST f0 cthe f1 cFST cSND f0 cupt ccountVertices cSND cSND f0 c+ ccountVertices cSND cSND f0 cSND cFST f0 f1 cNUMERAL c_0 f2
+ |- ((((((subdivFace0_beta (SND (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (SND ((h , (NUMERAL _0)) , (SND p))))) (FST (FST ((h , (NUMERAL _0)) , (SND p))))) (SND (FST ((h , (NUMERAL _0)) , (SND p))))) t) = (((COND T) (((((subdivFace0_beta (SND (SND p))) (FST (SND p))) h) (NUMERAL _0)) t)) (((((subdivFace0_beta (SND (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) (FST (SND (((((splitFace (SND (SND p))) (the (FST (FST p)))) (the h)) (FST (SND p))) ((upt (countVertices (SND (SND p)))) ((countVertices (SND (SND p))) + (SND (FST p)))))))) h) (NUMERAL _0)) t)))
T c= csubdivFace0_beta cSND cSND c, c, f0 cNUMERAL c_0 cSND f1 cFST cSND c, c, f0 cNUMERAL c_0 cSND f1 cFST cFST c, c, f0 cNUMERAL c_0 cSND f1 cSND cFST c, c, f0 cNUMERAL c_0 cSND f1 f2 cCOND cT csubdivFace0_beta cSND cSND f1 cFST cSND f1 f0 cNUMERAL c_0 f2 csubdivFace0_beta cSND cSND csplitFace cSND cSND f1 cthe cFST cFST f1 cthe f0 cFST cSND f1 cupt ccountVertices cSND cSND f1 c+ ccountVertices cSND cSND f1 cSND cFST f1 cFST cSND csplitFace cSND cSND f1 cthe cFST cFST f1 cthe f0 cFST cSND f1 cupt ccountVertices cSND cSND f1 c+ ccountVertices cSND cSND f1 cSND cFST f1 f0 cNUMERAL c_0 f2
- (~ (h = NONE)) |- (~ (NONE = h))
T c==> c~ c= f0 cNONE c~ c= cNONE f0
- (NONE = (FST (FST p))) |- ((FST (FST p)) = NONE)
T c==> c= cNONE cFST cFST f0 c= cFST cFST f0 cNONE
- (h = NONE) |- (NONE = h)
T c==> c= f0 cNONE c= cNONE f0
- (NONE = h) |- (h = NONE)
T c==> c= cNONE f0 c= f0 cNONE
- |- ((((COND (x = x)) y) z) = y)
T c= cCOND c= f0 f0 f1 f2 f1
- (~ ((FST (FST p)) = NONE)) |- ((NONE = (FST (FST p))) = F)
T c==> c~ c= cFST cFST f0 cNONE c= c= cNONE cFST cFST f0 cF
- (~ ((FST (FST p)) = NONE)) |- (~ (NONE = (FST (FST p))))
T c==> c~ c= cFST cFST f0 cNONE c~ c= cNONE cFST cFST f0
- |- ((t /\ t) = t)
T c= c/\ f0 f0 f0
- |- (((\p. (f p)) y) = (f y))
T c= * / * f0 b0 f1 * f0 f1
