N Seq2.index_eq_size
C |- (!x. (!s. ((~ ((MEM x) s)) = (((indexl x) s) = (sizel s)))))
T c= c~ cMEM f0 f1 c= cindexl f0 f1 csizel f1
D Ssrbool.negbK
A |- (!b. ((~ (~ b)) = b))
T c= c~ c~ f0 f0
D Ssrbool.andbT
A |- (!b. ((b /\ T) = b))
T c= c/\ f0 cT f0
D Ssrnat.ltn_neqAle
A |- (!m. (!n. ((m < n) = ((~ (m = n)) /\ (m <= n)))))
T c= c< f0 f1 c/\ c~ c= f0 f1 c<= f0 f1
D Seq.has_find
A |- (!a. (!s. (((has a) s) = (((find a) s) < (sizel s)))))
T c= chas f0 f1 c< cfind f0 f1 csizel f1
D Seq.find_size
A |- (!a. (!s. (((find a) s) <= (sizel s))))
T c<= cfind f0 f1 csizel f1
D Seq.has_pred1
A |- (!x. (!s. (((has (pred1 x)) s) = ((MEM x) s))))
T c= chas * part cpred1 f0 f1 cMEM f0 f1
D Seq.index
A |- (!x. ((indexl x) = (find (pred1 x))))
T c= * part cindexl f0 * part cfind * part cpred1 f0
+ |- ((\a. (!s. (((find a) s) <= (sizel s)))) a)
T * / ! c<= cfind b0 b1 csizel b1 f0
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (((~ ((MEM x) s)) = (((indexl x) s) = (sizel s))) = T)
T c= c= c~ cMEM f0 f1 c= cindexl f0 f1 csizel f1 cT
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- |- (T = ((((find (pred1 x)) s) = (sizel s)) = (((find (pred1 x)) s) = (sizel s))))
T c= cT c= c= cfind * part cpred1 f0 f1 csizel f1 c= cfind * part cpred1 f0 f1 csizel f1
+ |- ((\x. ((indexl x) = (find (pred1 x)))) x)
T * / c= * part cindexl b0 * part cfind * part cpred1 b0 f0
+ |- ((~ ((has (pred1 x)) s)) = (((find (pred1 x)) s) = (sizel s)))
T c= c~ chas * part cpred1 f0 f1 c= cfind * part cpred1 f0 f1 csizel f1
+ |- (((!s. (((find a) s) <= (sizel s))) ==> ((\s. (((find a) s) <= (sizel s))) s)) = ((\s. (((find a) s) <= (sizel s))) s))
T c= c==> ! c<= cfind f0 b0 csizel b0 * / c<= cfind f0 b0 csizel b0 f1 * / c<= cfind f0 b0 csizel b0 f1
+ |- (((~ (~ (((find (pred1 x)) s) = (sizel s)))) = (((find (pred1 x)) s) = (sizel s))) = ((~ ((~ (((find (pred1 x)) s) = (sizel s))) /\ T)) = (((find (pred1 x)) s) = (sizel s))))
T c= c= c~ c~ c= cfind * part cpred1 f0 f1 csizel f1 c= cfind * part cpred1 f0 f1 csizel f1 c= c~ c/\ c~ c= cfind * part cpred1 f0 f1 csizel f1 cT c= cfind * part cpred1 f0 f1 csizel f1
+ |- (((!a. (!s. (((has a) s) = (((find a) s) < (sizel s))))) ==> ((\a. (!s. (((has a) s) = (((find a) s) < (sizel s))))) a)) = ((\a. (!s. (((has a) s) = (((find a) s) < (sizel s))))) a))
T c= c==> ! ! c= chas b0 b1 c< cfind b0 b1 csizel b1 * / ! c= chas b0 b1 c< cfind b0 b1 csizel b1 f0 * / ! c= chas b0 b1 c< cfind b0 b1 csizel b1 f0
+ (((MEM x) s) = ((has (pred1 x)) s)) |- (((has (pred1 x)) s) = ((MEM x) s))
T c==> c= cMEM f0 f1 chas * part cpred1 f0 f1 c= chas * part cpred1 f0 f1 cMEM f0 f1
+ |- ((~ ((~ (((find (pred1 x)) s) = (sizel s))) /\ (((find (pred1 x)) s) <= (sizel s)))) = (((find (pred1 x)) s) = (sizel s)))
T c= c~ c/\ c~ c= cfind * part cpred1 f0 f1 csizel f1 c<= cfind * part cpred1 f0 f1 csizel f1 c= cfind * part cpred1 f0 f1 csizel f1
+ |- (((~ ((~ (((find (pred1 x)) s) = (sizel s))) /\ T)) = (((find (pred1 x)) s) = (sizel s))) = ((~ ((~ (((find (pred1 x)) s) = (sizel s))) /\ (((find (pred1 x)) s) <= (sizel s)))) = (((find (pred1 x)) s) = (sizel s))))
T c= c= c~ c/\ c~ c= cfind * part cpred1 f0 f1 csizel f1 cT c= cfind * part cpred1 f0 f1 csizel f1 c= c~ c/\ c~ c= cfind * part cpred1 f0 f1 csizel f1 c<= cfind * part cpred1 f0 f1 csizel f1 c= cfind * part cpred1 f0 f1 csizel f1
- |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- |- (((((find (pred1 x)) s) = (sizel s)) = (((find (pred1 x)) s) = (sizel s))) = ((~ (~ (((find (pred1 x)) s) = (sizel s)))) = (((find (pred1 x)) s) = (sizel s))))
T c= c= c= cfind * part cpred1 f0 f1 csizel f1 c= cfind * part cpred1 f0 f1 csizel f1 c= c~ c~ c= cfind * part cpred1 f0 f1 csizel f1 c= cfind * part cpred1 f0 f1 csizel f1
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
