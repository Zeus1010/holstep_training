N List_hypermap.find_face_cons
C |- (!h. (!t. (!d. (((find_face ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))))))
T c= cfind_face cCONS f0 f1 f2 cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
D MAP
A |- ((!f. (((MAP f) NIL) = NIL)) /\ (!f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))))
T c/\ ! c= cMAP b0 cNIL cNIL ! ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2
D List_hypermap.list_of_faces
A |- (!L. ((list_of_faces L) = ((MAP list_pairs) L)))
T c= clist_of_faces f0 cMAP part clist_pairs f0
D List_hypermap.find_list
A |- (!h. (!t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x)))))))
T c/\ c= cfind_list cNIL f0 cNIL c= cfind_list cCONS f1 f2 f0 cCOND cMEM f0 f1 f1 cfind_list f2 f0
D List_hypermap.find_face
A |- (!L. (!d. (((find_face L) d) = ((find_list (list_of_faces L)) d))))
T c= cfind_face f0 f1 cfind_list clist_of_faces f0 f1
- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x)))) |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c==> c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0 c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
+ |- (((!f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) ==> ((\f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) f)) = ((\f. (!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t)))))) f))
T c= c==> ! ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 * / ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 f0 * / ! ! c= cMAP b0 cCONS b1 b2 cCONS * b0 b1 cMAP b0 b2 f0
+ |- ((!d. (((find_face ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))) = T)
T c= ! c= cfind_face cCONS f0 f1 b0 cCOND cMEM b0 clist_pairs f0 clist_pairs f0 cfind_face f1 b0 cT
- |- ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)
T * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- |- (((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = (((find_list ((CONS (list_pairs h)) ((MAP list_pairs) t))) d) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))))
T c= c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 c= cfind_list cCONS clist_pairs f1 cMAP part clist_pairs f2 f0 cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0
+ |- ((\d. (((find_face L) d) = ((find_list (list_of_faces L)) d))) d)
T * / c= cfind_face f0 b0 cfind_list clist_of_faces f0 b0 f1
+ |- ((\x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x))))) x)
T * / c/\ c= cfind_list cNIL b0 cNIL c= cfind_list cCONS f0 f1 b0 cCOND cMEM b0 f0 f0 cfind_list f1 b0 f2
+ |- (((find_list (list_of_faces ((CONS h) t))) d) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d)))
T c= cfind_list clist_of_faces cCONS f0 f1 f2 cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2
+ |- (((!L. ((list_of_faces L) = ((MAP list_pairs) L))) ==> ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L)) = ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L))
T c= c==> ! c= clist_of_faces b0 cMAP part clist_pairs b0 * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0 * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0
+ |- (((!h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) ==> ((\h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) h)) = ((\h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) h))
T c= c==> ! ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 * / ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 f1 * / ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 f1
+ |- (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x)))
T c= cfind_list cCONS f0 f1 f2 cCOND cMEM f2 f0 f0 cfind_list f1 f2
+ |- ((((find_list ((CONS (list_pairs h)) ((MAP list_pairs) t))) d) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))) = (((find_list ((MAP list_pairs) ((CONS h) t))) d) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))))
T c= c= cfind_list cCONS clist_pairs f0 cMAP part clist_pairs f1 f2 cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2 c= cfind_list cMAP part clist_pairs cCONS f0 f1 f2 cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_list cMAP part clist_pairs f1 f2
- |- (((find_list NIL) x) = NIL)
T c= cfind_list cNIL f0 cNIL
+ |- ((((find_face ((CONS h) t)) d) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_face t) d))) = T)
T c= c= cfind_face cCONS f0 f1 f2 cCOND cMEM f2 clist_pairs f0 clist_pairs f0 cfind_face f1 f2 cT
+ |- (((!d. (((find_face L) d) = ((find_list (list_of_faces L)) d))) ==> ((\d. (((find_face L) d) = ((find_list (list_of_faces L)) d))) d)) = ((\d. (((find_face L) d) = ((find_list (list_of_faces L)) d))) d))
T c= c==> ! c= cfind_face f0 b0 cfind_list clist_of_faces f0 b0 * / c= cfind_face f0 b0 cfind_list clist_of_faces f0 b0 f1 * / c= cfind_face f0 b0 cfind_list clist_of_faces f0 b0 f1
+ |- ((\h. (!t. (!x. ((((find_list NIL) x) = NIL) /\ (((find_list ((CONS h) t)) x) = (((COND ((MEM x) h)) h) ((find_list t) x))))))) h)
T * / ! ! c/\ c= cfind_list cNIL b2 cNIL c= cfind_list cCONS b0 b1 b2 cCOND cMEM b2 b0 b0 cfind_list b1 b2 f0
+ |- ((\L. ((list_of_faces L) = ((MAP list_pairs) L))) L)
T * / c= clist_of_faces b0 cMAP part clist_pairs b0 f0
- |- ((x = x) = T)
T c= c= f0 f0 cT
- |- ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)
T * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
+ |- ((\h. (!t. (((MAP f) ((CONS h) t)) = ((CONS (f h)) ((MAP f) t))))) h)
T * / ! c= cMAP f0 cCONS b0 b1 cCONS * f0 b0 cMAP f0 b1 f1
- |- (((MAP f) NIL) = NIL)
T c= cMAP f0 cNIL cNIL
- |- (((!P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) ==> ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P)) = ((\P. (!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))))) P))
T c= c==> ! ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0 * / ! c= c==> b0 ! * b1 b2 ! c==> b0 * b1 b2 f0
- |- (((!f. (((MAP f) NIL) = NIL)) ==> ((\f. (((MAP f) NIL) = NIL)) f)) = ((\f. (((MAP f) NIL) = NIL)) f))
T c= c==> ! c= cMAP b0 cNIL cNIL * / c= cMAP b0 cNIL cNIL f0 * / c= cMAP b0 cNIL cNIL f0
- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x)))) |- ((!x. (P ==> (Q x))) = (P ==> (!x. (Q x))))
T c==> c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0 c= ! c==> f0 * f1 b0 c==> f0 ! * f1 b0
- |- ((\f. (((MAP f) NIL) = NIL)) f)
T * / c= cMAP b0 cNIL cNIL f0
- |- ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))
T c= c==> f0 ! * f1 b0 ! c==> f0 * f1 b0
- |- (((!Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) ==> ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q)) = ((\Q. ((P ==> (!x. (Q x))) = (!x. (P ==> (Q x))))) Q))
T c= c==> ! c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1 * / c= c==> f0 ! * b0 b1 ! c==> f0 * b0 b1 f1
- |- (T = ((((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d)) = (((COND ((MEM d) (list_pairs h))) (list_pairs h)) ((find_list ((MAP list_pairs) t)) d))))
T c= cT c= cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0 cCOND cMEM f0 clist_pairs f1 clist_pairs f1 cfind_list cMAP part clist_pairs f2 f0
