N Hypermap.reduce_exponent
C |- (!s. (!p. (!m. (!n. (!x. ((((permutes p) s) /\ (m <= n)) ==> ((((POWER (inverse p)) m) (((POWER p) n) x)) = (((POWER p) (n - m)) x))))))))
T c==> c/\ cpermutes f0 f1 c<= f2 f3 c= cPOWER * part cinverse f0 f2 cPOWER f0 f3 f4 cPOWER f0 c- f3 f2 f4
D LE_EXISTS
A |- (!m. (!n. ((m <= n) = (?d. (n = (m + d))))))
T c= c<= f0 f1 c? / c= f1 c+ f0 b0
D ADD_SUB2
A |- (!m. (!n. (((m + n) - m) = n)))
T c= c- c+ f0 f1 f0 f1
D PERMUTES_INVERSES
A |- (!p. (!s. (((permutes p) s) ==> ((!x. ((p ((inverse p) x)) = x)) /\ (!x. (((inverse p) (p x)) = x))))))
T c==> cpermutes f0 f1 c/\ ! c= * f0 cinverse f0 b0 b0 ! c= cinverse f0 * f0 b0 b0
D Hypermap.lemma_add_exponent_function
A |- (!p. (!m. (!n. (!x. ((((POWER p) (m + n)) x) = (((POWER p) m) (((POWER p) n) x)))))))
T c= cPOWER f0 c+ f1 f2 f3 cPOWER f0 f1 cPOWER f0 f2 f3
D Hypermap.power_permutation
A |- (!s. (!p. (((permutes p) s) ==> (!n. ((permutes ((POWER p) n)) s)))))
T c==> cpermutes f0 f1 ! cpermutes * * part cPOWER f0 b0 f1
D Hypermap.lemma_power_inverse
A |- (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))))))
T c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 f2 * part cinverse * * part cPOWER f0 f2 c= * part cinverse * * part cPOWER * part cinverse f0 f2 * * part cPOWER f0 f2
+ |- (((permutes ((POWER p) m)) s) ==> (((inverse ((POWER p) m)) (((POWER p) m) (((POWER p) i) x))) = (((POWER p) i) x)))
T c==> cpermutes * * part cPOWER f0 f1 f2 c= cinverse * * part cPOWER f0 f1 cPOWER f0 f1 cPOWER f0 f3 f4 cPOWER f0 f3 f4
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- ((\n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))) n)
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 * / c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0 f2
+ ((permutes p) s) |- ((((POWER (inverse p)) m) (((POWER p) m) (((POWER p) i) x))) = (((POWER p) i) x))
T c==> cpermutes f0 f1 c= cPOWER * part cinverse f0 f2 cPOWER f0 f2 cPOWER f0 f3 f4 cPOWER f0 f3 f4
- (?d. (n = (m + d))), ((permutes p) s) |- ((((POWER (inverse p)) m) (((POWER p) n) x)) = (((POWER p) (n - m)) x))
T c==> c? / c= f0 c+ f1 b0 c==> cpermutes f2 f3 c= cPOWER * part cinverse f2 f1 cPOWER f2 f0 f4 cPOWER f2 c- f0 f1 f4
+ |- (((!x. ((((POWER p) (m + n)) x) = (((POWER p) m) (((POWER p) n) x)))) ==> ((\x. ((((POWER p) (m + n)) x) = (((POWER p) m) (((POWER p) n) x)))) x)) = ((\x. ((((POWER p) (m + n)) x) = (((POWER p) m) (((POWER p) n) x)))) x))
T c= c==> ! c= cPOWER f0 c+ f1 f2 b0 cPOWER f0 f1 cPOWER f0 f2 b0 * / c= cPOWER f0 c+ f1 f2 b0 cPOWER f0 f1 cPOWER f0 f2 b0 f3 * / c= cPOWER f0 c+ f1 f2 b0 cPOWER f0 f1 cPOWER f0 f2 b0 f3
+ ((permutes ((POWER p) m)) s) |- ((!x. ((((POWER p) m) ((inverse ((POWER p) m)) x)) = x)) /\ (!x. (((inverse ((POWER p) m)) (((POWER p) m) x)) = x)))
T c==> cpermutes * * part cPOWER f0 f1 f2 c/\ ! c= cPOWER f0 f1 cinverse * * part cPOWER f0 f1 b0 b0 ! c= cinverse * * part cPOWER f0 f1 cPOWER f0 f1 b0 b0
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))) |- (((!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))) ==> ((\n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))) n)) = ((\n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))) n))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c= c==> ! c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0 * / c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0 f2 * / c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 b0 * part cinverse * * part cPOWER f0 b0 c= * part cinverse * * part cPOWER * part cinverse f0 b0 * * part cPOWER f0 b0 f2
+ ((permutes p) s), ((\d. (n = (m + d))) i) |- (((\d. (n = (m + d))) i) /\ ((((POWER (inverse p)) m) (((POWER p) n) x)) = (((POWER p) (n - m)) x)))
T c==> cpermutes f0 f1 c==> * / c= f2 c+ f3 b0 f4 c/\ * / c= f2 c+ f3 b0 f4 c= cPOWER * part cinverse f0 f3 cPOWER f0 f2 f5 cPOWER f0 c- f2 f3 f5
+ |- ((\s. (((permutes p) s) ==> ((!x. ((p ((inverse p) x)) = x)) /\ (!x. (((inverse p) (p x)) = x))))) s)
T * / c==> cpermutes f0 b0 c/\ ! c= * f0 cinverse f0 b1 b1 ! c= cinverse f0 * f0 b1 b1 f1
+ |- ((!n. (!x. ((((permutes p) s) /\ (m <= n)) ==> ((((POWER (inverse p)) m) (((POWER p) n) x)) = (((POWER p) (n - m)) x))))) = T)
T c= ! ! c==> c/\ cpermutes f0 f1 c<= f2 b0 c= cPOWER * part cinverse f0 f2 cPOWER f0 b0 b1 cPOWER f0 c- b0 f2 b1 cT
+ (!s. (!p. (!n. (((permutes p) s) ==> ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))))))), ((permutes p) s) |- ((((POWER (inverse p)) n) = (inverse ((POWER p) n))) /\ ((inverse ((POWER (inverse p)) n)) = ((POWER p) n)))
T c==> ! ! ! c==> cpermutes b1 b0 c/\ c= * * part cPOWER * part cinverse b1 b2 * part cinverse * * part cPOWER b1 b2 c= * part cinverse * * part cPOWER * part cinverse b1 b2 * * part cPOWER b1 b2 c==> cpermutes f0 f1 c/\ c= * * part cPOWER * part cinverse f0 f2 * part cinverse * * part cPOWER f0 f2 c= * part cinverse * * part cPOWER * part cinverse f0 f2 * * part cPOWER f0 f2
- (?d. (n = (m + d))), ((permutes p) s) |- ((?d. (n = (m + d))) /\ ((((POWER (inverse p)) m) (((POWER p) n) x)) = (((POWER p) (n - m)) x)))
T c==> c? / c= f0 c+ f1 b0 c==> cpermutes f2 f3 c/\ c? / c= f0 c+ f1 b0 c= cPOWER * part cinverse f2 f1 cPOWER f2 f0 f4 cPOWER f2 c- f0 f1 f4
- |- ((?d. t) = t)
T c= c? / f0 f0
- ((permutes ((POWER p) m)) s) |- (!x. ((((POWER p) m) ((inverse ((POWER p) m)) x)) = x))
T c==> cpermutes * * part cPOWER f0 f1 f2 ! c= cPOWER f0 f1 cinverse * * part cPOWER f0 f1 b0 b0
- ((permutes ((POWER p) m)) s) |- (((!x. ((((POWER p) m) ((inverse ((POWER p) m)) x)) = x)) ==> ((\x. ((((POWER p) m) ((inverse ((POWER p) m)) x)) = x)) x)) = ((\x. ((((POWER p) m) ((inverse ((POWER p) m)) x)) = x)) x))
T c==> cpermutes * * part cPOWER f0 f1 f2 c= c==> ! c= cPOWER f0 f1 cinverse * * part cPOWER f0 f1 b0 b0 * / c= cPOWER f0 f1 cinverse * * part cPOWER f0 f1 b0 b0 f3 * / c= cPOWER f0 f1 cinverse * * part cPOWER f0 f1 b0 b0 f3
- ((permutes ((POWER p) m)) s) |- ((\x. ((((POWER p) m) ((inverse ((POWER p) m)) x)) = x)) x)
T c==> cpermutes * * part cPOWER f0 f1 f2 * / c= cPOWER f0 f1 cinverse * * part cPOWER f0 f1 b0 b0 f3
- |- ((x = x) = T)
T c= c= f0 f0 cT
- ((permutes ((POWER p) m)) s) |- ((((POWER p) m) ((inverse ((POWER p) m)) x)) = x)
T c==> cpermutes * * part cPOWER f0 f1 f2 c= cPOWER f0 f1 cinverse * * part cPOWER f0 f1 f3 f3
- ((permutes ((POWER p) m)) s) |- (T = (((inverse ((POWER p) m)) (((POWER p) m) (((POWER p) i) x))) = (((POWER p) i) x)))
T c==> cpermutes * * part cPOWER f0 f1 f2 c= cT c= cinverse * * part cPOWER f0 f1 cPOWER f0 f1 cPOWER f0 f3 f4 cPOWER f0 f3 f4
- ((permutes p) s) |- ((inverse ((POWER (inverse p)) n)) = ((POWER p) n))
T c==> cpermutes f0 f1 c= * part cinverse * * part cPOWER * part cinverse f0 f2 * * part cPOWER f0 f2
